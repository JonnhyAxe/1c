import { Client } from "./client";
export declare abstract class JDBCClient implements Client {
    protected cache: net.sf.ehcache.CacheManager;
    protected connection: java.sql.Connection;
    protected driver: java.sql.Driver;
    protected url: string;
    protected SQL_UNIX_TIMESTAMP: string;
    protected connect(): void;
    getInt(bucket: string, key: string): number | null;
    getFloat(bucket: string, key: string): number | null;
    getString(bucket: string, key: string): string | null;
    getJSON(bucket: string, key: string): any | null;
    setInt(bucket: string, key: string, value: number, ttl?: number): void;
    setFloat(bucket: string, key: string, value: number, ttl?: number): void;
    setString(bucket: string, key: string, value: string, ttl?: number): void;
    setJSON(bucket: string, key: string, json: any, ttl?: number): void;
    fetch(bucket: string, key: string): byte[] | null;
    put(bucket: string, key: string, data: byte[], ttl?: number): void;
    ensureTable(table: string, pkey: string, type: string): void;
    ensureColumn(table: string, column: string, type: string): void;
    ensureIndex(table: string, columns: string[]): void;
    ensureUniqueIndex(table: string, columns: string[]): void;
    one<T>(sql: string, parameters?: any[]): T | null;
    list<T>(sql: string, parameters?: any[]): T[];
    insert(table: string, object: any): void;
    upsert(table: string, object: any): void;
    execute(sql: string, parameters?: any[]): void;
    delete(bucket_or_table: string, key: any): void;
    close(): void;
    private prepareStatement(sql, parameters?);
    private existsTable(table);
    private ensureBucket(bucket, withCache);
    private ensureBucketInCache(bucket);
    private getByType(bucket, key, type);
    private setByType(bucket, key, type, value, ttl?);
    private putToCache(bucket, key, value, ttl?);
    private wipeUpExpiration(bucket);
}
