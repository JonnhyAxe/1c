declare namespace com {
   namespace sun {
      namespace java {
         namespace swing {
            namespace action {
               class ViewMenu extends javax.swing.AbstractAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class SaveAsAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class SaveAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class OpenAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class OkAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class NextAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class NewAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class HelpMenu extends javax.swing.AbstractAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class HelpAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class FinishAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class FileMenu extends javax.swing.AbstractAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class ExitAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class CancelAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class BackAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class ApplyAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class AlignRightAction extends com.sun.java.swing.action.StateChangeAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class AlignLeftAction extends com.sun.java.swing.action.StateChangeAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class AlignCenterAction extends com.sun.java.swing.action.StateChangeAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_ACCELERATOR: javax.swing.KeyStroke
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class AboutAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
                   constructor(arg0: java.lang.String)
               }
               class ActionUtilities {
                   static IMAGE_DIR: java.lang.String
                   constructor()
                   getIcon(arg0: java.lang.String): javax.swing.ImageIcon
               }
               abstract class DelegateAction extends javax.swing.AbstractAction {
                   constructor(arg0: java.lang.String, arg1: javax.swing.Icon)
                   addActionListener(arg0: java.awt.event.ActionListener): void
                   removeActionListener(arg0: java.awt.event.ActionListener): void
                   getActionListeners(): java.awt.event.ActionListener[]
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               abstract class StateChangeAction extends com.sun.java.swing.action.DelegateAction implements java.awt.event.ItemListener {
                   protected selected: boolean
                   constructor(arg0: java.lang.String)
                   constructor(arg0: java.lang.String, arg1: javax.swing.Icon)
                   isSelected(): boolean
                   void: synchronized
                   setItemListener(arg0: java.awt.event.ItemListener): void
                   getItemListener(): java.awt.event.ItemListener
                   itemStateChanged(arg0: java.awt.event.ItemEvent): void
               }
               abstract class ActionManager {
                   protected (: com.sun.java.swing.action.ActionManager
                   static getInstance(): com.sun.java.swing.action.ActionManager
                   protected static setInstance(arg0: com.sun.java.swing.action.ActionManager): void
                   protected addActions(): void
                   protected addAction(arg0: java.lang.String, arg1: javax.swing.Action): void
                   getAction(arg0: java.lang.String): javax.swing.Action
                   getDelegateAction(arg0: java.lang.String): com.sun.java.swing.action.DelegateAction
                   getStateChangeAction(arg0: java.lang.String): com.sun.java.swing.action.StateChangeAction
                   static getIcon(arg0: java.lang.String): javax.swing.ImageIcon
                   setActionEnabled(arg0: java.lang.String, arg1: boolean): void
               }
               
            }
            namespace ui {
               class WizardDlg extends javax.swing.JDialog {
                   constructor(arg0: javax.swing.JFrame, arg1: java.lang.String, arg2: java.util.Vector, arg3: java.util.Vector)
                   constructor(arg0: javax.swing.JFrame, arg1: java.lang.String, arg2: java.util.Vector)
                   constructor(arg0: java.lang.String, arg1: java.util.Vector)
                   setPanels(arg0: java.util.Vector): void
                   reset(): void
                   setWestPanel(arg0: javax.swing.JPanel): void
                   static main(arg0: java.lang.String[]): void
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   static access$000(arg0: com.sun.java.swing.ui.WizardDlg): java.awt.event.ActionListener
                   static access$100(arg0: com.sun.java.swing.ui.WizardDlg): java.awt.event.ActionListener
                   static access$208(arg0: com.sun.java.swing.ui.WizardDlg): int
                   static access$200(arg0: com.sun.java.swing.ui.WizardDlg): int
                   static access$300(arg0: com.sun.java.swing.ui.WizardDlg): int
                   static access$202(arg0: com.sun.java.swing.ui.WizardDlg, arg1: int): int
                   static access$400(arg0: com.sun.java.swing.ui.WizardDlg): javax.swing.JPanel
                   static access$500(arg0: com.sun.java.swing.ui.WizardDlg): java.awt.CardLayout
                   static access$600(arg0: com.sun.java.swing.ui.WizardDlg): java.awt.event.ActionListener
                   static access$700(arg0: com.sun.java.swing.ui.WizardDlg): void
                   static access$210(arg0: com.sun.java.swing.ui.WizardDlg): int
                   static access$800(arg0: com.sun.java.swing.ui.WizardDlg): java.awt.event.ActionListener
               }
               class WizardDlg$2 implements java.awt.event.ActionListener {
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class WizardDlg$1 implements java.awt.event.ActionListener {
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class WizardDlg$BackListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.WizardDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.WizardDlg, arg1: com.sun.java.swing.ui.WizardDlg$1)
               }
               class WizardDlg$NextListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.WizardDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.WizardDlg, arg1: com.sun.java.swing.ui.WizardDlg$1)
               }
               class WizardDlg$FinishListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.WizardDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.WizardDlg, arg1: com.sun.java.swing.ui.WizardDlg$1)
               }
               class WizardDlg$CancelListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.WizardDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.WizardDlg, arg1: com.sun.java.swing.ui.WizardDlg$1)
               }
               class ToggleActionPropertyChangeListener implements java.beans.PropertyChangeListener {
                   constructor(arg0: javax.swing.AbstractButton)
                   propertyChange(arg0: java.beans.PropertyChangeEvent): void
               }
               class TabsDlg extends javax.swing.JDialog {
                   constructor(arg0: java.lang.String, arg1: java.util.Vector)
                   static main(arg0: java.lang.String[]): void
                   enableApplyButton(arg0: boolean): void
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   void: synchronized
                   static access$000(arg0: com.sun.java.swing.ui.TabsDlg): java.awt.event.ActionListener
                   static access$100(arg0: com.sun.java.swing.ui.TabsDlg): java.awt.event.ActionListener
                   static access$200(arg0: com.sun.java.swing.ui.TabsDlg): java.awt.event.ActionListener
               }
               class TabsDlg$2 implements java.awt.event.ActionListener {
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class TabsDlg$1 implements java.awt.event.ActionListener {
                   constructor()
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class TabsDlg$OkListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.TabsDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.TabsDlg, arg1: com.sun.java.swing.ui.TabsDlg$1)
               }
               class TabsDlg$CancelListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.TabsDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.TabsDlg, arg1: com.sun.java.swing.ui.TabsDlg$1)
               }
               class TabsDlg$ApplyListener implements java.awt.event.ActionListener {
                   this$0: com.sun.java.swing.ui.TabsDlg
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   constructor(arg0: com.sun.java.swing.ui.TabsDlg, arg1: com.sun.java.swing.ui.TabsDlg$1)
               }
               class SplashScreen extends java.awt.Window {
                   constructor(arg0: java.awt.Frame)
                   setVisible(arg0: boolean): void
                   paint(arg0: java.awt.Graphics): void
               }
               class OkCancelDialog extends javax.swing.JDialog implements java.awt.event.ActionListener {
                   constructor(arg0: java.lang.String, arg1: javax.swing.JPanel)
                   constructor(arg0: java.lang.String, arg1: javax.swing.JPanel, arg2: boolean)
                   isOk(): boolean
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class OkCancelButtonPanel extends javax.swing.JPanel {
                   static OK_COMMAND: java.lang.String
                   static CANCEL_COMMAND: java.lang.String
                   constructor(arg0: java.awt.event.ActionListener)
               }
               class CommonUI {
                   constructor()
                   static createLabel(arg0: java.lang.String, arg1: int, arg2: java.awt.Component): javax.swing.JLabel
                   static createLabel(arg0: java.lang.String): javax.swing.JLabel
                   static createTextField(arg0: java.lang.String, arg1: java.awt.event.KeyListener, arg2: boolean): javax.swing.JTextField
                   static createTextField(arg0: java.lang.String, arg1: boolean): javax.swing.JTextField
                   static createTextField(arg0: java.lang.String, arg1: java.awt.event.KeyListener): javax.swing.JTextField
                   static createTextField(arg0: java.lang.String): javax.swing.JTextField
                   static createRadioButton(arg0: java.lang.String, arg1: int, arg2: java.awt.event.ActionListener, arg3: boolean): javax.swing.JRadioButton
                   static createRadioButton(arg0: java.lang.String, arg1: int, arg2: boolean): javax.swing.JRadioButton
                   static createRadioButton(arg0: java.lang.String, arg1: int, arg2: java.awt.event.ActionListener): javax.swing.JRadioButton
                   static createRadioButton(arg0: java.lang.String, arg1: int): javax.swing.JRadioButton
                   static createRadioButton(arg0: java.lang.String): javax.swing.JRadioButton
                   static createCheckBox(arg0: java.lang.String, arg1: int, arg2: java.awt.event.ActionListener, arg3: boolean): javax.swing.JCheckBox
                   static createCheckBox(arg0: java.lang.String, arg1: int, arg2: java.awt.event.ActionListener): javax.swing.JCheckBox
                   static createCheckBox(arg0: java.lang.String, arg1: int, arg2: boolean): javax.swing.JCheckBox
                   static createCheckBox(arg0: java.lang.String, arg1: int): javax.swing.JCheckBox
                   static createCheckBox(arg0: java.lang.String): javax.swing.JCheckBox
                   static createComboBox(arg0: java.lang.Object[], arg1: java.awt.event.ActionListener, arg2: boolean): javax.swing.JComboBox
                   static createComboBox(arg0: java.lang.Object[], arg1: boolean): javax.swing.JComboBox
                   static createComboBox(arg0: java.util.Vector, arg1: java.awt.event.ActionListener, arg2: boolean): javax.swing.JComboBox
                   static createComboBox(arg0: java.util.Vector, arg1: boolean): javax.swing.JComboBox
                   static createButton(arg0: javax.swing.Action): javax.swing.JButton
                   static createButton(arg0: java.lang.String, arg1: java.awt.event.ActionListener, arg2: int): javax.swing.JButton
                   static createButton(arg0: java.lang.String, arg1: java.awt.event.ActionListener): javax.swing.JButton
                   static createSmallButton(arg0: java.lang.String, arg1: java.awt.event.ActionListener, arg2: int): javax.swing.JButton
                   static createSmallButton(arg0: java.lang.String, arg1: java.awt.event.ActionListener): javax.swing.JButton
                   static createBorder(arg0: java.lang.String): javax.swing.border.Border
                   static createBorder(): javax.swing.border.Border
                   static createListPane(arg0: javax.swing.JList, arg1: java.lang.String): javax.swing.JScrollPane
                   static centerComponent(arg0: java.awt.Component, arg1: java.awt.Component): void
                   static centerComponent(arg0: java.awt.Component): void
                   static getParentFrame(arg0: java.awt.Component): javax.swing.JFrame
                   static msToSec(arg0: java.lang.Integer): java.lang.Integer
                   static secToMs(arg0: java.lang.Integer): java.lang.Integer
                   static stringFromStringArray(arg0: java.lang.String[], arg1: java.lang.String): java.lang.String
                   static stringFromStringArray(arg0: java.lang.String[]): java.lang.String
                   static stringArrayFromString(arg0: java.lang.String, arg1: java.lang.String): java.lang.String[]
                   static stringArrayFromString(arg0: java.lang.String): java.lang.String[]
                   static setWaitCursor(arg0: java.awt.Component): void
                   static setDefaultCursor(arg0: java.awt.Component): void
                   static getButtconPrefSize(): java.awt.Dimension
               }
               class CommonUI$1 {
               }
               class CommonUI$NumberDocument extends javax.swing.text.PlainDocument {
                   insertString(arg0: int, arg1: java.lang.String, arg2: javax.swing.text.AttributeSet): void
                   constructor(arg0: com.sun.java.swing.ui.CommonUI$1)
               }
               abstract class CommonMenuBar extends javax.swing.JMenuBar {
                   protected manager: com.sun.java.swing.action.ActionManager
                   protected (: com.sun.java.swing.ui.CommonMenuBar
                   protected (: com.sun.java.swing.ui.CommonMenuBar
                   protected configureMenu(): void
                   protected configureToggleMenuItem(arg0: javax.swing.JMenuItem, arg1: javax.swing.Action): void
                   protected configureMenuItem(arg0: javax.swing.JMenuItem, arg1: javax.swing.Action): void
                   protected createMenu(arg0: java.lang.String, arg1: char): javax.swing.JMenu
                   protected addMenuItem(arg0: javax.swing.JMenu, arg1: javax.swing.Action): void
                   protected addCheckBoxMenuItem(arg0: javax.swing.JMenu, arg1: com.sun.java.swing.action.StateChangeAction): void
                   protected addCheckBoxMenuItem(arg0: javax.swing.JMenu, arg1: com.sun.java.swing.action.StateChangeAction, arg2: boolean): void
                   protected addRadioButtonMenuItem(arg0: javax.swing.JMenu, arg1: javax.swing.ButtonGroup, arg2: com.sun.java.swing.action.StateChangeAction): void
                   protected addRadioButtonMenuItem(arg0: javax.swing.JMenu, arg1: javax.swing.ButtonGroup, arg2: com.sun.java.swing.action.StateChangeAction, arg3: boolean): void
               }
               class StatusBar extends javax.swing.JPanel implements java.awt.event.ActionListener , java.awt.event.MouseListener {
                   constructor()
                   static getInstance(): com.sun.java.swing.ui.StatusBar
                   static setInstance(arg0: com.sun.java.swing.ui.StatusBar): void
                   protected getWidth(arg0: java.lang.String): int
                   protected getFontHeight(): int
                   getPreferredSize(): java.awt.Dimension
                   setMessage(arg0: java.lang.String): void
                   startBusyBar(): void
                   stopBusyBar(): void
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   mouseClicked(arg0: java.awt.event.MouseEvent): void
                   mousePressed(arg0: java.awt.event.MouseEvent): void
                   mouseReleased(arg0: java.awt.event.MouseEvent): void
                   mouseExited(arg0: java.awt.event.MouseEvent): void
                   mouseEntered(arg0: java.awt.event.MouseEvent): void
               }
               abstract class CommonToolBar extends javax.swing.JToolBar {
                   protected manager: com.sun.java.swing.action.ActionManager
                   protected (: com.sun.java.swing.ui.CommonToolBar
                   protected (: com.sun.java.swing.ui.CommonToolBar
                   protected addComponents(): void
                   protected addButton(arg0: javax.swing.Action): void
                   protected addToggleButton(arg0: com.sun.java.swing.action.StateChangeAction): void
                   protected addToggleButton(arg0: com.sun.java.swing.action.StateChangeAction, arg1: javax.swing.ButtonGroup): void
                   protected configureToggleButton(arg0: javax.swing.JToggleButton, arg1: javax.swing.Action): void
                   protected configureButton(arg0: javax.swing.AbstractButton, arg1: javax.swing.Action): void
               }
               
            }
            
         }
         
      }
      
   }
   
}
declare namespace sun {
   namespace jvm {
      namespace hotspot {
         namespace prims {
            class JvmtiExport {
                constructor()
                static canAccessLocalVariables(): boolean
                static canHotswapOrPostBreakpoint(): boolean
                static canPostOnExceptions(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JvmtiExport$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace jdi {
            class VoidValueImpl extends sun.jvm.hotspot.jdi.ValueImpl implements com.sun.jdi.VoidValue {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                type(): com.sun.jdi.Type
                prepareForAssignmentTo(arg0: sun.jvm.hotspot.jdi.ValueContainer): sun.jvm.hotspot.jdi.ValueImpl
                toString(): java.lang.String
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class VoidTypeImpl extends sun.jvm.hotspot.jdi.TypeImpl implements com.sun.jdi.VoidType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                toString(): java.lang.String
            }
            interface VMModifiers extends sun.jvm.hotspot.runtime.ClassConstants {
                static PUBLIC: int
                static PRIVATE: int
                static PROTECTED: int
                static STATIC: int
                static FINAL: int
                static SYNCHRONIZED: int
                static VOLATILE: int
                static BRIDGE: int
                static TRANSIENT: int
                static VARARGS: int
                static IS_ENUM_CONSTANT: int
                static NATIVE: int
                static INTERFACE: int
                static ABSTRACT: int
                static SYNTHETIC: int
            }
            class StratumLineInfo implements sun.jvm.hotspot.jdi.LineInfo {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String)
                liStratum(): java.lang.String
                liLineNumber(): int
                liSourceName(): java.lang.String
                liSourcePath(): java.lang.String
            }
            class StackFrameImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.StackFrame {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ThreadReferenceImpl, arg2: sun.jvm.hotspot.runtime.JavaVFrame)
                getJavaVFrame(): sun.jvm.hotspot.runtime.JavaVFrame
                location(): com.sun.jdi.Location
                thread(): com.sun.jdi.ThreadReference
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                thisObject(): com.sun.jdi.ObjectReference
                visibleVariables(): java.util.List
                visibleVariableByName(arg0: java.lang.String): com.sun.jdi.LocalVariable
                getValue(arg0: com.sun.jdi.LocalVariable): com.sun.jdi.Value
                getValues(arg0: java.util.List): java.util.Map
                getArgumentValues(): java.util.List
                setValue(arg0: com.sun.jdi.LocalVariable, arg1: com.sun.jdi.Value): void
                toString(): java.lang.String
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class ShortValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.ShortValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: short)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.ShortValue): int
                type(): com.sun.jdi.Type
                value(): short
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
            }
            class ShortTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.ShortType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            class SAPIDAttachingConnector extends sun.jvm.hotspot.jdi.ConnectorImpl implements com.sun.jdi.connect.AttachingConnector {
                static ARG_PID: java.lang.String
                constructor(arg0: com.sun.tools.jdi.VirtualMachineManagerService)
                constructor()
                attach(arg0: java.util.Map): com.sun.jdi.VirtualMachine
                name(): java.lang.String
                description(): java.lang.String
                transport(): com.sun.jdi.connect.Transport
                toString(): java.lang.String
                defaultArguments(): java.util.Map
            }
            class SAPIDAttachingConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: sun.jvm.hotspot.jdi.SAPIDAttachingConnector
                constructor(arg0: sun.jvm.hotspot.jdi.SAPIDAttachingConnector)
                name(): java.lang.String
            }
            class SAJDIClassLoader extends java.net.URLClassLoader {
                constructor(arg0: java.lang.ClassLoader)
                constructor(arg0: java.lang.ClassLoader, arg1: java.lang.String)
                java.lang.Class: synchronized
                protected findClass(arg0: java.lang.String): java.lang.Class
            }
            class SADebugServerAttachingConnector extends sun.jvm.hotspot.jdi.ConnectorImpl implements com.sun.jdi.connect.AttachingConnector {
                static ARG_DEBUG_SERVER_NAME: java.lang.String
                constructor(arg0: com.sun.tools.jdi.VirtualMachineManagerService)
                constructor()
                attach(arg0: java.util.Map): com.sun.jdi.VirtualMachine
                name(): java.lang.String
                description(): java.lang.String
                transport(): com.sun.jdi.connect.Transport
                toString(): java.lang.String
                defaultArguments(): java.util.Map
            }
            class SADebugServerAttachingConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: sun.jvm.hotspot.jdi.SADebugServerAttachingConnector
                constructor(arg0: sun.jvm.hotspot.jdi.SADebugServerAttachingConnector)
                name(): java.lang.String
            }
            class SADebugServer {
                static main(arg0: java.lang.String[]): void
            }
            class SACoreAttachingConnector extends sun.jvm.hotspot.jdi.ConnectorImpl implements com.sun.jdi.connect.AttachingConnector {
                static ARG_COREFILE: java.lang.String
                static ARG_JAVA_EXECUTABLE: java.lang.String
                constructor(arg0: com.sun.tools.jdi.VirtualMachineManagerService)
                constructor()
                attach(arg0: java.util.Map): com.sun.jdi.VirtualMachine
                name(): java.lang.String
                description(): java.lang.String
                transport(): com.sun.jdi.connect.Transport
                toString(): java.lang.String
                defaultArguments(): java.util.Map
            }
            class SACoreAttachingConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: sun.jvm.hotspot.jdi.SACoreAttachingConnector
                constructor(arg0: sun.jvm.hotspot.jdi.SACoreAttachingConnector)
                name(): java.lang.String
            }
            class NonConcreteMethodImpl extends sun.jvm.hotspot.jdi.MethodImpl {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg2: sun.jvm.hotspot.oops.Method)
                location(): com.sun.jdi.Location
                allLineLocations(arg0: java.lang.String, arg1: java.lang.String): java.util.List
                allLineLocations(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: java.lang.String): java.util.List
                locationsOfLine(arg0: java.lang.String, arg1: java.lang.String, arg2: int): java.util.List
                locationsOfLine(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: java.lang.String, arg2: int): java.util.List
                locationOfCodeIndex(arg0: long): com.sun.jdi.Location
                codeIndexToLineInfo(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: long): sun.jvm.hotspot.jdi.LineInfo
                variables(): java.util.List
                variablesByName(arg0: java.lang.String): java.util.List
                arguments(): java.util.List
                bytecodes(): byte[]
                argSlotCount(): int
            }
            class MonitorInfoImpl extends sun.jvm.hotspot.jdi.MirrorImpl {
                monitor: com.sun.jdi.ObjectReference
                thread: com.sun.jdi.ThreadReference
                stack_depth: int
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.jdi.ObjectReference, arg2: com.sun.jdi.ThreadReference, arg3: int)
                monitor(): com.sun.jdi.ObjectReference
                stackDepth(): int
                thread(): com.sun.jdi.ThreadReference
                hashCode(): int
                equals(arg0: java.lang.Object): boolean
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class LongValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.LongValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.LongValue): int
                type(): com.sun.jdi.Type
                value(): long
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
            }
            class LongTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.LongType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            class LocationImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.Location {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.jdi.Method, arg2: long)
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.jdi.ReferenceType, arg2: sun.jvm.hotspot.oops.Method, arg3: long)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.Location): int
                declaringType(): com.sun.jdi.ReferenceType
                method(): com.sun.jdi.Method
                codeIndex(): long
                getBaseLineInfo(arg0: sun.jvm.hotspot.jdi.SDE$Stratum): sun.jvm.hotspot.jdi.LineInfo
                getLineInfo(arg0: sun.jvm.hotspot.jdi.SDE$Stratum): sun.jvm.hotspot.jdi.LineInfo
                addStratumLineInfo(arg0: sun.jvm.hotspot.jdi.LineInfo): void
                addBaseLineInfo(arg0: sun.jvm.hotspot.jdi.LineInfo): void
                sourceName(): java.lang.String
                sourceName(arg0: java.lang.String): java.lang.String
                sourceName(arg0: sun.jvm.hotspot.jdi.SDE$Stratum): java.lang.String
                sourcePath(): java.lang.String
                sourcePath(arg0: java.lang.String): java.lang.String
                sourcePath(arg0: sun.jvm.hotspot.jdi.SDE$Stratum): java.lang.String
                lineNumber(): int
                lineNumber(arg0: java.lang.String): int
                lineNumber(arg0: sun.jvm.hotspot.jdi.SDE$Stratum): int
                toString(): java.lang.String
                virtualMachine(): com.sun.jdi.VirtualMachine
                compareTo(arg0: java.lang.Object): int
            }
            interface ValueContainer {
                type(): com.sun.jdi.Type
                findType(arg0: java.lang.String): com.sun.jdi.Type
                typeName(): java.lang.String
                signature(): java.lang.String
            }
            class LocalVariableImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.LocalVariable , sun.jvm.hotspot.jdi.ValueContainer {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.jdi.Method, arg2: int, arg3: com.sun.jdi.Location, arg4: com.sun.jdi.Location, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.LocalVariable): int
                name(): java.lang.String
                typeName(): java.lang.String
                type(): com.sun.jdi.Type
                findType(arg0: java.lang.String): com.sun.jdi.Type
                signature(): java.lang.String
                genericSignature(): java.lang.String
                isVisible(arg0: com.sun.jdi.StackFrame): boolean
                isArgument(): boolean
                slot(): int
                hides(arg0: com.sun.jdi.LocalVariable): boolean
                toString(): java.lang.String
                virtualMachine(): com.sun.jdi.VirtualMachine
                compareTo(arg0: java.lang.Object): int
            }
            class InterfaceTypeImpl extends sun.jvm.hotspot.jdi.ReferenceTypeImpl implements com.sun.jdi.InterfaceType {
                protected (: sun.jvm.hotspot.jdi.InterfaceTypeImpl
                superinterfaces(): java.util.List
                subinterfaces(): java.util.List
                implementors(): java.util.List
                addVisibleMethods(arg0: java.util.Map): void
                getAllMethods(): java.util.List
                allSuperinterfaces(): java.util.List
                addSuperinterfaces(arg0: java.util.List): void
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                inheritedTypes(): java.util.List
                isInitialized(): boolean
                toString(): java.lang.String
            }
            class IntegerValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.IntegerValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: int)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.IntegerValue): int
                type(): com.sun.jdi.Type
                value(): int
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
            }
            class IntegerTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.IntegerType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            class FloatValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.FloatValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: float)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.FloatValue): int
                type(): com.sun.jdi.Type
                value(): float
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                checkedLongValue(): long
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
            }
            class FloatTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.FloatType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            class FieldImpl extends sun.jvm.hotspot.jdi.TypeComponentImpl implements com.sun.jdi.Field {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg2: sun.jvm.hotspot.oops.Field)
                ref(): sun.jvm.hotspot.oops.Field
                getValue(): sun.jvm.hotspot.jdi.ValueImpl
                getValue(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.jdi.ValueImpl
                equals(arg0: java.lang.Object): boolean
                isTransient(): boolean
                isVolatile(): boolean
                isEnumConstant(): boolean
                type(): com.sun.jdi.Type
                typeName(): java.lang.String
                genericSignature(): java.lang.String
                compareTo(arg0: com.sun.jdi.Field): int
                toString(): java.lang.String
                name(): java.lang.String
                modifiers(): int
                isPackagePrivate(): boolean
                isPrivate(): boolean
                isProtected(): boolean
                isPublic(): boolean
                isStatic(): boolean
                isFinal(): boolean
                isSynthetic(): boolean
                hashCode(): int
                compareTo(arg0: java.lang.Object): int
            }
            class DoubleValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.DoubleValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: double)
                equals(arg0: java.lang.Object): boolean
                compareTo(arg0: com.sun.jdi.DoubleValue): int
                hashCode(): int
                type(): com.sun.jdi.Type
                value(): double
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                checkedLongValue(): long
                checkedFloatValue(): float
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
            }
            class DoubleTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.DoubleType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            abstract class ConnectorImpl implements com.sun.jdi.connect.Connector {
                defaultArguments: java.util.Map
                static trueString: java.lang.String
                static falseString: java.lang.String
                protected static DEBUG: boolean
                constructor()
                protected static loadVirtualMachineImplClass(): java.lang.Class
                protected static loadVirtualMachineImplClass(arg0: java.lang.String): java.lang.Class
                protected static handleVMVersionMismatch(arg0: java.lang.reflect.InvocationTargetException): java.lang.Class
                protected checkNativeLink(arg0: java.lang.SecurityManager, arg1: java.lang.String): void
                protected static setVMDisposeObserver(arg0: java.lang.Object): void
                defaultArguments(): java.util.Map
                addStringArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean): void
                addBooleanArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean, arg4: boolean): void
                addIntegerArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: int, arg6: int): void
                addSelectedArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: java.util.List): void
                argument(arg0: java.lang.String, arg1: java.util.Map): sun.jvm.hotspot.jdi.ConnectorImpl$ArgumentImpl
                getString(arg0: java.lang.String): java.lang.String
                toString(): java.lang.String
                static access$000(arg0: java.lang.Class): void
            }
            class ConnectorImpl$SelectedArgumentImpl extends sun.jvm.hotspot.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$SelectedArgument {
                this$0: sun.jvm.hotspot.jdi.ConnectorImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean, arg6: java.util.List)
                choices(): java.util.List
                isValid(arg0: java.lang.String): boolean
            }
            class ConnectorImpl$StringArgumentImpl extends sun.jvm.hotspot.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$StringArgument {
                this$0: sun.jvm.hotspot.jdi.ConnectorImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean)
                isValid(arg0: java.lang.String): boolean
            }
            class ConnectorImpl$IntegerArgumentImpl extends sun.jvm.hotspot.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$IntegerArgument {
                this$0: sun.jvm.hotspot.jdi.ConnectorImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean, arg6: int, arg7: int)
                setValue(arg0: int): void
                isValid(arg0: java.lang.String): boolean
                isValid(arg0: int): boolean
                stringValueOf(arg0: int): java.lang.String
                intValue(): int
                max(): int
                min(): int
            }
            class ConnectorImpl$BooleanArgumentImpl extends sun.jvm.hotspot.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$BooleanArgument {
                this$0: sun.jvm.hotspot.jdi.ConnectorImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: boolean)
                setValue(arg0: boolean): void
                isValid(arg0: java.lang.String): boolean
                stringValueOf(arg0: boolean): java.lang.String
                booleanValue(): boolean
            }
            abstract class ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$Argument , java.lang.Cloneable , java.io.Serializable {
                this$0: sun.jvm.hotspot.jdi.ConnectorImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean)
                isValid(arg0: java.lang.String): boolean
                name(): java.lang.String
                label(): java.lang.String
                description(): java.lang.String
                value(): java.lang.String
                setValue(arg0: java.lang.String): void
                mustSpecify(): boolean
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                clone(): java.lang.Object
                toString(): java.lang.String
            }
            class ConnectorImpl$1 implements java.util.Observer {
                val$vm: java.lang.Object
                constructor(arg0: java.lang.Object)
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JNITypeParser {
                static SIGNATURE_ENDCLASS: char
                static SIGNATURE_FUNC: char
                static SIGNATURE_ENDFUNC: char
                constructor(arg0: java.lang.String)
                static typeNameToSignature(arg0: java.lang.String): java.lang.String
                typeName(): java.lang.String
                argumentTypeNames(): java.util.List
                signature(): java.lang.String
                argumentSignatures(): java.util.List
                dimensionCount(): int
                componentSignature(arg0: int): java.lang.String
            }
            abstract class TypeComponentImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.TypeComponent {
                protected declaringType: sun.jvm.hotspot.jdi.ReferenceTypeImpl
                protected signature: java.lang.String
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl)
                declaringType(): com.sun.jdi.ReferenceType
                signature(): java.lang.String
                name(): java.lang.String
                modifiers(): int
                isPackagePrivate(): boolean
                isPrivate(): boolean
                isProtected(): boolean
                isPublic(): boolean
                isStatic(): boolean
                isFinal(): boolean
                hashCode(): int
                equals(arg0: java.lang.Object): boolean
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            abstract class MethodImpl extends sun.jvm.hotspot.jdi.TypeComponentImpl implements com.sun.jdi.Method {
                protected saMethod: sun.jvm.hotspot.oops.Method
                argSlotCount(): int
                allLineLocations(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: java.lang.String): java.util.List
                locationsOfLine(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: java.lang.String, arg2: int): java.util.List
                static createMethodImpl(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg2: sun.jvm.hotspot.oops.Method): sun.jvm.hotspot.jdi.MethodImpl
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg2: sun.jvm.hotspot.oops.Method)
                ref(): sun.jvm.hotspot.oops.Method
                genericSignature(): java.lang.String
                returnTypeName(): java.lang.String
                returnType(): com.sun.jdi.Type
                argumentTypeNames(): java.util.List
                argumentSignatures(): java.util.List
                argumentType(arg0: int): com.sun.jdi.Type
                argumentTypes(): java.util.List
                isAbstract(): boolean
                isBridge(): boolean
                isSynchronized(): boolean
                isNative(): boolean
                isVarArgs(): boolean
                isConstructor(): boolean
                isStaticInitializer(): boolean
                isObsolete(): boolean
                allLineLocations(): java.util.List
                allLineLocations(arg0: java.lang.String, arg1: java.lang.String): java.util.List
                locationsOfLine(arg0: int): java.util.List
                locationsOfLine(arg0: java.lang.String, arg1: java.lang.String, arg2: int): java.util.List
                codeIndexToLineInfo(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: long): sun.jvm.hotspot.jdi.LineInfo
                equals(arg0: java.lang.Object): boolean
                compareTo(arg0: com.sun.jdi.Method): int
                toString(): java.lang.String
                name(): java.lang.String
                modifiers(): int
                isPackagePrivate(): boolean
                isPrivate(): boolean
                isProtected(): boolean
                isPublic(): boolean
                isStatic(): boolean
                isSynthetic(): boolean
                isFinal(): boolean
                hashCode(): int
                compareTo(arg0: java.lang.Object): int
            }
            class ConcreteMethodImpl extends sun.jvm.hotspot.jdi.MethodImpl {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg2: sun.jvm.hotspot.oops.Method)
                argSlotCount(): int
                sourceNameFilter(arg0: java.util.List, arg1: sun.jvm.hotspot.jdi.SDE$Stratum, arg2: java.lang.String): java.util.List
                allLineLocations(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: java.lang.String): java.util.List
                locationsOfLine(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: java.lang.String, arg2: int): java.util.List
                codeIndexToLineInfo(arg0: sun.jvm.hotspot.jdi.SDE$Stratum, arg1: long): sun.jvm.hotspot.jdi.LineInfo
                locationOfCodeIndex(arg0: long): com.sun.jdi.Location
                variables(): java.util.List
                variablesByName(arg0: java.lang.String): java.util.List
                arguments(): java.util.List
                bytecodes(): byte[]
                location(): com.sun.jdi.Location
            }
            class ConcreteMethodImpl$SoftLocationXRefs {
                stratumID: java.lang.String
                lineMapper: java.util.Map
                lineLocations: java.util.List
                lowestLine: int
                highestLine: int
                constructor(arg0: java.lang.String, arg1: java.util.Map, arg2: java.util.List, arg3: int, arg4: int)
            }
            class ClassTypeImpl extends sun.jvm.hotspot.jdi.ReferenceTypeImpl implements com.sun.jdi.ClassType {
                protected (: sun.jvm.hotspot.jdi.ClassTypeImpl
                superclass(): com.sun.jdi.ClassType
                interfaces(): java.util.List
                addInterfaces(arg0: java.util.List): void
                allInterfaces(): java.util.List
                subclasses(): java.util.List
                concreteMethodByName(arg0: java.lang.String, arg1: java.lang.String): com.sun.jdi.Method
                getAllMethods(): java.util.List
                inheritedTypes(): java.util.List
                isEnum(): boolean
                setValue(arg0: com.sun.jdi.Field, arg1: com.sun.jdi.Value): void
                invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List, arg3: int): com.sun.jdi.Value
                newInstance(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List, arg3: int): com.sun.jdi.ObjectReference
                addVisibleMethods(arg0: java.util.Map): void
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                toString(): java.lang.String
            }
            class CharValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.CharValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: char)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.CharValue): int
                type(): com.sun.jdi.Type
                value(): char
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                toString(): java.lang.String
                checkedByteValue(): byte
                checkedShortValue(): short
                compareTo(arg0: java.lang.Object): int
            }
            class CharTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.CharType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            class ByteValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.ByteValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: byte)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.ByteValue): int
                type(): com.sun.jdi.Type
                value(): byte
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedCharValue(): char
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
            }
            class ByteTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.ByteType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            abstract class PrimitiveValueImpl extends sun.jvm.hotspot.jdi.ValueImpl implements com.sun.jdi.PrimitiveValue {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                checkedLongValue(): long
                checkedFloatValue(): float
                checkedBooleanValue(): boolean
                checkedDoubleValue(): double
                hashCode(): int
                equals(arg0: java.lang.Object): boolean
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class BooleanValueImpl extends sun.jvm.hotspot.jdi.PrimitiveValueImpl implements com.sun.jdi.BooleanValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: boolean)
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                type(): com.sun.jdi.Type
                value(): boolean
                booleanValue(): boolean
                byteValue(): byte
                charValue(): char
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                toString(): java.lang.String
            }
            abstract class PrimitiveTypeImpl extends sun.jvm.hotspot.jdi.TypeImpl implements com.sun.jdi.PrimitiveType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            class BooleanTypeImpl extends sun.jvm.hotspot.jdi.PrimitiveTypeImpl implements com.sun.jdi.BooleanType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString(): java.lang.String
            }
            interface LineInfo {
                liStratum(): java.lang.String
                liLineNumber(): int
                liSourceName(): java.lang.String
                liSourcePath(): java.lang.String
            }
            class BaseLineInfo implements sun.jvm.hotspot.jdi.LineInfo {
                constructor(arg0: int, arg1: sun.jvm.hotspot.jdi.ReferenceTypeImpl)
                liStratum(): java.lang.String
                liLineNumber(): int
                liSourceName(): java.lang.String
                liSourcePath(): java.lang.String
            }
            class ClassObjectReferenceImpl extends sun.jvm.hotspot.jdi.ObjectReferenceImpl implements com.sun.jdi.ClassObjectReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Instance)
                reflectedType(): com.sun.jdi.ReferenceType
                toString(): java.lang.String
            }
            class ClassLoaderReferenceImpl extends sun.jvm.hotspot.jdi.ObjectReferenceImpl implements com.sun.jdi.ClassLoaderReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Instance)
                protected description(): java.lang.String
                definedClasses(): java.util.List
                visibleClasses(): java.util.List
                findType(arg0: java.lang.String): com.sun.jdi.Type
                static access$000(arg0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl): java.util.List
            }
            class ClassLoaderReferenceImpl$3 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                this$0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class ClassLoaderReferenceImpl$2 implements sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor {
                this$0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl)
                visit(arg0: sun.jvm.hotspot.oops.Klass, arg1: sun.jvm.hotspot.oops.Oop): void
            }
            class ClassLoaderReferenceImpl$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor {
                this$0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl)
                visit(arg0: sun.jvm.hotspot.oops.Klass, arg1: sun.jvm.hotspot.oops.Oop): void
            }
            class ThreadGroupReferenceImpl extends sun.jvm.hotspot.jdi.ObjectReferenceImpl implements com.sun.jdi.ThreadGroupReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Oop)
                protected description(): java.lang.String
                name(): java.lang.String
                parent(): com.sun.jdi.ThreadGroupReference
                suspend(): void
                resume(): void
                threads(): java.util.List
                threadGroups(): java.util.List
                toString(): java.lang.String
            }
            class StringReferenceImpl extends sun.jvm.hotspot.jdi.ObjectReferenceImpl implements com.sun.jdi.StringReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Instance)
                value(): java.lang.String
                toString(): java.lang.String
            }
            class SDE {
                static BASE_STRATUM_NAME: java.lang.String
                static NullString: java.lang.String
                sourceDebugExtension: java.lang.String
                jplsFilename: java.lang.String
                defaultStratumId: java.lang.String
                isValid: boolean
                constructor(arg0: java.lang.String)
                constructor()
                sdePeek(): char
                sdeRead(): char
                sdeAdvance(): void
                syntax(): void
                syntax(arg0: java.lang.String): void
                assureLineTableSize(): void
                assureFileTableSize(): void
                assureStratumTableSize(): void
                readLine(): java.lang.String
                stratumTableIndex(arg0: java.lang.String): int
                stratum(arg0: java.lang.String): sun.jvm.hotspot.jdi.SDE$Stratum
                availableStrata(): java.util.List
                ignoreWhite(): void
                ignoreLine(): void
                readNumber(): int
                storeFile(arg0: int, arg1: java.lang.String, arg2: java.lang.String): void
                fileLine(): void
                storeLine(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
                lineLine(): void
                storeStratum(arg0: java.lang.String): void
                stratumSection(): void
                fileSection(): void
                lineSection(): void
                ignoreSection(): void
                createJavaStratum(): void
                decode(): void
                createProxyForAbsentSDE(): void
                isValid(): boolean
                static access$000(arg0: sun.jvm.hotspot.jdi.SDE): sun.jvm.hotspot.jdi.SDE$StratumTableRecord[]
                static access$100(arg0: sun.jvm.hotspot.jdi.SDE): int
                static access$200(arg0: sun.jvm.hotspot.jdi.SDE): sun.jvm.hotspot.jdi.SDE$FileTableRecord[]
                static access$300(arg0: sun.jvm.hotspot.jdi.SDE, arg1: int, arg2: int): int
                static access$500(arg0: sun.jvm.hotspot.jdi.SDE, arg1: int, arg2: int, arg3: int): int
                static access$600(arg0: sun.jvm.hotspot.jdi.SDE, arg1: int, arg2: int): int
                static access$700(arg0: sun.jvm.hotspot.jdi.SDE): sun.jvm.hotspot.jdi.SDE$LineTableRecord[]
            }
            class SDE$1 {
            }
            class SDE$LineStratum {
                this$0: sun.jvm.hotspot.jdi.SDE
                equals(arg0: java.lang.Object): boolean
                lineNumber(): int
                getSourceInfo(): void
                sourceName(): java.lang.String
                sourcePath(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.jdi.SDE, arg1: int, arg2: int, arg3: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg4: int, arg5: sun.jvm.hotspot.jdi.SDE$1)
            }
            class SDE$Stratum {
                this$0: sun.jvm.hotspot.jdi.SDE
                id(): java.lang.String
                isJava(): boolean
                sourceNames(arg0: sun.jvm.hotspot.jdi.ReferenceTypeImpl): java.util.List
                sourcePaths(arg0: sun.jvm.hotspot.jdi.ReferenceTypeImpl): java.util.List
                lineStratum(arg0: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg1: int): sun.jvm.hotspot.jdi.SDE$LineStratum
                constructor(arg0: sun.jvm.hotspot.jdi.SDE, arg1: int, arg2: sun.jvm.hotspot.jdi.SDE$1)
            }
            class SDE$StratumTableRecord {
                id: java.lang.String
                fileIndex: int
                lineIndex: int
                this$0: sun.jvm.hotspot.jdi.SDE
                constructor(arg0: sun.jvm.hotspot.jdi.SDE, arg1: sun.jvm.hotspot.jdi.SDE$1)
            }
            class SDE$LineTableRecord {
                jplsStart: int
                jplsEnd: int
                jplsLineInc: int
                njplsStart: int
                njplsEnd: int
                fileId: int
                this$0: sun.jvm.hotspot.jdi.SDE
                constructor(arg0: sun.jvm.hotspot.jdi.SDE, arg1: sun.jvm.hotspot.jdi.SDE$1)
            }
            class SDE$FileTableRecord {
                fileId: int
                sourceName: java.lang.String
                sourcePath: java.lang.String
                isConverted: boolean
                this$0: sun.jvm.hotspot.jdi.SDE
                getSourcePath(arg0: sun.jvm.hotspot.jdi.ReferenceTypeImpl): java.lang.String
                constructor(arg0: sun.jvm.hotspot.jdi.SDE, arg1: sun.jvm.hotspot.jdi.SDE$1)
            }
            class VirtualMachineImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.PathSearchingVirtualMachine {
                vmmgr: com.sun.jdi.VirtualMachineManager
                sequenceNumber: int
                saVM(): sun.jvm.hotspot.runtime.VM
                saSystemDictionary(): sun.jvm.hotspot.memory.SystemDictionary
                saSymbolTable(): sun.jvm.hotspot.memory.SymbolTable
                saUniverse(): sun.jvm.hotspot.memory.Universe
                saObjectHeap(): sun.jvm.hotspot.oops.ObjectHeap
                javaLangObject(): sun.jvm.hotspot.oops.Symbol
                javaLangCloneable(): sun.jvm.hotspot.oops.Symbol
                javaIoSerializable(): sun.jvm.hotspot.oops.Symbol
                javaLangEnum(): sun.jvm.hotspot.oops.Symbol
                javaLangThrowable(): sun.jvm.hotspot.oops.Symbol
                static createVirtualMachineForCorefile(arg0: com.sun.jdi.VirtualMachineManager, arg1: java.lang.String, arg2: java.lang.String, arg3: int): sun.jvm.hotspot.jdi.VirtualMachineImpl
                static createVirtualMachineForPID(arg0: com.sun.jdi.VirtualMachineManager, arg1: int, arg2: int): sun.jvm.hotspot.jdi.VirtualMachineImpl
                static createVirtualMachineForServer(arg0: com.sun.jdi.VirtualMachineManager, arg1: java.lang.String, arg2: int): sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: com.sun.jdi.VirtualMachineManager, arg1: int)
                throwNotReadOnlyException(arg0: java.lang.String): void
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                classesByName(arg0: java.lang.String): java.util.List
                allClasses(): java.util.List
                bootstrapClasses(): java.util.List
                referenceType(arg0: sun.jvm.hotspot.oops.Klass): sun.jvm.hotspot.jdi.ReferenceTypeImpl
                threadGroupForJDI(): java.lang.ThreadGroup
                redefineClasses(arg0: java.util.Map): void
                allThreads(): java.util.List
                suspend(): void
                resume(): void
                topLevelThreadGroups(): java.util.List
                eventQueue(): com.sun.jdi.event.EventQueue
                eventRequestManager(): com.sun.jdi.request.EventRequestManager
                mirrorOf(arg0: boolean): com.sun.jdi.BooleanValue
                mirrorOf(arg0: byte): com.sun.jdi.ByteValue
                mirrorOf(arg0: char): com.sun.jdi.CharValue
                mirrorOf(arg0: short): com.sun.jdi.ShortValue
                mirrorOf(arg0: int): com.sun.jdi.IntegerValue
                mirrorOf(arg0: long): com.sun.jdi.LongValue
                mirrorOf(arg0: float): com.sun.jdi.FloatValue
                mirrorOf(arg0: double): com.sun.jdi.DoubleValue
                mirrorOf(arg0: java.lang.String): com.sun.jdi.StringReference
                mirrorOfVoid(): com.sun.jdi.VoidValue
                process(): java.lang.Process
                setDisposeObserver(arg0: java.util.Observer): void
                dispose(): void
                exit(arg0: int): void
                canBeModified(): boolean
                canWatchFieldModification(): boolean
                canWatchFieldAccess(): boolean
                canGetBytecodes(): boolean
                canGetSyntheticAttribute(): boolean
                canGetOwnedMonitorInfo(): boolean
                canGetCurrentContendedMonitor(): boolean
                canGetMonitorInfo(): boolean
                canGet1_5LanguageFeatures(): boolean
                canUseInstanceFilters(): boolean
                canRedefineClasses(): boolean
                canAddMethod(): boolean
                canUnrestrictedlyRedefineClasses(): boolean
                canPopFrames(): boolean
                canGetSourceDebugExtension(): boolean
                canRequestVMDeathEvent(): boolean
                canForceEarlyReturn(): boolean
                canGetConstantPool(): boolean
                canGetClassFileVersion(): boolean
                canGetMethodReturnValues(): boolean
                canGetInstanceInfo(): boolean
                canUseSourceNameFilters(): boolean
                canRequestMonitorEvents(): boolean
                canGetMonitorFrameInfo(): boolean
                instanceCounts(arg0: java.util.List): long[]
                classPath(): java.util.List
                bootClassPath(): java.util.List
                baseDirectory(): java.lang.String
                setDefaultStratum(arg0: java.lang.String): void
                getDefaultStratum(): java.lang.String
                description(): java.lang.String
                version(): java.lang.String
                name(): java.lang.String
                virtualMachine(): com.sun.jdi.VirtualMachine
                toString(): java.lang.String
                setDebugTraceMode(arg0: int): void
                canWalkHeap(): boolean
                allObjects(): java.util.List
                objectsByType(arg0: com.sun.jdi.ReferenceType): java.util.List
                objectsByType(arg0: com.sun.jdi.ReferenceType, arg1: boolean): java.util.List
                findBootType(arg0: java.lang.String): com.sun.jdi.Type
                theBooleanType(): com.sun.jdi.BooleanType
                theByteType(): com.sun.jdi.ByteType
                theCharType(): com.sun.jdi.CharType
                theShortType(): com.sun.jdi.ShortType
                theIntegerType(): com.sun.jdi.IntegerType
                theLongType(): com.sun.jdi.LongType
                theFloatType(): com.sun.jdi.FloatType
                theDoubleType(): com.sun.jdi.DoubleType
                theVoidType(): com.sun.jdi.VoidType
                primitiveTypeMirror(arg0: char): com.sun.jdi.PrimitiveType
                getAddressValue(arg0: sun.jvm.hotspot.oops.Oop): long
                sun.jvm.hotspot.jdi.ObjectReferenceImpl: synchronized
                void: synchronized
                stringMirror(arg0: sun.jvm.hotspot.oops.Instance): sun.jvm.hotspot.jdi.StringReferenceImpl
                arrayMirror(arg0: sun.jvm.hotspot.oops.Array): sun.jvm.hotspot.jdi.ArrayReferenceImpl
                threadMirror(arg0: sun.jvm.hotspot.oops.Instance): sun.jvm.hotspot.jdi.ThreadReferenceImpl
                threadMirror(arg0: sun.jvm.hotspot.runtime.JavaThread): sun.jvm.hotspot.jdi.ThreadReferenceImpl
                threadGroupMirror(arg0: sun.jvm.hotspot.oops.Instance): sun.jvm.hotspot.jdi.ThreadGroupReferenceImpl
                classLoaderMirror(arg0: sun.jvm.hotspot.oops.Instance): sun.jvm.hotspot.jdi.ClassLoaderReferenceImpl
                classObjectMirror(arg0: sun.jvm.hotspot.oops.Instance): sun.jvm.hotspot.jdi.ClassObjectReferenceImpl
            }
            class VirtualMachineImpl$SoftObjectReference extends java.lang.ref.SoftReference {
                count: int
                key: java.lang.Object
                constructor(arg0: java.lang.Object, arg1: sun.jvm.hotspot.jdi.ObjectReferenceImpl, arg2: java.lang.ref.ReferenceQueue)
                count(): int
                incrementCount(): void
                key(): java.lang.Object
                object(): sun.jvm.hotspot.jdi.ObjectReferenceImpl
            }
            class VirtualMachineImpl$5 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$givenType: com.sun.jdi.ReferenceType
                val$objects: java.util.List
                this$0: sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: sun.jvm.hotspot.jdi.VirtualMachineImpl, arg1: com.sun.jdi.ReferenceType, arg2: java.util.List)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class VirtualMachineImpl$4 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$givenKls: sun.jvm.hotspot.oops.Klass
                val$objects: java.util.List
                this$0: sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: sun.jvm.hotspot.jdi.VirtualMachineImpl, arg1: sun.jvm.hotspot.oops.Klass, arg2: java.util.List)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class VirtualMachineImpl$3 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$objects: java.util.List
                this$0: sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: sun.jvm.hotspot.jdi.VirtualMachineImpl, arg1: java.util.List)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class VirtualMachineImpl$2 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$size: int
                val$klassArray: sun.jvm.hotspot.oops.Klass[]
                val$retValue: long[]
                this$0: sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: sun.jvm.hotspot.jdi.VirtualMachineImpl, arg1: int, arg2: sun.jvm.hotspot.oops.Klass[], arg3: long[])
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class VirtualMachineImpl$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                val$saKlasses: java.util.List
                this$0: sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: sun.jvm.hotspot.jdi.VirtualMachineImpl, arg1: java.util.List)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            interface JVMTIThreadState {
                static JVMTI_THREAD_STATE_ALIVE: int
                static JVMTI_THREAD_STATE_TERMINATED: int
                static JVMTI_THREAD_STATE_RUNNABLE: int
                static JVMTI_THREAD_STATE_WAITING: int
                static JVMTI_THREAD_STATE_WAITING_INDEFINITELY: int
                static JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT: int
                static JVMTI_THREAD_STATE_SLEEPING: int
                static JVMTI_THREAD_STATE_IN_OBJECT_WAIT: int
                static JVMTI_THREAD_STATE_PARKED: int
                static JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER: int
                static JVMTI_THREAD_STATE_SUSPENDED: int
                static JVMTI_THREAD_STATE_INTERRUPTED: int
                static JVMTI_THREAD_STATE_IN_NATIVE: int
            }
            class ThreadReferenceImpl extends sun.jvm.hotspot.jdi.ObjectReferenceImpl implements com.sun.jdi.ThreadReference , sun.jvm.hotspot.jdi.JVMTIThreadState {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.runtime.JavaThread)
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Instance)
                getJavaThread(): sun.jvm.hotspot.runtime.JavaThread
                protected description(): java.lang.String
                name(): java.lang.String
                suspend(): void
                resume(): void
                suspendCount(): int
                stop(arg0: com.sun.jdi.ObjectReference): void
                interrupt(): void
                status(): int
                isSuspended(): boolean
                isAtBreakpoint(): boolean
                threadGroup(): com.sun.jdi.ThreadGroupReference
                frameCount(): int
                frames(): java.util.List
                frame(arg0: int): com.sun.jdi.StackFrame
                frames(arg0: int, arg1: int): java.util.List
                ownedMonitors(): java.util.List
                ownedMonitorsAndFrames(): java.util.List
                currentContendedMonitor(): com.sun.jdi.ObjectReference
                popFrames(arg0: com.sun.jdi.StackFrame): void
                forceEarlyReturn(arg0: com.sun.jdi.Value): void
                toString(): java.lang.String
            }
            abstract class TypeImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.Type {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                signature(): java.lang.String
                name(): java.lang.String
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            abstract class ReferenceTypeImpl extends sun.jvm.hotspot.jdi.TypeImpl implements com.sun.jdi.ReferenceType {
                protected saKlass: sun.jvm.hotspot.oops.Klass
                protected typeNameSymbol: sun.jvm.hotspot.oops.Symbol
                static NO_SDE_INFO_MARK: sun.jvm.hotspot.jdi.SDE
                static prev: java.lang.Object
                protected (: sun.jvm.hotspot.jdi.ReferenceTypeImpl
                typeNameAsSymbol(): sun.jvm.hotspot.oops.Symbol
                getMethodMirror(arg0: sun.jvm.hotspot.oops.Method): com.sun.jdi.Method
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                compareTo(arg0: com.sun.jdi.ReferenceType): int
                signature(): java.lang.String
                genericSignature(): java.lang.String
                classLoader(): com.sun.jdi.ClassLoaderReference
                isPublic(): boolean
                isProtected(): boolean
                isPrivate(): boolean
                isPackagePrivate(): boolean
                isAbstract(): boolean
                isFinal(): boolean
                isStatic(): boolean
                isPrepared(): boolean
                checkPrepared(): void
                isVerified(): boolean
                isInitialized(): boolean
                failedToInitialize(): boolean
                fields(): java.util.List
                allFields(): java.util.List
                inheritedTypes(): java.util.List
                addVisibleFields(arg0: java.util.List, arg1: java.util.Map, arg2: java.util.List): void
                visibleFields(): java.util.List
                fieldByName(arg0: java.lang.String): com.sun.jdi.Field
                methods(): java.util.List
                getAllMethods(): java.util.List
                allMethods(): java.util.List
                addToMethodMap(arg0: java.util.Map, arg1: java.util.List): void
                addVisibleMethods(arg0: java.util.Map): void
                visibleMethods(): java.util.List
                static jjstr(arg0: java.util.Collection): java.lang.String
                methodsByName(arg0: java.lang.String): java.util.List
                methodsByName(arg0: java.lang.String, arg1: java.lang.String): java.util.List
                getInterfaces(): java.util.List
                nestedTypes(): java.util.List
                getValue(arg0: com.sun.jdi.Field): com.sun.jdi.Value
                getValues(arg0: java.util.List): java.util.Map
                validateFieldAccess(arg0: com.sun.jdi.Field): void
                classObject(): com.sun.jdi.ClassObjectReference
                stratum(arg0: java.lang.String): sun.jvm.hotspot.jdi.SDE$Stratum
                sourceName(): java.lang.String
                sourceNames(arg0: java.lang.String): java.util.List
                sourcePaths(arg0: java.lang.String): java.util.List
                baseSourceName(): java.lang.String
                baseSourcePath(): java.lang.String
                baseSourceDir(): java.lang.String
                sourceDebugExtension(): java.lang.String
                availableStrata(): java.util.List
                defaultStratum(): java.lang.String
                modifiers(): int
                instances(arg0: long): java.util.List
                getModifiers(): int
                allLineLocations(): java.util.List
                allLineLocations(arg0: java.lang.String, arg1: java.lang.String): java.util.List
                locationsOfLine(arg0: int): java.util.List
                locationsOfLine(arg0: java.lang.String, arg1: java.lang.String, arg2: int): java.util.List
                ref(): sun.jvm.hotspot.oops.Klass
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                isAssignableFrom(arg0: com.sun.jdi.ReferenceType): boolean
                isAssignableFrom(arg0: com.sun.jdi.ObjectReference): boolean
                indexOf(arg0: com.sun.jdi.Method): int
                indexOf(arg0: com.sun.jdi.Field): int
                findType(arg0: java.lang.String): com.sun.jdi.Type
                loaderString(): java.lang.String
                uniqueID(): long
                majorVersion(): int
                minorVersion(): int
                constantPoolCount(): int
                constantPool(): byte[]
                compareTo(arg0: java.lang.Object): int
            }
            class ReferenceTypeImpl$1 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$givenKls: sun.jvm.hotspot.oops.Klass
                val$objects: java.util.List
                val$max: long
                this$0: sun.jvm.hotspot.jdi.ReferenceTypeImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ReferenceTypeImpl, arg1: sun.jvm.hotspot.oops.Klass, arg2: java.util.List, arg3: long)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class ArrayTypeImpl extends sun.jvm.hotspot.jdi.ReferenceTypeImpl implements com.sun.jdi.ArrayType {
                protected (: sun.jvm.hotspot.jdi.ArrayTypeImpl
                newInstance(arg0: int): com.sun.jdi.ArrayReference
                componentSignature(): java.lang.String
                componentTypeName(): java.lang.String
                classLoader(): com.sun.jdi.ClassLoaderReference
                addVisibleMethods(arg0: java.util.Map): void
                getAllMethods(): java.util.List
                componentType(): com.sun.jdi.Type
                static isComponentAssignable(arg0: com.sun.jdi.Type, arg1: com.sun.jdi.Type): boolean
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                inheritedTypes(): java.util.List
                getModifiers(): int
                toString(): java.lang.String
                isPrepared(): boolean
                isVerified(): boolean
                isInitialized(): boolean
                failedToInitialize(): boolean
                isAbstract(): boolean
                isFinal(): boolean
            }
            abstract class MirrorImpl implements com.sun.jdi.Mirror {
                protected vm: sun.jvm.hotspot.jdi.VirtualMachineImpl
                constructor(arg0: com.sun.jdi.VirtualMachine)
                virtualMachine(): com.sun.jdi.VirtualMachine
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
            }
            abstract class ValueImpl extends sun.jvm.hotspot.jdi.MirrorImpl implements com.sun.jdi.Value {
                constructor(arg0: com.sun.jdi.VirtualMachine)
            }
            class ObjectReferenceImpl extends sun.jvm.hotspot.jdi.ValueImpl implements com.sun.jdi.ObjectReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Oop)
                protected ref(): sun.jvm.hotspot.oops.Oop
                type(): com.sun.jdi.Type
                referenceType(): com.sun.jdi.ReferenceType
                getValue(arg0: com.sun.jdi.Field): com.sun.jdi.Value
                getValues(arg0: java.util.List): java.util.Map
                setValue(arg0: com.sun.jdi.Field, arg1: com.sun.jdi.Value): void
                invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List, arg3: int): com.sun.jdi.Value
                disableCollection(): void
                enableCollection(): void
                isCollected(): boolean
                uniqueID(): long
                waitingThreads(): java.util.List
                owningThread(): com.sun.jdi.ThreadReference
                entryCount(): int
                referringObjects(arg0: long): java.util.List
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                toString(): java.lang.String
                virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class ObjectReferenceImpl$1 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$obj: com.sun.jdi.ObjectReference
                val$objects: java.util.List
                val$max: long
                this$0: sun.jvm.hotspot.jdi.ObjectReferenceImpl
                constructor(arg0: sun.jvm.hotspot.jdi.ObjectReferenceImpl, arg1: com.sun.jdi.ObjectReference, arg2: java.util.List, arg3: long)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class ArrayReferenceImpl extends sun.jvm.hotspot.jdi.ObjectReferenceImpl implements com.sun.jdi.ArrayReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: sun.jvm.hotspot.oops.Array)
                arrayType(): sun.jvm.hotspot.jdi.ArrayTypeImpl
                length(): int
                getValue(arg0: int): com.sun.jdi.Value
                getValues(): java.util.List
                getValues(arg0: int, arg1: int): java.util.List
                setValue(arg0: int, arg1: com.sun.jdi.Value): void
                setValues(arg0: java.util.List): void
                setValues(arg0: int, arg1: java.util.List, arg2: int, arg3: int): void
                toString(): java.lang.String
            }
            
         }
         namespace gc_implementation {
            namespace shared {
               abstract class ImmutableSpace extends sun.jvm.hotspot.runtime.VMObject {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   bottom(): sun.jvm.hotspot.debugger.Address
                   end(): sun.jvm.hotspot.debugger.Address
                   usedRegion(): sun.jvm.hotspot.memory.MemRegion
                   bottomAsOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                   getLiveRegions(): java.util.List
                   capacity(): long
                   used(): long
                   contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   print(): void
                   printOn(arg0: java.io.PrintStream): void
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class ImmutableSpace$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class MutableSpace extends sun.jvm.hotspot.gc_implementation.shared.ImmutableSpace {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   top(): sun.jvm.hotspot.debugger.Address
                   used(): long
                   getLiveRegions(): java.util.List
                   printOn(arg0: java.io.PrintStream): void
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class MutableSpace$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace parallelScavenge {
               class ParallelScavengeHeap extends sun.jvm.hotspot.gc_interface.CollectedHeap {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   youngGen(): sun.jvm.hotspot.gc_implementation.parallelScavenge.PSYoungGen
                   oldGen(): sun.jvm.hotspot.gc_implementation.parallelScavenge.PSOldGen
                   capacity(): long
                   used(): long
                   isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   kind(): sun.jvm.hotspot.gc_interface.CollectedHeapName
                   printOn(arg0: java.io.PrintStream): void
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class ParallelScavengeHeap$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class PSYoungGen extends sun.jvm.hotspot.runtime.VMObject {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   edenSpace(): sun.jvm.hotspot.gc_implementation.shared.MutableSpace
                   fromSpace(): sun.jvm.hotspot.gc_implementation.shared.MutableSpace
                   toSpace(): sun.jvm.hotspot.gc_implementation.shared.MutableSpace
                   capacity(): long
                   used(): long
                   isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   printOn(arg0: java.io.PrintStream): void
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class PSYoungGen$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class PSOldGen extends sun.jvm.hotspot.runtime.VMObject {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   objectSpace(): sun.jvm.hotspot.gc_implementation.shared.MutableSpace
                   capacity(): long
                   used(): long
                   isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   printOn(arg0: java.io.PrintStream): void
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class PSOldGen$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace g1 {
               class HeapRegionSetCount extends sun.jvm.hotspot.runtime.VMObject {
                   length(): long
                   capacity(): long
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class HeapRegionSetCount$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class G1HeapRegionTable extends sun.jvm.hotspot.runtime.VMObject {
                   length(): long
                   bias(): long
                   shiftBy(): long
                   heapRegionIterator(arg0: long): java.util.Iterator<sun.jvm.hotspot.gc_implementation.g1.HeapRegion>
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
                   static access$100(arg0: sun.jvm.hotspot.gc_implementation.g1.G1HeapRegionTable, arg1: long): sun.jvm.hotspot.gc_implementation.g1.HeapRegion
               }
               class G1HeapRegionTable$HeapRegionIterator implements java.util.Iterator<sun.jvm.hotspot.gc_implementation.g1.HeapRegion> {
                   this$0: sun.jvm.hotspot.gc_implementation.g1.G1HeapRegionTable
                   positionToNext(): sun.jvm.hotspot.gc_implementation.g1.HeapRegion
                   hasNext(): boolean
                   next(): sun.jvm.hotspot.gc_implementation.g1.HeapRegion
                   remove(): void
                   constructor(arg0: sun.jvm.hotspot.gc_implementation.g1.G1HeapRegionTable, arg1: long)
                   next(): java.lang.Object
               }
               class G1HeapRegionTable$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class HeapRegion extends sun.jvm.hotspot.memory.CompactibleSpace {
                   static grainBytes(): long
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   top(): sun.jvm.hotspot.debugger.Address
                   getLiveRegions(): java.util.List
                   used(): long
                   free(): long
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class HeapRegion$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class HeapRegionSetBase extends sun.jvm.hotspot.runtime.VMObject {
                   count(): sun.jvm.hotspot.gc_implementation.g1.HeapRegionSetCount
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class HeapRegionSetBase$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class G1MonitoringSupport extends sun.jvm.hotspot.runtime.VMObject {
                   edenCommitted(): long
                   edenUsed(): long
                   edenRegionNum(): long
                   survivorCommitted(): long
                   survivorUsed(): long
                   survivorRegionNum(): long
                   oldCommitted(): long
                   oldUsed(): long
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class G1MonitoringSupport$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class HeapRegionManager extends sun.jvm.hotspot.runtime.VMObject {
                   capacity(): long
                   length(): long
                   committedLength(): long
                   heapRegionIterator(): java.util.Iterator<sun.jvm.hotspot.gc_implementation.g1.HeapRegion>
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class HeapRegionManager$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class G1CollectedHeap extends sun.jvm.hotspot.memory.SharedHeap {
                   capacity(): long
                   used(): long
                   n_regions(): long
                   g1mm(): sun.jvm.hotspot.gc_implementation.g1.G1MonitoringSupport
                   allocator(): sun.jvm.hotspot.gc_implementation.g1.G1Allocator
                   oldSet(): sun.jvm.hotspot.gc_implementation.g1.HeapRegionSetBase
                   humongousSet(): sun.jvm.hotspot.gc_implementation.g1.HeapRegionSetBase
                   heapRegionIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure): void
                   kind(): sun.jvm.hotspot.gc_interface.CollectedHeapName
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class G1CollectedHeap$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class G1Allocator extends sun.jvm.hotspot.runtime.VMObject {
                   getSummaryBytes(): long
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class G1Allocator$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            
         }
         namespace opto {
            class RootNode extends sun.jvm.hotspot.opto.LoopNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class RootNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ProjNode extends sun.jvm.hotspot.opto.Node {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ProjNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class TypeNode extends sun.jvm.hotspot.opto.Node {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class TypeNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PhiNode extends sun.jvm.hotspot.opto.TypeNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class PhiNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PhaseRegAlloc extends sun.jvm.hotspot.opto.Phase {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class PhaseRegAlloc$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachIfNode extends sun.jvm.hotspot.opto.MachNode {
                prob(): float
                cnt(): float
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachIfNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachCallStaticJavaNode extends sun.jvm.hotspot.opto.MachCallJavaNode {
                name(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachCallStaticJavaNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachCallRuntimeNode extends sun.jvm.hotspot.opto.MachCallJavaNode {
                name(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachCallRuntimeNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachNode extends sun.jvm.hotspot.opto.Node {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachReturnNode extends sun.jvm.hotspot.opto.MachNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachReturnNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachSafePointNode extends sun.jvm.hotspot.opto.MachReturnNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                jvms(): sun.jvm.hotspot.opto.JVMState
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachSafePointNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachCallNode extends sun.jvm.hotspot.opto.MachSafePointNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachCallNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MachCallJavaNode extends sun.jvm.hotspot.opto.MachCallNode {
                method(): sun.jvm.hotspot.ci.ciMethod
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MachCallJavaNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class RegionNode extends sun.jvm.hotspot.opto.Node {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class RegionNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LoopNode extends sun.jvm.hotspot.opto.RegionNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class LoopNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class HaltNode extends sun.jvm.hotspot.opto.Node {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class HaltNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CompilerPhaseType extends java.lang.Enum<sun.jvm.hotspot.opto.CompilerPhaseType> {
                static PHASE_BEFORE_STRINGOPTS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_AFTER_STRINGOPTS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_BEFORE_REMOVEUSELESS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_AFTER_PARSING: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_ITER_GVN1: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_PHASEIDEAL_BEFORE_EA: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_ITER_GVN_AFTER_EA: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_ITER_GVN_AFTER_ELIMINATION: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_PHASEIDEALLOOP1: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_PHASEIDEALLOOP2: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_PHASEIDEALLOOP3: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_CPP1: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_ITER_GVN2: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_PHASEIDEALLOOP_ITERATIONS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_OPTIMIZE_FINISHED: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_GLOBAL_CODE_MOTION: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_FINAL_CODE: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_AFTER_EA: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_BEFORE_CLOOPS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_AFTER_CLOOPS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_BEFORE_BEAUTIFY_LOOPS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_AFTER_BEAUTIFY_LOOPS: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_BEFORE_MATCHING: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_INCREMENTAL_INLINE: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_INCREMENTAL_BOXING_INLINE: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_END: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_FAILURE: sun.jvm.hotspot.opto.CompilerPhaseType
                static PHASE_NUM_TYPES: sun.jvm.hotspot.opto.CompilerPhaseType
                static values(): sun.jvm.hotspot.opto.CompilerPhaseType[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.opto.CompilerPhaseType
                value(): java.lang.String
            }
            class CallStaticJavaNode extends sun.jvm.hotspot.opto.CallJavaNode {
                name(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CallStaticJavaNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CallRuntimeNode extends sun.jvm.hotspot.opto.CallNode {
                name(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CallRuntimeNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MultiNode extends sun.jvm.hotspot.opto.Node {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MultiNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class SafePointNode extends sun.jvm.hotspot.opto.MultiNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                jvms(): sun.jvm.hotspot.opto.JVMState
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class SafePointNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CallNode extends sun.jvm.hotspot.opto.SafePointNode {
                entryPoint(): sun.jvm.hotspot.debugger.Address
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CallNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CallJavaNode extends sun.jvm.hotspot.opto.CallNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                method(): sun.jvm.hotspot.ci.ciMethod
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CallJavaNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CallDynamicJavaNode extends sun.jvm.hotspot.opto.CallJavaNode {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CallDynamicJavaNode$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Block_List extends sun.jvm.hotspot.opto.Block_Array {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                size(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Block_List$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Block_Array extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                Max(): int
                at(arg0: int): sun.jvm.hotspot.opto.Block
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Block_Array$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Node_Array extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                Size(): int
                at(arg0: int): sun.jvm.hotspot.opto.Node
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Node_Array$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Node_List extends sun.jvm.hotspot.opto.Node_Array {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                size(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Node_List$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Block extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                preOrder(): int
                freq(): float
                nodes(): sun.jvm.hotspot.opto.Node_List
                dump(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Block$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JVMState extends sun.jvm.hotspot.runtime.VMObject {
                static create(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.opto.JVMState
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                method(): sun.jvm.hotspot.ci.ciMethod
                bci(): int
                depth(): int
                caller(): sun.jvm.hotspot.opto.JVMState
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JVMState$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class InlineTree extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                callerTree(): sun.jvm.hotspot.opto.InlineTree
                method(): sun.jvm.hotspot.ci.ciMethod
                callerJvms(): sun.jvm.hotspot.opto.JVMState
                callerBci(): int
                subtrees(): sun.jvm.hotspot.utilities.GrowableArray<sun.jvm.hotspot.opto.InlineTree>
                inlineLevel(): int
                printImpl(arg0: java.io.PrintStream, arg1: int): void
                print(arg0: java.io.PrintStream): void
                count(): int
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class InlineTree$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Phase extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Phase$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PhaseCFG extends sun.jvm.hotspot.opto.Phase {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dump(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class PhaseCFG$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Node extends sun.jvm.hotspot.runtime.VMObject {
                static nodes: java.util.HashMap
                static constructors: java.util.HashMap
                static create(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.opto.Node
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                outcnt(): int
                req(): int
                len(): int
                idx(): int
                rawOut(arg0: int): sun.jvm.hotspot.opto.Node
                in(arg0: int): sun.jvm.hotspot.opto.Node
                collect(arg0: int, arg1: boolean): java.util.ArrayList
                protected dumpNodes(arg0: sun.jvm.hotspot.opto.Node, arg1: int, arg2: boolean, arg3: java.io.PrintStream): void
                dump(arg0: int, arg1: java.io.PrintStream): void
                Name(): java.lang.String
                dump(arg0: java.io.PrintStream): void
                dumpOut(arg0: java.io.PrintStream): void
                dumpSpec(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            abstract class Node$Instantiator {
                constructor()
                create(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.opto.Node
            }
            class Node$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Compile extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                root(): sun.jvm.hotspot.opto.Node
                entryBci(): int
                method(): sun.jvm.hotspot.ci.ciMethod
                cfg(): sun.jvm.hotspot.opto.PhaseCFG
                ilt(): sun.jvm.hotspot.opto.InlineTree
                dumpInlineData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Compile$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace ci {
            class ciVirtualCallData extends sun.jvm.hotspot.oops.VirtualCallData {
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                receiver(arg0: int): sun.jvm.hotspot.oops.Klass
                receiverAt(arg0: int): sun.jvm.hotspot.ci.ciKlass
            }
            class ciTypeArrayKlass extends sun.jvm.hotspot.ci.ciArrayKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciTypeArrayKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciReceiverTypeData extends sun.jvm.hotspot.oops.ReceiverTypeData {
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                receiver(arg0: int): sun.jvm.hotspot.oops.Klass
                receiverAt(arg0: int): sun.jvm.hotspot.ci.ciKlass
            }
            class ciObjArrayKlass extends sun.jvm.hotspot.ci.ciArrayKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciObjArrayKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciMethodData extends sun.jvm.hotspot.ci.ciMetadata {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                orig(): byte[]
                data(): long[]
                dataSize(): int
                state(): int
                currentMileage(): int
                outOfBounds(arg0: int): boolean
                dataAt(arg0: int): sun.jvm.hotspot.oops.ProfileData
                dpToDi(arg0: int): int
                firstDi(): int
                firstData(): sun.jvm.hotspot.oops.ProfileData
                nextData(arg0: sun.jvm.hotspot.oops.ProfileData): sun.jvm.hotspot.oops.ProfileData
                isValid(arg0: sun.jvm.hotspot.oops.ProfileData): boolean
                printDataOn(arg0: java.io.PrintStream): void
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciMethodData$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciInstanceKlass extends sun.jvm.hotspot.ci.ciKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                initState(): int
                isShared(): boolean
                isLinked(): boolean
                isInitialized(): boolean
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciInstanceKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciInstance extends sun.jvm.hotspot.ci.ciObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciInstance$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciField extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciField$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciSymbol extends sun.jvm.hotspot.ci.ciMetadata {
                asUtf88(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciSymbol$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciObject extends sun.jvm.hotspot.ci.ciBaseObject {
                getOop(): sun.jvm.hotspot.oops.Oop
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                printOn(arg0: java.io.PrintStream): void
                toString(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciObject$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciMethod extends sun.jvm.hotspot.ci.ciMetadata {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                method(): sun.jvm.hotspot.oops.Method
                interpreterThrowoutCount(): int
                interpreterInvocationCount(): int
                instructionsSize(): int
                printShortName(arg0: java.io.PrintStream): void
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciMethod$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciObjectFactory extends sun.jvm.hotspot.runtime.VMObject {
                static get(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.ci.ciObject
                static getMetadata(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.ci.ciMetadata
                objects(): sun.jvm.hotspot.utilities.GrowableArray<sun.jvm.hotspot.ci.ciMetadata>
                symbols(): sun.jvm.hotspot.utilities.GrowableArray<sun.jvm.hotspot.ci.ciSymbol>
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciObjectFactory$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciEnv extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                compilerData(): sun.jvm.hotspot.opto.Compile
                factory(): sun.jvm.hotspot.ci.ciObjectFactory
                task(): sun.jvm.hotspot.compiler.CompileTask
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciEnv$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciConstant extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciConstant$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciBaseObject extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciBaseObject$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciMetadata extends sun.jvm.hotspot.ci.ciBaseObject {
                getMetadata(): sun.jvm.hotspot.oops.Metadata
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                printOn(arg0: java.io.PrintStream): void
                toString(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciMetadata$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciType extends sun.jvm.hotspot.ci.ciMetadata {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciType$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciKlass extends sun.jvm.hotspot.ci.ciType {
                name(): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ciArrayKlass extends sun.jvm.hotspot.ci.ciKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ciArrayKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace asm {
            namespace sparc {
               class SPARCRegisters {
                   static G0: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G1: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G2: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G3: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G4: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G5: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G6: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static G7: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O0: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O1: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O2: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O3: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O4: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O5: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O6: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static O7: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L0: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L1: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L2: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L3: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L4: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L5: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L6: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static L7: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I0: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I1: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I2: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I3: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I4: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I5: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I6: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static I7: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static NUM_REGISTERS: int
                   static FP: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static SP: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lesp: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lbcp: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lmethod: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Llocals: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lmonitors: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lbyte_code: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lscratch: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static Lscratch2: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static LcpoolCache: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static OparamAddr: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static IsavedSP: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static IsizeCalleeParms: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static IdispatchAddress: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   static IdispatchTables: sun.jvm.hotspot.asm.sparc.SPARCRegister
                   constructor()
                   static getNumRegisters(): int
                   static getRegisterName(arg0: int): java.lang.String
                   static getRegister(arg0: int): sun.jvm.hotspot.asm.sparc.SPARCRegister
               }
               class SPARCRegisterType {
                   static GLOBAL: sun.jvm.hotspot.asm.sparc.SPARCRegisterType
                   static OUT: sun.jvm.hotspot.asm.sparc.SPARCRegisterType
                   static IN: sun.jvm.hotspot.asm.sparc.SPARCRegisterType
                   static LOCAL: sun.jvm.hotspot.asm.sparc.SPARCRegisterType
               }
               class SPARCRegister extends sun.jvm.hotspot.asm.Register {
                   constructor(arg0: int)
                   constructor(arg0: sun.jvm.hotspot.asm.sparc.SPARCRegisterType, arg1: int)
                   getNumberOfRegisters(): int
                   isIn(): boolean
                   isLocal(): boolean
                   isOut(): boolean
                   isGlobal(): boolean
                   afterSave(): sun.jvm.hotspot.asm.sparc.SPARCRegister
                   afterRestore(): sun.jvm.hotspot.asm.sparc.SPARCRegister
                   spOffsetInSavedWindow(): long
                   toString(): java.lang.String
                   isFramePointer(): boolean
                   isStackPointer(): boolean
                   isFloat(): boolean
                   isV9Only(): boolean
               }
               class SPARCArgument {
                   static NUM_REGISTER_PARAMETERS: int
                   constructor(arg0: int, arg1: boolean)
                   getNumber(): int
                   getIsIn(): boolean
                   getIsOut(): boolean
                   getSuccessor(): sun.jvm.hotspot.asm.sparc.SPARCArgument
                   asIn(): sun.jvm.hotspot.asm.sparc.SPARCArgument
                   asOut(): sun.jvm.hotspot.asm.sparc.SPARCArgument
                   isRegister(): boolean
                   asRegister(): sun.jvm.hotspot.asm.sparc.SPARCRegister
               }
               
            }
            abstract class Register extends sun.jvm.hotspot.asm.ImmediateOrRegister {
                protected number: int
                constructor()
                constructor(arg0: int)
                getNumberOfRegisters(): int
                isValid(): boolean
                getNumber(): int
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                isRegister(): boolean
                isStackPointer(): boolean
                isFramePointer(): boolean
                isFloat(): boolean
            }
            abstract class Operand {
                constructor()
                isAddress(): boolean
                isImmediate(): boolean
                isRegister(): boolean
            }
            abstract class ImmediateOrRegister extends sun.jvm.hotspot.asm.Operand {
                constructor()
            }
            interface SymbolFinder {
                getSymbolFor(arg0: long): java.lang.String
            }
            class DummySymbolFinder implements sun.jvm.hotspot.asm.SymbolFinder {
                constructor()
                getSymbolFor(arg0: long): java.lang.String
            }
            interface InstructionVisitor {
                prologue(): void
                beginInstruction(arg0: long): void
                printAddress(arg0: long): void
                print(arg0: java.lang.String): void
                endInstruction(arg0: long): void
                epilogue(): void
            }
            class Disassembler {
                protected startPc: long
                protected code: byte[]
                static decode(arg0: sun.jvm.hotspot.asm.InstructionVisitor, arg1: sun.jvm.hotspot.code.CodeBlob): void
                static decode(arg0: sun.jvm.hotspot.asm.InstructionVisitor, arg1: sun.jvm.hotspot.code.CodeBlob, arg2: sun.jvm.hotspot.debugger.Address, arg3: sun.jvm.hotspot.debugger.Address): void
            }
            
         }
         class Win32VtblAccess extends sun.jvm.hotspot.types.basic.BasicVtblAccess {
             constructor(arg0: sun.jvm.hotspot.debugger.SymbolLookup, arg1: java.lang.String[])
             protected vtblSymbolForType(arg0: sun.jvm.hotspot.types.Type): java.lang.String
         }
         class StackTrace {
             constructor()
             static main(arg0: java.lang.String[]): void
         }
         class SALauncherLoader extends java.net.URLClassLoader {
             findLibrary(arg0: java.lang.String): java.lang.String
             constructor(arg0: java.lang.ClassLoader)
             java.lang.Class: synchronized
             protected getPermissions(arg0: java.security.CodeSource): java.security.PermissionCollection
         }
         class RMIHelper {
             constructor()
             static rebind(arg0: java.lang.String, arg1: java.rmi.Remote): void
             static unbind(arg0: java.lang.String): void
             static lookup(arg0: java.lang.String): java.rmi.Remote
         }
         class ObjectHistogram {
             constructor()
             static main(arg0: java.lang.String[]): void
         }
         class LinuxVtblAccess extends sun.jvm.hotspot.types.basic.BasicVtblAccess {
             constructor(arg0: sun.jvm.hotspot.debugger.SymbolLookup, arg1: java.lang.String[])
             protected vtblSymbolForType(arg0: sun.jvm.hotspot.types.Type): java.lang.String
         }
         class HotSpotTypeDataBase extends sun.jvm.hotspot.types.basic.BasicTypeDataBase {
             constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription, arg1: sun.jvm.hotspot.types.basic.VtblAccess, arg2: sun.jvm.hotspot.debugger.Debugger, arg3: java.lang.String[])
             lookupType(arg0: java.lang.String, arg1: boolean): sun.jvm.hotspot.types.Type
             createType(arg0: java.lang.String, arg1: java.lang.String, arg2: boolean, arg3: boolean, arg4: boolean, arg5: long): void
             createField(arg0: sun.jvm.hotspot.types.basic.BasicType, arg1: java.lang.String, arg2: sun.jvm.hotspot.types.Type, arg3: boolean, arg4: long, arg5: sun.jvm.hotspot.debugger.Address): void
             internalCreateField(arg0: sun.jvm.hotspot.types.basic.BasicType, arg1: java.lang.String, arg2: sun.jvm.hotspot.types.Type, arg3: boolean, arg4: long, arg5: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.types.Field
         }
         class HotSpotSolarisVtblAccess extends sun.jvm.hotspot.types.basic.BasicVtblAccess {
             constructor(arg0: sun.jvm.hotspot.debugger.SymbolLookup, arg1: java.lang.String[])
             protected vtblSymbolForType(arg0: sun.jvm.hotspot.types.Type): java.lang.String
         }
         class HelloWorld {
             constructor()
             static main(arg0: java.lang.String[]): void
             static e(): int
             static fib(arg0: int): int
         }
         class HSDB implements sun.jvm.hotspot.ui.ObjectHistogramPanel$Listener , sun.jvm.hotspot.ui.SAListener {
             static main(arg0: java.lang.String[]): void
             constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
             protected closeUI(): void
             run(): void
             showThreadOopInspector(arg0: sun.jvm.hotspot.runtime.JavaThread): void
             showInspector(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
             showLiveness(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.utilities.LivenessPathList): void
             showThreadStackMemory(arg0: sun.jvm.hotspot.runtime.JavaThread): void
             showObjectsOfType(arg0: sun.jvm.hotspot.oops.Klass): void
             showThreadInfo(arg0: sun.jvm.hotspot.runtime.JavaThread): void
             showJavaStackTrace(arg0: sun.jvm.hotspot.runtime.JavaThread): void
             showClassBrowser(): void
             showCodeViewer(): void
             showCodeViewer(arg0: sun.jvm.hotspot.debugger.Address): void
             showMemoryViewer(): void
             showCommandLineFlags(): void
             showVMVersion(): void
             showSystemProperties(): void
             static access$000(arg0: sun.jvm.hotspot.HSDB): void
             static access$100(arg0: sun.jvm.hotspot.HSDB): void
             static access$200(arg0: sun.jvm.hotspot.HSDB): void
             static access$300(arg0: sun.jvm.hotspot.HSDB): void
             static access$400(arg0: sun.jvm.hotspot.HSDB): void
             static access$500(arg0: sun.jvm.hotspot.HSDB): void
             static access$600(arg0: sun.jvm.hotspot.HSDB): void
             static access$700(arg0: sun.jvm.hotspot.HSDB): void
             static access$800(arg0: sun.jvm.hotspot.HSDB): void
             static access$900(arg0: sun.jvm.hotspot.HSDB): void
             static access$1000(arg0: sun.jvm.hotspot.HSDB): void
             static access$1100(arg0: sun.jvm.hotspot.HSDB): void
             static access$1200(arg0: sun.jvm.hotspot.HSDB): void
             static access$1300(arg0: sun.jvm.hotspot.HSDB): void
             static access$1400(arg0: sun.jvm.hotspot.HSDB): void
             static access$1500(arg0: sun.jvm.hotspot.HSDB): void
             static access$1600(arg0: sun.jvm.hotspot.HSDB): javax.swing.JDesktopPane
             static access$1700(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String): void
             static access$1800(arg0: sun.jvm.hotspot.HSDB): sun.jvm.hotspot.utilities.WorkerThread
             static access$1900(arg0: sun.jvm.hotspot.HSDB): java.util.List
             static access$2000(arg0: sun.jvm.hotspot.HSDB, arg1: java.util.List, arg2: boolean): void
             static access$2100(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String, arg2: java.lang.String): void
             static access$2200(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String): void
             static access$2300(arg0: sun.jvm.hotspot.HSDB): javax.swing.JMenuItem
             static access$2400(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String, arg2: int): java.lang.String
             static access$2500(arg0: sun.jvm.hotspot.HSDB): java.lang.String
             static access$2600(arg0: sun.jvm.hotspot.HSDB): javax.swing.JInternalFrame
             static access$2602(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame): javax.swing.JInternalFrame
             static access$2700(arg0: sun.jvm.hotspot.HSDB): int
             static access$2802(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame): javax.swing.JInternalFrame
             static access$2800(arg0: sun.jvm.hotspot.HSDB): javax.swing.JInternalFrame
             static access$2900(arg0: sun.jvm.hotspot.HSDB): java.util.List
             static access$3000(arg0: sun.jvm.hotspot.HSDB): javax.swing.JMenu
             static access$3100(arg0: sun.jvm.hotspot.HSDB): sun.jvm.hotspot.HotSpotAgent
             static access$3200(arg0: sun.jvm.hotspot.HSDB): boolean
             static access$3300(arg0: sun.jvm.hotspot.HSDB): java.lang.String
             static access$3400(arg0: sun.jvm.hotspot.HSDB): java.lang.String
         }
         class HSDB$VisitHeap implements java.lang.Runnable {
             visitor: sun.jvm.hotspot.oops.HeapVisitor
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: sun.jvm.hotspot.oops.HeapVisitor)
             run(): void
         }
         class HSDB$HeapProgress implements sun.jvm.hotspot.utilities.HeapProgressThunk {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String)
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String, arg2: java.lang.String)
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String, arg2: java.lang.String, arg3: sun.jvm.hotspot.HSDB$CleanupThunk)
             heapIterationFractionUpdate(arg0: double): void
             heapIterationComplete(): void
             static access$3502(arg0: sun.jvm.hotspot.HSDB$HeapProgress, arg1: javax.swing.JInternalFrame): javax.swing.JInternalFrame
             static access$3600(arg0: sun.jvm.hotspot.HSDB$HeapProgress): java.lang.String
             static access$3500(arg0: sun.jvm.hotspot.HSDB$HeapProgress): javax.swing.JInternalFrame
             static access$3702(arg0: sun.jvm.hotspot.HSDB$HeapProgress, arg1: sun.jvm.hotspot.ui.ProgressBarPanel): sun.jvm.hotspot.ui.ProgressBarPanel
             static access$3800(arg0: sun.jvm.hotspot.HSDB$HeapProgress): java.lang.String
             static access$3700(arg0: sun.jvm.hotspot.HSDB$HeapProgress): sun.jvm.hotspot.ui.ProgressBarPanel
         }
         class HSDB$HeapProgress$3 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$HeapProgress
             constructor(arg0: sun.jvm.hotspot.HSDB$HeapProgress)
             run(): void
         }
         class HSDB$HeapProgress$2 implements java.lang.Runnable {
             val$fractionOfHeapVisited: double
             this$1: sun.jvm.hotspot.HSDB$HeapProgress
             constructor(arg0: sun.jvm.hotspot.HSDB$HeapProgress, arg1: double)
             run(): void
         }
         class HSDB$HeapProgress$1 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$HeapProgress
             constructor(arg0: sun.jvm.hotspot.HSDB$HeapProgress)
             run(): void
         }
         interface HSDB$CleanupThunk {
             heapIterationComplete(): void
         }
         class HSDB$48 implements java.lang.Runnable {
             val$panel: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel
             val$address: sun.jvm.hotspot.debugger.Address
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel, arg2: sun.jvm.hotspot.debugger.Address)
             run(): void
         }
         class HSDB$47 implements java.lang.Runnable {
             val$progressFrame: javax.swing.JInternalFrame
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame)
             run(): void
         }
         class HSDB$47$1 implements java.lang.Runnable {
             val$htmlText: java.lang.String
             this$1: sun.jvm.hotspot.HSDB$47
             constructor(arg0: sun.jvm.hotspot.HSDB$47, arg1: java.lang.String)
             run(): void
         }
         class HSDB$46 extends sun.jvm.hotspot.CommandProcessor$DebuggerInterface {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             getAgent(): sun.jvm.hotspot.HotSpotAgent
             isAttached(): boolean
             attach(arg0: java.lang.String): void
             attach(arg0: java.lang.String, arg1: java.lang.String): void
             detach(): void
             reattach(): void
         }
         class HSDB$FindObjectByTypeCleanupThunk implements sun.jvm.hotspot.HSDB$CleanupThunk {
             finder: sun.jvm.hotspot.utilities.FindObjectByType
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: sun.jvm.hotspot.utilities.FindObjectByType)
             heapIterationComplete(): void
         }
         class HSDB$FindObjectByTypeCleanupThunk$1 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$FindObjectByTypeCleanupThunk
             constructor(arg0: sun.jvm.hotspot.HSDB$FindObjectByTypeCleanupThunk)
             run(): void
         }
         class HSDB$ObjectHistogramCleanupThunk implements sun.jvm.hotspot.HSDB$CleanupThunk {
             histo: sun.jvm.hotspot.oops.ObjectHistogram
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: sun.jvm.hotspot.oops.ObjectHistogram)
             heapIterationComplete(): void
         }
         class HSDB$ObjectHistogramCleanupThunk$1 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$ObjectHistogramCleanupThunk
             constructor(arg0: sun.jvm.hotspot.HSDB$ObjectHistogramCleanupThunk)
             run(): void
         }
         class HSDB$45 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$45$1 implements java.util.Observer {
             this$1: sun.jvm.hotspot.HSDB$45
             constructor(arg0: sun.jvm.hotspot.HSDB$45)
             update(arg0: java.util.Observable, arg1: java.lang.Object): void
         }
         class HSDB$44 implements java.lang.Runnable {
             val$remoteMachineName: java.lang.String
             val$errMsg: java.lang.String
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String, arg2: java.lang.String)
             run(): void
         }
         class HSDB$43 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$42 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$41 implements java.lang.Runnable {
             val$corePath: java.lang.String
             val$errMsg: java.lang.String
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String, arg2: java.lang.String)
             run(): void
         }
         class HSDB$40 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$39 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$38 implements java.lang.Runnable {
             val$errMsg: java.lang.String
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: java.lang.String)
             run(): void
         }
         class HSDB$37 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$36 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$35 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$34 extends sun.jvm.hotspot.HSDB$StackWalker {
             val$thread: sun.jvm.hotspot.runtime.JavaThread
             val$addressSize: long
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: sun.jvm.hotspot.runtime.JavaVFrame, arg2: sun.jvm.hotspot.ui.AnnotatedMemoryPanel, arg3: sun.jvm.hotspot.runtime.JavaThread, arg4: long)
             run(): void
         }
         class HSDB$34$1 implements sun.jvm.hotspot.runtime.AddressVisitor {
             this$1: sun.jvm.hotspot.HSDB$34
             constructor(arg0: sun.jvm.hotspot.HSDB$34)
             visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
             visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
             addAnnotation(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.OopHandle): void
         }
         abstract class HSDB$StackWalker implements java.lang.Runnable {
             protected vf: sun.jvm.hotspot.runtime.JavaVFrame
             protected annoPanel: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: sun.jvm.hotspot.runtime.JavaVFrame, arg2: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
         }
         class HSDB$SignalInfo {
             sigNum: int
             sigName: java.lang.String
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
         }
         class HSDB$33 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$33$1 implements java.lang.Runnable {
             val$errMsg: java.lang.String
             this$1: sun.jvm.hotspot.HSDB$33
             constructor(arg0: sun.jvm.hotspot.HSDB$33, arg1: java.lang.String)
             run(): void
         }
         class HSDB$32 implements java.awt.event.ActionListener {
             val$dialog: javax.swing.JInternalFrame
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$31 implements java.awt.event.ActionListener {
             val$dialog: javax.swing.JInternalFrame
             val$pidTextField: javax.swing.JTextField
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame, arg2: javax.swing.JTextField)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$31$1 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$31
             constructor(arg0: sun.jvm.hotspot.HSDB$31)
             run(): void
         }
         class HSDB$30 implements java.awt.event.ActionListener {
             val$dialog: javax.swing.JInternalFrame
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$29 implements java.awt.event.ActionListener {
             val$dialog: javax.swing.JInternalFrame
             val$execPathField: javax.swing.JTextField
             val$corePathField: javax.swing.JTextField
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame, arg2: javax.swing.JTextField, arg3: javax.swing.JTextField)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$29$1 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$29
             constructor(arg0: sun.jvm.hotspot.HSDB$29)
             run(): void
         }
         class HSDB$28 implements java.awt.event.ActionListener {
             val$dialog: javax.swing.JInternalFrame
             val$execPathField: javax.swing.JTextField
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame, arg2: javax.swing.JTextField)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$27 implements java.awt.event.ActionListener {
             val$dialog: javax.swing.JInternalFrame
             val$corePathField: javax.swing.JTextField
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame, arg2: javax.swing.JTextField)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$26 implements java.awt.event.ActionListener {
             val$attachDialog: javax.swing.JInternalFrame
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$25 implements java.awt.event.ActionListener {
             val$attachDialog: javax.swing.JInternalFrame
             val$pidTextField: javax.swing.JTextField
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB, arg1: javax.swing.JInternalFrame, arg2: javax.swing.JTextField)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$25$1 implements java.lang.Runnable {
             this$1: sun.jvm.hotspot.HSDB$25
             constructor(arg0: sun.jvm.hotspot.HSDB$25)
             run(): void
         }
         class HSDB$24 extends java.lang.Thread {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             run(): void
         }
         class HSDB$23 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$22 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$21 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$20 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$19 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$18 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$17 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$16 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$15 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$14 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$13 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$12 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$11 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$10 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$9 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$8 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$7 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$6 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$5 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$4 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$3 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$2 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class HSDB$1 implements java.awt.event.ActionListener {
             this$0: sun.jvm.hotspot.HSDB
             constructor(arg0: sun.jvm.hotspot.HSDB)
             actionPerformed(arg0: java.awt.event.ActionEvent): void
         }
         class DebugServer {
             constructor()
             static main(arg0: java.lang.String[]): void
         }
         class DebugServer$1 implements java.lang.Runnable {
             val$agent: sun.jvm.hotspot.HotSpotAgent
             this$0: sun.jvm.hotspot.DebugServer
             constructor(arg0: sun.jvm.hotspot.DebugServer, arg1: sun.jvm.hotspot.HotSpotAgent)
             run(): void
         }
         namespace tools {
            namespace soql {
               class SOQL extends sun.jvm.hotspot.tools.Tool {
                   protected soqlEngine: sun.jvm.hotspot.utilities.soql.SOQLEngine
                   protected in: java.io.BufferedReader
                   protected out: java.io.PrintStream
                   protected static prompt: java.lang.String
                   protected static secondPrompt: java.lang.String
                   static main(arg0: java.lang.String[]): void
                   constructor()
                   constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                   run(): void
                   protected handleSelect(arg0: java.lang.String): void
                   protected handleClasses(arg0: java.lang.String): void
                   protected handleClass(arg0: java.lang.String): void
                   protected getOopAtAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.oops.Oop
                   protected handleObject(arg0: java.lang.String): void
                   protected handleUnknown(arg0: java.lang.String): void
               }
               class SOQL$1 implements sun.jvm.hotspot.utilities.soql.ObjectVisitor {
                   this$0: sun.jvm.hotspot.tools.soql.SOQL
                   constructor(arg0: sun.jvm.hotspot.tools.soql.SOQL)
                   visit(arg0: java.lang.Object): void
               }
               class JSDB extends sun.jvm.hotspot.tools.Tool {
                   constructor()
                   constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                   static main(arg0: java.lang.String[]): void
                   run(): void
               }
               class JSDB$1 extends sun.jvm.hotspot.utilities.soql.JSJavaScriptEngine {
                   this$0: sun.jvm.hotspot.tools.soql.JSDB
                   constructor(arg0: sun.jvm.hotspot.tools.soql.JSDB)
                   getObjectReader(): sun.jvm.hotspot.utilities.ObjectReader
                   getJSJavaFactory(): sun.jvm.hotspot.utilities.soql.JSJavaFactory
               }
               
            }
            class SysPropsDumper extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                run(): void
                static main(arg0: java.lang.String[]): void
            }
            class StackTrace extends sun.jvm.hotspot.tools.Tool {
                constructor(arg0: boolean, arg1: boolean)
                constructor()
                run(): void
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger, arg1: boolean, arg2: boolean)
                run(arg0: java.io.PrintStream): void
                static main(arg0: java.lang.String[]): void
            }
            class PStack extends sun.jvm.hotspot.tools.Tool {
                constructor(arg0: boolean, arg1: boolean)
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                run(): void
                run(arg0: java.io.PrintStream): void
                run(arg0: java.io.PrintStream, arg1: sun.jvm.hotspot.debugger.Debugger): void
                static main(arg0: java.lang.String[]): void
            }
            class PMap extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                run(): void
                run(arg0: java.io.PrintStream): void
                run(arg0: java.io.PrintStream, arg1: sun.jvm.hotspot.debugger.Debugger): void
                static main(arg0: java.lang.String[]): void
            }
            class ObjectHistogram extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                run(): void
                run(arg0: java.io.PrintStream, arg1: java.io.PrintStream): void
                static main(arg0: java.lang.String[]): void
            }
            class JStack extends sun.jvm.hotspot.tools.Tool {
                constructor(arg0: boolean, arg1: boolean)
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                protected needsJavaPrefix(): boolean
                getName(): java.lang.String
                protected printFlagsUsage(): void
                run(): void
                static main(arg0: java.lang.String[]): void
            }
            class JSnap extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                run(): void
                static main(arg0: java.lang.String[]): void
            }
            class JSnap$1 implements sun.jvm.hotspot.runtime.PerfMemory$PerfDataEntryVisitor {
                val$out: java.io.PrintStream
                this$0: sun.jvm.hotspot.tools.JSnap
                constructor(arg0: sun.jvm.hotspot.tools.JSnap, arg1: java.io.PrintStream)
                visit(arg0: sun.jvm.hotspot.runtime.PerfDataEntry): boolean
            }
            class JMap extends sun.jvm.hotspot.tools.Tool {
                static MODE_HEAP_SUMMARY: int
                static MODE_HISTOGRAM: int
                static MODE_CLSTATS: int
                static MODE_PMAP: int
                static MODE_HEAP_GRAPH_HPROF_BIN: int
                static MODE_HEAP_GRAPH_GXL: int
                static MODE_FINALIZERINFO: int
                constructor(arg0: int)
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                protected needsJavaPrefix(): boolean
                getName(): java.lang.String
                protected getCommandFlags(): java.lang.String
                protected printFlagsUsage(): void
                run(): void
                static main(arg0: java.lang.String[]): void
                writeHeapHprofBin(arg0: java.lang.String): boolean
                writeHeapHprofBin(): boolean
                writeHeapGXL(): boolean
            }
            class JInfo extends sun.jvm.hotspot.tools.Tool {
                static MODE_FLAGS: int
                static MODE_SYSPROPS: int
                static MODE_BOTH: int
                constructor()
                constructor(arg0: int)
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                protected needsJavaPrefix(): boolean
                getName(): java.lang.String
                protected printFlagsUsage(): void
                run(): void
                static main(arg0: java.lang.String[]): void
                static access$000(arg0: sun.jvm.hotspot.tools.JInfo): void
            }
            class JInfo$1 extends sun.jvm.hotspot.tools.Tool {
                this$0: sun.jvm.hotspot.tools.JInfo
                constructor(arg0: sun.jvm.hotspot.tools.JInfo)
                run(): void
            }
            class HeapSummary extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                static main(arg0: java.lang.String[]): void
                run(): void
            }
            class HeapSummary$1StringStat implements sun.jvm.hotspot.memory.StringTable$StringVisitor {
                this$0: sun.jvm.hotspot.tools.HeapSummary
                constructor(arg0: sun.jvm.hotspot.tools.HeapSummary)
                visit(arg0: sun.jvm.hotspot.oops.Instance): void
                print(): void
            }
            class HeapDumper extends sun.jvm.hotspot.tools.Tool {
                constructor(arg0: java.lang.String)
                constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.JVMDebugger)
                protected printFlagsUsage(): void
                run(): void
                static main(arg0: java.lang.String[]): void
            }
            class FlagDumper extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                run(): void
                static main(arg0: java.lang.String[]): void
            }
            class FinalizerInfo extends sun.jvm.hotspot.tools.Tool {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                static main(arg0: java.lang.String[]): void
                run(): void
            }
            class FinalizerInfo$2 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.tools.FinalizerInfo
                constructor(arg0: sun.jvm.hotspot.tools.FinalizerInfo)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class FinalizerInfo$1 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$queueref: sun.jvm.hotspot.oops.Oop[]
                this$0: sun.jvm.hotspot.tools.FinalizerInfo
                constructor(arg0: sun.jvm.hotspot.tools.FinalizerInfo, arg1: sun.jvm.hotspot.oops.Oop[])
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
            }
            abstract class Tool implements java.lang.Runnable {
                protected static DEBUGEE_PID: int
                protected static DEBUGEE_CORE: int
                protected static DEBUGEE_REMOTE: int
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                getName(): java.lang.String
                protected needsJavaPrefix(): boolean
                protected setAgent(arg0: sun.jvm.hotspot.HotSpotAgent): void
                protected setDebugeeType(arg0: int): void
                protected getAgent(): sun.jvm.hotspot.HotSpotAgent
                protected getDebugeeType(): int
                protected printUsage(): void
                protected printFlagsUsage(): void
                protected usage(): void
                protected execute(arg0: java.lang.String[]): void
                stop(): void
                start(): void
            }
            class ClassLoaderStats extends sun.jvm.hotspot.tools.Tool {
                verbose: boolean
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
                static main(arg0: java.lang.String[]): void
                run(): void
                static access$100(arg0: sun.jvm.hotspot.tools.ClassLoaderStats, arg1: sun.jvm.hotspot.oops.InstanceKlass): long
            }
            class ClassLoaderStats$1ParentFinder extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                this$0: sun.jvm.hotspot.tools.ClassLoaderStats
                constructor(arg0: sun.jvm.hotspot.tools.ClassLoaderStats)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                getParent(): sun.jvm.hotspot.oops.Oop
            }
            class ClassLoaderStats$3 implements sun.jvm.hotspot.utilities.HeapProgressThunk {
                val$err: java.io.PrintStream
                this$0: sun.jvm.hotspot.tools.ClassLoaderStats
                constructor(arg0: sun.jvm.hotspot.tools.ClassLoaderStats, arg1: java.io.PrintStream)
                heapIterationFractionUpdate(arg0: double): void
                heapIterationComplete(): void
            }
            class ClassLoaderStats$2 implements sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor {
                val$loaderMap: java.util.Map
                val$bootstrapLoaderData: sun.jvm.hotspot.tools.ClassLoaderStats$LoaderData
                this$0: sun.jvm.hotspot.tools.ClassLoaderStats
                constructor(arg0: sun.jvm.hotspot.tools.ClassLoaderStats, arg1: java.util.Map, arg2: sun.jvm.hotspot.tools.ClassLoaderStats$LoaderData)
                visit(arg0: sun.jvm.hotspot.oops.Klass, arg1: sun.jvm.hotspot.oops.Oop): void
            }
            class ClassLoaderStats$1 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                val$loaderMap: java.util.Map
                this$0: sun.jvm.hotspot.tools.ClassLoaderStats
                constructor(arg0: sun.jvm.hotspot.tools.ClassLoaderStats, arg1: java.util.Map)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class ClassLoaderStats$LoaderData {
                numClasses: long
                classSize: long
                classDetail: java.util.List
                constructor(arg0: sun.jvm.hotspot.tools.ClassLoaderStats$1)
            }
            class ClassLoaderStats$ClassData {
                klass: sun.jvm.hotspot.oops.Klass
                size: long
                constructor(arg0: sun.jvm.hotspot.oops.Klass, arg1: long)
            }
            namespace jcore {
               class PackageNameFilter implements sun.jvm.hotspot.tools.jcore.ClassFilter {
                   pkgList: java.lang.Object[]
                   constructor()
                   constructor(arg0: java.lang.String)
                   canInclude(arg0: sun.jvm.hotspot.oops.InstanceKlass): boolean
               }
               class NameFilter implements sun.jvm.hotspot.tools.jcore.ClassFilter {
                   includePattern: java.util.regex.Pattern
                   constructor()
                   constructor(arg0: java.lang.String)
                   canInclude(arg0: sun.jvm.hotspot.oops.InstanceKlass): boolean
               }
               class ClassWriter implements sun.jvm.hotspot.runtime.ClassConstants {
                   static DEBUG: boolean
                   protected klass: sun.jvm.hotspot.oops.InstanceKlass
                   protected dos: java.io.DataOutputStream
                   protected cpool: sun.jvm.hotspot.oops.ConstantPool
                   protected classToIndex: java.util.Map<java.lang.String, java.lang.Short>
                   protected utf8ToIndex: java.util.Map<java.lang.String, java.lang.Short>
                   protected _sourceFileIndex: short
                   protected _innerClassesIndex: short
                   protected _syntheticIndex: short
                   protected _deprecatedIndex: short
                   protected _constantValueIndex: short
                   protected _codeIndex: short
                   protected _exceptionsIndex: short
                   protected _lineNumberTableIndex: short
                   protected _localVariableTableIndex: short
                   protected _signatureIndex: short
                   protected debugMessage(arg0: java.lang.String): void
                   protected static extractHighShortFromInt(arg0: int): int
                   protected static extractLowShortFromInt(arg0: int): int
                   constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: java.io.OutputStream)
                   write(): void
                   protected writeVersion(): void
                   protected writeIndex(arg0: int): void
                   protected writeConstantPool(): void
                   protected writeClassAccessFlags(): void
                   protected writeThisClass(): void
                   protected writeSuperClass(): void
                   protected writeInterfaces(): void
                   protected writeFields(): void
                   protected isSynthetic(arg0: short): boolean
                   protected hasSyntheticAttribute(arg0: short): boolean
                   protected writeSynthetic(): void
                   protected writeMethods(): void
                   protected writeMethod(arg0: sun.jvm.hotspot.oops.Method): void
                   protected rewriteByteCode(arg0: sun.jvm.hotspot.oops.Method, arg1: byte[]): void
                   protected writeGenericSignature(arg0: java.lang.String): void
                   protected writeClassAttributes(): void
               }
               class ClassDump extends sun.jvm.hotspot.tools.Tool {
                   constructor()
                   constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger, arg1: java.lang.String)
                   setClassFilter(arg0: sun.jvm.hotspot.tools.jcore.ClassFilter): void
                   setOutputDirectory(arg0: java.lang.String): void
                   setJarOutput(arg0: java.lang.String): void
                   run(): void
                   getName(): java.lang.String
                   static main(arg0: java.lang.String[]): void
                   static access$000(arg0: sun.jvm.hotspot.tools.jcore.ClassDump, arg1: sun.jvm.hotspot.oops.InstanceKlass): void
               }
               class ClassDump$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                   this$0: sun.jvm.hotspot.tools.jcore.ClassDump
                   constructor(arg0: sun.jvm.hotspot.tools.jcore.ClassDump)
                   visit(arg0: sun.jvm.hotspot.oops.Klass): void
               }
               class ByteCodeRewriter {
                   static DEBUG: boolean
                   protected debugMessage(arg0: java.lang.String): void
                   constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: sun.jvm.hotspot.oops.ConstantPool, arg2: byte[])
                   protected getConstantPoolIndexFromRefMap(arg0: int, arg1: int): short
                   protected getConstantPoolIndex(arg0: int, arg1: int): short
                   rewrite(): void
               }
               class ByteCodeRewriter$1 implements java.security.PrivilegedAction {
                   constructor()
                   run(): java.lang.Object
               }
               interface ClassFilter {
                   canInclude(arg0: sun.jvm.hotspot.oops.InstanceKlass): boolean
               }
               
            }
            
         }
         namespace gc_interface {
            class ReferenceType extends java.lang.Enum<sun.jvm.hotspot.gc_interface.ReferenceType> {
                static REF_NONE: sun.jvm.hotspot.gc_interface.ReferenceType
                static REF_OTHER: sun.jvm.hotspot.gc_interface.ReferenceType
                static REF_SOFT: sun.jvm.hotspot.gc_interface.ReferenceType
                static REF_WEAK: sun.jvm.hotspot.gc_interface.ReferenceType
                static REF_FINAL: sun.jvm.hotspot.gc_interface.ReferenceType
                static REF_PHANTOM: sun.jvm.hotspot.gc_interface.ReferenceType
                static values(): sun.jvm.hotspot.gc_interface.ReferenceType[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.gc_interface.ReferenceType
                value(): java.lang.String
            }
            class GCWhen extends java.lang.Enum<sun.jvm.hotspot.gc_interface.GCWhen> {
                static BeforeGC: sun.jvm.hotspot.gc_interface.GCWhen
                static AfterGC: sun.jvm.hotspot.gc_interface.GCWhen
                static GCWhenEndSentinel: sun.jvm.hotspot.gc_interface.GCWhen
                static values(): sun.jvm.hotspot.gc_interface.GCWhen[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.gc_interface.GCWhen
                value(): java.lang.String
            }
            class GCName extends java.lang.Enum<sun.jvm.hotspot.gc_interface.GCName> {
                static ParallelOld: sun.jvm.hotspot.gc_interface.GCName
                static SerialOld: sun.jvm.hotspot.gc_interface.GCName
                static PSMarkSweep: sun.jvm.hotspot.gc_interface.GCName
                static ParallelScavenge: sun.jvm.hotspot.gc_interface.GCName
                static DefNew: sun.jvm.hotspot.gc_interface.GCName
                static ParNew: sun.jvm.hotspot.gc_interface.GCName
                static G1New: sun.jvm.hotspot.gc_interface.GCName
                static ConcurrentMarkSweep: sun.jvm.hotspot.gc_interface.GCName
                static G1Old: sun.jvm.hotspot.gc_interface.GCName
                static GCNameEndSentinel: sun.jvm.hotspot.gc_interface.GCName
                static values(): sun.jvm.hotspot.gc_interface.GCName[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.gc_interface.GCName
                value(): java.lang.String
            }
            class GCCause extends java.lang.Enum<sun.jvm.hotspot.gc_interface.GCCause> {
                static _java_lang_system_gc: sun.jvm.hotspot.gc_interface.GCCause
                static _full_gc_alot: sun.jvm.hotspot.gc_interface.GCCause
                static _scavenge_alot: sun.jvm.hotspot.gc_interface.GCCause
                static _allocation_profiler: sun.jvm.hotspot.gc_interface.GCCause
                static _jvmti_force_gc: sun.jvm.hotspot.gc_interface.GCCause
                static _gc_locker: sun.jvm.hotspot.gc_interface.GCCause
                static _heap_inspection: sun.jvm.hotspot.gc_interface.GCCause
                static _heap_dump: sun.jvm.hotspot.gc_interface.GCCause
                static _no_gc: sun.jvm.hotspot.gc_interface.GCCause
                static _no_cause_specified: sun.jvm.hotspot.gc_interface.GCCause
                static _allocation_failure: sun.jvm.hotspot.gc_interface.GCCause
                static _tenured_generation_full: sun.jvm.hotspot.gc_interface.GCCause
                static _metadata_GC_threshold: sun.jvm.hotspot.gc_interface.GCCause
                static _cms_generation_full: sun.jvm.hotspot.gc_interface.GCCause
                static _cms_initial_mark: sun.jvm.hotspot.gc_interface.GCCause
                static _cms_final_remark: sun.jvm.hotspot.gc_interface.GCCause
                static _cms_concurrent_mark: sun.jvm.hotspot.gc_interface.GCCause
                static _old_generation_expanded_on_last_scavenge: sun.jvm.hotspot.gc_interface.GCCause
                static _old_generation_too_full_to_scavenge: sun.jvm.hotspot.gc_interface.GCCause
                static _adaptive_size_policy: sun.jvm.hotspot.gc_interface.GCCause
                static _g1_inc_collection_pause: sun.jvm.hotspot.gc_interface.GCCause
                static _g1_humongous_allocation: sun.jvm.hotspot.gc_interface.GCCause
                static _last_ditch_collection: sun.jvm.hotspot.gc_interface.GCCause
                static _last_gc_cause: sun.jvm.hotspot.gc_interface.GCCause
                static values(): sun.jvm.hotspot.gc_interface.GCCause[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.gc_interface.GCCause
                value(): java.lang.String
            }
            class G1YCType extends java.lang.Enum<sun.jvm.hotspot.gc_interface.G1YCType> {
                static Normal: sun.jvm.hotspot.gc_interface.G1YCType
                static InitialMark: sun.jvm.hotspot.gc_interface.G1YCType
                static DuringMark: sun.jvm.hotspot.gc_interface.G1YCType
                static Mixed: sun.jvm.hotspot.gc_interface.G1YCType
                static G1YCTypeEndSentinel: sun.jvm.hotspot.gc_interface.G1YCType
                static values(): sun.jvm.hotspot.gc_interface.G1YCType[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.gc_interface.G1YCType
                value(): java.lang.String
            }
            class CollectedHeapName {
                static ABSTRACT: sun.jvm.hotspot.gc_interface.CollectedHeapName
                static SHARED_HEAP: sun.jvm.hotspot.gc_interface.CollectedHeapName
                static GEN_COLLECTED_HEAP: sun.jvm.hotspot.gc_interface.CollectedHeapName
                static G1_COLLECTED_HEAP: sun.jvm.hotspot.gc_interface.CollectedHeapName
                static PARALLEL_SCAVENGE_HEAP: sun.jvm.hotspot.gc_interface.CollectedHeapName
                toString(): java.lang.String
            }
            class CollectedHeap extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                start(): sun.jvm.hotspot.debugger.Address
                capacity(): long
                used(): long
                reservedRegion(): sun.jvm.hotspot.memory.MemRegion
                isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isInReserved(arg0: sun.jvm.hotspot.debugger.Address): boolean
                kind(): sun.jvm.hotspot.gc_interface.CollectedHeapName
                print(): void
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CollectedHeap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace c1 {
            class Runtime1 {
                constructor()
                entryFor(arg0: int): sun.jvm.hotspot.debugger.Address
                blobFor(arg0: int): sun.jvm.hotspot.code.CodeBlob
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Runtime1$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace memory {
            class TenuredSpace extends sun.jvm.hotspot.memory.OffsetTableContigSpace {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
            }
            class TenuredGeneration extends sun.jvm.hotspot.memory.OneContigSpaceCardGeneration {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                kind(): sun.jvm.hotspot.memory.Generation$Name
                name(): java.lang.String
            }
            class ProtectionDomainCacheEntry extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                protectionDomain(): sun.jvm.hotspot.oops.Oop
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ProtectionDomainCacheEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PlaceholderEntry extends sun.jvm.hotspot.utilities.HashtableEntry {
                loader(): sun.jvm.hotspot.oops.Oop
                loaderData(): sun.jvm.hotspot.classfile.ClassLoaderData
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                klass(): sun.jvm.hotspot.oops.Symbol
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class PlaceholderEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ParNewGeneration extends sun.jvm.hotspot.memory.DefNewGeneration {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                kind(): sun.jvm.hotspot.memory.Generation$Name
            }
            abstract class OneContigSpaceCardGeneration extends sun.jvm.hotspot.memory.CardGeneration {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                theSpace(): sun.jvm.hotspot.memory.ContiguousSpace
                isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                capacity(): long
                used(): long
                free(): long
                contiguousAvailable(): long
                spaceIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure, arg1: boolean): void
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class OneContigSpaceCardGeneration$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class OffsetTableContigSpace extends sun.jvm.hotspot.memory.ContiguousSpace {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
            }
            class LoaderConstraintEntry extends sun.jvm.hotspot.utilities.HashtableEntry {
                name(): sun.jvm.hotspot.oops.Symbol
                numLoaders(): int
                maxLoaders(): int
                initiatingLoader(arg0: int): sun.jvm.hotspot.oops.Oop
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class LoaderConstraintEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LinearAllocBlock extends sun.jvm.hotspot.runtime.VMObject {
                word_size(): long
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class LinearAllocBlock$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class GenerationIsInClosure implements sun.jvm.hotspot.memory.SpaceClosure {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                doSpace(arg0: sun.jvm.hotspot.memory.Space): void
                space(): sun.jvm.hotspot.memory.Space
            }
            class GenerationFactory {
                constructor()
                static newObject(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.memory.Generation
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class GenerationFactory$2 extends sun.jvm.hotspot.memory.Generation {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                name(): java.lang.String
                spaceIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure, arg1: boolean): void
                printOn(arg0: java.io.PrintStream): void
                used(): long
                free(): long
                capacity(): long
                contiguousAvailable(): long
            }
            class GenerationFactory$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class GenCollectedHeap extends sun.jvm.hotspot.memory.SharedHeap {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                nGens(): int
                getGen(arg0: int): sun.jvm.hotspot.memory.Generation
                isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                capacity(): long
                used(): long
                spec(arg0: int): sun.jvm.hotspot.memory.GenerationSpec
                kind(): sun.jvm.hotspot.gc_interface.CollectedHeapName
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class GenCollectedHeap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class FreeChunk extends sun.jvm.hotspot.runtime.VMObject {
                next(): sun.jvm.hotspot.memory.FreeChunk
                prev(): sun.jvm.hotspot.memory.FreeChunk
                size(): long
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static indicatesFreeChunk(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isFree(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class FreeChunk$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class EdenSpace extends sun.jvm.hotspot.memory.ContiguousSpace {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
            }
            class DefNewGeneration extends sun.jvm.hotspot.memory.Generation {
                protected static edenSpaceField: sun.jvm.hotspot.types.AddressField
                protected static fromSpaceField: sun.jvm.hotspot.types.AddressField
                protected static toSpaceField: sun.jvm.hotspot.types.AddressField
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                kind(): sun.jvm.hotspot.memory.Generation$Name
                eden(): sun.jvm.hotspot.memory.EdenSpace
                from(): sun.jvm.hotspot.memory.ContiguousSpace
                to(): sun.jvm.hotspot.memory.ContiguousSpace
                capacity(): long
                used(): long
                free(): long
                contiguousAvailable(): long
                name(): java.lang.String
                spaceIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure, arg1: boolean): void
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class DefNewGeneration$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ContiguousSpace extends sun.jvm.hotspot.memory.CompactibleSpace {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                top(): sun.jvm.hotspot.debugger.Address
                capacity(): long
                used(): long
                free(): long
                usedRegion(): sun.jvm.hotspot.memory.MemRegion
                getLiveRegions(): java.util.List
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ContiguousSpace$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ConcurrentMarkSweepGeneration extends sun.jvm.hotspot.memory.CardGeneration {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                cmsSpace(): sun.jvm.hotspot.memory.CompactibleFreeListSpace
                capacity(): long
                used(): long
                free(): long
                contiguousAvailable(): long
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                spaceIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure, arg1: boolean): void
                kind(): sun.jvm.hotspot.memory.Generation$Name
                name(): java.lang.String
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ConcurrentMarkSweepGeneration$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CompactibleFreeListSpace extends sun.jvm.hotspot.memory.CompactibleSpace {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                collector(): sun.jvm.hotspot.memory.CMSCollector
                free0(): long
                used(): long
                used0(): long
                free(): long
                printOn(arg0: java.io.PrintStream): void
                skipBlockSizeUsingPrintezisBits(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getLiveRegions(): java.util.List
                static adjustObjectSizeInBytes(arg0: long): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CompactibleFreeListSpace$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class GenerationSpec extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                name(): sun.jvm.hotspot.memory.Generation$Name
                initSize(): long
                maxSize(): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class GenerationSpec$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class Generation extends sun.jvm.hotspot.runtime.VMObject {
                protected static K: int
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                kind(): sun.jvm.hotspot.memory.Generation$Name
                static nameForEnum(arg0: int): sun.jvm.hotspot.memory.Generation$Name
                spec(): sun.jvm.hotspot.memory.GenerationSpec
                level(): int
                invocations(): int
                capacity(): long
                used(): long
                free(): long
                contiguousAvailable(): long
                reserved(): sun.jvm.hotspot.memory.MemRegion
                usedRegion(): sun.jvm.hotspot.memory.MemRegion
                isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isInReserved(arg0: sun.jvm.hotspot.debugger.Address): boolean
                protected virtualSpace(): sun.jvm.hotspot.runtime.VirtualSpace
                name(): java.lang.String
                spaceIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure): void
                spaceIterate(arg0: sun.jvm.hotspot.memory.SpaceClosure, arg1: boolean): void
                print(): void
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
                static access$100(): sun.jvm.hotspot.types.CIntegerField
            }
            class Generation$StatRecord extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getInvocations(): int
            }
            class Generation$Name {
                static DEF_NEW: sun.jvm.hotspot.memory.Generation$Name
                static PAR_NEW: sun.jvm.hotspot.memory.Generation$Name
                static MARK_SWEEP_COMPACT: sun.jvm.hotspot.memory.Generation$Name
                static CONCURRENT_MARK_SWEEP: sun.jvm.hotspot.memory.Generation$Name
                static OTHER: sun.jvm.hotspot.memory.Generation$Name
                toString(): java.lang.String
            }
            class Generation$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class CardGeneration extends sun.jvm.hotspot.memory.Generation {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
            }
            class CMSCollector extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                markBitMap(): sun.jvm.hotspot.memory.CMSBitMap
                blockSizeUsingPrintezisBits(arg0: sun.jvm.hotspot.debugger.Address): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CMSCollector$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CMSBitMap extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                printAll(): void
                bmStartWord(): sun.jvm.hotspot.debugger.Address
                bmWordSize(): long
                shifter(): long
                virtualSpace(): sun.jvm.hotspot.runtime.VirtualSpace
                bm(): sun.jvm.hotspot.utilities.BitMap
                getNextMarkedWordAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                heapWordToOffset(arg0: sun.jvm.hotspot.debugger.Address): int
                offsetToHeapWord(arg0: int): sun.jvm.hotspot.debugger.Address
                isMarked(arg0: sun.jvm.hotspot.debugger.Address): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CMSBitMap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class AdaptiveFreeList extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                size(): long
                count(): long
                static sizeOf(): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class AdaptiveFreeList$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class AFLBinaryTreeDictionary extends sun.jvm.hotspot.runtime.VMObject {
                size(): long
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class AFLBinaryTreeDictionary$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface SpaceClosure {
                doSpace(arg0: sun.jvm.hotspot.memory.Space): void
            }
            abstract class Space extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                bottom(): sun.jvm.hotspot.debugger.Address
                end(): sun.jvm.hotspot.debugger.Address
                usedRegion(): sun.jvm.hotspot.memory.MemRegion
                bottomAsOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                nextOopHandle(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: long): sun.jvm.hotspot.debugger.OopHandle
                getLiveRegions(): java.util.List
                capacity(): long
                used(): long
                free(): long
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                print(): void
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Space$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class CompactibleSpace extends sun.jvm.hotspot.memory.Space {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                compactionTop(): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CompactibleSpace$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class SharedHeap extends sun.jvm.hotspot.gc_interface.CollectedHeap {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                kind(): sun.jvm.hotspot.gc_interface.CollectedHeapName
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class SharedHeap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ProtectionDomainEntry extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                next(): sun.jvm.hotspot.memory.ProtectionDomainEntry
                protectionDomain(): sun.jvm.hotspot.oops.Oop
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ProtectionDomainEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class HeapBlock extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getLength(): long
                isFree(): boolean
                getAllocatedSpace(): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
                static access$100(): sun.jvm.hotspot.types.CIntegerField
                static access$200(): sun.jvm.hotspot.types.CIntegerField
            }
            class HeapBlock$Header extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getLength(): long
                isFree(): boolean
            }
            class HeapBlock$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class DictionaryEntry extends sun.jvm.hotspot.utilities.HashtableEntry {
                pdSet(): sun.jvm.hotspot.memory.ProtectionDomainEntry
                loader(): sun.jvm.hotspot.oops.Oop
                loaderData(): sun.jvm.hotspot.classfile.ClassLoaderData
                klass(): sun.jvm.hotspot.oops.Klass
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                equals(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Oop): boolean
                isValidProtectionDomain(arg0: sun.jvm.hotspot.oops.Oop): boolean
                containsProtectionDomain(arg0: sun.jvm.hotspot.oops.Oop): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class DictionaryEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MemRegion implements java.lang.Cloneable {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: long)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address)
                clone(): java.lang.Object
                copy(): sun.jvm.hotspot.memory.MemRegion
                intersection(arg0: sun.jvm.hotspot.memory.MemRegion): sun.jvm.hotspot.memory.MemRegion
                union(arg0: sun.jvm.hotspot.memory.MemRegion): sun.jvm.hotspot.memory.MemRegion
                start(): sun.jvm.hotspot.debugger.Address
                startAsOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                end(): sun.jvm.hotspot.debugger.Address
                endAsOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                setStart(arg0: sun.jvm.hotspot.debugger.Address): void
                setEnd(arg0: sun.jvm.hotspot.debugger.Address): void
                setWordSize(arg0: long): void
                contains(arg0: sun.jvm.hotspot.memory.MemRegion): boolean
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                byteSize(): long
                wordSize(): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MemRegion$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CodeHeap extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                begin(): sun.jvm.hotspot.debugger.Address
                end(): sun.jvm.hotspot.debugger.Address
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                findStart(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                nextBlock(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CodeHeap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LoaderConstraintTable extends sun.jvm.hotspot.utilities.TwoOopHashtable {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                protected getHashtableEntryClass(): java.lang.Class
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class LoaderConstraintTable$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PlaceholderTable extends sun.jvm.hotspot.utilities.TwoOopHashtable {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                protected getHashtableEntryClass(): java.lang.Class
                primArrayClassesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor): void
            }
            class Dictionary extends sun.jvm.hotspot.utilities.TwoOopHashtable {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                protected getHashtableEntryClass(): java.lang.Class
                classesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor): void
                classesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor): void
                find(arg0: int, arg1: long, arg2: sun.jvm.hotspot.oops.Symbol, arg3: sun.jvm.hotspot.oops.Oop, arg4: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Klass
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Dictionary$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class SystemDictionary {
                constructor()
                dictionary(): sun.jvm.hotspot.memory.Dictionary
                sharedDictionary(): sun.jvm.hotspot.memory.Dictionary
                placeholders(): sun.jvm.hotspot.memory.PlaceholderTable
                constraints(): sun.jvm.hotspot.memory.LoaderConstraintTable
                static getThreadKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static getThreadGroupKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static getObjectKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static getStringKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static getClassLoaderKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static getSystemKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static getMethodHandleKlass(): sun.jvm.hotspot.oops.InstanceKlass
                getAbstractOwnableSynchronizerKlass(): sun.jvm.hotspot.oops.InstanceKlass
                static javaSystemLoader(): sun.jvm.hotspot.oops.Oop
                find(arg0: java.lang.String, arg1: sun.jvm.hotspot.oops.Oop, arg2: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Klass
                find(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Oop, arg2: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Klass
                allClassesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor): void
                classesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor): void
                classesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor): void
                primArrayClassesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class SystemDictionary$2 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                val$v: sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor
                this$0: sun.jvm.hotspot.memory.SystemDictionary
                constructor(arg0: sun.jvm.hotspot.memory.SystemDictionary, arg1: sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            interface SystemDictionary$ClassAndLoaderVisitor {
                visit(arg0: sun.jvm.hotspot.oops.Klass, arg1: sun.jvm.hotspot.oops.Oop): void
            }
            interface SystemDictionary$ClassVisitor {
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class SystemDictionary$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class StringTable extends sun.jvm.hotspot.utilities.Hashtable {
                static getTheTable(): sun.jvm.hotspot.memory.StringTable
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                stringsDo(arg0: sun.jvm.hotspot.memory.StringTable$StringVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            interface StringTable$StringVisitor {
                visit(arg0: sun.jvm.hotspot.oops.Instance): void
            }
            class StringTable$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class SymbolTable extends sun.jvm.hotspot.utilities.Hashtable {
                static getTheTable(): sun.jvm.hotspot.memory.SymbolTable
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                probe(arg0: java.lang.String): sun.jvm.hotspot.oops.Symbol
                probe(arg0: byte[]): sun.jvm.hotspot.oops.Symbol
                symbolsDo(arg0: sun.jvm.hotspot.memory.SymbolTable$SymbolVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            interface SymbolTable$SymbolVisitor {
                visit(arg0: sun.jvm.hotspot.oops.Symbol): void
            }
            class SymbolTable$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Universe {
                constructor()
                static narrowOopModeToString(arg0: sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE): java.lang.String
                heap(): sun.jvm.hotspot.gc_interface.CollectedHeap
                static getNarrowOopBase(): long
                static getNarrowOopShift(): int
                static getNarrowKlassBase(): long
                static getNarrowKlassShift(): int
                isIn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isInReserved(arg0: sun.jvm.hotspot.debugger.Address): boolean
                mainThreadGroup(): sun.jvm.hotspot.oops.Oop
                systemThreadGroup(): sun.jvm.hotspot.oops.Oop
                basicTypeClassesDo(arg0: sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor): void
                print(): void
                printOn(arg0: java.io.PrintStream): void
                static elementTypeShouldBeAligned(arg0: sun.jvm.hotspot.runtime.BasicType): boolean
                static fieldTypeShouldBeAligned(arg0: sun.jvm.hotspot.runtime.BasicType): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Universe$2 {
                static $SwitchMap$sun$jvm$hotspot$memory$Universe$NARROW_OOP_MODE: int[]
            }
            class Universe$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Universe$NARROW_OOP_MODE extends java.lang.Enum<sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE> {
                static UnscaledNarrowOop: sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE
                static ZeroBasedNarrowOop: sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE
                static HeapBasedNarrowOop: sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE
                static values(): sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.memory.Universe$NARROW_OOP_MODE
            }
            
         }
         namespace compiler {
            class OopMapValue {
                static TYPE_BITS: int
                static REGISTER_BITS: int
                static TYPE_SHIFT: int
                static REGISTER_SHIFT: int
                static TYPE_MASK: int
                static TYPE_MASK_IN_PLACE: int
                static REGISTER_MASK: int
                static REGISTER_MASK_IN_PLACE: int
                static UNUSED_VALUE: int
                static OOP_VALUE: int
                static VALUE_VALUE: int
                static NARROWOOP_VALUE: int
                static CALLEE_SAVED_VALUE: int
                static DERIVED_OOP_VALUE: int
                constructor()
                constructor(arg0: sun.jvm.hotspot.runtime.VMReg, arg1: sun.jvm.hotspot.compiler.OopMapValue$OopTypes)
                constructor(arg0: sun.jvm.hotspot.runtime.VMReg, arg1: sun.jvm.hotspot.compiler.OopMapValue$OopTypes, arg2: sun.jvm.hotspot.runtime.VMReg)
                constructor(arg0: sun.jvm.hotspot.code.CompressedReadStream)
                readFrom(arg0: sun.jvm.hotspot.code.CompressedReadStream): void
                isOop(): boolean
                isValue(): boolean
                isNarrowOop(): boolean
                isCalleeSaved(): boolean
                isDerivedOop(): boolean
                getReg(): sun.jvm.hotspot.runtime.VMReg
                setReg(arg0: sun.jvm.hotspot.runtime.VMReg): void
                getType(): sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                setType(arg0: sun.jvm.hotspot.compiler.OopMapValue$OopTypes): void
                getContentReg(): sun.jvm.hotspot.runtime.VMReg
                setContentReg(arg0: sun.jvm.hotspot.runtime.VMReg): void
                isRegisterLoc(): boolean
                isStackLoc(): boolean
                getStackOffset(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            abstract class OopMapValue$OopTypes {
                static UNUSED_VALUE: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                static OOP_VALUE: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                static VALUE_VALUE: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                static NARROWOOP_VALUE: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                static CALLEE_SAVED_VALUE: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                static DERIVED_OOP_VALUE: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
                getValue(): int
                protected (: sun.jvm.hotspot.compiler.OopMapValue$OopTypes
            }
            class OopMapValue$OopTypes$6 extends sun.jvm.hotspot.compiler.OopMapValue$OopTypes {
                constructor()
                getValue(): int
            }
            class OopMapValue$OopTypes$5 extends sun.jvm.hotspot.compiler.OopMapValue$OopTypes {
                constructor()
                getValue(): int
            }
            class OopMapValue$OopTypes$4 extends sun.jvm.hotspot.compiler.OopMapValue$OopTypes {
                constructor()
                getValue(): int
            }
            class OopMapValue$OopTypes$3 extends sun.jvm.hotspot.compiler.OopMapValue$OopTypes {
                constructor()
                getValue(): int
            }
            class OopMapValue$OopTypes$2 extends sun.jvm.hotspot.compiler.OopMapValue$OopTypes {
                constructor()
                getValue(): int
            }
            class OopMapValue$OopTypes$1 extends sun.jvm.hotspot.compiler.OopMapValue$OopTypes {
                constructor()
                getValue(): int
            }
            class OopMapValue$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class OopMapStream {
                constructor(arg0: sun.jvm.hotspot.compiler.OopMap)
                constructor(arg0: sun.jvm.hotspot.compiler.OopMap, arg1: sun.jvm.hotspot.compiler.OopMapValue$OopTypes)
                constructor(arg0: sun.jvm.hotspot.compiler.OopMap, arg1: sun.jvm.hotspot.compiler.OopMapValue$OopTypes[])
                isDone(): boolean
                next(): void
                getCurrent(): sun.jvm.hotspot.compiler.OopMapValue
            }
            class CompileTask extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                method(): sun.jvm.hotspot.oops.Method
                osrBci(): int
                compLevel(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CompileTask$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface OopMapVisitor {
                visitOopLocation(arg0: sun.jvm.hotspot.debugger.Address): void
                visitDerivedOopLocation(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
                visitValueLocation(arg0: sun.jvm.hotspot.debugger.Address): void
                visitNarrowOopLocation(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class OopMap extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getOffset(): long
                getOMVData(): sun.jvm.hotspot.debugger.Address
                getOMVDataSize(): long
                getOMVCount(): long
                getWriteStream(): sun.jvm.hotspot.code.CompressedWriteStream
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class OopMap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class OopMapSet extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getSize(): long
                getMapAt(arg0: int): sun.jvm.hotspot.compiler.OopMap
                findMapAtOffset(arg0: long, arg1: boolean): sun.jvm.hotspot.compiler.OopMap
                static oopsDo(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.code.CodeBlob, arg2: sun.jvm.hotspot.runtime.RegisterMap, arg3: sun.jvm.hotspot.runtime.AddressVisitor, arg4: boolean): void
                static allDo(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.code.CodeBlob, arg2: sun.jvm.hotspot.runtime.RegisterMap, arg3: sun.jvm.hotspot.compiler.OopMapVisitor, arg4: boolean): void
                static updateRegisterMap(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.code.CodeBlob, arg2: sun.jvm.hotspot.runtime.RegisterMap, arg3: boolean): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class OopMapSet$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class OopMapSet$MyVisitor implements sun.jvm.hotspot.compiler.OopMapVisitor {
                constructor(arg0: sun.jvm.hotspot.runtime.AddressVisitor)
                setAddressVisitor(arg0: sun.jvm.hotspot.runtime.AddressVisitor): void
                visitOopLocation(arg0: sun.jvm.hotspot.debugger.Address): void
                visitDerivedOopLocation(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
                visitValueLocation(arg0: sun.jvm.hotspot.debugger.Address): void
                visitNarrowOopLocation(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            
         }
         namespace interpreter {
            class OopMapForCacheEntry extends sun.jvm.hotspot.oops.GenerateOopMap {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int, arg2: sun.jvm.hotspot.interpreter.OopMapCacheEntry)
                reportResults(): boolean
                possibleGCPoint(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): boolean
                fillStackmapProlog(arg0: int): void
                fillStackmapEpilog(): void
                fillStackmapForOpcodes(arg0: sun.jvm.hotspot.interpreter.BytecodeStream, arg1: sun.jvm.hotspot.oops.CellTypeStateList, arg2: sun.jvm.hotspot.oops.CellTypeStateList, arg3: int): void
                fillInitVars(arg0: java.util.List): void
                computeMap(): void
                size(): int
            }
            class MaskFillerForNative extends sun.jvm.hotspot.runtime.NativeSignatureIterator {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: sun.jvm.hotspot.utilities.BitMap, arg2: int)
                passInt(): void
                passLong(): void
                passFloat(): void
                passDouble(): void
                passObject(): void
                generate(): void
            }
            class Bytecodes {
                static _illegal: int
                static _nop: int
                static _aconst_null: int
                static _iconst_m1: int
                static _iconst_0: int
                static _iconst_1: int
                static _iconst_2: int
                static _iconst_3: int
                static _iconst_4: int
                static _iconst_5: int
                static _lconst_0: int
                static _lconst_1: int
                static _fconst_0: int
                static _fconst_1: int
                static _fconst_2: int
                static _dconst_0: int
                static _dconst_1: int
                static _bipush: int
                static _sipush: int
                static _ldc: int
                static _ldc_w: int
                static _ldc2_w: int
                static _iload: int
                static _lload: int
                static _fload: int
                static _dload: int
                static _aload: int
                static _iload_0: int
                static _iload_1: int
                static _iload_2: int
                static _iload_3: int
                static _lload_0: int
                static _lload_1: int
                static _lload_2: int
                static _lload_3: int
                static _fload_0: int
                static _fload_1: int
                static _fload_2: int
                static _fload_3: int
                static _dload_0: int
                static _dload_1: int
                static _dload_2: int
                static _dload_3: int
                static _aload_0: int
                static _aload_1: int
                static _aload_2: int
                static _aload_3: int
                static _iaload: int
                static _laload: int
                static _faload: int
                static _daload: int
                static _aaload: int
                static _baload: int
                static _caload: int
                static _saload: int
                static _istore: int
                static _lstore: int
                static _fstore: int
                static _dstore: int
                static _astore: int
                static _istore_0: int
                static _istore_1: int
                static _istore_2: int
                static _istore_3: int
                static _lstore_0: int
                static _lstore_1: int
                static _lstore_2: int
                static _lstore_3: int
                static _fstore_0: int
                static _fstore_1: int
                static _fstore_2: int
                static _fstore_3: int
                static _dstore_0: int
                static _dstore_1: int
                static _dstore_2: int
                static _dstore_3: int
                static _astore_0: int
                static _astore_1: int
                static _astore_2: int
                static _astore_3: int
                static _iastore: int
                static _lastore: int
                static _fastore: int
                static _dastore: int
                static _aastore: int
                static _bastore: int
                static _castore: int
                static _sastore: int
                static _pop: int
                static _pop2: int
                static _dup: int
                static _dup_x1: int
                static _dup_x2: int
                static _dup2: int
                static _dup2_x1: int
                static _dup2_x2: int
                static _swap: int
                static _iadd: int
                static _ladd: int
                static _fadd: int
                static _dadd: int
                static _isub: int
                static _lsub: int
                static _fsub: int
                static _dsub: int
                static _imul: int
                static _lmul: int
                static _fmul: int
                static _dmul: int
                static _idiv: int
                static _ldiv: int
                static _fdiv: int
                static _ddiv: int
                static _irem: int
                static _lrem: int
                static _frem: int
                static _drem: int
                static _ineg: int
                static _lneg: int
                static _fneg: int
                static _dneg: int
                static _ishl: int
                static _lshl: int
                static _ishr: int
                static _lshr: int
                static _iushr: int
                static _lushr: int
                static _iand: int
                static _land: int
                static _ior: int
                static _lor: int
                static _ixor: int
                static _lxor: int
                static _iinc: int
                static _i2l: int
                static _i2f: int
                static _i2d: int
                static _l2i: int
                static _l2f: int
                static _l2d: int
                static _f2i: int
                static _f2l: int
                static _f2d: int
                static _d2i: int
                static _d2l: int
                static _d2f: int
                static _i2b: int
                static _i2c: int
                static _i2s: int
                static _lcmp: int
                static _fcmpl: int
                static _fcmpg: int
                static _dcmpl: int
                static _dcmpg: int
                static _ifeq: int
                static _ifne: int
                static _iflt: int
                static _ifge: int
                static _ifgt: int
                static _ifle: int
                static _if_icmpeq: int
                static _if_icmpne: int
                static _if_icmplt: int
                static _if_icmpge: int
                static _if_icmpgt: int
                static _if_icmple: int
                static _if_acmpeq: int
                static _if_acmpne: int
                static _goto: int
                static _jsr: int
                static _ret: int
                static _tableswitch: int
                static _lookupswitch: int
                static _ireturn: int
                static _lreturn: int
                static _freturn: int
                static _dreturn: int
                static _areturn: int
                static _return: int
                static _getstatic: int
                static _putstatic: int
                static _getfield: int
                static _putfield: int
                static _invokevirtual: int
                static _invokespecial: int
                static _invokestatic: int
                static _invokeinterface: int
                static _invokedynamic: int
                static _new: int
                static _newarray: int
                static _anewarray: int
                static _arraylength: int
                static _athrow: int
                static _checkcast: int
                static _instanceof: int
                static _monitorenter: int
                static _monitorexit: int
                static _wide: int
                static _multianewarray: int
                static _ifnull: int
                static _ifnonnull: int
                static _goto_w: int
                static _jsr_w: int
                static _breakpoint: int
                static number_of_java_codes: int
                static _fast_agetfield: int
                static _fast_bgetfield: int
                static _fast_cgetfield: int
                static _fast_dgetfield: int
                static _fast_fgetfield: int
                static _fast_igetfield: int
                static _fast_lgetfield: int
                static _fast_sgetfield: int
                static _fast_aputfield: int
                static _fast_bputfield: int
                static _fast_cputfield: int
                static _fast_dputfield: int
                static _fast_fputfield: int
                static _fast_iputfield: int
                static _fast_lputfield: int
                static _fast_sputfield: int
                static _fast_aload_0: int
                static _fast_iaccess_0: int
                static _fast_aaccess_0: int
                static _fast_faccess_0: int
                static _fast_iload: int
                static _fast_iload2: int
                static _fast_icaload: int
                static _fast_invokevfinal: int
                static _fast_linearswitch: int
                static _fast_binaryswitch: int
                static _fast_aldc: int
                static _fast_aldc_w: int
                static _return_register_finalizer: int
                static _invokehandle: int
                static _shouldnotreachhere: int
                static number_of_codes: int
                static _bc_can_trap: int
                static _bc_can_rewrite: int
                static _fmt_has_c: int
                static _fmt_has_j: int
                static _fmt_has_k: int
                static _fmt_has_i: int
                static _fmt_has_o: int
                static _fmt_has_nbo: int
                static _fmt_has_u2: int
                static _fmt_has_u4: int
                static _fmt_not_variable: int
                static _fmt_not_simple: int
                static _all_fmt_bits: int
                static _fmt_b: int
                static _fmt_bc: int
                static _fmt_bi: int
                static _fmt_bkk: int
                static _fmt_bJJ: int
                static _fmt_bo2: int
                static _fmt_bo4: int
                static $assertionsDisabled: boolean
                constructor()
                static specialLengthAt(arg0: sun.jvm.hotspot.oops.Method, arg1: int): int
                static check(arg0: int): void
                static wideCheck(arg0: int): void
                static codeAt(arg0: sun.jvm.hotspot.oops.Method, arg1: int): int
                static codeOrBPAt(arg0: sun.jvm.hotspot.oops.Method, arg1: int): int
                static isActiveBreakpointAt(arg0: sun.jvm.hotspot.oops.Method, arg1: int): boolean
                static isDefined(arg0: int): boolean
                static wideIsDefined(arg0: int): boolean
                static name(arg0: int): java.lang.String
                static format(arg0: int): java.lang.String
                static wideFormat(arg0: int): java.lang.String
                static resultType(arg0: int): int
                static depth(arg0: int): int
                static lengthFor(arg0: int): int
                static wideLengthFor(arg0: int): int
                static canTrap(arg0: int): boolean
                static javaCode(arg0: int): int
                static canRewrite(arg0: int): boolean
                static native_byte_order(arg0: int): boolean
                static uses_cp_cache(arg0: int): boolean
                static lengthAt(arg0: sun.jvm.hotspot.oops.Method, arg1: int): int
                static javaLengthAt(arg0: sun.jvm.hotspot.oops.Method, arg1: int): int
                static isJavaCode(arg0: int): boolean
                static isFastCode(arg0: int): boolean
                static isAload(arg0: int): boolean
                static isAstore(arg0: int): boolean
                static isZeroConst(arg0: int): boolean
                static flags(arg0: int, arg1: boolean): int
                static format_bits(arg0: int, arg1: boolean): int
                static has_all_flags(arg0: int, arg1: int, arg2: boolean): boolean
                static compute_flags(arg0: java.lang.String): char
                static compute_flags(arg0: java.lang.String, arg1: int): char
                static access$000(): void
            }
            class Bytecodes$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class BytecodeTableswitch extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                defaultOffset(): int
                lowKey(): int
                highKey(): int
                length(): int
                destOffsetAt(arg0: int): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeTableswitch
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeTableswitch
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeTableswitch
                toString(): java.lang.String
            }
            class BytecodeStore extends sun.jvm.hotspot.interpreter.BytecodeLoadStore {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeStore
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeStore
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeStore
            }
            class BytecodeSipush extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getValue(): short
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeSipush
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeSipush
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeSipush
                toString(): java.lang.String
            }
            class BytecodeRet extends sun.jvm.hotspot.interpreter.BytecodeWideable {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeRet
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeRet
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeRet
                toString(): java.lang.String
            }
            class BytecodePutStatic extends sun.jvm.hotspot.interpreter.BytecodeGetPut {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                isStatic(): boolean
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodePutStatic
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodePutStatic
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodePutStatic
            }
            class BytecodePutField extends sun.jvm.hotspot.interpreter.BytecodeGetPut {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                isStatic(): boolean
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodePutField
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodePutField
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodePutField
            }
            class BytecodeNewArray extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getType(): int
                verify(): void
                isValid(): boolean
                getTypeName(): java.lang.String
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeNewArray
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeNewArray
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeNewArray
                toString(): java.lang.String
            }
            class BytecodeNew extends sun.jvm.hotspot.interpreter.BytecodeWithKlass {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getNewKlass(): sun.jvm.hotspot.oops.InstanceKlass
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeNew
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeNew
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeNew
            }
            class BytecodeMultiANewArray extends sun.jvm.hotspot.interpreter.BytecodeWithKlass {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getKlass(): sun.jvm.hotspot.oops.Klass
                getDimension(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeMultiANewArray
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeMultiANewArray
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeMultiANewArray
                toString(): java.lang.String
            }
            class LookupswitchPair extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                match(): int
                offset(): int
            }
            class BytecodeLookupswitch extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                defaultOffset(): int
                numberOfPairs(): int
                pairAt(arg0: int): sun.jvm.hotspot.interpreter.LookupswitchPair
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeLookupswitch
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeLookupswitch
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeLookupswitch
                toString(): java.lang.String
            }
            class BytecodeLoadConstant extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                hasCacheIndex(): boolean
                rawIndex(): int
                poolIndex(): int
                cacheIndex(): int
                resultType(): sun.jvm.hotspot.runtime.BasicType
                verify(): void
                isValid(): boolean
                isKlassConstant(): boolean
                getKlass(): java.lang.Object
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeLoadConstant
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeLoadConstant
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeLoadConstant
                getConstantValue(): java.lang.String
                toString(): java.lang.String
            }
            abstract class BytecodeLoadStore extends sun.jvm.hotspot.interpreter.BytecodeWideable {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                toString(): java.lang.String
            }
            class BytecodeLoad extends sun.jvm.hotspot.interpreter.BytecodeLoadStore {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeLoad
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeLoad
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeLoad
            }
            class BytecodeJsrW extends sun.jvm.hotspot.interpreter.BytecodeJmp {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getTargetBCI(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeJsrW
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeJsrW
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeJsrW
            }
            class BytecodeJsr extends sun.jvm.hotspot.interpreter.BytecodeJmp {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getTargetBCI(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeJsr
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeJsr
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeJsr
            }
            class BytecodeInvoke extends sun.jvm.hotspot.interpreter.BytecodeWithCPIndex {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeInvoke
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeInvoke
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeInvoke
                name(): sun.jvm.hotspot.oops.Symbol
                signature(): sun.jvm.hotspot.oops.Symbol
                getInvokedMethod(): sun.jvm.hotspot.oops.Method
                resultType(): int
                adjustedInvokeCode(): int
                isInvokeinterface(): boolean
                isInvokevirtual(): boolean
                isInvokestatic(): boolean
                isInvokespecial(): boolean
                isInvokedynamic(): boolean
                isValid(): boolean
                verify(): void
                toString(): java.lang.String
            }
            class BytecodeInstanceOf extends sun.jvm.hotspot.interpreter.BytecodeWithKlass {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getInstanceOfKlass(): sun.jvm.hotspot.oops.InstanceKlass
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeInstanceOf
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeInstanceOf
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeInstanceOf
            }
            abstract class BytecodeWideable extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                isWide(): boolean
                getLocalVarIndex(): int
            }
            class BytecodeIinc extends sun.jvm.hotspot.interpreter.BytecodeWideable {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getIncrement(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeIinc
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeIinc
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeIinc
                toString(): java.lang.String
            }
            class BytecodeIf extends sun.jvm.hotspot.interpreter.BytecodeJmp {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getTargetBCI(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeIf
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeIf
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeIf
            }
            class BytecodeGotoW extends sun.jvm.hotspot.interpreter.BytecodeJmp {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getTargetBCI(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGotoW
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGotoW
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeGotoW
            }
            abstract class BytecodeJmp extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getTargetBCI(): int
                toString(): java.lang.String
            }
            class BytecodeGoto extends sun.jvm.hotspot.interpreter.BytecodeJmp {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getTargetBCI(): int
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGoto
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGoto
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeGoto
            }
            class BytecodeGetStatic extends sun.jvm.hotspot.interpreter.BytecodeGetPut {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                isStatic(): boolean
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGetStatic
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGetStatic
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeGetStatic
            }
            abstract class BytecodeGetPut extends sun.jvm.hotspot.interpreter.BytecodeWithCPIndex {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                name(): sun.jvm.hotspot.oops.Symbol
                signature(): sun.jvm.hotspot.oops.Symbol
                getField(): sun.jvm.hotspot.oops.Field
                toString(): java.lang.String
                isStatic(): boolean
            }
            class BytecodeGetField extends sun.jvm.hotspot.interpreter.BytecodeGetPut {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                isStatic(): boolean
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGetField
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeGetField
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeGetField
            }
            interface BytecodeVisitor {
                prologue(arg0: sun.jvm.hotspot.oops.Method): void
                visit(arg0: sun.jvm.hotspot.interpreter.Bytecode): void
                epilogue(): void
            }
            class BytecodeDisassembler {
                constructor(arg0: sun.jvm.hotspot.oops.Method)
                getMethod(): sun.jvm.hotspot.oops.Method
                decode(arg0: sun.jvm.hotspot.interpreter.BytecodeVisitor): void
            }
            class BytecodeCheckCast extends sun.jvm.hotspot.interpreter.BytecodeWithKlass {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getCheckCastKlass(): sun.jvm.hotspot.oops.InstanceKlass
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeCheckCast
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeCheckCast
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeCheckCast
            }
            class BytecodeBipush extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getValue(): byte
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeBipush
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeBipush
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeBipush
                toString(): java.lang.String
            }
            class BytecodeStream {
                constructor(arg0: sun.jvm.hotspot.oops.Method)
                setInterval(arg0: int, arg1: int): void
                setStart(arg0: int): void
                next(): int
                method(): sun.jvm.hotspot.oops.Method
                bci(): int
                nextBCI(): int
                endBCI(): int
                code(): int
                isWide(): boolean
                isActiveBreakpoint(): boolean
                isLastBytecode(): boolean
                setNextBCI(arg0: int): void
                dest(): int
                dest_w(): int
                getIndex(): int
                getIndexU1(): int
                getIndexU2(): int
                getIndexU4(): int
                hasIndexU4(): boolean
                getIndexU1Cpcache(): int
                getIndexU2Cpcache(): int
                codeAt(arg0: int): int
            }
            abstract class BytecodeWithCPIndex extends sun.jvm.hotspot.interpreter.Bytecode {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                index(): int
                protected indexForFieldOrMethod(): int
            }
            class BytecodeWithKlass extends sun.jvm.hotspot.interpreter.BytecodeWithCPIndex {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                protected getKlass(): sun.jvm.hotspot.oops.Klass
                getClassName(): sun.jvm.hotspot.oops.Symbol
                toString(): java.lang.String
            }
            class BytecodeANewArray extends sun.jvm.hotspot.interpreter.BytecodeWithKlass {
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                getKlass(): sun.jvm.hotspot.oops.Klass
                verify(): void
                isValid(): boolean
                static at(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeANewArray
                static atCheck(arg0: sun.jvm.hotspot.oops.Method, arg1: int): sun.jvm.hotspot.interpreter.BytecodeANewArray
                static at(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): sun.jvm.hotspot.interpreter.BytecodeANewArray
            }
            class Bytecode {
                method: sun.jvm.hotspot.oops.Method
                bci: int
                static jintSize: int
                static spaces: java.lang.String
                static comma: java.lang.String
                constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: int)
                alignedOffset(arg0: int): int
                getIndexU1(): int
                getIndexU2(arg0: int, arg1: boolean): int
                getIndexU4(): int
                hasIndexU4(): boolean
                getIndexU1Cpcache(): int
                getIndexU2Cpcache(): int
                static can_use_native_byte_order(arg0: int, arg1: boolean): boolean
                javaSignedWordAt(arg0: int): int
                javaShortAt(arg0: int): short
                javaByteAt(arg0: int): byte
                method(): sun.jvm.hotspot.oops.Method
                bci(): int
                code(): int
                javaCode(): int
                getBytecodeName(): java.lang.String
                getJavaBytecodeName(): java.lang.String
                getLength(): int
                getJavaLength(): int
                toString(): java.lang.String
            }
            class InterpreterCodelet extends sun.jvm.hotspot.code.Stub {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getSize(): long
                codeBegin(): sun.jvm.hotspot.debugger.Address
                codeEnd(): sun.jvm.hotspot.debugger.Address
                codeSize(): long
                getDescription(): java.lang.String
                verify(): void
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class InterpreterCodelet$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Interpreter {
                constructor()
                getCode(): sun.jvm.hotspot.code.StubQueue
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getCodeletContaining(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.interpreter.InterpreterCodelet
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Interpreter$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface OffsetClosure {
                offsetDo(arg0: int): void
            }
            class OopMapCacheEntry {
                constructor()
                isValue(arg0: int): boolean
                isOop(arg0: int): boolean
                iterateOop(arg0: sun.jvm.hotspot.interpreter.OffsetClosure): void
                fill(arg0: sun.jvm.hotspot.oops.Method, arg1: int): void
                setMask(arg0: sun.jvm.hotspot.oops.CellTypeStateList, arg1: sun.jvm.hotspot.oops.CellTypeStateList, arg2: int): void
                method(): sun.jvm.hotspot.oops.Method
                bci(): int
                numberOfEntries(): int
                entryAt(arg0: int): boolean
                setEmptyMask(): void
                allocateBitMask(): void
                fillForNative(): void
                verifyMask(arg0: sun.jvm.hotspot.oops.CellTypeStateList, arg1: sun.jvm.hotspot.oops.CellTypeStateList, arg2: int, arg3: int): boolean
            }
            class OopMapCacheEntry$VerifyClosure implements sun.jvm.hotspot.interpreter.OffsetClosure {
                constructor(arg0: sun.jvm.hotspot.interpreter.OopMapCacheEntry)
                offsetDo(arg0: int): void
                failed(): boolean
            }
            
         }
         namespace code {
            class UncommonTrapBlob extends sun.jvm.hotspot.code.SingletonBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isUncommonTrapStub(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class UncommonTrapBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class SafepointBlob extends sun.jvm.hotspot.code.SingletonBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isSafepointStub(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class SafepointBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class RuntimeStub extends sun.jvm.hotspot.code.CodeBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isRuntimeStub(): boolean
                callerMustGCArguments(): boolean
                getName(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class RuntimeStub$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ObjectValue extends sun.jvm.hotspot.code.ScopeValue {
                constructor(arg0: int)
                isObject(): boolean
                id(): int
                getKlass(): sun.jvm.hotspot.code.ScopeValue
                getFieldsValue(): java.util.List
                getFieldAt(arg0: int): sun.jvm.hotspot.code.ScopeValue
                fieldsSize(): int
                getValue(): sun.jvm.hotspot.debugger.OopHandle
                readObject(arg0: sun.jvm.hotspot.code.DebugInfoReadStream): void
                print(): void
                printOn(arg0: java.io.PrintStream): void
                printFieldsOn(arg0: java.io.PrintStream): void
            }
            class MonitorValue {
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                owner(): sun.jvm.hotspot.code.ScopeValue
                basicLock(): sun.jvm.hotspot.code.Location
                eliminated(): boolean
                printOn(arg0: java.io.PrintStream): void
            }
            class MethodHandlesAdapterBlob extends sun.jvm.hotspot.code.AdapterBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isMethodHandlesAdapterBlob(): boolean
                getName(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MethodHandlesAdapterBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LocationValue extends sun.jvm.hotspot.code.ScopeValue {
                constructor(arg0: sun.jvm.hotspot.code.Location)
                isLocation(): boolean
                getLocation(): sun.jvm.hotspot.code.Location
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class Location {
                constructor(arg0: sun.jvm.hotspot.code.Location$Where, arg1: sun.jvm.hotspot.code.Location$Type, arg2: int)
                getWhere(): sun.jvm.hotspot.code.Location$Where
                getType(): sun.jvm.hotspot.code.Location$Type
                getOffset(): short
                isRegister(): boolean
                isStack(): boolean
                holdsOop(): boolean
                holdsNarrowOop(): boolean
                holdsInt(): boolean
                holdsLong(): boolean
                holdsFloat(): boolean
                holdsDouble(): boolean
                holdsAddr(): boolean
                isIllegal(): boolean
                getStackOffset(): int
                getRegisterNumber(): int
                print(): void
                printOn(arg0: java.io.PrintStream): void
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
                static access$100(): int
                static access$200(): int
                static access$300(): int
                static access$400(): int
                static access$500(): int
                static access$600(): int
                static access$700(): int
                static access$800(): int
                static access$900(): int
                static access$1000(): int
                static access$1100(): int
            }
            class Location$Type {
                static NORMAL: sun.jvm.hotspot.code.Location$Type
                static OOP: sun.jvm.hotspot.code.Location$Type
                static NARROWOOP: sun.jvm.hotspot.code.Location$Type
                static INT_IN_LONG: sun.jvm.hotspot.code.Location$Type
                static LNG: sun.jvm.hotspot.code.Location$Type
                static FLOAT_IN_DBL: sun.jvm.hotspot.code.Location$Type
                static DBL: sun.jvm.hotspot.code.Location$Type
                static ADDR: sun.jvm.hotspot.code.Location$Type
                static INVALID: sun.jvm.hotspot.code.Location$Type
                toString(): java.lang.String
                getValue(): int
            }
            class Location$Where {
                static ON_STACK: sun.jvm.hotspot.code.Location$Where
                static IN_REGISTER: sun.jvm.hotspot.code.Location$Where
                toString(): java.lang.String
                getValue(): int
            }
            class Location$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ExceptionBlob extends sun.jvm.hotspot.code.SingletonBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isExceptionStub(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ExceptionBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class SingletonBlob extends sun.jvm.hotspot.code.CodeBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isSingletonBlob(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class SingletonBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class DeoptimizationBlob extends sun.jvm.hotspot.code.SingletonBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isDeoptimizationStub(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class DeoptimizationBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class DebugInformationRecorder {
                static SERIALIZED_NULL: int
                static SYNCHRONIZATION_ENTRY_BCI: int
                constructor()
            }
            class ConstantOopReadValue extends sun.jvm.hotspot.code.ScopeValue {
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                isConstantOop(): boolean
                getValue(): sun.jvm.hotspot.debugger.OopHandle
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class ConstantLongValue extends sun.jvm.hotspot.code.ScopeValue {
                constructor(arg0: long)
                isConstantLong(): boolean
                getValue(): long
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class ConstantIntValue extends sun.jvm.hotspot.code.ScopeValue {
                constructor(arg0: int)
                isConstantInt(): boolean
                getValue(): int
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class ConstantDoubleValue extends sun.jvm.hotspot.code.ScopeValue {
                constructor(arg0: double)
                isConstantDouble(): boolean
                getValue(): double
                constructor(arg0: sun.jvm.hotspot.code.DebugInfoReadStream)
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class BufferBlob extends sun.jvm.hotspot.code.CodeBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isBufferBlob(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class BufferBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class AdapterBlob extends sun.jvm.hotspot.code.CodeBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isAdapterBlob(): boolean
                getName(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class AdapterBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class ScopeValue {
                static LOCATION_CODE: int
                static CONSTANT_INT_CODE: int
                static CONSTANT_OOP_CODE: int
                static CONSTANT_LONG_CODE: int
                static CONSTANT_DOUBLE_CODE: int
                static CONSTANT_OBJECT_CODE: int
                static CONSTANT_OBJECT_ID_CODE: int
                constructor()
                isLocation(): boolean
                isConstantInt(): boolean
                isConstantDouble(): boolean
                isConstantLong(): boolean
                isConstantOop(): boolean
                isObject(): boolean
                static readFrom(arg0: sun.jvm.hotspot.code.DebugInfoReadStream): sun.jvm.hotspot.code.ScopeValue
                printOn(arg0: java.io.PrintStream): void
            }
            interface CodeCacheVisitor {
                prologue(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
                visit(arg0: sun.jvm.hotspot.code.CodeBlob): void
                epilogue(): void
            }
            class Stub extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getSize(): long
                getAddress(): sun.jvm.hotspot.debugger.Address
                codeBegin(): sun.jvm.hotspot.debugger.Address
                codeEnd(): sun.jvm.hotspot.debugger.Address
                verify(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class StubQueue extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.lang.Class)
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getStubContaining(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.Stub
                stubContains(arg0: sun.jvm.hotspot.code.Stub, arg1: sun.jvm.hotspot.debugger.Address): boolean
                getNumberOfStubs(): int
                getFirst(): sun.jvm.hotspot.code.Stub
                getNext(arg0: sun.jvm.hotspot.code.Stub): sun.jvm.hotspot.code.Stub
                getPrev(arg0: sun.jvm.hotspot.code.Stub): sun.jvm.hotspot.code.Stub
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class StubQueue$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CompressedWriteStream extends sun.jvm.hotspot.code.CompressedStream {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: int)
            }
            class CompressedStream {
                protected buffer: sun.jvm.hotspot.debugger.Address
                protected position: int
                static LogBitsPerByte: int
                static BitsPerByte: int
                static lg_H: int
                static H: int
                static L: int
                static MAX_i: int
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: int)
                getBuffer(): sun.jvm.hotspot.debugger.Address
                getPosition(): int
                setPosition(arg0: int): void
                encodeSign(arg0: int): int
                decodeSign(arg0: int): int
                reverseInt(arg0: int): int
            }
            class CompressedReadStream extends sun.jvm.hotspot.code.CompressedStream {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: int)
                readBoolean(): boolean
                readByte(): byte
                readChar(): char
                readShort(): short
                readSignedInt(): int
                readInt(): int
                readFloat(): float
                readDouble(): double
                readLong(): long
            }
            class DebugInfoReadStream extends sun.jvm.hotspot.code.CompressedReadStream {
                constructor(arg0: sun.jvm.hotspot.code.NMethod, arg1: int)
                constructor(arg0: sun.jvm.hotspot.code.NMethod, arg1: int, arg2: java.util.List)
                readOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                readMethod(): sun.jvm.hotspot.oops.Method
                readObjectValue(): sun.jvm.hotspot.code.ScopeValue
                getCachedObject(): sun.jvm.hotspot.code.ScopeValue
                readBCI(): int
            }
            class VMRegImpl {
                constructor()
                static getStack0(): sun.jvm.hotspot.runtime.VMReg
                static getRegisterName(arg0: int): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class VMRegImpl$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CodeCache {
                constructor()
                scavengeRootMethods(): sun.jvm.hotspot.code.NMethod
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                findBlob(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.CodeBlob
                findBlobUnsafe(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.CodeBlob
                findNMethod(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.NMethod
                findNMethodUnsafe(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.NMethod
                createCodeBlobWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.CodeBlob
                iterate(arg0: sun.jvm.hotspot.code.CodeCacheVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CodeCache$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ScopeDesc {
                constructor(arg0: sun.jvm.hotspot.code.NMethod, arg1: int, arg2: int, arg3: boolean)
                getNMethod(): sun.jvm.hotspot.code.NMethod
                getMethod(): sun.jvm.hotspot.oops.Method
                getBCI(): int
                getReexecute(): boolean
                getLocals(): java.util.List
                getExpressions(): java.util.List
                getMonitors(): java.util.List
                getObjects(): java.util.List
                sender(): sun.jvm.hotspot.code.ScopeDesc
                getDecodeOffset(): int
                isTop(): boolean
                equals(arg0: java.lang.Object): boolean
                printValue(): void
                printValueOn(arg0: java.io.PrintStream): void
            }
            class PCDesc extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getPCOffset(): int
                getScopeDecodeOffset(): int
                getObjDecodeOffset(): int
                getRealPC(arg0: sun.jvm.hotspot.code.NMethod): sun.jvm.hotspot.debugger.Address
                getReexecute(): boolean
                isMethodHandleInvoke(): boolean
                print(arg0: sun.jvm.hotspot.code.NMethod): void
                printOn(arg0: java.io.PrintStream, arg1: sun.jvm.hotspot.code.NMethod): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class PCDesc$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CodeBlob extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isBufferBlob(): boolean
                isNMethod(): boolean
                isRuntimeStub(): boolean
                isDeoptimizationStub(): boolean
                isUncommonTrapStub(): boolean
                isExceptionStub(): boolean
                isSafepointStub(): boolean
                isAdapterBlob(): boolean
                isJavaMethod(): boolean
                isNativeMethod(): boolean
                isOSRMethod(): boolean
                asNMethodOrNull(): sun.jvm.hotspot.code.NMethod
                headerBegin(): sun.jvm.hotspot.debugger.Address
                headerEnd(): sun.jvm.hotspot.debugger.Address
                contentBegin(): sun.jvm.hotspot.debugger.Address
                contentEnd(): sun.jvm.hotspot.debugger.Address
                codeBegin(): sun.jvm.hotspot.debugger.Address
                codeEnd(): sun.jvm.hotspot.debugger.Address
                dataBegin(): sun.jvm.hotspot.debugger.Address
                dataEnd(): sun.jvm.hotspot.debugger.Address
                getRelocationOffset(): int
                getContentOffset(): int
                getCodeOffset(): int
                getDataOffset(): int
                getSize(): int
                getHeaderSize(): int
                getContentSize(): int
                getCodeSize(): int
                getDataSize(): int
                blobContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                contentContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                codeContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                dataContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isFrameCompleteAt(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isZombie(): boolean
                isLockedByVM(): boolean
                getOopMaps(): sun.jvm.hotspot.compiler.OopMapSet
                getOopMapForReturnAddress(arg0: sun.jvm.hotspot.debugger.Address, arg1: boolean): sun.jvm.hotspot.compiler.OopMap
                getFrameSize(): long
                callerMustGCArguments(): boolean
                getName(): java.lang.String
                print(): void
                printOn(arg0: java.io.PrintStream): void
                protected printComponentsOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CodeBlob$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class NMethod extends sun.jvm.hotspot.code.CodeBlob {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getAddress(): sun.jvm.hotspot.debugger.Address
                getMethod(): sun.jvm.hotspot.oops.Method
                isNMethod(): boolean
                isJavaMethod(): boolean
                isNativeMethod(): boolean
                isOSRMethod(): boolean
                constantsBegin(): sun.jvm.hotspot.debugger.Address
                constantsEnd(): sun.jvm.hotspot.debugger.Address
                instsBegin(): sun.jvm.hotspot.debugger.Address
                instsEnd(): sun.jvm.hotspot.debugger.Address
                exceptionBegin(): sun.jvm.hotspot.debugger.Address
                deoptHandlerBegin(): sun.jvm.hotspot.debugger.Address
                deoptMhHandlerBegin(): sun.jvm.hotspot.debugger.Address
                stubBegin(): sun.jvm.hotspot.debugger.Address
                stubEnd(): sun.jvm.hotspot.debugger.Address
                oopsBegin(): sun.jvm.hotspot.debugger.Address
                oopsEnd(): sun.jvm.hotspot.debugger.Address
                metadataBegin(): sun.jvm.hotspot.debugger.Address
                metadataEnd(): sun.jvm.hotspot.debugger.Address
                scopesDataBegin(): sun.jvm.hotspot.debugger.Address
                scopesDataEnd(): sun.jvm.hotspot.debugger.Address
                scopesPCsBegin(): sun.jvm.hotspot.debugger.Address
                scopesPCsEnd(): sun.jvm.hotspot.debugger.Address
                dependenciesBegin(): sun.jvm.hotspot.debugger.Address
                dependenciesEnd(): sun.jvm.hotspot.debugger.Address
                handlerTableBegin(): sun.jvm.hotspot.debugger.Address
                handlerTableEnd(): sun.jvm.hotspot.debugger.Address
                nulChkTableBegin(): sun.jvm.hotspot.debugger.Address
                nulChkTableEnd(): sun.jvm.hotspot.debugger.Address
                constantsSize(): int
                instsSize(): int
                stubSize(): int
                oopsSize(): int
                metadataSize(): int
                scopesDataSize(): int
                scopesPCsSize(): int
                dependenciesSize(): int
                handlerTableSize(): int
                nulChkTableSize(): int
                origPCOffset(): int
                totalSize(): int
                constantsContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                instsContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                stubContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                oopsContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                metadataContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                scopesDataContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                scopesPCsContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                handlerTableContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                nulChkTableContains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getOopsLength(): int
                getMetadataLength(): int
                getEntryPoint(): sun.jvm.hotspot.debugger.Address
                getVerifiedEntryPoint(): sun.jvm.hotspot.debugger.Address
                getOopAt(arg0: int): sun.jvm.hotspot.debugger.OopHandle
                getMetadataAt(arg0: int): sun.jvm.hotspot.debugger.Address
                getMethodAt(arg0: int): sun.jvm.hotspot.oops.Method
                isZombie(): boolean
                getOSREntryBCI(): int
                getOSRLink(): sun.jvm.hotspot.code.NMethod
                getScavengeRootLink(): sun.jvm.hotspot.code.NMethod
                getScavengeRootState(): int
                isMethodHandleReturn(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isDeoptPc(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isDeoptEntry(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isDeoptMhEntry(arg0: sun.jvm.hotspot.debugger.Address): boolean
                canBeDeoptimized(): boolean
                isLockedByVM(): boolean
                getPCDescAt(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.PCDesc
                getScopeDescAt(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.ScopeDesc
                getPCDescNearDbg(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.PCDesc
                find_pc_desc(arg0: long, arg1: boolean): sun.jvm.hotspot.code.PCDesc
                find_pc_desc_internal(arg0: long, arg1: boolean): sun.jvm.hotspot.code.PCDesc
                pc_desc_at(arg0: long): sun.jvm.hotspot.code.PCDesc
                pc_desc_near(arg0: long): sun.jvm.hotspot.code.PCDesc
                scope_desc_in(arg0: long, arg1: long): sun.jvm.hotspot.code.ScopeDesc
                static match_desc(arg0: sun.jvm.hotspot.code.PCDesc, arg1: int, arg2: boolean): boolean
                getScopeDescNearDbg(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.code.ScopeDesc
                getSafepoints(): java.util.Map
                static getEntryPointOffset(): int
                static getVerifiedEntryPointOffset(): int
                static getOSREntryPointOffset(): int
                static getEntryBCIOffset(): int
                static getMethodOffset(): int
                print(): void
                protected printComponentsOn(arg0: java.io.PrintStream): void
                toString(): java.lang.String
                flagsToString(): java.lang.String
                getName(): java.lang.String
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class NMethod$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace classfile {
            class ClassLoaderData extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.classfile.ClassLoaderData
                getClassLoader(): sun.jvm.hotspot.oops.Oop
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ClassLoaderData$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace runtime {
            namespace win32_x86 {
               class Win32X86JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class Win32X86JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace win32_amd64 {
               class Win32AMD64JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class Win32AMD64JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace x86 {
               class X86JavaCallWrapper extends sun.jvm.hotspot.runtime.JavaCallWrapper {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   getLastJavaFP(): sun.jvm.hotspot.debugger.Address
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class X86JavaCallWrapper$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class X86RegisterMap extends sun.jvm.hotspot.runtime.RegisterMap {
                   constructor(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean)
                   protected (: sun.jvm.hotspot.runtime.x86.X86RegisterMap
                   clone(): java.lang.Object
                   protected clearPD(): void
                   protected initializePD(): void
                   protected initializeFromPD(arg0: sun.jvm.hotspot.runtime.RegisterMap): void
                   protected getLocationPD(arg0: sun.jvm.hotspot.runtime.VMReg): sun.jvm.hotspot.debugger.Address
               }
               class X86Frame extends sun.jvm.hotspot.runtime.Frame {
                   raw_fp: sun.jvm.hotspot.debugger.Address
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address, arg3: sun.jvm.hotspot.debugger.Address)
                   clone(): java.lang.Object
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getFP(): sun.jvm.hotspot.debugger.Address
                   getSP(): sun.jvm.hotspot.debugger.Address
                   getID(): sun.jvm.hotspot.debugger.Address
                   isSignalHandlerFrameDbg(): boolean
                   getSignalNumberDbg(): int
                   getSignalNameDbg(): java.lang.String
                   isInterpretedFrameValid(): boolean
                   sender(arg0: sun.jvm.hotspot.runtime.RegisterMap, arg1: sun.jvm.hotspot.code.CodeBlob): sun.jvm.hotspot.runtime.Frame
                   protected hasSenderPD(): boolean
                   frameSize(): long
                   getLink(): sun.jvm.hotspot.debugger.Address
                   getUnextendedSP(): sun.jvm.hotspot.debugger.Address
                   getSenderPCAddr(): sun.jvm.hotspot.debugger.Address
                   getSenderPC(): sun.jvm.hotspot.debugger.Address
                   getNativeParamAddr(arg0: int): sun.jvm.hotspot.debugger.Address
                   getSenderSP(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameLocals(): sun.jvm.hotspot.debugger.Address
                   getInterpreterFrameBCI(): int
                   addressOfInterpreterFrameMDX(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameExpressionStack(): sun.jvm.hotspot.debugger.Address
                   getInterpreterFrameExpressionStackDirection(): int
                   addressOfInterpreterFrameTOS(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameTOSAt(arg0: int): sun.jvm.hotspot.debugger.Address
                   getInterpreterFrameSenderSP(): sun.jvm.hotspot.debugger.Address
                   interpreterFrameMonitorBegin(): sun.jvm.hotspot.runtime.BasicObjectLock
                   interpreterFrameMonitorEnd(): sun.jvm.hotspot.runtime.BasicObjectLock
                   interpreterFrameMonitorSize(): int
                   addressOfInterpreterFrameMethod(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameCPCache(): sun.jvm.hotspot.debugger.Address
                   getEntryFrameCallWrapper(): sun.jvm.hotspot.runtime.JavaCallWrapper
                   protected addressOfSavedOopResult(): sun.jvm.hotspot.debugger.Address
                   protected addressOfSavedReceiver(): sun.jvm.hotspot.debugger.Address
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class X86Frame$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class X86CurrentFrameGuess {
                   constructor(arg0: sun.jvm.hotspot.debugger.x86.X86ThreadContext, arg1: sun.jvm.hotspot.runtime.JavaThread)
                   run(arg0: long): boolean
                   getSP(): sun.jvm.hotspot.debugger.Address
                   getFP(): sun.jvm.hotspot.debugger.Address
                   getPC(): sun.jvm.hotspot.debugger.Address
               }
               
            }
            namespace sparc {
               class SPARCRegisterMap extends sun.jvm.hotspot.runtime.RegisterMap {
                   constructor(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean)
                   protected (: sun.jvm.hotspot.runtime.sparc.SPARCRegisterMap
                   clone(): java.lang.Object
                   protected clearPD(): void
                   protected getLocationPD(arg0: sun.jvm.hotspot.runtime.VMReg): sun.jvm.hotspot.debugger.Address
                   protected initializePD(): void
                   protected initializeFromPD(arg0: sun.jvm.hotspot.runtime.RegisterMap): void
                   shiftWindow(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
                   makeIntegerRegsUnsaved(): void
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class SPARCRegisterMap$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class SPARCFrame extends sun.jvm.hotspot.runtime.Frame {
                   static PC_RETURN_OFFSET: int
                   static REGISTER_SAVE_WORDS: int
                   static CALLEE_AGGREGATE_RETURN_POINTER_WORDS: int
                   static CALLEE_REGISTER_ARGUMENT_SAVE_AREA_WORDS: int
                   static REGISTER_SAVE_WORDS_SP_OFFSET: int
                   static CALLEE_AGGREGATE_RETURN_POINTER_SP_OFFSET: int
                   static CALLEE_REGISTER_ARGUMENT_SAVE_AREA_SP_OFFSET: int
                   static MEMORY_PARAMETER_WORD_SP_OFFSET: int
                   static VARARGS_OFFSET: int
                   static INTERPRETER_FRAME_D_SCRATCH_FP_OFFSET: int
                   static INTERPRETER_FRAME_L_SCRATCH_FP_OFFSET: int
                   static INTERPRETER_FRAME_PADDING_OFFSET: int
                   static INTERPRETER_FRAME_MIRROR_OFFSET: int
                   static INTERPRETER_FRAME_VM_LOCALS_FP_OFFSET: int
                   static INTERPRETER_FRAME_VM_LOCAL_WORDS: int
                   static INTERPRETER_FRAME_EXTRA_OUTGOING_ARGUMENT_WORDS: int
                   static unBiasSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   static biasSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   static findYoungerSP(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getSP(): sun.jvm.hotspot.debugger.Address
                   getID(): sun.jvm.hotspot.debugger.Address
                   getYoungerSP(): sun.jvm.hotspot.debugger.Address
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address, arg2: boolean)
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address)
                   clone(): java.lang.Object
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   isSignalHandlerFrameDbg(): boolean
                   getSignalNumberDbg(): int
                   getSignalNameDbg(): java.lang.String
                   isInterpretedFrameValid(): boolean
                   frameSize(): long
                   getLink(): sun.jvm.hotspot.debugger.Address
                   sender(arg0: sun.jvm.hotspot.runtime.RegisterMap, arg1: sun.jvm.hotspot.code.CodeBlob): sun.jvm.hotspot.runtime.Frame
                   protected hasSenderPD(): boolean
                   getSenderPC(): sun.jvm.hotspot.debugger.Address
                   getUnextendedSP(): sun.jvm.hotspot.debugger.Address
                   getSenderSP(): sun.jvm.hotspot.debugger.Address
                   afterSave(): sun.jvm.hotspot.runtime.sparc.SPARCFrame
                   getFP(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameLocals(): sun.jvm.hotspot.debugger.Address
                   getInterpreterFrameBCI(): int
                   addressOfInterpreterFrameExpressionStack(): sun.jvm.hotspot.debugger.Address
                   getInterpreterFrameExpressionStackDirection(): int
                   addressOfInterpreterFrameTOS(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameTOSAt(arg0: int): sun.jvm.hotspot.debugger.Address
                   getInterpreterFrameSenderSP(): sun.jvm.hotspot.debugger.Address
                   interpreterFrameMonitorBegin(): sun.jvm.hotspot.runtime.BasicObjectLock
                   interpreterFrameMonitorEnd(): sun.jvm.hotspot.runtime.BasicObjectLock
                   interpreterFrameMonitorSize(): int
                   addressOfInterpreterFrameMethod(): sun.jvm.hotspot.debugger.Address
                   addressOfInterpreterFrameCPCache(): sun.jvm.hotspot.debugger.Address
                   getEntryFrameCallWrapper(): sun.jvm.hotspot.runtime.JavaCallWrapper
                   protected addressOfSavedOopResult(): sun.jvm.hotspot.debugger.Address
                   protected addressOfSavedReceiver(): sun.jvm.hotspot.debugger.Address
                   getUContextOffset(): long
                   getMContextAreaOffsetInUContext(): long
               }
               
            }
            namespace solaris_x86 {
               class SolarisX86JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class SolarisX86JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace solaris_sparc {
               class SolarisSPARCJavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class SolarisSPARCJavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace solaris_amd64 {
               class SolarisAMD64JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class SolarisAMD64JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace posix {
               class POSIXSignals {
                   constructor()
                   static getSignalName(arg0: int): java.lang.String
               }
               
            }
            namespace linux_sparc {
               class LinuxSPARCJavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class LinuxSPARCJavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace linux_x86 {
               class LinuxX86JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class LinuxX86JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class LinuxSignals {
                   constructor()
                   static getSignalName(arg0: int): java.lang.String
               }
               
            }
            namespace linux_amd64 {
               class LinuxAMD64JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class LinuxAMD64JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace linux {
               class LinuxSignals {
                   constructor()
                   static getSignalName(arg0: int): java.lang.String
               }
               
            }
            namespace bsd_x86 {
               class BsdX86JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class BsdX86JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class BsdSignals {
                   constructor()
                   static getSignalName(arg0: int): java.lang.String
               }
               
            }
            namespace bsd_amd64 {
               class BsdAMD64JavaThreadPDAccess implements sun.jvm.hotspot.runtime.JavaThreadPDAccess {
                   constructor()
                   getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                   getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                   printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                   getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class BsdAMD64JavaThreadPDAccess$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               
            }
            namespace bsd {
               class BsdSignals {
                   constructor()
                   static getSignalName(arg0: int): java.lang.String
               }
               
            }
            namespace amd64 {
               class AMD64JavaCallWrapper extends sun.jvm.hotspot.runtime.JavaCallWrapper {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   getLastJavaFP(): sun.jvm.hotspot.debugger.Address
                   static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
               }
               class AMD64JavaCallWrapper$1 implements java.util.Observer {
                   constructor()
                   update(arg0: java.util.Observable, arg1: java.lang.Object): void
               }
               class AMD64CurrentFrameGuess {
                   constructor(arg0: sun.jvm.hotspot.debugger.amd64.AMD64ThreadContext, arg1: sun.jvm.hotspot.runtime.JavaThread)
                   run(arg0: long): boolean
                   getSP(): sun.jvm.hotspot.debugger.Address
                   getFP(): sun.jvm.hotspot.debugger.Address
                   getPC(): sun.jvm.hotspot.debugger.Address
               }
               
            }
            class vmSymbols {
                constructor()
                static symbolAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class vmSymbols$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class WatcherThread extends sun.jvm.hotspot.runtime.Thread {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isWatcherThread(): boolean
            }
            class VMVersionMismatchException extends java.lang.RuntimeException {
                constructor(arg0: java.lang.String, arg1: java.lang.String)
                getMessage(): java.lang.String
                getSupportedVersions(): java.lang.String
                getTargetVersion(): java.lang.String
            }
            class VMOps extends java.lang.Enum<sun.jvm.hotspot.runtime.VMOps> {
                static Dummy: sun.jvm.hotspot.runtime.VMOps
                static ThreadStop: sun.jvm.hotspot.runtime.VMOps
                static ThreadDump: sun.jvm.hotspot.runtime.VMOps
                static PrintThreads: sun.jvm.hotspot.runtime.VMOps
                static FindDeadlocks: sun.jvm.hotspot.runtime.VMOps
                static ForceSafepoint: sun.jvm.hotspot.runtime.VMOps
                static ForceAsyncSafepoint: sun.jvm.hotspot.runtime.VMOps
                static Deoptimize: sun.jvm.hotspot.runtime.VMOps
                static DeoptimizeFrame: sun.jvm.hotspot.runtime.VMOps
                static DeoptimizeAll: sun.jvm.hotspot.runtime.VMOps
                static ZombieAll: sun.jvm.hotspot.runtime.VMOps
                static UnlinkSymbols: sun.jvm.hotspot.runtime.VMOps
                static Verify: sun.jvm.hotspot.runtime.VMOps
                static PrintJNI: sun.jvm.hotspot.runtime.VMOps
                static HeapDumper: sun.jvm.hotspot.runtime.VMOps
                static DeoptimizeTheWorld: sun.jvm.hotspot.runtime.VMOps
                static CollectForMetadataAllocation: sun.jvm.hotspot.runtime.VMOps
                static GC_HeapInspection: sun.jvm.hotspot.runtime.VMOps
                static GenCollectFull: sun.jvm.hotspot.runtime.VMOps
                static GenCollectFullConcurrent: sun.jvm.hotspot.runtime.VMOps
                static GenCollectForAllocation: sun.jvm.hotspot.runtime.VMOps
                static ParallelGCFailedAllocation: sun.jvm.hotspot.runtime.VMOps
                static ParallelGCSystemGC: sun.jvm.hotspot.runtime.VMOps
                static CGC_Operation: sun.jvm.hotspot.runtime.VMOps
                static CMS_Initial_Mark: sun.jvm.hotspot.runtime.VMOps
                static CMS_Final_Remark: sun.jvm.hotspot.runtime.VMOps
                static G1CollectFull: sun.jvm.hotspot.runtime.VMOps
                static G1CollectForAllocation: sun.jvm.hotspot.runtime.VMOps
                static G1IncCollectionPause: sun.jvm.hotspot.runtime.VMOps
                static EnableBiasedLocking: sun.jvm.hotspot.runtime.VMOps
                static RevokeBias: sun.jvm.hotspot.runtime.VMOps
                static BulkRevokeBias: sun.jvm.hotspot.runtime.VMOps
                static PopulateDumpSharedSpace: sun.jvm.hotspot.runtime.VMOps
                static JNIFunctionTableCopier: sun.jvm.hotspot.runtime.VMOps
                static RedefineClasses: sun.jvm.hotspot.runtime.VMOps
                static GetOwnedMonitorInfo: sun.jvm.hotspot.runtime.VMOps
                static GetObjectMonitorUsage: sun.jvm.hotspot.runtime.VMOps
                static GetCurrentContendedMonitor: sun.jvm.hotspot.runtime.VMOps
                static GetStackTrace: sun.jvm.hotspot.runtime.VMOps
                static GetMultipleStackTraces: sun.jvm.hotspot.runtime.VMOps
                static GetAllStackTraces: sun.jvm.hotspot.runtime.VMOps
                static GetThreadListStackTraces: sun.jvm.hotspot.runtime.VMOps
                static GetFrameCount: sun.jvm.hotspot.runtime.VMOps
                static GetFrameLocation: sun.jvm.hotspot.runtime.VMOps
                static ChangeBreakpoints: sun.jvm.hotspot.runtime.VMOps
                static GetOrSetLocal: sun.jvm.hotspot.runtime.VMOps
                static GetCurrentLocation: sun.jvm.hotspot.runtime.VMOps
                static EnterInterpOnlyMode: sun.jvm.hotspot.runtime.VMOps
                static ChangeSingleStep: sun.jvm.hotspot.runtime.VMOps
                static HeapWalkOperation: sun.jvm.hotspot.runtime.VMOps
                static HeapIterateOperation: sun.jvm.hotspot.runtime.VMOps
                static ReportJavaOutOfMemory: sun.jvm.hotspot.runtime.VMOps
                static JFRCheckpoint: sun.jvm.hotspot.runtime.VMOps
                static Exit: sun.jvm.hotspot.runtime.VMOps
                static LinuxDllLoad: sun.jvm.hotspot.runtime.VMOps
                static Terminating: sun.jvm.hotspot.runtime.VMOps
                static values(): sun.jvm.hotspot.runtime.VMOps[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.runtime.VMOps
            }
            class VMObjectFactory {
                constructor()
                static newObject(arg0: java.lang.Class, arg1: sun.jvm.hotspot.debugger.Address): java.lang.Object
            }
            class StackFrameStream {
                constructor(arg0: sun.jvm.hotspot.runtime.JavaThread)
                constructor(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean)
                isDone(): boolean
                next(): void
                getCurrent(): sun.jvm.hotspot.runtime.Frame
                getRegisterMap(): sun.jvm.hotspot.runtime.RegisterMap
            }
            class SignatureConverter extends sun.jvm.hotspot.runtime.SignatureIterator {
                constructor(arg0: sun.jvm.hotspot.oops.Symbol, arg1: java.lang.StringBuffer)
                doBool(): void
                doChar(): void
                doFloat(): void
                doDouble(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doLong(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
                appendComma(): void
            }
            class ServiceThread extends sun.jvm.hotspot.runtime.JavaThread {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isJavaThread(): boolean
                isHiddenFromExternalView(): boolean
                isServiceThread(): boolean
            }
            class ResultTypeFinder extends sun.jvm.hotspot.runtime.SignatureInfo {
                protected set(arg0: int, arg1: int): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
            }
            class PerfMemory {
                constructor()
                static start(): sun.jvm.hotspot.debugger.Address
                static end(): sun.jvm.hotspot.debugger.Address
                static top(): sun.jvm.hotspot.debugger.Address
                static capacity(): long
                static initialized(): boolean
                static prologue(): sun.jvm.hotspot.runtime.PerfDataPrologue
                static contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                static iterate(arg0: sun.jvm.hotspot.runtime.PerfMemory$PerfDataEntryVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            interface PerfMemory$PerfDataEntryVisitor {
                visit(arg0: sun.jvm.hotspot.runtime.PerfDataEntry): boolean
            }
            class PerfMemory$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PerfDataPrologue extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                magic(): int
                byteOrder(): byte
                majorVersion(): byte
                accessible(): boolean
                used(): int
                overflow(): int
                modTimeStamp(): long
                entryOffset(): int
                numEntries(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class PerfDataPrologue$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class PerfDataEntry extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                entryLength(): int
                nameOffset(): int
                vectorLength(): int
                dataType(): int
                flags(): byte
                supported(): boolean
                dataUnits(): int
                dataVariability(): int
                dataOffset(): int
                name(): java.lang.String
                booleanValue(): boolean
                charValue(): char
                byteValue(): byte
                shortValue(): short
                intValue(): int
                longValue(): long
                floatValue(): float
                doubleValue(): double
                booleanArrayValue(): boolean[]
                charArrayValue(): char[]
                byteArrayValue(): byte[]
                shortArrayValue(): short[]
                intArrayValue(): int[]
                longArrayValue(): long[]
                floatArrayValue(): float[]
                doubleArrayValue(): double[]
                valueAsString(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            interface PerfDataEntry$PerfDataVariability {
                static V_Constant: int
                static V_Monotonic: int
                static V_Variable: int
            }
            interface PerfDataEntry$PerfDataUnits {
                static U_None: int
                static U_Bytes: int
                static U_Ticks: int
                static U_Events: int
                static U_String: int
                static U_Hertz: int
            }
            class PerfDataEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MonitorInfo {
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.runtime.BasicLock, arg2: boolean, arg3: boolean)
                owner(): sun.jvm.hotspot.debugger.OopHandle
                ownerKlass(): sun.jvm.hotspot.debugger.OopHandle
                lock(): sun.jvm.hotspot.runtime.BasicLock
                eliminated(): boolean
                ownerIsScalarReplaced(): boolean
            }
            class JvmtiAgentThread extends sun.jvm.hotspot.runtime.JavaThread {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isJavaThread(): boolean
                isJvmtiAgentThread(): boolean
            }
            class JNIid extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.oops.ObjectHeap)
                next(): sun.jvm.hotspot.runtime.JNIid
                holder(): sun.jvm.hotspot.oops.Klass
                offset(): int
                method(): sun.jvm.hotspot.oops.Method
                resolvedMethod(): sun.jvm.hotspot.oops.Method
                resolvedReceiver(): sun.jvm.hotspot.oops.Klass
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JNIid$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class InterpretedVFrame extends sun.jvm.hotspot.runtime.JavaVFrame {
                getMethod(): sun.jvm.hotspot.oops.Method
                getLocals(): sun.jvm.hotspot.runtime.StackValueCollection
                getExpressions(): sun.jvm.hotspot.runtime.StackValueCollection
                getMonitors(): java.util.List
                isInterpretedFrame(): boolean
                constructor(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.runtime.RegisterMap, arg2: sun.jvm.hotspot.runtime.JavaThread)
                getBCI(): int
                verify(): void
            }
            class ArgumentOopFinder extends sun.jvm.hotspot.runtime.SignatureInfo {
                protected set(arg0: int, arg1: int): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol, arg1: boolean, arg2: sun.jvm.hotspot.runtime.Frame, arg3: sun.jvm.hotspot.runtime.AddressVisitor)
                oopsDo(): void
            }
            class InterpreterFrameClosure implements sun.jvm.hotspot.interpreter.OffsetClosure {
                constructor(arg0: sun.jvm.hotspot.runtime.Frame, arg1: int, arg2: int, arg3: sun.jvm.hotspot.runtime.AddressVisitor)
                offsetDo(arg0: int): void
            }
            class Flags extends java.lang.Enum<sun.jvm.hotspot.runtime.Flags> {
                static DEFAULT: sun.jvm.hotspot.runtime.Flags
                static COMMAND_LINE: sun.jvm.hotspot.runtime.Flags
                static ENVIRON_VAR: sun.jvm.hotspot.runtime.Flags
                static CONFIG_FILE: sun.jvm.hotspot.runtime.Flags
                static MANAGEMENT: sun.jvm.hotspot.runtime.Flags
                static ERGONOMIC: sun.jvm.hotspot.runtime.Flags
                static ATTACH_ON_DEMAND: sun.jvm.hotspot.runtime.Flags
                static INTERNAL: sun.jvm.hotspot.runtime.Flags
                static values(): sun.jvm.hotspot.runtime.Flags[]
                static valueOf(arg0: java.lang.String): sun.jvm.hotspot.runtime.Flags
                value(): java.lang.String
            }
            class ExternalVFrame extends sun.jvm.hotspot.runtime.VFrame {
                constructor(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.runtime.RegisterMap, arg2: sun.jvm.hotspot.runtime.JavaThread, arg3: boolean)
                print(): void
                printOn(arg0: java.io.PrintStream): void
                printValue(): void
                printValueOn(arg0: java.io.PrintStream): void
                mayBeImpreciseDbg(): boolean
            }
            class DeadlockDetector {
                constructor()
                static print(arg0: java.io.PrintStream): void
                static print(arg0: java.io.PrintStream, arg1: boolean): void
            }
            class ConstructionException extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
                constructor(arg0: java.lang.Throwable)
                constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
            }
            class ConcurrentLocksPrinter {
                constructor()
                print(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.runtime.ConcurrentLocksPrinter, arg1: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.runtime.JavaThread
                static access$100(arg0: sun.jvm.hotspot.runtime.ConcurrentLocksPrinter): java.util.Map
            }
            class ConcurrentLocksPrinter$1 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                this$0: sun.jvm.hotspot.runtime.ConcurrentLocksPrinter
                constructor(arg0: sun.jvm.hotspot.runtime.ConcurrentLocksPrinter)
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class CompilerThread extends sun.jvm.hotspot.runtime.JavaThread {
                sun.jvm.hotspot.ci.ciEnv: synchronized
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isJavaThread(): boolean
                isHiddenFromExternalView(): boolean
                isCompilerThread(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CompilerThread$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CompiledVFrame extends sun.jvm.hotspot.runtime.JavaVFrame {
                constructor(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.runtime.RegisterMap, arg2: sun.jvm.hotspot.runtime.JavaThread, arg3: sun.jvm.hotspot.code.ScopeDesc, arg4: boolean)
                isTop(): boolean
                isCompiledFrame(): boolean
                isDeoptimized(): boolean
                mayBeImpreciseDbg(): boolean
                getCode(): sun.jvm.hotspot.code.NMethod
                getCodeUnsafe(): sun.jvm.hotspot.code.NMethod
                getScope(): sun.jvm.hotspot.code.ScopeDesc
                getMethod(): sun.jvm.hotspot.oops.Method
                getLocals(): sun.jvm.hotspot.runtime.StackValueCollection
                getExpressions(): sun.jvm.hotspot.runtime.StackValueCollection
                getMonitors(): java.util.List
                getBCI(): int
                getRawBCI(): int
                sender(): sun.jvm.hotspot.runtime.VFrame
                sender(arg0: boolean): sun.jvm.hotspot.runtime.VFrame
            }
            class BasicTypeSize {
                constructor()
                static getTBooleanSize(): int
                static getTCharSize(): int
                static getTFloatSize(): int
                static getTDoubleSize(): int
                static getTByteSize(): int
                static getTShortSize(): int
                static getTIntSize(): int
                static getTLongSize(): int
                static getTObjectSize(): int
                static getTArraySize(): int
                static getTVoidSize(): int
            }
            class Arguments {
                constructor()
                static getJVMFlags(): java.lang.String
                static getJVMArgs(): java.lang.String
                static getJavaCommand(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Arguments$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class SignatureInfo extends sun.jvm.hotspot.runtime.SignatureIterator {
                protected hasIterated: boolean
                protected size: int
                protected type: int
                protected lazyIterate(): void
                protected set(arg0: int, arg1: int): void
                doBool(): void
                doChar(): void
                doFloat(): void
                doDouble(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doLong(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
                size(): int
                type(): int
            }
            class ArgumentSizeComputer extends sun.jvm.hotspot.runtime.SignatureInfo {
                protected set(arg0: int, arg1: int): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
            }
            abstract class SignatureIterator {
                protected _signature: sun.jvm.hotspot.oops.Symbol
                protected _index: int
                protected _parameter_index: int
                protected expect(arg0: char): void
                protected skipOptionalSize(): void
                protected parseType(): int
                protected checkSignatureEnd(): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
                dispatchField(): void
                iterateParameters(): void
                iterateReturntype(): void
                iterate(): void
                parameterIndex(): int
                isReturnType(): boolean
                doBool(): void
                doChar(): void
                doFloat(): void
                doDouble(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doLong(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
            }
            abstract class NativeSignatureIterator extends sun.jvm.hotspot.runtime.SignatureIterator {
                doBool(): void
                doChar(): void
                doFloat(): void
                doDouble(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doLong(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
                method(): sun.jvm.hotspot.oops.Method
                offset(): int
                jniOffset(): int
                isStatic(): boolean
                passInt(): void
                passLong(): void
                passObject(): void
                passFloat(): void
                passDouble(): void
                constructor(arg0: sun.jvm.hotspot.oops.Method)
                iterate(): void
            }
            class StaticBaseConstructor<T> extends sun.jvm.hotspot.runtime.InstanceConstructor {
                (: sun.jvm.hotspot.runtime.StaticBaseConstructor
                instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.VMObject
                instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): java.lang.Object
            }
            class VirtualSpace extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                low(): sun.jvm.hotspot.debugger.Address
                high(): sun.jvm.hotspot.debugger.Address
                lowBoundary(): sun.jvm.hotspot.debugger.Address
                highBoundary(): sun.jvm.hotspot.debugger.Address
                committedSize(): long
                reservedSize(): long
                uncommittedSize(): long
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class VirtualSpace$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface JavaThreadFactory {
                createJavaThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.TypeDataBase): sun.jvm.hotspot.runtime.JavaThread
            }
            class VirtualConstructor extends sun.jvm.hotspot.runtime.InstanceConstructor<sun.jvm.hotspot.runtime.VMObject> {
                constructor(arg0: sun.jvm.hotspot.types.TypeDataBase)
                addMapping(arg0: java.lang.String, arg1: java.lang.Class): boolean
                instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.VMObject
                instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): java.lang.Object
            }
            class Bytes {
                constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription)
                swapShort(arg0: short): short
                swapInt(arg0: int): int
                swapLong(arg0: long): long
            }
            class StubRoutines {
                constructor()
                returnsToCallStub(arg0: sun.jvm.hotspot.debugger.Address): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class StubRoutines$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JNIHandles {
                constructor()
                globalHandles(): sun.jvm.hotspot.runtime.JNIHandleBlock
                weakGlobalHandles(): sun.jvm.hotspot.runtime.JNIHandleBlock
                deletedHandle(): sun.jvm.hotspot.debugger.OopHandle
                isDeletedHandle(arg0: sun.jvm.hotspot.debugger.OopHandle): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JNIHandles$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ObjectSynchronizer {
                constructor()
                identityHashValueFor(arg0: sun.jvm.hotspot.oops.Oop): long
                static objectMonitorIterator(): java.util.Iterator
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
                static access$100(): sun.jvm.hotspot.debugger.Address
                static access$200(): int
                static access$300(): long
            }
            class ObjectSynchronizer$ObjectMonitorIterator implements java.util.Iterator {
                constructor()
                hasNext(): boolean
                next(): java.lang.Object
                remove(): void
            }
            class ObjectSynchronizer$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Threads {
                constructor()
                first(): sun.jvm.hotspot.runtime.JavaThread
                getNumberOfThreads(): int
                createJavaThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.JavaThread
                oopsDo(arg0: sun.jvm.hotspot.runtime.AddressVisitor): void
                owningThreadFromMonitor(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.JavaThread
                owningThreadFromMonitor(arg0: sun.jvm.hotspot.runtime.ObjectMonitor): sun.jvm.hotspot.runtime.JavaThread
                getPendingThreads(arg0: sun.jvm.hotspot.runtime.ObjectMonitor): java.util.List
                getWaitingThreads(arg0: sun.jvm.hotspot.runtime.ObjectMonitor): java.util.List
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Threads$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class StackValue {
                constructor()
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: long)
                constructor(arg0: long)
                getType(): int
                getObject(): sun.jvm.hotspot.debugger.OopHandle
                objIsScalarReplaced(): boolean
                getInteger(): long
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class VMReg {
                static matcherRegEncodeAddr: sun.jvm.hotspot.debugger.Address
                constructor(arg0: int)
                getValue(): int
                regEncode(): int
                equals(arg0: java.lang.Object): boolean
                lessThan(arg0: sun.jvm.hotspot.runtime.VMReg): boolean
                lessThanOrEqual(arg0: sun.jvm.hotspot.runtime.VMReg): boolean
                greaterThan(arg0: sun.jvm.hotspot.runtime.VMReg): boolean
                greaterThanOrEqual(arg0: sun.jvm.hotspot.runtime.VMReg): boolean
                minus(arg0: sun.jvm.hotspot.runtime.VMReg): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class VMReg$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JavaCallWrapper extends sun.jvm.hotspot.runtime.VMObject {
                protected static anchorField: sun.jvm.hotspot.types.AddressField
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getLastJavaSP(): sun.jvm.hotspot.debugger.Address
                getLastJavaPC(): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JavaCallWrapper$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class BasicObjectLock extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                obj(): sun.jvm.hotspot.debugger.OopHandle
                lock(): sun.jvm.hotspot.runtime.BasicLock
                static size(): int
                address(): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class BasicObjectLock$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class VM {
                static initialize(arg0: sun.jvm.hotspot.types.TypeDataBase, arg1: boolean): void
                static initialize(arg0: sun.jvm.hotspot.types.TypeDataBase, arg1: sun.jvm.hotspot.debugger.JVMDebugger): void
                static shutdown(): void
                static registerVMInitializedObserver(arg0: java.util.Observer): void
                static getVM(): sun.jvm.hotspot.runtime.VM
                registerVMResumedObserver(arg0: java.util.Observer): void
                registerVMSuspendedObserver(arg0: java.util.Observer): void
                fireVMResumed(): void
                fireVMSuspended(): void
                getOS(): java.lang.String
                getCPU(): java.lang.String
                lookupType(arg0: java.lang.String): sun.jvm.hotspot.types.Type
                lookupIntConstant(arg0: java.lang.String): java.lang.Integer
                static getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                getAddressSize(): long
                getOopSize(): long
                getLogAddressSize(): long
                getIntSize(): long
                getStackBias(): long
                isLP64(): boolean
                getBytesPerLong(): int
                getBytesPerWord(): int
                getMinObjAlignmentInBytes(): int
                getLogMinObjAlignmentInBytes(): int
                getHeapWordSize(): int
                getHeapOopSize(): int
                getKlassPtrSize(): int
                alignUp(arg0: long, arg1: long): long
                alignDown(arg0: long, arg1: long): long
                buildIntFromShorts(arg0: short, arg1: short): int
                buildLongFromIntsPD(arg0: int, arg1: int): long
                getTypeDataBase(): sun.jvm.hotspot.types.TypeDataBase
                getUniverse(): sun.jvm.hotspot.memory.Universe
                getObjectHeap(): sun.jvm.hotspot.oops.ObjectHeap
                getSymbolTable(): sun.jvm.hotspot.memory.SymbolTable
                getStringTable(): sun.jvm.hotspot.memory.StringTable
                getSystemDictionary(): sun.jvm.hotspot.memory.SystemDictionary
                getThreads(): sun.jvm.hotspot.runtime.Threads
                getObjectSynchronizer(): sun.jvm.hotspot.runtime.ObjectSynchronizer
                getJNIHandles(): sun.jvm.hotspot.runtime.JNIHandles
                getInterpreter(): sun.jvm.hotspot.interpreter.Interpreter
                getStubRoutines(): sun.jvm.hotspot.runtime.StubRoutines
                getVMRegImplInfo(): sun.jvm.hotspot.code.VMRegImpl
                getBytes(): sun.jvm.hotspot.runtime.Bytes
                isBigEndian(): boolean
                isCore(): boolean
                isClientCompiler(): boolean
                isServerCompiler(): boolean
                useDerivedPointerTable(): boolean
                getCodeCache(): sun.jvm.hotspot.code.CodeCache
                getRuntime1(): sun.jvm.hotspot.c1.Runtime1
                isDebugging(): boolean
                getDebugger(): sun.jvm.hotspot.debugger.JVMDebugger
                isJavaPCDbg(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getInvocationEntryBCI(): int
                getInvalidOSREntryBCI(): int
                wizardMode(): boolean
                getRevPtrs(): sun.jvm.hotspot.utilities.ReversePtrs
                setRevPtrs(arg0: sun.jvm.hotspot.utilities.ReversePtrs): void
                getVMRelease(): java.lang.String
                getVMInternalInfo(): java.lang.String
                getReserveForAllocationPrefetch(): int
                isSharingEnabled(): boolean
                isCompressedOopsEnabled(): boolean
                isCompressedKlassPointersEnabled(): boolean
                getObjectAlignmentInBytes(): int
                getUseTLAB(): boolean
                getCommandLineFlags(): sun.jvm.hotspot.runtime.VM$Flag[]
                getCommandLineFlag(arg0: java.lang.String): sun.jvm.hotspot.runtime.VM$Flag
                getSystemProperty(arg0: java.lang.String): java.lang.String
                getSystemProperties(): java.util.Properties
                static access$000(): sun.jvm.hotspot.types.CIntegerType
                static access$100(): sun.jvm.hotspot.types.Type
                static access$200(): sun.jvm.hotspot.types.Type
                static access$402(arg0: sun.jvm.hotspot.runtime.VM, arg1: java.util.Properties): java.util.Properties
            }
            class VM$2 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                objReader: sun.jvm.hotspot.utilities.ObjectReader
                this$0: sun.jvm.hotspot.runtime.VM
                constructor(arg0: sun.jvm.hotspot.runtime.VM)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
            }
            class VM$1 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.runtime.VM
                constructor(arg0: sun.jvm.hotspot.runtime.VM)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class VM$Flag {
                getType(): java.lang.String
                getName(): java.lang.String
                getAddress(): sun.jvm.hotspot.debugger.Address
                getOrigin(): int
                isBool(): boolean
                getBool(): boolean
                isIntx(): boolean
                getIntx(): long
                isUIntx(): boolean
                getUIntx(): long
                getValue(): java.lang.String
                constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: sun.jvm.hotspot.debugger.Address, arg3: int, arg4: sun.jvm.hotspot.runtime.VM$1)
            }
            class StackValueCollection {
                constructor()
                constructor(arg0: int)
                add(arg0: sun.jvm.hotspot.runtime.StackValue): void
                size(): int
                isEmpty(): boolean
                get(arg0: int): sun.jvm.hotspot.runtime.StackValue
                booleanAt(arg0: int): boolean
                byteAt(arg0: int): byte
                charAt(arg0: int): char
                shortAt(arg0: int): short
                intAt(arg0: int): int
                longAt(arg0: int): long
                oopHandleAt(arg0: int): sun.jvm.hotspot.debugger.OopHandle
                floatAt(arg0: int): float
                doubleAt(arg0: int): double
            }
            class JNIHandleBlock extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                next(): sun.jvm.hotspot.runtime.JNIHandleBlock
                top(): int
                oopsDo(arg0: sun.jvm.hotspot.runtime.AddressVisitor): void
                getOopHandle(arg0: int): sun.jvm.hotspot.debugger.OopHandle
                blockContainingHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.JNIHandleBlock
                indexOfHandle(arg0: sun.jvm.hotspot.debugger.Address): int
                toString(): java.lang.String
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JNIHandleBlock$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ThreadLocalAllocBuffer extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                start(): sun.jvm.hotspot.debugger.Address
                end(): sun.jvm.hotspot.debugger.Address
                top(): sun.jvm.hotspot.debugger.Address
                hardEnd(): sun.jvm.hotspot.debugger.Address
                startAsOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                nextOopHandle(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: long): sun.jvm.hotspot.debugger.OopHandle
                print(): void
                contains(arg0: sun.jvm.hotspot.debugger.Address): boolean
                printOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ThreadLocalAllocBuffer$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class OSThread extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                interrupted(): boolean
                threadId(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class OSThread$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JavaThreadState {
                static UNINITIALIZED: sun.jvm.hotspot.runtime.JavaThreadState
                static NEW: sun.jvm.hotspot.runtime.JavaThreadState
                static NEW_TRANS: sun.jvm.hotspot.runtime.JavaThreadState
                static IN_NATIVE: sun.jvm.hotspot.runtime.JavaThreadState
                static IN_NATIVE_TRANS: sun.jvm.hotspot.runtime.JavaThreadState
                static IN_VM: sun.jvm.hotspot.runtime.JavaThreadState
                static IN_VM_TRANS: sun.jvm.hotspot.runtime.JavaThreadState
                static IN_JAVA: sun.jvm.hotspot.runtime.JavaThreadState
                static IN_JAVA_TRANS: sun.jvm.hotspot.runtime.JavaThreadState
                static BLOCKED: sun.jvm.hotspot.runtime.JavaThreadState
                static BLOCKED_TRANS: sun.jvm.hotspot.runtime.JavaThreadState
                toString(): java.lang.String
            }
            abstract class RegisterMap implements java.lang.Cloneable {
                protected location: sun.jvm.hotspot.debugger.Address[]
                protected locationValid: long[]
                protected includeArgumentOops: boolean
                protected thread: sun.jvm.hotspot.runtime.JavaThread
                protected updateMap: boolean
                protected static regCount: int
                protected static locationValidTypeSize: int
                protected static locationValidSize: int
                protected (: sun.jvm.hotspot.runtime.RegisterMap
                protected (: sun.jvm.hotspot.runtime.RegisterMap
                clone(): java.lang.Object
                copy(): sun.jvm.hotspot.runtime.RegisterMap
                clear(): void
                getLocation(arg0: sun.jvm.hotspot.runtime.VMReg): sun.jvm.hotspot.debugger.Address
                setLocation(arg0: sun.jvm.hotspot.runtime.VMReg, arg1: sun.jvm.hotspot.debugger.Address): void
                getIncludeArgumentOops(): boolean
                setIncludeArgumentOops(arg0: boolean): void
                getThread(): sun.jvm.hotspot.runtime.JavaThread
                getUpdateMap(): boolean
                print(): void
                printOn(arg0: java.io.PrintStream): void
                protected clearPD(): void
                protected initializePD(): void
                protected initializeFromPD(arg0: sun.jvm.hotspot.runtime.RegisterMap): void
                protected getLocationPD(arg0: sun.jvm.hotspot.runtime.VMReg): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class RegisterMap$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class Frame implements java.lang.Cloneable {
                protected raw_sp: sun.jvm.hotspot.debugger.Address
                protected pc: sun.jvm.hotspot.debugger.Address
                protected deoptimized: boolean
                constructor()
                static pcReturnOffset(): int
                protected bcpToBci(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.oops.ConstMethod): int
                protected bcpToBci(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.oops.Method): int
                clone(): java.lang.Object
                getPC(): sun.jvm.hotspot.debugger.Address
                setPC(arg0: sun.jvm.hotspot.debugger.Address): void
                isDeoptimized(): boolean
                cb(): sun.jvm.hotspot.code.CodeBlob
                getSP(): sun.jvm.hotspot.debugger.Address
                getID(): sun.jvm.hotspot.debugger.Address
                getFP(): sun.jvm.hotspot.debugger.Address
                equals(arg0: java.lang.Object): boolean
                isInterpretedFrame(): boolean
                isJavaFrame(): boolean
                isEntryFrame(): boolean
                isNativeFrame(): boolean
                isCompiledFrame(): boolean
                isRuntimeFrame(): boolean
                isFirstFrame(): boolean
                isFirstJavaFrame(): boolean
                isSignalHandlerFrameDbg(): boolean
                getSignalNumberDbg(): int
                getSignalNameDbg(): java.lang.String
                isInterpretedFrameValid(): boolean
                shouldBeDeoptimized(): boolean
                canBeDeoptimized(): boolean
                sender(arg0: sun.jvm.hotspot.runtime.RegisterMap, arg1: sun.jvm.hotspot.code.CodeBlob): sun.jvm.hotspot.runtime.Frame
                sender(arg0: sun.jvm.hotspot.runtime.RegisterMap): sun.jvm.hotspot.runtime.Frame
                realSender(arg0: sun.jvm.hotspot.runtime.RegisterMap): sun.jvm.hotspot.runtime.Frame
                protected hasSenderPD(): boolean
                addressOfStackSlot(arg0: int): sun.jvm.hotspot.debugger.Address
                getOopHandleAt(arg0: int): sun.jvm.hotspot.debugger.OopHandle
                getIntAt(arg0: int): int
                frameSize(): long
                getLink(): sun.jvm.hotspot.debugger.Address
                getSenderPC(): sun.jvm.hotspot.debugger.Address
                getUnextendedSP(): sun.jvm.hotspot.debugger.Address
                getSenderSP(): sun.jvm.hotspot.debugger.Address
                addressOfInterpreterFrameLocals(): sun.jvm.hotspot.debugger.Address
                addressOfInterpreterFrameLocal(arg0: int): sun.jvm.hotspot.debugger.Address
                getInterpreterFrameBCI(): int
                addressOfInterpreterFrameExpressionStack(): sun.jvm.hotspot.debugger.Address
                getInterpreterFrameExpressionStackDirection(): int
                addressOfInterpreterFrameExpressionStackSlot(arg0: int): sun.jvm.hotspot.debugger.Address
                addressOfInterpreterFrameTOS(): sun.jvm.hotspot.debugger.Address
                addressOfInterpreterFrameTOSAt(arg0: int): sun.jvm.hotspot.debugger.Address
                getInterpreterFrameExpressionStackSize(): int
                getInterpreterFrameSenderSP(): sun.jvm.hotspot.debugger.Address
                interpreterFrameMonitorBegin(): sun.jvm.hotspot.runtime.BasicObjectLock
                interpreterFrameMonitorEnd(): sun.jvm.hotspot.runtime.BasicObjectLock
                interpreterFrameMonitorSize(): int
                nextMonitorInInterpreterFrame(arg0: sun.jvm.hotspot.runtime.BasicObjectLock): sun.jvm.hotspot.runtime.BasicObjectLock
                previousMonitorInInterpreterFrame(arg0: sun.jvm.hotspot.runtime.BasicObjectLock): sun.jvm.hotspot.runtime.BasicObjectLock
                addressOfInterpreterFrameMethod(): sun.jvm.hotspot.debugger.Address
                getInterpreterFrameMethod(): sun.jvm.hotspot.oops.Method
                addressOfInterpreterFrameCPCache(): sun.jvm.hotspot.debugger.Address
                getInterpreterFrameCPCache(): sun.jvm.hotspot.oops.ConstantPoolCache
                getEntryFrameCallWrapper(): sun.jvm.hotspot.runtime.JavaCallWrapper
                entryFrameIsFirst(): boolean
                protected addressOfSavedOopResult(): sun.jvm.hotspot.debugger.Address
                protected addressOfSavedReceiver(): sun.jvm.hotspot.debugger.Address
                getSavedOopResult(): sun.jvm.hotspot.debugger.OopHandle
                getSavedReceiver(): sun.jvm.hotspot.debugger.OopHandle
                oopsInterpretedArgumentsDo(arg0: sun.jvm.hotspot.oops.Symbol, arg1: boolean, arg2: sun.jvm.hotspot.runtime.AddressVisitor): void
                oopMapRegToLocation(arg0: sun.jvm.hotspot.runtime.VMReg, arg1: sun.jvm.hotspot.runtime.RegisterMap): sun.jvm.hotspot.debugger.Address
                oopsDo(arg0: sun.jvm.hotspot.runtime.AddressVisitor, arg1: sun.jvm.hotspot.runtime.RegisterMap): void
                printValue(): void
                printValueOn(arg0: java.io.PrintStream): void
                print(): void
                printOn(arg0: java.io.PrintStream): void
                interpreterFramePrintOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Frame$InterpVisitor implements sun.jvm.hotspot.compiler.OopMapVisitor {
                constructor(arg0: sun.jvm.hotspot.runtime.AddressVisitor)
                setAddressVisitor(arg0: sun.jvm.hotspot.runtime.AddressVisitor): void
                visitOopLocation(arg0: sun.jvm.hotspot.debugger.Address): void
                visitDerivedOopLocation(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
                visitValueLocation(arg0: sun.jvm.hotspot.debugger.Address): void
                visitNarrowOopLocation(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class Frame$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface JavaThreadPDAccess {
                getLastJavaFP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getLastJavaPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getBaseOfStackPointer(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getLastFramePD(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                newRegisterMap(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: boolean): sun.jvm.hotspot.runtime.RegisterMap
                getCurrentFrameGuess(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.runtime.Frame
                printThreadIDOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                printInfoOn(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.io.PrintStream): void
                getLastSP(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getThreadProxy(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
            }
            class BasicType {
                static tBoolean: int
                static tChar: int
                static tFloat: int
                static tDouble: int
                static tByte: int
                static tShort: int
                static tInt: int
                static tLong: int
                static tObject: int
                static tArray: int
                static tVoid: int
                static tAddress: int
                static tConflict: int
                static tIllegal: int
                static T_BOOLEAN: sun.jvm.hotspot.runtime.BasicType
                static T_CHAR: sun.jvm.hotspot.runtime.BasicType
                static T_FLOAT: sun.jvm.hotspot.runtime.BasicType
                static T_DOUBLE: sun.jvm.hotspot.runtime.BasicType
                static T_BYTE: sun.jvm.hotspot.runtime.BasicType
                static T_SHORT: sun.jvm.hotspot.runtime.BasicType
                static T_INT: sun.jvm.hotspot.runtime.BasicType
                static T_LONG: sun.jvm.hotspot.runtime.BasicType
                static T_OBJECT: sun.jvm.hotspot.runtime.BasicType
                static T_ARRAY: sun.jvm.hotspot.runtime.BasicType
                static T_VOID: sun.jvm.hotspot.runtime.BasicType
                static T_ADDRESS: sun.jvm.hotspot.runtime.BasicType
                static T_CONFLICT: sun.jvm.hotspot.runtime.BasicType
                static T_ILLEGAL: sun.jvm.hotspot.runtime.BasicType
                static getTBoolean(): int
                static getTChar(): int
                static getTFloat(): int
                static getTDouble(): int
                static getTByte(): int
                static getTShort(): int
                static getTInt(): int
                static getTLong(): int
                static getTObject(): int
                static getTArray(): int
                static getTVoid(): int
                static getTAddress(): int
                static getTConflict(): int
                static getTIllegal(): int
                static charToBasicType(arg0: char): sun.jvm.hotspot.runtime.BasicType
                static charToType(arg0: char): int
                getType(): int
            }
            abstract class InstanceConstructor<T> {
                (: sun.jvm.hotspot.runtime.InstanceConstructor
                instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): T
                protected newWrongTypeException(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.types.WrongTypeException
            }
            class VirtualBaseConstructor<T> extends sun.jvm.hotspot.runtime.InstanceConstructor {
                (: sun.jvm.hotspot.runtime.VirtualBaseConstructor
                addMapping(arg0: java.lang.String, arg1: java.lang.Class): boolean
                instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): T
            }
            class ObjectMonitor extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                header(): sun.jvm.hotspot.oops.Mark
                isEntered(arg0: sun.jvm.hotspot.runtime.Thread): boolean
                owner(): sun.jvm.hotspot.debugger.Address
                waiters(): long
                freeNext(): sun.jvm.hotspot.debugger.Address
                count(): long
                recursions(): long
                object(): sun.jvm.hotspot.debugger.OopHandle
                contentions(): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ObjectMonitor$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class BasicLock extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                displacedHeader(): sun.jvm.hotspot.oops.Mark
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class BasicLock$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface AddressVisitor {
                visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class VFrame {
                protected fr: sun.jvm.hotspot.runtime.Frame
                protected regMap: sun.jvm.hotspot.runtime.RegisterMap
                protected thread: sun.jvm.hotspot.runtime.JavaThread
                protected (: sun.jvm.hotspot.runtime.VFrame
                static newVFrame(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.runtime.RegisterMap, arg2: sun.jvm.hotspot.runtime.JavaThread, arg3: boolean, arg4: boolean): sun.jvm.hotspot.runtime.VFrame
                static newVFrame(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.runtime.RegisterMap, arg2: sun.jvm.hotspot.runtime.JavaThread): sun.jvm.hotspot.runtime.VFrame
                getFrame(): sun.jvm.hotspot.runtime.Frame
                getRegisterMap(): sun.jvm.hotspot.runtime.RegisterMap
                getThread(): sun.jvm.hotspot.runtime.JavaThread
                sender(): sun.jvm.hotspot.runtime.VFrame
                sender(arg0: boolean): sun.jvm.hotspot.runtime.VFrame
                javaSender(): sun.jvm.hotspot.runtime.JavaVFrame
                isTop(): boolean
                top(): sun.jvm.hotspot.runtime.VFrame
                isEntryFrame(): boolean
                isJavaFrame(): boolean
                isInterpretedFrame(): boolean
                isCompiledFrame(): boolean
                isDeoptimized(): boolean
                mayBeImpreciseDbg(): boolean
                print(): void
                printOn(arg0: java.io.PrintStream): void
                printValue(): void
                printValueOn(arg0: java.io.PrintStream): void
            }
            abstract class JavaVFrame extends sun.jvm.hotspot.runtime.VFrame {
                getMethod(): sun.jvm.hotspot.oops.Method
                getBCI(): int
                getLocals(): sun.jvm.hotspot.runtime.StackValueCollection
                getExpressions(): sun.jvm.hotspot.runtime.StackValueCollection
                getMonitors(): java.util.List
                isJavaFrame(): boolean
                constructor(arg0: sun.jvm.hotspot.runtime.Frame, arg1: sun.jvm.hotspot.runtime.RegisterMap, arg2: sun.jvm.hotspot.runtime.JavaThread)
                print(): void
                printOn(arg0: java.io.PrintStream): void
                printActivation(arg0: int): void
                printActivationOn(arg0: java.io.PrintStream, arg1: int): void
                verify(): void
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                structuralCompare(arg0: sun.jvm.hotspot.runtime.JavaVFrame): boolean
            }
            class Thread extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                suspendFlags(): int
                isExternalSuspend(): boolean
                isExtSuspended(): boolean
                isBeingExtSuspended(): boolean
                isAnySuspended(): boolean
                hasAsyncException(): boolean
                tlab(): sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer
                activeHandles(): sun.jvm.hotspot.runtime.JNIHandleBlock
                allocatedBytes(): long
                isVMThread(): boolean
                isJavaThread(): boolean
                isCompilerThread(): boolean
                isHiddenFromExternalView(): boolean
                isJvmtiAgentThread(): boolean
                isWatcherThread(): boolean
                isConcurrentMarkSweepThread(): boolean
                isServiceThread(): boolean
                oopsDo(arg0: sun.jvm.hotspot.runtime.AddressVisitor): void
                getCurrentPendingMonitor(): sun.jvm.hotspot.runtime.ObjectMonitor
                getCurrentWaitingMonitor(): sun.jvm.hotspot.runtime.ObjectMonitor
                isLockOwned(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isInStack(arg0: sun.jvm.hotspot.debugger.Address): boolean
                threadObjectAddress(): sun.jvm.hotspot.debugger.Address
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Thread$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JavaThread extends sun.jvm.hotspot.runtime.Thread {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                setThreadPDAccess(arg0: sun.jvm.hotspot.runtime.JavaThreadPDAccess): void
                next(): sun.jvm.hotspot.runtime.JavaThread
                isJavaThread(): boolean
                static getAnchorField(): sun.jvm.hotspot.types.AddressField
                getLastJavaSP(): sun.jvm.hotspot.debugger.Address
                getLastJavaPC(): sun.jvm.hotspot.debugger.Address
                getLastJavaFP(): sun.jvm.hotspot.debugger.Address
                getBaseOfStackPointer(): sun.jvm.hotspot.debugger.Address
                hasLastJavaFrame(): boolean
                getLastFrame(): sun.jvm.hotspot.runtime.Frame
                protected getLastFramePD(): sun.jvm.hotspot.runtime.Frame
                getLastJavaVFrame(arg0: sun.jvm.hotspot.runtime.RegisterMap): sun.jvm.hotspot.runtime.JavaVFrame
                getLastJavaVFrameDbg(): sun.jvm.hotspot.runtime.JavaVFrame
                newRegisterMap(arg0: boolean): sun.jvm.hotspot.runtime.RegisterMap
                getCurrentFrameGuess(): sun.jvm.hotspot.runtime.Frame
                printThreadIDOn(arg0: java.io.PrintStream): void
                printThreadID(): void
                getThreadProxy(): sun.jvm.hotspot.debugger.ThreadProxy
                getThreadState(): sun.jvm.hotspot.runtime.JavaThreadState
                getOSThread(): sun.jvm.hotspot.runtime.OSThread
                getStackBase(): sun.jvm.hotspot.debugger.Address
                getStackBaseValue(): long
                getStackSize(): long
                getThreadObj(): sun.jvm.hotspot.oops.Oop
                getThreadName(): java.lang.String
                oopsDo(arg0: sun.jvm.hotspot.runtime.AddressVisitor): void
                isInStack(arg0: sun.jvm.hotspot.debugger.Address): boolean
                isLockOwned(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getCurrentParkBlocker(): sun.jvm.hotspot.oops.Oop
                printInfoOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class JavaThread$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface ClassConstants {
                static JVM_CONSTANT_Utf8: int
                static JVM_CONSTANT_Unicode: int
                static JVM_CONSTANT_Integer: int
                static JVM_CONSTANT_Float: int
                static JVM_CONSTANT_Long: int
                static JVM_CONSTANT_Double: int
                static JVM_CONSTANT_Class: int
                static JVM_CONSTANT_String: int
                static JVM_CONSTANT_Fieldref: int
                static JVM_CONSTANT_Methodref: int
                static JVM_CONSTANT_InterfaceMethodref: int
                static JVM_CONSTANT_NameAndType: int
                static JVM_CONSTANT_MethodHandle: int
                static JVM_CONSTANT_MethodType: int
                static JVM_CONSTANT_InvokeDynamic: int
                static JVM_REF_getField: int
                static JVM_REF_getStatic: int
                static JVM_REF_putField: int
                static JVM_REF_putStatic: int
                static JVM_REF_invokeVirtual: int
                static JVM_REF_invokeStatic: int
                static JVM_REF_invokeSpecial: int
                static JVM_REF_newInvokeSpecial: int
                static JVM_REF_invokeInterface: int
                static JVM_CONSTANT_Invalid: int
                static JVM_CONSTANT_UnresolvedClass: int
                static JVM_CONSTANT_ClassIndex: int
                static JVM_CONSTANT_StringIndex: int
                static JVM_CONSTANT_UnresolvedClassInError: int
                static JVM_CONSTANT_MethodHandleInError: int
                static JVM_CONSTANT_MethodTypeInError: int
                static MAJOR_VERSION: short
                static MINOR_VERSION: short
                static MAJOR_VERSION_OLD: short
                static MINOR_VERSION_OLD: short
                static JVM_ACC_PUBLIC: long
                static JVM_ACC_PRIVATE: long
                static JVM_ACC_PROTECTED: long
                static JVM_ACC_STATIC: long
                static JVM_ACC_FINAL: long
                static JVM_ACC_SYNCHRONIZED: long
                static JVM_ACC_SUPER: long
                static JVM_ACC_VOLATILE: long
                static JVM_ACC_BRIDGE: long
                static JVM_ACC_TRANSIENT: long
                static JVM_ACC_VARARGS: long
                static JVM_ACC_NATIVE: long
                static JVM_ACC_INTERFACE: long
                static JVM_ACC_ABSTRACT: long
                static JVM_ACC_STRICT: long
                static JVM_ACC_SYNTHETIC: long
                static JVM_ACC_ANNOTATION: long
                static JVM_ACC_ENUM: long
                static JVM_ACC_WRITTEN_FLAGS: long
                static JVM_ACC_MONITOR_MATCH: long
                static JVM_ACC_HAS_MONITOR_BYTECODES: long
                static JVM_ACC_HAS_LOOPS: long
                static JVM_ACC_LOOPS_FLAG_INIT: long
                static JVM_ACC_QUEUED: long
                static JVM_ACC_NOT_OSR_COMPILABLE: long
                static JVM_ACC_HAS_LINE_NUMBER_TABLE: long
                static JVM_ACC_HAS_CHECKED_EXCEPTIONS: long
                static JVM_ACC_HAS_JSRS: long
                static JVM_ACC_IS_OBSOLETE: long
                static JVM_ACC_HAS_MIRANDA_METHODS: long
                static JVM_ACC_HAS_VANILLA_CONSTRUCTOR: long
                static JVM_ACC_HAS_FINALIZER: long
                static JVM_ACC_IS_CLONEABLE: long
                static JVM_ACC_HAS_LOCAL_VARIABLE_TABLE: long
                static JVM_ACC_PROMOTED_FLAGS: long
                static JVM_ACC_FIELD_ACCESS_WATCHED: long
                static JVM_ACC_FIELD_MODIFICATION_WATCHED: long
                static JVM_ACC_FIELD_HAS_GENERIC_SIGNATURE: long
                static JVM_ACC_FIELD_FLAGS: long
                static JVM_RECOGNIZED_CLASS_MODIFIERS: long
                static JVM_RECOGNIZED_FIELD_MODIFIERS: long
                static JVM_RECOGNIZED_METHOD_MODIFIERS: long
            }
            class VMObject {
                protected addr: sun.jvm.hotspot.debugger.Address
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                toString(): java.lang.String
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                getAddress(): sun.jvm.hotspot.debugger.Address
            }
            
         }
         namespace ui {
            namespace treetable {
               class TreeTableModelAdapter extends javax.swing.table.AbstractTableModel {
                   tree: javax.swing.JTree
                   treeTableModel: sun.jvm.hotspot.ui.treetable.TreeTableModel
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.TreeTableModel, arg1: javax.swing.JTree)
                   getColumnCount(): int
                   getColumnName(arg0: int): java.lang.String
                   getColumnClass(arg0: int): java.lang.Class
                   getRowCount(): int
                   protected nodeForRow(arg0: int): java.lang.Object
                   getValueAt(arg0: int, arg1: int): java.lang.Object
                   isCellEditable(arg0: int, arg1: int): boolean
                   setValueAt(arg0: java.lang.Object, arg1: int, arg2: int): void
                   protected delayedFireTableDataChanged(): void
               }
               class TreeTableModelAdapter$3 implements java.lang.Runnable {
                   this$0: sun.jvm.hotspot.ui.treetable.TreeTableModelAdapter
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.TreeTableModelAdapter)
                   run(): void
               }
               class TreeTableModelAdapter$2 implements javax.swing.event.TreeModelListener {
                   this$0: sun.jvm.hotspot.ui.treetable.TreeTableModelAdapter
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.TreeTableModelAdapter)
                   treeNodesChanged(arg0: javax.swing.event.TreeModelEvent): void
                   treeNodesInserted(arg0: javax.swing.event.TreeModelEvent): void
                   treeNodesRemoved(arg0: javax.swing.event.TreeModelEvent): void
                   treeStructureChanged(arg0: javax.swing.event.TreeModelEvent): void
               }
               class TreeTableModelAdapter$1 implements javax.swing.event.TreeExpansionListener {
                   this$0: sun.jvm.hotspot.ui.treetable.TreeTableModelAdapter
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.TreeTableModelAdapter)
                   treeExpanded(arg0: javax.swing.event.TreeExpansionEvent): void
                   treeCollapsed(arg0: javax.swing.event.TreeExpansionEvent): void
               }
               class SimpleTreeTableModel extends sun.jvm.hotspot.ui.tree.SimpleTreeModel implements sun.jvm.hotspot.ui.treetable.TreeTableModel {
                   constructor()
                   getColumnCount(): int
                   getColumnName(arg0: int): java.lang.String
                   getColumnClass(arg0: int): java.lang.Class
                   getValueAt(arg0: java.lang.Object, arg1: int): java.lang.Object
                   isCellEditable(arg0: java.lang.Object, arg1: int): boolean
                   setValueAt(arg0: java.lang.Object, arg1: java.lang.Object, arg2: int): void
                   getValuesEditable(): boolean
                   setValuesEditable(arg0: boolean): void
               }
               class JTreeTable extends javax.swing.JTable {
                   protected tree: sun.jvm.hotspot.ui.treetable.JTreeTable$TreeTableCellRenderer
                   getTreeEditable(): boolean
                   setTreeEditable(arg0: boolean): void
                   getShowsIcons(): boolean
                   setShowsIcons(arg0: boolean): void
                   setRootVisible(arg0: boolean): void
                   getShowsRootHandles(): boolean
                   setShowsRootHandles(arg0: boolean): void
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.TreeTableModel)
                   updateUI(): void
                   getEditingRow(): int
                   sizeColumnsToFit(arg0: int): void
                   setRowHeight(arg0: int): void
                   getTree(): javax.swing.JTree
                   editCellAt(arg0: int, arg1: int, arg2: java.util.EventObject): boolean
                   static access$000(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable): boolean
                   static access$100(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable): int
                   static access$200(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable): boolean
               }
               class JTreeTable$ListToTreeSelectionModelWrapper extends javax.swing.tree.DefaultTreeSelectionModel {
                   protected updatingListSelectionModel: boolean
                   this$0: sun.jvm.hotspot.ui.treetable.JTreeTable
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable)
                   getListSelectionModel(): javax.swing.ListSelectionModel
                   resetRowSelection(): void
                   protected createListSelectionListener(): javax.swing.event.ListSelectionListener
                   protected updateSelectedPathsFromSelectedRows(): void
               }
               class JTreeTable$ListToTreeSelectionModelWrapper$ListSelectionHandler implements javax.swing.event.ListSelectionListener {
                   this$1: sun.jvm.hotspot.ui.treetable.JTreeTable$ListToTreeSelectionModelWrapper
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable$ListToTreeSelectionModelWrapper)
                   valueChanged(arg0: javax.swing.event.ListSelectionEvent): void
               }
               class JTreeTable$TreeTableTextField extends javax.swing.JTextField {
                   offset: int
                   constructor()
                   setBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
               }
               class JTreeTable$TreeTableCellEditor extends javax.swing.DefaultCellEditor {
                   this$0: sun.jvm.hotspot.ui.treetable.JTreeTable
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable)
                   getTableCellEditorComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: int, arg4: int): java.awt.Component
                   isCellEditable(arg0: java.util.EventObject): boolean
               }
               class JTreeTable$TreeTableCellRenderer extends javax.swing.JTree implements javax.swing.table.TableCellRenderer {
                   protected visibleRow: int
                   protected highlightBorder: javax.swing.border.Border
                   this$0: sun.jvm.hotspot.ui.treetable.JTreeTable
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable, arg1: javax.swing.tree.TreeModel)
                   updateUI(): void
                   setRowHeight(arg0: int): void
                   setBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
                   paint(arg0: java.awt.Graphics): void
                   getTableCellRendererComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
               }
               class JTreeTable$JTreeTableCellRenderer extends javax.swing.tree.DefaultTreeCellRenderer {
                   this$0: sun.jvm.hotspot.ui.treetable.JTreeTable
                   constructor(arg0: sun.jvm.hotspot.ui.treetable.JTreeTable)
                   getClosedIcon(): javax.swing.Icon
                   getDefaultClosedIcon(): javax.swing.Icon
                   getDefaultLeafIcon(): javax.swing.Icon
                   getDefaultOpenIcon(): javax.swing.Icon
                   getLeafIcon(): javax.swing.Icon
                   getOpenIcon(): javax.swing.Icon
               }
               interface TreeTableModel extends javax.swing.tree.TreeModel {
                   getColumnCount(): int
                   getColumnName(arg0: int): java.lang.String
                   getColumnClass(arg0: int): java.lang.Class
                   getValueAt(arg0: java.lang.Object, arg1: int): java.lang.Object
                   isCellEditable(arg0: java.lang.Object, arg1: int): boolean
                   setValueAt(arg0: java.lang.Object, arg1: java.lang.Object, arg2: int): void
               }
               abstract class AbstractTreeTableModel implements sun.jvm.hotspot.ui.treetable.TreeTableModel {
                   protected root: java.lang.Object
                   protected listenerList: javax.swing.event.EventListenerList
                   constructor(arg0: java.lang.Object)
                   getRoot(): java.lang.Object
                   isLeaf(arg0: java.lang.Object): boolean
                   valueForPathChanged(arg0: javax.swing.tree.TreePath, arg1: java.lang.Object): void
                   getIndexOfChild(arg0: java.lang.Object, arg1: java.lang.Object): int
                   addTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                   removeTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                   protected fireTreeNodesChanged(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                   protected fireTreeNodesInserted(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                   protected fireTreeNodesRemoved(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                   protected fireTreeStructureChanged(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                   getColumnClass(arg0: int): java.lang.Class
                   isCellEditable(arg0: java.lang.Object, arg1: int): boolean
                   setValueAt(arg0: java.lang.Object, arg1: java.lang.Object, arg2: int): void
               }
               
            }
            namespace action {
               class ThreadInfoAction extends com.sun.java.swing.action.StateChangeAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class ShowAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class MemoryAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class JavaStackTraceAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class InspectAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class HSDBActionManager extends com.sun.java.swing.action.ActionManager {
                   constructor()
                   static getInstance(): com.sun.java.swing.action.ActionManager
                   protected addActions(): void
               }
               class FindCrashesAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_LARGE_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class FindClassesAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               class FindAction extends com.sun.java.swing.action.DelegateAction {
                   static VALUE_COMMAND: java.lang.String
                   static VALUE_NAME: java.lang.String
                   static VALUE_SMALL_ICON: java.lang.String
                   static VALUE_MNEMONIC: java.lang.Integer
                   static VALUE_SHORT_DESCRIPTION: java.lang.String
                   static VALUE_LONG_DESCRIPTION: java.lang.String
                   constructor()
               }
               
            }
            class VMVersionInfoPanel extends javax.swing.JPanel {
                constructor()
            }
            class VMFlagsPanel extends javax.swing.JPanel {
                constructor()
            }
            class SysPropsPanel extends javax.swing.JPanel {
                constructor()
            }
            class StringTransferable implements java.awt.datatransfer.Transferable {
                constructor(arg0: java.lang.String)
                getTransferDataFlavors(): java.awt.datatransfer.DataFlavor[]
                isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                getTransferData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
            }
            class SourceCodePanel extends javax.swing.JPanel {
                constructor()
                setFont(arg0: java.awt.Font): void
                getShowLineNumbers(): boolean
                setShowLineNumbers(arg0: boolean): void
                openFile(arg0: java.lang.String): boolean
                getSourceFileName(): java.lang.String
                getCurrentLineNumber(): int
                showLineNumber(arg0: int): void
                highlightLineNumber(arg0: int): void
                showBreakpointAtLine(arg0: int): void
                hasBreakpointAtLine(arg0: int): boolean
                clearBreakpointAtLine(arg0: int): void
                clearBreakpoints(): void
                setEditorCommands(arg0: sun.jvm.hotspot.ui.EditorCommands, arg1: sun.jvm.hotspot.ui.Editor): void
                requestFocus(): void
                static access$000(arg0: sun.jvm.hotspot.ui.SourceCodePanel): java.util.Set
                static access$100(): javax.swing.Icon
                static access$200(arg0: sun.jvm.hotspot.ui.SourceCodePanel): int
                static access$300(): javax.swing.Icon
                static access$400(arg0: sun.jvm.hotspot.ui.SourceCodePanel): javax.swing.JTextArea
                static access$500(arg0: sun.jvm.hotspot.ui.SourceCodePanel): sun.jvm.hotspot.ui.Editor
                static access$600(arg0: sun.jvm.hotspot.ui.SourceCodePanel): sun.jvm.hotspot.ui.EditorCommands
            }
            class SourceCodePanel$2 extends java.awt.event.KeyAdapter {
                this$0: sun.jvm.hotspot.ui.SourceCodePanel
                constructor(arg0: sun.jvm.hotspot.ui.SourceCodePanel)
                keyPressed(arg0: java.awt.event.KeyEvent): void
            }
            class SourceCodePanel$1 extends java.awt.event.FocusAdapter {
                this$0: sun.jvm.hotspot.ui.SourceCodePanel
                constructor(arg0: sun.jvm.hotspot.ui.SourceCodePanel)
                focusGained(arg0: java.awt.event.FocusEvent): void
            }
            class SourceCodePanel$RowHeader extends javax.swing.JPanel {
                this$0: sun.jvm.hotspot.ui.SourceCodePanel
                constructor(arg0: sun.jvm.hotspot.ui.SourceCodePanel)
                paint(arg0: java.awt.Graphics): void
                getShowLineNumbers(): boolean
                setShowLineNumbers(arg0: boolean): void
                setFont(arg0: java.awt.Font): void
                setViewport(arg0: javax.swing.JViewport): void
                recomputeSize(): void
            }
            class SourceCodePanel$RowHeader$1 extends java.awt.event.HierarchyBoundsAdapter {
                val$this$0: sun.jvm.hotspot.ui.SourceCodePanel
                this$1: sun.jvm.hotspot.ui.SourceCodePanel$RowHeader
                constructor(arg0: sun.jvm.hotspot.ui.SourceCodePanel$RowHeader, arg1: sun.jvm.hotspot.ui.SourceCodePanel)
                ancestorResized(arg0: java.awt.event.HierarchyEvent): void
            }
            class ProcessListPanel extends javax.swing.JPanel {
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger)
                setAutoUpdateInterval(arg0: int): void
                start(): void
                stop(): void
                void: synchronized
                sun.jvm.hotspot.debugger.ProcessInfo: synchronized
                static access$000(arg0: sun.jvm.hotspot.ui.ProcessListPanel): java.util.List
                static access$100(arg0: sun.jvm.hotspot.ui.ProcessListPanel): javax.swing.JTable
                static access$200(arg0: sun.jvm.hotspot.ui.ProcessListPanel): boolean
                static access$302(arg0: sun.jvm.hotspot.ui.ProcessListPanel, arg1: boolean): boolean
                static access$300(arg0: sun.jvm.hotspot.ui.ProcessListPanel): boolean
                static access$202(arg0: sun.jvm.hotspot.ui.ProcessListPanel, arg1: boolean): boolean
                static access$400(arg0: sun.jvm.hotspot.ui.ProcessListPanel, arg1: java.util.List, arg2: int): int
                static access$500(arg0: sun.jvm.hotspot.ui.ProcessListPanel, arg1: java.util.List): void
                static access$600(arg0: sun.jvm.hotspot.ui.ProcessListPanel, arg1: java.util.List, arg2: int): int
                static access$700(arg0: sun.jvm.hotspot.ui.ProcessListPanel): javax.swing.table.AbstractTableModel
            }
            class ProcessListPanel$5 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.ProcessListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ProcessListPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class ProcessListPanel$4 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.ui.ProcessListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ProcessListPanel)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class ProcessListPanel$3 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.ui.ProcessListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ProcessListPanel)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class ProcessListPanel$2 extends java.awt.event.MouseAdapter {
                this$0: sun.jvm.hotspot.ui.ProcessListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ProcessListPanel)
                mousePressed(arg0: java.awt.event.MouseEvent): void
            }
            class ProcessListPanel$1 extends javax.swing.table.AbstractTableModel {
                this$0: sun.jvm.hotspot.ui.ProcessListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ProcessListPanel)
                getColumnCount(): int
                getRowCount(): int
                getColumnName(arg0: int): java.lang.String
                getValueAt(arg0: int, arg1: int): java.lang.Object
            }
            class ObjectListPanel extends sun.jvm.hotspot.ui.SAPanel {
                constructor(arg0: java.util.List, arg1: sun.jvm.hotspot.utilities.HeapProgressThunk)
                static access$000(arg0: sun.jvm.hotspot.ui.ObjectListPanel): void
                static access$100(arg0: sun.jvm.hotspot.ui.ObjectListPanel): void
                static access$200(arg0: sun.jvm.hotspot.ui.ObjectListPanel): void
                static access$300(arg0: sun.jvm.hotspot.ui.ObjectListPanel): java.util.List
                static access$400(arg0: sun.jvm.hotspot.ui.ObjectListPanel): int
                static access$500(arg0: sun.jvm.hotspot.ui.ObjectListPanel): boolean
                static access$700(arg0: sun.jvm.hotspot.ui.ObjectListPanel): java.awt.event.ActionListener
                static access$800(arg0: sun.jvm.hotspot.ui.ObjectListPanel): javax.swing.JButton
                static access$702(arg0: sun.jvm.hotspot.ui.ObjectListPanel, arg1: java.awt.event.ActionListener): java.awt.event.ActionListener
                static access$900(arg0: sun.jvm.hotspot.ui.ObjectListPanel): void
                static access$1000(arg0: sun.jvm.hotspot.ui.ObjectListPanel): sun.jvm.hotspot.ui.ObjectListPanel$ObjectListTableModel
                static access$1100(arg0: sun.jvm.hotspot.ui.ObjectListPanel): sun.jvm.hotspot.utilities.HeapProgressThunk
            }
            class ObjectListPanel$5 implements java.lang.Runnable {
                val$cutoverButtonRunnable: java.lang.Runnable
                val$worker: sun.jvm.hotspot.utilities.WorkerThread
                this$0: sun.jvm.hotspot.ui.ObjectListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel, arg1: java.lang.Runnable, arg2: sun.jvm.hotspot.utilities.WorkerThread)
                run(): void
            }
            class ObjectListPanel$4 implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.ui.ObjectListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel)
                run(): void
            }
            class ObjectListPanel$4$1 implements java.awt.event.ActionListener {
                this$1: sun.jvm.hotspot.ui.ObjectListPanel$4
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel$4)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class ObjectListPanel$ObjectListTableModel extends sun.jvm.hotspot.ui.table.SortableTableModel {
                this$0: sun.jvm.hotspot.ui.ObjectListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel)
                getColumnCount(): int
                getRowCount(): int
                getColumnName(arg0: int): java.lang.String
                getValueAt(arg0: int, arg1: int): java.lang.Object
                getValueForColumn(arg0: sun.jvm.hotspot.oops.Oop, arg1: int): java.lang.Object
            }
            class ObjectListPanel$ObjectListTableModel$ObjectListComparator extends sun.jvm.hotspot.ui.table.TableModelComparator {
                this$1: sun.jvm.hotspot.ui.ObjectListPanel$ObjectListTableModel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel$ObjectListTableModel, arg1: sun.jvm.hotspot.ui.ObjectListPanel$ObjectListTableModel)
                getValueForColumn(arg0: java.lang.Object, arg1: int): java.lang.Object
            }
            class ObjectListPanel$AddressWrapper implements java.lang.Comparable {
                toString(): java.lang.String
                compareTo(arg0: java.lang.Object): int
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.ui.ObjectListPanel$1)
            }
            class ObjectListPanel$3 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.ObjectListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class ObjectListPanel$2 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.ObjectListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class ObjectListPanel$1 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.ObjectListPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectListPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MonitorCacheDumpPanel extends javax.swing.JPanel {
                constructor()
            }
            class MemoryViewer extends javax.swing.JPanel {
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger, arg1: boolean)
            }
            class MemoryViewer$1 implements java.awt.event.ActionListener {
                val$memory: sun.jvm.hotspot.ui.MemoryPanel
                val$debugger: sun.jvm.hotspot.debugger.Debugger
                val$addressField: javax.swing.JTextField
                this$0: sun.jvm.hotspot.ui.MemoryViewer
                constructor(arg0: sun.jvm.hotspot.ui.MemoryViewer, arg1: sun.jvm.hotspot.ui.MemoryPanel, arg2: sun.jvm.hotspot.debugger.Debugger, arg3: javax.swing.JTextField)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel extends javax.swing.JPanel {
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger, arg1: boolean)
                makeVisible(arg0: sun.jvm.hotspot.debugger.Address): void
                static access$000(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$100(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$200(arg0: sun.jvm.hotspot.ui.MemoryPanel): java.math.BigInteger
                static access$300(arg0: sun.jvm.hotspot.ui.MemoryPanel, arg1: java.math.BigInteger): java.lang.String
                static access$400(arg0: sun.jvm.hotspot.ui.MemoryPanel, arg1: java.math.BigInteger): sun.jvm.hotspot.debugger.Address
                static access$500(arg0: sun.jvm.hotspot.ui.MemoryPanel, arg1: sun.jvm.hotspot.debugger.Address): java.lang.String
                static access$600(arg0: sun.jvm.hotspot.ui.MemoryPanel): java.lang.String
                static access$700(arg0: sun.jvm.hotspot.ui.MemoryPanel): boolean
                static access$800(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$900(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$1000(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$1100(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$1200(arg0: sun.jvm.hotspot.ui.MemoryPanel): javax.swing.table.AbstractTableModel
                static access$1300(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$1400(arg0: sun.jvm.hotspot.ui.MemoryPanel): javax.swing.JTable
                static access$1500(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$1600(arg0: sun.jvm.hotspot.ui.MemoryPanel): sun.jvm.hotspot.ui.HighPrecisionJScrollBar
                static access$1700(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$1800(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$1900(arg0: sun.jvm.hotspot.ui.MemoryPanel): int
                static access$2000(arg0: sun.jvm.hotspot.ui.MemoryPanel): boolean
                static access$2100(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$2200(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$2300(arg0: sun.jvm.hotspot.ui.MemoryPanel, arg1: int, arg2: int, arg3: int, arg4: int): void
                static access$2400(arg0: sun.jvm.hotspot.ui.MemoryPanel, arg1: java.awt.event.MouseEvent): boolean
                static access$2500(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$2600(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
                static access$2700(arg0: sun.jvm.hotspot.ui.MemoryPanel): void
            }
            class MemoryPanel$17 implements javax.swing.event.ChangeListener {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                stateChanged(arg0: javax.swing.event.ChangeEvent): void
            }
            class MemoryPanel$16 implements java.awt.event.HierarchyListener {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                hierarchyChanged(arg0: java.awt.event.HierarchyEvent): void
            }
            class MemoryPanel$15 extends java.awt.event.ComponentAdapter {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                componentResized(arg0: java.awt.event.ComponentEvent): void
            }
            class MemoryPanel$14 extends java.awt.event.MouseMotionAdapter {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                mouseDragged(arg0: java.awt.event.MouseEvent): void
            }
            class MemoryPanel$13 extends java.awt.event.MouseAdapter {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                mousePressed(arg0: java.awt.event.MouseEvent): void
            }
            class MemoryPanel$12 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$11 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$10 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$9 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$8 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$7 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$6 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$5 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$4 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$3 extends sun.jvm.hotspot.ui.MemoryPanel$ActionWrapper {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class MemoryPanel$2 extends javax.swing.TransferHandler {
                val$debugger: sun.jvm.hotspot.debugger.Debugger
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel, arg1: sun.jvm.hotspot.debugger.Debugger)
                protected createTransferable(arg0: javax.swing.JComponent): java.awt.datatransfer.Transferable
                getSourceActions(arg0: javax.swing.JComponent): int
                importData(arg0: javax.swing.JComponent, arg1: java.awt.datatransfer.Transferable): boolean
                canImport(arg0: javax.swing.JComponent, arg1: java.awt.datatransfer.DataFlavor[]): boolean
            }
            class MemoryPanel$1 extends javax.swing.table.AbstractTableModel {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                getRowCount(): int
                getColumnCount(): int
                getValueAt(arg0: int, arg1: int): java.lang.Object
                isCellEditable(arg0: int, arg1: int): boolean
            }
            abstract class MemoryPanel$ActionWrapper extends javax.swing.AbstractAction {
                this$0: sun.jvm.hotspot.ui.MemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.MemoryPanel)
                setParent(arg0: javax.swing.Action): void
                getParent(): javax.swing.Action
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class ThreadInfoPanel extends javax.swing.JPanel {
                constructor()
                constructor(arg0: sun.jvm.hotspot.runtime.JavaThread)
                setJavaThread(arg0: sun.jvm.hotspot.runtime.JavaThread): void
            }
            class JavaThreadsPanel extends sun.jvm.hotspot.ui.SAPanel implements java.awt.event.ActionListener {
                constructor()
                actionPerformed(arg0: java.awt.event.ActionEvent): void
                protected registerActions(): void
                static access$000(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel): void
                static access$100(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel): void
                static access$200(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel): void
                static access$800(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel): sun.jvm.hotspot.ui.JavaThreadsPanel$JavaThreadsTableModel
                static access$900(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel): java.util.List
            }
            class JavaThreadsPanel$CachedThread {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel, arg1: sun.jvm.hotspot.runtime.JavaThread)
                getThread(): sun.jvm.hotspot.runtime.JavaThread
                getThreadID(): java.lang.String
                getThreadName(): java.lang.String
            }
            class JavaThreadsPanel$JavaThreadsTableModel extends javax.swing.table.AbstractTableModel {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel, arg1: java.util.List)
                getColumnCount(): int
                getRowCount(): int
                getColumnName(arg0: int): java.lang.String
                getValueAt(arg0: int, arg1: int): java.lang.Object
                getJavaThread(arg0: int): sun.jvm.hotspot.runtime.JavaThread
            }
            class JavaThreadsPanel$JavaThreadsColumnModel extends javax.swing.table.DefaultTableColumnModel {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel)
            }
            class JavaThreadsPanel$JavaThreadsToolBar extends com.sun.java.swing.ui.CommonToolBar {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel, arg1: com.sun.java.swing.ui.StatusBar)
                protected addComponents(): void
            }
            class JavaThreadsPanel$ThreadPanel extends javax.swing.JPanel {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel, arg1: javax.swing.JTable)
                static access$300(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel): void
                static access$400(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel): void
                static access$500(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel, arg1: boolean): void
                static access$600(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel): boolean
                static access$700(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel): void
            }
            class JavaThreadsPanel$ThreadPanel$2 implements javax.swing.event.ListSelectionListener {
                val$this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                this$1: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel, arg1: sun.jvm.hotspot.ui.JavaThreadsPanel)
                valueChanged(arg0: javax.swing.event.ListSelectionEvent): void
            }
            class JavaThreadsPanel$ThreadPanel$1 implements java.awt.event.ItemListener {
                val$this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                this$1: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel$ThreadPanel, arg1: sun.jvm.hotspot.ui.JavaThreadsPanel)
                itemStateChanged(arg0: java.awt.event.ItemEvent): void
            }
            class JavaThreadsPanel$3 extends java.awt.event.MouseAdapter {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel)
                mouseClicked(arg0: java.awt.event.MouseEvent): void
            }
            class JavaThreadsPanel$2 implements java.util.Observer {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel)
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JavaThreadsPanel$1 implements java.util.Observer {
                this$0: sun.jvm.hotspot.ui.JavaThreadsPanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaThreadsPanel)
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            namespace classbrowser {
               class CodeViewerPanel extends javax.swing.JPanel {
                   protected contentEditor: sun.jvm.hotspot.ui.SAEditorPane
                   protected address: sun.jvm.hotspot.ui.HistoryComboBox
                   protected htmlGen: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
                   protected scrollPane: javax.swing.JScrollPane
                   constructor()
                   viewAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                   static access$000(arg0: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel): void
               }
               class CodeViewerPanel$2 implements java.awt.event.ActionListener {
                   this$0: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel
                   constructor(arg0: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel)
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
               }
               class CodeViewerPanel$1 implements javax.swing.event.HyperlinkListener {
                   this$0: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel
                   constructor(arg0: sun.jvm.hotspot.ui.classbrowser.CodeViewerPanel)
                   hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
               }
               class ClassBrowserPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
                   constructor()
                   setClassesText(arg0: java.lang.String): void
                   setContentText(arg0: java.lang.String): void
                   actionPerformed(arg0: java.awt.event.ActionEvent): void
                   protected registerActions(): void
                   static access$000(arg0: sun.jvm.hotspot.ui.classbrowser.ClassBrowserPanel): sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
                   static access$100(arg0: sun.jvm.hotspot.ui.classbrowser.ClassBrowserPanel): sun.jvm.hotspot.ui.SAEditorPane
               }
               class ClassBrowserPanel$ClassBrowserToolBar extends com.sun.java.swing.ui.CommonToolBar {
                   this$0: sun.jvm.hotspot.ui.classbrowser.ClassBrowserPanel
                   constructor(arg0: sun.jvm.hotspot.ui.classbrowser.ClassBrowserPanel, arg1: com.sun.java.swing.ui.StatusBar)
                   protected addComponents(): void
                   getFindText(): java.lang.String
               }
               class ClassBrowserPanel$1 implements javax.swing.event.HyperlinkListener {
                   this$0: sun.jvm.hotspot.ui.classbrowser.ClassBrowserPanel
                   constructor(arg0: sun.jvm.hotspot.ui.classbrowser.ClassBrowserPanel)
                   hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
               }
               class HTMLGenerator implements sun.jvm.hotspot.runtime.ClassConstants {
                   constructor()
                   constructor(arg0: boolean)
                   protected escapeHTMLSpecialChars(arg0: java.lang.String): java.lang.String
                   genHTMLForMessage(arg0: java.lang.String): java.lang.String
                   genHTMLErrorMessage(arg0: java.lang.Exception): java.lang.String
                   genHTMLForWait(arg0: java.lang.String): java.lang.String
                   protected genKlassTitle(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genBaseHref(): java.lang.String
                   protected genKlassHref(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genKlassLink(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genMethodModifierString(arg0: sun.jvm.hotspot.oops.AccessFlags): java.lang.String
                   protected genMethodNameAndSignature(arg0: sun.jvm.hotspot.oops.Method): java.lang.String
                   protected genMethodTitle(arg0: sun.jvm.hotspot.oops.Method): java.lang.String
                   protected genMethodHref(arg0: sun.jvm.hotspot.oops.Method): java.lang.String
                   protected genMethodLink(arg0: sun.jvm.hotspot.oops.Method): java.lang.String
                   protected genMethodAndKlassLink(arg0: sun.jvm.hotspot.oops.Method): java.lang.String
                   protected genNMethodHref(arg0: sun.jvm.hotspot.code.NMethod): java.lang.String
                   genNMethodTitle(arg0: sun.jvm.hotspot.code.NMethod): java.lang.String
                   protected genNMethodLink(arg0: sun.jvm.hotspot.code.NMethod): java.lang.String
                   genCodeBlobTitle(arg0: sun.jvm.hotspot.code.CodeBlob): java.lang.String
                   protected createBytecodeDisassembler(arg0: sun.jvm.hotspot.oops.Method): sun.jvm.hotspot.interpreter.BytecodeDisassembler
                   protected genHTMLTableForConstantPool(arg0: sun.jvm.hotspot.oops.ConstantPool): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.oops.ConstantPool): java.lang.String
                   protected genConstantPoolHref(arg0: sun.jvm.hotspot.oops.ConstantPool): java.lang.String
                   protected genConstantPoolTitle(arg0: sun.jvm.hotspot.oops.ConstantPool): java.lang.String
                   protected genConstantPoolLink(arg0: sun.jvm.hotspot.oops.ConstantPool): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.oops.Method): java.lang.String
                   protected createSymbolFinder(): sun.jvm.hotspot.asm.SymbolFinder
                   genHTMLForAddress(arg0: java.lang.String): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.debugger.Address): java.lang.String
                   genHTMLForRawDisassembly(arg0: sun.jvm.hotspot.debugger.Address, arg1: int): java.lang.String
                   protected genHTMLForRawDisassembly(arg0: sun.jvm.hotspot.debugger.Address, arg1: java.lang.String): java.lang.String
                   protected genPCHref(arg0: long): java.lang.String
                   protected genMultPCHref(arg0: java.lang.String): java.lang.String
                   protected genPCHref(arg0: sun.jvm.hotspot.debugger.Address): java.lang.String
                   protected genHTMLForRawDisassembly(arg0: sun.jvm.hotspot.debugger.Address, arg1: int, arg2: java.lang.String): java.lang.String
                   protected genSafepointInfo(arg0: sun.jvm.hotspot.code.NMethod, arg1: sun.jvm.hotspot.code.ScopeDesc): java.lang.String
                   protected genScope(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter, arg1: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter, arg2: sun.jvm.hotspot.code.ScopeDesc): void
                   protected genScObjInfo(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter, arg1: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter, arg2: sun.jvm.hotspot.code.ScopeDesc): void
                   protected genHTMLForOopMap(arg0: sun.jvm.hotspot.compiler.OopMap): java.lang.String
                   protected genOopMapInfo(arg0: sun.jvm.hotspot.code.NMethod, arg1: sun.jvm.hotspot.code.PCDesc): java.lang.String
                   protected genOopMapInfo(arg0: sun.jvm.hotspot.compiler.OopMap): java.lang.String
                   protected locationAsString(arg0: sun.jvm.hotspot.code.Location): java.lang.String
                   protected genHTMLForScopeValues(arg0: sun.jvm.hotspot.code.ScopeDesc, arg1: boolean, arg2: java.util.List): java.lang.String
                   protected genHTMLForLocals(arg0: sun.jvm.hotspot.code.ScopeDesc, arg1: java.util.List): java.lang.String
                   protected genHTMLForExpressions(arg0: sun.jvm.hotspot.code.ScopeDesc, arg1: java.util.List): java.lang.String
                   protected genHTMLForMonitors(arg0: sun.jvm.hotspot.code.ScopeDesc, arg1: java.util.List): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.code.NMethod): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.code.CodeBlob): java.lang.String
                   protected genInterpreterCodeletTitle(arg0: sun.jvm.hotspot.interpreter.InterpreterCodelet): java.lang.String
                   protected genInterpreterCodeletLinkPageHref(arg0: sun.jvm.hotspot.code.StubQueue): java.lang.String
                   genInterpreterCodeletLinksPage(): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.interpreter.InterpreterCodelet): java.lang.String
                   protected genDumpKlassesTitle(arg0: sun.jvm.hotspot.oops.InstanceKlass[]): java.lang.String
                   protected genDumpKlassesHref(arg0: sun.jvm.hotspot.oops.InstanceKlass[]): java.lang.String
                   protected genDumpKlassesLink(arg0: sun.jvm.hotspot.oops.InstanceKlass[]): java.lang.String
                   genHTMLForKlassNames(arg0: sun.jvm.hotspot.oops.InstanceKlass[]): java.lang.String
                   protected genHTMLListForKlassNames(arg0: sun.jvm.hotspot.oops.InstanceKlass[]): java.lang.String
                   genHTMLForMethodNames(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genHTMLListForMethods(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genHTMLListForInterfaces(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genFieldModifierString(arg0: sun.jvm.hotspot.oops.AccessFlags): java.lang.String
                   genHTMLForFieldNames(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genHTMLListForFields(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genKlassHierarchyHref(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genKlassHierarchyTitle(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genKlassHierarchyLink(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genHTMLListForSubKlasses(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   genHTMLForKlassHierarchy(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genDumpKlassHref(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genDumpKlassLink(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   genHTML(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   protected addressToLong(arg0: sun.jvm.hotspot.debugger.Address): long
                   protected longToAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   protected getOopAtAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.oops.Oop
                   protected getOopAtAddress(arg0: java.lang.String): sun.jvm.hotspot.oops.Oop
                   protected getKlassAtAddress(arg0: java.lang.String): sun.jvm.hotspot.oops.Klass
                   protected getMethodAtAddress(arg0: java.lang.String): sun.jvm.hotspot.oops.Method
                   protected getConstantPoolAtAddress(arg0: java.lang.String): sun.jvm.hotspot.oops.ConstantPool
                   genDumpKlass(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.String
                   protected genJavaStackTraceTitle(arg0: sun.jvm.hotspot.runtime.JavaThread): java.lang.String
                   genHTMLForJavaStackTrace(arg0: sun.jvm.hotspot.runtime.JavaThread): java.lang.String
                   genHTMLForHyperlink(arg0: java.lang.String): java.lang.String
                   static access$000(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator): java.lang.String
                   static access$100(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator): java.lang.String
                   static access$200(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator): boolean
               }
               class HTMLGenerator$1OopMapValueIterator {
                   val$stack0: int
                   this$0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
                   constructor()
                   iterate(arg0: sun.jvm.hotspot.compiler.OopMapStream, arg1: java.lang.String, arg2: boolean): sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter
               }
               class HTMLGenerator$HTMLDisassembler implements sun.jvm.hotspot.asm.InstructionVisitor {
                   this$0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
                   constructor(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator, arg1: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter, arg2: sun.jvm.hotspot.code.CodeBlob)
                   getInstructionSize(): int
                   prologue(): void
                   beginInstruction(arg0: long): void
                   printAddress(arg0: long): void
                   print(arg0: java.lang.String): void
                   endInstruction(arg0: long): void
                   epilogue(): void
               }
               class HTMLGenerator$1 implements sun.jvm.hotspot.interpreter.BytecodeVisitor {
                   val$buf: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter
                   val$hasLineNumbers: boolean
                   this$0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
                   constructor(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator, arg1: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter, arg2: boolean)
                   prologue(arg0: sun.jvm.hotspot.oops.Method): void
                   visit(arg0: sun.jvm.hotspot.interpreter.Bytecode): void
                   epilogue(): void
               }
               class HTMLGenerator$Formatter {
                   html: boolean
                   buf: java.lang.StringBuffer
                   constructor(arg0: boolean)
                   append(arg0: java.lang.String): void
                   append(arg0: int): void
                   append(arg0: char): void
                   append(arg0: java.lang.StringBuffer): void
                   append(arg0: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator$Formatter): void
                   getBuffer(): java.lang.StringBuffer
                   toString(): java.lang.String
                   wrap(arg0: java.lang.String, arg1: java.lang.String): void
                   wrap(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   h1(arg0: java.lang.String): void
                   h2(arg0: java.lang.String): void
                   h3(arg0: java.lang.String): void
                   h4(arg0: java.lang.String): void
                   beginList(): void
                   endList(): void
                   beginListItem(): void
                   endListItem(): void
                   li(arg0: java.lang.String): void
                   beginTable(arg0: int): void
                   cell(arg0: java.lang.String): void
                   headerCell(arg0: java.lang.String): void
                   endTable(): void
                   link(arg0: java.lang.String, arg1: java.lang.String): void
                   beginTag(arg0: java.lang.String): void
                   endTag(arg0: java.lang.String): void
                   bold(arg0: java.lang.String): void
                   nl(): void
                   br(): void
                   genEmptyHTML(): void
                   genHTMLPrologue(): void
                   genHTMLPrologue(arg0: java.lang.String): void
                   genHTMLEpilogue(): void
               }
               
            }
            class JavaStackTracePanel extends javax.swing.JPanel {
                constructor()
                setJavaThread(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                static access$000(arg0: sun.jvm.hotspot.ui.JavaStackTracePanel): sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
                static access$100(arg0: sun.jvm.hotspot.ui.JavaStackTracePanel, arg1: java.lang.String): void
            }
            class JavaStackTracePanel$1 implements javax.swing.event.HyperlinkListener {
                this$0: sun.jvm.hotspot.ui.JavaStackTracePanel
                constructor(arg0: sun.jvm.hotspot.ui.JavaStackTracePanel)
                hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
            }
            class JInternalFrameWrapper implements sun.jvm.hotspot.ui.FrameWrapper {
                constructor(arg0: javax.swing.JInternalFrame)
                getComponent(): java.awt.Component
                getContentPane(): java.awt.Container
                setVisible(arg0: boolean): void
                setSize(arg0: int, arg1: int): void
                pack(): void
                show(): void
                dispose(): void
                setBackground(arg0: java.awt.Color): void
                setResizable(arg0: boolean): void
                setClosable(arg0: boolean): void
                setClosingActionListener(arg0: java.awt.event.ActionListener): void
                setActivatedActionListener(arg0: java.awt.event.ActionListener): void
                toFront(): void
                static access$000(arg0: sun.jvm.hotspot.ui.JInternalFrameWrapper): java.awt.event.ActionListener
                static access$100(arg0: sun.jvm.hotspot.ui.JInternalFrameWrapper): java.awt.event.ActionListener
            }
            class JInternalFrameWrapper$1 extends javax.swing.event.InternalFrameAdapter {
                this$0: sun.jvm.hotspot.ui.JInternalFrameWrapper
                constructor(arg0: sun.jvm.hotspot.ui.JInternalFrameWrapper)
                internalFrameClosing(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameActivated(arg0: javax.swing.event.InternalFrameEvent): void
            }
            class JFrameWrapper implements sun.jvm.hotspot.ui.FrameWrapper {
                constructor(arg0: javax.swing.JFrame)
                getComponent(): java.awt.Component
                getContentPane(): java.awt.Container
                setVisible(arg0: boolean): void
                setSize(arg0: int, arg1: int): void
                pack(): void
                show(): void
                dispose(): void
                setBackground(arg0: java.awt.Color): void
                setResizable(arg0: boolean): void
                setClosable(arg0: boolean): void
                setClosingActionListener(arg0: java.awt.event.ActionListener): void
                setActivatedActionListener(arg0: java.awt.event.ActionListener): void
                toFront(): void
                static access$000(arg0: sun.jvm.hotspot.ui.JFrameWrapper): java.awt.event.ActionListener
                static access$100(arg0: sun.jvm.hotspot.ui.JFrameWrapper): java.awt.event.ActionListener
            }
            class JFrameWrapper$1 extends java.awt.event.WindowAdapter {
                this$0: sun.jvm.hotspot.ui.JFrameWrapper
                constructor(arg0: sun.jvm.hotspot.ui.JFrameWrapper)
                windowClosing(arg0: java.awt.event.WindowEvent): void
                windowActivated(arg0: java.awt.event.WindowEvent): void
            }
            class Inspector extends sun.jvm.hotspot.ui.SAPanel {
                constructor()
                constructor(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode)
                static access$000(arg0: sun.jvm.hotspot.ui.Inspector): sun.jvm.hotspot.ui.HistoryComboBox
                static access$100(arg0: sun.jvm.hotspot.ui.Inspector): sun.jvm.hotspot.oops.Oop
                static access$200(arg0: sun.jvm.hotspot.ui.Inspector): void
                static access$300(arg0: sun.jvm.hotspot.ui.Inspector): void
                static access$102(arg0: sun.jvm.hotspot.ui.Inspector, arg1: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                static access$400(arg0: sun.jvm.hotspot.ui.Inspector): javax.swing.JLabel
                static access$502(arg0: sun.jvm.hotspot.ui.Inspector, arg1: sun.jvm.hotspot.utilities.LivenessPathList): sun.jvm.hotspot.utilities.LivenessPathList
                static access$600(arg0: sun.jvm.hotspot.ui.Inspector): javax.swing.JButton
                static access$700(arg0: sun.jvm.hotspot.ui.Inspector): java.awt.event.ActionListener
                static access$800(arg0: sun.jvm.hotspot.ui.Inspector): java.awt.event.ActionListener
                static access$900(arg0: sun.jvm.hotspot.ui.Inspector): javax.swing.JLabel
                static access$1000(arg0: sun.jvm.hotspot.ui.Inspector, arg1: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
                static access$1100(arg0: sun.jvm.hotspot.ui.Inspector): javax.swing.JTree
                static access$500(arg0: sun.jvm.hotspot.ui.Inspector): sun.jvm.hotspot.utilities.LivenessPathList
            }
            class Inspector$8 implements java.lang.Runnable {
                val$cutoverButtonRunnable: java.lang.Runnable
                val$worker: sun.jvm.hotspot.utilities.WorkerThread
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector, arg1: java.lang.Runnable, arg2: sun.jvm.hotspot.utilities.WorkerThread)
                run(): void
            }
            class Inspector$7 implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector)
                run(): void
            }
            class Inspector$6 implements java.lang.Runnable {
                val$root: sun.jvm.hotspot.ui.tree.SimpleTreeNode
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector, arg1: sun.jvm.hotspot.ui.tree.SimpleTreeNode)
                run(): void
            }
            class Inspector$5 extends java.awt.event.MouseAdapter {
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector)
                mousePressed(arg0: java.awt.event.MouseEvent): void
            }
            class Inspector$4 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class Inspector$3 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class Inspector$2 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class Inspector$1 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.Inspector
                constructor(arg0: sun.jvm.hotspot.ui.Inspector)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class HeapParametersPanel extends javax.swing.JPanel {
                constructor()
            }
            class GraphicsUtilities {
                static random: java.util.Random
                constructor()
                static lookupFont(arg0: java.lang.String): java.awt.Font
                static getStringBounds(arg0: java.lang.String, arg1: java.awt.Graphics): java.awt.geom.Rectangle2D
                static getStringWidth(arg0: java.lang.String, arg1: java.awt.FontMetrics): int
                static reshapeToAspectRatio(arg0: java.awt.Component, arg1: float, arg2: float, arg3: java.awt.Dimension): void
                static constrainToSize(arg0: java.awt.Component, arg1: java.awt.Dimension): void
                static centerInContainer(arg0: java.awt.Component): void
                static centerInContainer(arg0: java.awt.Component, arg1: java.awt.Dimension): void
                static moveToInContainer(arg0: java.awt.Component, arg1: float, arg2: float, arg3: int, arg4: int): void
                static randomLocation(arg0: java.awt.Component): void
                static randomLocation(arg0: java.awt.Component, arg1: java.awt.Dimension): void
                static newBorder(arg0: int): javax.swing.border.Border
            }
            interface FrameWrapper {
                getComponent(): java.awt.Component
                getContentPane(): java.awt.Container
                setVisible(arg0: boolean): void
                setSize(arg0: int, arg1: int): void
                pack(): void
                dispose(): void
                setBackground(arg0: java.awt.Color): void
                setResizable(arg0: boolean): void
                setClosable(arg0: boolean): void
                setClosingActionListener(arg0: java.awt.event.ActionListener): void
                setActivatedActionListener(arg0: java.awt.event.ActionListener): void
                toFront(): void
            }
            class FindPanel extends javax.swing.JPanel {
                constructor()
                static access$000(arg0: sun.jvm.hotspot.ui.FindPanel): javax.swing.JTextField
                static access$100(arg0: sun.jvm.hotspot.ui.FindPanel): void
                static access$200(arg0: sun.jvm.hotspot.ui.FindPanel): javax.swing.JTextArea
                static access$300(arg0: sun.jvm.hotspot.ui.FindPanel): javax.swing.JLabel
            }
            class FindPanel$1 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.FindPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class FindInHeapPanel extends javax.swing.JPanel {
                static minUpdateFraction: double
                constructor()
                static access$002(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: long): long
                static access$102(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: long): long
                static access$202(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: double): double
                static access$302(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: java.util.ArrayList): java.util.ArrayList
                static access$400(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): sun.jvm.hotspot.debugger.Address
                static access$500(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static access$100(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): long
                static access$600(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): long
                static access$700(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): void
                static access$800(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): javax.swing.JButton
                static access$900(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): void
                static access$1000(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): sun.jvm.hotspot.ui.HistoryComboBox
                static access$402(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                static access$1100(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): sun.jvm.hotspot.oops.RawHeapVisitor
                static access$1200(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): javax.swing.JTextArea
                static access$1300(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): void
                static access$1400(arg0: sun.jvm.hotspot.ui.FindInHeapPanel): sun.jvm.hotspot.ui.ProgressBarPanel
            }
            class FindInHeapPanel$5 implements java.lang.Runnable {
                val$frac: double
                this$0: sun.jvm.hotspot.ui.FindInHeapPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel, arg1: double)
                run(): void
            }
            class FindInHeapPanel$4 implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.ui.FindInHeapPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel)
                run(): void
            }
            class FindInHeapPanel$3 implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.ui.FindInHeapPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel)
                run(): void
            }
            class FindInHeapPanel$2 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.FindInHeapPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class FindInHeapPanel$2$1 implements java.lang.Runnable {
                this$1: sun.jvm.hotspot.ui.FindInHeapPanel$2
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel$2)
                run(): void
            }
            class FindInHeapPanel$2$1$1 implements java.lang.Runnable {
                this$2: sun.jvm.hotspot.ui.FindInHeapPanel$2$1
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel$2$1)
                run(): void
            }
            class FindInHeapPanel$1 implements sun.jvm.hotspot.oops.RawHeapVisitor {
                error: boolean
                this$0: sun.jvm.hotspot.ui.FindInHeapPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInHeapPanel)
                prologue(arg0: long): void
                visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                epilogue(): void
            }
            class SAEditorPane extends javax.swing.JEditorPane {
                constructor()
                getSelectedText(): java.lang.String
                setText(arg0: java.lang.String): void
            }
            class HistoryComboBox extends javax.swing.JComboBox {
                static HISTORY_LENGTH: int
                constructor()
                getText(): java.lang.String
                setText(arg0: java.lang.String): void
            }
            class HistoryComboBox$1 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.HistoryComboBox
                constructor(arg0: sun.jvm.hotspot.ui.HistoryComboBox)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class FindInCodeCachePanel extends sun.jvm.hotspot.ui.SAPanel {
                constructor()
                static access$002(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel, arg1: long): long
                static access$102(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel, arg1: long): long
                static access$200(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): void
                static access$300(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): sun.jvm.hotspot.debugger.Address
                static access$400(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel, arg1: java.lang.StringBuffer, arg2: sun.jvm.hotspot.code.CodeBlob): void
                static access$500(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel, arg1: java.lang.StringBuffer): void
                static access$600(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): sun.jvm.hotspot.ui.HistoryComboBox
                static access$700(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): sun.jvm.hotspot.ui.SAEditorPane
                static access$800(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): sun.jvm.hotspot.ui.FindInCodeCachePanel$Visitor
                static access$302(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                static access$900(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): javax.swing.JButton
                static access$100(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): long
                static access$000(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): long
                static access$1100(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel): sun.jvm.hotspot.ui.ProgressBarPanel
            }
            class FindInCodeCachePanel$4 implements java.lang.Runnable {
                val$result: java.lang.StringBuffer
                this$0: sun.jvm.hotspot.ui.FindInCodeCachePanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel, arg1: java.lang.StringBuffer)
                run(): void
            }
            class FindInCodeCachePanel$3 implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.ui.FindInCodeCachePanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel)
                run(): void
            }
            class FindInCodeCachePanel$2 implements javax.swing.event.HyperlinkListener {
                this$0: sun.jvm.hotspot.ui.FindInCodeCachePanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel)
                hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
            }
            class FindInCodeCachePanel$1 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.FindInCodeCachePanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class FindInCodeCachePanel$Visitor implements sun.jvm.hotspot.code.CodeCacheVisitor {
                base: sun.jvm.hotspot.debugger.Address
                result: java.lang.StringBuffer
                searching: boolean
                this$0: sun.jvm.hotspot.ui.FindInCodeCachePanel
                constructor(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel)
                prologue(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
                visit(arg0: sun.jvm.hotspot.code.CodeBlob): void
                epilogue(): void
                cleanup(): void
                static access$1000(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel$Visitor): void
            }
            class FindInCodeCachePanel$Visitor$1 implements java.lang.Runnable {
                this$1: sun.jvm.hotspot.ui.FindInCodeCachePanel$Visitor
                constructor(arg0: sun.jvm.hotspot.ui.FindInCodeCachePanel$Visitor)
                run(): void
            }
            class SAPanel extends javax.swing.JPanel {
                protected listeners: java.util.List
                constructor()
                addPanelListener(arg0: sun.jvm.hotspot.ui.SAListener): void
                removePanelListener(arg0: sun.jvm.hotspot.ui.SAListener): void
                showThreadOopInspector(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showInspector(arg0: sun.jvm.hotspot.oops.Oop): void
                showInspector(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
                showThreadStackMemory(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showJavaStackTrace(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showThreadInfo(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showCodeViewer(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class FindByQueryPanel extends sun.jvm.hotspot.ui.SAPanel {
                constructor()
                static access$000(arg0: sun.jvm.hotspot.ui.FindByQueryPanel): javax.swing.JTextArea
                static access$100(arg0: sun.jvm.hotspot.ui.FindByQueryPanel): sun.jvm.hotspot.utilities.soql.SOQLEngine
                static access$200(arg0: sun.jvm.hotspot.ui.FindByQueryPanel): javax.swing.JEditorPane
            }
            class FindByQueryPanel$2 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.FindByQueryPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindByQueryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class FindByQueryPanel$2$1 implements sun.jvm.hotspot.utilities.soql.ObjectVisitor {
                val$buf: java.lang.StringBuffer
                this$1: sun.jvm.hotspot.ui.FindByQueryPanel$2
                constructor(arg0: sun.jvm.hotspot.ui.FindByQueryPanel$2, arg1: java.lang.StringBuffer)
                visit(arg0: java.lang.Object): void
            }
            class FindByQueryPanel$1 implements javax.swing.event.HyperlinkListener {
                this$0: sun.jvm.hotspot.ui.FindByQueryPanel
                constructor(arg0: sun.jvm.hotspot.ui.FindByQueryPanel)
                hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
            }
            interface EditorFactory {
                openFile(arg0: java.lang.String, arg1: sun.jvm.hotspot.ui.EditorCommands): sun.jvm.hotspot.ui.Editor
                getCurrentEditor(): sun.jvm.hotspot.ui.Editor
            }
            interface EditorCommands {
                windowClosed(arg0: sun.jvm.hotspot.ui.Editor): void
                toggleBreakpointAtLine(arg0: sun.jvm.hotspot.ui.Editor, arg1: int): void
            }
            interface Editor {
                getSourceFileName(): java.lang.String
                getCurrentLineNumber(): int
                showLineNumber(arg0: int): void
                highlightLineNumber(arg0: int): void
                showBreakpointAtLine(arg0: int): void
                hasBreakpointAtLine(arg0: int): boolean
                clearBreakpointAtLine(arg0: int): void
                clearBreakpoints(): void
                setUserData(arg0: java.lang.Object): void
                getUserData(): java.lang.Object
                toFront(): void
            }
            class EditableAtEndDocument extends javax.swing.text.PlainDocument {
                constructor()
                insertString(arg0: int, arg1: java.lang.String, arg2: javax.swing.text.AttributeSet): void
                remove(arg0: int, arg1: int): void
                setMark(): void
                getMarkedText(): java.lang.String
                clear(): void
            }
            class DebuggerConsolePanel extends javax.swing.JPanel {
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger)
                requestFocus(): void
                clear(): void
                setMark(): void
                getMarkedText(): java.lang.String
                static main(arg0: java.lang.String[]): void
                static access$000(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel): boolean
                static access$100(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel): void
                static access$200(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel): javax.swing.text.JTextComponent
                static access$300(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel, arg1: javax.swing.event.DocumentEvent, arg2: char): boolean
                static access$400(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel, arg1: java.lang.String): java.lang.String
                static access$500(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel): sun.jvm.hotspot.debugger.Debugger
                static access$600(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel, arg1: java.lang.String): void
                static access$700(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel): void
                static access$800(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel): void
            }
            class DebuggerConsolePanel$4 extends java.awt.event.WindowAdapter {
                constructor()
                windowClosing(arg0: java.awt.event.WindowEvent): void
            }
            class DebuggerConsolePanel$3 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.DebuggerConsolePanel
                constructor(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class DebuggerConsolePanel$2 implements javax.swing.event.CaretListener {
                this$0: sun.jvm.hotspot.ui.DebuggerConsolePanel
                constructor(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel)
                caretUpdate(arg0: javax.swing.event.CaretEvent): void
            }
            class DebuggerConsolePanel$1 implements javax.swing.event.DocumentListener {
                this$0: sun.jvm.hotspot.ui.DebuggerConsolePanel
                constructor(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel)
                changedUpdate(arg0: javax.swing.event.DocumentEvent): void
                insertUpdate(arg0: javax.swing.event.DocumentEvent): void
                removeUpdate(arg0: javax.swing.event.DocumentEvent): void
            }
            class DebuggerConsolePanel$1$1 implements java.lang.Runnable {
                val$result: java.lang.String
                this$1: sun.jvm.hotspot.ui.DebuggerConsolePanel$1
                constructor(arg0: sun.jvm.hotspot.ui.DebuggerConsolePanel$1, arg1: java.lang.String)
                run(): void
            }
            class DeadlockDetectionPanel extends javax.swing.JPanel {
                constructor()
            }
            class CommandProcessorPanel extends javax.swing.JPanel {
                baos: java.io.ByteArrayOutputStream
                constructor(arg0: sun.jvm.hotspot.CommandProcessor)
                requestFocus(): void
                clear(): void
                setMark(): void
                getMarkedText(): java.lang.String
                static main(arg0: java.lang.String[]): void
                static access$000(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel): boolean
                static access$100(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel): void
                static access$200(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel): javax.swing.JTextArea
                static access$300(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel, arg1: javax.swing.event.DocumentEvent, arg2: char): boolean
                static access$400(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel, arg1: java.lang.String): java.lang.String
                static access$500(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel): sun.jvm.hotspot.CommandProcessor
                static access$600(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel): void
            }
            class CommandProcessorPanel$4 extends java.awt.event.WindowAdapter {
                constructor()
                windowClosing(arg0: java.awt.event.WindowEvent): void
            }
            class CommandProcessorPanel$3 implements java.awt.event.ActionListener {
                this$0: sun.jvm.hotspot.ui.CommandProcessorPanel
                constructor(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class CommandProcessorPanel$2 implements javax.swing.event.CaretListener {
                this$0: sun.jvm.hotspot.ui.CommandProcessorPanel
                constructor(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel)
                caretUpdate(arg0: javax.swing.event.CaretEvent): void
            }
            class CommandProcessorPanel$1 implements javax.swing.event.DocumentListener {
                this$0: sun.jvm.hotspot.ui.CommandProcessorPanel
                constructor(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel)
                changedUpdate(arg0: javax.swing.event.DocumentEvent): void
                insertUpdate(arg0: javax.swing.event.DocumentEvent): void
                removeUpdate(arg0: javax.swing.event.DocumentEvent): void
            }
            class CommandProcessorPanel$1$1 implements java.lang.Runnable {
                val$ln: java.lang.String
                this$1: sun.jvm.hotspot.ui.CommandProcessorPanel$1
                constructor(arg0: sun.jvm.hotspot.ui.CommandProcessorPanel$1, arg1: java.lang.String)
                run(): void
            }
            class ProgressBarPanel extends javax.swing.JPanel {
                static VERTICAL: int
                static HORIZONTAL: int
                constructor()
                constructor(arg0: int)
                constructor(arg0: java.lang.String)
                constructor(arg0: int, arg1: java.lang.String)
                setText(arg0: java.lang.String): void
                setValue(arg0: double): void
                setIndeterminate(arg0: boolean): void
            }
            class Annotation {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address, arg2: java.lang.String)
                getInterval(): sun.jvm.hotspot.utilities.Interval
                getLowAddress(): sun.jvm.hotspot.debugger.Address
                getHighAddress(): sun.jvm.hotspot.debugger.Address
                draw(arg0: java.awt.Graphics): void
                setColor(arg0: java.awt.Color): void
                getColor(): java.awt.Color
                computeWidthAndHeight(arg0: java.awt.Graphics): void
                getWidth(): int
                getHeight(): int
                setXAndY(arg0: int, arg1: int): void
                setX(arg0: int): void
                getX(): int
                setY(arg0: int): void
                getY(): int
                getBounds(): java.awt.Rectangle
                toString(): java.lang.String
            }
            class HighPrecisionJScrollBar extends javax.swing.JScrollBar {
                constructor()
                constructor(arg0: int)
                constructor(arg0: int, arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger)
                getValueHP(): java.math.BigInteger
                setValueHP(arg0: java.math.BigInteger): void
                getMinimumHP(): java.math.BigInteger
                setMinimumHP(arg0: java.math.BigInteger): void
                getMaximumHP(): java.math.BigInteger
                setMaximumHP(arg0: java.math.BigInteger): void
                getVisibleAmountHP(): java.math.BigInteger
                setVisibleAmountHP(arg0: java.math.BigInteger): void
                getBlockIncrementHP(): java.math.BigInteger
                setBlockIncrementHP(arg0: java.math.BigInteger): void
                getUnitIncrementHP(): java.math.BigInteger
                setUnitIncrementHP(arg0: java.math.BigInteger): void
                addChangeListener(arg0: javax.swing.event.ChangeListener): void
                removeChangeListener(arg0: javax.swing.event.ChangeListener): void
                scrollUpOrLeft(): void
                scrollDownOrRight(): void
                pageUpOrLeft(): void
                pageDownOrRight(): void
                static main(arg0: java.lang.String[]): void
                static access$000(arg0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar): boolean
                static access$100(arg0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar): void
                static access$200(arg0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar): int
                static access$300(arg0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar, arg1: int): java.math.BigInteger
                static access$400(arg0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar): void
            }
            class HighPrecisionJScrollBar$2 implements javax.swing.event.ChangeListener {
                constructor()
                stateChanged(arg0: javax.swing.event.ChangeEvent): void
            }
            class HighPrecisionJScrollBar$1 implements java.awt.event.AdjustmentListener {
                this$0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar
                constructor(arg0: sun.jvm.hotspot.ui.HighPrecisionJScrollBar)
                adjustmentValueChanged(arg0: java.awt.event.AdjustmentEvent): void
            }
            class AnnotatedMemoryPanel extends javax.swing.JPanel {
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger)
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger, arg1: boolean, arg2: sun.jvm.hotspot.debugger.Address, arg3: sun.jvm.hotspot.debugger.Address, arg4: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.debugger.Debugger, arg1: boolean)
                void: synchronized
                void: synchronized
                void: synchronized
                print(): void
                printOn(arg0: java.io.PrintStream): void
                static main(arg0: java.lang.String[]): void
                static access$000(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel): sun.jvm.hotspot.ui.HighPrecisionJScrollBar
            }
            class AnnotatedMemoryPanel$8 extends java.awt.event.WindowAdapter {
                constructor()
                windowClosed(arg0: java.awt.event.WindowEvent): void
                windowClosing(arg0: java.awt.event.WindowEvent): void
            }
            class AnnotatedMemoryPanel$7 implements javax.swing.event.ChangeListener {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                stateChanged(arg0: javax.swing.event.ChangeEvent): void
            }
            class AnnotatedMemoryPanel$6 extends javax.swing.AbstractAction {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class AnnotatedMemoryPanel$5 extends javax.swing.AbstractAction {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class AnnotatedMemoryPanel$4 extends javax.swing.AbstractAction {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class AnnotatedMemoryPanel$3 extends javax.swing.AbstractAction {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class AnnotatedMemoryPanel$2 implements java.awt.event.HierarchyBoundsListener {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                ancestorMoved(arg0: java.awt.event.HierarchyEvent): void
                ancestorResized(arg0: java.awt.event.HierarchyEvent): void
            }
            class AnnotatedMemoryPanel$AnnoX {
                lineX: int
                highBound: sun.jvm.hotspot.debugger.Address
                constructor(arg0: int, arg1: sun.jvm.hotspot.debugger.Address)
            }
            class AnnotatedMemoryPanel$1 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel
                constructor(arg0: sun.jvm.hotspot.ui.AnnotatedMemoryPanel)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            namespace table {
               class SortHeaderMouseAdapter extends java.awt.event.MouseAdapter {
                   constructor(arg0: javax.swing.JTable, arg1: sun.jvm.hotspot.ui.table.SortableTableModel)
                   mouseClicked(arg0: java.awt.event.MouseEvent): void
               }
               class SortHeaderCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
                   constructor(arg0: javax.swing.table.JTableHeader, arg1: sun.jvm.hotspot.ui.table.SortableTableModel)
                   getIcon(arg0: java.lang.String): javax.swing.ImageIcon
                   getTableCellRendererComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
               }
               class LongCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
                   constructor()
                   getTableCellRendererComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
               }
               abstract class TableModelComparator implements java.util.Comparator {
                   protected model: javax.swing.table.TableModel
                   constructor(arg0: javax.swing.table.TableModel)
                   addColumn(arg0: int): void
                   getColumn(): int
                   setAscending(arg0: boolean): void
                   isAscending(): boolean
                   compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                   getValueForColumn(arg0: java.lang.Object, arg1: int): java.lang.Object
               }
               abstract class SortableTableModel extends javax.swing.table.AbstractTableModel {
                   protected elements: java.util.List
                   constructor()
                   setComparator(arg0: sun.jvm.hotspot.ui.table.TableModelComparator): void
                   sortByColumn(arg0: int, arg1: boolean): void
                   isAscending(): boolean
                   getColumn(): int
               }
               
            }
            interface SAListener {
                showThreadOopInspector(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showInspector(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
                showThreadStackMemory(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showThreadInfo(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showJavaStackTrace(arg0: sun.jvm.hotspot.runtime.JavaThread): void
                showCodeViewer(arg0: sun.jvm.hotspot.debugger.Address): void
                showLiveness(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.utilities.LivenessPathList): void
            }
            class ObjectHistogramPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
                constructor(arg0: sun.jvm.hotspot.oops.ObjectHistogram)
                actionPerformed(arg0: java.awt.event.ActionEvent): void
                protected registerActions(): void
                addPanelListener(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel$Listener): void
                removePanelListener(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel$Listener): void
                static main(arg0: java.lang.String[]): void
                static access$000(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel): void
            }
            interface ObjectHistogramPanel$Listener {
                showObjectsOfType(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class ObjectHistogramPanel$ObjectHistogramTableModel extends sun.jvm.hotspot.ui.table.SortableTableModel {
                this$0: sun.jvm.hotspot.ui.ObjectHistogramPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel, arg1: sun.jvm.hotspot.oops.ObjectHistogram)
                getColumnCount(): int
                getRowCount(): int
                getColumnName(arg0: int): java.lang.String
                getColumnClass(arg0: int): java.lang.Class
                getValueAt(arg0: int, arg1: int): java.lang.Object
                getValueForColumn(arg0: java.lang.Object, arg1: int): java.lang.Object
                getElement(arg0: int): sun.jvm.hotspot.oops.ObjectHistogramElement
            }
            class ObjectHistogramPanel$ObjectHistogramTableModel$ObjectHistogramComparator extends sun.jvm.hotspot.ui.table.TableModelComparator {
                this$1: sun.jvm.hotspot.ui.ObjectHistogramPanel$ObjectHistogramTableModel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel$ObjectHistogramTableModel, arg1: sun.jvm.hotspot.ui.ObjectHistogramPanel$ObjectHistogramTableModel)
                getValueForColumn(arg0: java.lang.Object, arg1: int): java.lang.Object
            }
            class ObjectHistogramPanel$ObjectHistogramColummModel extends javax.swing.table.DefaultTableColumnModel {
                this$0: sun.jvm.hotspot.ui.ObjectHistogramPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel)
            }
            class ObjectHistogramPanel$ObjectHistogramToolBar extends com.sun.java.swing.ui.CommonToolBar {
                this$0: sun.jvm.hotspot.ui.ObjectHistogramPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel, arg1: com.sun.java.swing.ui.StatusBar)
                protected addComponents(): void
                getFindText(): java.lang.String
            }
            class ObjectHistogramPanel$1 extends java.awt.event.MouseAdapter {
                this$0: sun.jvm.hotspot.ui.ObjectHistogramPanel
                constructor(arg0: sun.jvm.hotspot.ui.ObjectHistogramPanel)
                mouseClicked(arg0: java.awt.event.MouseEvent): void
            }
            namespace tree {
               class SimpleTreeGroupNode implements sun.jvm.hotspot.ui.tree.SimpleTreeNode {
                   constructor()
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   addChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
                   removeChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   removeAllChildren(): void
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getName(): java.lang.String
                   getValue(): java.lang.String
               }
               class RootTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class RevPtrsTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: sun.jvm.hotspot.oops.Oop)
                   constructor(arg0: sun.jvm.hotspot.oops.Oop, arg1: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getName(): java.lang.String
                   getValue(): java.lang.String
               }
               class OopTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getOop(): sun.jvm.hotspot.oops.Oop
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class OopTreeNodeAdapter$Finder extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                   constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier)
                   getIndex(): int
                   prologue(): void
                   doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                   doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                   doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                   doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                   doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                   doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                   doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                   doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                   doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                   doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
               }
               class OopTreeNodeAdapter$Fetcher extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                   this$0: sun.jvm.hotspot.ui.tree.OopTreeNodeAdapter
                   constructor(arg0: sun.jvm.hotspot.ui.tree.OopTreeNodeAdapter, arg1: int)
                   getChild(): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   prologue(): void
                   doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                   doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                   doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                   doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                   doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                   doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                   doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                   doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                   doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                   doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                   doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
               }
               class OopTreeNodeAdapter$Counter extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                   constructor()
                   getNumFields(): int
                   prologue(): void
                   doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                   doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                   doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                   doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                   doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                   doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                   doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                   doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                   doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                   doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                   doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
               }
               class MetadataTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: sun.jvm.hotspot.oops.Metadata, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: sun.jvm.hotspot.oops.Metadata, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getMetadata(): sun.jvm.hotspot.oops.Metadata
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class MetadataTreeNodeAdapter$Finder extends sun.jvm.hotspot.oops.DefaultMetadataVisitor {
                   constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier)
                   getIndex(): int
                   prologue(): void
                   doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                   doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                   doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                   doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                   doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                   doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                   doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                   doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                   doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                   doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                   doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
               }
               class MetadataTreeNodeAdapter$Fetcher extends sun.jvm.hotspot.oops.DefaultMetadataVisitor {
                   this$0: sun.jvm.hotspot.ui.tree.MetadataTreeNodeAdapter
                   constructor(arg0: sun.jvm.hotspot.ui.tree.MetadataTreeNodeAdapter, arg1: int)
                   getChild(): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   prologue(): void
                   doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                   doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                   doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                   doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                   doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                   doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                   doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                   doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                   doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                   doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                   doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
               }
               class MetadataTreeNodeAdapter$Counter extends sun.jvm.hotspot.oops.DefaultMetadataVisitor {
                   constructor()
                   getNumFields(): int
                   prologue(): void
                   doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                   doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                   doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                   doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                   doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                   doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                   doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                   doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                   doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                   doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                   doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
               }
               class LongTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: long, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: long, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   setHexFormat(arg0: boolean): void
                   getHexFormat(): boolean
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class FloatTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: float, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: float, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class DoubleTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: double, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: double, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class CharTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: char, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: char, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class CTypeTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.Type, arg2: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.Type, arg2: sun.jvm.hotspot.oops.FieldIdentifier, arg3: boolean)
                   constructor(arg0: sun.jvm.hotspot.types.Type)
                   constructor(arg0: java.util.Iterator)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class CTypeTreeNodeAdapter$CTypeFieldIdentifier extends sun.jvm.hotspot.oops.FieldIdentifier {
                   constructor(arg0: sun.jvm.hotspot.types.Type, arg1: sun.jvm.hotspot.types.Field)
                   getField(): sun.jvm.hotspot.types.Field
                   getName(): java.lang.String
               }
               class CStringTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class BooleanTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: boolean, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                   constructor(arg0: boolean, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               abstract class FieldTreeNodeAdapter implements sun.jvm.hotspot.ui.tree.SimpleTreeNode {
                   constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: boolean)
                   getID(): sun.jvm.hotspot.oops.FieldIdentifier
                   getTreeTableMode(): boolean
                   getName(): java.lang.String
                   toString(): java.lang.String
               }
               class BadAddressTreeNodeAdapter extends sun.jvm.hotspot.ui.tree.FieldTreeNodeAdapter {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.oops.MetadataField, arg2: boolean)
                   constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.oops.OopField, arg2: boolean)
                   constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   constructor(arg0: long, arg1: sun.jvm.hotspot.oops.FieldIdentifier, arg2: boolean)
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getValue(): java.lang.String
               }
               class SimpleTreeModel implements javax.swing.tree.TreeModel {
                   constructor()
                   setRoot(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
                   getRoot(): java.lang.Object
                   getChild(arg0: java.lang.Object, arg1: int): java.lang.Object
                   getChildCount(arg0: java.lang.Object): int
                   isLeaf(arg0: java.lang.Object): boolean
                   valueForPathChanged(arg0: javax.swing.tree.TreePath, arg1: java.lang.Object): void
                   getIndexOfChild(arg0: java.lang.Object, arg1: java.lang.Object): int
                   addTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                   removeTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                   fireTreeStructureChanged(): void
               }
               class SimpleTreeModel$1 implements sun.jvm.hotspot.ui.tree.SimpleTreeNode {
                   constructor()
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   toString(): java.lang.String
                   getName(): java.lang.String
                   getValue(): java.lang.String
               }
               interface SimpleTreeNode {
                   getChildCount(): int
                   getChild(arg0: int): sun.jvm.hotspot.ui.tree.SimpleTreeNode
                   isLeaf(): boolean
                   getIndexOfChild(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): int
                   getName(): java.lang.String
                   getValue(): java.lang.String
               }
               
            }
            
         }
         namespace oops {
            class java_lang_Class {
                static klassOffset: int
                static oopSizeField: sun.jvm.hotspot.oops.IntField
                constructor()
                static asKlass(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Klass
                static getOopSize(arg0: sun.jvm.hotspot.oops.Oop): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class java_lang_Class$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class UnknownOopException extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
            }
            class RetData extends sun.jvm.hotspot.oops.CounterData {
                static bci0Offset: int
                static count0Offset: int
                static displacement0Offset: int
                static retRowCellCount: int
                static noBci: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                cellCount(): int
                static rowLimit(): int
                static bciCellIndex(arg0: int): int
                static bciCountCellIndex(arg0: int): int
                static bciDisplacementCellIndex(arg0: int): int
                bci(arg0: int): int
                bciCount(arg0: int): int
                bciDisplacement(arg0: int): int
                static bciOffset(arg0: int): int
                static bciCountOffset(arg0: int): int
                static bciDisplacementOffset(arg0: int): int
                printDataOn(arg0: java.io.PrintStream): void
            }
            class OopUtilities implements sun.jvm.hotspot.jdi.JVMTIThreadState {
                constructor()
                static charArrayToString(arg0: sun.jvm.hotspot.oops.TypeArray): java.lang.String
                static charArrayToString(arg0: sun.jvm.hotspot.oops.TypeArray, arg1: int, arg2: int): java.lang.String
                static escapeString(arg0: java.lang.String): java.lang.String
                static stringOopToString(arg0: sun.jvm.hotspot.oops.Oop): java.lang.String
                static stringOopToEscapedString(arg0: sun.jvm.hotspot.oops.Oop): java.lang.String
                static threadGroupOopGetParent(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                static threadGroupOopGetName(arg0: sun.jvm.hotspot.oops.Oop): java.lang.String
                static threadGroupOopGetThreads(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop[]
                static threadGroupOopGetGroups(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop[]
                static threadOopGetThreadGroup(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                static threadOopGetName(arg0: sun.jvm.hotspot.oops.Oop): java.lang.String
                static threadOopGetJavaThread(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.runtime.JavaThread
                static threadOopGetTID(arg0: sun.jvm.hotspot.oops.Oop): long
                static threadOopGetThreadStatus(arg0: sun.jvm.hotspot.oops.Oop): int
                static threadOopGetParkBlocker(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                static abstractOwnableSynchronizerGetOwnerThread(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class OopUtilities$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ObjArrayKlass extends sun.jvm.hotspot.oops.ArrayKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getElementKlass(): sun.jvm.hotspot.oops.Klass
                getBottomKlass(): sun.jvm.hotspot.oops.Klass
                computeModifierFlags(): long
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                arrayKlassImpl(arg0: boolean, arg1: int): sun.jvm.hotspot.oops.Klass
                arrayKlassImpl(arg0: boolean): sun.jvm.hotspot.oops.Klass
                printValueOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ObjArrayKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MultiBranchData extends sun.jvm.hotspot.oops.ArrayData {
                static defaultCountOffSet: int
                static defaultDisaplacementOffSet: int
                static caseArrayStart: int
                static relativeCountOffSet: int
                static relativeDisplacementOffSet: int
                static perCaseCellCount: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                numberOfCases(): int
                defaultCount(): int
                defaultDisplacement(): int
                countAt(arg0: int): int
                displacementAt(arg0: int): int
                static defaultCountOffset(): int
                static defaultDisplacementOffset(): int
                static caseCountOffset(arg0: int): int
                static caseArrayOffset(): int
                static perCaseSize(): int
                static relativeCountOffset(): int
                static relativeDisplacementOffset(): int
                printDataOn(arg0: java.io.PrintStream): void
                cellCount(): int
            }
            interface JVMDIClassStatus {
                static VERIFIED: int
                static PREPARED: int
                static INITIALIZED: int
                static ERROR: int
            }
            class InstanceRefKlass extends sun.jvm.hotspot.oops.InstanceKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class InstanceRefKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class InstanceMirrorKlass extends sun.jvm.hotspot.oops.InstanceKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getObjectSize(arg0: sun.jvm.hotspot.oops.Oop): long
                iterateNonStaticFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: sun.jvm.hotspot.oops.Oop): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class InstanceMirrorKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class InstanceClassLoaderKlass extends sun.jvm.hotspot.oops.InstanceKlass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class InstanceClassLoaderKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class IndexableFieldIdentifier extends sun.jvm.hotspot.oops.FieldIdentifier {
                constructor(arg0: int)
                getIndex(): int
                getName(): java.lang.String
                printOn(arg0: java.io.PrintStream): void
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
            }
            class OopPrinter implements sun.jvm.hotspot.oops.OopVisitor {
                tty: java.io.PrintStream
                constructor(arg0: java.io.PrintStream)
                prologue(): void
                epilogue(): void
                setObj(arg0: sun.jvm.hotspot.oops.Oop): void
                getObj(): sun.jvm.hotspot.oops.Oop
                doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.NarrowOopField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
            }
            class HeapPrinter implements sun.jvm.hotspot.oops.HeapVisitor {
                constructor(arg0: java.io.PrintStream)
                prologue(arg0: long): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                epilogue(): void
            }
            class DefaultOopVisitor implements sun.jvm.hotspot.oops.OopVisitor {
                constructor()
                prologue(): void
                epilogue(): void
                setObj(arg0: sun.jvm.hotspot.oops.Oop): void
                getObj(): sun.jvm.hotspot.oops.Oop
                doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.NarrowOopField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
            }
            abstract class DefaultMetadataVisitor implements sun.jvm.hotspot.oops.MetadataVisitor {
                constructor()
                prologue(): void
                epilogue(): void
                setObj(arg0: sun.jvm.hotspot.oops.Metadata): void
                getObj(): sun.jvm.hotspot.oops.Metadata
                doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.NarrowOopField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
            }
            class DefaultHeapVisitor implements sun.jvm.hotspot.oops.HeapVisitor {
                constructor()
                prologue(arg0: long): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                epilogue(): void
            }
            class CompressedLineNumberReadStream extends sun.jvm.hotspot.code.CompressedReadStream {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: int)
                readPair(): boolean
                bci(): int
                line(): int
            }
            class CompiledICHolder extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isCompiledICHolder(): boolean
                getHolderMethod(): sun.jvm.hotspot.oops.Method
                getHolderKlass(): sun.jvm.hotspot.oops.Klass
                printValueOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CompiledICHolder$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class JumpData extends sun.jvm.hotspot.oops.ProfileData {
                static takenOffSet: int
                static displacementOffSet: int
                static jumpCellCount: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                cellCount(): int
                taken(): int
                displacement(): int
                static takenOffset(): int
                static displacementOffset(): int
                printDataOn(arg0: java.io.PrintStream): void
            }
            class BranchData extends sun.jvm.hotspot.oops.JumpData {
                static notTakenOffSet: int
                static branchCellCount: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                cellCount(): int
                notTaken(): int
                static notTakenOffset(): int
                static branchDataSize(): int
                printDataOn(arg0: java.io.PrintStream): void
            }
            abstract class ArrayData extends sun.jvm.hotspot.oops.ProfileData {
                static arrayLenOffSet: int
                static arrayStartOffSet: int
                arrayUintAt(arg0: int): int
                arrayIntAt(arg0: int): int
                static arrayElementOffset(arg0: int): int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                arrayLen(): int
                cellCount(): int
                static arrayLenOffset(): int
                static arrayStartOffset(): int
            }
            class GenerateOopMap {
                static epsilonCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static refCTS: sun.jvm.hotspot.oops.CellTypeState
                static valCTS: sun.jvm.hotspot.oops.CellTypeState
                static vCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static rCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static rrCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static vrCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static vvCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static rvrCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static vvrCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static vvvCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static vvvrCTS: sun.jvm.hotspot.oops.CellTypeState[]
                static vvvvCTS: sun.jvm.hotspot.oops.CellTypeState[]
                protected static bad_monitors: int
                _method: sun.jvm.hotspot.oops.Method
                _rt: sun.jvm.hotspot.oops.GenerateOopMap$RetTable
                _max_locals: int
                _max_stack: int
                _max_monitors: int
                _has_exceptions: boolean
                _got_error: boolean
                _error_msg: java.lang.String
                _monitor_safe: boolean
                _state_len: int
                _state: sun.jvm.hotspot.oops.CellTypeStateList
                _state_vec_buf: char[]
                _stack_top: int
                _monitor_top: int
                _report_for_exit_bci: int
                _matching_enter_bci: int
                _basic_blocks: sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock[]
                _gc_points: int
                _bb_count: int
                _bb_hdr_bits: sun.jvm.hotspot.utilities.BitMap
                _report_result: boolean
                _report_result_for_send: boolean
                _itr_send: sun.jvm.hotspot.interpreter.BytecodeStream
                _init_vars: java.util.List
                _conflict: boolean
                _nof_refval_conflicts: int
                _new_var_map: int[]
                initState(): void
                makeContextUninitialized(): void
                methodsigToEffect(arg0: sun.jvm.hotspot.oops.Symbol, arg1: boolean, arg2: sun.jvm.hotspot.oops.CellTypeStateList): int
                mergeStateVectors(arg0: sun.jvm.hotspot.oops.CellTypeStateList, arg1: sun.jvm.hotspot.oops.CellTypeStateList): boolean
                copyState(arg0: sun.jvm.hotspot.oops.CellTypeStateList, arg1: sun.jvm.hotspot.oops.CellTypeStateList): void
                mergeStateIntoBB(arg0: sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock): void
                mergeState(arg0: int, arg1: int[]): void
                setVar(arg0: int, arg1: sun.jvm.hotspot.oops.CellTypeState): void
                getVar(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                pop(): sun.jvm.hotspot.oops.CellTypeState
                push(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                monitorPop(): sun.jvm.hotspot.oops.CellTypeState
                monitorPush(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                vars(): sun.jvm.hotspot.oops.CellTypeStateList
                stack(): sun.jvm.hotspot.oops.CellTypeStateList
                monitors(): sun.jvm.hotspot.oops.CellTypeStateList
                replaceAllCTSMatches(arg0: sun.jvm.hotspot.oops.CellTypeState, arg1: sun.jvm.hotspot.oops.CellTypeState): void
                printStates(arg0: java.io.PrintStream, arg1: sun.jvm.hotspot.oops.CellTypeStateList, arg2: int): void
                printCurrentState(arg0: java.io.PrintStream, arg1: sun.jvm.hotspot.interpreter.BytecodeStream, arg2: boolean): void
                reportMonitorMismatch(arg0: java.lang.String): void
                initializeBB(): void
                markBBHeadersAndCountGCPoints(): void
                isBBHeader(arg0: int): boolean
                gcPoints(): int
                bbCount(): int
                setBBMarkBit(arg0: int): void
                clear_bbmark_bit(arg0: int): void
                getBasicBlockAt(arg0: int): sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock
                getBasicBlockContaining(arg0: int): sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock
                interpBB(arg0: sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock): void
                restoreState(arg0: sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock): void
                nextBBStartPC(arg0: sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock): int
                updateBasicBlocks(arg0: int, arg1: int): void
                markBB(arg0: int, arg1: int[]): void
                markReachableCode(): void
                reachableBasicblock(arg0: int, arg1: int[]): void
                doInterpretation(): void
                initBasicBlocks(): void
                setupMethodEntryState(): void
                interpAll(): void
                interp1(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): void
                doExceptionEdge(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): void
                checkType(arg0: sun.jvm.hotspot.oops.CellTypeState, arg1: sun.jvm.hotspot.oops.CellTypeState): void
                ppstore(arg0: sun.jvm.hotspot.oops.CellTypeState[], arg1: int): void
                ppload(arg0: sun.jvm.hotspot.oops.CellTypeState[], arg1: int): void
                ppush1(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                ppush(arg0: sun.jvm.hotspot.oops.CellTypeState[]): void
                ppush(arg0: sun.jvm.hotspot.oops.CellTypeStateList): void
                ppop1(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                ppop(arg0: sun.jvm.hotspot.oops.CellTypeState[]): void
                ppopAny(arg0: int): void
                pp(arg0: sun.jvm.hotspot.oops.CellTypeState[], arg1: sun.jvm.hotspot.oops.CellTypeState[]): void
                ppNewRef(arg0: sun.jvm.hotspot.oops.CellTypeState[], arg1: int): void
                ppdupswap(arg0: int, arg1: java.lang.String): void
                doLdc(arg0: int): void
                doAstore(arg0: int): void
                doJsr(arg0: int): void
                doField(arg0: boolean, arg1: boolean, arg2: int, arg3: int): void
                doMethod(arg0: boolean, arg1: boolean, arg2: int, arg3: int): void
                doMultianewarray(arg0: int, arg1: int): void
                doMonitorenter(arg0: int): void
                doMonitorexit(arg0: int): void
                doReturnMonitorCheck(): void
                doCheckcast(): void
                sigcharToEffect(arg0: char, arg1: int, arg2: sun.jvm.hotspot.oops.CellTypeState[]): sun.jvm.hotspot.oops.CellTypeState[]
                copyCTS(arg0: sun.jvm.hotspot.oops.CellTypeState[], arg1: sun.jvm.hotspot.oops.CellTypeState[]): int
                reportResult(): void
                initializeVars(): void
                addToRefInitSet(arg0: int): void
                recordRefvalConflict(arg0: int): void
                rewriteRefvalConflicts(): void
                stateVecToString(arg0: sun.jvm.hotspot.oops.CellTypeStateList, arg1: int): java.lang.String
                retJumpTargetsDo(arg0: sun.jvm.hotspot.interpreter.BytecodeStream, arg1: sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure, arg2: int, arg3: int[]): void
                jumpTargetsDo(arg0: sun.jvm.hotspot.interpreter.BytecodeStream, arg1: sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure, arg2: int[]): boolean
                constructor(arg0: sun.jvm.hotspot.oops.Method)
                computeMap(): void
                resultForBasicblock(arg0: int): void
                maxLocals(): int
                method(): sun.jvm.hotspot.oops.Method
                monitorSafe(): boolean
                getMonitorMatch(arg0: int): int
                allowRewrites(): boolean
                reportResults(): boolean
                reportInitVars(): boolean
                possibleGCPoint(arg0: sun.jvm.hotspot.interpreter.BytecodeStream): boolean
                fillStackmapProlog(arg0: int): void
                fillStackmapEpilog(): void
                fillStackmapForOpcodes(arg0: sun.jvm.hotspot.interpreter.BytecodeStream, arg1: sun.jvm.hotspot.oops.CellTypeStateList, arg2: sun.jvm.hotspot.oops.CellTypeStateList, arg3: int): void
                fillInitVars(arg0: java.util.List): void
            }
            class GenerateOopMap$4 implements sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure {
                this$0: sun.jvm.hotspot.oops.GenerateOopMap
                constructor(arg0: sun.jvm.hotspot.oops.GenerateOopMap)
                process(arg0: sun.jvm.hotspot.oops.GenerateOopMap, arg1: int, arg2: int[]): void
            }
            class GenerateOopMap$3 implements sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure {
                this$0: sun.jvm.hotspot.oops.GenerateOopMap
                constructor(arg0: sun.jvm.hotspot.oops.GenerateOopMap)
                process(arg0: sun.jvm.hotspot.oops.GenerateOopMap, arg1: int, arg2: int[]): void
            }
            class GenerateOopMap$2 implements sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure {
                this$0: sun.jvm.hotspot.oops.GenerateOopMap
                constructor(arg0: sun.jvm.hotspot.oops.GenerateOopMap)
                process(arg0: sun.jvm.hotspot.oops.GenerateOopMap, arg1: int, arg2: int[]): void
            }
            class GenerateOopMap$1 implements sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure {
                this$0: sun.jvm.hotspot.oops.GenerateOopMap
                constructor(arg0: sun.jvm.hotspot.oops.GenerateOopMap)
                process(arg0: sun.jvm.hotspot.oops.GenerateOopMap, arg1: int, arg2: int[]): void
            }
            class GenerateOopMap$BasicBlock {
                static _dead_basic_block: int
                static _unreached: int
                _bci: int
                _end_bci: int
                _max_locals: int
                _max_stack: int
                _state: sun.jvm.hotspot.oops.CellTypeStateList
                _stack_top: int
                _monitor_top: int
                constructor()
                vars(): sun.jvm.hotspot.oops.CellTypeStateList
                stack(): sun.jvm.hotspot.oops.CellTypeStateList
                changed(): boolean
                setChanged(arg0: boolean): void
                isReachable(): boolean
                isDead(): boolean
                isAlive(): boolean
                markAsAlive(): void
            }
            class GenerateOopMap$RetTable {
                constructor()
                computeRetTable(arg0: sun.jvm.hotspot.oops.Method): void
                updateRetTable(arg0: int, arg1: int): void
                findJsrsForTarget(arg0: int): sun.jvm.hotspot.oops.GenerateOopMap$RetTableEntry
            }
            class GenerateOopMap$RetTableEntry {
                constructor(arg0: int, arg1: sun.jvm.hotspot.oops.GenerateOopMap$RetTableEntry)
                targetBci(): int
                nofJsrs(): int
                jsrs(arg0: int): int
                addJsr(arg0: int): void
                addDelta(arg0: int, arg1: int): void
                next(): sun.jvm.hotspot.oops.GenerateOopMap$RetTableEntry
            }
            class GenerateOopMap$ComputeEntryStack extends sun.jvm.hotspot.runtime.SignatureIterator {
                _effect: sun.jvm.hotspot.oops.CellTypeStateList
                _idx: int
                set(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                length(): int
                doBool(): void
                doChar(): void
                doFloat(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
                doDouble(): void
                doLong(): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
                computeForParameters(arg0: boolean, arg1: sun.jvm.hotspot.oops.CellTypeStateList): int
                computeForReturntype(arg0: sun.jvm.hotspot.oops.CellTypeStateList): int
            }
            class GenerateOopMap$ComputeCallStack extends sun.jvm.hotspot.runtime.SignatureIterator {
                _effect: sun.jvm.hotspot.oops.CellTypeStateList
                _idx: int
                set(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                length(): int
                doBool(): void
                doChar(): void
                doFloat(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
                doDouble(): void
                doLong(): void
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
                computeForParameters(arg0: boolean, arg1: sun.jvm.hotspot.oops.CellTypeStateList): int
                computeForReturntype(arg0: sun.jvm.hotspot.oops.CellTypeStateList): int
            }
            interface GenerateOopMap$JumpClosure {
                process(arg0: sun.jvm.hotspot.oops.GenerateOopMap, arg1: int, arg2: int[]): void
            }
            class VirtualCallData extends sun.jvm.hotspot.oops.ReceiverTypeData {
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                cellCount(): int
                static virtualCallDataSize(): int
                printDataOn(arg0: java.io.PrintStream): void
            }
            class BitData extends sun.jvm.hotspot.oops.ProfileData {
                static nullSeenFlag: int
                static bitCellCount: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                cellCount(): int
                nullSeen(): boolean
                static bitDataSize(): int
                printDataOn(arg0: java.io.PrintStream): void
            }
            class CounterData extends sun.jvm.hotspot.oops.BitData {
                static countOff: int
                static counterCellCount: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                static staticCellCount(): int
                cellCount(): int
                count(): int
                static countOffset(): int
                static counterDataSize(): int
                printDataOn(arg0: java.io.PrintStream): void
            }
            class ReceiverTypeData extends sun.jvm.hotspot.oops.CounterData {
                static receiver0Offset: int
                static count0Offset: int
                static receiverTypeRowCellCount: int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                isReceivertypedata(): boolean
                static staticCellCount(): int
                cellCount(): int
                static rowLimit(): int
                static receiverCellIndex(arg0: int): int
                static receiverCountCellIndex(arg0: int): int
                receiverUnchecked(arg0: int): sun.jvm.hotspot.oops.Klass
                receiver(arg0: int): sun.jvm.hotspot.oops.Klass
                receiverCount(arg0: int): int
                static receiverOffset(arg0: int): int
                static receiverCountOffset(arg0: int): int
                static receiverTypeDataSize(): int
                printReceiverDataOn(arg0: java.io.PrintStream): void
                printDataOn(arg0: java.io.PrintStream): void
            }
            class ObjectHistogramElement {
                constructor(arg0: sun.jvm.hotspot.oops.Klass)
                updateWith(arg0: sun.jvm.hotspot.oops.Oop): void
                compare(arg0: sun.jvm.hotspot.oops.ObjectHistogramElement): int
                getKlass(): sun.jvm.hotspot.oops.Klass
                getCount(): long
                getSize(): long
                getDescription(): java.lang.String
                static titleOn(arg0: java.io.PrintStream): void
                printOn(arg0: java.io.PrintStream): void
            }
            class ObjectHistogram implements sun.jvm.hotspot.oops.HeapVisitor {
                constructor()
                prologue(arg0: long): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                epilogue(): void
                getElements(): java.util.List
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class ObjectHistogram$1 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.oops.ObjectHistogram
                constructor(arg0: sun.jvm.hotspot.oops.ObjectHistogram)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class CellTypeState {
                static bottom: sun.jvm.hotspot.oops.CellTypeState
                static uninit: sun.jvm.hotspot.oops.CellTypeState
                static ref: sun.jvm.hotspot.oops.CellTypeState
                static value: sun.jvm.hotspot.oops.CellTypeState
                static refUninit: sun.jvm.hotspot.oops.CellTypeState
                static top: sun.jvm.hotspot.oops.CellTypeState
                static addr: sun.jvm.hotspot.oops.CellTypeState
                copy(): sun.jvm.hotspot.oops.CellTypeState
                static makeAny(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                static makeBottom(): sun.jvm.hotspot.oops.CellTypeState
                static makeTop(): sun.jvm.hotspot.oops.CellTypeState
                static makeAddr(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                static makeSlotRef(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                static makeLineRef(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                static makeLockRef(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                isBottom(): boolean
                isLive(): boolean
                isValidState(): boolean
                isAddress(): boolean
                isReference(): boolean
                isValue(): boolean
                isUninit(): boolean
                canBeAddress(): boolean
                canBeReference(): boolean
                canBeValue(): boolean
                canBeUninit(): boolean
                isInfoBottom(): boolean
                isInfoTop(): boolean
                getInfo(): int
                getMonitorSource(): int
                isGoodAddress(): boolean
                isLockReference(): boolean
                isNonlockReference(): boolean
                equal(arg0: sun.jvm.hotspot.oops.CellTypeState): boolean
                equalKind(arg0: sun.jvm.hotspot.oops.CellTypeState): boolean
                toChar(): char
                set(arg0: sun.jvm.hotspot.oops.CellTypeState): void
                merge(arg0: sun.jvm.hotspot.oops.CellTypeState, arg1: int): sun.jvm.hotspot.oops.CellTypeState
                print(arg0: java.io.PrintStream): void
            }
            class DataLayout {
                static noTag: int
                static bitDataTag: int
                static counterDataTag: int
                static jumpDataTag: int
                static receiverTypeDataTag: int
                static virtualCallDataTag: int
                static retDataTag: int
                static branchDataTag: int
                static multiBranchDataTag: int
                static trapBits: int
                static trapShift: int
                static trapMask: int
                static trapMaskInPlace: int
                static flagLimit: int
                static flagMask: int
                static firstFlag: int
                static counterIncrement: int
                constructor(arg0: sun.jvm.hotspot.oops.MethodData, arg1: int)
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: int)
                dp(): int
                cellAt(arg0: int): int
                addressAt(arg0: int): sun.jvm.hotspot.debugger.Address
                static needsArrayLen(arg0: int): boolean
                static headerSizeInBytes(): int
                static headerSizeInCells(): int
                static computeSizeInBytes(arg0: int): int
                tag(): int
                trapState(): int
                flags(): int
                bci(): int
                flagAt(arg0: int): boolean
                static headerOffset(): int
                static tagOffset(): int
                static flagsOffset(): int
                static bciOffset(): int
                static cellOffset(arg0: int): int
            }
            class NamedFieldIdentifier extends sun.jvm.hotspot.oops.FieldIdentifier {
                constructor(arg0: java.lang.String)
                getName(): java.lang.String
                printOn(arg0: java.io.PrintStream): void
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
            }
            class CellTypeStateList {
                constructor(arg0: int)
                size(): int
                get(arg0: int): sun.jvm.hotspot.oops.CellTypeState
                subList(arg0: int, arg1: int): sun.jvm.hotspot.oops.CellTypeStateList
            }
            abstract class ProfileData {
                data(): sun.jvm.hotspot.oops.DataLayout
                cellCount(): int
                sizeInBytes(): int
                dp(): int
                intptrAt(arg0: int): int
                intAt(arg0: int): int
                uintAt(arg0: int): int
                addressAt(arg0: int): sun.jvm.hotspot.debugger.Address
                flagAt(arg0: int): boolean
                static cellOffset(arg0: int): int
                constructor(arg0: sun.jvm.hotspot.oops.DataLayout)
                constructor()
                bci(): int
                trapState(): int
                printDataOn(arg0: java.io.PrintStream): void
                tab(arg0: java.io.PrintStream): void
                printShared(arg0: java.io.PrintStream, arg1: java.lang.String): void
                toString(): java.lang.String
            }
            class ConstantPoolCacheEntry {
                static f1FieldName: sun.jvm.hotspot.oops.NamedFieldIdentifier
                static f2FieldName: sun.jvm.hotspot.oops.NamedFieldIdentifier
                static flagsFieldName: sun.jvm.hotspot.oops.NamedFieldIdentifier
                constructor(arg0: sun.jvm.hotspot.oops.ConstantPoolCache, arg1: int)
                getConstantPoolIndex(): int
                getF1(): sun.jvm.hotspot.oops.Metadata
                getF2(): int
                getFlags(): int
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ConstantPoolCacheEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ConstantPoolCache extends sun.jvm.hotspot.oops.Metadata {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isConstantPoolCache(): boolean
                getConstants(): sun.jvm.hotspot.oops.ConstantPool
                getSize(): long
                getEntryAt(arg0: int): sun.jvm.hotspot.oops.ConstantPoolCacheEntry
                getIntAt(arg0: int, arg1: int): int
                printValueOn(arg0: java.io.PrintStream): void
                getLength(): int
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ConstantPoolCache$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class CheckedExceptionElement {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: long)
                getClassCPIndex(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class CheckedExceptionElement$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ExceptionTableElement {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: long)
                getStartPC(): int
                getEndPC(): int
                getHandlerPC(): int
                getCatchTypeIndex(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ExceptionTableElement$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LocalVariableTableElement {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: long)
                getStartBCI(): int
                getLength(): int
                getNameCPIndex(): int
                getDescriptorCPIndex(): int
                getSignatureCPIndex(): int
                getSlot(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class LocalVariableTableElement$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LineNumberTableElement {
                constructor(arg0: int, arg1: int)
                getStartBCI(): int
                getLineNumber(): int
            }
            class MethodCounters extends sun.jvm.hotspot.oops.Metadata {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                interpreterInvocationCount(): int
                interpreterThrowoutCount(): int
                getInvocationCounter(): long
                getBackedgeCounter(): long
                printValueOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MethodCounters$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MethodData extends sun.jvm.hotspot.oops.Metadata {
                static TypeProfileWidth: int
                static BciProfileWidth: int
                static CompileThreshold: int
                static Reason_many: int
                static Reason_none: int
                static Reason_LIMIT: int
                static Reason_RECORDED_LIMIT: int
                static dsReasonMask: int
                static dsRecompileBit: int
                static sizeofMethodDataOopDesc: int
                static cellSize: int
                static trapReasonName(arg0: int): java.lang.String
                static trapStateReason(arg0: int): int
                static trapStateIsRecompiled(arg0: int): boolean
                static reasonIsRecordedPerBytecode(arg0: int): boolean
                static trapStateAddReason(arg0: int, arg1: int): int
                static trapStateSetRecompiled(arg0: int, arg1: boolean): int
                static formatTrapState(arg0: int): java.lang.String
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isMethodData(): boolean
                getMethod(): sun.jvm.hotspot.oops.Method
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                dataSize(): int
                outOfBounds(arg0: int): boolean
                dataAt(arg0: int): sun.jvm.hotspot.oops.ProfileData
                dpToDi(arg0: int): int
                firstDi(): int
                firstData(): sun.jvm.hotspot.oops.ProfileData
                nextData(arg0: sun.jvm.hotspot.oops.ProfileData): sun.jvm.hotspot.oops.ProfileData
                isValid(arg0: sun.jvm.hotspot.oops.ProfileData): boolean
                printDataOn(arg0: java.io.PrintStream): void
                orig(): byte[]
                data(): long[]
                mileageOf(arg0: sun.jvm.hotspot.oops.Method): int
                currentMileage(): int
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MethodData$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ConstMethod extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getMethod(): sun.jvm.hotspot.oops.Method
                getConstants(): sun.jvm.hotspot.oops.ConstantPool
                getConstMethodSize(): long
                getFlags(): long
                getCodeSize(): long
                getNameIndex(): long
                getSignatureIndex(): long
                getGenericSignatureIndex(): long
                getIdNum(): long
                getMaxStack(): long
                getMaxLocals(): long
                getSizeOfParameters(): long
                getName(): sun.jvm.hotspot.oops.Symbol
                getSignature(): sun.jvm.hotspot.oops.Symbol
                getGenericSignature(): sun.jvm.hotspot.oops.Symbol
                getBytecodeOrBPAt(arg0: int): int
                getBytecodeByteArg(arg0: int): byte
                getBytecodeShortArg(arg0: int): short
                getNativeShortArg(arg0: int): short
                getBytecodeIntArg(arg0: int): int
                getNativeIntArg(arg0: int): int
                getByteCode(): byte[]
                getSize(): long
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                hasLineNumberTable(): boolean
                getLineNumberFromBCI(arg0: int): int
                getLineNumberTable(): sun.jvm.hotspot.oops.LineNumberTableElement[]
                hasLocalVariableTable(): boolean
                getLocalVariableName(arg0: int, arg1: int): sun.jvm.hotspot.oops.Symbol
                getLocalVariableTable(): sun.jvm.hotspot.oops.LocalVariableTableElement[]
                hasExceptionTable(): boolean
                getExceptionTable(): sun.jvm.hotspot.oops.ExceptionTableElement[]
                hasCheckedExceptions(): boolean
                getCheckedExceptions(): sun.jvm.hotspot.oops.CheckedExceptionElement[]
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ConstMethod$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class BreakpointInfo extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getOrigBytecode(): int
                getBCI(): int
                getNameIndex(): long
                getSignatureIndex(): long
                getNext(): sun.jvm.hotspot.oops.BreakpointInfo
                match(arg0: sun.jvm.hotspot.oops.Method, arg1: int): boolean
                match(arg0: sun.jvm.hotspot.oops.Method): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class BreakpointInfo$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ConstantPool extends sun.jvm.hotspot.oops.Metadata implements sun.jvm.hotspot.runtime.ClassConstants {
                protected debugMessage(arg0: java.lang.String): void
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isConstantPool(): boolean
                getTags(): sun.jvm.hotspot.utilities.U1Array
                getOperands(): sun.jvm.hotspot.utilities.U2Array
                getCache(): sun.jvm.hotspot.oops.ConstantPoolCache
                getPoolHolder(): sun.jvm.hotspot.oops.InstanceKlass
                getLength(): int
                getResolvedReferences(): sun.jvm.hotspot.oops.Oop
                referenceMap(): sun.jvm.hotspot.utilities.U2Array
                objectToCPIndex(arg0: int): int
                getTagAt(arg0: long): sun.jvm.hotspot.utilities.ConstantTag
                getSlotAt(arg0: long): sun.jvm.hotspot.oops.ConstantPool$CPSlot
                getAddressAtRaw(arg0: long): sun.jvm.hotspot.debugger.Address
                getSymbolAt(arg0: long): sun.jvm.hotspot.oops.Symbol
                getIntAt(arg0: long): int
                getFloatAt(arg0: long): float
                getLongAt(arg0: long): long
                getDoubleAt(arg0: long): double
                getFieldOrMethodAt(arg0: int): int
                getNameAndTypeAt(arg0: int): int[]
                getNameRefAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                uncachedGetNameRefAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                getSignatureRefAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                uncachedGetSignatureRefAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                static isInvokedynamicIndex(arg0: int): boolean
                static decodeInvokedynamicIndex(arg0: int): int
                invokedynamicCPCacheIndex(arg0: int): int
                invokedynamicCPCacheEntryAt(arg0: int): sun.jvm.hotspot.oops.ConstantPoolCacheEntry
                invokeDynamicNameAndTypeRefIndexAt(arg0: int): int
                getKlassAt(arg0: int): sun.jvm.hotspot.oops.Klass
                getKlassNameAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                getUnresolvedStringAt(arg0: int): sun.jvm.hotspot.oops.Symbol
                getFieldOrMethodKlassRefAt(arg0: int): sun.jvm.hotspot.oops.InstanceKlass
                getMethodRefAt(arg0: int): sun.jvm.hotspot.oops.Method
                getFieldRefAt(arg0: int): sun.jvm.hotspot.oops.Field
                getNameAndTypeRefIndexAt(arg0: int): int
                getNameRefIndexAt(arg0: int): int
                getSignatureRefIndexAt(arg0: int): int
                getMethodHandleIndexAt(arg0: int): int
                getMethodHandleRefKindAt(arg0: int): int
                getMethodTypeIndexAt(arg0: int): int
                getBootstrapSpecifierAt(arg0: int): short[]
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                writeBytes(arg0: java.io.OutputStream): void
                printValueOn(arg0: java.io.PrintStream): void
                getSize(): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ConstantPool$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ConstantPool$CPSlot {
                this$0: sun.jvm.hotspot.oops.ConstantPool
                constructor(arg0: sun.jvm.hotspot.oops.ConstantPool, arg1: sun.jvm.hotspot.debugger.Address)
                constructor(arg0: sun.jvm.hotspot.oops.ConstantPool, arg1: sun.jvm.hotspot.oops.Symbol)
                isResolved(): boolean
                isUnresolved(): boolean
                getSymbol(): sun.jvm.hotspot.oops.Symbol
                getKlass(): sun.jvm.hotspot.oops.Klass
            }
            class DoubleField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JDoubleField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): double
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): double
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: double): void
            }
            class FloatField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JFloatField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): float
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): float
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: float): void
            }
            class LongField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JLongField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): long
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): long
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: long): void
            }
            class ShortField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JShortField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): short
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): short
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: short): void
            }
            class BooleanField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JBooleanField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): boolean
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): boolean
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: boolean): void
            }
            class CharField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JCharField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): char
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): char
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: char): void
            }
            class ByteField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JByteField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): byte
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): byte
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: char): void
            }
            class NarrowOopField extends sun.jvm.hotspot.oops.OopField {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.OopField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                getValueAsOopHandle(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.debugger.OopHandle
                setValue(arg0: sun.jvm.hotspot.oops.Oop): void
            }
            interface MetadataVisitor extends sun.jvm.hotspot.oops.FieldVisitor {
                prologue(): void
                epilogue(): void
                setObj(arg0: sun.jvm.hotspot.oops.Metadata): void
                getObj(): sun.jvm.hotspot.oops.Metadata
            }
            class IntField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.JIntField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): int
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): int
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: int): void
            }
            class OopField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.types.OopField, arg1: long)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Oop
                getValueAsOopHandle(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.debugger.OopHandle
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): sun.jvm.hotspot.oops.Oop
                getValueAsOopHandle(arg0: sun.jvm.hotspot.runtime.VMObject): sun.jvm.hotspot.debugger.OopHandle
                setValue(arg0: sun.jvm.hotspot.oops.Oop): void
            }
            class AccessFlags implements sun.jvm.hotspot.runtime.ClassConstants {
                constructor(arg0: long)
                isPublic(): boolean
                isPrivate(): boolean
                isProtected(): boolean
                isStatic(): boolean
                isFinal(): boolean
                isSynchronized(): boolean
                isSuper(): boolean
                isVolatile(): boolean
                isBridge(): boolean
                isTransient(): boolean
                isVarArgs(): boolean
                isNative(): boolean
                isEnum(): boolean
                isAnnotation(): boolean
                isInterface(): boolean
                isAbstract(): boolean
                isStrict(): boolean
                isSynthetic(): boolean
                getValue(): long
                isMonitorMatching(): boolean
                hasMonitorBytecodes(): boolean
                hasLoops(): boolean
                loopsFlagInit(): boolean
                queuedForCompilation(): boolean
                isNotOsrCompilable(): boolean
                hasLineNumberTable(): boolean
                hasCheckedExceptions(): boolean
                hasJsrs(): boolean
                isObsolete(): boolean
                hasMirandaMethods(): boolean
                hasVanillaConstructor(): boolean
                hasFinalizer(): boolean
                isCloneable(): boolean
                hasLocalVariableTable(): boolean
                fieldAccessWatched(): boolean
                fieldModificationWatched(): boolean
                fieldHasGenericSignature(): boolean
                printOn(arg0: java.io.PrintStream): void
                getStandardFlags(): int
            }
            class FieldType {
                constructor(arg0: sun.jvm.hotspot.oops.Symbol)
                isOop(): boolean
                isByte(): boolean
                isChar(): boolean
                isDouble(): boolean
                isFloat(): boolean
                isInt(): boolean
                isLong(): boolean
                isShort(): boolean
                isBoolean(): boolean
                isObject(): boolean
                isArray(): boolean
                getSignature(): sun.jvm.hotspot.oops.Symbol
                getArrayInfo(): sun.jvm.hotspot.oops.FieldType$ArrayInfo
            }
            class FieldType$ArrayInfo {
                constructor(arg0: int, arg1: int)
                dimension(): int
                elementBasicType(): int
            }
            class FieldIdentifier {
                constructor()
                getName(): java.lang.String
                printOn(arg0: java.io.PrintStream): void
            }
            class MutationException extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
            }
            interface RawHeapVisitor extends sun.jvm.hotspot.runtime.AddressVisitor {
                prologue(arg0: long): void
                epilogue(): void
            }
            interface HeapVisitor {
                prologue(arg0: long): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                epilogue(): void
            }
            class ArrayKlass extends sun.jvm.hotspot.oops.Klass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getJavaSuper(): sun.jvm.hotspot.oops.Klass
                getDimension(): long
                getHigherDimension(): sun.jvm.hotspot.oops.Klass
                getLowerDimension(): sun.jvm.hotspot.oops.Klass
                getVtableLen(): long
                getComponentMirror(): sun.jvm.hotspot.oops.Oop
                getClassStatus(): int
                computeModifierFlags(): long
                getArrayHeaderInBytes(): long
                getLog2ElementSize(): int
                getElementType(): int
                computeSubtypeOf(arg0: sun.jvm.hotspot.oops.Klass): boolean
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ArrayKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class TypeArrayKlass extends sun.jvm.hotspot.oops.ArrayKlass {
                static T_BOOLEAN: int
                static T_CHAR: int
                static T_FLOAT: int
                static T_DOUBLE: int
                static T_BYTE: int
                static T_SHORT: int
                static T_INT: int
                static T_LONG: int
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getMaxLength(): long
                getTypeName(): java.lang.String
                getElementTypeName(): java.lang.String
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                arrayKlassImpl(arg0: boolean, arg1: int): sun.jvm.hotspot.oops.Klass
                arrayKlassImpl(arg0: boolean): sun.jvm.hotspot.oops.Klass
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class TypeArrayKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Method extends sun.jvm.hotspot.oops.Metadata {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isMethod(): boolean
                getConstMethod(): sun.jvm.hotspot.oops.ConstMethod
                getConstants(): sun.jvm.hotspot.oops.ConstantPool
                getMethodData(): sun.jvm.hotspot.oops.MethodData
                getMethodCounters(): sun.jvm.hotspot.oops.MethodCounters
                getMethodSize(): long
                getMaxStack(): long
                getMaxLocals(): long
                getSizeOfParameters(): long
                getNameIndex(): long
                getSignatureIndex(): long
                getGenericSignatureIndex(): long
                getAccessFlags(): long
                getCodeSize(): long
                getVtableIndex(): long
                getInvocationCount(): long
                getBackedgeCount(): long
                getNativeMethod(): sun.jvm.hotspot.code.NMethod
                getAccessFlagsObj(): sun.jvm.hotspot.oops.AccessFlags
                getBytecodeOrBPAt(arg0: int): int
                getOrigBytecodeAt(arg0: int): int
                getBytecodeByteArg(arg0: int): byte
                getBytecodeShortArg(arg0: int): short
                getNativeShortArg(arg0: int): short
                getBytecodeIntArg(arg0: int): int
                getNativeIntArg(arg0: int): int
                getByteCode(): byte[]
                getName(): sun.jvm.hotspot.oops.Symbol
                getSignature(): sun.jvm.hotspot.oops.Symbol
                getGenericSignature(): sun.jvm.hotspot.oops.Symbol
                getMethodHolder(): sun.jvm.hotspot.oops.InstanceKlass
                isPublic(): boolean
                isPrivate(): boolean
                isProtected(): boolean
                isPackagePrivate(): boolean
                isStatic(): boolean
                isFinal(): boolean
                isSynchronized(): boolean
                isBridge(): boolean
                isVarArgs(): boolean
                isNative(): boolean
                isAbstract(): boolean
                isStrict(): boolean
                isSynthetic(): boolean
                isConstructor(): boolean
                isStaticInitializer(): boolean
                isObsolete(): boolean
                getMaskFor(arg0: int): sun.jvm.hotspot.interpreter.OopMapCacheEntry
                getSize(): long
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                hasLineNumberTable(): boolean
                getLineNumberFromBCI(arg0: int): int
                getLineNumberTable(): sun.jvm.hotspot.oops.LineNumberTableElement[]
                hasLocalVariableTable(): boolean
                getLocalVariableTable(): sun.jvm.hotspot.oops.LocalVariableTableElement[]
                getLocalVariableName(arg0: int, arg1: int): sun.jvm.hotspot.oops.Symbol
                hasExceptionTable(): boolean
                getExceptionTable(): sun.jvm.hotspot.oops.ExceptionTableElement[]
                hasCheckedExceptions(): boolean
                getCheckedExceptions(): sun.jvm.hotspot.oops.CheckedExceptionElement[]
                externalNameAndSignature(): java.lang.String
                dumpReplayData(arg0: java.io.PrintStream): void
                interpreterThrowoutCount(): int
                interpreterInvocationCount(): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Method$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class InstanceKlass extends sun.jvm.hotspot.oops.Klass {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getInitStateAsInt(): int
                getInitState(): sun.jvm.hotspot.oops.InstanceKlass$ClassState
                isLoaded(): boolean
                isLinked(): boolean
                isInitialized(): boolean
                isNotInitialized(): boolean
                isBeingInitialized(): boolean
                isInErrorState(): boolean
                getClassStatus(): int
                getObjectSize(arg0: sun.jvm.hotspot.oops.Oop): long
                getSize(): long
                static getHeaderSize(): long
                getFieldAccessFlags(arg0: int): short
                getFieldNameIndex(arg0: int): short
                getFieldName(arg0: int): sun.jvm.hotspot.oops.Symbol
                getFieldSignatureIndex(arg0: int): short
                getFieldSignature(arg0: int): sun.jvm.hotspot.oops.Symbol
                getFieldGenericSignatureIndex(arg0: int): short
                getFieldGenericSignature(arg0: int): sun.jvm.hotspot.oops.Symbol
                getFieldInitialValueIndex(arg0: int): short
                getFieldOffset(arg0: int): int
                getArrayKlasses(): sun.jvm.hotspot.oops.Klass
                getMethods(): sun.jvm.hotspot.utilities.MethodArray
                getLocalInterfaces(): sun.jvm.hotspot.utilities.KlassArray
                getTransitiveInterfaces(): sun.jvm.hotspot.utilities.KlassArray
                getJavaFieldsCount(): int
                getAllFieldsCount(): int
                getConstants(): sun.jvm.hotspot.oops.ConstantPool
                getClassLoaderData(): sun.jvm.hotspot.classfile.ClassLoaderData
                getClassLoader(): sun.jvm.hotspot.oops.Oop
                getSourceFileName(): sun.jvm.hotspot.oops.Symbol
                getSourceDebugExtension(): java.lang.String
                getNonstaticFieldSize(): long
                getStaticOopFieldCount(): long
                getNonstaticOopMapSize(): long
                getIsMarkedDependent(): boolean
                getVtableLen(): long
                getItableLen(): long
                majorVersion(): long
                minorVersion(): long
                getGenericSignature(): sun.jvm.hotspot.oops.Symbol
                getSizeHelper(): long
                computeModifierFlags(): long
                isInnerClassName(arg0: sun.jvm.hotspot.oops.Symbol): boolean
                isInnerOrLocalClassName(arg0: sun.jvm.hotspot.oops.Symbol): boolean
                implementsInterface(arg0: sun.jvm.hotspot.oops.Klass): boolean
                computeSubtypeOf(arg0: sun.jvm.hotspot.oops.Klass): boolean
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                iterateStaticFields(arg0: sun.jvm.hotspot.oops.OopVisitor): void
                iterateStaticFieldsInternal(arg0: sun.jvm.hotspot.oops.OopVisitor): void
                getJavaSuper(): sun.jvm.hotspot.oops.Klass
                getStaticFields(): sun.jvm.hotspot.oops.Field[]
                iterateNonStaticFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: sun.jvm.hotspot.oops.Oop): void
                findLocalField(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Symbol): sun.jvm.hotspot.oops.Field
                findInterfaceField(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Symbol): sun.jvm.hotspot.oops.Field
                findField(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Symbol): sun.jvm.hotspot.oops.Field
                findField(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.oops.Field
                findFieldDbg(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.oops.Field
                getFieldByIndex(arg0: int): sun.jvm.hotspot.oops.Field
                getImmediateFields(): java.util.List
                getAllFields(): java.util.List
                getImmediateMethods(): java.util.List
                getDirectImplementedInterfaces(): java.util.List
                arrayKlassImpl(arg0: boolean, arg1: int): sun.jvm.hotspot.oops.Klass
                arrayKlassImpl(arg0: boolean): sun.jvm.hotspot.oops.Klass
                signature(): java.lang.String
                findMethod(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.oops.Method
                findMethod(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Symbol): sun.jvm.hotspot.oops.Method
                getBreakpoints(): sun.jvm.hotspot.oops.BreakpointInfo
                getMethodOrdering(): sun.jvm.hotspot.utilities.IntArray
                getFields(): sun.jvm.hotspot.utilities.U2Array
                getInnerClasses(): sun.jvm.hotspot.utilities.U2Array
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class InstanceKlass$StaticField {
                flags: sun.jvm.hotspot.oops.AccessFlags
                field: sun.jvm.hotspot.oops.Field
                constructor(arg0: sun.jvm.hotspot.oops.Field, arg1: sun.jvm.hotspot.oops.AccessFlags)
            }
            interface InstanceKlass$EnclosingMethodAttributeOffset {
                static enclosing_method_class_index_offset: int
                static enclosing_method_method_index_offset: int
                static enclosing_method_attribute_size: int
            }
            interface InstanceKlass$InnerClassAttributeOffset {
                static innerClassInnerClassInfoOffset: int
                static innerClassOuterClassInfoOffset: int
                static innerClassInnerNameOffset: int
                static innerClassAccessFlagsOffset: int
                static innerClassNextOffset: int
            }
            class InstanceKlass$ClassState {
                static ALLOCATED: sun.jvm.hotspot.oops.InstanceKlass$ClassState
                static LOADED: sun.jvm.hotspot.oops.InstanceKlass$ClassState
                static LINKED: sun.jvm.hotspot.oops.InstanceKlass$ClassState
                static BEING_INITIALIZED: sun.jvm.hotspot.oops.InstanceKlass$ClassState
                static FULLY_INITIALIZED: sun.jvm.hotspot.oops.InstanceKlass$ClassState
                static INITIALIZATION_ERROR: sun.jvm.hotspot.oops.InstanceKlass$ClassState
                toString(): java.lang.String
            }
            class InstanceKlass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ObjArray extends sun.jvm.hotspot.oops.Array {
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.oops.ObjectHeap)
                isObjArray(): boolean
                getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                getObjAt(arg0: long): sun.jvm.hotspot.oops.Oop
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: boolean): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class ObjArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Array extends sun.jvm.hotspot.oops.Oop {
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.oops.ObjectHeap)
                getLength(): long
                getObjectSize(): long
                static baseOffsetInBytes(arg0: sun.jvm.hotspot.runtime.BasicType): long
                isArray(): boolean
                iterateFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: boolean): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Array$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class TypeArray extends sun.jvm.hotspot.oops.Array {
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.oops.ObjectHeap)
                isTypeArray(): boolean
                getByteAt(arg0: long): byte
                getBooleanAt(arg0: long): boolean
                getCharAt(arg0: long): char
                getIntAt(arg0: long): int
                getShortAt(arg0: long): short
                getLongAt(arg0: long): long
                getFloatAt(arg0: long): float
                getDoubleAt(arg0: long): double
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: boolean): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class TypeArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Instance extends sun.jvm.hotspot.oops.Oop {
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.oops.ObjectHeap)
                static getHeaderSize(): long
                isInstance(): boolean
                iterateFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: boolean): void
                printValueOn(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Instance$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Symbol extends sun.jvm.hotspot.runtime.VMObject {
                static create(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.oops.Symbol
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isSymbol(): boolean
                getLength(): long
                getByteAt(arg0: long): byte
                identityHash(): int
                equals(arg0: byte[]): boolean
                asByteArray(): byte[]
                asString(): java.lang.String
                startsWith(arg0: java.lang.String): boolean
                printValueOn(arg0: java.io.PrintStream): void
                fastCompare(arg0: sun.jvm.hotspot.oops.Symbol): int
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Symbol$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface FieldVisitor {
                doMetadata(arg0: sun.jvm.hotspot.oops.MetadataField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doOop(arg0: sun.jvm.hotspot.oops.NarrowOopField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
            }
            interface OopVisitor extends sun.jvm.hotspot.oops.FieldVisitor {
                prologue(): void
                epilogue(): void
                setObj(arg0: sun.jvm.hotspot.oops.Oop): void
                getObj(): sun.jvm.hotspot.oops.Oop
            }
            abstract class Metadata extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static instantiateWrapperFor(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.oops.Metadata
                iterate(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                printValueOn(arg0: java.io.PrintStream): void
                dumpReplayData(arg0: java.io.PrintStream): void
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Metadata$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Klass extends sun.jvm.hotspot.oops.Metadata implements sun.jvm.hotspot.runtime.ClassConstants {
                static LH_INSTANCE_SLOW_PATH_BIT: int
                static LH_LOG2_ELEMENT_SIZE_SHIFT: int
                static LH_ELEMENT_TYPE_SHIFT: int
                static LH_HEADER_SIZE_SHIFT: int
                static LH_ARRAY_TAG_SHIFT: int
                static LH_ARRAY_TAG_TYPE_VALUE: int
                static LH_ARRAY_TAG_OBJ_VALUE: int
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getClassStatus(): int
                isKlass(): boolean
                protected getSymbol(arg0: sun.jvm.hotspot.types.AddressField): sun.jvm.hotspot.oops.Symbol
                getJavaMirror(): sun.jvm.hotspot.oops.Instance
                getSuper(): sun.jvm.hotspot.oops.Klass
                getJavaSuper(): sun.jvm.hotspot.oops.Klass
                getLayoutHelper(): int
                getName(): sun.jvm.hotspot.oops.Symbol
                getAccessFlags(): long
                getAccessFlagsObj(): sun.jvm.hotspot.oops.AccessFlags
                getSubklassKlass(): sun.jvm.hotspot.oops.Klass
                getNextSiblingKlass(): sun.jvm.hotspot.oops.Klass
                traceID(): long
                computeModifierFlags(): long
                getClassModifiers(): long
                isSubclassOf(arg0: sun.jvm.hotspot.oops.Klass): boolean
                isSubtypeOf(arg0: sun.jvm.hotspot.oops.Klass): boolean
                computeSubtypeOf(arg0: sun.jvm.hotspot.oops.Klass): boolean
                lca(arg0: sun.jvm.hotspot.oops.Klass): sun.jvm.hotspot.oops.Klass
                printValueOn(arg0: java.io.PrintStream): void
                iterateFields(arg0: sun.jvm.hotspot.oops.MetadataVisitor): void
                getObjectSize(): long
                arrayKlass(arg0: int): sun.jvm.hotspot.oops.Klass
                arrayKlass(): sun.jvm.hotspot.oops.Klass
                arrayKlassOrNull(arg0: int): sun.jvm.hotspot.oops.Klass
                arrayKlassOrNull(): sun.jvm.hotspot.oops.Klass
                arrayKlassImpl(arg0: boolean, arg1: int): sun.jvm.hotspot.oops.Klass
                arrayKlassImpl(arg0: boolean): sun.jvm.hotspot.oops.Klass
                signature(): java.lang.String
                isPublic(): boolean
                isFinal(): boolean
                isInterface(): boolean
                isAbstract(): boolean
                isSuper(): boolean
                isSynthetic(): boolean
                hasFinalizer(): boolean
                isCloneable(): boolean
                hasVanillaConstructor(): boolean
                hasMirandaMethods(): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Klass$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Mark extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                value(): long
                valueAsAddress(): sun.jvm.hotspot.debugger.Address
                hasBiasPattern(): boolean
                biasedLocker(): sun.jvm.hotspot.runtime.JavaThread
                isBiasedAnonymously(): boolean
                isLocked(): boolean
                isUnlocked(): boolean
                isMarked(): boolean
                isBeingInflated(): boolean
                mustBePreserved(): boolean
                hasLocker(): boolean
                locker(): sun.jvm.hotspot.runtime.BasicLock
                hasMonitor(): boolean
                monitor(): sun.jvm.hotspot.runtime.ObjectMonitor
                hasDisplacedMarkHelper(): boolean
                displacedMarkHelper(): sun.jvm.hotspot.oops.Mark
                age(): int
                hash(): long
                hasNoHash(): boolean
                printOn(arg0: java.io.PrintStream): void
                isCmsFreeChunk(): boolean
                getSize(): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Mark$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class NarrowKlassField extends sun.jvm.hotspot.oops.MetadataField {
                constructor(arg0: sun.jvm.hotspot.types.AddressField, arg1: long)
                getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.oops.Metadata
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: long): void
            }
            class MetadataField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.types.AddressField, arg1: long)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.oops.Metadata
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): sun.jvm.hotspot.oops.Metadata
                getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.oops.Metadata
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: long): void
            }
            class Field {
                constructor(arg0: sun.jvm.hotspot.oops.FieldIdentifier, arg1: long, arg2: boolean)
                constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: int)
                getOffset(): long
                getID(): sun.jvm.hotspot.oops.FieldIdentifier
                isVMField(): boolean
                isNamedField(): boolean
                printOn(arg0: java.io.PrintStream): void
                getFieldHolder(): sun.jvm.hotspot.oops.InstanceKlass
                getFieldIndex(): int
                getAccessFlags(): long
                getAccessFlagsObj(): sun.jvm.hotspot.oops.AccessFlags
                getFieldType(): sun.jvm.hotspot.oops.FieldType
                getSignature(): sun.jvm.hotspot.oops.Symbol
                getGenericSignature(): sun.jvm.hotspot.oops.Symbol
                hasInitialValue(): boolean
                isPublic(): boolean
                isPrivate(): boolean
                isProtected(): boolean
                isPackagePrivate(): boolean
                isStatic(): boolean
                isFinal(): boolean
                isVolatile(): boolean
                isTransient(): boolean
                isSynthetic(): boolean
                isEnumConstant(): boolean
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
            }
            class CIntField extends sun.jvm.hotspot.oops.Field {
                constructor(arg0: sun.jvm.hotspot.types.CIntegerField, arg1: long)
                getValue(arg0: sun.jvm.hotspot.oops.Oop): long
                getValue(arg0: sun.jvm.hotspot.runtime.VMObject): long
                getValue(arg0: sun.jvm.hotspot.debugger.Address): long
                setValue(arg0: sun.jvm.hotspot.oops.Oop, arg1: long): void
            }
            class ObjectHeap {
                initialize(arg0: sun.jvm.hotspot.types.TypeDataBase): void
                constructor(arg0: sun.jvm.hotspot.types.TypeDataBase)
                equal(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.Oop): boolean
                getOopSize(): long
                getByteSize(): long
                getCharSize(): long
                getBooleanSize(): long
                getIntSize(): long
                getShortSize(): long
                getLongSize(): long
                getFloatSize(): long
                getDoubleSize(): long
                getBoolArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getByteArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getCharArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getIntArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getShortArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getLongArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getSingleArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                getDoubleArrayKlassObj(): sun.jvm.hotspot.oops.TypeArrayKlass
                typeArrayKlassObj(arg0: int): sun.jvm.hotspot.oops.Klass
                iterate(arg0: sun.jvm.hotspot.oops.HeapVisitor): void
                iterate(arg0: sun.jvm.hotspot.oops.HeapVisitor, arg1: sun.jvm.hotspot.oops.ObjectHeap$ObjectFilter): void
                iterateObjectsOfKlass(arg0: sun.jvm.hotspot.oops.HeapVisitor, arg1: sun.jvm.hotspot.oops.Klass, arg2: boolean): void
                iterateObjectsOfKlass(arg0: sun.jvm.hotspot.oops.HeapVisitor, arg1: sun.jvm.hotspot.oops.Klass): void
                iterateRaw(arg0: sun.jvm.hotspot.oops.RawHeapVisitor): void
                isValidMethod(arg0: sun.jvm.hotspot.debugger.Address): boolean
                newOop(arg0: sun.jvm.hotspot.debugger.OopHandle): sun.jvm.hotspot.oops.Oop
                print(): void
                static access$000(arg0: sun.jvm.hotspot.oops.ObjectHeap, arg1: java.lang.String, arg2: java.util.List, arg3: java.util.List): void
            }
            class ObjectHeap$3 implements java.util.Comparator {
                this$0: sun.jvm.hotspot.oops.ObjectHeap
                constructor(arg0: sun.jvm.hotspot.oops.ObjectHeap)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class ObjectHeap$LiveRegionsCollector implements sun.jvm.hotspot.memory.SpaceClosure {
                this$0: sun.jvm.hotspot.oops.ObjectHeap
                constructor(arg0: sun.jvm.hotspot.oops.ObjectHeap, arg1: java.util.List)
                doSpace(arg0: sun.jvm.hotspot.memory.Space): void
            }
            class ObjectHeap$2 implements sun.jvm.hotspot.oops.ObjectHeap$ObjectFilter {
                val$k: sun.jvm.hotspot.oops.Klass
                this$0: sun.jvm.hotspot.oops.ObjectHeap
                constructor(arg0: sun.jvm.hotspot.oops.ObjectHeap, arg1: sun.jvm.hotspot.oops.Klass)
                canInclude(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class ObjectHeap$1 implements sun.jvm.hotspot.oops.ObjectHeap$ObjectFilter {
                val$k: sun.jvm.hotspot.oops.Klass
                this$0: sun.jvm.hotspot.oops.ObjectHeap
                constructor(arg0: sun.jvm.hotspot.oops.ObjectHeap, arg1: sun.jvm.hotspot.oops.Klass)
                canInclude(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            interface ObjectHeap$ObjectFilter {
                canInclude(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class Oop {
                constructor(arg0: sun.jvm.hotspot.debugger.OopHandle, arg1: sun.jvm.hotspot.oops.ObjectHeap)
                getHeap(): sun.jvm.hotspot.oops.ObjectHeap
                getHandle(): sun.jvm.hotspot.debugger.OopHandle
                static getHeaderSize(): long
                getMark(): sun.jvm.hotspot.oops.Mark
                getKlass(): sun.jvm.hotspot.oops.Klass
                isA(arg0: sun.jvm.hotspot.oops.Klass): boolean
                getObjectSize(): long
                isInstance(): boolean
                isInstanceRef(): boolean
                isArray(): boolean
                isObjArray(): boolean
                isTypeArray(): boolean
                isThread(): boolean
                static alignObjectSize(arg0: long): long
                static alignObjectOffset(arg0: long): long
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                identityHash(): long
                slowIdentityHash(): long
                iterate(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: boolean): void
                iterateFields(arg0: sun.jvm.hotspot.oops.OopVisitor, arg1: boolean): void
                print(): void
                printValue(): void
                printRaw(): void
                static printOopValueOn(arg0: sun.jvm.hotspot.oops.Oop, arg1: java.io.PrintStream): void
                static printOopAddressOn(arg0: sun.jvm.hotspot.oops.Oop, arg1: java.io.PrintStream): void
                printOn(arg0: java.io.PrintStream): void
                printValueOn(arg0: java.io.PrintStream): void
                printRawOn(arg0: java.io.PrintStream): void
                verify(): boolean
                static getKlassForOopHandle(arg0: sun.jvm.hotspot.debugger.OopHandle): sun.jvm.hotspot.oops.Klass
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Oop$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            
         }
         namespace utilities {
            class SystemDictionaryHelper {
                constructor()
                static sun.jvm.hotspot.oops.InstanceKlass[]: synchronized
                static findInstanceKlasses(arg0: java.lang.String): sun.jvm.hotspot.oops.InstanceKlass[]
                static findInstanceKlass(arg0: java.lang.String): sun.jvm.hotspot.oops.InstanceKlass
                static access$000(): void
            }
            class SystemDictionaryHelper$3 implements java.util.Comparator {
                constructor()
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class SystemDictionaryHelper$2 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                val$tmp: java.util.Vector
                constructor(arg0: java.util.Vector)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class SystemDictionaryHelper$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class StreamMonitor implements java.lang.Runnable {
                constructor(arg0: java.io.InputStream)
                constructor(arg0: java.io.InputStream, arg1: java.lang.String, arg2: boolean)
                addTrigger(arg0: java.lang.String, arg1: int): boolean
                addTrigger(arg0: java.lang.String[], arg1: int): boolean
                removeTrigger(arg0: java.lang.String): boolean
                removeTrigger(arg0: java.lang.String[]): boolean
                java.util.List: synchronized
                boolean: synchronized
                void: synchronized
                java.lang.String: synchronized
                run(): void
            }
            class StreamMonitor$Trigger {
                this$0: sun.jvm.hotspot.utilities.StreamMonitor
                constructor(arg0: sun.jvm.hotspot.utilities.StreamMonitor, arg1: java.lang.String, arg2: int)
                constructor(arg0: sun.jvm.hotspot.utilities.StreamMonitor, arg1: java.lang.String[], arg2: int)
                matches(arg0: java.lang.String): boolean
                equals(arg0: java.lang.String[]): boolean
                static access$000(arg0: sun.jvm.hotspot.utilities.StreamMonitor$Trigger): int
            }
            class RobustOopDeterminator {
                constructor()
                static oopLooksValid(arg0: sun.jvm.hotspot.debugger.OopHandle): boolean
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class RobustOopDeterminator$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ReversePtrsAnalysis {
                constructor()
                setHeapProgressThunk(arg0: sun.jvm.hotspot.utilities.HeapProgressThunk): void
                run(): void
                static access$000(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis): sun.jvm.hotspot.utilities.ReversePtrs
                static access$100(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis, arg1: sun.jvm.hotspot.oops.Oop): void
                static access$200(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis): sun.jvm.hotspot.utilities.MarkBits
                static access$300(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis): sun.jvm.hotspot.oops.ObjectHeap
            }
            class ReversePtrsAnalysis$RootVisitor implements sun.jvm.hotspot.runtime.AddressVisitor {
                this$0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis
                constructor(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis, arg1: java.lang.String)
                visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class ReversePtrsAnalysis$2 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$currObj: sun.jvm.hotspot.oops.Oop
                val$workList: java.util.Stack
                this$0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis
                constructor(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis, arg1: sun.jvm.hotspot.oops.Oop, arg2: java.util.Stack)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
            }
            class ReversePtrsAnalysis$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                this$0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis
                constructor(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class ReversePtrsAnalysis$1$1 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$ik: sun.jvm.hotspot.oops.InstanceKlass
                this$1: sun.jvm.hotspot.utilities.ReversePtrsAnalysis$1
                constructor(arg0: sun.jvm.hotspot.utilities.ReversePtrsAnalysis$1, arg1: sun.jvm.hotspot.oops.InstanceKlass)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
            }
            class ProgressiveHeapVisitor implements sun.jvm.hotspot.oops.HeapVisitor {
                constructor(arg0: sun.jvm.hotspot.oops.HeapVisitor, arg1: sun.jvm.hotspot.utilities.HeapProgressThunk)
                prologue(arg0: long): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                epilogue(): void
            }
            class ProcImageClassLoader extends java.lang.ClassLoader {
                constructor(arg0: java.lang.ClassLoader)
                constructor()
                protected findClass(arg0: java.lang.String): java.lang.Class
            }
            class PointerLocation {
                addr: sun.jvm.hotspot.debugger.Address
                heap: sun.jvm.hotspot.gc_interface.CollectedHeap
                gen: sun.jvm.hotspot.memory.Generation
                inTLAB: boolean
                tlabThread: sun.jvm.hotspot.runtime.JavaThread
                tlab: sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer
                inInterpreter: boolean
                inCodeCache: boolean
                interpreterCodelet: sun.jvm.hotspot.interpreter.InterpreterCodelet
                blob: sun.jvm.hotspot.code.CodeBlob
                inBlobCode: boolean
                inBlobData: boolean
                inBlobOops: boolean
                inBlobUnknownLocation: boolean
                inStrongGlobalJNIHandleBlock: boolean
                inWeakGlobalJNIHandleBlock: boolean
                inLocalJNIHandleBlock: boolean
                handleBlock: sun.jvm.hotspot.runtime.JNIHandleBlock
                handleThread: sun.jvm.hotspot.runtime.Thread
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                isInHeap(): boolean
                isInNewGen(): boolean
                isInOldGen(): boolean
                inOtherGen(): boolean
                getGeneration(): sun.jvm.hotspot.memory.Generation
                isInTLAB(): boolean
                getTLABThread(): sun.jvm.hotspot.runtime.JavaThread
                getTLAB(): sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer
                isInInterpreter(): boolean
                getInterpreterCodelet(): sun.jvm.hotspot.interpreter.InterpreterCodelet
                isInCodeCache(): boolean
                getCodeBlob(): sun.jvm.hotspot.code.CodeBlob
                isInBlobCode(): boolean
                isInBlobData(): boolean
                isInBlobOops(): boolean
                isInBlobUnknownLocation(): boolean
                isInStrongGlobalJNIHandleBlock(): boolean
                isInWeakGlobalJNIHandleBlock(): boolean
                isInLocalJNIHandleBlock(): boolean
                getJNIHandleBlock(): sun.jvm.hotspot.runtime.JNIHandleBlock
                getJNIHandleThread(): sun.jvm.hotspot.runtime.Thread
                isUnknown(): boolean
                toString(): java.lang.String
                print(): void
                printOn(arg0: java.io.PrintStream): void
            }
            class PointerFinder {
                constructor()
                static find(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.utilities.PointerLocation
            }
            class UnsupportedPlatformException extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
            }
            class PlatformInfo {
                constructor()
                static getOS(): java.lang.String
                static getCPU(): java.lang.String
                static main(arg0: java.lang.String[]): void
            }
            class MarkBits {
                constructor(arg0: sun.jvm.hotspot.gc_interface.CollectedHeap)
                clear(): void
                mark(arg0: sun.jvm.hotspot.oops.Oop): boolean
                clear(arg0: sun.jvm.hotspot.oops.Oop): void
            }
            class LivenessAnalysis {
                static computeAllLivenessPaths(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.utilities.LivenessPathList
            }
            class IntegerEnum {
                protected (: sun.jvm.hotspot.utilities.IntegerEnum
                getValue(): int
            }
            class HeapHprofBinWriter extends sun.jvm.hotspot.utilities.AbstractHeapGraphWriter {
                constructor()
                void: synchronized
                protected writeHeapRecordPrologue(): void
                protected writeHeapRecordEpilogue(): void
                protected writeClass(arg0: sun.jvm.hotspot.oops.Instance): void
                protected writeJavaThread(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: int): void
                protected writeLocalJNIHandles(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: int): void
                protected writeGlobalJNIHandle(arg0: sun.jvm.hotspot.debugger.Address): void
                protected writeObjectArray(arg0: sun.jvm.hotspot.oops.ObjArray): void
                protected writePrimitiveArray(arg0: sun.jvm.hotspot.oops.TypeArray): void
                protected writeInstance(arg0: sun.jvm.hotspot.oops.Instance): void
                static signatureToHprofKind(arg0: char): int
                static access$000(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter, arg1: sun.jvm.hotspot.oops.Klass): void
                static access$100(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter): sun.jvm.hotspot.oops.ObjectHeap
                static access$200(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter): java.io.DataOutputStream
                static access$300(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter, arg1: sun.jvm.hotspot.oops.Oop): void
                static access$400(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter, arg1: sun.jvm.hotspot.oops.Symbol): void
                static access$500(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter): int
                static access$600(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter, arg1: int, arg2: int): void
                static access$700(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter, arg1: sun.jvm.hotspot.oops.Symbol): void
            }
            class HeapHprofBinWriter$ClassData {
                instSize: int
                fields: java.util.List
                constructor(arg0: int, arg1: java.util.List)
            }
            class HeapHprofBinWriter$4 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                this$0: sun.jvm.hotspot.utilities.HeapHprofBinWriter
                constructor(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class HeapHprofBinWriter$3 implements sun.jvm.hotspot.memory.SymbolTable$SymbolVisitor {
                this$0: sun.jvm.hotspot.utilities.HeapHprofBinWriter
                constructor(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter)
                visit(arg0: sun.jvm.hotspot.oops.Symbol): void
            }
            class HeapHprofBinWriter$2 implements sun.jvm.hotspot.runtime.AddressVisitor {
                val$threadIndex: int
                this$0: sun.jvm.hotspot.utilities.HeapHprofBinWriter
                constructor(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter, arg1: int)
                visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class HeapHprofBinWriter$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                this$0: sun.jvm.hotspot.utilities.HeapHprofBinWriter
                constructor(arg0: sun.jvm.hotspot.utilities.HeapHprofBinWriter)
                visit(arg0: sun.jvm.hotspot.oops.Klass): void
            }
            class HeapGXLWriter extends sun.jvm.hotspot.utilities.AbstractHeapGraphWriter {
                constructor()
                write(arg0: java.lang.String): void
                protected writeHeapHeader(): void
                protected writeObjectHeader(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writeObjectFooter(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writeObjectArray(arg0: sun.jvm.hotspot.oops.ObjArray): void
                protected writePrimitiveArray(arg0: sun.jvm.hotspot.oops.TypeArray): void
                protected writeClass(arg0: sun.jvm.hotspot.oops.Instance): void
                protected writeReferenceField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.OopField): void
                protected writeByteField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.ByteField): void
                protected writeCharField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.CharField): void
                protected writeBooleanField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.BooleanField): void
                protected writeShortField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.ShortField): void
                protected writeIntField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.IntField): void
                protected writeLongField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.LongField): void
                protected writeFloatField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.FloatField): void
                protected writeDoubleField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.DoubleField): void
                protected writeHeapFooter(): void
            }
            class HashtableBucket extends sun.jvm.hotspot.runtime.VMObject {
                getEntry(arg0: java.lang.Class): sun.jvm.hotspot.utilities.BasicHashtableEntry
                entry(): sun.jvm.hotspot.utilities.BasicHashtableEntry
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class HashtableBucket$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ConstIterator implements java.util.Iterator {
                constructor(arg0: java.util.Iterator)
                hasNext(): boolean
                next(): java.lang.Object
                remove(): void
            }
            class CStringUtilities {
                constructor()
                static getStringLength(arg0: sun.jvm.hotspot.debugger.Address): int
                static getString(arg0: sun.jvm.hotspot.debugger.Address): java.lang.String
            }
            class CPPExpressions {
                constructor()
                static parseCast(arg0: java.lang.String): sun.jvm.hotspot.utilities.CPPExpressions$CastExpr
                static parseStaticField(arg0: java.lang.String): sun.jvm.hotspot.utilities.CPPExpressions$StaticFieldExpr
            }
            class CPPExpressions$1 {
            }
            class CPPExpressions$StaticFieldExpr {
                getContainingType(): java.lang.String
                getFieldName(): java.lang.String
                constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: sun.jvm.hotspot.utilities.CPPExpressions$1)
            }
            class CPPExpressions$CastExpr {
                getType(): java.lang.String
                getAddress(): java.lang.String
                constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: sun.jvm.hotspot.utilities.CPPExpressions$1)
            }
            class Bits {
                static AllBits: int
                static NoBits: int
                static OneBit: int
                static BitsPerByte: int
                static BitsPerInt: int
                static LogBytesPerInt: int
                static LogBytesPerLong: int
                constructor()
                static setBits(arg0: int, arg1: int): int
                static clearBits(arg0: int, arg1: int): int
                static nthBit(arg0: int): int
                static setNthBit(arg0: int, arg1: int): int
                static clearNthBit(arg0: int, arg1: int): int
                static isSetNthBit(arg0: int, arg1: int): boolean
                static rightNBits(arg0: int): int
                static maskBits(arg0: int, arg1: int): int
                static maskBitsLong(arg0: long, arg1: long): long
                static roundTo(arg0: int, arg1: int): int
            }
            class AssertionFailure extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
            }
            class Assert {
                static ASSERTS_ENABLED: boolean
                constructor()
                static that(arg0: boolean, arg1: java.lang.String): void
            }
            interface AltPlatformInfo {
                knownCPU(arg0: java.lang.String): boolean
            }
            class AddressOps {
                constructor()
                static lessThan(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static greaterThan(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static equal(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static lt(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static lte(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static gt(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static gte(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                static max(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                static min(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
            }
            interface HeapGraphWriter {
                write(arg0: java.lang.String): void
            }
            abstract class AbstractHeapGraphWriter implements sun.jvm.hotspot.utilities.HeapGraphWriter {
                protected javaLangClass: sun.jvm.hotspot.oops.Symbol
                protected javaLangString: sun.jvm.hotspot.oops.Symbol
                protected javaLangThread: sun.jvm.hotspot.oops.Symbol
                constructor()
                protected write(): void
                protected writeJavaThreads(): void
                protected writeJavaThread(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: int): void
                protected writeGlobalJNIHandles(): void
                protected writeGlobalJNIHandle(arg0: sun.jvm.hotspot.debugger.Address): void
                protected writeHeapHeader(): void
                protected writeInternalObject(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writePrimitiveArray(arg0: sun.jvm.hotspot.oops.TypeArray): void
                protected writeObjectArray(arg0: sun.jvm.hotspot.oops.ObjArray): void
                protected writeInstance(arg0: sun.jvm.hotspot.oops.Instance): void
                protected writeString(arg0: sun.jvm.hotspot.oops.Instance): void
                protected writeClass(arg0: sun.jvm.hotspot.oops.Instance): void
                protected writeThread(arg0: sun.jvm.hotspot.oops.Instance): void
                protected writeObject(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writeObjectHeader(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writeObjectFields(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writeObjectFields(arg0: sun.jvm.hotspot.oops.InstanceKlass): void
                protected writeReferenceField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.OopField): void
                protected writeByteField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.ByteField): void
                protected writeCharField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.CharField): void
                protected writeBooleanField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.BooleanField): void
                protected writeShortField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.ShortField): void
                protected writeIntField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.IntField): void
                protected writeLongField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.LongField): void
                protected writeFloatField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.FloatField): void
                protected writeDoubleField(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.DoubleField): void
                protected writeObjectFooter(arg0: sun.jvm.hotspot.oops.Oop): void
                protected writeHeapFooter(): void
                protected writeHeapRecordPrologue(): void
                protected writeHeapRecordEpilogue(): void
                protected handleRuntimeException(arg0: java.lang.RuntimeException): void
                protected isJavaVisible(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class AbstractHeapGraphWriter$4 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                this$0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter
                constructor(arg0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
            }
            class AbstractHeapGraphWriter$3 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$oop: sun.jvm.hotspot.oops.Oop
                this$0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter
                constructor(arg0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter, arg1: sun.jvm.hotspot.oops.Oop)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
            }
            class AbstractHeapGraphWriter$2 implements sun.jvm.hotspot.runtime.AddressVisitor {
                this$0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter
                constructor(arg0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter)
                visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
            }
            class AbstractHeapGraphWriter$1 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                this$0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter
                constructor(arg0: sun.jvm.hotspot.utilities.AbstractHeapGraphWriter)
                prologue(arg0: long): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                epilogue(): void
            }
            namespace memo {
               abstract class MemoizedShort {
                   constructor()
                   protected computeValue(): short
                   getValue(): short
               }
               abstract class MemoizedLong {
                   constructor()
                   protected computeValue(): long
                   getValue(): long
               }
               abstract class MemoizedInt {
                   constructor()
                   protected computeValue(): int
                   getValue(): int
               }
               abstract class MemoizedFloat {
                   constructor()
                   protected computeValue(): float
                   getValue(): float
               }
               abstract class MemoizedDouble {
                   constructor()
                   protected computeValue(): double
                   getValue(): double
               }
               abstract class MemoizedChar {
                   constructor()
                   protected computeValue(): char
                   getValue(): char
               }
               abstract class MemoizedByte {
                   constructor()
                   protected computeValue(): byte
                   getValue(): byte
               }
               abstract class MemoizedBoolean {
                   constructor()
                   protected computeValue(): boolean
                   getValue(): boolean
               }
               abstract class MemoizedObject {
                   constructor()
                   protected computeValue(): java.lang.Object
                   getValue(): java.lang.Object
               }
               
            }
            class GenericGrowableArray extends sun.jvm.hotspot.runtime.VMObject {
                max(): int
                length(): int
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class GenericGrowableArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class GrowableArray<T> extends sun.jvm.hotspot.utilities.GenericGrowableArray {
                static sun.jvm.hotspot.utilities.GrowableArray<S>: <S>
                at(arg0: int): T
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class GrowableArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface HeapProgressThunk {
                heapIterationFractionUpdate(arg0: double): void
                heapIterationComplete(): void
            }
            class FindObjectByType implements sun.jvm.hotspot.oops.HeapVisitor {
                constructor(arg0: sun.jvm.hotspot.oops.Klass)
                getResults(): java.util.List
                prologue(arg0: long): void
                epilogue(): void
                doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
            }
            class RBColor {
                static RED: sun.jvm.hotspot.utilities.RBColor
                static BLACK: sun.jvm.hotspot.utilities.RBColor
                getName(): java.lang.String
            }
            class IntervalNode extends sun.jvm.hotspot.utilities.RBNode {
                constructor(arg0: sun.jvm.hotspot.utilities.Interval, arg1: java.util.Comparator, arg2: java.lang.Object)
                copyFrom(arg0: sun.jvm.hotspot.utilities.RBNode): void
                getInterval(): sun.jvm.hotspot.utilities.Interval
                getMinEndpoint(): java.lang.Object
                getMaxEndpoint(): java.lang.Object
                update(): boolean
                computeMinEndpoint(): java.lang.Object
                computeMaxEndpoint(): java.lang.Object
                toString(): java.lang.String
            }
            class RBNode {
                constructor(arg0: java.lang.Object)
                getData(): java.lang.Object
                copyFrom(arg0: sun.jvm.hotspot.utilities.RBNode): void
                update(): boolean
                getColor(): sun.jvm.hotspot.utilities.RBColor
                setColor(arg0: sun.jvm.hotspot.utilities.RBColor): void
                getParent(): sun.jvm.hotspot.utilities.RBNode
                setParent(arg0: sun.jvm.hotspot.utilities.RBNode): void
                getLeft(): sun.jvm.hotspot.utilities.RBNode
                setLeft(arg0: sun.jvm.hotspot.utilities.RBNode): void
                getRight(): sun.jvm.hotspot.utilities.RBNode
                setRight(arg0: sun.jvm.hotspot.utilities.RBNode): void
            }
            class Interval {
                constructor(arg0: java.lang.Object, arg1: java.lang.Object)
                getLowEndpoint(): java.lang.Object
                getHighEndpoint(): java.lang.Object
                overlaps(arg0: sun.jvm.hotspot.utilities.Interval, arg1: java.util.Comparator): boolean
                overlaps(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.util.Comparator): boolean
                toString(): java.lang.String
            }
            class RBTree {
                protected static DEBUGGING: boolean
                protected static VERBOSE: boolean
                protected static REALLY_VERBOSE: boolean
                constructor(arg0: java.util.Comparator)
                getRoot(): sun.jvm.hotspot.utilities.RBNode
                insertNode(arg0: sun.jvm.hotspot.utilities.RBNode): void
                deleteNode(arg0: sun.jvm.hotspot.utilities.RBNode): void
                print(): void
                printOn(arg0: java.io.PrintStream): void
                protected getNodeValue(arg0: sun.jvm.hotspot.utilities.RBNode): java.lang.Object
                protected verify(): void
                static main(arg0: java.lang.String[]): void
            }
            class RBTree$1 implements java.util.Comparator {
                constructor()
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class IntervalTree extends sun.jvm.hotspot.utilities.RBTree {
                constructor(arg0: java.util.Comparator)
                insert(arg0: sun.jvm.hotspot.utilities.Interval, arg1: java.lang.Object): void
                findAllNodesIntersecting(arg0: sun.jvm.hotspot.utilities.Interval): java.util.List
                print(): void
                printOn(arg0: java.io.PrintStream): void
                protected getNodeValue(arg0: sun.jvm.hotspot.utilities.RBNode): java.lang.Object
                protected verify(): void
            }
            class IntervalTree$IntervalComparator implements java.util.Comparator {
                constructor(arg0: java.util.Comparator)
                compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class LivenessPath {
                constructor()
                size(): int
                get(arg0: int): sun.jvm.hotspot.utilities.LivenessPathElement
                printOn(arg0: java.io.PrintStream): void
                isComplete(): boolean
                peek(): sun.jvm.hotspot.utilities.LivenessPathElement
                push(arg0: sun.jvm.hotspot.utilities.LivenessPathElement): void
                pop(): void
                copy(): sun.jvm.hotspot.utilities.LivenessPath
            }
            interface MessageQueue {
                readMessage(): java.lang.Object
                readMessageWithTimeout(arg0: long): java.lang.Object
                writeMessage(arg0: java.lang.Object): void
            }
            class MessageQueueBackend {
                constructor()
                getFirstQueue(): sun.jvm.hotspot.utilities.MessageQueue
                getSecondQueue(): sun.jvm.hotspot.utilities.MessageQueue
            }
            class MessageQueueBackend$MessageQueueImpl implements sun.jvm.hotspot.utilities.MessageQueue {
                this$0: sun.jvm.hotspot.utilities.MessageQueueBackend
                constructor(arg0: sun.jvm.hotspot.utilities.MessageQueueBackend, arg1: java.util.LinkedList, arg2: java.util.LinkedList)
                readMessage(): java.lang.Object
                readMessageWithTimeout(arg0: long): java.lang.Object
                writeMessage(arg0: java.lang.Object): void
            }
            class LivenessPathList {
                constructor()
                size(): int
                get(arg0: int): sun.jvm.hotspot.utilities.LivenessPath
                add(arg0: sun.jvm.hotspot.utilities.LivenessPath): void
                remove(arg0: sun.jvm.hotspot.utilities.LivenessPath): void
            }
            class WorkerThread {
                constructor()
                invokeLater(arg0: java.lang.Runnable): void
                shutdown(): void
                static access$000(arg0: sun.jvm.hotspot.utilities.WorkerThread): sun.jvm.hotspot.utilities.MessageQueueBackend
                static access$100(arg0: sun.jvm.hotspot.utilities.WorkerThread): boolean
            }
            class WorkerThread$MainLoop implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.utilities.WorkerThread
                constructor(arg0: sun.jvm.hotspot.utilities.WorkerThread)
                run(): void
            }
            class WorkerThread$1 implements java.lang.Runnable {
                this$0: sun.jvm.hotspot.utilities.WorkerThread
                constructor(arg0: sun.jvm.hotspot.utilities.WorkerThread)
                run(): void
            }
            class HashtableEntry extends sun.jvm.hotspot.utilities.BasicHashtableEntry {
                literalValue(): sun.jvm.hotspot.debugger.Address
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class HashtableEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class LivenessPathElement {
                constructor(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.oops.FieldIdentifier)
                isRoot(): boolean
                isTerminal(): boolean
                getObj(): sun.jvm.hotspot.oops.Oop
                getField(): sun.jvm.hotspot.oops.FieldIdentifier
            }
            class TwoOopHashtable extends sun.jvm.hotspot.utilities.Hashtable {
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                computeHash(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Oop): long
                indexFor(arg0: sun.jvm.hotspot.oops.Symbol, arg1: sun.jvm.hotspot.oops.Oop): int
            }
            class BasicHashtableEntry extends sun.jvm.hotspot.runtime.VMObject {
                hash(): long
                isShared(): boolean
                next(): sun.jvm.hotspot.utilities.BasicHashtableEntry
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class BasicHashtableEntry$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            interface BitMapClosure {
                doBit(arg0: int): void
            }
            class ReversePtrs {
                constructor()
                put(arg0: sun.jvm.hotspot.utilities.LivenessPathElement, arg1: sun.jvm.hotspot.oops.Oop): void
                get(arg0: sun.jvm.hotspot.oops.Oop): java.util.ArrayList
            }
            class BasicHashtable extends sun.jvm.hotspot.runtime.VMObject {
                protected tableSize(): int
                protected bucket(arg0: int): sun.jvm.hotspot.utilities.BasicHashtableEntry
                protected getHashtableEntryClass(): java.lang.Class
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class BasicHashtable$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class Hashtable extends sun.jvm.hotspot.utilities.BasicHashtable {
                protected getHashtableEntryClass(): java.lang.Class
                hashToIndex(arg0: long): int
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                protected static hashSymbol(arg0: byte[]): long
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class Hashtable$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class BitMap {
                constructor(arg0: int)
                size(): int
                at(arg0: int): boolean
                atPut(arg0: int, arg1: boolean): void
                set_size(arg0: int): void
                set_map(arg0: sun.jvm.hotspot.debugger.Address): void
                clear(): void
                iterate(arg0: sun.jvm.hotspot.utilities.BitMapClosure): void
                setUnion(arg0: sun.jvm.hotspot.utilities.BitMap): boolean
                setIntersection(arg0: sun.jvm.hotspot.utilities.BitMap): void
                setFrom(arg0: sun.jvm.hotspot.utilities.BitMap): void
                setDifference(arg0: sun.jvm.hotspot.utilities.BitMap): boolean
                isSame(arg0: sun.jvm.hotspot.utilities.BitMap): boolean
                getNextOneOffset(arg0: int, arg1: int): int
            }
            class ConstantTag {
                constructor(arg0: byte)
                value(): int
                isKlass(): boolean
                isField(): boolean
                isMethod(): boolean
                isInterfaceMethod(): boolean
                isString(): boolean
                isInt(): boolean
                isFloat(): boolean
                isLong(): boolean
                isDouble(): boolean
                isNameAndType(): boolean
                isUtf8(): boolean
                isMethodHandle(): boolean
                isMethodType(): boolean
                isInvokeDynamic(): boolean
                isInvalid(): boolean
                isUnresolvedKlass(): boolean
                isUnresolveKlassInError(): boolean
                isKlassIndex(): boolean
                isStringIndex(): boolean
                isKlassReference(): boolean
                isFieldOrMethod(): boolean
                isSymbol(): boolean
                basicType(): sun.jvm.hotspot.runtime.BasicType
                toString(): java.lang.String
            }
            class U1Array extends sun.jvm.hotspot.utilities.GenericArray {
                protected static elemType: sun.jvm.hotspot.types.Type
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                at(arg0: int): byte
                getElemType(): sun.jvm.hotspot.types.Type
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class U1Array$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class U2Array extends sun.jvm.hotspot.utilities.GenericArray {
                protected static elemType: sun.jvm.hotspot.types.Type
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                at(arg0: int): short
                getElemType(): sun.jvm.hotspot.types.Type
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class U2Array$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class IntArray extends sun.jvm.hotspot.utilities.GenericArray {
                protected static elemType: sun.jvm.hotspot.types.Type
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                at(arg0: int): int
                getElemType(): sun.jvm.hotspot.types.Type
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class IntArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class KlassArray extends sun.jvm.hotspot.utilities.GenericArray {
                protected static elemType: sun.jvm.hotspot.types.Type
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                getAt(arg0: int): sun.jvm.hotspot.oops.Klass
                getElemType(): sun.jvm.hotspot.types.Type
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class KlassArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            abstract class GenericArray extends sun.jvm.hotspot.runtime.VMObject {
                constructor(arg0: sun.jvm.hotspot.debugger.Address, arg1: long)
                length(): int
                getLength(): int
                protected getIntegerAt(arg0: int): long
                protected getAddressAt(arg0: int): sun.jvm.hotspot.debugger.Address
                getSize(): long
                getElemType(): sun.jvm.hotspot.types.Type
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class GenericArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class MethodArray extends sun.jvm.hotspot.utilities.GenericArray {
                protected static elemType: sun.jvm.hotspot.types.Type
                constructor(arg0: sun.jvm.hotspot.debugger.Address)
                at(arg0: int): sun.jvm.hotspot.oops.Method
                getElemType(): sun.jvm.hotspot.types.Type
                static access$000(arg0: sun.jvm.hotspot.types.TypeDataBase): void
            }
            class MethodArray$1 implements java.util.Observer {
                constructor()
                update(arg0: java.util.Observable, arg1: java.lang.Object): void
            }
            class ObjectReader {
                protected javaLangString: sun.jvm.hotspot.oops.Symbol
                protected javaUtilHashtableEntry: sun.jvm.hotspot.oops.Symbol
                protected javaUtilHashtable: sun.jvm.hotspot.oops.Symbol
                protected javaUtilProperties: sun.jvm.hotspot.oops.Symbol
                protected cl: java.lang.ClassLoader
                protected oopToObjMap: java.util.Map
                protected fieldMap: java.util.Map
                constructor(arg0: java.lang.ClassLoader)
                constructor()
                static debugPrintln(arg0: java.lang.String): void
                static debugPrintStackTrace(arg0: java.lang.Exception): void
                readObject(arg0: sun.jvm.hotspot.oops.Oop): java.lang.Object
                protected getDefaultPrimitiveValue(arg0: java.lang.Class): java.lang.Object
                protected getVMSymbol(arg0: java.lang.String): sun.jvm.hotspot.oops.Symbol
                protected javaLangString(): sun.jvm.hotspot.oops.Symbol
                protected javaUtilHashtableEntry(): sun.jvm.hotspot.oops.Symbol
                protected javaUtilHashtable(): sun.jvm.hotspot.oops.Symbol
                protected javaUtilProperties(): sun.jvm.hotspot.oops.Symbol
                protected getHashtable(arg0: sun.jvm.hotspot.oops.Instance, arg1: boolean): java.lang.Object
                readInstance(arg0: sun.jvm.hotspot.oops.Instance): java.lang.Object
                readPrimitiveArray(arg0: sun.jvm.hotspot.oops.TypeArray): java.lang.Object
                protected isRobust(arg0: sun.jvm.hotspot.debugger.OopHandle): boolean
                readObjectArray(arg0: sun.jvm.hotspot.oops.ObjArray): java.lang.Object
                readClass(arg0: sun.jvm.hotspot.oops.InstanceKlass): java.lang.Class
                readMethodOrConstructor(arg0: sun.jvm.hotspot.oops.Method): java.lang.Object
                readMethod(arg0: sun.jvm.hotspot.oops.Method): java.lang.reflect.Method
                readConstructor(arg0: sun.jvm.hotspot.oops.Method): java.lang.reflect.Constructor
                readField(arg0: sun.jvm.hotspot.oops.Field): java.lang.reflect.Field
                protected putIntoObjTable(arg0: sun.jvm.hotspot.oops.Oop, arg1: java.lang.Object): void
                protected getFromObjTable(arg0: sun.jvm.hotspot.oops.Oop): java.lang.Object
                protected putIntoObjTable(arg0: sun.jvm.hotspot.oops.Metadata, arg1: java.lang.Object): void
                protected getFromObjTable(arg0: sun.jvm.hotspot.oops.Metadata): java.lang.Object
                protected getParamTypes(arg0: sun.jvm.hotspot.oops.Symbol): java.lang.Class[]
                static access$000(): boolean
            }
            class ObjectReader$SignatureParser extends sun.jvm.hotspot.runtime.SignatureIterator {
                protected tmp: java.util.Vector
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: sun.jvm.hotspot.oops.Symbol)
                doBool(): void
                doChar(): void
                doFloat(): void
                doDouble(): void
                doByte(): void
                doShort(): void
                doInt(): void
                doLong(): void
                doVoid(): void
                doObject(arg0: int, arg1: int): void
                doArray(arg0: int, arg1: int): void
                protected getClass(arg0: int, arg1: int): java.lang.Class
                protected getClassName(arg0: int, arg1: int): java.lang.String
                protected arrayInnerBegin(arg0: int): int
                getNumParams(): int
                getParamTypes(): java.util.Enumeration
            }
            class ObjectReader$FieldSetter extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                protected obj: java.lang.Object
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: java.lang.Object)
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
                doCInt(arg0: sun.jvm.hotspot.oops.CIntField, arg1: boolean): void
            }
            class ObjectReader$9 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: java.lang.Object[]
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: java.lang.Object[])
                doOop(arg0: sun.jvm.hotspot.oops.OopField, arg1: boolean): void
            }
            class ObjectReader$8 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: long[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: long[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doLong(arg0: sun.jvm.hotspot.oops.LongField, arg1: boolean): void
            }
            class ObjectReader$7 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: int[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: int[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doInt(arg0: sun.jvm.hotspot.oops.IntField, arg1: boolean): void
            }
            class ObjectReader$6 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: short[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: short[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doShort(arg0: sun.jvm.hotspot.oops.ShortField, arg1: boolean): void
            }
            class ObjectReader$5 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: byte[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: byte[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doByte(arg0: sun.jvm.hotspot.oops.ByteField, arg1: boolean): void
            }
            class ObjectReader$4 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: double[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: double[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doDouble(arg0: sun.jvm.hotspot.oops.DoubleField, arg1: boolean): void
            }
            class ObjectReader$3 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: float[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: float[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doFloat(arg0: sun.jvm.hotspot.oops.FloatField, arg1: boolean): void
            }
            class ObjectReader$2 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: char[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: char[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doChar(arg0: sun.jvm.hotspot.oops.CharField, arg1: boolean): void
            }
            class ObjectReader$1 extends sun.jvm.hotspot.oops.DefaultOopVisitor {
                val$arrayObj: boolean[]
                val$array: sun.jvm.hotspot.oops.TypeArray
                this$0: sun.jvm.hotspot.utilities.ObjectReader
                constructor(arg0: sun.jvm.hotspot.utilities.ObjectReader, arg1: boolean[], arg2: sun.jvm.hotspot.oops.TypeArray)
                doBoolean(arg0: sun.jvm.hotspot.oops.BooleanField, arg1: boolean): void
            }
            namespace soql {
               class MethodCallable implements sun.jvm.hotspot.utilities.soql.Callable {
                   constructor(arg0: java.lang.Object, arg1: java.lang.reflect.Method, arg2: boolean)
                   constructor(arg0: java.lang.Object, arg1: java.lang.reflect.Method)
                   call(arg0: java.lang.Object[]): java.lang.Object
               }
               class JSJavaTypeArrayKlass extends sun.jvm.hotspot.utilities.soql.JSJavaArrayKlass {
                   constructor(arg0: sun.jvm.hotspot.oops.TypeArrayKlass, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getTypeArrayKlass(): sun.jvm.hotspot.oops.TypeArrayKlass
                   getName(): java.lang.String
                   getFieldValue(arg0: int, arg1: sun.jvm.hotspot.oops.Array): java.lang.Object
               }
               class JSJavaTypeArray extends sun.jvm.hotspot.utilities.soql.JSJavaArray {
                   constructor(arg0: sun.jvm.hotspot.oops.TypeArray, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getTypeArray(): sun.jvm.hotspot.oops.TypeArray
               }
               class JSJavaString extends sun.jvm.hotspot.utilities.soql.JSJavaInstance {
                   constructor(arg0: sun.jvm.hotspot.oops.Instance, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   toString(): java.lang.String
                   protected getFieldValue(arg0: java.lang.String): java.lang.Object
                   protected getFieldNames(): java.lang.String[]
                   protected hasField(arg0: java.lang.String): boolean
               }
               class JSJavaObjArrayKlass extends sun.jvm.hotspot.utilities.soql.JSJavaArrayKlass {
                   constructor(arg0: sun.jvm.hotspot.oops.ObjArrayKlass, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getObjArrayKlass(): sun.jvm.hotspot.oops.ObjArrayKlass
                   getName(): java.lang.String
                   getFieldValue(arg0: int, arg1: sun.jvm.hotspot.oops.Array): java.lang.Object
               }
               class JSJavaObjArray extends sun.jvm.hotspot.utilities.soql.JSJavaArray {
                   constructor(arg0: sun.jvm.hotspot.oops.ObjArray, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getObjArray(): sun.jvm.hotspot.oops.ObjArray
               }
               class JSJavaFactoryImpl implements sun.jvm.hotspot.utilities.soql.JSJavaFactory {
                   constructor()
                   newJSJavaObject(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.utilities.soql.JSJavaObject
                   newJSJavaKlass(arg0: sun.jvm.hotspot.oops.Klass): sun.jvm.hotspot.utilities.soql.JSJavaKlass
                   newJSJavaMethod(arg0: sun.jvm.hotspot.oops.Method): sun.jvm.hotspot.utilities.soql.JSJavaMethod
                   newJSJavaField(arg0: sun.jvm.hotspot.oops.Field): sun.jvm.hotspot.utilities.soql.JSJavaField
                   newJSJavaThread(arg0: sun.jvm.hotspot.runtime.JavaThread): sun.jvm.hotspot.utilities.soql.JSJavaThread
                   newJSJavaFrame(arg0: sun.jvm.hotspot.runtime.JavaVFrame): sun.jvm.hotspot.utilities.soql.JSJavaFrame
                   newJSList(arg0: java.util.List): sun.jvm.hotspot.utilities.soql.JSList
                   newJSMap(arg0: java.util.Map): sun.jvm.hotspot.utilities.soql.JSMap
                   newJSJavaWrapper(arg0: java.lang.Object): java.lang.Object
                   newJSJavaHeap(): sun.jvm.hotspot.utilities.soql.JSJavaHeap
                   newJSJavaVM(): sun.jvm.hotspot.utilities.soql.JSJavaVM
               }
               abstract class JSJavaArrayKlass extends sun.jvm.hotspot.utilities.soql.JSJavaKlass {
                   constructor(arg0: sun.jvm.hotspot.oops.ArrayKlass, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getArrayKlass(): sun.jvm.hotspot.oops.ArrayKlass
                   getMetaClassFieldValue(arg0: java.lang.String): java.lang.Object
                   hasMetaClassField(arg0: java.lang.String): boolean
                   isArray(): boolean
                   getMetaClassFieldNames(): java.lang.String[]
                   getFieldValue(arg0: int, arg1: sun.jvm.hotspot.oops.Array): java.lang.Object
               }
               abstract class JSJavaArray extends sun.jvm.hotspot.utilities.soql.JSJavaObject {
                   constructor(arg0: sun.jvm.hotspot.oops.Array, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getArray(): sun.jvm.hotspot.oops.Array
                   getJSJavaClass(): sun.jvm.hotspot.utilities.soql.JSJavaClass
                   get(arg0: java.lang.String): java.lang.Object
                   get(arg0: int): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   has(arg0: int): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   put(arg0: int, arg1: java.lang.Object): void
               }
               class InvocableCallable implements sun.jvm.hotspot.utilities.soql.Callable {
                   constructor(arg0: java.lang.Object, arg1: java.lang.String, arg2: javax.script.Invocable)
                   call(arg0: java.lang.Object[]): java.lang.Object
               }
               interface Callable {
                   call(arg0: java.lang.Object[]): java.lang.Object
               }
               class SOQLQuery {
                   selectExpr: java.lang.String
                   isInstanceOf: boolean
                   className: java.lang.String
                   identifier: java.lang.String
                   whereExpr: java.lang.String
                   constructor(arg0: java.lang.String, arg1: boolean, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String)
               }
               class SOQLException extends java.lang.Exception {
                   constructor(arg0: java.lang.String)
                   constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
                   constructor(arg0: java.lang.Throwable)
               }
               interface ObjectVisitor {
                   visit(arg0: java.lang.Object): void
               }
               class SOQLEngine extends sun.jvm.hotspot.utilities.soql.JSJavaScriptEngine {
                   static sun.jvm.hotspot.utilities.soql.SOQLEngine: synchronized
                   void: synchronized
                   protected getObjectReader(): sun.jvm.hotspot.utilities.ObjectReader
                   protected getJSJavaFactory(): sun.jvm.hotspot.utilities.soql.JSJavaFactory
                   protected isQuitting(): boolean
                   protected quit(): void
                   protected (: sun.jvm.hotspot.utilities.soql.SOQLEngine
                   static access$000(arg0: sun.jvm.hotspot.utilities.soql.SOQLEngine, arg1: sun.jvm.hotspot.oops.Oop, arg2: sun.jvm.hotspot.utilities.soql.ObjectVisitor, arg3: boolean): void
               }
               class SOQLEngine$1 implements sun.jvm.hotspot.oops.HeapVisitor {
                   filterExists: boolean
                   val$visitor: sun.jvm.hotspot.utilities.soql.ObjectVisitor
                   this$0: sun.jvm.hotspot.utilities.soql.SOQLEngine
                   constructor(arg0: sun.jvm.hotspot.utilities.soql.SOQLEngine, arg1: sun.jvm.hotspot.utilities.soql.ObjectVisitor)
                   prologue(arg0: long): void
                   doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
                   epilogue(): void
               }
               class JSJavaInstanceKlass extends sun.jvm.hotspot.utilities.soql.JSJavaKlass {
                   constructor(arg0: sun.jvm.hotspot.oops.InstanceKlass, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getInstanceKlass(): sun.jvm.hotspot.oops.InstanceKlass
                   getMetaClassFieldValue(arg0: java.lang.String): java.lang.Object
                   hasMetaClassField(arg0: java.lang.String): boolean
                   getName(): java.lang.String
                   isArray(): boolean
                   getMetaClassFieldNames(): java.lang.String[]
                   getInstanceFieldValue(arg0: java.lang.String, arg1: sun.jvm.hotspot.oops.Instance): java.lang.Object
                   getStaticFieldValue(arg0: java.lang.String): java.lang.Object
                   getInstanceFieldNames(): java.lang.String[]
                   hasInstanceField(arg0: java.lang.String): boolean
                   getStaticFieldNames(): java.lang.String[]
                   hasStaticField(arg0: java.lang.String): boolean
               }
               class JSJavaClass extends sun.jvm.hotspot.utilities.soql.JSJavaInstance {
                   constructor(arg0: sun.jvm.hotspot.oops.Instance, arg1: sun.jvm.hotspot.utilities.soql.JSJavaKlass, arg2: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getJSJavaKlass(): sun.jvm.hotspot.utilities.soql.JSJavaKlass
                   toString(): java.lang.String
                   protected getFieldValue(arg0: java.lang.String): java.lang.Object
                   protected getFieldNames(): java.lang.String[]
                   protected hasField(arg0: java.lang.String): boolean
               }
               class JSJavaVM extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   constructor(arg0: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   toString(): java.lang.String
               }
               class JSJavaHeap extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   constructor(arg0: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   forEachObject(arg0: java.lang.Object[]): void
                   forEachClass(arg0: java.lang.Object[]): void
                   toString(): java.lang.String
                   static access$000(arg0: sun.jvm.hotspot.utilities.soql.JSJavaHeap): sun.jvm.hotspot.utilities.soql.JSJavaFactory
               }
               class JSJavaHeap$3 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
                   val$finalFunc: sun.jvm.hotspot.utilities.soql.Callable
                   this$0: sun.jvm.hotspot.utilities.soql.JSJavaHeap
                   constructor(arg0: sun.jvm.hotspot.utilities.soql.JSJavaHeap, arg1: sun.jvm.hotspot.utilities.soql.Callable)
                   visit(arg0: sun.jvm.hotspot.oops.Klass): void
               }
               class JSJavaHeap$2 implements sun.jvm.hotspot.memory.SystemDictionary$ClassAndLoaderVisitor {
                   val$finalFunc: sun.jvm.hotspot.utilities.soql.Callable
                   this$0: sun.jvm.hotspot.utilities.soql.JSJavaHeap
                   constructor(arg0: sun.jvm.hotspot.utilities.soql.JSJavaHeap, arg1: sun.jvm.hotspot.utilities.soql.Callable)
                   visit(arg0: sun.jvm.hotspot.oops.Klass, arg1: sun.jvm.hotspot.oops.Oop): void
               }
               class JSJavaHeap$1 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
                   val$finalFunc: sun.jvm.hotspot.utilities.soql.Callable
                   this$0: sun.jvm.hotspot.utilities.soql.JSJavaHeap
                   constructor(arg0: sun.jvm.hotspot.utilities.soql.JSJavaHeap, arg1: sun.jvm.hotspot.utilities.soql.Callable)
                   doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
               }
               class JSMap extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   constructor(arg0: java.util.Map, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   toString(): java.lang.String
               }
               class JSList extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   constructor(arg0: java.util.List, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   get(arg0: java.lang.String): java.lang.Object
                   get(arg0: int): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   has(arg0: int): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   put(arg0: int, arg1: java.lang.Object): void
                   toString(): java.lang.String
               }
               abstract class JSMetadata extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   protected factory: sun.jvm.hotspot.utilities.soql.JSJavaFactory
                   constructor(arg0: sun.jvm.hotspot.oops.Metadata, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getMetadata(): sun.jvm.hotspot.oops.Metadata
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
               }
               class JSJavaMethod extends sun.jvm.hotspot.utilities.soql.JSMetadata {
                   constructor(arg0: sun.jvm.hotspot.oops.Method, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getMethod(): sun.jvm.hotspot.oops.Method
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   toString(): java.lang.String
               }
               class JSJavaFrame extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   constructor(arg0: sun.jvm.hotspot.runtime.JavaVFrame, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   toString(): java.lang.String
               }
               class JSJavaField extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   constructor(arg0: sun.jvm.hotspot.oops.Field, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
               }
               abstract class JSJavaKlass {
                   protected factory: sun.jvm.hotspot.utilities.soql.JSJavaFactory
                   constructor(arg0: sun.jvm.hotspot.oops.Klass, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getKlass(): sun.jvm.hotspot.oops.Klass
                   getJSJavaClass(): sun.jvm.hotspot.utilities.soql.JSJavaClass
                   getMetaClassFieldValue(arg0: java.lang.String): java.lang.Object
                   hasMetaClassField(arg0: java.lang.String): boolean
                   getMetaClassFieldNames(): java.lang.String[]
                   getName(): java.lang.String
                   isArray(): boolean
               }
               class JSJavaInstance extends sun.jvm.hotspot.utilities.soql.JSJavaObject {
                   protected type: sun.jvm.hotspot.utilities.soql.JSJavaInstanceKlass
                   constructor(arg0: sun.jvm.hotspot.oops.Instance, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getInstance(): sun.jvm.hotspot.oops.Instance
                   getJSJavaClass(): sun.jvm.hotspot.utilities.soql.JSJavaClass
                   get(arg0: java.lang.String): java.lang.Object
                   getIds(): java.lang.Object[]
                   has(arg0: java.lang.String): boolean
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   protected getFieldValue(arg0: java.lang.String): java.lang.Object
                   protected getFieldNames(): java.lang.String[]
                   protected hasField(arg0: java.lang.String): boolean
               }
               class JSJavaThread extends sun.jvm.hotspot.utilities.soql.JSJavaInstance {
                   constructor(arg0: sun.jvm.hotspot.oops.Instance, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   constructor(arg0: sun.jvm.hotspot.runtime.JavaThread, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   toString(): java.lang.String
                   protected getFieldValue(arg0: java.lang.String): java.lang.Object
                   protected getFieldNames(): java.lang.String[]
                   protected hasField(arg0: java.lang.String): boolean
               }
               class DefaultScriptObject implements sun.jvm.hotspot.utilities.soql.ScriptObject {
                   constructor()
                   getIds(): java.lang.Object[]
                   get(arg0: java.lang.String): java.lang.Object
                   get(arg0: int): java.lang.Object
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   put(arg0: int, arg1: java.lang.Object): void
                   has(arg0: java.lang.String): boolean
                   has(arg0: int): boolean
                   delete(arg0: java.lang.String): boolean
                   delete(arg0: int): boolean
               }
               abstract class JSJavaObject extends sun.jvm.hotspot.utilities.soql.DefaultScriptObject {
                   protected factory: sun.jvm.hotspot.utilities.soql.JSJavaFactory
                   constructor(arg0: sun.jvm.hotspot.oops.Oop, arg1: sun.jvm.hotspot.utilities.soql.JSJavaFactory)
                   getOop(): sun.jvm.hotspot.oops.Oop
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
               }
               interface JSJavaFactory {
                   newJSJavaObject(arg0: sun.jvm.hotspot.oops.Oop): sun.jvm.hotspot.utilities.soql.JSJavaObject
                   newJSJavaKlass(arg0: sun.jvm.hotspot.oops.Klass): sun.jvm.hotspot.utilities.soql.JSJavaKlass
                   newJSJavaField(arg0: sun.jvm.hotspot.oops.Field): sun.jvm.hotspot.utilities.soql.JSJavaField
                   newJSJavaThread(arg0: sun.jvm.hotspot.runtime.JavaThread): sun.jvm.hotspot.utilities.soql.JSJavaThread
                   newJSJavaFrame(arg0: sun.jvm.hotspot.runtime.JavaVFrame): sun.jvm.hotspot.utilities.soql.JSJavaFrame
                   newJSJavaMethod(arg0: sun.jvm.hotspot.oops.Method): sun.jvm.hotspot.utilities.soql.JSJavaMethod
                   newJSList(arg0: java.util.List): sun.jvm.hotspot.utilities.soql.JSList
                   newJSMap(arg0: java.util.Map): sun.jvm.hotspot.utilities.soql.JSMap
                   newJSJavaHeap(): sun.jvm.hotspot.utilities.soql.JSJavaHeap
                   newJSJavaVM(): sun.jvm.hotspot.utilities.soql.JSJavaVM
                   newJSJavaWrapper(arg0: java.lang.Object): java.lang.Object
               }
               interface ScriptObject {
                   static UNDEFINED: java.lang.Object
                   static EMPTY_ARRAY: java.lang.Object[]
                   getIds(): java.lang.Object[]
                   get(arg0: java.lang.String): java.lang.Object
                   get(arg0: int): java.lang.Object
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   put(arg0: int, arg1: java.lang.Object): void
                   has(arg0: java.lang.String): boolean
                   has(arg0: int): boolean
                   delete(arg0: java.lang.String): boolean
                   delete(arg0: int): boolean
               }
               class MapScriptObject implements sun.jvm.hotspot.utilities.soql.ScriptObject {
                   constructor()
                   constructor(arg0: java.util.Map)
                   getIds(): java.lang.Object[]
                   get(arg0: java.lang.String): java.lang.Object
                   get(arg0: int): java.lang.Object
                   put(arg0: java.lang.String, arg1: java.lang.Object): void
                   put(arg0: int, arg1: java.lang.Object): void
                   has(arg0: java.lang.String): boolean
                   has(arg0: int): boolean
                   delete(arg0: java.lang.String): boolean
                   delete(arg0: int): boolean
                   protected putFunction(arg0: java.lang.Object, arg1: java.lang.reflect.Method): void
                   protected putFunction(arg0: java.lang.Object, arg1: java.lang.reflect.Method, arg2: boolean): void
                   protected putFunction(arg0: java.lang.Object, arg1: java.lang.String, arg2: javax.script.Invocable): void
               }
               abstract class JSJavaScriptEngine extends sun.jvm.hotspot.utilities.soql.MapScriptObject {
                   protected debug: boolean
                   startConsole(): void
                   start(): void
                   defineFunction(arg0: java.lang.Object, arg1: java.lang.reflect.Method): void
                   call(arg0: java.lang.String, arg1: java.lang.Object[]): java.lang.Object
                   address(arg0: java.lang.Object[]): java.lang.Object
                   classof(arg0: java.lang.Object[]): java.lang.Object
                   dumpClass(arg0: java.lang.Object[]): java.lang.Object
                   dumpHeap(arg0: java.lang.Object[]): java.lang.Object
                   help(arg0: java.lang.Object[]): void
                   identityHash(arg0: java.lang.Object[]): java.lang.Object
                   load(arg0: java.lang.Object[]): void
                   mirror(arg0: java.lang.Object[]): java.lang.Object
                   owner(arg0: java.lang.Object[]): java.lang.Object
                   object(arg0: java.lang.Object[]): java.lang.Object
                   sizeof(arg0: java.lang.Object[]): java.lang.Object
                   staticof(arg0: java.lang.Object[]): java.lang.Object
                   read(arg0: java.lang.Object[]): java.lang.Object
                   quit(arg0: java.lang.Object[]): void
                   writeln(arg0: java.lang.Object[]): void
                   write(arg0: java.lang.Object[]): void
                   protected start(arg0: boolean): void
                   protected (: sun.jvm.hotspot.utilities.soql.JSJavaScriptEngine
                   protected (: sun.jvm.hotspot.utilities.soql.JSJavaScriptEngine
                   protected getObjectReader(): sun.jvm.hotspot.utilities.ObjectReader
                   protected getJSJavaFactory(): sun.jvm.hotspot.utilities.soql.JSJavaFactory
                   protected printPrompt(arg0: java.lang.String): void
                   protected loadInitFile(): void
                   protected loadUserInitFile(): void
                   protected getUserInitFileDir(): java.lang.String
                   protected getUserInitFileName(): java.lang.String
                   protected getInputReader(): java.io.BufferedReader
                   protected getOutputStream(): java.io.PrintStream
                   protected getErrorStream(): java.io.PrintStream
                   protected print(arg0: java.lang.String): void
                   protected println(arg0: java.lang.String): void
                   protected printError(arg0: java.lang.String): void
                   protected printError(arg0: java.lang.String, arg1: java.lang.Exception): void
                   protected isQuitting(): boolean
                   protected quit(): void
                   protected getScriptEngine(): javax.script.ScriptEngine
                   protected evalString(arg0: java.lang.String, arg1: java.lang.String, arg2: int): java.lang.Object
               }
               
            }
            
         }
         class CommandProcessor {
             boolean: volatile
             static historyPattern: java.util.regex.Pattern
             quote(arg0: java.lang.String): void
             dumpType(arg0: sun.jvm.hotspot.types.Type): void
             dumpFields(arg0: sun.jvm.hotspot.types.Type): void
             dumpFields(arg0: sun.jvm.hotspot.types.Type, arg1: boolean): void
             lookup(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
             parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
             printPrompt(): void
             registerCommand(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
             setOutput(arg0: java.io.PrintStream): void
             setErr(arg0: java.io.PrintStream): void
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$DebuggerInterface, arg1: java.io.BufferedReader, arg2: java.io.PrintStream, arg3: java.io.PrintStream)
             run(arg0: boolean): void
             executeCommand(arg0: java.lang.String, arg1: boolean): void
             executeCommand(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
             static access$000(arg0: sun.jvm.hotspot.CommandProcessor): java.io.PrintStream
             static access$100(arg0: sun.jvm.hotspot.CommandProcessor): boolean
             static access$200(arg0: sun.jvm.hotspot.CommandProcessor): void
             static access$300(arg0: sun.jvm.hotspot.CommandProcessor): sun.jvm.hotspot.CommandProcessor$DebuggerInterface
             static access$400(arg0: sun.jvm.hotspot.CommandProcessor): void
             static access$500(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String): sun.jvm.hotspot.CommandProcessor$Command
             static access$600(arg0: sun.jvm.hotspot.CommandProcessor): java.util.HashMap
             static access$700(arg0: sun.jvm.hotspot.CommandProcessor): java.util.ArrayList
             static access$800(arg0: sun.jvm.hotspot.CommandProcessor): sun.jvm.hotspot.HotSpotAgent
             static access$900(arg0: sun.jvm.hotspot.CommandProcessor): java.io.PrintStream
             static access$1000(arg0: sun.jvm.hotspot.CommandProcessor): boolean
             static access$1002(arg0: sun.jvm.hotspot.CommandProcessor, arg1: boolean): boolean
             static access$1100(arg0: sun.jvm.hotspot.CommandProcessor): java.io.BufferedReader
             static access$1102(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.io.BufferedReader): java.io.BufferedReader
             static access$102(arg0: sun.jvm.hotspot.CommandProcessor, arg1: boolean): boolean
             static access$1200(arg0: sun.jvm.hotspot.CommandProcessor): sun.jvm.hotspot.utilities.soql.JSJavaScriptEngine
         }
         class CommandProcessor$52 extends sun.jvm.hotspot.CommandProcessor$Command {
             val$func: java.lang.String
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean, arg4: java.lang.String)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$51 extends sun.jvm.hotspot.utilities.soql.JSJavaScriptEngine {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor)
             getObjectReader(): sun.jvm.hotspot.utilities.ObjectReader
             getJSJavaFactory(): sun.jvm.hotspot.utilities.soql.JSJavaFactory
             protected quit(): void
             protected getInputReader(): java.io.BufferedReader
             protected getOutputStream(): java.io.PrintStream
             protected getErrorStream(): java.io.PrintStream
         }
         class CommandProcessor$50 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$49 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$48 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$47 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$46 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$45 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$44 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$43 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$43$1 implements sun.jvm.hotspot.code.CodeCacheVisitor {
             val$fout: java.io.PrintStream
             val$gen: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator
             this$1: sun.jvm.hotspot.CommandProcessor$43
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$43, arg1: java.io.PrintStream, arg2: sun.jvm.hotspot.ui.classbrowser.HTMLGenerator)
             prologue(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
             visit(arg0: sun.jvm.hotspot.code.CodeBlob): void
             epilogue(): void
         }
         class CommandProcessor$42 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$42$3 implements sun.jvm.hotspot.code.CodeCacheVisitor {
             val$value: sun.jvm.hotspot.debugger.Address
             val$stride: long
             this$1: sun.jvm.hotspot.CommandProcessor$42
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$42, arg1: sun.jvm.hotspot.debugger.Address, arg2: long)
             prologue(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): void
             visit(arg0: sun.jvm.hotspot.code.CodeBlob): void
             epilogue(): void
         }
         class CommandProcessor$42$2 extends sun.jvm.hotspot.oops.DefaultHeapVisitor {
             val$value: sun.jvm.hotspot.debugger.Address
             this$1: sun.jvm.hotspot.CommandProcessor$42
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$42, arg1: sun.jvm.hotspot.debugger.Address)
             doObj(arg0: sun.jvm.hotspot.oops.Oop): boolean
         }
         class CommandProcessor$42$1 implements sun.jvm.hotspot.oops.RawHeapVisitor {
             val$value: sun.jvm.hotspot.debugger.Address
             this$1: sun.jvm.hotspot.CommandProcessor$42
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$42, arg1: sun.jvm.hotspot.debugger.Address)
             prologue(arg0: long): void
             visitAddress(arg0: sun.jvm.hotspot.debugger.Address): void
             visitCompOopAddress(arg0: sun.jvm.hotspot.debugger.Address): void
             epilogue(): void
         }
         class CommandProcessor$41 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$40 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$39 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$38 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$37 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$36 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$35 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$34 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$33 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$32 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$31 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$30 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$29 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$28 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$27 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$26 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$25 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$24 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$23 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$22 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$21 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$20 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$19 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$19$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
             this$1: sun.jvm.hotspot.CommandProcessor$19
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$19)
             visit(arg0: sun.jvm.hotspot.oops.Klass): void
         }
         class CommandProcessor$18 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$18$1 implements sun.jvm.hotspot.memory.SystemDictionary$ClassVisitor {
             this$1: sun.jvm.hotspot.CommandProcessor$18
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$18)
             visit(arg0: sun.jvm.hotspot.oops.Klass): void
         }
         class CommandProcessor$17 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$17$1 implements sun.jvm.hotspot.utilities.HeapProgressThunk {
             val$complete: boolean[]
             this$1: sun.jvm.hotspot.CommandProcessor$17
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$17, arg1: boolean[])
             heapIterationFractionUpdate(arg0: double): void
             void: synchronized
         }
         class CommandProcessor$16 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$15 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$14 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$13 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$12 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$12$1 implements java.util.Comparator {
             this$1: sun.jvm.hotspot.CommandProcessor$12
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$12)
             compare(arg0: java.lang.Object, arg1: java.lang.Object): int
         }
         class CommandProcessor$11 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$10 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$10$1 implements sun.jvm.hotspot.memory.SymbolTable$SymbolVisitor {
             this$1: sun.jvm.hotspot.CommandProcessor$10
             constructor(arg0: sun.jvm.hotspot.CommandProcessor$10)
             visit(arg0: sun.jvm.hotspot.oops.Symbol): void
         }
         class CommandProcessor$9 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$8 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$7 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$6 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$5 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$4 extends sun.jvm.hotspot.CommandProcessor$Command {
             args1: java.util.regex.Pattern
             args2: java.util.regex.Pattern
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             fill(arg0: sun.jvm.hotspot.debugger.Address, arg1: int): java.lang.String
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$3 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$2 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         class CommandProcessor$1 extends sun.jvm.hotspot.CommandProcessor$Command {
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
         }
         abstract class CommandProcessor$Command {
             name: java.lang.String
             usage: java.lang.String
             okIfDisconnected: boolean
             this$0: sun.jvm.hotspot.CommandProcessor
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
             constructor(arg0: sun.jvm.hotspot.CommandProcessor, arg1: java.lang.String, arg2: boolean)
             doit(arg0: sun.jvm.hotspot.CommandProcessor$Tokens): void
             usage(): void
             printOopValue(arg0: sun.jvm.hotspot.oops.Oop): void
             printNode(arg0: sun.jvm.hotspot.ui.tree.SimpleTreeNode): void
         }
         class CommandProcessor$Tokens {
             input: java.lang.String
             i: int
             tokens: java.lang.String[]
             length: int
             splitWhitespace(arg0: java.lang.String): java.lang.String[]
             add(arg0: java.lang.String, arg1: java.util.ArrayList): void
             constructor(arg0: java.lang.String)
             nextToken(): java.lang.String
             hasMoreTokens(): boolean
             countTokens(): int
             trim(arg0: int): void
             join(arg0: java.lang.String): java.lang.String
             at(arg0: int): java.lang.String
         }
         class CommandProcessor$NonBootFilter implements sun.jvm.hotspot.tools.jcore.ClassFilter {
             constructor()
             canInclude(arg0: sun.jvm.hotspot.oops.InstanceKlass): boolean
         }
         class CommandProcessor$BootFilter implements sun.jvm.hotspot.tools.jcore.ClassFilter {
             constructor()
             canInclude(arg0: sun.jvm.hotspot.oops.InstanceKlass): boolean
         }
         abstract class CommandProcessor$DebuggerInterface {
             constructor()
             getAgent(): sun.jvm.hotspot.HotSpotAgent
             isAttached(): boolean
             attach(arg0: java.lang.String): void
             attach(arg0: java.lang.String, arg1: java.lang.String): void
             detach(): void
             reattach(): void
         }
         class HotSpotAgent {
             static showUsage(): void
             constructor()
             sun.jvm.hotspot.debugger.Debugger: synchronized
             sun.jvm.hotspot.types.TypeDataBase: synchronized
             void: synchronized
             void: synchronized
             void: synchronized
             void: synchronized
             boolean: synchronized
             void: synchronized
             void: synchronized
             void: synchronized
             void: synchronized
             boolean: synchronized
             static access$000(arg0: sun.jvm.hotspot.HotSpotAgent): boolean
         }
         class HotSpotAgent$1 implements java.lang.Runnable {
             this$0: sun.jvm.hotspot.HotSpotAgent
             constructor(arg0: sun.jvm.hotspot.HotSpotAgent)
             run(): void
         }
         class CLHSDB {
             constructor(arg0: sun.jvm.hotspot.debugger.JVMDebugger)
             static main(arg0: java.lang.String[]): void
             run(): void
             static access$000(arg0: sun.jvm.hotspot.CLHSDB): void
             static access$100(arg0: sun.jvm.hotspot.CLHSDB): sun.jvm.hotspot.HotSpotAgent
             static access$200(arg0: sun.jvm.hotspot.CLHSDB): boolean
             static access$300(arg0: sun.jvm.hotspot.CLHSDB, arg1: java.lang.String): void
             static access$400(arg0: sun.jvm.hotspot.CLHSDB, arg1: java.lang.String, arg2: java.lang.String): void
             static access$500(arg0: sun.jvm.hotspot.CLHSDB): java.lang.String
             static access$600(arg0: sun.jvm.hotspot.CLHSDB): java.lang.String
             static access$700(arg0: sun.jvm.hotspot.CLHSDB): java.lang.String
         }
         class CLHSDB$2 extends sun.jvm.hotspot.CommandProcessor$DebuggerInterface {
             this$0: sun.jvm.hotspot.CLHSDB
             constructor(arg0: sun.jvm.hotspot.CLHSDB)
             getAgent(): sun.jvm.hotspot.HotSpotAgent
             isAttached(): boolean
             attach(arg0: java.lang.String): void
             attach(arg0: java.lang.String, arg1: java.lang.String): void
             detach(): void
             reattach(): void
         }
         class CLHSDB$1 extends java.lang.Thread {
             this$0: sun.jvm.hotspot.CLHSDB
             constructor(arg0: sun.jvm.hotspot.CLHSDB)
             run(): void
         }
         namespace debugger {
            namespace ia64 {
               abstract class IA64ThreadContext implements sun.jvm.hotspot.debugger.ThreadContext {
                   static GR0: int
                   static GR1: int
                   static GR2: int
                   static GR3: int
                   static GR4: int
                   static GR5: int
                   static GR6: int
                   static GR7: int
                   static GR8: int
                   static GR9: int
                   static GR10: int
                   static GR11: int
                   static GR12: int
                   static SP: int
                   static GR13: int
                   static GR14: int
                   static GR15: int
                   static GR16: int
                   static GR17: int
                   static GR18: int
                   static GR19: int
                   static GR20: int
                   static GR21: int
                   static GR22: int
                   static GR23: int
                   static GR24: int
                   static GR25: int
                   static GR26: int
                   static GR27: int
                   static GR28: int
                   static GR29: int
                   static GR30: int
                   static GR31: int
                   static INT_NATS: int
                   static PREDS: int
                   static BR0: int
                   static BR_RP: int
                   static BR1: int
                   static BR2: int
                   static BR3: int
                   static BR4: int
                   static BR5: int
                   static BR6: int
                   static BR7: int
                   static AP_UNAT: int
                   static AP_LC: int
                   static AP_EC: int
                   static AP_CCV: int
                   static AP_DCR: int
                   static RS_PFS: int
                   static AP_PFS: int
                   static RS_BSP: int
                   static AR_BSP: int
                   static RS_BSPSTORE: int
                   static AP_BSPSTORE: int
                   static RS_RSC: int
                   static AP_RSC: int
                   static RS_RNAT: int
                   static AP_RNAT: int
                   static ST_IPSR: int
                   static ST_IIP: int
                   static ST_IFS: int
                   static DB_I0: int
                   static DB_I1: int
                   static DB_I2: int
                   static DB_I3: int
                   static DB_I4: int
                   static DB_I5: int
                   static DB_I6: int
                   static DB_I7: int
                   static DB_D0: int
                   static DB_D1: int
                   static DB_D2: int
                   static DB_D3: int
                   static DB_D4: int
                   static DB_D5: int
                   static DB_D6: int
                   static DB_D7: int
                   static NPRGREG: int
                   constructor()
                   getNumRegisters(): int
                   getRegisterName(arg0: int): java.lang.String
                   setRegister(arg0: int, arg1: long): void
                   getRegister(arg0: int): long
                   getTopFrame(arg0: sun.jvm.hotspot.debugger.Debugger): sun.jvm.hotspot.debugger.cdbg.CFrame
                   setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                   getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
               }
               
            }
            namespace windows {
               namespace amd64 {
                  class WindowsAMD64CFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                  }
                  
               }
               namespace x86 {
                  class WindowsX86CFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                  }
                  
               }
               
            }
            namespace windbg {
               namespace ia64 {
                  class WindbgIA64ThreadContext extends sun.jvm.hotspot.debugger.ia64.IA64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class WindbgIA64Thread implements sun.jvm.hotspot.debugger.ThreadProxy {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                      canSetContext(): boolean
                      setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                      equals(arg0: java.lang.Object): boolean
                      hashCode(): int
                      toString(): java.lang.String
                  }
                  class WindbgIA64ThreadFactory implements sun.jvm.hotspot.debugger.windbg.WindbgThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  
               }
               namespace x86 {
                  class WindbgX86ThreadFactory implements sun.jvm.hotspot.debugger.windbg.WindbgThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class WindbgX86ThreadContext extends sun.jvm.hotspot.debugger.x86.X86ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class WindbgX86Thread implements sun.jvm.hotspot.debugger.ThreadProxy {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                      canSetContext(): boolean
                      setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                      equals(arg0: java.lang.Object): boolean
                      hashCode(): int
                      toString(): java.lang.String
                  }
                  
               }
               namespace amd64 {
                  class WindbgAMD64ThreadFactory implements sun.jvm.hotspot.debugger.windbg.WindbgThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class WindbgAMD64ThreadContext extends sun.jvm.hotspot.debugger.amd64.AMD64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class WindbgAMD64Thread implements sun.jvm.hotspot.debugger.ThreadProxy {
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                      canSetContext(): boolean
                      setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                      equals(arg0: java.lang.Object): boolean
                      hashCode(): int
                      toString(): java.lang.String
                  }
                  
               }
               interface WindbgThreadFactory {
                   createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
               }
               class WindbgDebuggerLocal extends sun.jvm.hotspot.debugger.DebuggerBase implements sun.jvm.hotspot.debugger.windbg.WindbgDebugger {
                   constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription, arg1: boolean)
                   hasProcessList(): boolean
                   getProcessList(): java.util.List
                   void: synchronized
                   void: synchronized
                   getLoadObjectList(): java.util.List
                   boolean: synchronized
                   parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   hasConsole(): boolean
                   java.lang.String: synchronized
                   getConsolePrompt(): java.lang.String
                   getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                   sun.jvm.hotspot.debugger.Address: synchronized
                   sun.jvm.hotspot.debugger.OopHandle: synchronized
                   sun.jvm.hotspot.debugger.cdbg.ClosestSymbol: synchronized
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadIdFromSysId(arg0: long): long
                   readJLong(arg0: long): long
                   addressValueToString(arg0: long): java.lang.String
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgOopHandle
                   getAddressSize(): int
                   long[]: synchronized
                   java.util.List: synchronized
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   long: synchronized
                   sun.jvm.hotspot.debugger.ReadResult: synchronized
                   writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
                   static access$000(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal, arg1: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
               }
               class WindbgDebuggerLocal$2 extends sun.jvm.hotspot.debugger.windbg.DLL {
                   this$0: sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal, arg1: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg2: java.lang.String, arg3: long, arg4: sun.jvm.hotspot.debugger.Address)
                   closestSymbolToPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
               }
               class WindbgDebuggerLocal$1 extends sun.jvm.hotspot.debugger.DebuggerUtilities {
                   this$0: sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal, arg1: long, arg2: boolean)
                   checkAlignment(arg0: long, arg1: long): void
               }
               class WindbgCDebugger implements sun.jvm.hotspot.debugger.cdbg.CDebugger {
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   loadObjectContainingPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LoadObject
                   topFrameForThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   getNameOfFile(arg0: java.lang.String): java.lang.String
                   getProcessControl(): sun.jvm.hotspot.debugger.cdbg.ProcessControl
                   canDemangle(): boolean
                   demangle(arg0: java.lang.String): java.lang.String
               }
               class WindbgCDebugInfoBuilder implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionTypes , sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeLeafIndices , sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums , sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolTypes , sun.jvm.hotspot.debugger.win32.coff.DebugVC50MemberAttributes , sun.jvm.hotspot.debugger.cdbg.CVAttributes , sun.jvm.hotspot.debugger.cdbg.AccessControl {
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger)
                   buildDataBase(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase
               }
               class WindbgCDebugInfoBuilder$1 implements sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener {
                   this$0: sun.jvm.hotspot.debugger.windbg.WindbgCDebugInfoBuilder
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgCDebugInfoBuilder)
                   resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.cdbg.basic.LazyType, arg2: java.lang.String): void
                   resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: java.lang.String): void
                   resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Sym, arg1: sun.jvm.hotspot.debugger.cdbg.basic.LazyType, arg2: java.lang.String): void
                   resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Sym, arg1: sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym, arg2: java.lang.String): void
               }
               class WindbgOopHandle extends sun.jvm.hotspot.debugger.windbg.WindbgAddress implements sun.jvm.hotspot.debugger.OopHandle {
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
               }
               class WindbgAddress implements sun.jvm.hotspot.debugger.Address {
                   protected debugger: sun.jvm.hotspot.debugger.windbg.WindbgDebugger
                   protected addr: long
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                   getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getJBooleanAt(arg0: long): boolean
                   getJByteAt(arg0: long): byte
                   getJCharAt(arg0: long): char
                   getJDoubleAt(arg0: long): double
                   getJFloatAt(arg0: long): float
                   getJIntAt(arg0: long): int
                   getJLongAt(arg0: long): long
                   getJShortAt(arg0: long): short
                   getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                   setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                   setJBooleanAt(arg0: long, arg1: boolean): void
                   setJByteAt(arg0: long, arg1: byte): void
                   setJCharAt(arg0: long, arg1: char): void
                   setJDoubleAt(arg0: long, arg1: double): void
                   setJFloatAt(arg0: long, arg1: float): void
                   setJIntAt(arg0: long, arg1: int): void
                   setJLongAt(arg0: long, arg1: long): void
                   setJShortAt(arg0: long, arg1: short): void
                   setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   minus(arg0: sun.jvm.hotspot.debugger.Address): long
                   lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   getValue(): long
                   static main(arg0: java.lang.String[]): void
               }
               interface WindbgDebugger extends sun.jvm.hotspot.debugger.JVMDebugger {
                   addressValueToString(arg0: long): java.lang.String
                   readJBoolean(arg0: long): boolean
                   readJByte(arg0: long): byte
                   readJChar(arg0: long): char
                   readJDouble(arg0: long): double
                   readJFloat(arg0: long): float
                   readJInt(arg0: long): int
                   readJLong(arg0: long): long
                   readJShort(arg0: long): short
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.windbg.WindbgOopHandle
                   getThreadIntegerRegisterSet(arg0: long): long[]
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   getThreadIdFromSysId(arg0: long): long
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   getAddressSize(): int
               }
               class DLL implements sun.jvm.hotspot.debugger.cdbg.LoadObject {
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.WindbgDebugger, arg1: java.lang.String, arg2: long, arg3: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   isDLL(): boolean
                   lookupSymbol(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getBase(): sun.jvm.hotspot.debugger.Address
                   getName(): java.lang.String
                   getSize(): long
                   getDebugInfoDataBase(): sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase
                   debugInfoForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   closestSymbolToPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   lineNumberForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LineNumberInfo
                   close(): void
                   static access$000(arg0: sun.jvm.hotspot.debugger.windbg.DLL): java.lang.String
                   static access$100(arg0: sun.jvm.hotspot.debugger.windbg.DLL): sun.jvm.hotspot.debugger.Address
               }
               class DLL$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                   this$0: sun.jvm.hotspot.debugger.windbg.DLL
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.DLL)
                   computeValue(): java.lang.Object
               }
               class DLL$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                   this$0: sun.jvm.hotspot.debugger.windbg.DLL
                   constructor(arg0: sun.jvm.hotspot.debugger.windbg.DLL)
                   computeValue(): java.lang.Object
               }
               class AddressDataSource implements sun.jvm.hotspot.debugger.DataSource {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   readByte(): byte
                   readShort(): short
                   readInt(): int
                   readLong(): long
                   read(arg0: byte[]): int
                   seek(arg0: long): void
                   getFilePointer(): long
                   close(): void
               }
               
            }
            namespace win32 {
               namespace coff {
                  interface WindowsNTSubsystem {
                      static IMAGE_SUBSYSTEM_UNKNOWN: short
                      static IMAGE_SUBSYSTEM_NATIVE: short
                      static IMAGE_SUBSYSTEM_WINDOWS_GUI: short
                      static IMAGE_SUBSYSTEM_WINDOWS_CUI: short
                      static IMAGE_SUBSYSTEM_POSIX_CUI: short
                      static IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: short
                      static IMAGE_SUBSYSTEM_EFI_APPLICATION: short
                      static IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: short
                      static IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: short
                  }
                  interface TypeIndicators {
                      static IMAGE_REL_I386_ABSOLUTE: short
                      static IMAGE_REL_I386_DIR16: short
                      static IMAGE_REL_I386_REL16: short
                      static IMAGE_REL_I386_DIR32: short
                      static IMAGE_REL_I386_DIR32NB: short
                      static IMAGE_REL_I386_SEG12: short
                      static IMAGE_REL_I386_SECTION: short
                      static IMAGE_REL_I386_SECREL: short
                      static IMAGE_REL_I386_REL32: short
                      static IMAGE_REL_MIPS_ABSOLUTE: short
                      static IMAGE_REL_MIPS_REFHALF: short
                      static IMAGE_REL_MIPS_REFWORD: short
                      static IMAGE_REL_MIPS_JMPADDR: short
                      static IMAGE_REL_MIPS_REFHI: short
                      static IMAGE_REL_MIPS_REFLO: short
                      static IMAGE_REL_MIPS_GPREL: short
                      static IMAGE_REL_MIPS_LITERAL: short
                      static IMAGE_REL_MIPS_SECTION: short
                      static IMAGE_REL_MIPS_SECREL: short
                      static IMAGE_REL_MIPS_SECRELLO: short
                      static IMAGE_REL_MIPS_SECRELHI: short
                      static IMAGE_REL_MIPS_JMPADDR16: short
                      static IMAGE_REL_MIPS_REFWORDNB: short
                      static IMAGE_REL_MIPS_PAIR: short
                      static IMAGE_REL_ALPHA_ABSOLUTE: short
                      static IMAGE_REL_ALPHA_REFLONG: short
                      static IMAGE_REL_ALPHA_REFQUAD: short
                      static IMAGE_REL_ALPHA_GPREL32: short
                      static IMAGE_REL_ALPHA_LITERAL: short
                      static IMAGE_REL_ALPHA_LITUSE: short
                      static IMAGE_REL_ALPHA_GPDISP: short
                      static IMAGE_REL_ALPHA_BRADDR: short
                      static IMAGE_REL_ALPHA_HINT: short
                      static IMAGE_REL_ALPHA_INLINE_REFLONG: short
                      static IMAGE_REL_ALPHA_REFHI: short
                      static IMAGE_REL_ALPHA_REFLO: short
                      static IMAGE_REL_ALPHA_PAIR: short
                      static IMAGE_REL_ALPHA_MATCH: short
                      static IMAGE_REL_ALPHA_SECTION: short
                      static IMAGE_REL_ALPHA_SECREL: short
                      static IMAGE_REL_ALPHA_REFLONGNB: short
                      static IMAGE_REL_ALPHA_SECRELLO: short
                      static IMAGE_REL_ALPHA_SECRELHI: short
                      static IMAGE_REL_ALPHA_REFQ3: short
                      static IMAGE_REL_ALPHA_REFQ2: short
                      static IMAGE_REL_ALPHA_REFQ1: short
                      static IMAGE_REL_ALPHA_GPRELLO: short
                      static IMAGE_REL_ALPHA_GPRELHI: short
                      static IMAGE_REL_PPC_ABSOLUTE: short
                      static IMAGE_REL_PPC_ADDR64: short
                      static IMAGE_REL_PPC_ADDR32: short
                      static IMAGE_REL_PPC_ADDR24: short
                      static IMAGE_REL_PPC_ADDR16: short
                      static IMAGE_REL_PPC_ADDR14: short
                      static IMAGE_REL_PPC_REL24: short
                      static IMAGE_REL_PPC_REL14: short
                      static IMAGE_REL_PPC_ADDR32NB: short
                      static IMAGE_REL_PPC_SECREL: short
                      static IMAGE_REL_PPC_SECTION: short
                      static IMAGE_REL_PPC_SECREL16: short
                      static IMAGE_REL_PPC_REFHI: short
                      static IMAGE_REL_PPC_REFLO: short
                      static IMAGE_REL_PPC_PAIR: short
                      static IMAGE_REL_PPC_SECRELLO: short
                      static IMAGE_REL_PPC_SECRELHI: short
                      static IMAGE_REL_PPC_GPREL: short
                      static IMAGE_REL_SH3_ABSOLUTE: short
                      static IMAGE_REL_SH3_DIRECT16: short
                      static IMAGE_REL_SH3_DIRECT32: short
                      static IMAGE_REL_SH3_DIRECT8: short
                      static IMAGE_REL_SH3_DIRECT8_WORD: short
                      static IMAGE_REL_SH3_DIRECT8_LONG: short
                      static IMAGE_REL_SH3_DIRECT4: short
                      static IMAGE_REL_SH3_DIRECT4_WORD: short
                      static IMAGE_REL_SH3_DIRECT4_LONG: short
                      static IMAGE_REL_SH3_PCREL8_WORD: short
                      static IMAGE_REL_SH3_PCREL8_LONG: short
                      static IMAGE_REL_SH3_PCREL12_WORD: short
                      static IMAGE_REL_SH3_STARTOF_SECTION: short
                      static IMAGE_REL_SH3_SIZEOF_SECTION: short
                      static IMAGE_REL_SH3_SECTION: short
                      static IMAGE_REL_SH3_SECREL: short
                      static IMAGE_REL_SH3_DIRECT32_NB: short
                      static IMAGE_REL_ARM_ABSOLUTE: short
                      static IMAGE_REL_ARM_ADDR32: short
                      static IMAGE_REL_ARM_ADDR32NB: short
                      static IMAGE_REL_ARM_BRANCH24: short
                      static IMAGE_REL_ARM_BRANCH11: short
                      static IMAGE_REL_ARM_SECTION: short
                      static IMAGE_REL_ARM_SECREL: short
                  }
                  class TestParser {
                      constructor()
                      static main(arg0: java.lang.String[]): void
                  }
                  class TestDebugInfo implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionTypes , sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolTypes , sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeLeafIndices {
                      constructor()
                      static main(arg0: java.lang.String[]): void
                  }
                  interface SectionFlags {
                      static IMAGE_SCN_TYPE_REG: int
                      static IMAGE_SCN_TYPE_DSECT: int
                      static IMAGE_SCN_TYPE_NOLOAD: int
                      static IMAGE_SCN_TYPE_GROUP: int
                      static IMAGE_SCN_TYPE_NO_PAD: int
                      static IMAGE_SCN_TYPE_COPY: int
                      static IMAGE_SCN_CNT_CODE: int
                      static IMAGE_SCN_CNT_INITIALIZED_DATA: int
                      static IMAGE_SCN_CNT_UNINITIALIZED_DATA: int
                      static IMAGE_SCN_LNK_OTHER: int
                      static IMAGE_SCN_LNK_INFO: int
                      static IMAGE_SCN_TYPE_OVER: int
                      static IMAGE_SCN_LNK_REMOVE: int
                      static IMAGE_SCN_LNK_COMDAT: int
                      static IMAGE_SCN_MEM_FARDATA: int
                      static IMAGE_SCN_MEM_PURGEABLE: int
                      static IMAGE_SCN_MEM_16BIT: int
                      static IMAGE_SCN_MEM_LOCKED: int
                      static IMAGE_SCN_MEM_PRELOAD: int
                      static IMAGE_SCN_ALIGN_1BYTES: int
                      static IMAGE_SCN_ALIGN_2BYTES: int
                      static IMAGE_SCN_ALIGN_4BYTES: int
                      static IMAGE_SCN_ALIGN_8BYTES: int
                      static IMAGE_SCN_ALIGN_16BYTES: int
                      static IMAGE_SCN_ALIGN_32BYTES: int
                      static IMAGE_SCN_ALIGN_64BYTES: int
                      static IMAGE_SCN_ALIGN_128BYTES: int
                      static IMAGE_SCN_ALIGN_256BYTES: int
                      static IMAGE_SCN_ALIGN_512BYTES: int
                      static IMAGE_SCN_ALIGN_1024BYTES: int
                      static IMAGE_SCN_ALIGN_2048BYTES: int
                      static IMAGE_SCN_ALIGN_4096BYTES: int
                      static IMAGE_SCN_ALIGN_8192BYTES: int
                      static IMAGE_SCN_LNK_NRELOC_OVFL: int
                      static IMAGE_SCN_MEM_DISCARDABLE: int
                      static IMAGE_SCN_MEM_NOT_CACHED: int
                      static IMAGE_SCN_MEM_NOT_PAGED: int
                      static IMAGE_SCN_MEM_SHARED: int
                      static IMAGE_SCN_MEM_EXECUTE: int
                      static IMAGE_SCN_MEM_READ: int
                      static IMAGE_SCN_MEM_WRITE: int
                  }
                  interface MachineTypes {
                      static IMAGE_FILE_MACHINE_UNKNOWN: short
                      static IMAGE_FILE_MACHINE_ALPHA: short
                      static IMAGE_FILE_MACHINE_ARM: short
                      static IMAGE_FILE_MACHINE_ALPHA64: short
                      static IMAGE_FILE_MACHINE_I386: short
                      static IMAGE_FILE_MACHINE_IA64: short
                      static IMAGE_FILE_MACHINE_M68K: short
                      static IMAGE_FILE_MACHINE_MIPS16: short
                      static IMAGE_FILE_MACHINE_MIPSFPU: short
                      static IMAGE_FILE_MACHINE_MIPSFPU16: short
                      static IMAGE_FILE_MACHINE_POWERPC: short
                      static IMAGE_FILE_MACHINE_R3000: short
                      static IMAGE_FILE_MACHINE_R4000: short
                      static IMAGE_FILE_MACHINE_R10000: short
                      static IMAGE_FILE_MACHINE_SH3: short
                      static IMAGE_FILE_MACHINE_SH4: short
                      static IMAGE_FILE_MACHINE_THUMB: short
                  }
                  class DumpExports {
                      constructor()
                      static main(arg0: java.lang.String[]): void
                  }
                  interface DebugVC50X86RegisterEnums {
                      static NONE: int
                      static AL: int
                      static CL: int
                      static DL: int
                      static BL: int
                      static AH: int
                      static CH: int
                      static DH: int
                      static BH: int
                      static AX: int
                      static CX: int
                      static DX: int
                      static BX: int
                      static SP: int
                      static BP: int
                      static SI: int
                      static DI: int
                      static EAX: int
                      static ECX: int
                      static EDX: int
                      static EBX: int
                      static ESP: int
                      static EBP: int
                      static ESI: int
                      static EDI: int
                      static ES: int
                      static CS: int
                      static SS: int
                      static DS: int
                      static FS: int
                      static GS: int
                      static IP: int
                      static FLAGS: int
                      static EIP: int
                      static EFLAGS: int
                      static TEMP: int
                      static TEMPH: int
                      static QUOTE: int
                      static CR0: int
                      static CR1: int
                      static CR2: int
                      static CR3: int
                      static DR0: int
                      static DR1: int
                      static DR2: int
                      static DR3: int
                      static DR4: int
                      static DR5: int
                      static DR6: int
                      static DR7: int
                      static ST0: int
                      static ST1: int
                      static ST2: int
                      static ST3: int
                      static ST4: int
                      static ST5: int
                      static ST6: int
                      static ST7: int
                      static CONTROL: int
                      static STATUS: int
                      static TAG: int
                      static FPIP: int
                      static FPCS: int
                      static FPDO: int
                      static FPDS: int
                      static ISEM: int
                      static FPEIP: int
                      static FPEDO: int
                  }
                  interface DebugVC50SegDescEnums {
                      static SEGMAP_GROUP_MASK: short
                      static SEGMAP_ABS_MASK: short
                      static SEGMAP_SEL_MASK: short
                      static SEGMAP_32BIT_MASK: short
                      static SEGMAP_EXECUTABLE_MASK: short
                      static SEGMAP_WRITABLE_MASK: short
                      static SEGMAP_READABLE_MASK: short
                  }
                  interface DebugVC50ReservedTypes {
                      static T_NOTYPE: int
                      static T_ABS: int
                      static T_SEGMENT: int
                      static T_VOID: int
                      static T_PVOID: int
                      static T_PFVOID: int
                      static T_PHVOID: int
                      static T_32PVOID: int
                      static T_32PFVOID: int
                      static T_64PVOID: int
                      static T_CURRENCY: int
                      static T_NBASICSTR: int
                      static T_FBASICSTR: int
                      static T_NOTTRANS: int
                      static T_BIT: int
                      static T_PASCHAR: int
                      static T_CHAR: int
                      static T_UCHAR: int
                      static T_PCHAR: int
                      static T_PUCHAR: int
                      static T_PFCHAR: int
                      static T_PFUCHAR: int
                      static T_PHCHAR: int
                      static T_PHUCHAR: int
                      static T_32PCHAR: int
                      static T_32PUCHAR: int
                      static T_32PFCHAR: int
                      static T_32PFUCHAR: int
                      static T_64PCHAR: int
                      static T_64PUCHAR: int
                      static T_RCHAR: int
                      static T_PRCHAR: int
                      static T_PFRCHAR: int
                      static T_PHRCHAR: int
                      static T_32PRCHAR: int
                      static T_32PFRCHAR: int
                      static T_64PRCHAR: int
                      static T_WCHAR: int
                      static T_PWCHAR: int
                      static T_PFWCHAR: int
                      static T_PHWCHAR: int
                      static T_32PWCHAR: int
                      static T_32PFWCHAR: int
                      static T_64PWCHAR: int
                      static T_INT2: int
                      static T_UINT2: int
                      static T_PINT2: int
                      static T_PUINT2: int
                      static T_PFINT2: int
                      static T_PFUINT2: int
                      static T_PHINT2: int
                      static T_PHUINT2: int
                      static T_32PINT2: int
                      static T_32PUINT2: int
                      static T_32PFINT2: int
                      static T_32PFUINT2: int
                      static T_64PINT2: int
                      static T_64PUINT2: int
                      static T_SHORT: int
                      static T_USHORT: int
                      static T_PSHORT: int
                      static T_PUSHORT: int
                      static T_PFSHORT: int
                      static T_PFUSHORT: int
                      static T_PHSHORT: int
                      static T_PHUSHORT: int
                      static T_32PSHORT: int
                      static T_32PUSHORT: int
                      static T_32PFSHORT: int
                      static T_32PFUSHORT: int
                      static T_64PSHORT: int
                      static T_64PUSHORT: int
                      static T_INT4: int
                      static T_UINT4: int
                      static T_PINT4: int
                      static T_PUINT4: int
                      static T_PFINT4: int
                      static T_PFUINT4: int
                      static T_PHINT4: int
                      static T_PHUINT4: int
                      static T_32PINT4: int
                      static T_32PUINT4: int
                      static T_32PFINT4: int
                      static T_32PFUINT4: int
                      static T_64PINT4: int
                      static T_64PUINT4: int
                      static T_LONG: int
                      static T_ULONG: int
                      static T_PLONG: int
                      static T_PULONG: int
                      static T_PFLONG: int
                      static T_PFULONG: int
                      static T_PHLONG: int
                      static T_PHULONG: int
                      static T_32PLONG: int
                      static T_32PULONG: int
                      static T_32PFLONG: int
                      static T_32PFULONG: int
                      static T_64PLONG: int
                      static T_64PULONG: int
                      static T_INT8: int
                      static T_UINT8: int
                      static T_PINT8: int
                      static T_PUINT8: int
                      static T_PFINT8: int
                      static T_PFUINT8: int
                      static T_PHINT8: int
                      static T_PHUINT8: int
                      static T_32PINT8: int
                      static T_32PUINT8: int
                      static T_32PFINT8: int
                      static T_32PFUINT8: int
                      static T_64PINT8: int
                      static T_64PUINT8: int
                      static T_QUAD: int
                      static T_UQUAD: int
                      static T_PQUAD: int
                      static T_PUQUAD: int
                      static T_PFQUAD: int
                      static T_PFUQUAD: int
                      static T_PHQUAD: int
                      static T_PHUQUAD: int
                      static T_32PQUAD: int
                      static T_32PUQUAD: int
                      static T_32PFQUAD: int
                      static T_32PFUQUAD: int
                      static T_64PQUAD: int
                      static T_64PUQUAD: int
                      static T_REAL32: int
                      static T_PREAL32: int
                      static T_PFREAL32: int
                      static T_PHREAL32: int
                      static T_32PREAL32: int
                      static T_32PFREAL32: int
                      static T_64PREAL32: int
                      static T_REAL48: int
                      static T_PREAL48: int
                      static T_PFREAL48: int
                      static T_PHREAL48: int
                      static T_32PREAL48: int
                      static T_32PFREAL48: int
                      static T_64PREAL48: int
                      static T_REAL64: int
                      static T_PREAL64: int
                      static T_PFREAL64: int
                      static T_PHREAL64: int
                      static T_32PREAL64: int
                      static T_32PFREAL64: int
                      static T_64PREAL64: int
                      static T_REAL80: int
                      static T_PREAL80: int
                      static T_PFREAL80: int
                      static T_PHREAL80: int
                      static T_32PREAL80: int
                      static T_32PFREAL80: int
                      static T_64PREAL80: int
                      static T_REAL128: int
                      static T_PREAL128: int
                      static T_PFREAL128: int
                      static T_PHREAL128: int
                      static T_32PREAL128: int
                      static T_32PFREAL128: int
                      static T_64PREAL128: int
                      static T_CPLX32: int
                      static T_PCPLX32: int
                      static T_PFCPLX32: int
                      static T_PHCPLX32: int
                      static T_32PCPLX32: int
                      static T_32PFCPLX32: int
                      static T_64PCPLX32: int
                      static T_CPLX64: int
                      static T_PCPLX64: int
                      static T_PFCPLX64: int
                      static T_PHCPLX64: int
                      static T_32PCPLX64: int
                      static T_32PFCPLX64: int
                      static T_64PCPLX64: int
                      static T_CPLX80: int
                      static T_PCPLX80: int
                      static T_PFCPLX80: int
                      static T_PHCPLX80: int
                      static T_32PCPLX80: int
                      static T_32PFCPLX80: int
                      static T_64PCPLX80: int
                      static T_CPLX128: int
                      static T_PCPLX128: int
                      static T_PFCPLX128: int
                      static T_PHCPLX128: int
                      static T_32PCPLX128: int
                      static T_32PFCPLX128: int
                      static T_64PCPLX128: int
                      static T_BOOL08: int
                      static T_BOOL16: int
                      static T_BOOL32: int
                      static T_BOOL64: int
                      static T_PBOOL08: int
                      static T_PBOOL16: int
                      static T_PBOOL32: int
                      static T_PBOOL64: int
                      static T_PFBOOL08: int
                      static T_PFBOOL16: int
                      static T_PFBOOL32: int
                      static T_PFBOOL64: int
                      static T_PHBOOL08: int
                      static T_PHBOOL16: int
                      static T_PHBOOL32: int
                      static T_PHBOOL64: int
                      static T_32PBOOL08: int
                      static T_32PFBOOL08: int
                      static T_32PBOOL16: int
                      static T_32PFBOOL16: int
                      static T_32PBOOL32: int
                      static T_32PFBOOL32: int
                      static T_32PBOOL64: int
                      static T_32PFBOOL64: int
                      static T_64PBOOL08: int
                      static T_64PBOOL16: int
                      static T_64PBOOL32: int
                      static T_64PBOOL64: int
                  }
                  interface DLLCharacteristics {
                      static IMAGE_DLLCHARACTERISTICS_NO_BIND: short
                      static IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: short
                      static IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: short
                  }
                  interface Characteristics {
                      static IMAGE_FILE_RELOCS_STRIPPED: short
                      static IMAGE_FILE_EXECUTABLE_IMAGE: short
                      static IMAGE_FILE_LINE_NUMS_STRIPPED: short
                      static IMAGE_FILE_LOCAL_SYMS_STRIPPED: short
                      static IMAGE_FILE_AGGRESSIVE_WS_TRIM: short
                      static IMAGE_FILE_LARGE_ADDRESS_AWARE: short
                      static IMAGE_FILE_16BIT_MACHINE: short
                      static IMAGE_FILE_BYTES_REVERSED_LO: short
                      static IMAGE_FILE_32BIT_MACHINE: short
                      static IMAGE_FILE_DEBUG_STRIPPED: short
                      static IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: short
                      static IMAGE_FILE_SYSTEM: short
                      static IMAGE_FILE_DLL: short
                      static IMAGE_FILE_UP_SYSTEM_ONLY: short
                      static IMAGE_FILE_BYTES_REVERSED_HI: short
                  }
                  interface COMDATSelectionTypes {
                      static IMAGE_COMDAT_SELECT_NODUPLICATES: byte
                      static IMAGE_COMDAT_SELECT_ANY: byte
                      static IMAGE_COMDAT_SELECT_SAME_SIZE: byte
                      static IMAGE_COMDAT_SELECT_EXACT_MATCH: byte
                      static IMAGE_COMDAT_SELECT_ASSOCIATIVE: byte
                      static IMAGE_COMDAT_SELECT_LARGEST: byte
                  }
                  interface COFFSymbolConstants {
                      static IMAGE_SYM_UNDEFINED: short
                      static IMAGE_SYM_ABSOLUTE: short
                      static IMAGE_SYM_DEBUG: short
                      static IMAGE_SYM_TYPE_NULL: short
                      static IMAGE_SYM_TYPE_VOID: short
                      static IMAGE_SYM_TYPE_CHAR: short
                      static IMAGE_SYM_TYPE_SHORT: short
                      static IMAGE_SYM_TYPE_INT: short
                      static IMAGE_SYM_TYPE_LONG: short
                      static IMAGE_SYM_TYPE_FLOAT: short
                      static IMAGE_SYM_TYPE_DOUBLE: short
                      static IMAGE_SYM_TYPE_STRUCT: short
                      static IMAGE_SYM_TYPE_UNION: short
                      static IMAGE_SYM_TYPE_ENUM: short
                      static IMAGE_SYM_TYPE_MOE: short
                      static IMAGE_SYM_TYPE_BYTE: short
                      static IMAGE_SYM_TYPE_WORD: short
                      static IMAGE_SYM_TYPE_UINT: short
                      static IMAGE_SYM_TYPE_DWORD: short
                      static IMAGE_SYM_DTYPE_NULL: short
                      static IMAGE_SYM_DTYPE_POINTER: short
                      static IMAGE_SYM_DTYPE_FUNCTION: short
                      static IMAGE_SYM_DTYPE_ARRAY: short
                      static IMAGE_SYM_CLASS_END_OF_FUNCTION: byte
                      static IMAGE_SYM_CLASS_NULL: byte
                      static IMAGE_SYM_CLASS_AUTOMATIC: byte
                      static IMAGE_SYM_CLASS_EXTERNAL: byte
                      static IMAGE_SYM_CLASS_STATIC: byte
                      static IMAGE_SYM_CLASS_REGISTER: byte
                      static IMAGE_SYM_CLASS_EXTERNAL_DEF: byte
                      static IMAGE_SYM_CLASS_LABEL: byte
                      static IMAGE_SYM_CLASS_UNDEFINED_LABEL: byte
                      static IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: byte
                      static IMAGE_SYM_CLASS_ARGUMENT: byte
                      static IMAGE_SYM_CLASS_STRUCT_TAG: byte
                      static IMAGE_SYM_CLASS_MEMBER_OF_UNION: byte
                      static IMAGE_SYM_CLASS_UNION_TAG: byte
                      static IMAGE_SYM_CLASS_TYPE_DEFINITION: byte
                      static IMAGE_SYM_CLASS_UNDEFINED_STATIC: byte
                      static IMAGE_SYM_CLASS_ENUM_TAG: byte
                      static IMAGE_SYM_CLASS_MEMBER_OF_ENUM: byte
                      static IMAGE_SYM_CLASS_REGISTER_PARAM: byte
                      static IMAGE_SYM_CLASS_BIT_FIELD: byte
                      static IMAGE_SYM_CLASS_BLOCK: byte
                      static IMAGE_SYM_CLASS_FUNCTION: byte
                      static IMAGE_SYM_CLASS_END_OF_STRUCT: byte
                      static IMAGE_SYM_CLASS_FILE: byte
                      static IMAGE_SYM_CLASS_SECTION: byte
                      static IMAGE_SYM_CLASS_WEAK_EXTERNAL: byte
                  }
                  interface DebugVC50TypeEnums {
                      static MODIFIER_CONST_MASK: int
                      static MODIFIER_VOLATILE_MASK: int
                      static MODIFIER_UNALIGNED_MASK: int
                      static POINTER_PTRTYPE_MASK: int
                      static POINTER_PTRTYPE_SHIFT: int
                      static POINTER_PTRTYPE_NEAR: int
                      static POINTER_PTRTYPE_FAR: int
                      static POINTER_PTRTYPE_HUGE: int
                      static POINTER_PTRTYPE_BASED_ON_SEGMENT: int
                      static POINTER_PTRTYPE_BASED_ON_VALUE: int
                      static POINTER_PTRTYPE_BASED_ON_SEGMENT_OF_VALUE: int
                      static POINTER_PTRTYPE_BASED_ON_ADDRESS_OF_SYMBOL: int
                      static POINTER_PTRTYPE_BASED_ON_SEGMENT_OF_SYMBOL_ADDRESS: int
                      static POINTER_PTRTYPE_BASED_ON_TYPE: int
                      static POINTER_PTRTYPE_BASED_ON_SELF: int
                      static POINTER_PTRTYPE_NEAR_32_BIT: int
                      static POINTER_PTRTYPE_FAR_32_BIT: int
                      static POINTER_PTRTYPE_64_BIT: int
                      static POINTER_PTRMODE_MASK: int
                      static POINTER_PTRMODE_SHIFT: int
                      static POINTER_PTRMODE_POINTER: int
                      static POINTER_PTRMODE_REFERENCE: int
                      static POINTER_PTRMODE_PTR_TO_DATA_MEMBER: int
                      static POINTER_PTRMODE_PTR_TO_METHOD: int
                      static POINTER_ISFLAT32_MASK: int
                      static POINTER_VOLATILE_MASK: int
                      static POINTER_CONST_MASK: int
                      static POINTER_UNALIGNED_MASK: int
                      static POINTER_RESTRICT_MASK: int
                      static PTR_FORMAT_DATA_NVF_NVB: short
                      static PTR_FORMAT_DATA_VB: short
                      static PTR_FORMAT_METHOD_NVB_SAP: short
                      static PTR_FORMAT_METHOD_NVB_MAP: short
                      static PTR_FORMAT_METHOD_VB: short
                      static PROPERTY_PACKED: short
                      static PROPERTY_CTOR: short
                      static PROPERTY_OVEROPS: short
                      static PROPERTY_ISNESTED: short
                      static PROPERTY_CNESTED: short
                      static PROPERTY_OPASSIGN: short
                      static PROPERTY_OPCAST: short
                      static PROPERTY_FWDREF: short
                      static PROPERTY_SCOPED: short
                      static CALLCONV_NEAR_C: byte
                      static CALLCONV_FAR_C: byte
                      static CALLCONV_NEAR_PASCAL: byte
                      static CALLCONV_FAR_PASCAL: byte
                      static CALLCONV_NEAR_FASTCALL: byte
                      static CALLCONV_FAR_FASTCALL: byte
                      static CALLCONV_RESERVED: byte
                      static CALLCONV_NEAR_STDCALL: byte
                      static CALLCONV_FAR_STDCALL: byte
                      static CALLCONV_NEAR_SYSCALL: byte
                      static CALLCONV_FAR_SYSCALL: byte
                      static CALLCONV_THIS_CALL: byte
                      static CALLCONV_MIPS_CALL: byte
                      static CALLCONV_GENERIC: byte
                      static VTENTRY_NEAR: int
                      static VTENTRY_FAR: int
                      static VTENTRY_THIN: int
                      static VTENTRY_ADDRESS_PT_DISP: int
                      static VTENTRY_FAR_PTR_TO_METACLASS: int
                      static VTENTRY_NEAR_32: int
                      static VTENTRY_FAR_32: int
                      static LABEL_ADDR_MODE_NEAR: short
                      static LABEL_ADDR_MODE_FAR: short
                      static RESERVED_TYPE_MASK: int
                      static RESERVED_TYPE_SPECIAL: int
                      static RESERVED_TYPE_SIGNED_INT: int
                      static RESERVED_TYPE_UNSIGNED_INT: int
                      static RESERVED_TYPE_BOOLEAN: int
                      static RESERVED_TYPE_REAL: int
                      static RESERVED_TYPE_COMPLEX: int
                      static RESERVED_TYPE_SPECIAL2: int
                      static RESERVED_TYPE_REALLY_INT: int
                      static RESERVED_MODE_MASK: int
                      static RESERVED_MODE_DIRECT: int
                      static RESERVED_MODE_NEAR_PTR: int
                      static RESERVED_MODE_FAR_PTR: int
                      static RESERVED_MODE_HUGE_PTR: int
                      static RESERVED_MODE_NEAR_32_PTR: int
                      static RESERVED_MODE_FAR_32_PTR: int
                      static RESERVED_MODE_NEAR_64_PTR: int
                      static RESERVED_SIZE_MASK: int
                      static RESERVED_SIZE_SPECIAL_NO_TYPE: int
                      static RESERVED_SIZE_SPECIAL_ABSOLUTE_SYMBOL: int
                      static RESERVED_SIZE_SPECIAL_SEGMENT: int
                      static RESERVED_SIZE_SPECIAL_VOID: int
                      static RESERVED_SIZE_SPECIAL_BASIC_8_BYTE: int
                      static RESERVED_SIZE_SPECIAL_NEAR_BASIC_STRING: int
                      static RESERVED_SIZE_SPECIAL_FAR_BASIC_STRING: int
                      static RESERVED_SIZE_SPECIAL_UNTRANSLATED: int
                      static RESERVED_SIZE_INT_1_BYTE: int
                      static RESERVED_SIZE_INT_2_BYTE: int
                      static RESERVED_SIZE_INT_4_BYTE: int
                      static RESERVED_SIZE_INT_8_BYTE: int
                      static RESERVED_SIZE_REAL_32_BIT: int
                      static RESERVED_SIZE_REAL_64_BIT: int
                      static RESERVED_SIZE_REAL_80_BIT: int
                      static RESERVED_SIZE_REAL_128_BIT: int
                      static RESERVED_SIZE_REAL_48_BIT: int
                      static RESERVED_SIZE_SPECIAL2_BIT: int
                      static RESERVED_SIZE_SPECIAL2_PASCAL_CHAR: int
                      static RESERVED_SIZE_REALLY_INT_CHAR: int
                      static RESERVED_SIZE_REALLY_INT_WCHAR: int
                      static RESERVED_SIZE_REALLY_INT_2_BYTE: int
                      static RESERVED_SIZE_REALLY_INT_2_BYTE_U: int
                      static RESERVED_SIZE_REALLY_INT_4_BYTE: int
                      static RESERVED_SIZE_REALLY_INT_4_BYTE_U: int
                      static RESERVED_SIZE_REALLY_INT_8_BYTE: int
                      static RESERVED_SIZE_REALLY_INT_8_BYTE_U: int
                  }
                  interface DebugVC50MemberAttributes {
                      static MEMATTR_ACCESS_MASK: short
                      static MEMATTR_ACCESS_NO_PROTECTION: short
                      static MEMATTR_ACCESS_PRIVATE: short
                      static MEMATTR_ACCESS_PROTECTED: short
                      static MEMATTR_ACCESS_PUBLIC: short
                      static MEMATTR_MPROP_MASK: short
                      static MEMATTR_MPROP_VANILLA: short
                      static MEMATTR_MPROP_VIRTUAL: short
                      static MEMATTR_MPROP_STATIC: short
                      static MEMATTR_MPROP_FRIEND: short
                      static MEMATTR_MPROP_INTRODUCING_VIRTUAL: short
                      static MEMATTR_MPROP_PURE_VIRTUAL: short
                      static MEMATTR_MPROP_PURE_INTRODUCING_VIRTUAL: short
                      static MEMATTR_PSEUDO_MASK: short
                      static MEMATTR_NOINHERIT_MASK: short
                      static MEMATTR_NOCONSTRUCT_MASK: short
                      static MEMATTR_COMPGENX_MASK: short
                  }
                  interface DebugVC50SSStaticSym extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSymbolBase {
                  }
                  interface DebugVC50SSFileIndex extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getNumModules(): short
                      getNumReferences(): short
                      getModStart(): short[]
                      getRefCount(): short[]
                      getNameRef(): int[]
                      getNames(): java.lang.String[]
                  }
                  interface DebugVC50SSOffsetMap32 extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SSOffsetMap16 extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SSPreComp extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SSSegName extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getSegName(arg0: int): java.lang.String
                  }
                  interface DebugVC50SegDesc {
                      getFlags(): short
                      getOverlayNum(): short
                      getGroup(): short
                      getFrame(): short
                      getName(): short
                      getClassName(): short
                      getOffset(): int
                      getSize(): int
                  }
                  interface DebugVC50SSSegMap extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getNumSegDesc(): short
                      getNumLogicalSegDesc(): short
                      getSegDesc(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SegDesc
                  }
                  interface DebugVC50SSMPC extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50TypeIterator {
                      done(): boolean
                      next(): void
                      getLength(): short
                      getTypeIndex(): int
                      getNumTypes(): int
                      typeStringDone(): boolean
                      typeStringNext(): void
                      typeStringLeaf(): int
                      typeStringOffset(): int
                      getModifierIndex(): int
                      getModifierAttribute(): short
                      getPointerType(): int
                      getPointerAttributes(): int
                      getPointerBasedOnTypeIndex(): int
                      getPointerBasedOnTypeName(): java.lang.String
                      getPointerToMemberClass(): int
                      getPointerToMemberFormat(): short
                      getArrayElementType(): int
                      getArrayIndexType(): int
                      getArrayLength(): int
                      getArrayName(): java.lang.String
                      getClassCount(): short
                      getClassProperty(): short
                      getClassFieldList(): int
                      getClassFieldListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getClassDerivationList(): int
                      getClassVShape(): int
                      getClassSize(): int
                      getClassName(): java.lang.String
                      getUnionCount(): short
                      getUnionProperty(): short
                      getUnionFieldList(): int
                      getUnionFieldListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getUnionSize(): int
                      getUnionName(): java.lang.String
                      getEnumCount(): short
                      getEnumProperty(): short
                      getEnumType(): int
                      getEnumFieldList(): int
                      getEnumFieldListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getEnumName(): java.lang.String
                      getProcedureReturnType(): int
                      getProcedureCallingConvention(): byte
                      getProcedureNumberOfParameters(): short
                      getProcedureArgumentList(): int
                      getProcedureArgumentListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getMFunctionReturnType(): int
                      getMFunctionContainingClass(): int
                      getMFunctionThis(): int
                      getMFunctionCallingConvention(): byte
                      getMFunctionNumberOfParameters(): short
                      getMFunctionArgumentList(): int
                      getMFunctionArgumentListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getMFunctionThisAdjust(): int
                      getVTShapeCount(): short
                      getVTShapeDescriptor(arg0: int): int
                      getBasicArrayType(): int
                      getLabelAddressMode(): short
                      getDimArrayType(): int
                      getDimArrayDimInfo(): int
                      getDimArrayName(): java.lang.String
                      getVFTPathCount(): int
                      getVFTPathBase(arg0: int): int
                      getSkipIndex(): int
                      getArgListCount(): int
                      getArgListType(arg0: int): int
                      getDefaultArgType(): int
                      getDefaultArgExpression(): java.lang.String
                      getDerivedCount(): int
                      getDerivedType(arg0: int): int
                      getBitfieldFieldType(): int
                      getBitfieldLength(): byte
                      getBitfieldPosition(): byte
                      getMListAttribute(): short
                      getMListLength(): int
                      getMListType(arg0: int): int
                      isMListIntroducingVirtual(): boolean
                      getMListVtabOffset(): int
                      getRefSym(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getBClassAttribute(): short
                      getBClassType(): int
                      getBClassOffset(): int
                      getVBClassAttribute(): short
                      getVBClassBaseClassType(): int
                      getVBClassVirtualBaseClassType(): int
                      getVBClassVBPOff(): int
                      getVBClassVBOff(): int
                      getIVBClassAttribute(): short
                      getIVBClassBType(): int
                      getIVBClassVBPType(): int
                      getIVBClassVBPOff(): int
                      getIVBClassVBOff(): int
                      getEnumerateAttribute(): short
                      getEnumerateValue(): long
                      getEnumerateName(): java.lang.String
                      getFriendFcnType(): int
                      getFriendFcnName(): java.lang.String
                      getIndexValue(): int
                      getIndexIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getMemberAttribute(): short
                      getMemberType(): int
                      getMemberOffset(): int
                      getMemberName(): java.lang.String
                      getStaticAttribute(): short
                      getStaticType(): int
                      getStaticName(): java.lang.String
                      getMethodCount(): short
                      getMethodList(): int
                      getMethodName(): java.lang.String
                      getNestedType(): int
                      getNestedName(): java.lang.String
                      getVFuncTabType(): int
                      getFriendClsType(): int
                      getOneMethodAttribute(): short
                      getOneMethodType(): int
                      isOneMethodIntroducingVirtual(): boolean
                      getOneMethodVBaseOff(): int
                      getOneMethodName(): java.lang.String
                      getVFuncOffType(): int
                      getVFuncOffOffset(): int
                      getNestedExAttribute(): short
                      getNestedExType(): int
                      getNestedExName(): java.lang.String
                      getMemberModifyAttribute(): short
                      getMemberModifyType(): int
                      getMemberModifyName(): java.lang.String
                      getNumericTypeAt(arg0: int): short
                      getNumericLengthAt(arg0: int): int
                      getNumericIntAt(arg0: int): int
                      getNumericLongAt(arg0: int): long
                      getNumericFloatAt(arg0: int): float
                      getNumericDoubleAt(arg0: int): double
                      getNumericDataAt(arg0: int): byte[]
                  }
                  interface DebugVC50SSGlobalTypes extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getNumTypes(): int
                      getTypeOffset(arg0: int): int
                      getTypeIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                  }
                  interface DebugVC50SSGlobalPub extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSymbolBase {
                  }
                  interface DebugVC50SSGlobalSym extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSymbolBase {
                  }
                  interface DebugVC50SSSymbolBase extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getSymHashIndex(): short
                      getAddrHashIndex(): short
                      getSymTabSize(): int
                      getSymHashSize(): int
                      getAddrHashSize(): int
                      getSymbolIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                  }
                  interface DebugVC50SSLibraries extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SrcModLineNumberMap {
                      getSegment(): int
                      getNumSourceLinePairs(): int
                      getCodeOffset(arg0: int): int
                      getLineNumber(arg0: int): int
                  }
                  interface DebugVC50SrcModFileDesc {
                      getNumCodeSegments(): int
                      getLineNumberMap(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SrcModLineNumberMap
                      getSegmentStartOffset(arg0: int): int
                      getSegmentEndOffset(arg0: int): int
                      getSourceFileName(): java.lang.String
                  }
                  interface DebugVC50SSSrcModule extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getNumSourceFiles(): int
                      getNumCodeSegments(): int
                      getSourceFileDesc(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SrcModFileDesc
                      getSegmentStartOffset(arg0: int): int
                      getSegmentEndOffset(arg0: int): int
                      getSegment(arg0: int): int
                  }
                  interface DebugVC50SSSrcLnSeg extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SymbolEnums {
                      static MACHTYPE_INTEL_8080: byte
                      static MACHTYPE_INTEL_8086: byte
                      static MACHTYPE_INTEL_80286: byte
                      static MACHTYPE_INTEL_80386: byte
                      static MACHTYPE_INTEL_80486: byte
                      static MACHTYPE_INTEL_PENTIUM: byte
                      static MACHTYPE_INTEL_PENTIUM_PRO: byte
                      static MACHTYPE_MIPS_R4000: byte
                      static MACHTYPE_MIPS_RESERVED: byte
                      static MACHTYPE_MIPS_RESERVED2: byte
                      static MACHTYPE_MC68000: byte
                      static MACHTYPE_MC68010: byte
                      static MACHTYPE_MC68020: byte
                      static MACHTYPE_MC68030: byte
                      static MACHTYPE_MC68040: byte
                      static MACHTYPE_ALPHA: byte
                      static MACHTYPE_PPC601: byte
                      static MACHTYPE_PPC603: byte
                      static MACHTYPE_PPC604: byte
                      static MACHTYPE_PPC620: byte
                      static COMPFLAG_LANGUAGE_MASK: int
                      static COMPFLAG_LANGUAGE_SHIFT: int
                      static COMPFLAG_LANGUAGE_C: int
                      static COMPFLAG_LANGUAGE_CPP: int
                      static COMPFLAG_LANGUAGE_FORTRAN: int
                      static COMPFLAG_LANGUAGE_MASM: int
                      static COMPFLAG_LANGUAGE_PASCAL: int
                      static COMPFLAG_LANGUAGE_BASIC: int
                      static COMPFLAG_LANGUAGE_COBOL: int
                      static COMPFLAG_PCODE_PRESENT_MASK: int
                      static COMPFLAG_FLOAT_PRECISION_MASK: int
                      static COMPFLAG_FLOAT_PRECISION_SHIFT: int
                      static COMPFLAG_FLOAT_PRECISION_ANSI_C: int
                      static COMPFLAG_FLOAT_PACKAGE_MASK: int
                      static COMPFLAG_FLOAT_PACKAGE_SHIFT: int
                      static COMPFLAG_FLOAT_PACKAGE_HARDWARE: int
                      static COMPFLAG_FLOAT_PACKAGE_EMULATOR: int
                      static COMPFLAG_FLOAT_PACKAGE_ALTMATH: int
                      static COMPFLAG_AMBIENT_DATA_MASK: int
                      static COMPFLAG_AMBIENT_DATA_SHIFT: int
                      static COMPFLAG_AMBIENT_CODE_MASK: int
                      static COMPFLAG_AMBIENT_CODE_SHIFT: int
                      static COMPFLAG_AMBIENT_MODEL_NEAR: int
                      static COMPFLAG_AMBIENT_MODEL_FAR: int
                      static COMPFLAG_AMBIENT_MODEL_HUGE: int
                      static COMPFLAG_MODE32_MASK: int
                      static FUNCRET_VARARGS_LEFT_TO_RIGHT_MASK: short
                      static FUNCRET_RETURNEE_STACK_CLEANUP_MASK: short
                      static FUNCRET_VOID: byte
                      static FUNCRET_IN_REGISTERS: byte
                      static FUNCRET_INDIRECT_CALLER_NEAR: byte
                      static FUNCRET_INDIRECT_CALLER_FAR: byte
                      static FUNCRET_INDIRECT_RETURNEE_NEAR: byte
                      static FUNCRET_INDIRECT_RETURNEE_FAR: byte
                      static PROCFLAGS_FRAME_POINTER_OMITTED: byte
                      static PROCFLAGS_INTERRUPT_ROUTINE: byte
                      static PROCFLAGS_FAR_RETURN: byte
                      static PROCFLAGS_NEVER_RETURN: byte
                      static THUNK_NO_TYPE: byte
                      static THUNK_ADJUSTOR: byte
                      static THUNK_VCALL: byte
                      static THUNK_PCODE: byte
                      static EXMODEL_NOT_CODE: short
                      static EXMODEL_JUMP_TABLE: short
                      static EXMODEL_PADDING: short
                      static EXMODEL_NATIVE: short
                      static EXMODEL_MICROFOCUS_COBOL: short
                      static EXMODEL_PADDING_FOR_ALIGNMENT: short
                      static EXMODEL_CODE: short
                      static EXMODEL_PCODE: short
                  }
                  interface DebugVC50SymbolTypes {
                      static S_COMPILE: int
                      static S_SSEARCH: int
                      static S_END: int
                      static S_SKIP: int
                      static S_CVRESERVE: int
                      static S_OBJNAME: int
                      static S_ENDARG: int
                      static S_COBOLUDT: int
                      static S_MANYREG: int
                      static S_RETURN: int
                      static S_ENTRYTHIS: int
                      static S_REGISTER: int
                      static S_CONSTANT: int
                      static S_UDT: int
                      static S_COBOLUDT2: int
                      static S_MANYREG2: int
                      static S_BPREL32: int
                      static S_LDATA32: int
                      static S_GDATA32: int
                      static S_PUB32: int
                      static S_LPROC32: int
                      static S_GPROC32: int
                      static S_THUNK32: int
                      static S_BLOCK32: int
                      static S_WITH32: int
                      static S_LABEL32: int
                      static S_CEXMODEL32: int
                      static S_VFTTABLE32: int
                      static S_REGREL32: int
                      static S_LTHREAD32: int
                      static S_GTHREAD32: int
                      static S_LPROCMIPS: int
                      static S_GPROCMIPS: int
                      static S_PROCREF: int
                      static S_DATAREF: int
                      static S_ALIGN: int
                  }
                  interface DebugVC50SymbolIterator extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolTypes , sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolEnums {
                      done(): boolean
                      next(): void
                      getLength(): short
                      getType(): int
                      getOffset(): int
                      getCompilerTargetProcessor(): byte
                      getCompilerFlags(): int
                      getComplierVersion(): java.lang.String
                      getRegisterSymbolType(): int
                      getRegisterEnum(): short
                      getRegisterSymbolName(): java.lang.String
                      getConstantType(): int
                      getConstantValueAsInt(): int
                      getConstantValueAsLong(): long
                      getConstantValueAsFloat(): float
                      getConstantValueAsDouble(): double
                      getConstantName(): java.lang.String
                      getUDTType(): int
                      getUDTName(): java.lang.String
                      getSearchSymbolOffset(): int
                      getSearchSegment(): short
                      getObjectCodeViewSignature(): int
                      getObjectName(): java.lang.String
                      getManyRegType(): int
                      getManyRegCount(): byte
                      getManyRegRegister(arg0: int): byte
                      getManyRegName(): java.lang.String
                      getReturnFlags(): short
                      getReturnStyle(): byte
                      getReturnRegisterCount(): byte
                      getReturnRegister(arg0: int): byte
                      advanceToEntryThisSymbol(): void
                      getBPRelOffset(): int
                      getBPRelType(): int
                      getBPRelName(): java.lang.String
                      getLGDataType(): int
                      getLGDataOffset(): int
                      getLGDataSegment(): short
                      getLGDataName(): java.lang.String
                      getLGProcParent(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getLGProcParentOffset(): int
                      getLGProcEnd(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getLGProcEndOffset(): int
                      getLGProcNext(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getLGProcNextOffset(): int
                      getLGProcLength(): int
                      getLGProcDebugStart(): int
                      getLGProcDebugEnd(): int
                      getLGProcType(): int
                      getLGProcOffset(): int
                      getLGProcSegment(): short
                      getLGProcFlags(): byte
                      getLGProcName(): java.lang.String
                      getThunkParent(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getThunkParentOffset(): int
                      getThunkEnd(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getThunkEndOffset(): int
                      getThunkNext(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getThunkNextOffset(): int
                      getThunkOffset(): int
                      getThunkSegment(): short
                      getThunkLength(): short
                      getThunkType(): byte
                      getThunkName(): java.lang.String
                      getThunkAdjustorThisDelta(): short
                      getThunkAdjustorTargetName(): java.lang.String
                      getThunkVCallDisplacement(): short
                      getThunkPCodeOffset(): int
                      getThunkPCodeSegment(): short
                      getBlockParent(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getBlockParentOffset(): int
                      getBlockEnd(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getBlockEndOffset(): int
                      getBlockLength(): int
                      getBlockOffset(): int
                      getBlockSegment(): short
                      getBlockName(): java.lang.String
                      getLabelOffset(): int
                      getLabelSegment(): short
                      getLabelFlags(): byte
                      getLabelName(): java.lang.String
                      getChangeOffset(): int
                      getChangeSegment(): short
                      getChangeModel(): short
                      getVTableRoot(): int
                      getVTablePath(): int
                      getVTableOffset(): int
                      getVTableSegment(): short
                      getRegRelOffset(): int
                      getRegRelType(): int
                      getRegRelRegister(): short
                      getRegRelName(): java.lang.String
                      getLThreadType(): int
                      getLThreadOffset(): int
                      getLThreadSegment(): short
                      getLThreadName(): java.lang.String
                  }
                  interface DebugVC50SSAlignSym extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getSymbolIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                  }
                  interface DebugVC50SSSymbols extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SSPublicSym extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SSPublic extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SSTypes extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                  }
                  interface DebugVC50SegInfo {
                      getSegment(): short
                      getOffset(): int
                      getSegmentCodeSize(): int
                  }
                  interface DebugVC50SSModule extends sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      getOverlayNumber(): short
                      getLibrariesIndex(): short
                      getNumCodeSegments(): short
                      getDebuggingStyle(): short
                      getSegInfo(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SegInfo
                      getName(): java.lang.String
                  }
                  interface DebugVC50SubsectionTypes {
                      static SST_MODULE: short
                      static SST_TYPES: short
                      static SST_PUBLIC: short
                      static SST_PUBLIC_SYM: short
                      static SST_SYMBOLS: short
                      static SST_ALIGN_SYM: short
                      static SST_SRC_LN_SEG: short
                      static SST_SRC_MODULE: short
                      static SST_LIBRARIES: short
                      static SST_GLOBAL_SYM: short
                      static SST_GLOBAL_PUB: short
                      static SST_GLOBAL_TYPES: short
                      static SST_MPC: short
                      static SST_SEG_MAP: short
                      static SST_SEG_NAME: short
                      static SST_PRE_COMP: short
                      static SST_UNUSED: short
                      static SST_OFFSET_MAP_16: short
                      static SST_OFFSET_MAP_32: short
                      static SST_FILE_INDEX: short
                      static SST_STATIC_SYM: short
                  }
                  class DebugVC50WrongNumericTypeException extends java.lang.RuntimeException {
                      constructor()
                      constructor(arg0: java.lang.String)
                  }
                  interface DebugVC50TypeLeafIndices {
                      static LF_MODIFIER: int
                      static LF_POINTER: int
                      static LF_ARRAY: int
                      static LF_CLASS: int
                      static LF_STRUCTURE: int
                      static LF_UNION: int
                      static LF_ENUM: int
                      static LF_PROCEDURE: int
                      static LF_MFUNCTION: int
                      static LF_VTSHAPE: int
                      static LF_COBOL0: int
                      static LF_COBOL1: int
                      static LF_BARRAY: int
                      static LF_LABEL: int
                      static LF_NULL: int
                      static LF_NOTTRAN: int
                      static LF_DIMARRAY: int
                      static LF_VFTPATH: int
                      static LF_PRECOMP: int
                      static LF_ENDPRECOMP: int
                      static LF_OEM: int
                      static LF_TYPESERVER: int
                      static LF_SKIP: int
                      static LF_ARGLIST: int
                      static LF_DEFARG: int
                      static LF_FIELDLIST: int
                      static LF_DERIVED: int
                      static LF_BITFIELD: int
                      static LF_METHODLIST: int
                      static LF_DIMCONU: int
                      static LF_DIMCONLU: int
                      static LF_DIMVARU: int
                      static LF_DIMVARLU: int
                      static LF_REFSYM: int
                      static LF_BCLASS: int
                      static LF_VBCLASS: int
                      static LF_IVBCLASS: int
                      static LF_ENUMERATE: int
                      static LF_FRIENDFCN: int
                      static LF_INDEX: int
                      static LF_MEMBER: int
                      static LF_STMEMBER: int
                      static LF_METHOD: int
                      static LF_NESTTYPE: int
                      static LF_VFUNCTAB: int
                      static LF_FRIENDCLS: int
                      static LF_ONEMETHOD: int
                      static LF_VFUNCOFF: int
                      static LF_NESTTYPEEX: int
                      static LF_MEMBERMODIFY: int
                      static LF_NUMERIC: int
                      static LF_CHAR: int
                      static LF_SHORT: int
                      static LF_USHORT: int
                      static LF_LONG: int
                      static LF_ULONG: int
                      static LF_REAL32: int
                      static LF_REAL64: int
                      static LF_REAL80: int
                      static LF_REAL128: int
                      static LF_QUADWORD: int
                      static LF_UQUADWORD: int
                      static LF_REAL48: int
                      static LF_COMPLEX32: int
                      static LF_COMPLEX64: int
                      static LF_COMPLEX80: int
                      static LF_COMPLEX128: int
                      static LF_VARSTRING: int
                      static LF_PAD0: int
                      static LF_PAD1: int
                      static LF_PAD2: int
                      static LF_PAD3: int
                      static LF_PAD4: int
                      static LF_PAD5: int
                      static LF_PAD6: int
                      static LF_PAD7: int
                      static LF_PAD8: int
                      static LF_PAD9: int
                      static LF_PAD10: int
                      static LF_PAD11: int
                      static LF_PAD12: int
                      static LF_PAD13: int
                      static LF_PAD14: int
                      static LF_PAD15: int
                  }
                  interface DebugTypes {
                      static IMAGE_DEBUG_TYPE_UNKNOWN: int
                      static IMAGE_DEBUG_TYPE_COFF: int
                      static IMAGE_DEBUG_TYPE_CODEVIEW: int
                      static IMAGE_DEBUG_TYPE_FPO: int
                      static IMAGE_DEBUG_TYPE_MISC: int
                      static IMAGE_DEBUG_TYPE_EXCEPTION: int
                      static IMAGE_DEBUG_TYPE_FIXUP: int
                      static IMAGE_DEBUG_TYPE_OMAP_TO_SRC: int
                      static IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: int
                      static IMAGE_DEBUG_TYPE_BORLAND: int
                  }
                  class COFFFileParser {
                      static getParser(): sun.jvm.hotspot.debugger.win32.coff.COFFFileParser
                      parse(arg0: java.lang.String): sun.jvm.hotspot.debugger.win32.coff.COFFFile
                      parse(arg0: sun.jvm.hotspot.debugger.DataSource): sun.jvm.hotspot.debugger.win32.coff.COFFFile
                  }
                  class COFFFileParser$COFFFileImpl implements sun.jvm.hotspot.debugger.win32.coff.COFFFile {
                      this$0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser, arg1: sun.jvm.hotspot.debugger.DataSource)
                      isImage(): boolean
                      getHeader(): sun.jvm.hotspot.debugger.win32.coff.COFFHeader
                      initialize(): void
                      readByteAt(arg0: long): byte
                      readByte(): byte
                      readBytesAt(arg0: long, arg1: byte[]): int
                      readBytes(arg0: byte[]): int
                      readShortAt(arg0: long): short
                      readShort(): short
                      readIntAt(arg0: long): int
                      readInt(): int
                      readLongAt(arg0: long): long
                      readLong(): long
                      readFloat(): float
                      readDouble(): double
                      readCString(): java.lang.String
                      seek(arg0: long): void
                      getFilePointer(): long
                      byteSwap(arg0: short): short
                      byteSwap(arg0: int): int
                      byteSwap(arg0: long): long
                      close(): void
                      static access$000(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl): long
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl implements sun.jvm.hotspot.debugger.win32.coff.COFFHeader {
                      this$1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl)
                      getMachineType(): short
                      getNumberOfSections(): short
                      getTimeDateStamp(): int
                      getPointerToSymbolTable(): int
                      getNumberOfSymbols(): int
                      getSizeOfOptionalHeader(): short
                      getOptionalHeader(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeader
                      getCharacteristics(): short
                      hasCharacteristic(arg0: short): boolean
                      getSectionHeader(arg0: int): sun.jvm.hotspot.debugger.win32.coff.SectionHeader
                      getCOFFSymbol(arg0: int): sun.jvm.hotspot.debugger.win32.coff.COFFSymbol
                      getNumberOfStrings(): int
                      getString(arg0: int): java.lang.String
                      getStringTable(): sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable
                      rvaToFileOffset(arg0: int): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable {
                      strings: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable$COFFString[]
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getNum(): int
                      get(arg0: int): java.lang.String
                      getAtOffset(arg0: int): java.lang.String
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable$1 implements java.util.Comparator {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable)
                      compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable$COFFString {
                      str: java.lang.String
                      offset: int
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$StringTable, arg1: java.lang.String, arg2: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFLineNumberImpl implements sun.jvm.hotspot.debugger.win32.coff.COFFLineNumber {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getType(): int
                      getLineNumber(): short
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFRelocationImpl implements sun.jvm.hotspot.debugger.win32.coff.COFFRelocation {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getVirtualAddress(): int
                      getSymbolTableIndex(): int
                      getType(): short
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$AuxSectionDefinitionsRecordImpl implements sun.jvm.hotspot.debugger.win32.coff.AuxSectionDefinitionsRecord {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getLength(): int
                      getNumberOfRelocations(): short
                      getNumberOfLineNumbers(): short
                      getCheckSum(): int
                      getNumber(): short
                      getSelection(): byte
                      getType(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$AuxFileRecordImpl implements sun.jvm.hotspot.debugger.win32.coff.AuxFileRecord {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getName(): java.lang.String
                      getType(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$AuxWeakExternalRecordImpl implements sun.jvm.hotspot.debugger.win32.coff.AuxWeakExternalRecord {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getTagIndex(): int
                      getCharacteristics(): int
                      getType(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$AuxBfEfRecordImpl implements sun.jvm.hotspot.debugger.win32.coff.AuxBfEfRecord {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getLineNumber(): short
                      getPointerToNextFunction(): int
                      getType(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$AuxFunctionDefinitionRecordImpl implements sun.jvm.hotspot.debugger.win32.coff.AuxFunctionDefinitionRecord {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getTagIndex(): int
                      getTotalSize(): int
                      getPointerToLineNumber(): int
                      getPointerToNextFunction(): int
                      getType(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl implements sun.jvm.hotspot.debugger.win32.coff.COFFSymbol , sun.jvm.hotspot.debugger.win32.coff.COFFSymbolConstants {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getOffset(): int
                      getName(): java.lang.String
                      getValue(): int
                      getSectionNumber(): short
                      getType(): short
                      getStorageClass(): byte
                      getNumberOfAuxSymbols(): byte
                      isFunctionDefinition(): boolean
                      getAuxFunctionDefinitionRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxFunctionDefinitionRecord
                      isBfOrEfSymbol(): boolean
                      getAuxBfEfRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxBfEfRecord
                      isWeakExternal(): boolean
                      getAuxWeakExternalRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxWeakExternalRecord
                      isFile(): boolean
                      getAuxFileRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxFileRecord
                      isSectionDefinition(): boolean
                      getAuxSectionDefinitionsRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxSectionDefinitionsRecord
                      static access$1700(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl$5 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl$4 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$COFFSymbolImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl implements sun.jvm.hotspot.debugger.win32.coff.SectionHeader {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getName(): java.lang.String
                      getSize(): int
                      getVirtualAddress(): int
                      getSizeOfRawData(): int
                      getPointerToRawData(): int
                      getPointerToRelocations(): int
                      getPointerToLineNumbers(): int
                      getNumberOfRelocations(): short
                      getNumberOfLineNumbers(): short
                      getSectionFlags(): int
                      hasSectionFlag(arg0: int): boolean
                      getCOFFRelocation(arg0: int): sun.jvm.hotspot.debugger.win32.coff.COFFRelocation
                      getCOFFLineNumber(arg0: int): sun.jvm.hotspot.debugger.win32.coff.COFFLineNumber
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$lineNoOffset: int
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$relocOffset: int
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$SectionHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50 , sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeLeafIndices {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getSubsectionDirectoryOffset(): int
                      getSubsectionDirectory(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionDirectory
                      static access$200(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): int
                      static access$400(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): java.lang.String
                      static access$900(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): int
                      static access$1000(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): int
                      static access$1100(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): long
                      static access$1200(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): float
                      static access$1300(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): double
                      static access$1400(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): int
                      static access$1500(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): int
                      static access$1600(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50TypeIteratorImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator , sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeLeafIndices , sun.jvm.hotspot.debugger.win32.coff.DebugVC50MemberAttributes , sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSGlobalTypes, arg2: int, arg3: int)
                      done(): boolean
                      next(): void
                      getLength(): short
                      getTypeIndex(): int
                      getNumTypes(): int
                      typeStringDone(): boolean
                      typeStringNext(): void
                      typeStringLeaf(): int
                      typeStringOffset(): int
                      getModifierIndex(): int
                      getModifierAttribute(): short
                      getPointerType(): int
                      getPointerAttributes(): int
                      getPointerBasedOnTypeIndex(): int
                      getPointerBasedOnTypeName(): java.lang.String
                      getPointerToMemberClass(): int
                      getPointerToMemberFormat(): short
                      getArrayElementType(): int
                      getArrayIndexType(): int
                      getArrayLength(): int
                      getArrayName(): java.lang.String
                      getClassCount(): short
                      getClassProperty(): short
                      getClassFieldList(): int
                      getClassFieldListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getClassDerivationList(): int
                      getClassVShape(): int
                      getClassSize(): int
                      getClassName(): java.lang.String
                      getUnionCount(): short
                      getUnionProperty(): short
                      getUnionFieldList(): int
                      getUnionFieldListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getUnionSize(): int
                      getUnionName(): java.lang.String
                      getEnumCount(): short
                      getEnumProperty(): short
                      getEnumType(): int
                      getEnumFieldList(): int
                      getEnumFieldListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getEnumName(): java.lang.String
                      getProcedureReturnType(): int
                      getProcedureCallingConvention(): byte
                      getProcedureNumberOfParameters(): short
                      getProcedureArgumentList(): int
                      getProcedureArgumentListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getMFunctionReturnType(): int
                      getMFunctionContainingClass(): int
                      getMFunctionThis(): int
                      getMFunctionCallingConvention(): byte
                      getMFunctionNumberOfParameters(): short
                      getMFunctionArgumentList(): int
                      getMFunctionArgumentListIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getMFunctionThisAdjust(): int
                      getVTShapeCount(): short
                      getVTShapeDescriptor(arg0: int): int
                      getBasicArrayType(): int
                      getLabelAddressMode(): short
                      getDimArrayType(): int
                      getDimArrayDimInfo(): int
                      getDimArrayName(): java.lang.String
                      getVFTPathCount(): int
                      getVFTPathBase(arg0: int): int
                      getSkipIndex(): int
                      getArgListCount(): int
                      getArgListType(arg0: int): int
                      getDefaultArgType(): int
                      getDefaultArgExpression(): java.lang.String
                      getDerivedCount(): int
                      getDerivedType(arg0: int): int
                      getBitfieldFieldType(): int
                      getBitfieldLength(): byte
                      getBitfieldPosition(): byte
                      getMListAttribute(): short
                      getMListLength(): int
                      getMListType(arg0: int): int
                      isMListIntroducingVirtual(): boolean
                      getMListVtabOffset(): int
                      getRefSym(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getBClassAttribute(): short
                      getBClassType(): int
                      getBClassOffset(): int
                      getVBClassAttribute(): short
                      getVBClassBaseClassType(): int
                      getVBClassVirtualBaseClassType(): int
                      getVBClassVBPOff(): int
                      getVBClassVBOff(): int
                      getIVBClassAttribute(): short
                      getIVBClassBType(): int
                      getIVBClassVBPType(): int
                      getIVBClassVBPOff(): int
                      getIVBClassVBOff(): int
                      getEnumerateAttribute(): short
                      getEnumerateValue(): long
                      getEnumerateName(): java.lang.String
                      getFriendFcnType(): int
                      getFriendFcnName(): java.lang.String
                      getIndexValue(): int
                      getIndexIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                      getMemberAttribute(): short
                      getMemberType(): int
                      getMemberOffset(): int
                      getMemberName(): java.lang.String
                      getStaticAttribute(): short
                      getStaticType(): int
                      getStaticName(): java.lang.String
                      getMethodCount(): short
                      getMethodList(): int
                      getMethodName(): java.lang.String
                      getNestedType(): int
                      getNestedName(): java.lang.String
                      getVFuncTabType(): int
                      getFriendClsType(): int
                      getOneMethodAttribute(): short
                      getOneMethodType(): int
                      isOneMethodIntroducingVirtual(): boolean
                      getOneMethodVBaseOff(): int
                      getOneMethodName(): java.lang.String
                      getVFuncOffType(): int
                      getVFuncOffOffset(): int
                      getNestedExAttribute(): short
                      getNestedExType(): int
                      getNestedExName(): java.lang.String
                      getMemberModifyAttribute(): short
                      getMemberModifyType(): int
                      getMemberModifyName(): java.lang.String
                      getNumericTypeAt(arg0: int): short
                      getNumericLengthAt(arg0: int): int
                      getNumericIntAt(arg0: int): int
                      getNumericLongAt(arg0: int): long
                      getNumericFloatAt(arg0: int): float
                      getNumericDoubleAt(arg0: int): double
                      getNumericDataAt(arg0: int): byte[]
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SymbolIteratorImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int, arg2: int)
                      done(): boolean
                      next(): void
                      getLength(): short
                      getType(): int
                      getOffset(): int
                      getCompilerTargetProcessor(): byte
                      getCompilerFlags(): int
                      getComplierVersion(): java.lang.String
                      getRegisterSymbolType(): int
                      getRegisterEnum(): short
                      getRegisterSymbolName(): java.lang.String
                      getConstantType(): int
                      getConstantValueAsInt(): int
                      getConstantValueAsLong(): long
                      getConstantValueAsFloat(): float
                      getConstantValueAsDouble(): double
                      getConstantName(): java.lang.String
                      getUDTType(): int
                      getUDTName(): java.lang.String
                      getSearchSymbolOffset(): int
                      getSearchSegment(): short
                      getObjectCodeViewSignature(): int
                      getObjectName(): java.lang.String
                      getManyRegType(): int
                      getManyRegCount(): byte
                      getManyRegRegister(arg0: int): byte
                      getManyRegName(): java.lang.String
                      getReturnFlags(): short
                      getReturnStyle(): byte
                      getReturnRegisterCount(): byte
                      getReturnRegister(arg0: int): byte
                      advanceToEntryThisSymbol(): void
                      getBPRelOffset(): int
                      getBPRelType(): int
                      getBPRelName(): java.lang.String
                      getLGDataType(): int
                      getLGDataOffset(): int
                      getLGDataSegment(): short
                      getLGDataName(): java.lang.String
                      getLGProcParent(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getLGProcParentOffset(): int
                      getLGProcEnd(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getLGProcEndOffset(): int
                      getLGProcNext(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getLGProcNextOffset(): int
                      getLGProcLength(): int
                      getLGProcDebugStart(): int
                      getLGProcDebugEnd(): int
                      getLGProcType(): int
                      getLGProcOffset(): int
                      getLGProcSegment(): short
                      getLGProcFlags(): byte
                      getLGProcName(): java.lang.String
                      getThunkParent(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getThunkParentOffset(): int
                      getThunkEnd(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getThunkEndOffset(): int
                      getThunkNext(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getThunkNextOffset(): int
                      getThunkOffset(): int
                      getThunkSegment(): short
                      getThunkLength(): short
                      getThunkType(): byte
                      getThunkName(): java.lang.String
                      getThunkAdjustorThisDelta(): short
                      getThunkAdjustorTargetName(): java.lang.String
                      getThunkVCallDisplacement(): short
                      getThunkPCodeOffset(): int
                      getThunkPCodeSegment(): short
                      getBlockParent(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getBlockParentOffset(): int
                      getBlockEnd(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                      getBlockEndOffset(): int
                      getBlockLength(): int
                      getBlockOffset(): int
                      getBlockSegment(): short
                      getBlockName(): java.lang.String
                      getLabelOffset(): int
                      getLabelSegment(): short
                      getLabelFlags(): byte
                      getLabelName(): java.lang.String
                      getChangeOffset(): int
                      getChangeSegment(): short
                      getChangeModel(): short
                      getVTableRoot(): int
                      getVTablePath(): int
                      getVTableOffset(): int
                      getVTableSegment(): short
                      getRegRelOffset(): int
                      getRegRelType(): int
                      getRegRelRegister(): short
                      getRegRelName(): java.lang.String
                      getLThreadType(): int
                      getLThreadOffset(): int
                      getLThreadSegment(): short
                      getLThreadName(): java.lang.String
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSStaticSymImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSymbolBaseImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSStaticSym {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSFileIndex {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getNumModules(): short
                      getNumReferences(): short
                      getModStart(): short[]
                      getRefCount(): short[]
                      getNameRef(): int[]
                      getNames(): java.lang.String[]
                      static access$700(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl): short
                      static access$800(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl): short
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl$4 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSFileIndexImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSOffsetMap32Impl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSOffsetMap32 {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSOffsetMap16Impl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSOffsetMap16 {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSPreCompImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSPreComp {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegNameImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSegName {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getSegName(arg0: int): java.lang.String
                      static access$600(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegNameImpl): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegNameImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegNameImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegNameImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SegDescImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SegDesc {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int)
                      getFlags(): short
                      getOverlayNum(): short
                      getGroup(): short
                      getFrame(): short
                      getName(): short
                      getClassName(): short
                      getOffset(): int
                      getSize(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegMapImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSegMap {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getNumSegDesc(): short
                      getNumLogicalSegDesc(): short
                      getSegDesc(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SegDesc
                      static access$500(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegMapImpl): short
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegMapImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegMapImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSegMapImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSMPCImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSMPC {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSGlobalTypesImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSGlobalTypes {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getNumTypes(): int
                      getTypeOffset(arg0: int): int
                      getTypeIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeIterator
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSGlobalPubImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSymbolBaseImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSGlobalPub {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSGlobalSymImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSymbolBaseImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSGlobalSym {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSymbolBaseImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSymbolBase {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getSymHashIndex(): short
                      getAddrHashIndex(): short
                      getSymTabSize(): int
                      getSymHashSize(): int
                      getAddrHashSize(): int
                      getSymbolIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSLibrariesImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSLibraries {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SrcModLineNumberMap {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int)
                      getSegment(): int
                      getNumSourceLinePairs(): int
                      getCodeOffset(arg0: int): int
                      getLineNumber(arg0: int): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModLineNumberMapImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SrcModFileDesc {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int, arg2: int)
                      getNumCodeSegments(): int
                      getLineNumberMap(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SrcModLineNumberMap
                      getSegmentStartOffset(arg0: int): int
                      getSegmentEndOffset(arg0: int): int
                      getSourceFileName(): java.lang.String
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      val$baseOffset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SrcModFileDescImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int, arg3: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSrcModule {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getNumSourceFiles(): int
                      getNumCodeSegments(): int
                      getSourceFileDesc(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SrcModFileDesc
                      getSegmentStartOffset(arg0: int): int
                      getSegmentEndOffset(arg0: int): int
                      getSegment(arg0: int): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcModuleImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSrcLnSegImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSrcLnSeg {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSAlignSymImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSAlignSym {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getSymbolIterator(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolIterator
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSSymbolsImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSSymbols {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSPublicSymImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSPublicSym {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSPublicImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSPublic {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSTypesImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSTypes {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SegInfoImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SegInfo {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int)
                      getSegment(): short
                      getOffset(): int
                      getSegmentCodeSize(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl extends sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SSModule {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getOverlayNumber(): short
                      getLibrariesIndex(): short
                      getNumCodeSegments(): short
                      getDebuggingStyle(): short
                      getSegInfo(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SegInfo
                      getName(): java.lang.String
                      static access$300(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl): short
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      val$offset: int
                      this$4: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SSModuleImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: short, arg2: short, arg3: int, arg4: int)
                      getSubsectionType(): short
                      getSubsectionModuleIndex(): short
                      getSubsectionSize(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$DebugVC50SubsectionDirectoryImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionDirectory , sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionTypes {
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: int)
                      getHeaderLength(): short
                      getEntryLength(): short
                      getNumEntries(): int
                      getSubsection(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugVC50Impl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugDirectoryEntryImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugDirectoryEntry , sun.jvm.hotspot.debugger.win32.coff.DebugTypes {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getCharacteristics(): int
                      getTimeDateStamp(): int
                      getMajorVersion(): short
                      getMinorVersion(): short
                      getType(): int
                      getSizeOfData(): int
                      getAddressOfRawData(): int
                      getPointerToRawData(): int
                      getDebugVC50(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50
                      getRawDataByte(arg0: int): byte
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DebugDirectoryImpl implements sun.jvm.hotspot.debugger.win32.coff.DebugDirectory {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int, arg2: int)
                      getNumEntries(): int
                      getEntry(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugDirectoryEntry
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportNameTable {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int[])
                      get(arg0: int): java.lang.String
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportNameTable$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$exportNamePointerTable: int[]
                      val$idx: int
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportNameTable
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportNameTable, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int[], arg3: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl implements sun.jvm.hotspot.debugger.win32.coff.ExportDirectoryTable {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int, arg2: int)
                      getExportFlags(): int
                      getTimeDateStamp(): int
                      getMajorVersion(): short
                      getMinorVersion(): short
                      getNameRVA(): int
                      getDLLName(): java.lang.String
                      getOrdinalBase(): int
                      getNumberOfAddressTableEntries(): int
                      getNumberOfNamePointers(): int
                      getExportAddressTableRVA(): int
                      getNamePointerTableRVA(): int
                      getOrdinalTableRVA(): int
                      getExportName(arg0: int): java.lang.String
                      getExportOrdinal(arg0: int): short
                      isExportAddressForwarder(arg0: short): boolean
                      getExportAddressForwarder(arg0: short): java.lang.String
                      getExportAddress(arg0: short): int
                      static access$100(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl): int[]
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl$5 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl$4 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$ExportDirectoryTableImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$DataDirectoryImpl implements sun.jvm.hotspot.debugger.win32.coff.DataDirectory {
                      rva: int
                      size: int
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getRVA(): int
                      getSize(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl implements sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderDataDirectories {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int, arg2: int)
                      getExportTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getImportTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getResourceTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getExceptionTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getCertificateTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getBaseRelocationTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getDebug(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getArchitecture(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getGlobalPtr(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getTLSTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getLoadConfigTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getBoundImportTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getImportAddressTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getDelayImportDescriptor(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getCOMPlusRuntimeHeader(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getExportDirectoryTable(): sun.jvm.hotspot.debugger.win32.coff.ExportDirectoryTable
                      getDebugDirectory(): sun.jvm.hotspot.debugger.win32.coff.DebugDirectory
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$dirOffset: int
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderDataDirectoriesImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderWindowsSpecificFieldsImpl implements sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderWindowsSpecificFields {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int, arg2: boolean)
                      getImageBase(): long
                      getSectionAlignment(): int
                      getFileAlignment(): int
                      getMajorOperatingSystemVersion(): short
                      getMinorOperatingSystemVersion(): short
                      getMajorImageVersion(): short
                      getMinorImageVersion(): short
                      getMajorSubsystemVersion(): short
                      getMinorSubsystemVersion(): short
                      getSizeOfImage(): int
                      getSizeOfHeaders(): int
                      getCheckSum(): int
                      getSubsystem(): short
                      getDLLCharacteristics(): short
                      getSizeOfStackReserve(): long
                      getSizeOfStackCommit(): long
                      getSizeOfHeapReserve(): long
                      getSizeOfHeapCommit(): long
                      getLoaderFlags(): int
                      getNumberOfRvaAndSizes(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderStandardFieldsImpl implements sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderStandardFields {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int, arg2: boolean)
                      getMajorLinkerVersion(): byte
                      getMinorLinkerVersion(): byte
                      getSizeOfCode(): int
                      getSizeOfInitializedData(): int
                      getSizeOfUninitializedData(): int
                      getAddressOfEntryPoint(): int
                      getBaseOfCode(): int
                      getBaseOfData(): int
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl implements sun.jvm.hotspot.debugger.win32.coff.OptionalHeader {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: int)
                      getMagicNumber(): short
                      getStandardFields(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderStandardFields
                      getWindowsSpecificFields(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderWindowsSpecificFields
                      getDataDirectories(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderDataDirectories
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$dataDirectoriesOffset: int
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$windowsSpecificFieldsOffset: int
                      val$isPE32Plus: boolean
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int, arg3: boolean)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      val$standardFieldsOffset: int
                      val$isPE32Plus: boolean
                      this$3: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl$OptionalHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg2: int, arg3: boolean)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl
                      val$symbolOffset: int
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl
                      val$secHdrOffset: int
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl, arg1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$COFFHeaderImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$2: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl$COFFHeaderImpl)
                      computeValue(): java.lang.Object
                  }
                  class COFFFileParser$COFFFileImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      this$1: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.win32.coff.COFFFileParser$COFFFileImpl)
                      computeValue(): java.lang.Object
                  }
                  interface DebugVC50Subsection {
                      getSubsectionType(): short
                      getSubsectionModuleIndex(): short
                      getSubsectionSize(): int
                  }
                  interface DebugVC50SubsectionDirectory {
                      getHeaderLength(): short
                      getEntryLength(): short
                      getNumEntries(): int
                      getSubsection(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugVC50Subsection
                  }
                  interface DebugVC50 {
                      getSubsectionDirectoryOffset(): int
                      getSubsectionDirectory(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionDirectory
                  }
                  interface DebugDirectoryEntry {
                      getCharacteristics(): int
                      getTimeDateStamp(): int
                      getMajorVersion(): short
                      getMinorVersion(): short
                      getType(): int
                      getSizeOfData(): int
                      getAddressOfRawData(): int
                      getPointerToRawData(): int
                      getDebugVC50(): sun.jvm.hotspot.debugger.win32.coff.DebugVC50
                      getRawDataByte(arg0: int): byte
                  }
                  interface DebugDirectory {
                      getNumEntries(): int
                      getEntry(arg0: int): sun.jvm.hotspot.debugger.win32.coff.DebugDirectoryEntry
                  }
                  interface ExportDirectoryTable {
                      getExportFlags(): int
                      getTimeDateStamp(): int
                      getMajorVersion(): short
                      getMinorVersion(): short
                      getNameRVA(): int
                      getDLLName(): java.lang.String
                      getOrdinalBase(): int
                      getNumberOfAddressTableEntries(): int
                      getNumberOfNamePointers(): int
                      getExportAddressTableRVA(): int
                      getNamePointerTableRVA(): int
                      getOrdinalTableRVA(): int
                      getExportName(arg0: int): java.lang.String
                      getExportOrdinal(arg0: int): short
                      isExportAddressForwarder(arg0: short): boolean
                      getExportAddressForwarder(arg0: short): java.lang.String
                      getExportAddress(arg0: short): int
                  }
                  interface DataDirectory {
                      getRVA(): int
                      getSize(): int
                  }
                  interface COFFLineNumber {
                      getType(): int
                      getLineNumber(): short
                  }
                  interface COFFRelocation {
                      getVirtualAddress(): int
                      getSymbolTableIndex(): int
                      getType(): short
                  }
                  interface OptionalHeaderDataDirectories {
                      getExportTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getExportDirectoryTable(): sun.jvm.hotspot.debugger.win32.coff.ExportDirectoryTable
                      getImportTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getResourceTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getExceptionTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getCertificateTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getBaseRelocationTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getDebug(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getDebugDirectory(): sun.jvm.hotspot.debugger.win32.coff.DebugDirectory
                      getArchitecture(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getGlobalPtr(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getTLSTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getLoadConfigTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getBoundImportTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getImportAddressTable(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getDelayImportDescriptor(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                      getCOMPlusRuntimeHeader(): sun.jvm.hotspot.debugger.win32.coff.DataDirectory
                  }
                  interface OptionalHeaderWindowsSpecificFields {
                      getImageBase(): long
                      getSectionAlignment(): int
                      getFileAlignment(): int
                      getMajorOperatingSystemVersion(): short
                      getMinorOperatingSystemVersion(): short
                      getMajorImageVersion(): short
                      getMinorImageVersion(): short
                      getMajorSubsystemVersion(): short
                      getMinorSubsystemVersion(): short
                      getSizeOfImage(): int
                      getSizeOfHeaders(): int
                      getCheckSum(): int
                      getSubsystem(): short
                      getDLLCharacteristics(): short
                      getSizeOfStackReserve(): long
                      getSizeOfStackCommit(): long
                      getSizeOfHeapReserve(): long
                      getSizeOfHeapCommit(): long
                      getLoaderFlags(): int
                      getNumberOfRvaAndSizes(): int
                  }
                  interface OptionalHeaderStandardFields {
                      getMajorLinkerVersion(): byte
                      getMinorLinkerVersion(): byte
                      getSizeOfCode(): int
                      getSizeOfInitializedData(): int
                      getSizeOfUninitializedData(): int
                      getAddressOfEntryPoint(): int
                      getBaseOfCode(): int
                      getBaseOfData(): int
                  }
                  interface COFFSymbol {
                      getOffset(): int
                      getName(): java.lang.String
                      getValue(): int
                      getSectionNumber(): short
                      getType(): short
                      getStorageClass(): byte
                      getNumberOfAuxSymbols(): byte
                      isFunctionDefinition(): boolean
                      getAuxFunctionDefinitionRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxFunctionDefinitionRecord
                      isBfOrEfSymbol(): boolean
                      getAuxBfEfRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxBfEfRecord
                      isWeakExternal(): boolean
                      getAuxWeakExternalRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxWeakExternalRecord
                      isFile(): boolean
                      getAuxFileRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxFileRecord
                      isSectionDefinition(): boolean
                      getAuxSectionDefinitionsRecord(): sun.jvm.hotspot.debugger.win32.coff.AuxSectionDefinitionsRecord
                  }
                  interface SectionHeader {
                      getName(): java.lang.String
                      getSize(): int
                      getVirtualAddress(): int
                      getSizeOfRawData(): int
                      getPointerToRawData(): int
                      getPointerToRelocations(): int
                      getPointerToLineNumbers(): int
                      getNumberOfRelocations(): short
                      getNumberOfLineNumbers(): short
                      getSectionFlags(): int
                      hasSectionFlag(arg0: int): boolean
                      getCOFFRelocation(arg0: int): sun.jvm.hotspot.debugger.win32.coff.COFFRelocation
                      getCOFFLineNumber(arg0: int): sun.jvm.hotspot.debugger.win32.coff.COFFLineNumber
                  }
                  interface OptionalHeader {
                      static MAGIC_PE32: short
                      static MAGIC_PE32_PLUS: short
                      static MAGIC_ROM_IMAGE: short
                      getMagicNumber(): short
                      getStandardFields(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderStandardFields
                      getWindowsSpecificFields(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderWindowsSpecificFields
                      getDataDirectories(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeaderDataDirectories
                  }
                  interface COFFHeader {
                      getMachineType(): short
                      getNumberOfSections(): short
                      getTimeDateStamp(): int
                      getPointerToSymbolTable(): int
                      getNumberOfSymbols(): int
                      getSizeOfOptionalHeader(): short
                      getOptionalHeader(): sun.jvm.hotspot.debugger.win32.coff.OptionalHeader
                      getCharacteristics(): short
                      hasCharacteristic(arg0: short): boolean
                      getSectionHeader(arg0: int): sun.jvm.hotspot.debugger.win32.coff.SectionHeader
                      getCOFFSymbol(arg0: int): sun.jvm.hotspot.debugger.win32.coff.COFFSymbol
                      getNumberOfStrings(): int
                      getString(arg0: int): java.lang.String
                  }
                  interface COFFFile {
                      getHeader(): sun.jvm.hotspot.debugger.win32.coff.COFFHeader
                      isImage(): boolean
                      close(): void
                  }
                  class COFFException extends java.lang.RuntimeException {
                      constructor()
                      constructor(arg0: java.lang.Throwable)
                      constructor(arg0: java.lang.String)
                      constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
                  }
                  interface AuxWeakExternalRecord extends sun.jvm.hotspot.debugger.win32.coff.AuxSymbolRecord {
                      static IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: int
                      static IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: int
                      static IMAGE_WEAK_EXTERN_SEARCH_ALIAS: int
                      getTagIndex(): int
                      getCharacteristics(): int
                  }
                  interface AuxSectionDefinitionsRecord extends sun.jvm.hotspot.debugger.win32.coff.AuxSymbolRecord {
                      getLength(): int
                      getNumberOfRelocations(): short
                      getNumberOfLineNumbers(): short
                      getCheckSum(): int
                      getNumber(): short
                      getSelection(): byte
                  }
                  interface AuxFunctionDefinitionRecord extends sun.jvm.hotspot.debugger.win32.coff.AuxSymbolRecord {
                      getTagIndex(): int
                      getTotalSize(): int
                      getPointerToLineNumber(): int
                      getPointerToNextFunction(): int
                  }
                  interface AuxFileRecord extends sun.jvm.hotspot.debugger.win32.coff.AuxSymbolRecord {
                      getName(): java.lang.String
                  }
                  interface AuxSymbolRecord {
                      static FUNCTION_DEFINITION: int
                      static BF_EF_RECORD: int
                      static WEAK_EXTERNAL: int
                      static FILE: int
                      static SECTION_DEFINITION: int
                      getType(): int
                  }
                  interface AuxBfEfRecord extends sun.jvm.hotspot.debugger.win32.coff.AuxSymbolRecord {
                      getLineNumber(): short
                      getPointerToNextFunction(): int
                  }
                  
               }
               
            }
            namespace remote {
               class RemoteDebuggerServer_Stub extends java.rmi.server.RemoteStub implements sun.jvm.hotspot.debugger.remote.RemoteDebugger , java.rmi.Remote {
                   static class$sun$jvm$hotspot$debugger$remote$RemoteDebugger: java.lang.Class
                   static class$java$lang$String: java.lang.Class
                   constructor(arg0: java.rmi.server.RemoteRef)
                   areThreadsEqual(arg0: long, arg1: boolean, arg2: long, arg3: boolean): boolean
                   static class$(arg0: java.lang.String): java.lang.Class
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getCPU(): java.lang.String
                   getConsolePrompt(): java.lang.String
                   getHeapOopSize(): long
                   getJBooleanSize(): long
                   getJByteSize(): long
                   getJCharSize(): long
                   getJDoubleSize(): long
                   getJFloatSize(): long
                   getJIntSize(): long
                   getJLongSize(): long
                   getJShortSize(): long
                   getKlassPtrSize(): long
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   getNarrowKlassBase(): long
                   getNarrowKlassShift(): int
                   getNarrowOopBase(): long
                   getNarrowOopShift(): int
                   getOS(): java.lang.String
                   getThreadHashCode(arg0: long, arg1: boolean): int
                   getThreadIntegerRegisterSet(arg0: long, arg1: boolean): long[]
                   hasConsole(): boolean
                   lookupInProcess(arg0: java.lang.String, arg1: java.lang.String): long
                   readBytesFromProcess(arg0: long, arg1: long): sun.jvm.hotspot.debugger.ReadResult
               }
               namespace x86 {
                  class RemoteX86ThreadFactory implements sun.jvm.hotspot.debugger.remote.RemoteThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class RemoteX86ThreadContext extends sun.jvm.hotspot.debugger.x86.X86ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class RemoteX86Thread extends sun.jvm.hotspot.debugger.remote.RemoteThread {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                  }
                  
               }
               namespace sparc {
                  class RemoteSPARCThreadFactory implements sun.jvm.hotspot.debugger.remote.RemoteThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class RemoteSPARCThreadContext extends sun.jvm.hotspot.debugger.sparc.SPARCThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class RemoteSPARCThread extends sun.jvm.hotspot.debugger.remote.RemoteThread {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                  }
                  
               }
               namespace amd64 {
                  class RemoteAMD64ThreadFactory implements sun.jvm.hotspot.debugger.remote.RemoteThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class RemoteAMD64ThreadContext extends sun.jvm.hotspot.debugger.amd64.AMD64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class RemoteAMD64Thread extends sun.jvm.hotspot.debugger.remote.RemoteThread {
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                  }
                  
               }
               abstract class RemoteThread implements sun.jvm.hotspot.debugger.ThreadProxy {
                   protected debugger: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient
                   protected addr: sun.jvm.hotspot.debugger.Address
                   protected id: long
                   constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: long)
                   canSetContext(): boolean
                   setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
               }
               class RemoteDebuggerServer extends java.rmi.server.UnicastRemoteObject implements sun.jvm.hotspot.debugger.remote.RemoteDebugger {
                   constructor()
                   constructor(arg0: sun.jvm.hotspot.debugger.Debugger)
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   lookupInProcess(arg0: java.lang.String, arg1: java.lang.String): long
                   readBytesFromProcess(arg0: long, arg1: long): sun.jvm.hotspot.debugger.ReadResult
                   hasConsole(): boolean
                   getConsolePrompt(): java.lang.String
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getJBooleanSize(): long
                   getJByteSize(): long
                   getJCharSize(): long
                   getJDoubleSize(): long
                   getJFloatSize(): long
                   getJIntSize(): long
                   getJLongSize(): long
                   getJShortSize(): long
                   getHeapOopSize(): long
                   getNarrowOopBase(): long
                   getNarrowOopShift(): int
                   getKlassPtrSize(): long
                   getNarrowKlassBase(): long
                   getNarrowKlassShift(): int
                   areThreadsEqual(arg0: long, arg1: boolean, arg2: long, arg3: boolean): boolean
                   getThreadHashCode(arg0: long, arg1: boolean): int
                   getThreadIntegerRegisterSet(arg0: long, arg1: boolean): long[]
               }
               class RemoteOopHandle extends sun.jvm.hotspot.debugger.remote.RemoteAddress implements sun.jvm.hotspot.debugger.OopHandle {
                   constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: long)
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
               }
               interface RemoteThreadFactory {
                   createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
               }
               interface RemoteDebugger extends java.rmi.Remote {
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   lookupInProcess(arg0: java.lang.String, arg1: java.lang.String): long
                   readBytesFromProcess(arg0: long, arg1: long): sun.jvm.hotspot.debugger.ReadResult
                   hasConsole(): boolean
                   getConsolePrompt(): java.lang.String
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getJBooleanSize(): long
                   getJByteSize(): long
                   getJCharSize(): long
                   getJDoubleSize(): long
                   getJFloatSize(): long
                   getJIntSize(): long
                   getJLongSize(): long
                   getJShortSize(): long
                   getHeapOopSize(): long
                   getNarrowOopBase(): long
                   getNarrowOopShift(): int
                   getKlassPtrSize(): long
                   getNarrowKlassBase(): long
                   getNarrowKlassShift(): int
                   areThreadsEqual(arg0: long, arg1: boolean, arg2: long, arg3: boolean): boolean
                   getThreadHashCode(arg0: long, arg1: boolean): int
                   getThreadIntegerRegisterSet(arg0: long, arg1: boolean): long[]
               }
               class RemoteDebuggerClient extends sun.jvm.hotspot.debugger.DebuggerBase implements sun.jvm.hotspot.debugger.JVMDebugger {
                   constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebugger)
                   getThreadIntegerRegisterSet(arg0: sun.jvm.hotspot.debugger.Address): long[]
                   getThreadIntegerRegisterSet(arg0: long): long[]
                   hasProcessList(): boolean
                   getProcessList(): java.util.List
                   attach(arg0: int): void
                   attach(arg0: java.lang.String, arg1: java.lang.String): void
                   detach(): boolean
                   parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   hasConsole(): boolean
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getConsolePrompt(): java.lang.String
                   getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                   lookup(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.debugger.Address
                   lookupOop(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.debugger.OopHandle
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readJLong(arg0: long): long
                   configureJavaPrimitiveTypeSizes(arg0: long, arg1: long, arg2: long, arg3: long, arg4: long, arg5: long, arg6: long, arg7: long): void
                   setMachineDescription(arg0: sun.jvm.hotspot.debugger.MachineDescription): void
                   getRemoteProcessAddressSize(): int
                   addressValueToString(arg0: long): java.lang.String
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.remote.RemoteAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.remote.RemoteAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.remote.RemoteAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.remote.RemoteOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.remote.RemoteOopHandle
                   areThreadsEqual(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): boolean
                   areThreadsEqual(arg0: long, arg1: long): boolean
                   areThreadsEqual(arg0: sun.jvm.hotspot.debugger.Address, arg1: long): boolean
                   areThreadsEqual(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): boolean
                   getThreadHashCode(arg0: sun.jvm.hotspot.debugger.Address): int
                   getThreadHashCode(arg0: long): int
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   readBytesFromProcess(arg0: long, arg1: long): sun.jvm.hotspot.debugger.ReadResult
                   writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
               }
               class RemoteAddress implements sun.jvm.hotspot.debugger.Address {
                   protected debugger: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient
                   protected addr: long
                   constructor(arg0: sun.jvm.hotspot.debugger.remote.RemoteDebuggerClient, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                   getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getJBooleanAt(arg0: long): boolean
                   getJByteAt(arg0: long): byte
                   getJCharAt(arg0: long): char
                   getJDoubleAt(arg0: long): double
                   getJFloatAt(arg0: long): float
                   getJIntAt(arg0: long): int
                   getJLongAt(arg0: long): long
                   getJShortAt(arg0: long): short
                   getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                   setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                   setJBooleanAt(arg0: long, arg1: boolean): void
                   setJByteAt(arg0: long, arg1: byte): void
                   setJCharAt(arg0: long, arg1: char): void
                   setJDoubleAt(arg0: long, arg1: double): void
                   setJFloatAt(arg0: long, arg1: float): void
                   setJIntAt(arg0: long, arg1: int): void
                   setJLongAt(arg0: long, arg1: long): void
                   setJShortAt(arg0: long, arg1: short): void
                   setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   minus(arg0: sun.jvm.hotspot.debugger.Address): long
                   lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   getValue(): long
                   static main(arg0: java.lang.String[]): void
               }
               
            }
            namespace proc {
               namespace x86 {
                  class ProcX86ThreadFactory implements sun.jvm.hotspot.debugger.proc.ProcThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class ProcX86ThreadContext extends sun.jvm.hotspot.debugger.x86.X86ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class ProcX86Thread implements sun.jvm.hotspot.debugger.ThreadProxy {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                      canSetContext(): boolean
                      setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                      toString(): java.lang.String
                      equals(arg0: java.lang.Object): boolean
                      hashCode(): int
                  }
                  
               }
               namespace sparc {
                  class ProcSPARCThreadFactory implements sun.jvm.hotspot.debugger.proc.ProcThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class ProcSPARCThreadContext extends sun.jvm.hotspot.debugger.sparc.SPARCThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class ProcSPARCThread implements sun.jvm.hotspot.debugger.ThreadProxy {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                      canSetContext(): boolean
                      setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                      toString(): java.lang.String
                      equals(arg0: java.lang.Object): boolean
                      hashCode(): int
                  }
                  
               }
               namespace amd64 {
                  class ProcAMD64ThreadFactory implements sun.jvm.hotspot.debugger.proc.ProcThreadFactory {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                      createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                      createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                  }
                  class ProcAMD64ThreadContext extends sun.jvm.hotspot.debugger.amd64.AMD64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class ProcAMD64Thread implements sun.jvm.hotspot.debugger.ThreadProxy {
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                      constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: long)
                      getContext(): sun.jvm.hotspot.debugger.ThreadContext
                      canSetContext(): boolean
                      setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                      toString(): java.lang.String
                      equals(arg0: java.lang.Object): boolean
                      hashCode(): int
                  }
                  
               }
               interface ProcThreadFactory {
                   createThreadWrapper(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   createThreadWrapper(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
               }
               class SharedObject extends sun.jvm.hotspot.debugger.posix.DSO {
                   constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: java.lang.String, arg2: long, arg3: sun.jvm.hotspot.debugger.Address)
                   protected newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   protected getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
               }
               class ProcDebuggerLocal extends sun.jvm.hotspot.debugger.DebuggerBase implements sun.jvm.hotspot.debugger.proc.ProcDebugger {
                   protected static cacheSize: int
                   constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription, arg1: boolean)
                   hasProcessList(): boolean
                   getProcessList(): java.util.List
                   void: synchronized
                   void: synchronized
                   boolean: synchronized
                   void: synchronized
                   void: synchronized
                   boolean: synchronized
                   parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   hasConsole(): boolean
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getConsolePrompt(): java.lang.String
                   getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                   sun.jvm.hotspot.debugger.Address: synchronized
                   sun.jvm.hotspot.debugger.OopHandle: synchronized
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   setMachineDescription(arg0: sun.jvm.hotspot.debugger.MachineDescription): void
                   int: synchronized
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                   readJLong(arg0: long): long
                   addressValueToString(arg0: long): java.lang.String
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.proc.ProcAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.proc.ProcAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.proc.ProcAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.proc.ProcOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.proc.ProcOopHandle
                   writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
                   sun.jvm.hotspot.debugger.ReadResult: synchronized
                   protected getPageSize(): int
                   long[]: synchronized
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   java.util.List: synchronized
                   java.util.List: synchronized
                   sun.jvm.hotspot.debugger.cdbg.CFrame: synchronized
                   sun.jvm.hotspot.debugger.cdbg.ClosestSymbol: synchronized
                   demangle(arg0: java.lang.String): java.lang.String
               }
               class ProcCFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                   pc(): sun.jvm.hotspot.debugger.Address
                   localVariableBase(): sun.jvm.hotspot.debugger.Address
                   sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                   setSender(arg0: sun.jvm.hotspot.debugger.proc.ProcCFrame): void
               }
               class ProcCDebugger implements sun.jvm.hotspot.debugger.cdbg.CDebugger {
                   constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger)
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   loadObjectContainingPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LoadObject
                   topFrameForThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   getNameOfFile(arg0: java.lang.String): java.lang.String
                   getProcessControl(): sun.jvm.hotspot.debugger.cdbg.ProcessControl
                   canDemangle(): boolean
                   demangle(arg0: java.lang.String): java.lang.String
               }
               class ProcOopHandle extends sun.jvm.hotspot.debugger.proc.ProcAddress implements sun.jvm.hotspot.debugger.OopHandle {
                   constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: long)
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
               }
               interface ProcDebugger extends sun.jvm.hotspot.debugger.JVMDebugger {
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   addressValueToString(arg0: long): java.lang.String
                   readJBoolean(arg0: long): boolean
                   readJByte(arg0: long): byte
                   readJChar(arg0: long): char
                   readJDouble(arg0: long): double
                   readJFloat(arg0: long): float
                   readJInt(arg0: long): int
                   readJLong(arg0: long): long
                   readJShort(arg0: long): short
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.proc.ProcAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.proc.ProcAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.proc.ProcAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.proc.ProcOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.proc.ProcOopHandle
                   getThreadIntegerRegisterSet(arg0: int): long[]
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   topFrameForThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   lookup(arg0: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   demangle(arg0: java.lang.String): java.lang.String
               }
               class ProcAddress implements sun.jvm.hotspot.debugger.Address {
                   protected debugger: sun.jvm.hotspot.debugger.proc.ProcDebugger
                   protected addr: long
                   constructor(arg0: sun.jvm.hotspot.debugger.proc.ProcDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                   getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getJBooleanAt(arg0: long): boolean
                   getJByteAt(arg0: long): byte
                   getJCharAt(arg0: long): char
                   getJDoubleAt(arg0: long): double
                   getJFloatAt(arg0: long): float
                   getJIntAt(arg0: long): int
                   getJLongAt(arg0: long): long
                   getJShortAt(arg0: long): short
                   getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                   setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                   setJBooleanAt(arg0: long, arg1: boolean): void
                   setJByteAt(arg0: long, arg1: byte): void
                   setJCharAt(arg0: long, arg1: char): void
                   setJDoubleAt(arg0: long, arg1: double): void
                   setJFloatAt(arg0: long, arg1: float): void
                   setJIntAt(arg0: long, arg1: int): void
                   setJLongAt(arg0: long, arg1: long): void
                   setJShortAt(arg0: long, arg1: short): void
                   setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   minus(arg0: sun.jvm.hotspot.debugger.Address): long
                   lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   getValue(): long
                   static main(arg0: java.lang.String[]): void
               }
               
            }
            namespace sparc {
               abstract class SPARCThreadContext implements sun.jvm.hotspot.debugger.ThreadContext {
                   static R_G0: int
                   static R_G1: int
                   static R_G2: int
                   static R_G3: int
                   static R_G4: int
                   static R_G5: int
                   static R_G6: int
                   static R_G7: int
                   static R_O0: int
                   static R_O1: int
                   static R_O2: int
                   static R_O3: int
                   static R_O4: int
                   static R_O5: int
                   static R_O6: int
                   static R_O7: int
                   static R_L0: int
                   static R_L1: int
                   static R_L2: int
                   static R_L3: int
                   static R_L4: int
                   static R_L5: int
                   static R_L6: int
                   static R_L7: int
                   static R_I0: int
                   static R_I1: int
                   static R_I2: int
                   static R_I3: int
                   static R_I4: int
                   static R_I5: int
                   static R_I6: int
                   static R_I7: int
                   static R_CCR: int
                   static R_PSR: int
                   static R_PC: int
                   static R_nPC: int
                   static R_SP: int
                   static R_FP: int
                   static R_Y: int
                   static R_ASI: int
                   static R_FPRS: int
                   static R_WIM: int
                   static R_TBR: int
                   static NPRGREG: int
                   constructor()
                   getNumRegisters(): int
                   getRegisterName(arg0: int): java.lang.String
                   setRegister(arg0: int, arg1: long): void
                   getRegister(arg0: int): long
                   getTopFrame(arg0: sun.jvm.hotspot.debugger.Debugger): sun.jvm.hotspot.debugger.cdbg.CFrame
                   setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                   getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
               }
               
            }
            namespace linux {
               namespace ia64 {
                  class LinuxIA64ThreadContext extends sun.jvm.hotspot.debugger.ia64.IA64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  
               }
               namespace sparc {
                  class LinuxSPARCThreadContext extends sun.jvm.hotspot.debugger.sparc.SPARCThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class LinuxSPARCCFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      static SPARC_STACK_BIAS: int
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address, arg3: int)
                      closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                  }
                  
               }
               namespace x86 {
                  class LinuxX86ThreadContext extends sun.jvm.hotspot.debugger.x86.X86ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class LinuxX86CFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                      closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                  }
                  
               }
               namespace amd64 {
                  class LinuxAMD64ThreadContext extends sun.jvm.hotspot.debugger.amd64.AMD64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class LinuxAMD64CFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                      closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                  }
                  
               }
               class SharedObject extends sun.jvm.hotspot.debugger.posix.DSO {
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: java.lang.String, arg2: long, arg3: sun.jvm.hotspot.debugger.Address)
                   protected newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   protected getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
               }
               class LinuxThreadContextFactory {
                   constructor()
                   static createThreadContext(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger): sun.jvm.hotspot.debugger.ThreadContext
               }
               class LinuxThread implements sun.jvm.hotspot.debugger.ThreadProxy {
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getContext(): sun.jvm.hotspot.debugger.ThreadContext
                   canSetContext(): boolean
                   setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
               }
               class LinuxDebuggerLocal extends sun.jvm.hotspot.debugger.DebuggerBase implements sun.jvm.hotspot.debugger.linux.LinuxDebugger {
                   static int: native
                   constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription, arg1: boolean)
                   hasProcessList(): boolean
                   getProcessList(): java.util.List
                   void: synchronized
                   void: synchronized
                   boolean: synchronized
                   parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   hasConsole(): boolean
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getConsolePrompt(): java.lang.String
                   sun.jvm.hotspot.debugger.Address: synchronized
                   sun.jvm.hotspot.debugger.OopHandle: synchronized
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                   addressValueToString(arg0: long): java.lang.String
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxOopHandle
                   long[]: synchronized
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readJLong(arg0: long): long
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   sun.jvm.hotspot.debugger.cdbg.ClosestSymbol: synchronized
                   getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                   sun.jvm.hotspot.debugger.ReadResult: synchronized
                   writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
                   static access$000(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread
                   static access$100(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: int): void
                   static access$202(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: boolean): boolean
                   static access$302(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: boolean): boolean
                   static access$400(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
                   static access$500(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
                   static access$600(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: java.lang.String, arg2: java.lang.String): long
                   static access$700(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: long, arg2: java.lang.String): long
                   static access$800(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: int): long[]
                   static access$900(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   static access$1000(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: long, arg2: long): byte[]
               }
               class LinuxDebuggerLocal$1ReadBytesFromProcessTask implements sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask {
                   address: long
                   numBytes: long
                   result: sun.jvm.hotspot.debugger.ReadResult
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxDebuggerLocal$1LookupByAddressTask implements sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask {
                   addr: long
                   result: sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxDebuggerLocal$1GetThreadIntegerRegisterSetTask implements sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask {
                   lwp_id: int
                   result: long[]
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxDebuggerLocal$1LookupByNameTask implements sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask {
                   objectName: java.lang.String
                   symbol: java.lang.String
                   result: sun.jvm.hotspot.debugger.Address
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxDebuggerLocal$1DetachTask implements sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask {
                   result: boolean
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxDebuggerLocal$1AttachTask implements sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask {
                   pid: int
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxDebuggerLocal$1 extends sun.jvm.hotspot.debugger.DebuggerUtilities {
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: long, arg2: boolean)
                   checkAlignment(arg0: long, arg1: long): void
               }
               class LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread extends java.lang.Thread {
                   debugger: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   task: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask
                   lastException: sun.jvm.hotspot.debugger.DebuggerException
                   this$0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal, arg1: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal)
                   run(): void
                   execute(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask): sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$WorkerThreadTask
               }
               interface LinuxDebuggerLocal$WorkerThreadTask {
                   doit(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal): void
               }
               class LinuxCDebugger implements sun.jvm.hotspot.debugger.cdbg.CDebugger {
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger)
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   loadObjectContainingPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LoadObject
                   topFrameForThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   getNameOfFile(arg0: java.lang.String): java.lang.String
                   getProcessControl(): sun.jvm.hotspot.debugger.cdbg.ProcessControl
                   canDemangle(): boolean
                   demangle(arg0: java.lang.String): java.lang.String
               }
               class LinuxOopHandle extends sun.jvm.hotspot.debugger.linux.LinuxAddress implements sun.jvm.hotspot.debugger.OopHandle {
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
               }
               interface LinuxDebugger extends sun.jvm.hotspot.debugger.JVMDebugger {
                   addressValueToString(arg0: long): java.lang.String
                   readJBoolean(arg0: long): boolean
                   readJByte(arg0: long): byte
                   readJChar(arg0: long): char
                   readJDouble(arg0: long): double
                   readJFloat(arg0: long): float
                   readJInt(arg0: long): int
                   readJLong(arg0: long): long
                   readJShort(arg0: long): short
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.linux.LinuxOopHandle
                   getThreadIntegerRegisterSet(arg0: int): long[]
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   lookup(arg0: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
               }
               class LinuxAddress implements sun.jvm.hotspot.debugger.Address {
                   protected debugger: sun.jvm.hotspot.debugger.linux.LinuxDebugger
                   protected addr: long
                   constructor(arg0: sun.jvm.hotspot.debugger.linux.LinuxDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                   getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getJBooleanAt(arg0: long): boolean
                   getJByteAt(arg0: long): byte
                   getJCharAt(arg0: long): char
                   getJDoubleAt(arg0: long): double
                   getJFloatAt(arg0: long): float
                   getJIntAt(arg0: long): int
                   getJLongAt(arg0: long): long
                   getJShortAt(arg0: long): short
                   getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                   setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                   setJBooleanAt(arg0: long, arg1: boolean): void
                   setJByteAt(arg0: long, arg1: byte): void
                   setJCharAt(arg0: long, arg1: char): void
                   setJDoubleAt(arg0: long, arg1: double): void
                   setJFloatAt(arg0: long, arg1: float): void
                   setJIntAt(arg0: long, arg1: int): void
                   setJLongAt(arg0: long, arg1: long): void
                   setJShortAt(arg0: long, arg1: short): void
                   setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   minus(arg0: sun.jvm.hotspot.debugger.Address): long
                   lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   getValue(): long
                   static main(arg0: java.lang.String[]): void
               }
               
            }
            namespace dummy {
               class DummyOopHandle extends sun.jvm.hotspot.debugger.dummy.DummyAddress implements sun.jvm.hotspot.debugger.OopHandle {
                   constructor(arg0: sun.jvm.hotspot.debugger.dummy.DummyDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
               }
               class DummyDebugger extends sun.jvm.hotspot.debugger.DebuggerBase {
                   constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription)
                   hasProcessList(): boolean
                   getProcessList(): java.util.List
                   attach(arg0: int): void
                   attach(arg0: java.lang.String, arg1: java.lang.String): void
                   detach(): boolean
                   parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   hasConsole(): boolean
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getConsolePrompt(): java.lang.String
                   getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                   lookup(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.debugger.Address
                   lookupOop(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.debugger.OopHandle
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                   readBytesFromProcess(arg0: long, arg1: long): sun.jvm.hotspot.debugger.ReadResult
                   writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
                   addressToString(arg0: sun.jvm.hotspot.debugger.dummy.DummyAddress): java.lang.String
               }
               class DummyAddress implements sun.jvm.hotspot.debugger.Address {
                   protected debugger: sun.jvm.hotspot.debugger.dummy.DummyDebugger
                   protected addr: long
                   constructor(arg0: sun.jvm.hotspot.debugger.dummy.DummyDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                   getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getJBooleanAt(arg0: long): boolean
                   getJByteAt(arg0: long): byte
                   getJCharAt(arg0: long): char
                   getJDoubleAt(arg0: long): double
                   getJFloatAt(arg0: long): float
                   getJIntAt(arg0: long): int
                   getJLongAt(arg0: long): long
                   getJShortAt(arg0: long): short
                   getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                   setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                   setJBooleanAt(arg0: long, arg1: boolean): void
                   setJByteAt(arg0: long, arg1: byte): void
                   setJCharAt(arg0: long, arg1: char): void
                   setJDoubleAt(arg0: long, arg1: double): void
                   setJFloatAt(arg0: long, arg1: float): void
                   setJIntAt(arg0: long, arg1: int): void
                   setJLongAt(arg0: long, arg1: long): void
                   setJShortAt(arg0: long, arg1: short): void
                   setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   minus(arg0: sun.jvm.hotspot.debugger.Address): long
                   lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   getValue(): long
                   static main(arg0: java.lang.String[]): void
               }
               
            }
            namespace x86 {
               abstract class X86ThreadContext implements sun.jvm.hotspot.debugger.ThreadContext {
                   static GS: int
                   static FS: int
                   static ES: int
                   static DS: int
                   static EDI: int
                   static ESI: int
                   static EBP: int
                   static ESP: int
                   static EBX: int
                   static EDX: int
                   static ECX: int
                   static EAX: int
                   static TRAPNO: int
                   static ERR: int
                   static EIP: int
                   static CS: int
                   static EFL: int
                   static UESP: int
                   static SS: int
                   static DR0: int
                   static DR1: int
                   static DR2: int
                   static DR3: int
                   static DR6: int
                   static DR7: int
                   static PC: int
                   static FP: int
                   static SP: int
                   static PS: int
                   static R0: int
                   static R1: int
                   static NPRGREG: int
                   constructor()
                   getNumRegisters(): int
                   getRegisterName(arg0: int): java.lang.String
                   setRegister(arg0: int, arg1: long): void
                   getRegister(arg0: int): long
                   getTopFrame(arg0: sun.jvm.hotspot.debugger.Debugger): sun.jvm.hotspot.debugger.cdbg.CFrame
                   setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                   getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
               }
               
            }
            namespace posix {
               class AddressDataSource implements sun.jvm.hotspot.debugger.DataSource {
                   constructor(arg0: sun.jvm.hotspot.debugger.Address)
                   readByte(): byte
                   readShort(): short
                   readInt(): int
                   readLong(): long
                   read(arg0: byte[]): int
                   seek(arg0: long): void
                   getFilePointer(): long
                   close(): void
               }
               namespace elf {
                  interface ELFProgramHeader {
                      static TYPE_NULL: int
                      static TYPE_LOAD: int
                      static TYPE_DYNAMIC: int
                      static TYPE_INTERP: int
                      static TYPE_NOTE: int
                      static TYPE_SHLIB: int
                      static TYPE_PHDR: int
                      static TYPE_LOPROC: int
                      static TYPE_HIPROC: int
                      getType(): int
                  }
                  class ELFFileParser {
                      constructor()
                      static getParser(): sun.jvm.hotspot.debugger.posix.elf.ELFFileParser
                      parse(arg0: java.lang.String): sun.jvm.hotspot.debugger.posix.elf.ELFFile
                      parse(arg0: sun.jvm.hotspot.debugger.DataSource): sun.jvm.hotspot.debugger.posix.elf.ELFFile
                      static main(arg0: java.lang.String[]): void
                  }
                  class ELFFileParser$ELFFileImpl implements sun.jvm.hotspot.debugger.posix.elf.ELFFile {
                      this$0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser, arg1: sun.jvm.hotspot.debugger.DataSource)
                      getHeader(): sun.jvm.hotspot.debugger.posix.elf.ELFHeader
                      getMagicNumber(): byte[]
                      getObjectSize(): byte
                      getEncoding(): byte
                      getVersion(): byte
                      close(): void
                      seek(arg0: long): void
                      getFilePointer(): long
                      readByte(): byte
                      readBytes(arg0: byte[]): int
                      readShort(): short
                      readInt(): int
                      readLong(): long
                      byteSwap(arg0: short): short
                      byteSwap(arg0: int): int
                      byteSwap(arg0: long): long
                      readUnsignedByte(): short
                      readUnsignedShort(): int
                      readUnsignedInt(): long
                      unsignedByte(arg0: byte): short
                      unsignedByte(arg0: short): int
                      unsignedByte(arg0: int): long
                      unsignedByteSwap(arg0: short): int
                      unsignedByteSwap(arg0: int): long
                  }
                  class ELFFileParser$ELFFileImpl$ELFHashTableImpl implements sun.jvm.hotspot.debugger.posix.elf.ELFHashTable {
                      this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg1: long, arg2: int)
                      getSymbol(arg0: java.lang.String): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                  }
                  class ELFFileParser$ELFFileImpl$ELFStringTableImpl implements sun.jvm.hotspot.debugger.posix.elf.ELFStringTable {
                      this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg1: long, arg2: int)
                      get(arg0: int): java.lang.String
                      getNumStrings(): int
                  }
                  class ELFFileParser$ELFFileImpl$ELFSymbolImpl implements sun.jvm.hotspot.debugger.posix.elf.ELFSymbol {
                      this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg1: long, arg2: int)
                      getBinding(): int
                      getType(): int
                      getOffset(): long
                      getName(): java.lang.String
                      getValue(): long
                      getSize(): int
                  }
                  class ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl implements sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader {
                      this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg1: long)
                      getType(): int
                      getNumberOfSymbols(): int
                      getELFSymbol(arg0: int): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                      getStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getHashTable(): sun.jvm.hotspot.debugger.posix.elf.ELFHashTable
                      getName(): java.lang.String
                      getLink(): int
                      getOffset(): int
                      static access$000(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl): int
                  }
                  class ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl$3 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      val$hashTableOffset: int
                      val$hashTableSize: int
                      this$2: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl, arg1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg2: int, arg3: int)
                      computeValue(): java.lang.Object
                  }
                  class ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl$2 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      val$strTableOffset: int
                      val$strTableSize: int
                      this$2: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl, arg1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg2: int, arg3: int)
                      computeValue(): java.lang.Object
                  }
                  class ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      val$symbolOffset: int
                      this$2: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFSectionHeaderImpl, arg1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg2: int)
                      computeValue(): java.lang.Object
                  }
                  class ELFFileParser$ELFFileImpl$ELFHeaderImpl implements sun.jvm.hotspot.debugger.posix.elf.ELFHeader {
                      this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl)
                      getFileType(): short
                      getArch(): short
                      getSectionHeaderSize(): short
                      getNumberOfSectionHeaders(): short
                      getSectionHeader(arg0: int): sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader
                      getSectionHeaderStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getDynamicStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getHashTable(): sun.jvm.hotspot.debugger.posix.elf.ELFHashTable
                      getSymbolTableSection(): sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader
                      getDynamicSymbolTableSection(): sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader
                      getELFSymbol(arg0: java.lang.String): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                      getELFSymbol(arg0: long): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                  }
                  class ELFFileParser$ELFFileImpl$ELFHeaderImpl$1 extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                      val$this$1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl
                      val$sectionHeaderOffset: long
                      this$2: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFHeaderImpl
                      constructor(arg0: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl$ELFHeaderImpl, arg1: sun.jvm.hotspot.debugger.posix.elf.ELFFileParser$ELFFileImpl, arg2: long)
                      computeValue(): java.lang.Object
                  }
                  interface ELFSymbol {
                      static BINDING_LOCAL: int
                      static BINDING_GLOBAL: int
                      static BINDING_WEAK: int
                      static BINDING_LOPROC: int
                      static BINDING_HIPROC: int
                      static TYPE_NOOBJECT: byte
                      static TYPE_OBJECT: byte
                      static TYPE_FUNCTION: byte
                      static TYPE_SECTION: byte
                      static TYPE_FILE: byte
                      static TYPE_LOPROC: byte
                      static TYPE_HIPROC: byte
                      getOffset(): long
                      getName(): java.lang.String
                      getBinding(): int
                      getType(): int
                      getValue(): long
                      getSize(): int
                  }
                  interface ELFHashTable {
                      getSymbol(arg0: java.lang.String): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                  }
                  interface ELFStringTable {
                      get(arg0: int): java.lang.String
                      getNumStrings(): int
                  }
                  interface ELFSectionHeader {
                      static NDX_UNDEFINED: int
                      static NDX_LORESERVE: int
                      static NDX_LOPROC: int
                      static NDX_HIPROC: int
                      static NDX_ABS: int
                      static NDX_COMMON: int
                      static NDX_HIRESERVE: int
                      static TYPE_NULL: int
                      static TYPE_PROGBITS: int
                      static TYPE_SYMTBL: int
                      static TYPE_STRTBL: int
                      static TYPE_RELO_EXPLICIT: int
                      static TYPE_HASH: int
                      static TYPE_DYNAMIC: int
                      static TYPE_NOTE: int
                      static TYPE_NOBITS: int
                      static TYPE_RELO: int
                      static TYPE_SHLIB: int
                      static TYPE_DYNSYM: int
                      static TYPE_LOPROC: int
                      static TYPE_HIPROC: int
                      static TYPE_LOUSER: int
                      static TYPE_HIUSER: int
                      static FLAG_WRITE: int
                      static FLAG_ALLOC: int
                      static FLAG_EXEC_INSTR: int
                      static FLAG_MASK: int
                      static STRING_TABLE_NAME: java.lang.String
                      static DYNAMIC_STRING_TABLE_NAME: java.lang.String
                      getType(): int
                      getNumberOfSymbols(): int
                      getELFSymbol(arg0: int): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                      getStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getHashTable(): sun.jvm.hotspot.debugger.posix.elf.ELFHashTable
                      getLink(): int
                      getName(): java.lang.String
                      getOffset(): int
                  }
                  interface ELFHeader {
                      static FT_NONE: int
                      static FT_REL: int
                      static FT_EXEC: int
                      static FT_DYN: int
                      static FT_CORE: int
                      static FT_LOCPROC: int
                      static FT_HICPROC: int
                      static ARCH_NONE: int
                      static ARCH_ATT: int
                      static ARCH_SPARC: int
                      static ARCH_i386: int
                      static ARCH_68k: int
                      static ARCH_88k: int
                      static ARCH_i860: int
                      static ARCH_MIPS: int
                      getFileType(): short
                      getArch(): short
                      getSectionHeaderSize(): short
                      getNumberOfSectionHeaders(): short
                      getSectionHeader(arg0: int): sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader
                      getSectionHeaderStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getDynamicStringTable(): sun.jvm.hotspot.debugger.posix.elf.ELFStringTable
                      getHashTable(): sun.jvm.hotspot.debugger.posix.elf.ELFHashTable
                      getSymbolTableSection(): sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader
                      getDynamicSymbolTableSection(): sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader
                      getELFSymbol(arg0: java.lang.String): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                      getELFSymbol(arg0: long): sun.jvm.hotspot.debugger.posix.elf.ELFSymbol
                  }
                  interface ELFFile {
                      static ELF_MAGIC_NUMBER: byte[]
                      static CLASS_INVALID: byte
                      static CLASS_32: byte
                      static CLASS_64: byte
                      static DATA_INVALID: byte
                      static DATA_LSB: byte
                      static DATA_MSB: byte
                      static VERSION_INVALID: byte
                      static VERSION_CURRENT: byte
                      static NDX_MAGIC_0: byte
                      static NDX_MAGIC_1: byte
                      static NDX_MAGIC_2: byte
                      static NDX_MAGIC_3: byte
                      static NDX_OBJECT_SIZE: byte
                      static NDX_ENCODING: byte
                      static NDX_VERSION: byte
                      getHeader(): sun.jvm.hotspot.debugger.posix.elf.ELFHeader
                      close(): void
                      getMagicNumber(): byte[]
                      getObjectSize(): byte
                      getEncoding(): byte
                      getVersion(): byte
                  }
                  class ELFException extends java.lang.RuntimeException {
                      constructor()
                      constructor(arg0: java.lang.String)
                      constructor(arg0: java.lang.Throwable)
                      constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
                  }
                  
               }
               abstract class DSO implements sun.jvm.hotspot.debugger.cdbg.LoadObject {
                   constructor(arg0: java.lang.String, arg1: long, arg2: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: long, arg1: sun.jvm.hotspot.debugger.Address)
                   getName(): java.lang.String
                   getBase(): sun.jvm.hotspot.debugger.Address
                   setBase(arg0: sun.jvm.hotspot.debugger.Address): void
                   getSize(): long
                   getDebugInfoDataBase(): sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase
                   debugInfoForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   closestSymbolToPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   lineNumberForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LineNumberInfo
                   isDSO(): boolean
                   lookupSymbol(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   protected getFile(): sun.jvm.hotspot.debugger.posix.elf.ELFFile
                   protected newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   protected getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   protected createClosestSymbol(arg0: java.lang.String, arg1: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   static access$000(arg0: sun.jvm.hotspot.debugger.posix.DSO): java.lang.String
                   static access$100(arg0: sun.jvm.hotspot.debugger.posix.DSO): sun.jvm.hotspot.debugger.Address
               }
               class DSO$ELFFileByAddress extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                   this$0: sun.jvm.hotspot.debugger.posix.DSO
                   constructor(arg0: sun.jvm.hotspot.debugger.posix.DSO)
                   protected computeValue(): java.lang.Object
               }
               class DSO$ELFFileByName extends sun.jvm.hotspot.utilities.memo.MemoizedObject {
                   this$0: sun.jvm.hotspot.debugger.posix.DSO
                   constructor(arg0: sun.jvm.hotspot.debugger.posix.DSO)
                   protected computeValue(): java.lang.Object
               }
               class DSO$IsDSO extends sun.jvm.hotspot.utilities.memo.MemoizedBoolean {
                   this$0: sun.jvm.hotspot.debugger.posix.DSO
                   constructor(arg0: sun.jvm.hotspot.debugger.posix.DSO)
                   protected computeValue(): boolean
               }
               
            }
            namespace bsd {
               namespace x86 {
                  class BsdX86ThreadContext extends sun.jvm.hotspot.debugger.x86.X86ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class BsdX86CFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                      closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                  }
                  
               }
               namespace amd64 {
                  class BsdAMD64ThreadContext extends sun.jvm.hotspot.debugger.amd64.AMD64ThreadContext {
                      constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger)
                      setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                      getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                  }
                  class BsdAMD64CFrame extends sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame {
                      constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                      closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                      pc(): sun.jvm.hotspot.debugger.Address
                      localVariableBase(): sun.jvm.hotspot.debugger.Address
                      sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                  }
                  
               }
               class SharedObject extends sun.jvm.hotspot.debugger.posix.DSO {
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: java.lang.String, arg2: long, arg3: sun.jvm.hotspot.debugger.Address)
                   protected newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   protected getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
               }
               class BsdThreadContextFactory {
                   constructor()
                   static createThreadContext(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger): sun.jvm.hotspot.debugger.ThreadContext
               }
               class BsdThread implements sun.jvm.hotspot.debugger.ThreadProxy {
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: sun.jvm.hotspot.debugger.Address, arg2: sun.jvm.hotspot.debugger.Address)
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getContext(): sun.jvm.hotspot.debugger.ThreadContext
                   canSetContext(): boolean
                   setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
                   getUniqueThreadId(): long
               }
               class BsdDebuggerLocal extends sun.jvm.hotspot.debugger.DebuggerBase implements sun.jvm.hotspot.debugger.bsd.BsdDebugger {
                   static int: native
                   constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription, arg1: boolean)
                   hasProcessList(): boolean
                   getProcessList(): java.util.List
                   void: synchronized
                   void: synchronized
                   boolean: synchronized
                   parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                   getOS(): java.lang.String
                   getCPU(): java.lang.String
                   hasConsole(): boolean
                   consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                   getConsolePrompt(): java.lang.String
                   sun.jvm.hotspot.debugger.Address: synchronized
                   sun.jvm.hotspot.debugger.OopHandle: synchronized
                   getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                   getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
                   addressValueToString(arg0: long): java.lang.String
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdOopHandle
                   long[]: synchronized
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readJLong(arg0: long): long
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   sun.jvm.hotspot.debugger.cdbg.ClosestSymbol: synchronized
                   getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                   sun.jvm.hotspot.debugger.ReadResult: synchronized
                   writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
                   getJavaThreadsInfo(): long[]
                   static access$000(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread
                   static access$100(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: int): void
                   static access$202(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: boolean): boolean
                   static access$302(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: boolean): boolean
                   static access$400(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
                   static access$500(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
                   static access$600(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: java.lang.String, arg2: java.lang.String): long
                   static access$700(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: long, arg2: java.lang.String): long
                   static access$800(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: long): long[]
                   static access$900(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   static access$1000(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: long, arg2: long): byte[]
               }
               class BsdDebuggerLocal$1ReadBytesFromProcessTask implements sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask {
                   address: long
                   numBytes: long
                   result: sun.jvm.hotspot.debugger.ReadResult
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdDebuggerLocal$1LookupByAddressTask implements sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask {
                   addr: long
                   result: sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdDebuggerLocal$1GetThreadIntegerRegisterSetTask implements sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask {
                   unique_thread_id: long
                   result: long[]
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdDebuggerLocal$1LookupByNameTask implements sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask {
                   objectName: java.lang.String
                   symbol: java.lang.String
                   result: sun.jvm.hotspot.debugger.Address
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdDebuggerLocal$1DetachTask implements sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask {
                   result: boolean
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdDebuggerLocal$1AttachTask implements sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask {
                   pid: int
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdDebuggerLocal$1 extends sun.jvm.hotspot.debugger.DebuggerUtilities {
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: long, arg2: boolean)
                   checkAlignment(arg0: long, arg1: long): void
               }
               class BsdDebuggerLocal$BsdDebuggerLocalWorkerThread extends java.lang.Thread {
                   debugger: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   task: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask
                   lastException: sun.jvm.hotspot.debugger.DebuggerException
                   this$0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal, arg1: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal)
                   run(): void
                   execute(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask): sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$WorkerThreadTask
               }
               interface BsdDebuggerLocal$WorkerThreadTask {
                   doit(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal): void
               }
               class BsdCDebugger implements sun.jvm.hotspot.debugger.cdbg.CDebugger {
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger)
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   loadObjectContainingPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LoadObject
                   topFrameForThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   getNameOfFile(arg0: java.lang.String): java.lang.String
                   getProcessControl(): sun.jvm.hotspot.debugger.cdbg.ProcessControl
                   canDemangle(): boolean
                   demangle(arg0: java.lang.String): java.lang.String
               }
               class BsdOopHandle extends sun.jvm.hotspot.debugger.bsd.BsdAddress implements sun.jvm.hotspot.debugger.OopHandle {
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
               }
               interface BsdDebugger extends sun.jvm.hotspot.debugger.JVMDebugger {
                   addressValueToString(arg0: long): java.lang.String
                   readJBoolean(arg0: long): boolean
                   readJByte(arg0: long): byte
                   readJChar(arg0: long): char
                   readJDouble(arg0: long): double
                   readJFloat(arg0: long): float
                   readJInt(arg0: long): int
                   readJLong(arg0: long): long
                   readJShort(arg0: long): short
                   readCInteger(arg0: long, arg1: long, arg2: boolean): long
                   readAddress(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdAddress
                   readCompOopAddress(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdAddress
                   readCompKlassAddress(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdAddress
                   readOopHandle(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdOopHandle
                   readCompOopHandle(arg0: long): sun.jvm.hotspot.debugger.bsd.BsdOopHandle
                   getThreadIntegerRegisterSet(arg0: long): long[]
                   getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   newAddress(arg0: long): sun.jvm.hotspot.debugger.Address
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   lookup(arg0: long): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
               }
               class BsdAddress implements sun.jvm.hotspot.debugger.Address {
                   protected debugger: sun.jvm.hotspot.debugger.bsd.BsdDebugger
                   protected addr: long
                   constructor(arg0: sun.jvm.hotspot.debugger.bsd.BsdDebugger, arg1: long)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                   getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                   getJBooleanAt(arg0: long): boolean
                   getJByteAt(arg0: long): byte
                   getJCharAt(arg0: long): char
                   getJDoubleAt(arg0: long): double
                   getJFloatAt(arg0: long): float
                   getJIntAt(arg0: long): int
                   getJLongAt(arg0: long): long
                   getJShortAt(arg0: long): short
                   getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                   setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                   setJBooleanAt(arg0: long, arg1: boolean): void
                   setJByteAt(arg0: long, arg1: byte): void
                   setJCharAt(arg0: long, arg1: char): void
                   setJDoubleAt(arg0: long, arg1: double): void
                   setJFloatAt(arg0: long, arg1: float): void
                   setJIntAt(arg0: long, arg1: int): void
                   setJLongAt(arg0: long, arg1: long): void
                   setJShortAt(arg0: long, arg1: short): void
                   setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                   addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                   addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                   minus(arg0: sun.jvm.hotspot.debugger.Address): long
                   lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                   getValue(): long
                   static main(arg0: java.lang.String[]): void
               }
               
            }
            namespace amd64 {
               abstract class AMD64ThreadContext implements sun.jvm.hotspot.debugger.ThreadContext {
                   static R15: int
                   static R14: int
                   static R13: int
                   static R12: int
                   static R11: int
                   static R10: int
                   static R9: int
                   static R8: int
                   static RDI: int
                   static RSI: int
                   static RBP: int
                   static RBX: int
                   static RDX: int
                   static RCX: int
                   static RAX: int
                   static TRAPNO: int
                   static ERR: int
                   static RIP: int
                   static CS: int
                   static RFL: int
                   static RSP: int
                   static SS: int
                   static FS: int
                   static GS: int
                   static ES: int
                   static DS: int
                   static FSBASE: int
                   static GSBASE: int
                   static NPRGREG: int
                   constructor()
                   getNumRegisters(): int
                   getRegisterName(arg0: int): java.lang.String
                   setRegister(arg0: int, arg1: long): void
                   getRegister(arg0: int): long
                   getTopFrame(arg0: sun.jvm.hotspot.debugger.Debugger): sun.jvm.hotspot.debugger.cdbg.CFrame
                   setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                   getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
               }
               
            }
            class RandomAccessFileDataSource implements sun.jvm.hotspot.debugger.DataSource {
                constructor(arg0: java.io.RandomAccessFile)
                readByte(): byte
                readShort(): short
                readInt(): int
                readLong(): long
                read(arg0: byte[]): int
                seek(arg0: long): void
                getFilePointer(): long
                close(): void
            }
            class ProcessInfo {
                constructor(arg0: java.lang.String, arg1: int)
                getName(): java.lang.String
                getPid(): int
            }
            class MappedByteBufferDataSource implements sun.jvm.hotspot.debugger.DataSource {
                constructor(arg0: java.nio.MappedByteBuffer)
                readByte(): byte
                readShort(): short
                readInt(): int
                readLong(): long
                read(arg0: byte[]): int
                seek(arg0: long): void
                getFilePointer(): long
                close(): void
            }
            class MachineDescriptionSPARC64Bit extends sun.jvm.hotspot.debugger.MachineDescriptionTwosComplement implements sun.jvm.hotspot.debugger.MachineDescription {
                constructor()
                getAddressSize(): long
                isBigEndian(): boolean
                isLP64(): boolean
            }
            class MachineDescriptionSPARC32Bit extends sun.jvm.hotspot.debugger.MachineDescriptionTwosComplement implements sun.jvm.hotspot.debugger.MachineDescription {
                constructor()
                getAddressSize(): long
                isBigEndian(): boolean
            }
            class MachineDescriptionIntelX86 extends sun.jvm.hotspot.debugger.MachineDescriptionTwosComplement implements sun.jvm.hotspot.debugger.MachineDescription {
                constructor()
                getAddressSize(): long
                isBigEndian(): boolean
            }
            class MachineDescriptionIA64 extends sun.jvm.hotspot.debugger.MachineDescriptionTwosComplement implements sun.jvm.hotspot.debugger.MachineDescription {
                constructor()
                getAddressSize(): long
                isLP64(): boolean
                isBigEndian(): boolean
            }
            abstract class MachineDescriptionTwosComplement {
                constructor()
                cIntegerTypeMaxValue(arg0: long, arg1: boolean): long
                cIntegerTypeMinValue(arg0: long, arg1: boolean): long
                isLP64(): boolean
            }
            class MachineDescriptionAMD64 extends sun.jvm.hotspot.debugger.MachineDescriptionTwosComplement implements sun.jvm.hotspot.debugger.MachineDescription {
                constructor()
                getAddressSize(): long
                isLP64(): boolean
                isBigEndian(): boolean
            }
            class InputLexer {
                constructor(arg0: java.io.BufferedInputStream)
                close(): void
                parseBoolean(): boolean
                parseInt(): int
                parseLong(): long
                parseAddress(): long
                skipByte(): void
                readByte(): byte
                readBytes(arg0: byte[], arg1: int, arg2: int): void
                readChar(): char
                readUnsignedInt(): long
                readByteString(arg0: int): java.lang.String
                readCharString(arg0: int): java.lang.String
            }
            class Page {
                constructor(arg0: long, arg1: byte[])
                constructor(arg0: long, arg1: long)
                getBaseAddress(): long
                getSize(): long
                isMapped(): boolean
                getPrev(): sun.jvm.hotspot.debugger.Page
                setPrev(arg0: sun.jvm.hotspot.debugger.Page): void
                getNext(): sun.jvm.hotspot.debugger.Page
                setNext(arg0: sun.jvm.hotspot.debugger.Page): void
                getData(arg0: long, arg1: long, arg2: int[], arg3: long): void
                getDataAsBytes(arg0: long, arg1: long, arg2: byte[], arg3: long): void
                getBoolean(arg0: long): boolean
                getByte(arg0: long): byte
                getShort(arg0: long, arg1: boolean): short
                getChar(arg0: long, arg1: boolean): char
                getInt(arg0: long, arg1: boolean): int
                getLong(arg0: long, arg1: boolean): long
                getFloat(arg0: long, arg1: boolean): float
                getDouble(arg0: long, arg1: boolean): double
            }
            class LongHashMap {
                sun.jvm.hotspot.debugger.LongHashMap$Entry[]: transient
                int: transient
                threshold: int
                loadFactor: float
                int: transient
                constructor(arg0: int, arg1: float)
                constructor(arg0: int)
                constructor()
                size(): int
                isEmpty(): boolean
                get(arg0: long): java.lang.Object
                containsKey(arg0: long): boolean
                getEntry(arg0: long): sun.jvm.hotspot.debugger.LongHashMap$Entry
                containsValue(arg0: java.lang.Object): boolean
                put(arg0: long, arg1: java.lang.Object): java.lang.Object
                remove(arg0: long): java.lang.Object
                removeEntryForKey(arg0: long): sun.jvm.hotspot.debugger.LongHashMap$Entry
                removeEntry(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry): void
                clear(): void
                rehash(): void
                static eq(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                newEntry(arg0: int, arg1: long, arg2: java.lang.Object, arg3: sun.jvm.hotspot.debugger.LongHashMap$Entry): sun.jvm.hotspot.debugger.LongHashMap$Entry
                capacity(): int
                loadFactor(): float
            }
            class LongHashMap$Entry {
                constructor(arg0: int, arg1: long, arg2: java.lang.Object, arg3: sun.jvm.hotspot.debugger.LongHashMap$Entry)
                getKey(): long
                getValue(): java.lang.Object
                setValue(arg0: java.lang.Object): java.lang.Object
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                static access$000(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry): java.lang.Object
                static access$100(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry): sun.jvm.hotspot.debugger.LongHashMap$Entry
                static access$200(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry): int
                static access$300(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry): long
                static access$002(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry, arg1: java.lang.Object): java.lang.Object
                static access$102(arg0: sun.jvm.hotspot.debugger.LongHashMap$Entry, arg1: sun.jvm.hotspot.debugger.LongHashMap$Entry): sun.jvm.hotspot.debugger.LongHashMap$Entry
            }
            interface PageFetcher {
                fetchPage(arg0: long, arg1: long): sun.jvm.hotspot.debugger.Page
            }
            class PageCache {
                constructor(arg0: long, arg1: long, arg2: sun.jvm.hotspot.debugger.PageFetcher)
                byte[]: synchronized
                boolean: synchronized
                byte: synchronized
                short: synchronized
                char: synchronized
                int: synchronized
                long: synchronized
                float: synchronized
                double: synchronized
                void: synchronized
                void: synchronized
                void: synchronized
                void: synchronized
            }
            class DebuggerUtilities {
                protected addressSize: long
                protected isBigEndian: boolean
                constructor(arg0: long, arg1: boolean)
                addressValueToString(arg0: long): java.lang.String
                checkAlignment(arg0: long, arg1: long): void
                scanAddress(arg0: java.lang.String): long
                charToNibble(arg0: char): int
                dataToJBoolean(arg0: byte[], arg1: long): boolean
                dataToJByte(arg0: byte[], arg1: long): byte
                dataToJChar(arg0: byte[], arg1: long): char
                dataToJDouble(arg0: byte[], arg1: long): double
                dataToJFloat(arg0: byte[], arg1: long): float
                dataToJInt(arg0: byte[], arg1: long): int
                dataToJLong(arg0: byte[], arg1: long): long
                dataToJShort(arg0: byte[], arg1: long): short
                dataToCInteger(arg0: byte[], arg1: boolean): long
                dataToAddressValue(arg0: byte[]): long
                jbooleanToData(arg0: boolean): byte[]
                jbyteToData(arg0: byte): byte[]
                jcharToData(arg0: char): byte[]
                jdoubleToData(arg0: double): byte[]
                jfloatToData(arg0: float): byte[]
                jintToData(arg0: int): byte[]
                jlongToData(arg0: long): byte[]
                jshortToData(arg0: short): byte[]
                cIntegerToData(arg0: long, arg1: long): byte[]
            }
            abstract class DebuggerBase implements sun.jvm.hotspot.debugger.Debugger {
                protected machDesc: sun.jvm.hotspot.debugger.MachineDescription
                protected utils: sun.jvm.hotspot.debugger.DebuggerUtilities
                protected jbooleanSize: long
                protected jbyteSize: long
                protected jcharSize: long
                protected jdoubleSize: long
                protected jfloatSize: long
                protected jintSize: long
                protected jlongSize: long
                protected jshortSize: long
                protected javaPrimitiveTypesConfigured: boolean
                protected oopSize: long
                protected heapOopSize: long
                protected narrowOopBase: long
                protected narrowOopShift: int
                protected klassPtrSize: long
                protected narrowKlassBase: long
                protected narrowKlassShift: int
                protected (: sun.jvm.hotspot.debugger.DebuggerBase
                configureJavaPrimitiveTypeSizes(arg0: long, arg1: long, arg2: long, arg3: long, arg4: long, arg5: long, arg6: long, arg7: long): void
                putHeapConst(arg0: long, arg1: long, arg2: long, arg3: int, arg4: long, arg5: int): void
                protected initCache(arg0: long, arg1: long): void
                protected setBigEndian(arg0: boolean): void
                protected clearCache(): void
                protected disableCache(): void
                protected enableCache(): void
                protected readBytes(arg0: long, arg1: long): byte[]
                protected writeBytes(arg0: long, arg1: long, arg2: byte[]): void
                readJBoolean(arg0: long): boolean
                readJByte(arg0: long): byte
                readJChar(arg0: long): char
                readJDouble(arg0: long): double
                readJFloat(arg0: long): float
                readJInt(arg0: long): int
                readJLong(arg0: long): long
                readJShort(arg0: long): short
                readCInteger(arg0: long, arg1: long, arg2: boolean): long
                writeJBoolean(arg0: long, arg1: boolean): void
                writeJByte(arg0: long, arg1: byte): void
                writeJChar(arg0: long, arg1: char): void
                writeJDouble(arg0: long, arg1: double): void
                writeJFloat(arg0: long, arg1: float): void
                writeJInt(arg0: long, arg1: int): void
                writeJLong(arg0: long, arg1: long): void
                writeJShort(arg0: long, arg1: short): void
                writeCInteger(arg0: long, arg1: long, arg2: long): void
                protected readAddressValue(arg0: long): long
                protected readCompOopAddressValue(arg0: long): long
                protected readCompKlassAddressValue(arg0: long): long
                protected writeAddressValue(arg0: long, arg1: long): void
                protected checkConfigured(): void
                protected checkJavaConfigured(): void
                protected parseCacheNumPagesProperty(arg0: int): int
                protected invalidatePageCache(arg0: long, arg1: long): void
                getJBooleanSize(): long
                getJByteSize(): long
                getJCharSize(): long
                getJDoubleSize(): long
                getJFloatSize(): long
                getJIntSize(): long
                getJLongSize(): long
                getJShortSize(): long
                getHeapOopSize(): long
                getNarrowOopBase(): long
                getNarrowOopShift(): int
                getKlassPtrSize(): long
                getNarrowKlassBase(): long
                getNarrowKlassShift(): int
            }
            class DebuggerBase$Fetcher implements sun.jvm.hotspot.debugger.PageFetcher {
                this$0: sun.jvm.hotspot.debugger.DebuggerBase
                constructor(arg0: sun.jvm.hotspot.debugger.DebuggerBase)
                fetchPage(arg0: long, arg1: long): sun.jvm.hotspot.debugger.Page
            }
            interface DataSource {
                readByte(): byte
                readShort(): short
                readInt(): int
                readLong(): long
                read(arg0: byte[]): int
                seek(arg0: long): void
                getFilePointer(): long
                close(): void
            }
            class NoSuchSymbolException extends java.lang.RuntimeException {
                constructor(arg0: java.lang.String)
                constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
                constructor(arg0: java.lang.String, arg1: java.lang.String)
                constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.Throwable)
                getSymbol(): java.lang.String
            }
            interface ThreadContext {
                getNumRegisters(): int
                getRegisterName(arg0: int): java.lang.String
                getRegister(arg0: int): long
                setRegister(arg0: int, arg1: long): void
                getRegisterAsAddress(arg0: int): sun.jvm.hotspot.debugger.Address
                setRegisterAsAddress(arg0: int, arg1: sun.jvm.hotspot.debugger.Address): void
                getTopFrame(arg0: sun.jvm.hotspot.debugger.Debugger): sun.jvm.hotspot.debugger.cdbg.CFrame
            }
            interface ThreadProxy {
                getContext(): sun.jvm.hotspot.debugger.ThreadContext
                canSetContext(): boolean
                setContext(arg0: sun.jvm.hotspot.debugger.ThreadContext): void
            }
            class ReadResult implements java.io.Serializable {
                constructor(arg0: byte[])
                constructor(arg0: long)
                getData(): byte[]
                getFailureAddress(): long
            }
            namespace cdbg {
               interface TemplateType extends sun.jvm.hotspot.debugger.cdbg.Type {
                   getNumTemplateArguments(): int
                   instantiate(arg0: sun.jvm.hotspot.debugger.cdbg.Type[]): sun.jvm.hotspot.debugger.cdbg.Type
                   instantiate(arg0: java.util.List): sun.jvm.hotspot.debugger.cdbg.Type
               }
               interface NamedFieldIdentifier extends sun.jvm.hotspot.debugger.cdbg.FieldIdentifier {
                   getName(): java.lang.String
               }
               class LoadObjectComparator implements java.util.Comparator {
                   constructor()
                   compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                   equals(arg0: java.lang.Object): boolean
               }
               interface IndexableFieldIdentifier extends sun.jvm.hotspot.debugger.cdbg.FieldIdentifier {
                   getIndex(): int
               }
               class DefaultObjectVisitor implements sun.jvm.hotspot.debugger.cdbg.ObjectVisitor {
                   constructor()
                   enterType(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.Address): void
                   exitType(): void
                   doBit(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: long): void
                   doInt(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: long): void
                   doEnum(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: long, arg2: java.lang.String): void
                   doFloat(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: float): void
                   doDouble(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: double): void
                   doPointer(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
                   doArray(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
                   doRef(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
                   doCompound(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
               }
               interface CVAttributes {
                   static CONST: int
                   static VOLATILE: int
               }
               interface AccessControl {
                   static NO_PROTECTION: int
                   static PRIVATE: int
                   static PROTECTED: int
                   static PUBLIC: int
               }
               namespace basic {
                  class BasicVoidType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.VoidType {
                      constructor()
                      asVoid(): sun.jvm.hotspot.debugger.cdbg.VoidType
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicRefType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.RefType {
                      constructor(arg0: java.lang.String, arg1: int, arg2: sun.jvm.hotspot.debugger.cdbg.Type)
                      asRef(): sun.jvm.hotspot.debugger.cdbg.RefType
                      getTargetType(): sun.jvm.hotspot.debugger.cdbg.Type
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicPointerType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.PointerType {
                      constructor(arg0: int, arg1: sun.jvm.hotspot.debugger.cdbg.Type)
                      asPointer(): sun.jvm.hotspot.debugger.cdbg.PointerType
                      getTargetType(): sun.jvm.hotspot.debugger.cdbg.Type
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicNamedFieldIdentifier implements sun.jvm.hotspot.debugger.cdbg.NamedFieldIdentifier {
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.Field)
                      getName(): java.lang.String
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      toString(): java.lang.String
                  }
                  class BasicMemberFunctionType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType implements sun.jvm.hotspot.debugger.cdbg.MemberFunctionType {
                      constructor(arg0: java.lang.String, arg1: int, arg2: sun.jvm.hotspot.debugger.cdbg.Type, arg3: sun.jvm.hotspot.debugger.cdbg.Type, arg4: sun.jvm.hotspot.debugger.cdbg.Type, arg5: long)
                      asMemberFunction(): sun.jvm.hotspot.debugger.cdbg.MemberFunctionType
                      getContainingClass(): sun.jvm.hotspot.debugger.cdbg.Type
                      getThisType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getThisAdjust(): long
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicLocalSym extends sun.jvm.hotspot.debugger.cdbg.basic.BasicSym implements sun.jvm.hotspot.debugger.cdbg.LocalSym {
                      constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.cdbg.Type, arg2: long)
                      asLocal(): sun.jvm.hotspot.debugger.cdbg.LocalSym
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getFrameOffset(): long
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  class BasicIndexableFieldIdentifier implements sun.jvm.hotspot.debugger.cdbg.IndexableFieldIdentifier {
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: int)
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getIndex(): int
                      toString(): java.lang.String
                  }
                  class BasicGlobalSym extends sun.jvm.hotspot.debugger.cdbg.basic.BasicSym implements sun.jvm.hotspot.debugger.cdbg.GlobalSym {
                      constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.cdbg.Type, arg2: sun.jvm.hotspot.debugger.Address, arg3: boolean)
                      asGlobal(): sun.jvm.hotspot.debugger.cdbg.GlobalSym
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getAddress(): sun.jvm.hotspot.debugger.Address
                      isModuleLocal(): boolean
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  class BasicFunctionType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.FunctionType {
                      constructor(arg0: java.lang.String, arg1: int, arg2: sun.jvm.hotspot.debugger.cdbg.Type)
                      protected (: sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType
                      asFunction(): sun.jvm.hotspot.debugger.cdbg.FunctionType
                      getReturnType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getNumArguments(): int
                      getArgumentType(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      addArgumentType(arg0: sun.jvm.hotspot.debugger.cdbg.Type): void
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicFunctionSym extends sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym implements sun.jvm.hotspot.debugger.cdbg.FunctionSym {
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.BlockSym, arg1: long, arg2: sun.jvm.hotspot.debugger.Address, arg3: java.lang.String, arg4: sun.jvm.hotspot.debugger.cdbg.Type, arg5: boolean)
                      asFunction(): sun.jvm.hotspot.debugger.cdbg.FunctionSym
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      isModuleLocal(): boolean
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                      toString(): java.lang.String
                  }
                  class BasicFloatType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.FloatType {
                      constructor(arg0: java.lang.String, arg1: int)
                      asFloat(): sun.jvm.hotspot.debugger.cdbg.FloatType
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicField implements sun.jvm.hotspot.debugger.cdbg.Field {
                      constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.cdbg.Type, arg2: int, arg3: boolean)
                      getAccessControl(): int
                      getName(): java.lang.String
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      isStatic(): boolean
                      setOffset(arg0: long): void
                      getOffset(): long
                      setAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                      getAddress(): sun.jvm.hotspot.debugger.Address
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg2: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  class BasicEnumType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType implements sun.jvm.hotspot.debugger.cdbg.EnumType {
                      constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.cdbg.Type)
                      asEnum(): sun.jvm.hotspot.debugger.cdbg.EnumType
                      getSize(): int
                      isUnsigned(): boolean
                      addEnum(arg0: java.lang.String, arg1: long): void
                      getNumEnumerates(): int
                      getEnumName(arg0: int): java.lang.String
                      getEnumValue(arg0: int): long
                      enumNameForValue(arg0: long): java.lang.String
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicEnumType$Enum {
                      name: java.lang.String
                      value: long
                      constructor(arg0: java.lang.String, arg1: long)
                      getName(): java.lang.String
                      getValue(): long
                  }
                  class BasicDoubleType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.DoubleType {
                      constructor(arg0: java.lang.String, arg1: int)
                      asDouble(): sun.jvm.hotspot.debugger.cdbg.DoubleType
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicDebugEvent implements sun.jvm.hotspot.debugger.cdbg.DebugEvent {
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type, arg1: sun.jvm.hotspot.debugger.ThreadProxy)
                      getType(): sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                      getThread(): sun.jvm.hotspot.debugger.ThreadProxy
                      getPC(): sun.jvm.hotspot.debugger.Address
                      getWasWrite(): boolean
                      getAddress(): sun.jvm.hotspot.debugger.Address
                      getUnknownEventDetail(): java.lang.String
                      setType(arg0: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type): void
                      setThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): void
                      setPC(arg0: sun.jvm.hotspot.debugger.Address): void
                      setWasWrite(arg0: boolean): void
                      setAddress(arg0: sun.jvm.hotspot.debugger.Address): void
                      setUnknownEventDetail(arg0: java.lang.String): void
                      static newLoadObjectLoadEvent(arg0: sun.jvm.hotspot.debugger.ThreadProxy, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent
                      static newLoadObjectUnloadEvent(arg0: sun.jvm.hotspot.debugger.ThreadProxy, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent
                      static newBreakpointEvent(arg0: sun.jvm.hotspot.debugger.ThreadProxy, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent
                      static newSingleStepEvent(arg0: sun.jvm.hotspot.debugger.ThreadProxy, arg1: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent
                      static newAccessViolationEvent(arg0: sun.jvm.hotspot.debugger.ThreadProxy, arg1: sun.jvm.hotspot.debugger.Address, arg2: boolean, arg3: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent
                      static newUnknownEvent(arg0: sun.jvm.hotspot.debugger.ThreadProxy, arg1: java.lang.String): sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent
                  }
                  class CompoundTypeKind {
                      static CLASS: sun.jvm.hotspot.debugger.cdbg.basic.CompoundTypeKind
                      static STRUCT: sun.jvm.hotspot.debugger.cdbg.basic.CompoundTypeKind
                      static UNION: sun.jvm.hotspot.debugger.cdbg.basic.CompoundTypeKind
                  }
                  class BasicCompoundType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.CompoundType {
                      constructor(arg0: java.lang.String, arg1: int, arg2: sun.jvm.hotspot.debugger.cdbg.basic.CompoundTypeKind)
                      asCompound(): sun.jvm.hotspot.debugger.cdbg.CompoundType
                      getNumBaseClasses(): int
                      getBaseClass(arg0: int): sun.jvm.hotspot.debugger.cdbg.BaseClass
                      addBaseClass(arg0: sun.jvm.hotspot.debugger.cdbg.BaseClass): void
                      getNumFields(): int
                      getField(arg0: int): sun.jvm.hotspot.debugger.cdbg.Field
                      addField(arg0: sun.jvm.hotspot.debugger.cdbg.Field): void
                      isClass(): boolean
                      isStruct(): boolean
                      isUnion(): boolean
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicBlockSym extends sun.jvm.hotspot.debugger.cdbg.basic.BasicSym implements sun.jvm.hotspot.debugger.cdbg.BlockSym {
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.BlockSym, arg1: long, arg2: sun.jvm.hotspot.debugger.Address, arg3: java.lang.String)
                      asBlock(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      getParent(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      getLength(): long
                      getAddress(): sun.jvm.hotspot.debugger.Address
                      getNumLocals(): int
                      getLocal(arg0: int): sun.jvm.hotspot.debugger.cdbg.LocalSym
                      addLocal(arg0: sun.jvm.hotspot.debugger.cdbg.LocalSym): void
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  class BasicIntType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.IntType {
                      constructor(arg0: java.lang.String, arg1: int, arg2: boolean)
                      protected (: sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType
                      asInt(): sun.jvm.hotspot.debugger.cdbg.IntType
                      getIntSize(): int
                      isUnsigned(): boolean
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicBitType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType implements sun.jvm.hotspot.debugger.cdbg.BitType {
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: int, arg2: int)
                      asBit(): sun.jvm.hotspot.debugger.cdbg.BitType
                      getSize(): int
                      isUnsigned(): boolean
                      getSizeInBits(): int
                      getOffset(): int
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicBaseClass implements sun.jvm.hotspot.debugger.cdbg.BaseClass {
                      constructor(arg0: int, arg1: boolean, arg2: sun.jvm.hotspot.debugger.cdbg.Type)
                      getAccessControl(): int
                      isVirtual(): boolean
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg2: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  abstract class BasicSym implements sun.jvm.hotspot.debugger.cdbg.Sym {
                      protected (: sun.jvm.hotspot.debugger.cdbg.basic.BasicSym
                      getName(): java.lang.String
                      toString(): java.lang.String
                      asBlock(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      asFunction(): sun.jvm.hotspot.debugger.cdbg.FunctionSym
                      asGlobal(): sun.jvm.hotspot.debugger.cdbg.GlobalSym
                      asLocal(): sun.jvm.hotspot.debugger.cdbg.LocalSym
                      isBlock(): boolean
                      isFunction(): boolean
                      isGlobal(): boolean
                      isLocal(): boolean
                      isLazy(): boolean
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  class LazyBlockSym extends sun.jvm.hotspot.debugger.cdbg.basic.BasicSym implements sun.jvm.hotspot.debugger.cdbg.BlockSym {
                      constructor(arg0: java.lang.Object)
                      asBlock(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      isLazy(): boolean
                      getKey(): java.lang.Object
                      getParent(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      getLength(): long
                      getAddress(): sun.jvm.hotspot.debugger.Address
                      getNumLocals(): int
                      getLocal(arg0: int): sun.jvm.hotspot.debugger.cdbg.LocalSym
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                  }
                  class LazyType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType {
                      constructor(arg0: java.lang.Object)
                      isLazy(): boolean
                      getKey(): java.lang.Object
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicLineNumberInfo implements sun.jvm.hotspot.debugger.cdbg.LineNumberInfo {
                      constructor(arg0: java.lang.String, arg1: int, arg2: sun.jvm.hotspot.debugger.Address, arg3: sun.jvm.hotspot.debugger.Address)
                      getSourceFileName(): java.lang.String
                      getLineNumber(): int
                      getStartPC(): sun.jvm.hotspot.debugger.Address
                      getEndPC(): sun.jvm.hotspot.debugger.Address
                      setEndPC(arg0: sun.jvm.hotspot.debugger.Address): void
                  }
                  class BasicLineNumberMapping {
                      constructor()
                      addLineNumberInfo(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo): void
                      sort(): void
                      recomputeEndPCs(): void
                      lineNumberForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo
                      iterate(arg0: sun.jvm.hotspot.debugger.cdbg.LineNumberVisitor): void
                  }
                  class BasicLineNumberMapping$1 implements java.util.Comparator {
                      this$0: sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping)
                      compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  interface ResolveListener {
                      resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.cdbg.basic.LazyType, arg2: java.lang.String): void
                      resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: java.lang.String): void
                      resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Sym, arg1: sun.jvm.hotspot.debugger.cdbg.basic.LazyType, arg2: java.lang.String): void
                      resolveFailed(arg0: sun.jvm.hotspot.debugger.cdbg.Sym, arg1: sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym, arg2: java.lang.String): void
                  }
                  class BasicCDebugInfoDataBase implements sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase {
                      constructor()
                      beginConstruction(): void
                      addType(arg0: java.lang.Object, arg1: sun.jvm.hotspot.debugger.cdbg.Type): void
                      resolve(arg0: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): void
                      endConstruction(): void
                      lookupType(arg0: java.lang.String): sun.jvm.hotspot.debugger.cdbg.Type
                      lookupType(arg0: java.lang.String, arg1: int): sun.jvm.hotspot.debugger.cdbg.Type
                      iterate(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                      addBlock(arg0: java.lang.Object, arg1: sun.jvm.hotspot.debugger.cdbg.BlockSym): void
                      addGlobalSym(arg0: sun.jvm.hotspot.debugger.cdbg.GlobalSym): void
                      debugInfoForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      lookupSym(arg0: java.lang.String): sun.jvm.hotspot.debugger.cdbg.GlobalSym
                      addLineNumberInfo(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo): void
                      lineNumberForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LineNumberInfo
                      iterate(arg0: sun.jvm.hotspot.debugger.cdbg.LineNumberVisitor): void
                      resolveType(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.cdbg.Type, arg2: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener, arg3: java.lang.String): sun.jvm.hotspot.debugger.cdbg.Type
                      resolveType(arg0: sun.jvm.hotspot.debugger.cdbg.Sym, arg1: sun.jvm.hotspot.debugger.cdbg.Type, arg2: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener, arg3: java.lang.String): sun.jvm.hotspot.debugger.cdbg.Type
                      resolveSym(arg0: sun.jvm.hotspot.debugger.cdbg.Sym, arg1: sun.jvm.hotspot.debugger.cdbg.Sym, arg2: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener, arg3: java.lang.String): sun.jvm.hotspot.debugger.cdbg.Sym
                  }
                  class BasicCDebugInfoDataBase$1 implements java.util.Comparator {
                      this$0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase)
                      compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  abstract class BasicType implements sun.jvm.hotspot.debugger.cdbg.Type , sun.jvm.hotspot.debugger.cdbg.CVAttributes {
                      protected (: sun.jvm.hotspot.debugger.cdbg.basic.BasicType
                      protected (: sun.jvm.hotspot.debugger.cdbg.basic.BasicType
                      getName(): java.lang.String
                      protected setName(arg0: java.lang.String): void
                      getSize(): int
                      asBit(): sun.jvm.hotspot.debugger.cdbg.BitType
                      asInt(): sun.jvm.hotspot.debugger.cdbg.IntType
                      asEnum(): sun.jvm.hotspot.debugger.cdbg.EnumType
                      asFloat(): sun.jvm.hotspot.debugger.cdbg.FloatType
                      asDouble(): sun.jvm.hotspot.debugger.cdbg.DoubleType
                      asPointer(): sun.jvm.hotspot.debugger.cdbg.PointerType
                      asArray(): sun.jvm.hotspot.debugger.cdbg.ArrayType
                      asRef(): sun.jvm.hotspot.debugger.cdbg.RefType
                      asCompound(): sun.jvm.hotspot.debugger.cdbg.CompoundType
                      asFunction(): sun.jvm.hotspot.debugger.cdbg.FunctionType
                      asMemberFunction(): sun.jvm.hotspot.debugger.cdbg.MemberFunctionType
                      asVoid(): sun.jvm.hotspot.debugger.cdbg.VoidType
                      isBit(): boolean
                      isInt(): boolean
                      isEnum(): boolean
                      isFloat(): boolean
                      isDouble(): boolean
                      isPointer(): boolean
                      isArray(): boolean
                      isRef(): boolean
                      isCompound(): boolean
                      isFunction(): boolean
                      isMemberFunction(): boolean
                      isVoid(): boolean
                      isConst(): boolean
                      isVolatile(): boolean
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      isLazy(): boolean
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor): void
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      getCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      toString(): java.lang.String
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      protected findCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      protected addCVVariant(arg0: sun.jvm.hotspot.debugger.cdbg.Type): void
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  class BasicArrayType extends sun.jvm.hotspot.debugger.cdbg.basic.BasicType implements sun.jvm.hotspot.debugger.cdbg.ArrayType {
                      constructor(arg0: java.lang.String, arg1: sun.jvm.hotspot.debugger.cdbg.Type, arg2: int)
                      asArray(): sun.jvm.hotspot.debugger.cdbg.ArrayType
                      getElementType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getLength(): int
                      resolveTypes(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase, arg1: sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener): sun.jvm.hotspot.debugger.cdbg.Type
                      iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                      protected createCVVariant(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
                      visit(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                  }
                  abstract class BasicCFrame implements sun.jvm.hotspot.debugger.cdbg.CFrame {
                      protected (: sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame
                      protected dbg(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                      loadObjectForPC(): sun.jvm.hotspot.debugger.cdbg.LoadObject
                      blockForPC(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                      closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                      iterateLocals(arg0: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor): void
                  }
                  class BasicCFrame$1 implements sun.jvm.hotspot.debugger.cdbg.NamedFieldIdentifier {
                      val$local: sun.jvm.hotspot.debugger.cdbg.LocalSym
                      this$0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame
                      constructor(arg0: sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame, arg1: sun.jvm.hotspot.debugger.cdbg.LocalSym)
                      getType(): sun.jvm.hotspot.debugger.cdbg.Type
                      getName(): java.lang.String
                      toString(): java.lang.String
                  }
                  
               }
               interface Field {
                   getAccessControl(): int
                   getName(): java.lang.String
                   getType(): sun.jvm.hotspot.debugger.cdbg.Type
                   isStatic(): boolean
                   getOffset(): long
                   getAddress(): sun.jvm.hotspot.debugger.Address
               }
               interface BaseClass {
                   getAccessControl(): int
                   isVirtual(): boolean
                   getType(): sun.jvm.hotspot.debugger.cdbg.Type
               }
               interface VoidType extends sun.jvm.hotspot.debugger.cdbg.Type {
               }
               interface MemberFunctionType extends sun.jvm.hotspot.debugger.cdbg.FunctionType {
                   getContainingClass(): sun.jvm.hotspot.debugger.cdbg.Type
                   getThisType(): sun.jvm.hotspot.debugger.cdbg.Type
                   getThisAdjust(): long
               }
               interface FunctionType extends sun.jvm.hotspot.debugger.cdbg.Type {
                   getReturnType(): sun.jvm.hotspot.debugger.cdbg.Type
                   getNumArguments(): int
                   getArgumentType(arg0: int): sun.jvm.hotspot.debugger.cdbg.Type
               }
               interface CompoundType {
                   getNumBaseClasses(): int
                   getBaseClass(arg0: int): sun.jvm.hotspot.debugger.cdbg.BaseClass
                   getNumFields(): int
                   getField(arg0: int): sun.jvm.hotspot.debugger.cdbg.Field
                   isClass(): boolean
                   isStruct(): boolean
                   isUnion(): boolean
               }
               interface RefType extends sun.jvm.hotspot.debugger.cdbg.Type {
                   getTargetType(): sun.jvm.hotspot.debugger.cdbg.Type
               }
               interface ArrayType extends sun.jvm.hotspot.debugger.cdbg.Type {
                   getElementType(): sun.jvm.hotspot.debugger.cdbg.Type
                   getLength(): int
               }
               interface PointerType extends sun.jvm.hotspot.debugger.cdbg.Type {
                   getTargetType(): sun.jvm.hotspot.debugger.cdbg.Type
               }
               interface DoubleType extends sun.jvm.hotspot.debugger.cdbg.Type {
               }
               interface FloatType extends sun.jvm.hotspot.debugger.cdbg.Type {
               }
               interface EnumType extends sun.jvm.hotspot.debugger.cdbg.IntType {
                   getNumEnumerates(): int
                   getEnumName(arg0: int): java.lang.String
                   getEnumValue(arg0: int): long
                   enumNameForValue(arg0: long): java.lang.String
               }
               interface IntType extends sun.jvm.hotspot.debugger.cdbg.Type {
                   getIntSize(): int
                   isUnsigned(): boolean
               }
               interface BitType extends sun.jvm.hotspot.debugger.cdbg.IntType {
                   getSizeInBits(): int
                   getOffset(): int
               }
               interface FieldIdentifier {
                   getType(): sun.jvm.hotspot.debugger.cdbg.Type
                   toString(): java.lang.String
               }
               interface FunctionSym extends sun.jvm.hotspot.debugger.cdbg.BlockSym {
                   getType(): sun.jvm.hotspot.debugger.cdbg.Type
                   isModuleLocal(): boolean
                   toString(): java.lang.String
               }
               interface LocalSym extends sun.jvm.hotspot.debugger.cdbg.Sym {
                   getName(): java.lang.String
                   getType(): sun.jvm.hotspot.debugger.cdbg.Type
                   getFrameOffset(): long
               }
               interface LineNumberVisitor {
                   doLineNumber(arg0: sun.jvm.hotspot.debugger.cdbg.LineNumberInfo): void
               }
               interface GlobalSym extends sun.jvm.hotspot.debugger.cdbg.Sym {
                   getName(): java.lang.String
                   getType(): sun.jvm.hotspot.debugger.cdbg.Type
                   getAddress(): sun.jvm.hotspot.debugger.Address
                   isModuleLocal(): boolean
               }
               interface TypeVisitor {
                   doBitType(arg0: sun.jvm.hotspot.debugger.cdbg.BitType): void
                   doIntType(arg0: sun.jvm.hotspot.debugger.cdbg.IntType): void
                   doEnumType(arg0: sun.jvm.hotspot.debugger.cdbg.EnumType): void
                   doFloatType(arg0: sun.jvm.hotspot.debugger.cdbg.FloatType): void
                   doDoubleType(arg0: sun.jvm.hotspot.debugger.cdbg.DoubleType): void
                   doPointerType(arg0: sun.jvm.hotspot.debugger.cdbg.PointerType): void
                   doArrayType(arg0: sun.jvm.hotspot.debugger.cdbg.ArrayType): void
                   doRefType(arg0: sun.jvm.hotspot.debugger.cdbg.RefType): void
                   doCompoundType(arg0: sun.jvm.hotspot.debugger.cdbg.CompoundType): void
                   doFunctionType(arg0: sun.jvm.hotspot.debugger.cdbg.FunctionType): void
                   doMemberFunctionType(arg0: sun.jvm.hotspot.debugger.cdbg.MemberFunctionType): void
                   doVoidType(arg0: sun.jvm.hotspot.debugger.cdbg.VoidType): void
               }
               interface Type {
                   getName(): java.lang.String
                   getSize(): int
                   asBit(): sun.jvm.hotspot.debugger.cdbg.BitType
                   asInt(): sun.jvm.hotspot.debugger.cdbg.IntType
                   asEnum(): sun.jvm.hotspot.debugger.cdbg.EnumType
                   asFloat(): sun.jvm.hotspot.debugger.cdbg.FloatType
                   asDouble(): sun.jvm.hotspot.debugger.cdbg.DoubleType
                   asPointer(): sun.jvm.hotspot.debugger.cdbg.PointerType
                   asArray(): sun.jvm.hotspot.debugger.cdbg.ArrayType
                   asRef(): sun.jvm.hotspot.debugger.cdbg.RefType
                   asCompound(): sun.jvm.hotspot.debugger.cdbg.CompoundType
                   asFunction(): sun.jvm.hotspot.debugger.cdbg.FunctionType
                   asMemberFunction(): sun.jvm.hotspot.debugger.cdbg.MemberFunctionType
                   asVoid(): sun.jvm.hotspot.debugger.cdbg.VoidType
                   isBit(): boolean
                   isInt(): boolean
                   isEnum(): boolean
                   isFloat(): boolean
                   isDouble(): boolean
                   isPointer(): boolean
                   isArray(): boolean
                   isRef(): boolean
                   isCompound(): boolean
                   isFunction(): boolean
                   isMemberFunction(): boolean
                   isVoid(): boolean
                   isConst(): boolean
                   isVolatile(): boolean
                   iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor): void
                   iterateObject(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor, arg2: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier): void
                   toString(): java.lang.String
               }
               interface DebugEvent {
                   getType(): sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                   getThread(): sun.jvm.hotspot.debugger.ThreadProxy
                   getPC(): sun.jvm.hotspot.debugger.Address
                   getWasWrite(): boolean
                   getAddress(): sun.jvm.hotspot.debugger.Address
                   getUnknownEventDetail(): java.lang.String
               }
               class DebugEvent$Type {
                   static LOADOBJECT_LOAD: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                   static LOADOBJECT_UNLOAD: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                   static BREAKPOINT: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                   static SINGLE_STEP: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                   static ACCESS_VIOLATION: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
                   static UNKNOWN: sun.jvm.hotspot.debugger.cdbg.DebugEvent$Type
               }
               interface ObjectVisitor {
                   enterType(arg0: sun.jvm.hotspot.debugger.cdbg.Type, arg1: sun.jvm.hotspot.debugger.Address): void
                   exitType(): void
                   doBit(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: long): void
                   doInt(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: long): void
                   doEnum(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: long, arg2: java.lang.String): void
                   doFloat(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: float): void
                   doDouble(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: double): void
                   doPointer(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
                   doArray(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
                   doRef(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
                   doCompound(arg0: sun.jvm.hotspot.debugger.cdbg.FieldIdentifier, arg1: sun.jvm.hotspot.debugger.Address): void
               }
               interface LineNumberInfo {
                   getSourceFileName(): java.lang.String
                   getLineNumber(): int
                   getStartPC(): sun.jvm.hotspot.debugger.Address
                   getEndPC(): sun.jvm.hotspot.debugger.Address
               }
               class ClosestSymbol {
                   constructor(arg0: java.lang.String, arg1: long)
                   getName(): java.lang.String
                   getOffset(): long
                   offsetAsHex(): java.lang.String
               }
               interface Sym {
                   getName(): java.lang.String
                   toString(): java.lang.String
                   asBlock(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   asFunction(): sun.jvm.hotspot.debugger.cdbg.FunctionSym
                   asGlobal(): sun.jvm.hotspot.debugger.cdbg.GlobalSym
                   asLocal(): sun.jvm.hotspot.debugger.cdbg.LocalSym
                   isBlock(): boolean
                   isFunction(): boolean
                   isGlobal(): boolean
                   isLocal(): boolean
               }
               interface BlockSym extends sun.jvm.hotspot.debugger.cdbg.Sym {
                   getParent(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   getLength(): long
                   getAddress(): sun.jvm.hotspot.debugger.Address
                   getName(): java.lang.String
                   getNumLocals(): int
                   getLocal(arg0: int): sun.jvm.hotspot.debugger.cdbg.LocalSym
               }
               interface CDebugInfoDataBase {
                   lookupType(arg0: java.lang.String): sun.jvm.hotspot.debugger.cdbg.Type
                   lookupType(arg0: java.lang.String, arg1: int): sun.jvm.hotspot.debugger.cdbg.Type
                   iterate(arg0: sun.jvm.hotspot.debugger.cdbg.TypeVisitor): void
                   debugInfoForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   lookupSym(arg0: java.lang.String): sun.jvm.hotspot.debugger.cdbg.GlobalSym
                   lineNumberForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LineNumberInfo
                   iterate(arg0: sun.jvm.hotspot.debugger.cdbg.LineNumberVisitor): void
               }
               interface ProcessControl {
                   suspend(): void
                   resume(): void
                   isSuspended(): boolean
                   setBreakpoint(arg0: sun.jvm.hotspot.debugger.Address): void
                   clearBreakpoint(arg0: sun.jvm.hotspot.debugger.Address): void
                   isBreakpointSet(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   debugEventPoll(): sun.jvm.hotspot.debugger.cdbg.DebugEvent
                   debugEventContinue(): void
               }
               interface CFrame {
                   sender(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   pc(): sun.jvm.hotspot.debugger.Address
                   loadObjectForPC(): sun.jvm.hotspot.debugger.cdbg.LoadObject
                   blockForPC(): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   closestSymbolToPC(): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   localVariableBase(): sun.jvm.hotspot.debugger.Address
                   iterateLocals(arg0: sun.jvm.hotspot.debugger.cdbg.ObjectVisitor): void
               }
               interface LoadObject {
                   getBase(): sun.jvm.hotspot.debugger.Address
                   getName(): java.lang.String
                   getSize(): long
                   getDebugInfoDataBase(): sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase
                   debugInfoForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.BlockSym
                   closestSymbolToPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.ClosestSymbol
                   lineNumberForPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LineNumberInfo
               }
               interface CDebugger {
                   getThreadList(): java.util.List
                   getLoadObjectList(): java.util.List
                   loadObjectContainingPC(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.cdbg.LoadObject
                   topFrameForThread(arg0: sun.jvm.hotspot.debugger.ThreadProxy): sun.jvm.hotspot.debugger.cdbg.CFrame
                   getNameOfFile(arg0: java.lang.String): java.lang.String
                   getProcessControl(): sun.jvm.hotspot.debugger.cdbg.ProcessControl
                   canDemangle(): boolean
                   demangle(arg0: java.lang.String): java.lang.String
               }
               
            }
            interface MachineDescription extends java.io.Serializable {
                getAddressSize(): long
                cIntegerTypeMaxValue(arg0: long, arg1: boolean): long
                cIntegerTypeMinValue(arg0: long, arg1: boolean): long
                isBigEndian(): boolean
                isLP64(): boolean
            }
            class DebuggerException extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
                constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
                constructor(arg0: java.lang.Throwable)
            }
            interface ThreadAccess {
                getThreadForIdentifierAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.ThreadProxy
                getThreadForThreadId(arg0: long): sun.jvm.hotspot.debugger.ThreadProxy
            }
            interface Debugger extends sun.jvm.hotspot.debugger.SymbolLookup , sun.jvm.hotspot.debugger.ThreadAccess {
                hasProcessList(): boolean
                getProcessList(): java.util.List
                attach(arg0: int): void
                attach(arg0: java.lang.String, arg1: java.lang.String): void
                detach(): boolean
                parseAddress(arg0: java.lang.String): sun.jvm.hotspot.debugger.Address
                getAddressValue(arg0: sun.jvm.hotspot.debugger.Address): long
                getOS(): java.lang.String
                getCPU(): java.lang.String
                getMachineDescription(): sun.jvm.hotspot.debugger.MachineDescription
                hasConsole(): boolean
                consoleExecuteCommand(arg0: java.lang.String): java.lang.String
                getConsolePrompt(): java.lang.String
                getCDebugger(): sun.jvm.hotspot.debugger.cdbg.CDebugger
                getJBooleanSize(): long
                getJByteSize(): long
                getJCharSize(): long
                getJDoubleSize(): long
                getJFloatSize(): long
                getJIntSize(): long
                getJLongSize(): long
                getJShortSize(): long
                getHeapOopSize(): long
                getNarrowOopBase(): long
                getNarrowOopShift(): int
                getKlassPtrSize(): long
                getNarrowKlassBase(): long
                getNarrowKlassShift(): int
                readBytesFromProcess(arg0: long, arg1: long): sun.jvm.hotspot.debugger.ReadResult
                writeBytesToProcess(arg0: long, arg1: long, arg2: byte[]): void
            }
            interface JVMDebugger extends sun.jvm.hotspot.debugger.Debugger {
                configureJavaPrimitiveTypeSizes(arg0: long, arg1: long, arg2: long, arg3: long, arg4: long, arg5: long, arg6: long, arg7: long): void
                putHeapConst(arg0: long, arg1: long, arg2: long, arg3: int, arg4: long, arg5: int): void
            }
            class NotInHeapException extends sun.jvm.hotspot.debugger.AddressException {
                constructor(arg0: long)
                constructor(arg0: java.lang.String, arg1: long)
            }
            class UnalignedAddressException extends sun.jvm.hotspot.debugger.AddressException {
                constructor(arg0: long)
                constructor(arg0: java.lang.String, arg1: long)
            }
            class AddressException extends java.lang.RuntimeException {
                constructor(arg0: long)
                constructor(arg0: java.lang.String, arg1: long)
                getAddress(): long
                getMessage(): java.lang.String
            }
            class UnmappedAddressException extends sun.jvm.hotspot.debugger.AddressException {
                constructor(arg0: long)
                constructor(arg0: java.lang.String, arg1: long)
            }
            interface OopHandle extends sun.jvm.hotspot.debugger.Address {
            }
            interface Address {
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
                getCIntegerAt(arg0: long, arg1: long, arg2: boolean): long
                getAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                getCompOopAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                getCompKlassAddressAt(arg0: long): sun.jvm.hotspot.debugger.Address
                getJBooleanAt(arg0: long): boolean
                getJByteAt(arg0: long): byte
                getJCharAt(arg0: long): char
                getJDoubleAt(arg0: long): double
                getJFloatAt(arg0: long): float
                getJIntAt(arg0: long): int
                getJLongAt(arg0: long): long
                getJShortAt(arg0: long): short
                getOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                getCompOopHandleAt(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                setCIntegerAt(arg0: long, arg1: long, arg2: long): void
                setAddressAt(arg0: long, arg1: sun.jvm.hotspot.debugger.Address): void
                setJBooleanAt(arg0: long, arg1: boolean): void
                setJByteAt(arg0: long, arg1: byte): void
                setJCharAt(arg0: long, arg1: char): void
                setJDoubleAt(arg0: long, arg1: double): void
                setJFloatAt(arg0: long, arg1: float): void
                setJIntAt(arg0: long, arg1: int): void
                setJLongAt(arg0: long, arg1: long): void
                setJShortAt(arg0: long, arg1: short): void
                setOopHandleAt(arg0: long, arg1: sun.jvm.hotspot.debugger.OopHandle): void
                addOffsetTo(arg0: long): sun.jvm.hotspot.debugger.Address
                addOffsetToAsOopHandle(arg0: long): sun.jvm.hotspot.debugger.OopHandle
                minus(arg0: sun.jvm.hotspot.debugger.Address): long
                lessThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                lessThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                greaterThan(arg0: sun.jvm.hotspot.debugger.Address): boolean
                greaterThanOrEqual(arg0: sun.jvm.hotspot.debugger.Address): boolean
                andWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                orWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
                xorWithMask(arg0: long): sun.jvm.hotspot.debugger.Address
            }
            interface SymbolLookup {
                lookup(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.debugger.Address
                lookupOop(arg0: java.lang.String, arg1: java.lang.String): sun.jvm.hotspot.debugger.OopHandle
            }
            
         }
         namespace types {
            interface PointerType extends sun.jvm.hotspot.types.Type {
                getTargetType(): sun.jvm.hotspot.types.Type
            }
            interface TypeDataBase {
                lookupType(arg0: java.lang.String): sun.jvm.hotspot.types.Type
                lookupType(arg0: java.lang.String, arg1: boolean): sun.jvm.hotspot.types.Type
                lookupIntConstant(arg0: java.lang.String): java.lang.Integer
                lookupIntConstant(arg0: java.lang.String, arg1: boolean): java.lang.Integer
                lookupLongConstant(arg0: java.lang.String): java.lang.Long
                lookupLongConstant(arg0: java.lang.String, arg1: boolean): java.lang.Long
                getJBooleanType(): sun.jvm.hotspot.types.Type
                getJByteType(): sun.jvm.hotspot.types.Type
                getJCharType(): sun.jvm.hotspot.types.Type
                getJDoubleType(): sun.jvm.hotspot.types.Type
                getJFloatType(): sun.jvm.hotspot.types.Type
                getJIntType(): sun.jvm.hotspot.types.Type
                getJLongType(): sun.jvm.hotspot.types.Type
                getJShortType(): sun.jvm.hotspot.types.Type
                getAddressSize(): long
                getOopSize(): long
                addressTypeIsEqualToType(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.Type): boolean
                guessTypeForAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.types.Type
                findDynamicTypeForAddress(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.Type): sun.jvm.hotspot.types.Type
                getTypes(): java.util.Iterator
                getIntConstants(): java.util.Iterator
                getLongConstants(): java.util.Iterator
            }
            interface CIntegerType extends sun.jvm.hotspot.types.Type {
                isUnsigned(): boolean
                maxValue(): long
                minValue(): long
            }
            interface AddressField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getValue(): sun.jvm.hotspot.debugger.Address
            }
            interface NarrowOopField extends sun.jvm.hotspot.types.OopField {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                getValue(): sun.jvm.hotspot.debugger.OopHandle
            }
            interface OopField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                getValue(): sun.jvm.hotspot.debugger.OopHandle
            }
            interface CIntegerField extends sun.jvm.hotspot.types.Field {
                isUnsigned(): boolean
                getValue(arg0: sun.jvm.hotspot.debugger.Address): long
                getValue(): long
            }
            interface JShortField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): short
                getValue(): short
            }
            interface JLongField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): long
                getValue(): long
            }
            interface JIntField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): int
                getValue(): int
            }
            interface JFloatField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): float
                getValue(): float
            }
            interface JDoubleField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): double
                getValue(): double
            }
            interface JCharField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): char
                getValue(): char
            }
            interface JByteField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): byte
                getValue(): byte
            }
            interface JBooleanField extends sun.jvm.hotspot.types.Field {
                getValue(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getValue(): boolean
            }
            class WrongTypeException extends java.lang.RuntimeException {
                constructor()
                constructor(arg0: java.lang.String)
            }
            interface Field {
                getName(): java.lang.String
                getType(): sun.jvm.hotspot.types.Type
                getSize(): long
                isStatic(): boolean
                getOffset(): long
                getStaticFieldAddress(): sun.jvm.hotspot.debugger.Address
                getJBoolean(arg0: sun.jvm.hotspot.debugger.Address): boolean
                getJByte(arg0: sun.jvm.hotspot.debugger.Address): byte
                getJChar(arg0: sun.jvm.hotspot.debugger.Address): char
                getJShort(arg0: sun.jvm.hotspot.debugger.Address): short
                getJInt(arg0: sun.jvm.hotspot.debugger.Address): int
                getJLong(arg0: sun.jvm.hotspot.debugger.Address): long
                getJFloat(arg0: sun.jvm.hotspot.debugger.Address): float
                getJDouble(arg0: sun.jvm.hotspot.debugger.Address): double
                getCInteger(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.CIntegerType): long
                getAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                getOopHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                getNarrowOopHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                getJBoolean(): boolean
                getJByte(): byte
                getJChar(): char
                getJFloat(): float
                getJDouble(): double
                getJInt(): int
                getJLong(): long
                getJShort(): short
                getCInteger(arg0: sun.jvm.hotspot.types.CIntegerType): long
                getAddress(): sun.jvm.hotspot.debugger.Address
                getOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                getNarrowOopHandle(): sun.jvm.hotspot.debugger.OopHandle
            }
            interface Type {
                getName(): java.lang.String
                getSuperclass(): sun.jvm.hotspot.types.Type
                getSize(): long
                isCIntegerType(): boolean
                isCStringType(): boolean
                isJavaPrimitiveType(): boolean
                isOopType(): boolean
                isPointerType(): boolean
                getField(arg0: java.lang.String, arg1: boolean, arg2: boolean): sun.jvm.hotspot.types.Field
                getField(arg0: java.lang.String, arg1: boolean): sun.jvm.hotspot.types.Field
                getField(arg0: java.lang.String): sun.jvm.hotspot.types.Field
                getField(arg0: java.lang.String, arg1: sun.jvm.hotspot.types.Type, arg2: boolean): sun.jvm.hotspot.types.Field
                getField(arg0: java.lang.String, arg1: sun.jvm.hotspot.types.Type): sun.jvm.hotspot.types.Field
                getFields(): java.util.Iterator
                getJBooleanField(arg0: java.lang.String): sun.jvm.hotspot.types.JBooleanField
                getJByteField(arg0: java.lang.String): sun.jvm.hotspot.types.JByteField
                getJCharField(arg0: java.lang.String): sun.jvm.hotspot.types.JCharField
                getJDoubleField(arg0: java.lang.String): sun.jvm.hotspot.types.JDoubleField
                getJFloatField(arg0: java.lang.String): sun.jvm.hotspot.types.JFloatField
                getJIntField(arg0: java.lang.String): sun.jvm.hotspot.types.JIntField
                getJLongField(arg0: java.lang.String): sun.jvm.hotspot.types.JLongField
                getJShortField(arg0: java.lang.String): sun.jvm.hotspot.types.JShortField
                getCIntegerField(arg0: java.lang.String): sun.jvm.hotspot.types.CIntegerField
                getOopField(arg0: java.lang.String): sun.jvm.hotspot.types.OopField
                getNarrowOopField(arg0: java.lang.String): sun.jvm.hotspot.types.NarrowOopField
                getAddressField(arg0: java.lang.String): sun.jvm.hotspot.types.AddressField
            }
            namespace basic {
               class BasicOopField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.OopField {
                   constructor(arg0: sun.jvm.hotspot.types.OopField)
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                   getValue(): sun.jvm.hotspot.debugger.OopHandle
               }
               class BasicNarrowOopField extends sun.jvm.hotspot.types.basic.BasicOopField implements sun.jvm.hotspot.types.NarrowOopField {
                   constructor(arg0: sun.jvm.hotspot.types.OopField)
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                   getValue(): sun.jvm.hotspot.debugger.OopHandle
               }
               class BasicJShortField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JShortField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): short
                   getValue(): short
               }
               class BasicJLongField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JLongField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   getValue(): long
               }
               class BasicJIntField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JIntField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): int
                   getValue(): int
               }
               class BasicJFloatField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JFloatField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): float
                   getValue(): float
               }
               class BasicJDoubleField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JDoubleField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): double
                   getValue(): double
               }
               class BasicJCharField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JCharField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): char
                   getValue(): char
               }
               class BasicJByteField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JByteField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): byte
                   getValue(): byte
               }
               class BasicJBooleanField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.JBooleanField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   getValue(): boolean
               }
               class BasicCIntegerType extends sun.jvm.hotspot.types.basic.BasicType implements sun.jvm.hotspot.types.CIntegerType {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: java.lang.String, arg2: boolean)
                   equals(arg0: java.lang.Object): boolean
                   toString(): java.lang.String
                   isCIntegerType(): boolean
                   isUnsigned(): boolean
                   setIsUnsigned(arg0: boolean): void
                   maxValue(): long
                   minValue(): long
               }
               class BasicField implements sun.jvm.hotspot.types.Field {
                   protected db: sun.jvm.hotspot.types.basic.BasicTypeDataBase
                   protected type: sun.jvm.hotspot.types.Type
                   constructor(arg0: sun.jvm.hotspot.types.Field)
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   getName(): java.lang.String
                   getType(): sun.jvm.hotspot.types.Type
                   getSize(): long
                   isStatic(): boolean
                   getOffset(): long
                   getStaticFieldAddress(): sun.jvm.hotspot.debugger.Address
                   getJBoolean(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   getJByte(arg0: sun.jvm.hotspot.debugger.Address): byte
                   getJChar(arg0: sun.jvm.hotspot.debugger.Address): char
                   getJDouble(arg0: sun.jvm.hotspot.debugger.Address): double
                   getJFloat(arg0: sun.jvm.hotspot.debugger.Address): float
                   getJInt(arg0: sun.jvm.hotspot.debugger.Address): int
                   getJLong(arg0: sun.jvm.hotspot.debugger.Address): long
                   getJShort(arg0: sun.jvm.hotspot.debugger.Address): short
                   getCInteger(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.CIntegerType): long
                   getAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getOopHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                   getNarrowOopHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                   getJBoolean(): boolean
                   getJByte(): byte
                   getJChar(): char
                   getJDouble(): double
                   getJFloat(): float
                   getJInt(): int
                   getJLong(): long
                   getJShort(): short
                   getCInteger(arg0: sun.jvm.hotspot.types.CIntegerType): long
                   getAddress(): sun.jvm.hotspot.debugger.Address
                   getOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                   getNarrowOopHandle(): sun.jvm.hotspot.debugger.OopHandle
               }
               class BasicCIntegerField extends sun.jvm.hotspot.types.basic.BasicField implements sun.jvm.hotspot.types.CIntegerField {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: sun.jvm.hotspot.types.Type, arg2: java.lang.String, arg3: sun.jvm.hotspot.types.Type, arg4: boolean, arg5: long, arg6: sun.jvm.hotspot.debugger.Address)
                   isUnsigned(): boolean
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): long
                   getValue(): long
               }
               class BasicFieldWrapper implements sun.jvm.hotspot.types.Field {
                   protected field: sun.jvm.hotspot.types.Field
                   constructor(arg0: sun.jvm.hotspot.types.Field)
                   getName(): java.lang.String
                   getType(): sun.jvm.hotspot.types.Type
                   getSize(): long
                   isStatic(): boolean
                   getOffset(): long
                   getStaticFieldAddress(): sun.jvm.hotspot.debugger.Address
                   getJBoolean(arg0: sun.jvm.hotspot.debugger.Address): boolean
                   getJByte(arg0: sun.jvm.hotspot.debugger.Address): byte
                   getJChar(arg0: sun.jvm.hotspot.debugger.Address): char
                   getJDouble(arg0: sun.jvm.hotspot.debugger.Address): double
                   getJFloat(arg0: sun.jvm.hotspot.debugger.Address): float
                   getJInt(arg0: sun.jvm.hotspot.debugger.Address): int
                   getJLong(arg0: sun.jvm.hotspot.debugger.Address): long
                   getJShort(arg0: sun.jvm.hotspot.debugger.Address): short
                   getCInteger(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.CIntegerType): long
                   getAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getOopHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                   getNarrowOopHandle(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.OopHandle
                   getJBoolean(): boolean
                   getJByte(): byte
                   getJChar(): char
                   getJDouble(): double
                   getJFloat(): float
                   getJInt(): int
                   getJLong(): long
                   getJShort(): short
                   getCInteger(arg0: sun.jvm.hotspot.types.CIntegerType): long
                   getAddress(): sun.jvm.hotspot.debugger.Address
                   getOopHandle(): sun.jvm.hotspot.debugger.OopHandle
                   getNarrowOopHandle(): sun.jvm.hotspot.debugger.OopHandle
               }
               class BasicAddressFieldWrapper extends sun.jvm.hotspot.types.basic.BasicFieldWrapper implements sun.jvm.hotspot.types.AddressField {
                   constructor(arg0: sun.jvm.hotspot.types.Field)
                   getValue(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.debugger.Address
                   getValue(): sun.jvm.hotspot.debugger.Address
               }
               class BasicPointerType extends sun.jvm.hotspot.types.basic.BasicType implements sun.jvm.hotspot.types.PointerType {
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: java.lang.String, arg2: sun.jvm.hotspot.types.Type)
                   isPointerType(): boolean
                   getTargetType(): sun.jvm.hotspot.types.Type
               }
               class BasicType implements sun.jvm.hotspot.types.Type {
                   protected db: sun.jvm.hotspot.types.basic.BasicTypeDataBase
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: java.lang.String, arg2: sun.jvm.hotspot.types.Type)
                   constructor(arg0: sun.jvm.hotspot.types.basic.BasicTypeDataBase, arg1: java.lang.String)
                   equals(arg0: java.lang.Object): boolean
                   hashCode(): int
                   toString(): java.lang.String
                   getName(): java.lang.String
                   setSuperclass(arg0: sun.jvm.hotspot.types.Type): void
                   getSuperclass(): sun.jvm.hotspot.types.Type
                   setSize(arg0: long): void
                   getSize(): long
                   isCIntegerType(): boolean
                   isCStringType(): boolean
                   isJavaPrimitiveType(): boolean
                   setIsJavaPrimitiveType(arg0: boolean): void
                   isOopType(): boolean
                   isPointerType(): boolean
                   setIsOopType(arg0: boolean): void
                   getField(arg0: java.lang.String, arg1: boolean, arg2: boolean): sun.jvm.hotspot.types.Field
                   getField(arg0: java.lang.String, arg1: boolean): sun.jvm.hotspot.types.Field
                   getField(arg0: java.lang.String): sun.jvm.hotspot.types.Field
                   getField(arg0: java.lang.String, arg1: sun.jvm.hotspot.types.Type, arg2: boolean): sun.jvm.hotspot.types.Field
                   getField(arg0: java.lang.String, arg1: sun.jvm.hotspot.types.Type): sun.jvm.hotspot.types.Field
                   getFields(): java.util.Iterator
                   getJBooleanField(arg0: java.lang.String): sun.jvm.hotspot.types.JBooleanField
                   getJByteField(arg0: java.lang.String): sun.jvm.hotspot.types.JByteField
                   getJCharField(arg0: java.lang.String): sun.jvm.hotspot.types.JCharField
                   getJDoubleField(arg0: java.lang.String): sun.jvm.hotspot.types.JDoubleField
                   getJFloatField(arg0: java.lang.String): sun.jvm.hotspot.types.JFloatField
                   getJIntField(arg0: java.lang.String): sun.jvm.hotspot.types.JIntField
                   getJLongField(arg0: java.lang.String): sun.jvm.hotspot.types.JLongField
                   getJShortField(arg0: java.lang.String): sun.jvm.hotspot.types.JShortField
                   getCIntegerField(arg0: java.lang.String): sun.jvm.hotspot.types.CIntegerField
                   getOopField(arg0: java.lang.String): sun.jvm.hotspot.types.OopField
                   getNarrowOopField(arg0: java.lang.String): sun.jvm.hotspot.types.NarrowOopField
                   getAddressField(arg0: java.lang.String): sun.jvm.hotspot.types.AddressField
                   addField(arg0: sun.jvm.hotspot.types.Field): void
                   removeField(arg0: sun.jvm.hotspot.types.Field): void
               }
               class BasicTypeDataBase implements sun.jvm.hotspot.types.TypeDataBase {
                   typeToVtbl: java.util.HashMap
                   constructor(arg0: sun.jvm.hotspot.debugger.MachineDescription, arg1: sun.jvm.hotspot.types.basic.VtblAccess)
                   lookupType(arg0: java.lang.String): sun.jvm.hotspot.types.Type
                   lookupType(arg0: java.lang.String, arg1: boolean): sun.jvm.hotspot.types.Type
                   lookupIntConstant(arg0: java.lang.String): java.lang.Integer
                   lookupIntConstant(arg0: java.lang.String, arg1: boolean): java.lang.Integer
                   lookupLongConstant(arg0: java.lang.String): java.lang.Long
                   lookupLongConstant(arg0: java.lang.String, arg1: boolean): java.lang.Long
                   getJBooleanType(): sun.jvm.hotspot.types.Type
                   getJByteType(): sun.jvm.hotspot.types.Type
                   getJCharType(): sun.jvm.hotspot.types.Type
                   getJDoubleType(): sun.jvm.hotspot.types.Type
                   getJFloatType(): sun.jvm.hotspot.types.Type
                   getJIntType(): sun.jvm.hotspot.types.Type
                   getJLongType(): sun.jvm.hotspot.types.Type
                   getJShortType(): sun.jvm.hotspot.types.Type
                   getAddressSize(): long
                   getOopSize(): long
                   addressTypeIsEqualToType(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.Type): boolean
                   findDynamicTypeForAddress(arg0: sun.jvm.hotspot.debugger.Address, arg1: sun.jvm.hotspot.types.Type): sun.jvm.hotspot.types.Type
                   guessTypeForAddress(arg0: sun.jvm.hotspot.debugger.Address): sun.jvm.hotspot.types.Type
                   cIntegerTypeMaxValue(arg0: long, arg1: boolean): long
                   cIntegerTypeMinValue(arg0: long, arg1: boolean): long
                   getTypes(): java.util.Iterator
                   getIntConstants(): java.util.Iterator
                   getLongConstants(): java.util.Iterator
                   setJBooleanType(arg0: sun.jvm.hotspot.types.Type): void
                   setJByteType(arg0: sun.jvm.hotspot.types.Type): void
                   setJCharType(arg0: sun.jvm.hotspot.types.Type): void
                   setJDoubleType(arg0: sun.jvm.hotspot.types.Type): void
                   setJFloatType(arg0: sun.jvm.hotspot.types.Type): void
                   setJIntType(arg0: sun.jvm.hotspot.types.Type): void
                   setJLongType(arg0: sun.jvm.hotspot.types.Type): void
                   setJShortType(arg0: sun.jvm.hotspot.types.Type): void
                   addType(arg0: sun.jvm.hotspot.types.Type): void
                   removeType(arg0: sun.jvm.hotspot.types.Type): void
                   addIntConstant(arg0: java.lang.String, arg1: int): void
                   removeIntConstant(arg0: java.lang.String): void
                   addLongConstant(arg0: java.lang.String, arg1: long): void
                   removeLongConstant(arg0: java.lang.String): void
               }
               interface VtblAccess {
                   getVtblForType(arg0: sun.jvm.hotspot.types.Type): sun.jvm.hotspot.debugger.Address
                   clearCaches(): void
               }
               abstract class BasicVtblAccess implements sun.jvm.hotspot.types.basic.VtblAccess {
                   protected symbolLookup: sun.jvm.hotspot.debugger.SymbolLookup
                   protected dllNames: java.lang.String[]
                   static nullAddress: java.lang.Object
                   constructor(arg0: sun.jvm.hotspot.debugger.SymbolLookup, arg1: java.lang.String[])
                   getVtblForType(arg0: sun.jvm.hotspot.types.Type): sun.jvm.hotspot.debugger.Address
                   clearCaches(): void
                   protected vtblSymbolForType(arg0: sun.jvm.hotspot.types.Type): java.lang.String
               }
               
            }
            
         }
         class BsdVtblAccess extends sun.jvm.hotspot.types.basic.BasicVtblAccess {
             constructor(arg0: sun.jvm.hotspot.debugger.SymbolLookup, arg1: java.lang.String[])
             protected vtblSymbolForType(arg0: sun.jvm.hotspot.types.Type): java.lang.String
         }
         
      }
      
   }
   
}
