declare namespace com {
    namespace sun {
        namespace awt {
            class SecurityWarning {
                public static getSize(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.Dimension
                public static setPosition(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.awt.geom.Point2D, arg2: float, arg3: float): void
                public static class: java.lang.Class<any>
            }
        }
        namespace beans {
            namespace decoder {
                abstract class AccessorElementHandler extends com.sun.beans.decoder.ElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected addArgument(arg0: java.lang.Object): void
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    protected getValue(arg0: java.lang.String | string): java.lang.Object
                    protected setValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
                    public static class: java.lang.Class<any>
                }
                class ArrayElementHandler extends com.sun.beans.decoder.NewElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    public startElement(): void
                    protected isArgument(): boolean
                    protected getValueObject(arg0: java.lang.Class<any>, arg1: java.lang.Object[]): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class BooleanElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class ByteElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class CharElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class ClassElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class DocumentHandler extends org.xml.sax.helpers.DefaultHandler {
                    public constructor()
                    public getClassLoader(): java.lang.ClassLoader
                    public setClassLoader(arg0: java.lang.ClassLoader): void
                    public getExceptionListener(): java.beans.ExceptionListener
                    public setExceptionListener(arg0: java.beans.ExceptionListener | java.beans.ExceptionListener$$Lambda): void
                    public getOwner(): java.lang.Object
                    public setOwner(arg0: java.lang.Object): void
                    public getElementHandler(arg0: java.lang.String | string): java.lang.Class<com.sun.beans.decoder.ElementHandler>
                    public setElementHandler(arg0: java.lang.String | string, arg1: java.lang.Class<com.sun.beans.decoder.ElementHandler>): void
                    public hasVariable(arg0: java.lang.String | string): boolean
                    public getVariable(arg0: java.lang.String | string): java.lang.Object
                    public setVariable(arg0: java.lang.String | string, arg1: java.lang.Object): void
                    public getObjects(): java.lang.Object[]
                    public resolveEntity(arg0: java.lang.String | string, arg1: java.lang.String | string): org.xml.sax.InputSource
                    public startDocument(): void
                    public startElement(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: org.xml.sax.Attributes): void
                    public endElement(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): void
                    public characters(arg0: char[], arg1: int, arg2: int): void
                    public handleException(arg0: java.lang.Exception): void
                    public parse(arg0: org.xml.sax.InputSource): void
                    public findClass(arg0: java.lang.String | string): java.lang.Class<any>
                    public static class: java.lang.Class<any>
                }
                class DoubleElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                abstract class ElementHandler {
                    public constructor()
                    public getOwner(): com.sun.beans.decoder.DocumentHandler
                    public getParent(): com.sun.beans.decoder.ElementHandler
                    protected getVariable(arg0: java.lang.String | string): java.lang.Object
                    protected getContextBean(): java.lang.Object
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    public startElement(): void
                    public endElement(): void
                    public addCharacter(arg0: char): void
                    protected addArgument(arg0: java.lang.Object): void
                    protected isArgument(): boolean
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class FalseElementHandler extends com.sun.beans.decoder.NullElementHandler {
                    public getValue(): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class FieldElementHandler extends com.sun.beans.decoder.AccessorElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected isArgument(): boolean
                    protected getContextBean(): java.lang.Object
                    protected getValue(arg0: java.lang.String | string): java.lang.Object
                    protected setValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
                    public static class: java.lang.Class<any>
                }
                class FloatElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class IntElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class JavaElementHandler extends com.sun.beans.decoder.ElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected addArgument(arg0: java.lang.Object): void
                    protected isArgument(): boolean
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class LongElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class MethodElementHandler extends com.sun.beans.decoder.NewElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected getValueObject(arg0: java.lang.Class<any>, arg1: java.lang.Object[]): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class NewElementHandler extends com.sun.beans.decoder.ElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected addArgument(arg0: java.lang.Object): void
                    protected getContextBean(): java.lang.Object
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class NullElementHandler extends com.sun.beans.decoder.ElementHandler implements com.sun.beans.decoder.ValueObject {
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    public getValue(): java.lang.Object
                    public isVoid(): boolean
                    public static class: java.lang.Class<any>
                }
                class ObjectElementHandler extends com.sun.beans.decoder.NewElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    public startElement(): void
                    protected isArgument(): boolean
                    protected getValueObject(arg0: java.lang.Class<any>, arg1: java.lang.Object[]): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class PropertyElementHandler extends com.sun.beans.decoder.AccessorElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected isArgument(): boolean
                    protected getValue(arg0: java.lang.String | string): java.lang.Object
                    protected setValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
                    public static class: java.lang.Class<any>
                }
                class ShortElementHandler extends com.sun.beans.decoder.StringElementHandler {
                    public getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class StringElementHandler extends com.sun.beans.decoder.ElementHandler {
                    public constructor()
                    public addCharacter(arg0: char): void
                    protected addArgument(arg0: java.lang.Object): void
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    protected getValue(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class TrueElementHandler extends com.sun.beans.decoder.NullElementHandler {
                    public getValue(): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                interface ValueObject {
                    getValue(): java.lang.Object
                    isVoid(): boolean
                }
                class ValueObjectImpl implements com.sun.beans.decoder.ValueObject {
                    public getValue(): java.lang.Object
                    public isVoid(): boolean
                    public static class: java.lang.Class<any>
                }
                class VarElementHandler extends com.sun.beans.decoder.ElementHandler {
                    public addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    protected getValueObject(): com.sun.beans.decoder.ValueObject
                    public static class: java.lang.Class<any>
                }
                class VoidElementHandler extends com.sun.beans.decoder.ObjectElementHandler {
                    protected isArgument(): boolean
                    public static class: java.lang.Class<any>
                }
            }
            namespace editors {
                class BooleanEditor extends java.beans.PropertyEditorSupport {
                    public constructor()
                    public getJavaInitializationString(): string
                    public getAsText(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public getTags(): java.lang.String[]
                    public static class: java.lang.Class<any>
                }
                class ByteEditor extends com.sun.beans.editors.NumberEditor {
                    public constructor()
                    public getJavaInitializationString(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class ColorEditor extends java.awt.Panel implements java.beans.PropertyEditor {
                    public constructor()
                    public setValue(arg0: java.lang.Object): void
                    public preferredSize(): java.awt.Dimension
                    public keyUp(arg0: java.awt.Event, arg1: int): boolean
                    public setAsText(arg0: java.lang.String | string): void
                    public action(arg0: java.awt.Event, arg1: java.lang.Object): boolean
                    public getJavaInitializationString(): string
                    public getValue(): java.lang.Object
                    public isPaintable(): boolean
                    public paintValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle): void
                    public getAsText(): string
                    public getTags(): java.lang.String[]
                    public getCustomEditor(): java.awt.Component
                    public supportsCustomEditor(): boolean
                    public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public static class: java.lang.Class<any>
                }
                class DoubleEditor extends com.sun.beans.editors.NumberEditor {
                    public constructor()
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class EnumEditor implements java.beans.PropertyEditor {
                    public constructor(arg0: java.lang.Class)
                    public getValue(): java.lang.Object
                    public setValue(arg0: java.lang.Object): void
                    public getAsText(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public getTags(): java.lang.String[]
                    public getJavaInitializationString(): string
                    public isPaintable(): boolean
                    public paintValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle): void
                    public supportsCustomEditor(): boolean
                    public getCustomEditor(): java.awt.Component
                    public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public static class: java.lang.Class<any>
                }
                class FloatEditor extends com.sun.beans.editors.NumberEditor {
                    public constructor()
                    public getJavaInitializationString(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class FontEditor extends java.awt.Panel implements java.beans.PropertyEditor {
                    public constructor()
                    public preferredSize(): java.awt.Dimension
                    public setValue(arg0: java.lang.Object): void
                    public getValue(): java.lang.Object
                    public getJavaInitializationString(): string
                    public action(arg0: java.awt.Event, arg1: java.lang.Object): boolean
                    public isPaintable(): boolean
                    public paintValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle): void
                    public getAsText(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public getTags(): java.lang.String[]
                    public getCustomEditor(): java.awt.Component
                    public supportsCustomEditor(): boolean
                    public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public static class: java.lang.Class<any>
                }
                class IntegerEditor extends com.sun.beans.editors.NumberEditor {
                    public constructor()
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class LongEditor extends com.sun.beans.editors.NumberEditor {
                    public constructor()
                    public getJavaInitializationString(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                abstract class NumberEditor extends java.beans.PropertyEditorSupport {
                    public constructor()
                    public getJavaInitializationString(): string
                    public static class: java.lang.Class<any>
                }
                class ShortEditor extends com.sun.beans.editors.NumberEditor {
                    public constructor()
                    public getJavaInitializationString(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class StringEditor extends java.beans.PropertyEditorSupport {
                    public constructor()
                    public getJavaInitializationString(): string
                    public setAsText(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
            }
            namespace finder {
                abstract class AbstractFinder<T extends java.lang.reflect.Executable> {
                    protected constructor(arg0: java.lang.Class<any>[])
                    protected isValid(arg0: T): boolean
                    public static class: java.lang.Class<any>
                }
                class BeanInfoFinder extends com.sun.beans.finder.InstanceFinder<java.beans.BeanInfo> {
                    public constructor()
                    protected instantiate(arg0: java.lang.Class<any>, arg1: java.lang.String | string, arg2: java.lang.String | string): java.beans.BeanInfo
                    protected instantiate(arg0: java.lang.Class, arg1: java.lang.String | string, arg2: java.lang.String | string): java.lang.Object
                    public setPackages(arg0: java.lang.String[]): void
                    public getPackages(): java.lang.String[]
                    public static class: java.lang.Class<any>
                }
                class ClassFinder {
                    public static findClass(arg0: java.lang.String | string): java.lang.Class<any>
                    public static findClass(arg0: java.lang.String | string, arg1: java.lang.ClassLoader): java.lang.Class<any>
                    public static resolveClass(arg0: java.lang.String | string): java.lang.Class<any>
                    public static resolveClass(arg0: java.lang.String | string, arg1: java.lang.ClassLoader): java.lang.Class<any>
                    public static class: java.lang.Class<any>
                }
                class ConstructorFinder extends com.sun.beans.finder.AbstractFinder<java.lang.reflect.Constructor<any>> {
                    public static findConstructor(arg0: java.lang.Class<any>, ...arg1: java.lang.Class<any>[]): java.lang.reflect.Constructor<any>
                    public static class: java.lang.Class<any>
                }
                class FieldFinder {
                    public static findField(arg0: java.lang.Class<any>, arg1: java.lang.String | string): java.lang.reflect.Field
                    public static findInstanceField(arg0: java.lang.Class<any>, arg1: java.lang.String | string): java.lang.reflect.Field
                    public static findStaticField(arg0: java.lang.Class<any>, arg1: java.lang.String | string): java.lang.reflect.Field
                    public static class: java.lang.Class<any>
                }
                class InstanceFinder<T> {
                    public getPackages(): java.lang.String[]
                    public setPackages(...arg0: java.lang.String[]): void
                    public find(arg0: java.lang.Class<any>): T
                    protected instantiate(arg0: java.lang.Class<any>, arg1: java.lang.String | string): T
                    protected instantiate(arg0: java.lang.Class<any>, arg1: java.lang.String | string, arg2: java.lang.String | string): T
                    public static class: java.lang.Class<any>
                }
                class MethodFinder extends com.sun.beans.finder.AbstractFinder<java.lang.reflect.Method> {
                    public static findMethod(arg0: java.lang.Class<any>, arg1: java.lang.String | string, ...arg2: java.lang.Class<any>[]): java.lang.reflect.Method
                    public static findInstanceMethod(arg0: java.lang.Class<any>, arg1: java.lang.String | string, ...arg2: java.lang.Class<any>[]): java.lang.reflect.Method
                    public static findStaticMethod(arg0: java.lang.Class<any>, arg1: java.lang.String | string, ...arg2: java.lang.Class<any>[]): java.lang.reflect.Method
                    public static findAccessibleMethod(arg0: java.lang.reflect.Method): java.lang.reflect.Method
                    protected isValid(arg0: java.lang.reflect.Method): boolean
                    protected isValid(arg0: java.lang.reflect.Executable): boolean
                    public static class: java.lang.Class<any>
                }
                class PersistenceDelegateFinder extends com.sun.beans.finder.InstanceFinder<java.beans.PersistenceDelegate> {
                    public constructor()
                    public register(arg0: java.lang.Class<any>, arg1: java.beans.PersistenceDelegate): void
                    public find(arg0: java.lang.Class<any>): java.beans.PersistenceDelegate
                    public find(arg0: java.lang.Class): java.lang.Object
                    public setPackages(arg0: java.lang.String[]): void
                    public getPackages(): java.lang.String[]
                    public static class: java.lang.Class<any>
                }
                class PrimitiveTypeMap {
                    public static class: java.lang.Class<any>
                }
                class PrimitiveWrapperMap {
                    public static getType(arg0: java.lang.String | string): java.lang.Class<any>
                    public static class: java.lang.Class<any>
                }
                class PropertyEditorFinder extends com.sun.beans.finder.InstanceFinder<java.beans.PropertyEditor> {
                    public constructor()
                    public register(arg0: java.lang.Class<any>, arg1: java.lang.Class<any>): void
                    public find(arg0: java.lang.Class<any>): java.beans.PropertyEditor
                    protected instantiate(arg0: java.lang.Class<any>, arg1: java.lang.String | string, arg2: java.lang.String | string): java.beans.PropertyEditor
                    protected instantiate(arg0: java.lang.Class, arg1: java.lang.String | string, arg2: java.lang.String | string): java.lang.Object
                    public find(arg0: java.lang.Class): java.lang.Object
                    public setPackages(arg0: java.lang.String[]): void
                    public getPackages(): java.lang.String[]
                    public static class: java.lang.Class<any>
                }
                class Signature {
                    public equals(arg0: java.lang.Object): boolean
                    public hashCode(): int
                    public static class: java.lang.Class<any>
                }
                class SignatureException extends java.lang.RuntimeException {
                    public static class: java.lang.Class<any>
                }
            }
            namespace infos {
                class ComponentBeanInfo extends java.beans.SimpleBeanInfo {
                    public constructor()
                    public getPropertyDescriptors(): java.beans.PropertyDescriptor[]
                    public static class: java.lang.Class<any>
                }
            }
            namespace util {
                abstract class Cache<K, V> {
                    public create(arg0: K): V
                    public constructor(arg0: com.sun.beans.util.Cache$Kind, arg1: com.sun.beans.util.Cache$Kind)
                    public constructor(arg0: com.sun.beans.util.Cache$Kind, arg1: com.sun.beans.util.Cache$Kind, arg2: boolean)
                    public get(arg0: K): V
                    public remove(arg0: K): void
                    public clear(): void
                    public static class: java.lang.Class<any>
                }
            }
            class TypeResolver {
                public constructor()
                public static resolveInClass(arg0: java.lang.Class<any>, arg1: java.lang.reflect.Type | java.lang.reflect.Type$$Lambda): java.lang.reflect.Type
                public static resolveInClass(arg0: java.lang.Class<any>, arg1: java.lang.reflect.Type[]): java.lang.reflect.Type[]
                public static resolve(arg0: java.lang.reflect.Type | java.lang.reflect.Type$$Lambda, arg1: java.lang.reflect.Type | java.lang.reflect.Type$$Lambda): java.lang.reflect.Type
                public static resolve(arg0: java.lang.reflect.Type | java.lang.reflect.Type$$Lambda, arg1: java.lang.reflect.Type[]): java.lang.reflect.Type[]
                public static erase(arg0: java.lang.reflect.Type | java.lang.reflect.Type$$Lambda): java.lang.Class<any>
                public static erase(arg0: java.lang.reflect.Type[]): java.lang.Class[]
                public static class: java.lang.Class<any>
            }
            class WeakCache<K, V> {
                public constructor()
                public get(arg0: K): V
                public put(arg0: K, arg1: V): void
                public clear(): void
                public static class: java.lang.Class<any>
            }
            class WildcardTypeImpl implements java.lang.reflect.WildcardType {
                public getUpperBounds(): java.lang.reflect.Type[]
                public getLowerBounds(): java.lang.reflect.Type[]
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
        }
        namespace imageio {
            namespace plugins {
                namespace bmp {
                    class BMPCompressionTypes {
                        public constructor()
                        public static getCompressionTypes(): java.lang.String[]
                        public static class: java.lang.Class<any>
                    }
                    interface BMPConstants {
                        VERSION_2: string
                        VERSION_3: string
                        VERSION_3_NT: string
                        VERSION_4: string
                        VERSION_5: string
                        LCS_CALIBRATED_RGB: int
                        LCS_sRGB: int
                        LCS_WINDOWS_COLOR_SPACE: int
                        PROFILE_LINKED: int
                        PROFILE_EMBEDDED: int
                        BI_RGB: int
                        BI_RLE8: int
                        BI_RLE4: int
                        BI_BITFIELDS: int
                        BI_JPEG: int
                        BI_PNG: int
                    }
                    class BMPImageReader extends javax.imageio.ImageReader implements com.sun.imageio.plugins.bmp.BMPConstants {
                        public constructor(arg0: javax.imageio.spi.ImageReaderSpi)
                        public setInput(arg0: java.lang.Object, arg1: boolean, arg2: boolean): void
                        public getNumImages(arg0: boolean): int
                        public getWidth(arg0: int): int
                        public getHeight(arg0: int): int
                        protected readHeader(): void
                        public getImageTypes(arg0: int): java.util.Iterator
                        public getDefaultReadParam(): javax.imageio.ImageReadParam
                        public getImageMetadata(arg0: int): javax.imageio.metadata.IIOMetadata
                        public getStreamMetadata(): javax.imageio.metadata.IIOMetadata
                        public isRandomAccessEasy(arg0: int): boolean
                        public read(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.BufferedImage
                        public canReadRaster(): boolean
                        public readRaster(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.Raster
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class BMPImageReaderSpi extends javax.imageio.spi.ImageReaderSpi {
                        public constructor()
                        public onRegistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                        public getDescription(arg0: java.util.Locale): string
                        public canDecodeInput(arg0: java.lang.Object): boolean
                        public createReaderInstance(arg0: java.lang.Object): javax.imageio.ImageReader
                        public static class: java.lang.Class<any>
                    }
                    class BMPImageWriter extends javax.imageio.ImageWriter implements com.sun.imageio.plugins.bmp.BMPConstants {
                        public constructor(arg0: javax.imageio.spi.ImageWriterSpi)
                        public setOutput(arg0: java.lang.Object): void
                        public getDefaultWriteParam(): javax.imageio.ImageWriteParam
                        public getDefaultStreamMetadata(arg0: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getDefaultImageMetadata(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public canWriteRasters(): boolean
                        public write(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
                        public reset(): void
                        protected getPreferredCompressionType(arg0: java.awt.image.ColorModel, arg1: java.awt.image.SampleModel): int
                        protected getPreferredCompressionType(arg0: javax.imageio.ImageTypeSpecifier): int
                        protected canEncodeImage(arg0: int, arg1: java.awt.image.ColorModel, arg2: java.awt.image.SampleModel): boolean
                        protected canEncodeImage(arg0: int, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        protected writeMaskToPalette(arg0: int, arg1: int, arg2: byte[], arg3: byte[], arg4: byte[], arg5: byte[]): void
                        public static class: java.lang.Class<any>
                    }
                    class BMPImageWriterSpi extends javax.imageio.spi.ImageWriterSpi {
                        public constructor()
                        public getDescription(arg0: java.util.Locale): string
                        public onRegistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                        public canEncodeImage(arg0: javax.imageio.ImageTypeSpecifier): boolean
                        public createWriterInstance(arg0: java.lang.Object): javax.imageio.ImageWriter
                        public static class: java.lang.Class<any>
                    }
                    class BMPMetadata extends javax.imageio.metadata.IIOMetadata implements com.sun.imageio.plugins.bmp.BMPConstants {
                        public static nativeMetadataFormatName: string
                        public bmpVersion: string
                        public width: int
                        public height: int
                        public bitsPerPixel: short
                        public compression: int
                        public imageSize: int
                        public xPixelsPerMeter: int
                        public yPixelsPerMeter: int
                        public colorsUsed: int
                        public colorsImportant: int
                        public redMask: int
                        public greenMask: int
                        public blueMask: int
                        public alphaMask: int
                        public colorSpace: int
                        public redX: double
                        public redY: double
                        public redZ: double
                        public greenX: double
                        public greenY: double
                        public greenZ: double
                        public blueX: double
                        public blueY: double
                        public blueZ: double
                        public gammaRed: int
                        public gammaGreen: int
                        public gammaBlue: int
                        public intent: int
                        public palette: byte[]
                        public paletteSize: int
                        public red: int
                        public green: int
                        public blue: int
                        public comments: java.util.List
                        public constructor()
                        public isReadOnly(): boolean
                        public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                        protected getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardCompressionNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardDataNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class BMPMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public static class: java.lang.Class<any>
                    }
                    class BMPMetadataFormatResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                }
                namespace common {
                    class BitFile {
                        public constructor(arg0: javax.imageio.stream.ImageOutputStream, arg1: boolean)
                        public flush(): void
                        public writeBits(arg0: int, arg1: int): void
                        public static class: java.lang.Class<any>
                    }
                    class BogusColorSpace extends java.awt.color.ColorSpace {
                        public constructor(arg0: int)
                        public toRGB(arg0: float[]): float[]
                        public fromRGB(arg0: float[]): float[]
                        public toCIEXYZ(arg0: float[]): float[]
                        public fromCIEXYZ(arg0: float[]): float[]
                        public static class: java.lang.Class<any>
                    }
                    class I18N extends com.sun.imageio.plugins.common.I18NImpl {
                        public constructor()
                        public static getString(arg0: java.lang.String | string): string
                        public static class: java.lang.Class<any>
                    }
                    class I18NImpl {
                        public constructor()
                        protected static getString(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): string
                        public static class: java.lang.Class<any>
                    }
                    class ImageUtil {
                        public constructor()
                        public static createColorModel(arg0: java.awt.image.SampleModel): java.awt.image.ColorModel
                        public static getPackedBinaryData(arg0: java.awt.image.Raster, arg1: java.awt.Rectangle): byte[]
                        public static getUnpackedBinaryData(arg0: java.awt.image.Raster, arg1: java.awt.Rectangle): byte[]
                        public static setPackedBinaryData(arg0: byte[], arg1: java.awt.image.WritableRaster, arg2: java.awt.Rectangle): void
                        public static setUnpackedBinaryData(arg0: byte[], arg1: java.awt.image.WritableRaster, arg2: java.awt.Rectangle): void
                        public static isBinary(arg0: java.awt.image.SampleModel): boolean
                        public static createColorModel(arg0: java.awt.color.ColorSpace, arg1: java.awt.image.SampleModel): java.awt.image.ColorModel
                        public static getElementSize(arg0: java.awt.image.SampleModel): int
                        public static getTileSize(arg0: java.awt.image.SampleModel): long
                        public static getBandSize(arg0: java.awt.image.SampleModel): long
                        public static isIndicesForGrayscale(arg0: byte[], arg1: byte[], arg2: byte[]): boolean
                        public static convertObjectToString(arg0: java.lang.Object): string
                        public static canEncodeImage(arg0: javax.imageio.ImageWriter, arg1: javax.imageio.ImageTypeSpecifier): void
                        public static canEncodeImage(arg0: javax.imageio.ImageWriter, arg1: java.awt.image.ColorModel, arg2: java.awt.image.SampleModel): void
                        public static imageIsContiguous(arg0: java.awt.image.RenderedImage): boolean
                        public static class: java.lang.Class<any>
                    }
                    class InputStreamAdapter extends java.io.InputStream {
                        public constructor(arg0: javax.imageio.stream.ImageInputStream)
                        public read(): int
                        public read(arg0: byte[], arg1: int, arg2: int): int
                        public static class: java.lang.Class<any>
                    }
                    class LZWCompressor {
                        public constructor(arg0: javax.imageio.stream.ImageOutputStream, arg1: int, arg2: boolean)
                        public compress(arg0: byte[], arg1: int, arg2: int): void
                        public flush(): void
                        public dump(arg0: java.io.PrintStream): void
                        public static class: java.lang.Class<any>
                    }
                    class LZWStringTable {
                        public constructor()
                        public addCharString(arg0: short, arg1: byte): int
                        public findCharString(arg0: short, arg1: byte): short
                        public clearTable(arg0: int): void
                        public static hash(arg0: short, arg1: byte): int
                        public expandCode(arg0: byte[], arg1: int, arg2: short, arg3: int): int
                        public dump(arg0: java.io.PrintStream): void
                        public static class: java.lang.Class<any>
                    }
                    class PaletteBuilder {
                        protected static MAXLEVEL: int
                        protected src: java.awt.image.RenderedImage
                        protected srcColorModel: java.awt.image.ColorModel
                        protected srcRaster: java.awt.image.Raster
                        protected requiredSize: int
                        protected root: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode
                        protected numNodes: int
                        protected maxNodes: int
                        protected currLevel: int
                        protected currSize: int
                        protected reduceList: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode[]
                        protected palette: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode[]
                        protected transparency: int
                        protected transColor: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode
                        public static createIndexedImage(arg0: java.awt.image.RenderedImage): java.awt.image.RenderedImage
                        public static createIndexColorModel(arg0: java.awt.image.RenderedImage): java.awt.image.IndexColorModel
                        public static canCreatePalette(arg0: javax.imageio.ImageTypeSpecifier): boolean
                        public static canCreatePalette(arg0: java.awt.image.RenderedImage): boolean
                        protected getIndexedImage(): java.awt.image.RenderedImage
                        protected constructor(arg0: java.awt.image.RenderedImage)
                        protected constructor(arg0: java.awt.image.RenderedImage, arg1: int)
                        protected findColorIndex(arg0: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode, arg1: java.awt.Color): int
                        protected buildPalette(): void
                        protected insertNode(arg0: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode, arg1: java.awt.Color, arg2: int): com.sun.imageio.plugins.common.PaletteBuilder$ColorNode
                        protected getIndexColorModel(): java.awt.image.IndexColorModel
                        protected findPaletteEntry(arg0: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode, arg1: int, arg2: byte[], arg3: byte[], arg4: byte[]): int
                        protected getBranchIndex(arg0: java.awt.Color, arg1: int): int
                        protected reduceTree(): void
                        protected freeTree(arg0: com.sun.imageio.plugins.common.PaletteBuilder$ColorNode): com.sun.imageio.plugins.common.PaletteBuilder$ColorNode
                        public static class: java.lang.Class<any>
                    }
                    class ReaderUtil {
                        public constructor()
                        public static computeUpdatedPixels(arg0: java.awt.Rectangle, arg1: java.awt.Point, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int): int[]
                        public static readMultiByteInteger(arg0: javax.imageio.stream.ImageInputStream): int
                        public static class: java.lang.Class<any>
                    }
                    class StandardMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public constructor()
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static class: java.lang.Class<any>
                    }
                    class StandardMetadataFormatResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class SubImageInputStream extends javax.imageio.stream.ImageInputStreamImpl {
                        public constructor(arg0: javax.imageio.stream.ImageInputStream, arg1: int)
                        public read(): int
                        public read(arg0: byte[], arg1: int, arg2: int): int
                        public length(): long
                        public seek(arg0: long): void
                        protected finalize(): void
                        public static class: java.lang.Class<any>
                    }
                }
                namespace gif {
                    class GIFImageMetadata extends com.sun.imageio.plugins.gif.GIFMetadata {
                        public imageLeftPosition: int
                        public imageTopPosition: int
                        public imageWidth: int
                        public imageHeight: int
                        public interlaceFlag: boolean
                        public sortFlag: boolean
                        public localColorTable: byte[]
                        public disposalMethod: int
                        public userInputFlag: boolean
                        public transparentColorFlag: boolean
                        public delayTime: int
                        public transparentColorIndex: int
                        public hasPlainTextExtension: boolean
                        public textGridLeft: int
                        public textGridTop: int
                        public textGridWidth: int
                        public textGridHeight: int
                        public characterCellWidth: int
                        public characterCellHeight: int
                        public textForegroundColor: int
                        public textBackgroundColor: int
                        public text: byte[]
                        public applicationIDs: java.util.List
                        public authenticationCodes: java.util.List
                        public applicationData: java.util.List
                        public comments: java.util.List
                        protected constructor(arg0: boolean, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String[], arg4: java.lang.String[])
                        public constructor()
                        public isReadOnly(): boolean
                        public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                        public getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardCompressionNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDataNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardTextNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardTransparencyNode(): javax.imageio.metadata.IIOMetadataNode
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        protected mergeNativeTree(arg0: org.w3c.dom.Node): void
                        protected mergeStandardTree(arg0: org.w3c.dom.Node): void
                        public reset(): void
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public static class: java.lang.Class<any>
                    }
                    class GIFImageMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public static class: java.lang.Class<any>
                    }
                    class GIFImageMetadataFormatResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class GIFImageReader extends javax.imageio.ImageReader {
                        public constructor(arg0: javax.imageio.spi.ImageReaderSpi)
                        public setInput(arg0: java.lang.Object, arg1: boolean, arg2: boolean): void
                        public getNumImages(arg0: boolean): int
                        public getWidth(arg0: int): int
                        public getHeight(arg0: int): int
                        public getImageTypes(arg0: int): java.util.Iterator
                        public getDefaultReadParam(): javax.imageio.ImageReadParam
                        public getStreamMetadata(): javax.imageio.metadata.IIOMetadata
                        public getImageMetadata(arg0: int): javax.imageio.metadata.IIOMetadata
                        public initializeStringTable(arg0: int[], arg1: byte[], arg2: byte[], arg3: int[]): void
                        public read(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.BufferedImage
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class GIFImageReaderSpi extends javax.imageio.spi.ImageReaderSpi {
                        public constructor()
                        public getDescription(arg0: java.util.Locale): string
                        public canDecodeInput(arg0: java.lang.Object): boolean
                        public createReaderInstance(arg0: java.lang.Object): javax.imageio.ImageReader
                        public static class: java.lang.Class<any>
                    }
                    class GIFImageWriter extends javax.imageio.ImageWriter {
                        public constructor(arg0: com.sun.imageio.plugins.gif.GIFImageWriterSpi)
                        public canWriteSequence(): boolean
                        public convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public endWriteSequence(): void
                        public getDefaultImageMetadata(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getDefaultStreamMetadata(arg0: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getDefaultWriteParam(): javax.imageio.ImageWriteParam
                        public prepareWriteSequence(arg0: javax.imageio.metadata.IIOMetadata): void
                        public reset(): void
                        public setOutput(arg0: java.lang.Object): void
                        public write(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
                        public writeToSequence(arg0: javax.imageio.IIOImage, arg1: javax.imageio.ImageWriteParam): void
                        public static class: java.lang.Class<any>
                    }
                    class GIFImageWriterSpi extends javax.imageio.spi.ImageWriterSpi {
                        public constructor()
                        public canEncodeImage(arg0: javax.imageio.ImageTypeSpecifier): boolean
                        public getDescription(arg0: java.util.Locale): string
                        public createWriterInstance(arg0: java.lang.Object): javax.imageio.ImageWriter
                        public static class: java.lang.Class<any>
                    }
                    abstract class GIFMetadata extends javax.imageio.metadata.IIOMetadata {
                        protected static fatal(arg0: org.w3c.dom.Node, arg1: java.lang.String | string): void
                        protected static getStringAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: boolean, arg4: java.lang.String[]): string
                        protected static getIntAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: int, arg3: boolean, arg4: boolean, arg5: int, arg6: int): int
                        protected static getFloatAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: float, arg3: boolean): float
                        protected static getIntAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: boolean, arg3: int, arg4: int): int
                        protected static getFloatAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string): float
                        protected static getBooleanAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: boolean, arg3: boolean): boolean
                        protected static getBooleanAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string): boolean
                        protected static getEnumeratedAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: java.lang.String[], arg3: int, arg4: boolean): int
                        protected static getEnumeratedAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: java.lang.String[]): int
                        protected static getAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: boolean): string
                        protected static getAttribute(arg0: org.w3c.dom.Node, arg1: java.lang.String | string): string
                        protected constructor(arg0: boolean, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String[], arg4: java.lang.String[])
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        protected getColorTable(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: boolean, arg3: int): byte[]
                        protected mergeNativeTree(arg0: org.w3c.dom.Node): void
                        protected mergeStandardTree(arg0: org.w3c.dom.Node): void
                        public static class: java.lang.Class<any>
                    }
                    class GIFStreamMetadata extends com.sun.imageio.plugins.gif.GIFMetadata {
                        public version: string
                        public logicalScreenWidth: int
                        public logicalScreenHeight: int
                        public colorResolution: int
                        public pixelAspectRatio: int
                        public backgroundColorIndex: int
                        public sortFlag: boolean
                        public globalColorTable: byte[]
                        protected constructor(arg0: boolean, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String[], arg4: java.lang.String[])
                        public constructor()
                        public isReadOnly(): boolean
                        public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                        public getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardCompressionNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDataNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDocumentNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardTextNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardTransparencyNode(): javax.imageio.metadata.IIOMetadataNode
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        protected mergeNativeTree(arg0: org.w3c.dom.Node): void
                        protected mergeStandardTree(arg0: org.w3c.dom.Node): void
                        public reset(): void
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public static class: java.lang.Class<any>
                    }
                    class GIFStreamMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public static class: java.lang.Class<any>
                    }
                    class GIFStreamMetadataFormatResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class GIFWritableImageMetadata extends com.sun.imageio.plugins.gif.GIFImageMetadata {
                        public isReadOnly(): boolean
                        public reset(): void
                        protected mergeNativeTree(arg0: org.w3c.dom.Node): void
                        protected mergeStandardTree(arg0: org.w3c.dom.Node): void
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public static class: java.lang.Class<any>
                    }
                    class GIFWritableStreamMetadata extends com.sun.imageio.plugins.gif.GIFStreamMetadata {
                        public constructor()
                        public isReadOnly(): boolean
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public reset(): void
                        protected mergeNativeTree(arg0: org.w3c.dom.Node): void
                        protected mergeStandardTree(arg0: org.w3c.dom.Node): void
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public static class: java.lang.Class<any>
                    }
                }
                namespace jpeg {
                    class AdobeMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        public static class: java.lang.Class<any>
                    }
                    class COMMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        public static class: java.lang.Class<any>
                    }
                    class DHTMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        protected clone(): java.lang.Object
                        public static class: java.lang.Class<any>
                    }
                    class DQTMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        protected clone(): java.lang.Object
                        public static class: java.lang.Class<any>
                    }
                    class DRIMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        public static class: java.lang.Class<any>
                    }
                    class JFIFMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        protected clone(): java.lang.Object
                        public static class: java.lang.Class<any>
                    }
                    class JPEG {
                        public static TEM: int
                        public static SOF0: int
                        public static SOF1: int
                        public static SOF2: int
                        public static SOF3: int
                        public static DHT: int
                        public static SOF5: int
                        public static SOF6: int
                        public static SOF7: int
                        public static JPG: int
                        public static SOF9: int
                        public static SOF10: int
                        public static SOF11: int
                        public static DAC: int
                        public static SOF13: int
                        public static SOF14: int
                        public static SOF15: int
                        public static RST0: int
                        public static RST1: int
                        public static RST2: int
                        public static RST3: int
                        public static RST4: int
                        public static RST5: int
                        public static RST6: int
                        public static RST7: int
                        public static RESTART_RANGE: int
                        public static SOI: int
                        public static EOI: int
                        public static SOS: int
                        public static DQT: int
                        public static DNL: int
                        public static DRI: int
                        public static DHP: int
                        public static EXP: int
                        public static APP0: int
                        public static APP1: int
                        public static APP2: int
                        public static APP3: int
                        public static APP4: int
                        public static APP5: int
                        public static APP6: int
                        public static APP7: int
                        public static APP8: int
                        public static APP9: int
                        public static APP10: int
                        public static APP11: int
                        public static APP12: int
                        public static APP13: int
                        public static APP14: int
                        public static APP15: int
                        public static COM: int
                        public static DENSITY_UNIT_ASPECT_RATIO: int
                        public static DENSITY_UNIT_DOTS_INCH: int
                        public static DENSITY_UNIT_DOTS_CM: int
                        public static NUM_DENSITY_UNIT: int
                        public static ADOBE_IMPOSSIBLE: int
                        public static ADOBE_UNKNOWN: int
                        public static ADOBE_YCC: int
                        public static ADOBE_YCCK: int
                        public static vendor: string
                        public static version: string
                        public static nativeImageMetadataFormatName: string
                        public static nativeImageMetadataFormatClassName: string
                        public static nativeStreamMetadataFormatName: string
                        public static nativeStreamMetadataFormatClassName: string
                        public static JCS_UNKNOWN: int
                        public static JCS_GRAYSCALE: int
                        public static JCS_RGB: int
                        public static JCS_YCbCr: int
                        public static JCS_CMYK: int
                        public static JCS_YCC: int
                        public static JCS_RGBA: int
                        public static JCS_YCbCrA: int
                        public static JCS_YCCA: int
                        public static JCS_YCCK: int
                        public static NUM_JCS_CODES: int
                        public static DEFAULT_QUALITY: float
                        public constructor()
                        public static class: java.lang.Class<any>
                    }
                    class JPEGBuffer {
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageMetadataFormat extends com.sun.imageio.plugins.jpeg.JPEGMetadataFormat {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageMetadataFormatResources extends com.sun.imageio.plugins.jpeg.JPEGMetadataFormatResources {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageReader extends javax.imageio.ImageReader {
                        protected static WARNING_NO_EOI: int
                        protected static WARNING_NO_JFIF_IN_THUMB: int
                        protected static WARNING_IGNORE_INVALID_ICC: int
                        public constructor(arg0: javax.imageio.spi.ImageReaderSpi)
                        protected warningOccurred(arg0: int): void
                        protected warningWithMessage(arg0: java.lang.String | string): void
                        public setInput(arg0: java.lang.Object, arg1: boolean, arg2: boolean): void
                        public getNumImages(arg0: boolean): int
                        public getWidth(arg0: int): int
                        public getHeight(arg0: int): int
                        public getRawImageType(arg0: int): javax.imageio.ImageTypeSpecifier
                        public getImageTypes(arg0: int): java.util.Iterator
                        public getDefaultReadParam(): javax.imageio.ImageReadParam
                        public getStreamMetadata(): javax.imageio.metadata.IIOMetadata
                        public getImageMetadata(arg0: int): javax.imageio.metadata.IIOMetadata
                        public read(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.BufferedImage
                        public abort(): void
                        public canReadRaster(): boolean
                        public readRaster(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.Raster
                        public readerSupportsThumbnails(): boolean
                        public getNumThumbnails(arg0: int): int
                        public getThumbnailWidth(arg0: int, arg1: int): int
                        public getThumbnailHeight(arg0: int, arg1: int): int
                        public readThumbnail(arg0: int, arg1: int): java.awt.image.BufferedImage
                        public reset(): void
                        public dispose(): void
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageReaderResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageReaderSpi extends javax.imageio.spi.ImageReaderSpi {
                        public constructor()
                        public getDescription(arg0: java.util.Locale): string
                        public canDecodeInput(arg0: java.lang.Object): boolean
                        public createReaderInstance(arg0: java.lang.Object): javax.imageio.ImageReader
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageWriter extends javax.imageio.ImageWriter {
                        protected static WARNING_DEST_IGNORED: int
                        protected static WARNING_STREAM_METADATA_IGNORED: int
                        protected static WARNING_DEST_METADATA_COMP_MISMATCH: int
                        protected static WARNING_DEST_METADATA_JFIF_MISMATCH: int
                        protected static WARNING_DEST_METADATA_ADOBE_MISMATCH: int
                        protected static WARNING_IMAGE_METADATA_JFIF_MISMATCH: int
                        protected static WARNING_IMAGE_METADATA_ADOBE_MISMATCH: int
                        protected static WARNING_METADATA_NOT_JPEG_FOR_RASTER: int
                        protected static WARNING_NO_BANDS_ON_INDEXED: int
                        protected static WARNING_ILLEGAL_THUMBNAIL: int
                        protected static WARNING_IGNORING_THUMBS: int
                        protected static WARNING_FORCING_JFIF: int
                        protected static WARNING_THUMB_CLIPPED: int
                        protected static WARNING_METADATA_ADJUSTED_FOR_THUMB: int
                        protected static WARNING_NO_RGB_THUMB_AS_INDEXED: int
                        protected static WARNING_NO_GRAY_THUMB_AS_INDEXED: int
                        public constructor(arg0: javax.imageio.spi.ImageWriterSpi)
                        public setOutput(arg0: java.lang.Object): void
                        public getDefaultWriteParam(): javax.imageio.ImageWriteParam
                        public getDefaultStreamMetadata(arg0: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getDefaultImageMetadata(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getNumThumbnailsSupported(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam, arg2: javax.imageio.metadata.IIOMetadata, arg3: javax.imageio.metadata.IIOMetadata): int
                        public getPreferredThumbnailSizes(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam, arg2: javax.imageio.metadata.IIOMetadata, arg3: javax.imageio.metadata.IIOMetadata): java.awt.Dimension[]
                        public canWriteRasters(): boolean
                        public write(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
                        public canWriteSequence(): boolean
                        public prepareWriteSequence(arg0: javax.imageio.metadata.IIOMetadata): void
                        public writeToSequence(arg0: javax.imageio.IIOImage, arg1: javax.imageio.ImageWriteParam): void
                        public endWriteSequence(): void
                        public abort(): void
                        protected clearAbortRequest(): void
                        public reset(): void
                        public dispose(): void
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageWriterResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class JPEGImageWriterSpi extends javax.imageio.spi.ImageWriterSpi {
                        public constructor()
                        public getDescription(arg0: java.util.Locale): string
                        public isFormatLossless(): boolean
                        public canEncodeImage(arg0: javax.imageio.ImageTypeSpecifier): boolean
                        public createWriterInstance(arg0: java.lang.Object): javax.imageio.ImageWriter
                        public static class: java.lang.Class<any>
                    }
                    class JPEGMetadata extends javax.imageio.metadata.IIOMetadata implements java.lang.Cloneable {
                        protected clone(): java.lang.Object
                        public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                        protected getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardCompressionNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardTextNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardTransparencyNode(): javax.imageio.metadata.IIOMetadataNode
                        public isReadOnly(): boolean
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public reset(): void
                        public print(): void
                        public static class: java.lang.Class<any>
                    }
                    abstract class JPEGMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        protected isInSubtree(arg0: java.lang.String | string, arg1: java.lang.String | string): boolean
                        public static class: java.lang.Class<any>
                    }
                    abstract class JPEGMetadataFormatResources extends java.util.ListResourceBundle {
                        public static class: java.lang.Class<any>
                    }
                    class JPEGStreamMetadataFormat extends com.sun.imageio.plugins.jpeg.JPEGMetadataFormat {
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static class: java.lang.Class<any>
                    }
                    class JPEGStreamMetadataFormatResources extends com.sun.imageio.plugins.jpeg.JPEGMetadataFormatResources {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class MarkerSegment implements java.lang.Cloneable {
                        protected static LENGTH_SIZE: int
                        protected clone(): java.lang.Object
                        public static class: java.lang.Class<any>
                    }
                    class SOFMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        protected clone(): java.lang.Object
                        public static class: java.lang.Class<any>
                    }
                    class SOSMarkerSegment extends com.sun.imageio.plugins.jpeg.MarkerSegment {
                        protected clone(): java.lang.Object
                        public static class: java.lang.Class<any>
                    }
                }
                namespace png {
                    class PNGImageReader extends javax.imageio.ImageReader {
                        public constructor(arg0: javax.imageio.spi.ImageReaderSpi)
                        public setInput(arg0: java.lang.Object, arg1: boolean, arg2: boolean): void
                        public getNumImages(arg0: boolean): int
                        public getWidth(arg0: int): int
                        public getHeight(arg0: int): int
                        public getImageTypes(arg0: int): java.util.Iterator<javax.imageio.ImageTypeSpecifier>
                        public getRawImageType(arg0: int): javax.imageio.ImageTypeSpecifier
                        public getDefaultReadParam(): javax.imageio.ImageReadParam
                        public getStreamMetadata(): javax.imageio.metadata.IIOMetadata
                        public getImageMetadata(arg0: int): javax.imageio.metadata.IIOMetadata
                        public read(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.BufferedImage
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class PNGImageReaderSpi extends javax.imageio.spi.ImageReaderSpi {
                        public constructor()
                        public getDescription(arg0: java.util.Locale): string
                        public canDecodeInput(arg0: java.lang.Object): boolean
                        public createReaderInstance(arg0: java.lang.Object): javax.imageio.ImageReader
                        public static class: java.lang.Class<any>
                    }
                    class PNGImageWriter extends javax.imageio.ImageWriter {
                        public constructor(arg0: javax.imageio.spi.ImageWriterSpi)
                        public setOutput(arg0: java.lang.Object): void
                        public getDefaultWriteParam(): javax.imageio.ImageWriteParam
                        public getDefaultStreamMetadata(arg0: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getDefaultImageMetadata(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public write(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
                        public static class: java.lang.Class<any>
                    }
                    class PNGImageWriterSpi extends javax.imageio.spi.ImageWriterSpi {
                        public constructor()
                        public canEncodeImage(arg0: javax.imageio.ImageTypeSpecifier): boolean
                        public getDescription(arg0: java.util.Locale): string
                        public createWriterInstance(arg0: java.lang.Object): javax.imageio.ImageWriter
                        public static class: java.lang.Class<any>
                    }
                    class PNGMetadata extends javax.imageio.metadata.IIOMetadata implements java.lang.Cloneable {
                        public static nativeMetadataFormatName: string
                        protected static nativeMetadataFormatClassName: string
                        public static PHYS_UNIT_UNKNOWN: int
                        public static PHYS_UNIT_METER: int
                        public IHDR_present: boolean
                        public IHDR_width: int
                        public IHDR_height: int
                        public IHDR_bitDepth: int
                        public IHDR_colorType: int
                        public IHDR_compressionMethod: int
                        public IHDR_filterMethod: int
                        public IHDR_interlaceMethod: int
                        public PLTE_present: boolean
                        public PLTE_red: byte[]
                        public PLTE_green: byte[]
                        public PLTE_blue: byte[]
                        public PLTE_order: int[]
                        public bKGD_present: boolean
                        public bKGD_colorType: int
                        public bKGD_index: int
                        public bKGD_gray: int
                        public bKGD_red: int
                        public bKGD_green: int
                        public bKGD_blue: int
                        public cHRM_present: boolean
                        public cHRM_whitePointX: int
                        public cHRM_whitePointY: int
                        public cHRM_redX: int
                        public cHRM_redY: int
                        public cHRM_greenX: int
                        public cHRM_greenY: int
                        public cHRM_blueX: int
                        public cHRM_blueY: int
                        public gAMA_present: boolean
                        public gAMA_gamma: int
                        public hIST_present: boolean
                        public hIST_histogram: char[]
                        public iCCP_present: boolean
                        public iCCP_profileName: string
                        public iCCP_compressionMethod: int
                        public iCCP_compressedProfile: byte[]
                        public iTXt_keyword: java.util.ArrayList<java.lang.String>
                        public iTXt_compressionFlag: java.util.ArrayList<java.lang.Boolean>
                        public iTXt_compressionMethod: java.util.ArrayList<java.lang.Integer>
                        public iTXt_languageTag: java.util.ArrayList<java.lang.String>
                        public iTXt_translatedKeyword: java.util.ArrayList<java.lang.String>
                        public iTXt_text: java.util.ArrayList<java.lang.String>
                        public pHYs_present: boolean
                        public pHYs_pixelsPerUnitXAxis: int
                        public pHYs_pixelsPerUnitYAxis: int
                        public pHYs_unitSpecifier: int
                        public sBIT_present: boolean
                        public sBIT_colorType: int
                        public sBIT_grayBits: int
                        public sBIT_redBits: int
                        public sBIT_greenBits: int
                        public sBIT_blueBits: int
                        public sBIT_alphaBits: int
                        public sPLT_present: boolean
                        public sPLT_paletteName: string
                        public sPLT_sampleDepth: int
                        public sPLT_red: int[]
                        public sPLT_green: int[]
                        public sPLT_blue: int[]
                        public sPLT_alpha: int[]
                        public sPLT_frequency: int[]
                        public sRGB_present: boolean
                        public sRGB_renderingIntent: int
                        public tEXt_keyword: java.util.ArrayList<java.lang.String>
                        public tEXt_text: java.util.ArrayList<java.lang.String>
                        public tIME_present: boolean
                        public tIME_year: int
                        public tIME_month: int
                        public tIME_day: int
                        public tIME_hour: int
                        public tIME_minute: int
                        public tIME_second: int
                        public tRNS_present: boolean
                        public tRNS_colorType: int
                        public tRNS_alpha: byte[]
                        public tRNS_gray: int
                        public tRNS_red: int
                        public tRNS_green: int
                        public tRNS_blue: int
                        public zTXt_keyword: java.util.ArrayList<java.lang.String>
                        public zTXt_compressionMethod: java.util.ArrayList<java.lang.Integer>
                        public zTXt_text: java.util.ArrayList<java.lang.String>
                        public unknownChunkType: java.util.ArrayList<java.lang.String>
                        public unknownChunkData: java.util.ArrayList<byte[]>
                        public constructor()
                        public constructor(arg0: javax.imageio.metadata.IIOMetadata)
                        public initialize(arg0: javax.imageio.ImageTypeSpecifier, arg1: int): void
                        public isReadOnly(): boolean
                        public clone(): java.lang.Object
                        public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                        public getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardCompressionNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDataNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardDocumentNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardTextNode(): javax.imageio.metadata.IIOMetadataNode
                        public getStandardTransparencyNode(): javax.imageio.metadata.IIOMetadataNode
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class PNGMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public static class: java.lang.Class<any>
                    }
                    class PNGMetadataFormatResources extends java.util.ListResourceBundle {
                        public constructor()
                        protected getContents(): java.lang.Object[][]
                        public static class: java.lang.Class<any>
                    }
                    class RowFilter {
                        public constructor()
                        protected static subFilter(arg0: byte[], arg1: byte[], arg2: int, arg3: int): int
                        protected static upFilter(arg0: byte[], arg1: byte[], arg2: byte[], arg3: int, arg4: int): int
                        protected paethPredictor(arg0: int, arg1: int, arg2: int): int
                        public filterRow(arg0: int, arg1: byte[], arg2: byte[], arg3: byte[][], arg4: int, arg5: int): int
                        public static class: java.lang.Class<any>
                    }
                }
                namespace wbmp {
                    class WBMPImageReader extends javax.imageio.ImageReader {
                        public constructor(arg0: javax.imageio.spi.ImageReaderSpi)
                        public setInput(arg0: java.lang.Object, arg1: boolean, arg2: boolean): void
                        public getNumImages(arg0: boolean): int
                        public getWidth(arg0: int): int
                        public getHeight(arg0: int): int
                        public isRandomAccessEasy(arg0: int): boolean
                        public readHeader(): void
                        public getImageTypes(arg0: int): java.util.Iterator
                        public getDefaultReadParam(): javax.imageio.ImageReadParam
                        public getImageMetadata(arg0: int): javax.imageio.metadata.IIOMetadata
                        public getStreamMetadata(): javax.imageio.metadata.IIOMetadata
                        public read(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.BufferedImage
                        public canReadRaster(): boolean
                        public readRaster(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.Raster
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class WBMPImageReaderSpi extends javax.imageio.spi.ImageReaderSpi {
                        public constructor()
                        public onRegistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                        public getDescription(arg0: java.util.Locale): string
                        public canDecodeInput(arg0: java.lang.Object): boolean
                        public createReaderInstance(arg0: java.lang.Object): javax.imageio.ImageReader
                        public static class: java.lang.Class<any>
                    }
                    class WBMPImageWriter extends javax.imageio.ImageWriter {
                        public constructor(arg0: javax.imageio.spi.ImageWriterSpi)
                        public setOutput(arg0: java.lang.Object): void
                        public getDefaultStreamMetadata(arg0: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public getDefaultImageMetadata(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
                        public canWriteRasters(): boolean
                        public write(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
                        public reset(): void
                        public static class: java.lang.Class<any>
                    }
                    class WBMPImageWriterSpi extends javax.imageio.spi.ImageWriterSpi {
                        public constructor()
                        public getDescription(arg0: java.util.Locale): string
                        public onRegistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                        public canEncodeImage(arg0: javax.imageio.ImageTypeSpecifier): boolean
                        public createWriterInstance(arg0: java.lang.Object): javax.imageio.ImageWriter
                        public static class: java.lang.Class<any>
                    }
                    class WBMPMetadata extends javax.imageio.metadata.IIOMetadata {
                        public wbmpType: int
                        public width: int
                        public height: int
                        public constructor()
                        public isReadOnly(): boolean
                        public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                        public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                        public reset(): void
                        protected getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                        protected getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                        public static class: java.lang.Class<any>
                    }
                    class WBMPMetadataFormat extends javax.imageio.metadata.IIOMetadataFormatImpl {
                        public canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                        public static getInstance(): javax.imageio.metadata.IIOMetadataFormat
                        public static class: java.lang.Class<any>
                    }
                }
            }
            namespace spi {
                class FileImageInputStreamSpi extends javax.imageio.spi.ImageInputStreamSpi {
                    public constructor()
                    public getDescription(arg0: java.util.Locale): string
                    public createInputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageInputStream
                    public static class: java.lang.Class<any>
                }
                class FileImageOutputStreamSpi extends javax.imageio.spi.ImageOutputStreamSpi {
                    public constructor()
                    public getDescription(arg0: java.util.Locale): string
                    public createOutputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageOutputStream
                    public static class: java.lang.Class<any>
                }
                class InputStreamImageInputStreamSpi extends javax.imageio.spi.ImageInputStreamSpi {
                    public constructor()
                    public getDescription(arg0: java.util.Locale): string
                    public canUseCacheFile(): boolean
                    public needsCacheFile(): boolean
                    public createInputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageInputStream
                    public static class: java.lang.Class<any>
                }
                class OutputStreamImageOutputStreamSpi extends javax.imageio.spi.ImageOutputStreamSpi {
                    public constructor()
                    public getDescription(arg0: java.util.Locale): string
                    public canUseCacheFile(): boolean
                    public needsCacheFile(): boolean
                    public createOutputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageOutputStream
                    public static class: java.lang.Class<any>
                }
                class RAFImageInputStreamSpi extends javax.imageio.spi.ImageInputStreamSpi {
                    public constructor()
                    public getDescription(arg0: java.util.Locale): string
                    public createInputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageInputStream
                    public static class: java.lang.Class<any>
                }
                class RAFImageOutputStreamSpi extends javax.imageio.spi.ImageOutputStreamSpi {
                    public constructor()
                    public getDescription(arg0: java.util.Locale): string
                    public createOutputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageOutputStream
                    public static class: java.lang.Class<any>
                }
            }
            namespace stream {
                class CloseableDisposerRecord implements sun.java2d.DisposerRecord {
                    public constructor(arg0: java.io.Closeable)
                    public dispose(): void
                    public static class: java.lang.Class<any>
                }
                class CloseableDisposerRecord$$Lambda implements sun.java2d.DisposerRecord {
                    public constructor(arg0: java.io.Closeable)
                }
                class StreamCloser {
                    public constructor()
                    public static addToQueue(arg0: com.sun.imageio.stream.StreamCloser$CloseAction): void
                    public static removeFromQueue(arg0: com.sun.imageio.stream.StreamCloser$CloseAction): void
                    public static createCloseAction(arg0: javax.imageio.stream.ImageInputStream): com.sun.imageio.stream.StreamCloser$CloseAction
                    public static class: java.lang.Class<any>
                }
                class StreamFinalizer {
                    public constructor(arg0: javax.imageio.stream.ImageInputStream)
                    protected finalize(): void
                    public static class: java.lang.Class<any>
                }
            }
        }
        namespace java {
            namespace swing {
                namespace plaf {
                    namespace gtk {
                        class GTKColorChooserPanel extends javax.swing.colorchooser.AbstractColorChooserPanel implements javax.swing.event.ChangeListener {
                            public getDisplayName(): string
                            public getMnemonic(): int
                            public getDisplayedMnemonicIndex(): int
                            public getSmallDisplayIcon(): javax.swing.Icon
                            public getLargeDisplayIcon(): javax.swing.Icon
                            public uninstallChooserPanel(arg0: javax.swing.JColorChooser | javax.swing.JColorChooser$$Lambda): void
                            protected buildChooser(): void
                            public updateChooser(): void
                            public getColor(): java.awt.Color
                            public stateChanged(arg0: javax.swing.event.ChangeEvent): void
                            public static class: java.lang.Class<any>
                        }
                        class GTKColorType extends javax.swing.plaf.synth.ColorType {
                            public static LIGHT: javax.swing.plaf.synth.ColorType
                            public static DARK: javax.swing.plaf.synth.ColorType
                            public static MID: javax.swing.plaf.synth.ColorType
                            public static BLACK: javax.swing.plaf.synth.ColorType
                            public static WHITE: javax.swing.plaf.synth.ColorType
                            public static MAX_COUNT: int
                            protected constructor(arg0: java.lang.String | string)
                            public static class: java.lang.Class<any>
                        }
                        interface GTKConstants {
                            UNDEFINED: int
                        }
                        class GTKEngine {
                            public paintArrow(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: com.sun.java.swing.plaf.gtk.GTKConstants$ArrowType, arg6: java.lang.String | string, arg7: int, arg8: int, arg9: int, arg10: int): void
                            public paintBox(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int): void
                            public paintBoxGap(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int, arg10: com.sun.java.swing.plaf.gtk.GTKConstants$PositionType, arg11: int, arg12: int): void
                            public paintCheck(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: java.lang.String | string, arg4: int, arg5: int, arg6: int, arg7: int): void
                            public paintExpander(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ExpanderStyle, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int): void
                            public paintExtension(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int, arg10: com.sun.java.swing.plaf.gtk.GTKConstants$PositionType, arg11: int): void
                            public paintFlatBox(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int, arg10: javax.swing.plaf.synth.ColorType): void
                            public paintFocus(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: java.lang.String | string, arg5: int, arg6: int, arg7: int, arg8: int): void
                            public paintHandle(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int, arg10: com.sun.java.swing.plaf.gtk.GTKConstants$Orientation): void
                            public paintHline(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: java.lang.String | string, arg5: int, arg6: int, arg7: int, arg8: int): void
                            public paintOption(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: java.lang.String | string, arg4: int, arg5: int, arg6: int, arg7: int): void
                            public paintShadow(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int): void
                            public paintSlider(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: com.sun.java.swing.plaf.gtk.GTKConstants$ShadowType, arg5: java.lang.String | string, arg6: int, arg7: int, arg8: int, arg9: int, arg10: com.sun.java.swing.plaf.gtk.GTKConstants$Orientation): void
                            public paintVline(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: java.lang.String | string, arg5: int, arg6: int, arg7: int, arg8: int): void
                            public paintBackground(arg0: java.awt.Graphics, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.plaf.synth.Region, arg3: int, arg4: java.awt.Color, arg5: int, arg6: int, arg7: int, arg8: int): void
                            public paintCachedImage(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, ...arg5: java.lang.Object[]): boolean
                            public startPainting(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, ...arg5: java.lang.Object[]): void
                            public finishPainting(): void
                            public finishPainting(arg0: boolean): void
                            public themeChanged(): void
                            public getSetting(arg0: com.sun.java.swing.plaf.gtk.GTKEngine$Settings): java.lang.Object
                            public static class: java.lang.Class<any>
                        }
                        class GTKFileChooserUI extends sun.swing.plaf.synth.SynthFileChooserUI {
                            public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                            protected createActionMap(): javax.swing.ActionMap
                            public getFileName(): string
                            public setFileName(arg0: java.lang.String | string): void
                            public setDirectoryName(arg0: java.lang.String | string): void
                            public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
                            public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            public getAccessoryPanel(): javax.swing.JPanel
                            public getFileView(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileView
                            protected doSelectedFileChanged(arg0: java.beans.PropertyChangeEvent): void
                            protected doDirectoryChanged(arg0: java.beans.PropertyChangeEvent): void
                            protected doAccessoryChanged(arg0: java.beans.PropertyChangeEvent): void
                            protected doFileSelectionModeChanged(arg0: java.beans.PropertyChangeEvent): void
                            protected doMultiSelectionChanged(arg0: java.beans.PropertyChangeEvent): void
                            protected doControlButtonsChanged(arg0: java.beans.PropertyChangeEvent): void
                            protected doAncestorChanged(arg0: java.beans.PropertyChangeEvent): void
                            public createListSelectionListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.event.ListSelectionListener
                            protected createDoubleClickListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: javax.swing.JList | javax.swing.JList$$Lambda): java.awt.event.MouseListener
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public installUI(arg0: javax.swing.JComponent): void
                            public uninstallUI(arg0: javax.swing.JComponent): void
                            public installComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected installListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected uninstallListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected installDefaults(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected installIcons(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected installStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected uninstallStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected createFilesList(): javax.swing.JScrollPane
                            protected createDirectoryList(): javax.swing.JScrollPane
                            protected createModel(): void
                            public getModel(): javax.swing.plaf.basic.BasicDirectoryModel
                            public getApproveSelectionAction(): javax.swing.Action
                            public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected align(arg0: javax.swing.JComponent): void
                            public getNewFolderAction(): javax.swing.Action
                            protected createDirectoryComboBoxModel(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): com.sun.java.swing.plaf.gtk.GTKFileChooserUI$DirectoryComboBoxModel
                            protected createFilterComboBoxRenderer(): com.sun.java.swing.plaf.gtk.GTKFileChooserUI$FilterComboBoxRenderer
                            protected createFilterComboBoxModel(): com.sun.java.swing.plaf.gtk.GTKFileChooserUI$FilterComboBoxModel
                            public static class: java.lang.Class<any>
                        }
                        class GTKGraphicsUtils extends javax.swing.plaf.synth.SynthGraphicsUtils {
                            public paintText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: int): void
                            public paintText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: java.awt.Rectangle, arg4: int): void
                            public static class: java.lang.Class<any>
                        }
                        class GTKIconFactory {
                            public static getAscendingSortIcon(): javax.swing.Icon
                            public static getDescendingSortIcon(): javax.swing.Icon
                            public static getTreeExpandedIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getTreeCollapsedIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getRadioButtonIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getCheckBoxIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getMenuArrowIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getCheckBoxMenuItemCheckIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getRadioButtonMenuItemCheckIcon(): sun.swing.plaf.synth.SynthIcon
                            public static getToolBarHandleIcon(): sun.swing.plaf.synth.SynthIcon
                            public static class: java.lang.Class<any>
                        }
                        class GTKLookAndFeel extends javax.swing.plaf.synth.SynthLookAndFeel {
                            public constructor()
                            public getDefaults(): javax.swing.UIDefaults
                            protected initComponentDefaults(arg0: javax.swing.UIDefaults): void
                            protected initSystemColorDefaults(arg0: javax.swing.UIDefaults): void
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public initialize(): void
                            public isSupportedLookAndFeel(): boolean
                            public isNativeLookAndFeel(): boolean
                            public getDescription(): string
                            public getName(): string
                            public getID(): string
                            protected loadSystemColors(arg0: javax.swing.UIDefaults, arg1: java.lang.String[], arg2: boolean): void
                            public shouldUpdateStyleOnAncestorChanged(): boolean
                            public getLayoutStyle(): javax.swing.LayoutStyle
                            public static class: java.lang.Class<any>
                        }
                        class GTKPainter extends javax.swing.plaf.synth.SynthPainter {
                            public paintCheckBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintCheckBoxMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintFormattedTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintPasswordFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintRadioButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintRadioButtonMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintLabelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintInternalFrameBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintDesktopPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintDesktopIconBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintArrowButtonForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintArrowButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintListBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintMenuBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintPopupMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintProgressBarForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintViewportBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintSliderThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintSpinnerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintSplitPaneDragDivider(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintTabbedPaneContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintTextPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintEditorPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTextAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintRootPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintToggleButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintScrollBarThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintToolTipBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTreeCellBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTreeCellFocus(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTreeBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintViewportBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                            public paintTreeExpandedIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintTreeCollapsedIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintCheckBoxIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintRadioButtonIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintMenuArrowIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: com.sun.java.swing.plaf.gtk.GTKConstants$ArrowType): void
                            public paintCheckBoxMenuItemCheckIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintRadioButtonMenuItemCheckIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintToolBarHandleIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: com.sun.java.swing.plaf.gtk.GTKConstants$Orientation): void
                            public paintAscendingSortIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public paintDescendingSortIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public static class: java.lang.Class<any>
                        }
                        class GTKRegion extends javax.swing.plaf.synth.Region {
                            public static HANDLE_BOX: javax.swing.plaf.synth.Region
                            protected constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: boolean)
                            public static class: java.lang.Class<any>
                        }
                        class GTKStyle extends javax.swing.plaf.synth.SynthStyle implements com.sun.java.swing.plaf.gtk.GTKConstants {
                            public installDefaults(arg0: javax.swing.plaf.synth.SynthContext): void
                            public getGraphicsUtils(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthGraphicsUtils
                            public getPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthPainter
                            protected getColorForState(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                            public getColor(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                            protected getFontForState(arg0: javax.swing.plaf.synth.SynthContext): java.awt.Font
                            public getInsets(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Insets): java.awt.Insets
                            public isOpaque(arg0: javax.swing.plaf.synth.SynthContext): boolean
                            public get(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object): java.lang.Object
                            public static class: java.lang.Class<any>
                        }
                        class GTKStyleFactory extends javax.swing.plaf.synth.SynthStyleFactory {
                            public getStyle(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region): javax.swing.plaf.synth.SynthStyle
                            public static class: java.lang.Class<any>
                        }
                        class Metacity implements javax.swing.plaf.synth.SynthConstants {
                            protected constructor(arg0: java.lang.String | string)
                            public static getTitlePaneLayout(): java.awt.LayoutManager
                            protected drawButton(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.awt.Graphics, arg4: int, arg5: int, arg6: javax.swing.JInternalFrame): void
                            protected tileImage(arg0: java.awt.Graphics, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: float[]): void
                            protected getImage(arg0: java.lang.String | string, arg1: java.awt.Color): java.awt.Image
                            protected getImage(arg0: java.lang.String | string): java.awt.Image
                            protected static findChild(arg0: javax.swing.JComponent, arg1: java.lang.String | string): javax.swing.JComponent
                            protected getFrameGeometry(): java.util.Map
                            protected setFrameGeometry(arg0: javax.swing.JComponent, arg1: java.util.Map): void
                            protected getInt(arg0: java.lang.String | string): int
                            protected getBoolean(arg0: java.lang.String | string, arg1: boolean): boolean
                            protected drawArc(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawLine(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawRectangle(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawTile(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics, arg2: javax.swing.JInternalFrame): void
                            protected drawTint(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawTitle(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics, arg2: javax.swing.JInternalFrame): void
                            protected calculateButtonSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected calculateTitleArea(arg0: javax.swing.JInternalFrame): java.awt.Rectangle
                            protected calculateTitleTextWidth(arg0: java.awt.Graphics, arg1: javax.swing.JInternalFrame): int
                            protected setClip(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawGTKArrow(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawGTKBox(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawGTKVLine(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawGradient(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawImage(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics): void
                            protected drawIcon(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics, arg2: javax.swing.JInternalFrame): void
                            protected drawInclude(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics, arg2: javax.swing.JInternalFrame): void
                            protected draw(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics, arg2: javax.swing.JInternalFrame): void
                            protected drawPiece(arg0: org.w3c.dom.Node, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: int, arg6: int, arg7: javax.swing.JInternalFrame): void
                            protected static logError(arg0: java.lang.String | string, arg1: java.lang.Exception): void
                            protected static logError(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                            protected static getXMLDoc(arg0: java.net.URL): org.w3c.dom.Document
                            protected getNodesByName(arg0: org.w3c.dom.Node, arg1: java.lang.String | string): org.w3c.dom.Node[]
                            protected getNode(arg0: java.lang.String | string, arg1: java.lang.String[]): org.w3c.dom.Node
                            protected getNode(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: java.lang.String[]): org.w3c.dom.Node
                            protected getNode(arg0: org.w3c.dom.NodeList, arg1: java.lang.String | string, arg2: java.lang.String[]): org.w3c.dom.Node
                            protected getStringAttr(arg0: org.w3c.dom.Node, arg1: java.lang.String | string): string
                            protected getStringAttr(arg0: org.w3c.dom.NamedNodeMap, arg1: java.lang.String | string): string
                            protected getBooleanAttr(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: boolean): boolean
                            protected getIntAttr(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: int): int
                            protected getFloatAttr(arg0: org.w3c.dom.Node, arg1: java.lang.String | string, arg2: float): float
                            protected parseColor(arg0: java.lang.String | string): java.awt.Color
                            protected parseColor2(arg0: java.lang.String | string): java.awt.Color
                            public static class: java.lang.Class<any>
                        }
                        class PangoFonts {
                            public static CHARS_DIGITS: string
                            public static class: java.lang.Class<any>
                        }
                        class XColors {
                            public static class: java.lang.Class<any>
                        }
                    }
                    namespace motif {
                        class MotifBorders {
                            public constructor()
                            public static drawBezel(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: boolean, arg6: boolean, arg7: java.awt.Color, arg8: java.awt.Color, arg9: java.awt.Color, arg10: java.awt.Color): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifButtonListener extends javax.swing.plaf.basic.BasicButtonListener {
                            public constructor(arg0: javax.swing.AbstractButton)
                            protected checkOpacity(arg0: javax.swing.AbstractButton): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifButtonUI extends javax.swing.plaf.basic.BasicButtonUI {
                            protected selectColor: java.awt.Color
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createButtonListener(arg0: javax.swing.AbstractButton): javax.swing.plaf.basic.BasicButtonListener
                            public installDefaults(arg0: javax.swing.AbstractButton): void
                            protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                            protected getSelectColor(): java.awt.Color
                            public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                            protected paintIcon(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                            protected paintFocus(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle, arg3: java.awt.Rectangle, arg4: java.awt.Rectangle): void
                            protected paintButtonPressed(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton): void
                            protected fillContentArea(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Color): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifCheckBoxMenuItemUI extends javax.swing.plaf.basic.BasicCheckBoxMenuItemUI {
                            protected changeListener: javax.swing.event.ChangeListener
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected installListeners(): void
                            protected uninstallListeners(): void
                            protected createChangeListener(arg0: javax.swing.JComponent): javax.swing.event.ChangeListener
                            protected createMouseInputListener(arg0: javax.swing.JComponent): javax.swing.event.MouseInputListener
                            public static class: java.lang.Class<any>
                        }
                        class MotifCheckBoxUI extends com.sun.java.swing.plaf.motif.MotifRadioButtonUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public getPropertyPrefix(): string
                            public installDefaults(arg0: javax.swing.AbstractButton): void
                            protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifComboBoxUI extends javax.swing.plaf.basic.BasicComboBoxUI implements java.io.Serializable {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public installUI(arg0: javax.swing.JComponent): void
                            public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected createPopup(): javax.swing.plaf.basic.ComboPopup
                            protected installComponents(): void
                            protected uninstallComponents(): void
                            public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                            public paintCurrentValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: boolean): void
                            protected rectangleForArrowIcon(): java.awt.Rectangle
                            protected rectangleForCurrentValue(): java.awt.Rectangle
                            public iconAreaWidth(): int
                            public configureEditor(): void
                            protected createLayoutManager(): java.awt.LayoutManager
                            protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                            public static class: java.lang.Class<any>
                        }
                        class MotifDesktopIconUI extends javax.swing.plaf.basic.BasicDesktopIconUI {
                            protected desktopIconActionListener: com.sun.java.swing.plaf.motif.MotifDesktopIconUI$DesktopIconActionListener
                            protected desktopIconMouseListener: com.sun.java.swing.plaf.motif.MotifDesktopIconUI$DesktopIconMouseListener
                            protected defaultIcon: javax.swing.Icon
                            protected iconButton: com.sun.java.swing.plaf.motif.MotifDesktopIconUI$IconButton
                            protected iconLabel: com.sun.java.swing.plaf.motif.MotifDesktopIconUI$IconLabel
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public constructor()
                            protected installDefaults(): void
                            protected installComponents(): void
                            protected uninstallComponents(): void
                            protected installListeners(): void
                            protected showSystemMenu(): void
                            protected hideSystemMenu(): void
                            protected createIconLabel(arg0: javax.swing.JInternalFrame): com.sun.java.swing.plaf.motif.MotifDesktopIconUI$IconLabel
                            protected createIconButton(arg0: javax.swing.Icon): com.sun.java.swing.plaf.motif.MotifDesktopIconUI$IconButton
                            protected createDesktopIconActionListener(): com.sun.java.swing.plaf.motif.MotifDesktopIconUI$DesktopIconActionListener
                            protected createDesktopIconMouseListener(): com.sun.java.swing.plaf.motif.MotifDesktopIconUI$DesktopIconMouseListener
                            protected uninstallDefaults(): void
                            protected uninstallListeners(): void
                            public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getDefaultIcon(): javax.swing.Icon
                            public setDefaultIcon(arg0: javax.swing.Icon): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifDesktopPaneUI extends javax.swing.plaf.basic.BasicDesktopPaneUI {
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public constructor()
                            protected installDesktopManager(): void
                            public getInsets(arg0: javax.swing.JComponent): java.awt.Insets
                            public static class: java.lang.Class<any>
                        }
                        class MotifEditorPaneUI extends javax.swing.plaf.basic.BasicEditorPaneUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createCaret(): javax.swing.text.Caret
                            public static class: java.lang.Class<any>
                        }
                        class MotifFileChooserUI extends javax.swing.plaf.basic.BasicFileChooserUI {
                            protected directoryList: javax.swing.JList<java.io.File>
                            protected fileList: javax.swing.JList<java.io.File>
                            protected pathField: javax.swing.JTextField
                            protected filterComboBox: javax.swing.JComboBox<javax.swing.filechooser.FileFilter>
                            protected filenameTextField: javax.swing.JTextField
                            protected approveButton: javax.swing.JButton
                            public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                            public getFileName(): string
                            public setFileName(arg0: java.lang.String | string): void
                            public getDirectoryName(): string
                            public setDirectoryName(arg0: java.lang.String | string): void
                            public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
                            public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            public createPropertyChangeListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): java.beans.PropertyChangeListener
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public installUI(arg0: javax.swing.JComponent): void
                            public uninstallUI(arg0: javax.swing.JComponent): void
                            public installComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected getBottomPanel(): javax.swing.JPanel
                            public uninstallComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected installStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected installIcons(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected uninstallIcons(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                            protected createFilesList(): javax.swing.JScrollPane
                            protected createDirectoryList(): javax.swing.JScrollPane
                            public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected align(arg0: javax.swing.JComponent): void
                            protected createFilterComboBoxModel(): com.sun.java.swing.plaf.motif.MotifFileChooserUI$FilterComboBoxModel
                            protected createFilterComboBoxRenderer(): com.sun.java.swing.plaf.motif.MotifFileChooserUI$FilterComboBoxRenderer
                            protected getApproveButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                            public static class: java.lang.Class<any>
                        }
                        class MotifGraphicsUtils implements javax.swing.SwingConstants {
                            public constructor()
                            public static drawGroove(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.Color): void
                            public static drawStringInRect(arg0: java.awt.Graphics, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            public static paintMenuItem(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: javax.swing.Icon, arg3: javax.swing.Icon, arg4: java.awt.Color, arg5: java.awt.Color, arg6: int): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifIconFactory implements java.io.Serializable {
                            public constructor()
                            public static getMenuItemCheckIcon(): javax.swing.Icon
                            public static getMenuItemArrowIcon(): javax.swing.Icon
                            public static getMenuArrowIcon(): javax.swing.Icon
                            public static getCheckBoxIcon(): javax.swing.Icon
                            public static getRadioButtonIcon(): javax.swing.Icon
                            public static class: java.lang.Class<any>
                        }
                        class MotifInternalFrameTitlePane extends javax.swing.plaf.basic.BasicInternalFrameTitlePane implements java.awt.LayoutManager , java.awt.event.ActionListener , java.beans.PropertyChangeListener {
                            public static BUTTON_SIZE: int
                            public constructor(arg0: javax.swing.JInternalFrame)
                            protected installDefaults(): void
                            protected uninstallListeners(): void
                            protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                            protected createLayout(): java.awt.LayoutManager
                            protected assembleSystemMenu(): void
                            protected createButtons(): void
                            protected addSubComponents(): void
                            public paintComponent(arg0: java.awt.Graphics): void
                            public actionPerformed(arg0: java.awt.event.ActionEvent): void
                            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
                            public removeLayoutComponent(arg0: java.awt.Component): void
                            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                            public layoutContainer(arg0: java.awt.Container): void
                            protected showSystemMenu(): void
                            protected hideSystemMenu(): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifInternalFrameUI extends javax.swing.plaf.basic.BasicInternalFrameUI {
                            protected closeMenuKey: javax.swing.KeyStroke
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public constructor(arg0: javax.swing.JInternalFrame)
                            public installUI(arg0: javax.swing.JComponent): void
                            protected installDefaults(): void
                            protected installKeyboardActions(): void
                            protected uninstallDefaults(): void
                            public createNorthPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                            public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected uninstallKeyboardActions(): void
                            protected setupMenuOpenKey(): void
                            protected setupMenuCloseKey(): void
                            protected activateFrame(arg0: javax.swing.JInternalFrame): void
                            protected deactivateFrame(arg0: javax.swing.JInternalFrame): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifLabelUI extends javax.swing.plaf.basic.BasicLabelUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public static class: java.lang.Class<any>
                        }
                        class MotifLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel {
                            public constructor()
                            public getName(): string
                            public getID(): string
                            public getDescription(): string
                            public isNativeLookAndFeel(): boolean
                            public isSupportedLookAndFeel(): boolean
                            protected initSystemColorDefaults(arg0: javax.swing.UIDefaults): void
                            protected initClassDefaults(arg0: javax.swing.UIDefaults): void
                            protected initComponentDefaults(arg0: javax.swing.UIDefaults): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifMenuBarUI extends javax.swing.plaf.basic.BasicMenuBarUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public static class: java.lang.Class<any>
                        }
                        class MotifMenuItemUI extends javax.swing.plaf.basic.BasicMenuItemUI {
                            protected changeListener: javax.swing.event.ChangeListener
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected installListeners(): void
                            protected uninstallListeners(): void
                            protected createChangeListener(arg0: javax.swing.JComponent): javax.swing.event.ChangeListener
                            protected createMouseInputListener(arg0: javax.swing.JComponent): javax.swing.event.MouseInputListener
                            public static class: java.lang.Class<any>
                        }
                        class MotifMenuMouseListener extends java.awt.event.MouseAdapter {
                            public mousePressed(arg0: java.awt.event.MouseEvent): void
                            public mouseReleased(arg0: java.awt.event.MouseEvent): void
                            public mouseEntered(arg0: java.awt.event.MouseEvent): void
                            public mouseExited(arg0: java.awt.event.MouseEvent): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifMenuMouseMotionListener implements java.awt.event.MouseMotionListener {
                            public mouseDragged(arg0: java.awt.event.MouseEvent): void
                            public mouseMoved(arg0: java.awt.event.MouseEvent): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifMenuUI extends javax.swing.plaf.basic.BasicMenuUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createChangeListener(arg0: javax.swing.JComponent): javax.swing.event.ChangeListener
                            protected createMouseInputListener(arg0: javax.swing.JComponent): javax.swing.event.MouseInputListener
                            public static class: java.lang.Class<any>
                        }
                        class MotifOptionPaneUI extends javax.swing.plaf.basic.BasicOptionPaneUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createButtonArea(): java.awt.Container
                            public getMinimumOptionPaneSize(): java.awt.Dimension
                            protected createSeparator(): java.awt.Container
                            protected addIcon(arg0: java.awt.Container): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifPasswordFieldUI extends javax.swing.plaf.basic.BasicPasswordFieldUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createCaret(): javax.swing.text.Caret
                            public static class: java.lang.Class<any>
                        }
                        class MotifPopupMenuSeparatorUI extends com.sun.java.swing.plaf.motif.MotifSeparatorUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                            public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            public static class: java.lang.Class<any>
                        }
                        class MotifPopupMenuUI extends javax.swing.plaf.basic.BasicPopupMenuUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected createChangeListener(arg0: javax.swing.JPopupMenu): javax.swing.event.ChangeListener
                            public isPopupTrigger(arg0: java.awt.event.MouseEvent): boolean
                            public static class: java.lang.Class<any>
                        }
                        class MotifProgressBarUI extends javax.swing.plaf.basic.BasicProgressBarUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public static class: java.lang.Class<any>
                        }
                        class MotifRadioButtonMenuItemUI extends javax.swing.plaf.basic.BasicRadioButtonMenuItemUI {
                            protected changeListener: javax.swing.event.ChangeListener
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected installListeners(): void
                            protected uninstallListeners(): void
                            protected createChangeListener(arg0: javax.swing.JComponent): javax.swing.event.ChangeListener
                            protected createMouseInputListener(arg0: javax.swing.JComponent): javax.swing.event.MouseInputListener
                            public static class: java.lang.Class<any>
                        }
                        class MotifRadioButtonUI extends javax.swing.plaf.basic.BasicRadioButtonUI {
                            protected focusColor: java.awt.Color
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public installDefaults(arg0: javax.swing.AbstractButton): void
                            protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                            protected getFocusColor(): java.awt.Color
                            protected paintFocus(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Dimension): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifScrollBarButton extends javax.swing.plaf.basic.BasicArrowButton {
                            public constructor(arg0: int)
                            public getPreferredSize(): java.awt.Dimension
                            public getMinimumSize(): java.awt.Dimension
                            public getMaximumSize(): java.awt.Dimension
                            public isFocusTraversable(): boolean
                            public paint(arg0: java.awt.Graphics): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifScrollBarUI extends javax.swing.plaf.basic.BasicScrollBarUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                            protected createDecreaseButton(arg0: int): javax.swing.JButton
                            protected createIncreaseButton(arg0: int): javax.swing.JButton
                            public paintTrack(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                            public paintThumb(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifScrollPaneUI extends javax.swing.plaf.basic.BasicScrollPaneUI {
                            public constructor()
                            protected installListeners(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                            protected uninstallListeners(arg0: javax.swing.JComponent): void
                            protected installDefaults(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                            protected uninstallDefaults(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public static class: java.lang.Class<any>
                        }
                        class MotifSeparatorUI extends javax.swing.plaf.basic.BasicSeparatorUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public static class: java.lang.Class<any>
                        }
                        class MotifSliderUI extends javax.swing.plaf.basic.BasicSliderUI {
                            public constructor(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda)
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public getPreferredHorizontalSize(): java.awt.Dimension
                            public getPreferredVerticalSize(): java.awt.Dimension
                            public getMinimumHorizontalSize(): java.awt.Dimension
                            public getMinimumVerticalSize(): java.awt.Dimension
                            protected getThumbSize(): java.awt.Dimension
                            public paintFocus(arg0: java.awt.Graphics): void
                            public paintTrack(arg0: java.awt.Graphics): void
                            public paintThumb(arg0: java.awt.Graphics): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifSplitPaneDivider extends javax.swing.plaf.basic.BasicSplitPaneDivider {
                            public static minimumThumbSize: int
                            public static defaultDividerSize: int
                            protected static pad: int
                            protected hThumbWidth: int
                            protected hThumbHeight: int
                            protected vThumbWidth: int
                            protected vThumbHeight: int
                            protected highlightColor: java.awt.Color
                            protected shadowColor: java.awt.Color
                            protected focusedColor: java.awt.Color
                            public constructor(arg0: javax.swing.plaf.basic.BasicSplitPaneUI)
                            public setDividerSize(arg0: int): void
                            public paint(arg0: java.awt.Graphics): void
                            public getMinimumSize(): java.awt.Dimension
                            public setBasicSplitPaneUI(arg0: javax.swing.plaf.basic.BasicSplitPaneUI): void
                            public static class: java.lang.Class<any>
                        }
                        class MotifSplitPaneUI extends javax.swing.plaf.basic.BasicSplitPaneUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public createDefaultDivider(): javax.swing.plaf.basic.BasicSplitPaneDivider
                            public static class: java.lang.Class<any>
                        }
                        class MotifTabbedPaneUI extends javax.swing.plaf.basic.BasicTabbedPaneUI {
                            protected unselectedTabBackground: java.awt.Color
                            protected unselectedTabForeground: java.awt.Color
                            protected unselectedTabShadow: java.awt.Color
                            protected unselectedTabHighlight: java.awt.Color
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected installDefaults(): void
                            protected uninstallDefaults(): void
                            protected paintContentBorderTopEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            protected paintContentBorderBottomEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            protected paintContentBorderRightEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                            protected paintTabBackground(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
                            protected paintTabBorder(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
                            protected paintFocusIndicator(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Rectangle[], arg3: int, arg4: java.awt.Rectangle, arg5: java.awt.Rectangle, arg6: boolean): void
                            protected getTabRunIndent(arg0: int, arg1: int): int
                            protected getTabRunOverlay(arg0: int): int
                            public static class: java.lang.Class<any>
                        }
                        class MotifTextAreaUI extends javax.swing.plaf.basic.BasicTextAreaUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createCaret(): javax.swing.text.Caret
                            public static class: java.lang.Class<any>
                        }
                        class MotifTextFieldUI extends javax.swing.plaf.basic.BasicTextFieldUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createCaret(): javax.swing.text.Caret
                            public static class: java.lang.Class<any>
                        }
                        class MotifTextPaneUI extends javax.swing.plaf.basic.BasicTextPaneUI {
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            protected createCaret(): javax.swing.text.Caret
                            public static class: java.lang.Class<any>
                        }
                        class MotifTextUI {
                            public constructor()
                            public static createCaret(): javax.swing.text.Caret
                            public static class: java.lang.Class<any>
                        }
                        class MotifToggleButtonUI extends javax.swing.plaf.basic.BasicToggleButtonUI {
                            protected selectColor: java.awt.Color
                            public constructor()
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public installDefaults(arg0: javax.swing.AbstractButton): void
                            protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                            protected getSelectColor(): java.awt.Color
                            protected paintButtonPressed(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton): void
                            public getInsets(arg0: javax.swing.JComponent): java.awt.Insets
                            public static class: java.lang.Class<any>
                        }
                        class MotifTreeCellRenderer extends javax.swing.tree.DefaultTreeCellRenderer {
                            public constructor()
                            public static loadLeafIcon(): javax.swing.Icon
                            public static class: java.lang.Class<any>
                        }
                        class MotifTreeUI extends javax.swing.plaf.basic.BasicTreeUI {
                            public constructor()
                            public installUI(arg0: javax.swing.JComponent): void
                            protected paintVerticalLine(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: int): void
                            protected paintHorizontalLine(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: int): void
                            public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                            public createDefaultCellRenderer(): javax.swing.tree.TreeCellRenderer
                            public static class: java.lang.Class<any>
                        }
                    }
                }
                class SwingUtilities3 {
                    public constructor()
                    public static setDelegateRepaintManager(arg0: javax.swing.JComponent, arg1: javax.swing.RepaintManager): void
                    public static setVsyncRequested(arg0: java.awt.Container, arg1: boolean): void
                    public static isVsyncRequested(arg0: java.awt.Container): boolean
                    public static getDelegateRepaintManager(arg0: java.awt.Component): javax.swing.RepaintManager
                    public static setEventQueueDelegate(arg0: java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>): void
                    public static class: java.lang.Class<any>
                }
            }
        }
        namespace media {
            namespace sound {
                abstract class AbstractDataLine extends com.sun.media.sound.AbstractLine implements javax.sound.sampled.DataLine {
                    protected lock: java.lang.Object
                    protected format: javax.sound.sampled.AudioFormat
                    protected bufferSize: int
                    protected running: boolean
                    protected constructor(arg0: javax.sound.sampled.DataLine$Info, arg1: com.sun.media.sound.AbstractMixer, arg2: javax.sound.sampled.Control[])
                    protected constructor(arg0: javax.sound.sampled.DataLine$Info, arg1: com.sun.media.sound.AbstractMixer, arg2: javax.sound.sampled.Control[], arg3: javax.sound.sampled.AudioFormat, arg4: int)
                    public open(arg0: javax.sound.sampled.AudioFormat, arg1: int): void
                    public open(arg0: javax.sound.sampled.AudioFormat): void
                    public available(): int
                    public drain(): void
                    public flush(): void
                    public start(): void
                    public stop(): void
                    public isRunning(): boolean
                    public isActive(): boolean
                    public getMicrosecondPosition(): long
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public getBufferSize(): int
                    public setBufferSize(arg0: int): int
                    public getLevel(): float
                    public open(): void
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                abstract class AbstractLine implements javax.sound.sampled.Line {
                    protected info: javax.sound.sampled.Line$Info
                    protected controls: javax.sound.sampled.Control[]
                    protected constructor(arg0: javax.sound.sampled.Line$Info, arg1: com.sun.media.sound.AbstractMixer, arg2: javax.sound.sampled.Control[])
                    public getLineInfo(): javax.sound.sampled.Line$Info
                    public isOpen(): boolean
                    public addLineListener(arg0: javax.sound.sampled.LineListener): void
                    public removeLineListener(arg0: javax.sound.sampled.LineListener): void
                    public getControls(): javax.sound.sampled.Control[]
                    public isControlSupported(arg0: javax.sound.sampled.Control$Type): boolean
                    public getControl(arg0: javax.sound.sampled.Control$Type): javax.sound.sampled.Control
                    public getFramePosition(): int
                    public getLongFramePosition(): long
                    public open(): void
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                abstract class AbstractMidiDevice implements javax.sound.midi.MidiDevice , com.sun.media.sound.ReferenceCountingDevice {
                    protected id: long
                    protected constructor(arg0: javax.sound.midi.MidiDevice$Info)
                    public getDeviceInfo(): javax.sound.midi.MidiDevice$Info
                    public open(): void
                    public close(): void
                    public closeInternal(arg0: java.lang.Object): void
                    public doClose(): void
                    public isOpen(): boolean
                    protected implClose(): void
                    public getMicrosecondPosition(): long
                    public getMaxReceivers(): int
                    public getMaxTransmitters(): int
                    public getReceiver(): javax.sound.midi.Receiver
                    public getReceivers(): java.util.List<javax.sound.midi.Receiver>
                    public getTransmitter(): javax.sound.midi.Transmitter
                    public getTransmitters(): java.util.List<javax.sound.midi.Transmitter>
                    public getReceiverReferenceCounting(): javax.sound.midi.Receiver
                    public getTransmitterReferenceCounting(): javax.sound.midi.Transmitter
                    protected hasReceivers(): boolean
                    protected createReceiver(): javax.sound.midi.Receiver
                    protected hasTransmitters(): boolean
                    protected createTransmitter(): javax.sound.midi.Transmitter
                    protected implOpen(): void
                    protected finalize(): void
                    public static class: java.lang.Class<any>
                }
                abstract class AbstractMidiDeviceProvider extends javax.sound.midi.spi.MidiDeviceProvider {
                    public constructor()
                    public getDeviceInfo(): javax.sound.midi.MidiDevice$Info[]
                    public getDevice(arg0: javax.sound.midi.MidiDevice$Info): javax.sound.midi.MidiDevice
                    public static class: java.lang.Class<any>
                }
                abstract class AbstractMixer extends com.sun.media.sound.AbstractLine implements javax.sound.sampled.Mixer {
                    protected static PCM: int
                    protected static ULAW: int
                    protected static ALAW: int
                    protected sourceLineInfo: javax.sound.sampled.Line$Info[]
                    protected targetLineInfo: javax.sound.sampled.Line$Info[]
                    protected constructor(arg0: javax.sound.sampled.Mixer$Info, arg1: javax.sound.sampled.Control[], arg2: javax.sound.sampled.Line$Info[], arg3: javax.sound.sampled.Line$Info[])
                    public getMixerInfo(): javax.sound.sampled.Mixer$Info
                    public getSourceLineInfo(): javax.sound.sampled.Line$Info[]
                    public getTargetLineInfo(): javax.sound.sampled.Line$Info[]
                    public getSourceLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                    public getTargetLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                    public isLineSupported(arg0: javax.sound.sampled.Line$Info): boolean
                    public getLine(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line
                    public getMaxLines(arg0: javax.sound.sampled.Line$Info): int
                    protected implOpen(): void
                    protected implStart(): void
                    protected implStop(): void
                    protected implClose(): void
                    public getSourceLines(): javax.sound.sampled.Line[]
                    public getTargetLines(): javax.sound.sampled.Line[]
                    public synchronize(arg0: javax.sound.sampled.Line[], arg1: boolean): void
                    public unsynchronize(arg0: javax.sound.sampled.Line[]): void
                    public isSynchronizationSupported(arg0: javax.sound.sampled.Line[], arg1: boolean): boolean
                    public open(): void
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                class AiffFileFormat extends javax.sound.sampled.AudioFileFormat {
                    public static class: java.lang.Class<any>
                }
                class AiffFileReader extends com.sun.media.sound.SunFileReader {
                    public constructor()
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class AiffFileWriter extends com.sun.media.sound.SunFileWriter {
                    public constructor()
                    public getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                class AlawCodec extends com.sun.media.sound.SunCodec {
                    public constructor()
                    public getTargetEncodings(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetFormats(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat[]
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class AuFileFormat extends javax.sound.sampled.AudioFileFormat {
                    public getAuType(): int
                    public static class: java.lang.Class<any>
                }
                class AuFileReader extends com.sun.media.sound.SunFileReader {
                    public constructor()
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class AuFileWriter extends com.sun.media.sound.SunFileWriter {
                    public static UNKNOWN_SIZE: int
                    public constructor()
                    public getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                class AudioFileSoundbankReader extends javax.sound.midi.spi.SoundbankReader {
                    public constructor()
                    public getSoundbank(arg0: java.net.URL): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.InputStream): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: javax.sound.sampled.AudioInputStream): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.File): javax.sound.midi.Soundbank
                    public static class: java.lang.Class<any>
                }
                abstract class AudioFloatConverter {
                    public constructor()
                    public static getConverter(arg0: javax.sound.sampled.AudioFormat): com.sun.media.sound.AudioFloatConverter
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public toFloatArray(arg0: byte[], arg1: int, arg2: float[], arg3: int, arg4: int): float[]
                    public toFloatArray(arg0: byte[], arg1: float[], arg2: int, arg3: int): float[]
                    public toFloatArray(arg0: byte[], arg1: int, arg2: float[], arg3: int): float[]
                    public toFloatArray(arg0: byte[], arg1: float[], arg2: int): float[]
                    public toFloatArray(arg0: byte[], arg1: float[]): float[]
                    public toByteArray(arg0: float[], arg1: int, arg2: int, arg3: byte[], arg4: int): byte[]
                    public toByteArray(arg0: float[], arg1: int, arg2: byte[], arg3: int): byte[]
                    public toByteArray(arg0: float[], arg1: int, arg2: int, arg3: byte[]): byte[]
                    public toByteArray(arg0: float[], arg1: int, arg2: byte[]): byte[]
                    public toByteArray(arg0: float[], arg1: byte[]): byte[]
                    public static class: java.lang.Class<any>
                }
                class AudioFloatFormatConverter extends javax.sound.sampled.spi.FormatConversionProvider {
                    public constructor()
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: com.sun.media.sound.AudioFloatInputStream): javax.sound.sampled.AudioInputStream
                    public getSourceEncodings(): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetEncodings(): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetEncodings(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetFormats(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat[]
                    public isConversionSupported(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioFormat): boolean
                    public isConversionSupported(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): boolean
                    public static class: java.lang.Class<any>
                }
                abstract class AudioFloatInputStream {
                    public constructor()
                    public static getInputStream(arg0: java.net.URL): com.sun.media.sound.AudioFloatInputStream
                    public static getInputStream(arg0: java.io.File): com.sun.media.sound.AudioFloatInputStream
                    public static getInputStream(arg0: java.io.InputStream): com.sun.media.sound.AudioFloatInputStream
                    public static getInputStream(arg0: javax.sound.sampled.AudioInputStream): com.sun.media.sound.AudioFloatInputStream
                    public static getInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: byte[], arg2: int, arg3: int): com.sun.media.sound.AudioFloatInputStream
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public getFrameLength(): long
                    public read(arg0: float[], arg1: int, arg2: int): int
                    public read(arg0: float[]): int
                    public read(): float
                    public skip(arg0: long): long
                    public available(): int
                    public close(): void
                    public mark(arg0: int): void
                    public markSupported(): boolean
                    public reset(): void
                    public static class: java.lang.Class<any>
                }
                interface AudioSynthesizer extends javax.sound.midi.Synthesizer {
                    getFormat(): javax.sound.sampled.AudioFormat
                    getPropertyInfo(arg0: java.util.Map<java.lang.String, java.lang.Object>): com.sun.media.sound.AudioSynthesizerPropertyInfo[]
                    open(arg0: javax.sound.sampled.SourceDataLine, arg1: java.util.Map<java.lang.String, java.lang.Object>): void
                    openStream(arg0: javax.sound.sampled.AudioFormat, arg1: java.util.Map<java.lang.String, java.lang.Object>): javax.sound.sampled.AudioInputStream
                }
                class AudioSynthesizerPropertyInfo {
                    public name: string
                    public description: string
                    public value: java.lang.Object
                    public valueClass: java.lang.Class
                    public choices: java.lang.Object[]
                    public constructor(arg0: java.lang.String | string, arg1: java.lang.Object)
                    public static class: java.lang.Class<any>
                }
                interface AutoClosingClip extends javax.sound.sampled.Clip {
                    isAutoClosing(): boolean
                    setAutoClosing(arg0: boolean): void
                }
                interface AutoConnectSequencer {
                    setAutoConnect(arg0: javax.sound.midi.Receiver): void
                }
                interface AutoConnectSequencer$$Lambda {
                    (arg0: javax.sound.midi.Receiver): void
                }
                class DLSInfo {
                    public name: string
                    public creationDate: string
                    public engineers: string
                    public product: string
                    public copyright: string
                    public comments: string
                    public tools: string
                    public archival_location: string
                    public artist: string
                    public commissioned: string
                    public genre: string
                    public keywords: string
                    public medium: string
                    public subject: string
                    public source: string
                    public source_form: string
                    public technician: string
                    public constructor()
                    public static class: java.lang.Class<any>
                }
                class DLSInstrument extends com.sun.media.sound.ModelInstrument {
                    public constructor()
                    public constructor(arg0: com.sun.media.sound.DLSSoundbank)
                    public getInfo(): com.sun.media.sound.DLSInfo
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getPatch(): com.sun.media.sound.ModelPatch
                    public setPatch(arg0: javax.sound.midi.Patch): void
                    public getData(): java.lang.Object
                    public getRegions(): java.util.List<com.sun.media.sound.DLSRegion>
                    public getModulators(): java.util.List<com.sun.media.sound.DLSModulator>
                    public toString(): string
                    public getPerformers(): com.sun.media.sound.ModelPerformer[]
                    public getGuid(): byte[]
                    public setGuid(arg0: byte[]): void
                    public getPatch(): javax.sound.midi.Patch
                    public static class: java.lang.Class<any>
                }
                class DLSModulator {
                    public static CONN_DST_NONE: int
                    public static CONN_DST_GAIN: int
                    public static CONN_DST_PITCH: int
                    public static CONN_DST_PAN: int
                    public static CONN_DST_LFO_FREQUENCY: int
                    public static CONN_DST_LFO_STARTDELAY: int
                    public static CONN_DST_EG1_ATTACKTIME: int
                    public static CONN_DST_EG1_DECAYTIME: int
                    public static CONN_DST_EG1_RELEASETIME: int
                    public static CONN_DST_EG1_SUSTAINLEVEL: int
                    public static CONN_DST_EG2_ATTACKTIME: int
                    public static CONN_DST_EG2_DECAYTIME: int
                    public static CONN_DST_EG2_RELEASETIME: int
                    public static CONN_DST_EG2_SUSTAINLEVEL: int
                    public static CONN_DST_KEYNUMBER: int
                    public static CONN_DST_LEFT: int
                    public static CONN_DST_RIGHT: int
                    public static CONN_DST_CENTER: int
                    public static CONN_DST_LEFTREAR: int
                    public static CONN_DST_RIGHTREAR: int
                    public static CONN_DST_LFE_CHANNEL: int
                    public static CONN_DST_CHORUS: int
                    public static CONN_DST_REVERB: int
                    public static CONN_DST_VIB_FREQUENCY: int
                    public static CONN_DST_VIB_STARTDELAY: int
                    public static CONN_DST_EG1_DELAYTIME: int
                    public static CONN_DST_EG1_HOLDTIME: int
                    public static CONN_DST_EG1_SHUTDOWNTIME: int
                    public static CONN_DST_EG2_DELAYTIME: int
                    public static CONN_DST_EG2_HOLDTIME: int
                    public static CONN_DST_FILTER_CUTOFF: int
                    public static CONN_DST_FILTER_Q: int
                    public static CONN_SRC_NONE: int
                    public static CONN_SRC_LFO: int
                    public static CONN_SRC_KEYONVELOCITY: int
                    public static CONN_SRC_KEYNUMBER: int
                    public static CONN_SRC_EG1: int
                    public static CONN_SRC_EG2: int
                    public static CONN_SRC_PITCHWHEEL: int
                    public static CONN_SRC_CC1: int
                    public static CONN_SRC_CC7: int
                    public static CONN_SRC_CC10: int
                    public static CONN_SRC_CC11: int
                    public static CONN_SRC_RPN0: int
                    public static CONN_SRC_RPN1: int
                    public static CONN_SRC_RPN2: int
                    public static CONN_SRC_POLYPRESSURE: int
                    public static CONN_SRC_CHANNELPRESSURE: int
                    public static CONN_SRC_VIBRATO: int
                    public static CONN_SRC_MONOPRESSURE: int
                    public static CONN_SRC_CC91: int
                    public static CONN_SRC_CC93: int
                    public static CONN_TRN_NONE: int
                    public static CONN_TRN_CONCAVE: int
                    public static CONN_TRN_CONVEX: int
                    public static CONN_TRN_SWITCH: int
                    public static DST_FORMAT_CB: int
                    public static DST_FORMAT_CENT: int
                    public static DST_FORMAT_TIMECENT: int
                    public static DST_FORMAT_PERCENT: int
                    public constructor()
                    public getControl(): int
                    public setControl(arg0: int): void
                    public static getDestinationFormat(arg0: int): int
                    public static getDestinationName(arg0: int): string
                    public static getSourceName(arg0: int): string
                    public getDestination(): int
                    public setDestination(arg0: int): void
                    public getScale(): int
                    public setScale(arg0: int): void
                    public getSource(): int
                    public setSource(arg0: int): void
                    public getVersion(): int
                    public setVersion(arg0: int): void
                    public getTransform(): int
                    public setTransform(arg0: int): void
                    public static class: java.lang.Class<any>
                }
                class DLSRegion {
                    public static OPTION_SELFNONEXCLUSIVE: int
                    public constructor()
                    public getModulators(): java.util.List<com.sun.media.sound.DLSModulator>
                    public getChannel(): long
                    public setChannel(arg0: long): void
                    public getExclusiveClass(): int
                    public setExclusiveClass(arg0: int): void
                    public getFusoptions(): int
                    public setFusoptions(arg0: int): void
                    public getKeyfrom(): int
                    public setKeyfrom(arg0: int): void
                    public getKeyto(): int
                    public setKeyto(arg0: int): void
                    public getOptions(): int
                    public setOptions(arg0: int): void
                    public getPhasegroup(): int
                    public setPhasegroup(arg0: int): void
                    public getSample(): com.sun.media.sound.DLSSample
                    public setSample(arg0: com.sun.media.sound.DLSSample): void
                    public getVelfrom(): int
                    public setVelfrom(arg0: int): void
                    public getVelto(): int
                    public setVelto(arg0: int): void
                    public setModulators(arg0: java.util.List<com.sun.media.sound.DLSModulator>): void
                    public getSampleoptions(): com.sun.media.sound.DLSSampleOptions
                    public setSampleoptions(arg0: com.sun.media.sound.DLSSampleOptions): void
                    public static class: java.lang.Class<any>
                }
                class DLSSample extends javax.sound.midi.SoundbankResource {
                    public constructor(arg0: javax.sound.midi.Soundbank)
                    public constructor()
                    public getInfo(): com.sun.media.sound.DLSInfo
                    public getData(): java.lang.Object
                    public getDataBuffer(): com.sun.media.sound.ModelByteBuffer
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public setFormat(arg0: javax.sound.sampled.AudioFormat): void
                    public setData(arg0: com.sun.media.sound.ModelByteBuffer): void
                    public setData(arg0: byte[]): void
                    public setData(arg0: byte[], arg1: int, arg2: int): void
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getSampleoptions(): com.sun.media.sound.DLSSampleOptions
                    public setSampleoptions(arg0: com.sun.media.sound.DLSSampleOptions): void
                    public toString(): string
                    public getGuid(): byte[]
                    public setGuid(arg0: byte[]): void
                    public static class: java.lang.Class<any>
                }
                class DLSSampleLoop {
                    public static LOOP_TYPE_FORWARD: int
                    public static LOOP_TYPE_RELEASE: int
                    public constructor()
                    public getLength(): long
                    public setLength(arg0: long): void
                    public getStart(): long
                    public setStart(arg0: long): void
                    public getType(): long
                    public setType(arg0: long): void
                    public static class: java.lang.Class<any>
                }
                class DLSSampleOptions {
                    public constructor()
                    public getAttenuation(): int
                    public setAttenuation(arg0: int): void
                    public getFinetune(): short
                    public setFinetune(arg0: short): void
                    public getLoops(): java.util.List<com.sun.media.sound.DLSSampleLoop>
                    public getOptions(): long
                    public setOptions(arg0: long): void
                    public getUnitynote(): int
                    public setUnitynote(arg0: int): void
                    public static class: java.lang.Class<any>
                }
                class DLSSoundbank implements javax.sound.midi.Soundbank {
                    public constructor()
                    public constructor(arg0: java.net.URL)
                    public constructor(arg0: java.io.File)
                    public constructor(arg0: java.io.InputStream)
                    public save(arg0: java.lang.String | string): void
                    public save(arg0: java.io.File): void
                    public save(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): void
                    public getInfo(): com.sun.media.sound.DLSInfo
                    public getName(): string
                    public getVersion(): string
                    public getVendor(): string
                    public getDescription(): string
                    public setName(arg0: java.lang.String | string): void
                    public setVendor(arg0: java.lang.String | string): void
                    public setDescription(arg0: java.lang.String | string): void
                    public getResources(): javax.sound.midi.SoundbankResource[]
                    public getInstruments(): com.sun.media.sound.DLSInstrument[]
                    public getSamples(): com.sun.media.sound.DLSSample[]
                    public getInstrument(arg0: javax.sound.midi.Patch): javax.sound.midi.Instrument
                    public addResource(arg0: javax.sound.midi.SoundbankResource): void
                    public removeResource(arg0: javax.sound.midi.SoundbankResource): void
                    public addInstrument(arg0: com.sun.media.sound.DLSInstrument): void
                    public removeInstrument(arg0: com.sun.media.sound.DLSInstrument): void
                    public getMajor(): long
                    public setMajor(arg0: long): void
                    public getMinor(): long
                    public setMinor(arg0: long): void
                    public getInstruments(): javax.sound.midi.Instrument[]
                    public static class: java.lang.Class<any>
                }
                class DLSSoundbankReader extends javax.sound.midi.spi.SoundbankReader {
                    public constructor()
                    public getSoundbank(arg0: java.net.URL): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.InputStream): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.File): javax.sound.midi.Soundbank
                    public static class: java.lang.Class<any>
                }
                class DataPusher implements java.lang.Runnable {
                    public constructor(arg0: javax.sound.sampled.SourceDataLine, arg1: javax.sound.sampled.AudioFormat, arg2: byte[], arg3: int)
                    public constructor(arg0: javax.sound.sampled.SourceDataLine, arg1: javax.sound.sampled.AudioInputStream)
                    public start(): void
                    public start(arg0: boolean): void
                    public stop(): void
                    public run(): void
                    public static class: java.lang.Class<any>
                }
                class DataPusher$$Lambda implements java.lang.Runnable {
                    public constructor(arg0: javax.sound.sampled.SourceDataLine, arg1: javax.sound.sampled.AudioFormat, arg2: byte[], arg3: int)
                }
                class DirectAudioDevice extends com.sun.media.sound.AbstractMixer {
                    public getLine(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line
                    public getMaxLines(arg0: javax.sound.sampled.Line$Info): int
                    protected implOpen(): void
                    protected implClose(): void
                    protected implStart(): void
                    protected implStop(): void
                    protected static getSignOrEndianChangedFormat(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat
                    public static class: java.lang.Class<any>
                }
                class DirectAudioDeviceProvider extends javax.sound.sampled.spi.MixerProvider {
                    public constructor()
                    public getMixerInfo(): javax.sound.sampled.Mixer$Info[]
                    public getMixer(arg0: javax.sound.sampled.Mixer$Info): javax.sound.sampled.Mixer
                    public static class: java.lang.Class<any>
                }
                class EmergencySoundbank {
                    public constructor()
                    public static createSoundbank(): com.sun.media.sound.SF2Soundbank
                    public static new_bell(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_guitar1(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_guitar_dist(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_guitar_pick(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_gpiano(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_gpiano2(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_piano_hammer(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_piano1(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_epiano1(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_epiano2(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_bass1(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_synthbass(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_bass2(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_solostring(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_orchhit(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_string2(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_choir(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_organ(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_ch_organ(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_flute(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_horn(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_trumpet(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_brass_section(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_trombone(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_sax(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_oboe(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_bassoon(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_clarinet(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_timpani(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_melodic_toms(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_reverse_cymbal(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_snare_drum(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_bass_drum(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_tom(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_closed_hihat(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_open_hihat(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_crash_cymbal(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static new_side_stick(arg0: com.sun.media.sound.SF2Soundbank): com.sun.media.sound.SF2Layer
                    public static newSimpleFFTSample(arg0: com.sun.media.sound.SF2Soundbank, arg1: java.lang.String | string, arg2: double[], arg3: double): com.sun.media.sound.SF2Sample
                    public static newSimpleFFTSample(arg0: com.sun.media.sound.SF2Soundbank, arg1: java.lang.String | string, arg2: double[], arg3: double, arg4: int): com.sun.media.sound.SF2Sample
                    public static newSimpleFFTSample_dist(arg0: com.sun.media.sound.SF2Soundbank, arg1: java.lang.String | string, arg2: double[], arg3: double, arg4: double): com.sun.media.sound.SF2Sample
                    public static newSimpleDrumSample(arg0: com.sun.media.sound.SF2Soundbank, arg1: java.lang.String | string, arg2: double[]): com.sun.media.sound.SF2Sample
                    public static newLayer(arg0: com.sun.media.sound.SF2Soundbank, arg1: java.lang.String | string, arg2: com.sun.media.sound.SF2Sample): com.sun.media.sound.SF2Layer
                    public static newInstrument(arg0: com.sun.media.sound.SF2Soundbank, arg1: java.lang.String | string, arg2: javax.sound.midi.Patch, ...arg3: com.sun.media.sound.SF2Layer[]): com.sun.media.sound.SF2Instrument
                    public static ifft(arg0: double[]): void
                    public static fft(arg0: double[]): void
                    public static complexGaussianDist(arg0: double[], arg1: double, arg2: double, arg3: double): void
                    public static randomPhase(arg0: double[]): void
                    public static randomPhase(arg0: double[], arg1: java.util.Random): void
                    public static normalize(arg0: double[], arg1: double): void
                    public static normalize(arg0: float[], arg1: double): void
                    public static realPart(arg0: double[]): double[]
                    public static imgPart(arg0: double[]): double[]
                    public static toFloat(arg0: double[]): float[]
                    public static toBytes(arg0: float[], arg1: javax.sound.sampled.AudioFormat): byte[]
                    public static fadeUp(arg0: double[], arg1: int): void
                    public static fadeUp(arg0: float[], arg1: int): void
                    public static loopExtend(arg0: double[], arg1: int): double[]
                    public static loopExtend(arg0: float[], arg1: int): float[]
                    public static class: java.lang.Class<any>
                }
                class EventDispatcher implements java.lang.Runnable {
                    public run(): void
                    public static class: java.lang.Class<any>
                }
                class EventDispatcher$$Lambda implements java.lang.Runnable {
                    public (): void
                }
                class FFT {
                    public constructor(arg0: int, arg1: int)
                    public transform(arg0: double[]): void
                    public static class: java.lang.Class<any>
                }
                class FastShortMessage extends javax.sound.midi.ShortMessage {
                    public getMessage(): byte[]
                    public getLength(): int
                    public setMessage(arg0: int): void
                    public setMessage(arg0: int, arg1: int, arg2: int): void
                    public setMessage(arg0: int, arg1: int, arg2: int, arg3: int): void
                    public getChannel(): int
                    public getCommand(): int
                    public getData1(): int
                    public getData2(): int
                    public getStatus(): int
                    public clone(): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class FastSysexMessage extends javax.sound.midi.SysexMessage {
                    public setMessage(arg0: byte[], arg1: int): void
                    public static class: java.lang.Class<any>
                }
                class InvalidDataException extends java.io.IOException {
                    public constructor()
                    public constructor(arg0: java.lang.String | string)
                    public static class: java.lang.Class<any>
                }
                class InvalidFormatException extends com.sun.media.sound.InvalidDataException {
                    public constructor()
                    public constructor(arg0: java.lang.String | string)
                    public static class: java.lang.Class<any>
                }
                class JARSoundbankReader extends javax.sound.midi.spi.SoundbankReader {
                    public constructor()
                    public getSoundbank(arg0: java.net.URL): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.InputStream): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.File): javax.sound.midi.Soundbank
                    public static class: java.lang.Class<any>
                }
                class JDK13Services {
                    public static getProviders(arg0: java.lang.Class<any>): java.util.List<any>
                    public static getDefaultProviderClassName(arg0: java.lang.Class): string
                    public static getDefaultInstanceName(arg0: java.lang.Class): string
                    public static class: java.lang.Class<any>
                }
                class JSSecurityManager {
                    public static class: java.lang.Class<any>
                }
                class JavaSoundAudioClip implements java.applet.AudioClip , javax.sound.midi.MetaEventListener , javax.sound.sampled.LineListener {
                    public constructor(arg0: java.io.InputStream)
                    public play(): void
                    public loop(): void
                    public stop(): void
                    public update(arg0: javax.sound.sampled.LineEvent): void
                    public meta(arg0: javax.sound.midi.MetaMessage): void
                    public toString(): string
                    protected finalize(): void
                    public static class: java.lang.Class<any>
                }
                class MidiDeviceReceiverEnvelope implements javax.sound.midi.MidiDeviceReceiver {
                    public constructor(arg0: javax.sound.midi.MidiDevice, arg1: javax.sound.midi.Receiver)
                    public close(): void
                    public send(arg0: javax.sound.midi.MidiMessage, arg1: long): void
                    public getMidiDevice(): javax.sound.midi.MidiDevice
                    public getReceiver(): javax.sound.midi.Receiver
                    public static class: java.lang.Class<any>
                }
                class MidiDeviceTransmitterEnvelope implements javax.sound.midi.MidiDeviceTransmitter {
                    public constructor(arg0: javax.sound.midi.MidiDevice, arg1: javax.sound.midi.Transmitter)
                    public setReceiver(arg0: javax.sound.midi.Receiver): void
                    public getReceiver(): javax.sound.midi.Receiver
                    public close(): void
                    public getMidiDevice(): javax.sound.midi.MidiDevice
                    public getTransmitter(): javax.sound.midi.Transmitter
                    public static class: java.lang.Class<any>
                }
                class MidiInDevice extends com.sun.media.sound.AbstractMidiDevice implements java.lang.Runnable {
                    protected implOpen(): void
                    protected implClose(): void
                    public getMicrosecondPosition(): long
                    protected hasTransmitters(): boolean
                    protected createTransmitter(): javax.sound.midi.Transmitter
                    public run(): void
                    public static class: java.lang.Class<any>
                }
                class MidiInDevice$$Lambda extends com.sun.media.sound.AbstractMidiDevice implements java.lang.Runnable {
                    protected (): void
                }
                class MidiInDeviceProvider extends com.sun.media.sound.AbstractMidiDeviceProvider {
                    public constructor()
                    public static class: java.lang.Class<any>
                }
                class MidiOutDevice extends com.sun.media.sound.AbstractMidiDevice {
                    protected implOpen(): void
                    protected implClose(): void
                    public getMicrosecondPosition(): long
                    protected hasReceivers(): boolean
                    protected createReceiver(): javax.sound.midi.Receiver
                    public static class: java.lang.Class<any>
                }
                class MidiOutDeviceProvider extends com.sun.media.sound.AbstractMidiDeviceProvider {
                    public constructor()
                    public static class: java.lang.Class<any>
                }
                class MidiUtils {
                    public static DEFAULT_TEMPO_MPQ: int
                    public static META_END_OF_TRACK_TYPE: int
                    public static META_TEMPO_TYPE: int
                    public static isMetaEndOfTrack(arg0: javax.sound.midi.MidiMessage): boolean
                    public static isMetaTempo(arg0: javax.sound.midi.MidiMessage): boolean
                    public static getTempoMPQ(arg0: javax.sound.midi.MidiMessage): int
                    public static convertTempo(arg0: double): double
                    public static ticks2microsec(arg0: long, arg1: double, arg2: int): long
                    public static microsec2ticks(arg0: long, arg1: double, arg2: int): long
                    public static tick2microsecond(arg0: javax.sound.midi.Sequence, arg1: long, arg2: com.sun.media.sound.MidiUtils$TempoCache): long
                    public static microsecond2tick(arg0: javax.sound.midi.Sequence, arg1: long, arg2: com.sun.media.sound.MidiUtils$TempoCache): long
                    public static tick2index(arg0: javax.sound.midi.Track, arg1: long): int
                    public static class: java.lang.Class<any>
                }
                abstract class ModelAbstractChannelMixer implements com.sun.media.sound.ModelChannelMixer {
                    public constructor()
                    public process(arg0: float[][], arg1: int, arg2: int): boolean
                    public stop(): void
                    public allNotesOff(): void
                    public allSoundOff(): void
                    public controlChange(arg0: int, arg1: int): void
                    public getChannelPressure(): int
                    public getController(arg0: int): int
                    public getMono(): boolean
                    public getMute(): boolean
                    public getOmni(): boolean
                    public getPitchBend(): int
                    public getPolyPressure(arg0: int): int
                    public getProgram(): int
                    public getSolo(): boolean
                    public localControl(arg0: boolean): boolean
                    public noteOff(arg0: int): void
                    public noteOff(arg0: int, arg1: int): void
                    public noteOn(arg0: int, arg1: int): void
                    public programChange(arg0: int): void
                    public programChange(arg0: int, arg1: int): void
                    public resetAllControllers(): void
                    public setChannelPressure(arg0: int): void
                    public setMono(arg0: boolean): void
                    public setMute(arg0: boolean): void
                    public setOmni(arg0: boolean): void
                    public setPitchBend(arg0: int): void
                    public setPolyPressure(arg0: int, arg1: int): void
                    public setSolo(arg0: boolean): void
                    public static class: java.lang.Class<any>
                }
                abstract class ModelAbstractOscillator implements com.sun.media.sound.ModelOscillator , com.sun.media.sound.ModelOscillatorStream , javax.sound.midi.Soundbank {
                    protected pitch: float
                    protected samplerate: float
                    protected channel: javax.sound.midi.MidiChannel
                    protected voice: javax.sound.midi.VoiceStatus
                    protected noteNumber: int
                    protected velocity: int
                    protected on: boolean
                    public constructor()
                    public init(): void
                    public close(): void
                    public noteOff(arg0: int): void
                    public noteOn(arg0: javax.sound.midi.MidiChannel, arg1: javax.sound.midi.VoiceStatus, arg2: int, arg3: int): void
                    public read(arg0: float[][], arg1: int, arg2: int): int
                    public getChannel(): javax.sound.midi.MidiChannel
                    public getVoice(): javax.sound.midi.VoiceStatus
                    public getNoteNumber(): int
                    public getVelocity(): int
                    public isOn(): boolean
                    public setPitch(arg0: float): void
                    public getPitch(): float
                    public setSampleRate(arg0: float): void
                    public getSampleRate(): float
                    public getAttenuation(): float
                    public getChannels(): int
                    public getName(): string
                    public getPatch(): javax.sound.midi.Patch
                    public open(arg0: float): com.sun.media.sound.ModelOscillatorStream
                    public getPerformer(): com.sun.media.sound.ModelPerformer
                    public getInstrument(): com.sun.media.sound.ModelInstrument
                    public getSoundBank(): javax.sound.midi.Soundbank
                    public getDescription(): string
                    public getInstrument(arg0: javax.sound.midi.Patch): javax.sound.midi.Instrument
                    public getInstruments(): javax.sound.midi.Instrument[]
                    public getResources(): javax.sound.midi.SoundbankResource[]
                    public getVendor(): string
                    public getVersion(): string
                    public static class: java.lang.Class<any>
                }
                class ModelByteBuffer {
                    public constructor(arg0: byte[])
                    public constructor(arg0: byte[], arg1: int, arg2: int)
                    public constructor(arg0: java.io.File)
                    public constructor(arg0: java.io.File, arg1: long, arg2: long)
                    public writeTo(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): void
                    public getInputStream(): java.io.InputStream
                    public subbuffer(arg0: long): com.sun.media.sound.ModelByteBuffer
                    public subbuffer(arg0: long, arg1: long): com.sun.media.sound.ModelByteBuffer
                    public subbuffer(arg0: long, arg1: long, arg2: boolean): com.sun.media.sound.ModelByteBuffer
                    public array(): byte[]
                    public arrayOffset(): long
                    public capacity(): long
                    public getRoot(): com.sun.media.sound.ModelByteBuffer
                    public getFile(): java.io.File
                    public getFilePointer(): long
                    public static loadAll(arg0: java.util.Collection<com.sun.media.sound.ModelByteBuffer>): void
                    public load(): void
                    public unload(): void
                    public static class: java.lang.Class<any>
                }
                class ModelByteBufferWavetable implements com.sun.media.sound.ModelWavetable {
                    public constructor(arg0: com.sun.media.sound.ModelByteBuffer)
                    public constructor(arg0: com.sun.media.sound.ModelByteBuffer, arg1: float)
                    public constructor(arg0: com.sun.media.sound.ModelByteBuffer, arg1: javax.sound.sampled.AudioFormat)
                    public constructor(arg0: com.sun.media.sound.ModelByteBuffer, arg1: javax.sound.sampled.AudioFormat, arg2: float)
                    public set8BitExtensionBuffer(arg0: com.sun.media.sound.ModelByteBuffer): void
                    public get8BitExtensionBuffer(): com.sun.media.sound.ModelByteBuffer
                    public getBuffer(): com.sun.media.sound.ModelByteBuffer
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public openStream(): com.sun.media.sound.AudioFloatInputStream
                    public getChannels(): int
                    public open(arg0: float): com.sun.media.sound.ModelOscillatorStream
                    public getAttenuation(): float
                    public setAttenuation(arg0: float): void
                    public getLoopLength(): float
                    public setLoopLength(arg0: float): void
                    public getLoopStart(): float
                    public setLoopStart(arg0: float): void
                    public setLoopType(arg0: int): void
                    public getLoopType(): int
                    public getPitchcorrection(): float
                    public setPitchcorrection(arg0: float): void
                    public static class: java.lang.Class<any>
                }
                interface ModelChannelMixer extends javax.sound.midi.MidiChannel {
                    process(arg0: float[][], arg1: int, arg2: int): boolean
                    stop(): void
                }
                class ModelConnectionBlock {
                    public constructor()
                    public constructor(arg0: double, arg1: com.sun.media.sound.ModelDestination)
                    public constructor(arg0: com.sun.media.sound.ModelSource, arg1: com.sun.media.sound.ModelDestination)
                    public constructor(arg0: com.sun.media.sound.ModelSource, arg1: double, arg2: com.sun.media.sound.ModelDestination)
                    public constructor(arg0: com.sun.media.sound.ModelSource, arg1: com.sun.media.sound.ModelSource, arg2: com.sun.media.sound.ModelDestination)
                    public constructor(arg0: com.sun.media.sound.ModelSource, arg1: com.sun.media.sound.ModelSource, arg2: double, arg3: com.sun.media.sound.ModelDestination)
                    public getDestination(): com.sun.media.sound.ModelDestination
                    public setDestination(arg0: com.sun.media.sound.ModelDestination): void
                    public getScale(): double
                    public setScale(arg0: double): void
                    public getSources(): com.sun.media.sound.ModelSource[]
                    public setSources(arg0: com.sun.media.sound.ModelSource[]): void
                    public addSource(arg0: com.sun.media.sound.ModelSource): void
                    public static class: java.lang.Class<any>
                }
                class ModelDestination {
                    public static DESTINATION_NONE: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_KEYNUMBER: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_VELOCITY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_PITCH: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_GAIN: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_PAN: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_REVERB: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_CHORUS: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_LFO1_DELAY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_LFO1_FREQ: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_LFO2_DELAY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_LFO2_FREQ: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_DELAY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_ATTACK: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_HOLD: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_DECAY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_SUSTAIN: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_RELEASE: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG1_SHUTDOWN: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_DELAY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_ATTACK: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_HOLD: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_DECAY: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_SUSTAIN: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_RELEASE: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_EG2_SHUTDOWN: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_FILTER_FREQ: com.sun.media.sound.ModelIdentifier
                    public static DESTINATION_FILTER_Q: com.sun.media.sound.ModelIdentifier
                    public constructor()
                    public constructor(arg0: com.sun.media.sound.ModelIdentifier)
                    public getIdentifier(): com.sun.media.sound.ModelIdentifier
                    public setIdentifier(arg0: com.sun.media.sound.ModelIdentifier): void
                    public getTransform(): com.sun.media.sound.ModelTransform
                    public setTransform(arg0: com.sun.media.sound.ModelTransform | com.sun.media.sound.ModelTransform$$Lambda): void
                    public static class: java.lang.Class<any>
                }
                interface ModelDirectedPlayer {
                    play(arg0: int, arg1: com.sun.media.sound.ModelConnectionBlock[]): void
                }
                interface ModelDirectedPlayer$$Lambda {
                    (arg0: int, arg1: com.sun.media.sound.ModelConnectionBlock[]): void
                }
                interface ModelDirector {
                    noteOn(arg0: int, arg1: int): void
                    noteOff(arg0: int, arg1: int): void
                    close(): void
                }
                class ModelIdentifier {
                    public constructor(arg0: java.lang.String | string)
                    public constructor(arg0: java.lang.String | string, arg1: int)
                    public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
                    public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int)
                    public getInstance(): int
                    public setInstance(arg0: int): void
                    public getObject(): string
                    public setObject(arg0: java.lang.String | string): void
                    public getVariable(): string
                    public setVariable(arg0: java.lang.String | string): void
                    public hashCode(): int
                    public equals(arg0: java.lang.Object): boolean
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                abstract class ModelInstrument extends javax.sound.midi.Instrument {
                    protected constructor(arg0: javax.sound.midi.Soundbank, arg1: javax.sound.midi.Patch, arg2: java.lang.String | string, arg3: java.lang.Class<any>)
                    public getDirector(arg0: com.sun.media.sound.ModelPerformer[], arg1: javax.sound.midi.MidiChannel, arg2: com.sun.media.sound.ModelDirectedPlayer | com.sun.media.sound.ModelDirectedPlayer$$Lambda): com.sun.media.sound.ModelDirector
                    public getPerformers(): com.sun.media.sound.ModelPerformer[]
                    public getChannelMixer(arg0: javax.sound.midi.MidiChannel, arg1: javax.sound.sampled.AudioFormat): com.sun.media.sound.ModelChannelMixer
                    public getPatchAlias(): javax.sound.midi.Patch
                    public getKeys(): java.lang.String[]
                    public getChannels(): boolean[]
                    public static class: java.lang.Class<any>
                }
                class ModelInstrumentComparator implements java.util.Comparator<javax.sound.midi.Instrument> {
                    public constructor()
                    public compare(arg0: javax.sound.midi.Instrument, arg1: javax.sound.midi.Instrument): int
                    public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                    public static class: java.lang.Class<any>
                }
                class ModelMappedInstrument extends com.sun.media.sound.ModelInstrument {
                    public constructor(arg0: com.sun.media.sound.ModelInstrument, arg1: javax.sound.midi.Patch)
                    public getData(): java.lang.Object
                    public getPerformers(): com.sun.media.sound.ModelPerformer[]
                    public getDirector(arg0: com.sun.media.sound.ModelPerformer[], arg1: javax.sound.midi.MidiChannel, arg2: com.sun.media.sound.ModelDirectedPlayer | com.sun.media.sound.ModelDirectedPlayer$$Lambda): com.sun.media.sound.ModelDirector
                    public getChannelMixer(arg0: javax.sound.midi.MidiChannel, arg1: javax.sound.sampled.AudioFormat): com.sun.media.sound.ModelChannelMixer
                    public static class: java.lang.Class<any>
                }
                interface ModelOscillator {
                    getChannels(): int
                    getAttenuation(): float
                    open(arg0: float): com.sun.media.sound.ModelOscillatorStream
                }
                interface ModelOscillatorStream {
                    setPitch(arg0: float): void
                    noteOn(arg0: javax.sound.midi.MidiChannel, arg1: javax.sound.midi.VoiceStatus, arg2: int, arg3: int): void
                    noteOff(arg0: int): void
                    read(arg0: float[][], arg1: int, arg2: int): int
                    close(): void
                }
                class ModelPatch extends javax.sound.midi.Patch {
                    public constructor(arg0: int, arg1: int)
                    public constructor(arg0: int, arg1: int, arg2: boolean)
                    public isPercussion(): boolean
                    public static class: java.lang.Class<any>
                }
                class ModelPerformer {
                    public constructor()
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getConnectionBlocks(): java.util.List<com.sun.media.sound.ModelConnectionBlock>
                    public setConnectionBlocks(arg0: java.util.List<com.sun.media.sound.ModelConnectionBlock>): void
                    public getOscillators(): java.util.List<com.sun.media.sound.ModelOscillator>
                    public getExclusiveClass(): int
                    public setExclusiveClass(arg0: int): void
                    public isSelfNonExclusive(): boolean
                    public setSelfNonExclusive(arg0: boolean): void
                    public getKeyFrom(): int
                    public setKeyFrom(arg0: int): void
                    public getKeyTo(): int
                    public setKeyTo(arg0: int): void
                    public getVelFrom(): int
                    public setVelFrom(arg0: int): void
                    public getVelTo(): int
                    public setVelTo(arg0: int): void
                    public isReleaseTriggered(): boolean
                    public setReleaseTriggered(arg0: boolean): void
                    public getUserObject(): java.lang.Object
                    public setUserObject(arg0: java.lang.Object): void
                    public isDefaultConnectionsEnabled(): boolean
                    public setDefaultConnectionsEnabled(arg0: boolean): void
                    public static class: java.lang.Class<any>
                }
                class ModelSource {
                    public static SOURCE_NONE: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_NOTEON_KEYNUMBER: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_NOTEON_VELOCITY: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_EG1: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_EG2: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_LFO1: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_LFO2: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_MIDI_PITCH: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_MIDI_CHANNEL_PRESSURE: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_MIDI_POLY_PRESSURE: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_MIDI_CC_0: com.sun.media.sound.ModelIdentifier
                    public static SOURCE_MIDI_RPN_0: com.sun.media.sound.ModelIdentifier
                    public constructor()
                    public constructor(arg0: com.sun.media.sound.ModelIdentifier)
                    public constructor(arg0: com.sun.media.sound.ModelIdentifier, arg1: boolean)
                    public constructor(arg0: com.sun.media.sound.ModelIdentifier, arg1: boolean, arg2: boolean)
                    public constructor(arg0: com.sun.media.sound.ModelIdentifier, arg1: boolean, arg2: boolean, arg3: int)
                    public constructor(arg0: com.sun.media.sound.ModelIdentifier, arg1: com.sun.media.sound.ModelTransform | com.sun.media.sound.ModelTransform$$Lambda)
                    public getIdentifier(): com.sun.media.sound.ModelIdentifier
                    public setIdentifier(arg0: com.sun.media.sound.ModelIdentifier): void
                    public getTransform(): com.sun.media.sound.ModelTransform
                    public setTransform(arg0: com.sun.media.sound.ModelTransform | com.sun.media.sound.ModelTransform$$Lambda): void
                    public static class: java.lang.Class<any>
                }
                class ModelStandardDirector implements com.sun.media.sound.ModelDirector {
                    public constructor(arg0: com.sun.media.sound.ModelPerformer[], arg1: com.sun.media.sound.ModelDirectedPlayer | com.sun.media.sound.ModelDirectedPlayer$$Lambda)
                    public close(): void
                    public noteOff(arg0: int, arg1: int): void
                    public noteOn(arg0: int, arg1: int): void
                    public static class: java.lang.Class<any>
                }
                class ModelStandardIndexedDirector implements com.sun.media.sound.ModelDirector {
                    public constructor(arg0: com.sun.media.sound.ModelPerformer[], arg1: com.sun.media.sound.ModelDirectedPlayer | com.sun.media.sound.ModelDirectedPlayer$$Lambda)
                    public close(): void
                    public noteOff(arg0: int, arg1: int): void
                    public noteOn(arg0: int, arg1: int): void
                    public static class: java.lang.Class<any>
                }
                class ModelStandardTransform implements com.sun.media.sound.ModelTransform {
                    public static DIRECTION_MIN2MAX: boolean
                    public static DIRECTION_MAX2MIN: boolean
                    public static POLARITY_UNIPOLAR: boolean
                    public static POLARITY_BIPOLAR: boolean
                    public static TRANSFORM_LINEAR: int
                    public static TRANSFORM_CONCAVE: int
                    public static TRANSFORM_CONVEX: int
                    public static TRANSFORM_SWITCH: int
                    public static TRANSFORM_ABSOLUTE: int
                    public constructor()
                    public constructor(arg0: boolean)
                    public constructor(arg0: boolean, arg1: boolean)
                    public constructor(arg0: boolean, arg1: boolean, arg2: int)
                    public transform(arg0: double): double
                    public getDirection(): boolean
                    public setDirection(arg0: boolean): void
                    public getPolarity(): boolean
                    public setPolarity(arg0: boolean): void
                    public getTransform(): int
                    public setTransform(arg0: int): void
                    public static class: java.lang.Class<any>
                }
                class ModelStandardTransform$$Lambda implements com.sun.media.sound.ModelTransform {
                    public static DIRECTION_MIN2MAX: boolean
                }
                interface ModelTransform {
                    transform(arg0: double): double
                }
                interface ModelTransform$$Lambda {
                    (arg0: double): double
                }
                interface ModelWavetable extends com.sun.media.sound.ModelOscillator {
                    LOOP_TYPE_OFF: int
                    LOOP_TYPE_FORWARD: int
                    LOOP_TYPE_RELEASE: int
                    LOOP_TYPE_PINGPONG: int
                    LOOP_TYPE_REVERSE: int
                    openStream(): com.sun.media.sound.AudioFloatInputStream
                    getLoopLength(): float
                    getLoopStart(): float
                    getLoopType(): int
                    getPitchcorrection(): float
                }
                class PCMtoPCMCodec extends com.sun.media.sound.SunCodec {
                    public constructor()
                    public getTargetEncodings(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetFormats(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat[]
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class Platform {
                    public static LIB_MAIN: int
                    public static LIB_ALSA: int
                    public static LIB_DSOUND: int
                    public static FEATURE_MIDIIO: int
                    public static FEATURE_PORTS: int
                    public static FEATURE_DIRECT_AUDIO: int
                    public static class: java.lang.Class<any>
                }
                class PortMixer extends com.sun.media.sound.AbstractMixer {
                    public getLine(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line
                    public getMaxLines(arg0: javax.sound.sampled.Line$Info): int
                    protected implOpen(): void
                    protected implClose(): void
                    protected implStart(): void
                    protected implStop(): void
                    public static class: java.lang.Class<any>
                }
                class PortMixerProvider extends javax.sound.sampled.spi.MixerProvider {
                    public constructor()
                    public getMixerInfo(): javax.sound.sampled.Mixer$Info[]
                    public getMixer(arg0: javax.sound.sampled.Mixer$Info): javax.sound.sampled.Mixer
                    public static class: java.lang.Class<any>
                }
                class Printer {
                    public static err(arg0: java.lang.String | string): void
                    public static debug(arg0: java.lang.String | string): void
                    public static trace(arg0: java.lang.String | string): void
                    public static verbose(arg0: java.lang.String | string): void
                    public static release(arg0: java.lang.String | string): void
                    public static println(arg0: java.lang.String | string): void
                    public static println(): void
                    public static class: java.lang.Class<any>
                }
                class RIFFInvalidDataException extends com.sun.media.sound.InvalidDataException {
                    public constructor()
                    public constructor(arg0: java.lang.String | string)
                    public static class: java.lang.Class<any>
                }
                class RIFFInvalidFormatException extends com.sun.media.sound.InvalidFormatException {
                    public constructor()
                    public constructor(arg0: java.lang.String | string)
                    public static class: java.lang.Class<any>
                }
                class RIFFReader extends java.io.InputStream {
                    public constructor(arg0: java.io.InputStream)
                    public getFilePointer(): long
                    public hasNextChunk(): boolean
                    public nextChunk(): com.sun.media.sound.RIFFReader
                    public getFormat(): string
                    public getType(): string
                    public getSize(): long
                    public read(): int
                    public read(arg0: byte[], arg1: int, arg2: int): int
                    public readFully(arg0: byte[]): void
                    public readFully(arg0: byte[], arg1: int, arg2: int): void
                    public skipBytes(arg0: long): long
                    public skip(arg0: long): long
                    public available(): int
                    public finish(): void
                    public readString(arg0: int): string
                    public readByte(): byte
                    public readShort(): short
                    public readInt(): int
                    public readLong(): long
                    public readUnsignedByte(): int
                    public readUnsignedShort(): int
                    public readUnsignedInt(): long
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                class RIFFWriter extends java.io.OutputStream {
                    public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
                    public constructor(arg0: java.io.File, arg1: java.lang.String | string)
                    public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: java.lang.String | string)
                    public seek(arg0: long): void
                    public getFilePointer(): long
                    public setWriteOverride(arg0: boolean): void
                    public getWriteOverride(): boolean
                    public close(): void
                    public write(arg0: int): void
                    public write(arg0: byte[], arg1: int, arg2: int): void
                    public writeList(arg0: java.lang.String | string): com.sun.media.sound.RIFFWriter
                    public writeChunk(arg0: java.lang.String | string): com.sun.media.sound.RIFFWriter
                    public writeString(arg0: java.lang.String | string): void
                    public writeString(arg0: java.lang.String | string, arg1: int): void
                    public writeByte(arg0: int): void
                    public writeShort(arg0: short): void
                    public writeInt(arg0: int): void
                    public writeLong(arg0: long): void
                    public writeUnsignedByte(arg0: int): void
                    public writeUnsignedShort(arg0: int): void
                    public writeUnsignedInt(arg0: long): void
                    public static class: java.lang.Class<any>
                }
                class RealTimeSequencer extends com.sun.media.sound.AbstractMidiDevice implements javax.sound.midi.Sequencer , com.sun.media.sound.AutoConnectSequencer {
                    public setSequence(arg0: javax.sound.midi.Sequence): void
                    public setSequence(arg0: java.io.InputStream): void
                    public getSequence(): javax.sound.midi.Sequence
                    public start(): void
                    public stop(): void
                    public isRunning(): boolean
                    public startRecording(): void
                    public stopRecording(): void
                    public isRecording(): boolean
                    public recordEnable(arg0: javax.sound.midi.Track, arg1: int): void
                    public recordDisable(arg0: javax.sound.midi.Track): void
                    public getTempoInBPM(): float
                    public setTempoInBPM(arg0: float): void
                    public getTempoInMPQ(): float
                    public setTempoInMPQ(arg0: float): void
                    public setTempoFactor(arg0: float): void
                    public getTempoFactor(): float
                    public getTickLength(): long
                    public getTickPosition(): long
                    public setTickPosition(arg0: long): void
                    public getMicrosecondLength(): long
                    public getMicrosecondPosition(): long
                    public setMicrosecondPosition(arg0: long): void
                    public setMasterSyncMode(arg0: javax.sound.midi.Sequencer$SyncMode): void
                    public getMasterSyncMode(): javax.sound.midi.Sequencer$SyncMode
                    public getMasterSyncModes(): javax.sound.midi.Sequencer$SyncMode[]
                    public setSlaveSyncMode(arg0: javax.sound.midi.Sequencer$SyncMode): void
                    public getSlaveSyncMode(): javax.sound.midi.Sequencer$SyncMode
                    public getSlaveSyncModes(): javax.sound.midi.Sequencer$SyncMode[]
                    public setTrackMute(arg0: int, arg1: boolean): void
                    public getTrackMute(arg0: int): boolean
                    public setTrackSolo(arg0: int, arg1: boolean): void
                    public getTrackSolo(arg0: int): boolean
                    public addMetaEventListener(arg0: javax.sound.midi.MetaEventListener): boolean
                    public removeMetaEventListener(arg0: javax.sound.midi.MetaEventListener): void
                    public addControllerEventListener(arg0: javax.sound.midi.ControllerEventListener, arg1: int[]): int[]
                    public removeControllerEventListener(arg0: javax.sound.midi.ControllerEventListener, arg1: int[]): int[]
                    public setLoopStartPoint(arg0: long): void
                    public getLoopStartPoint(): long
                    public setLoopEndPoint(arg0: long): void
                    public getLoopEndPoint(): long
                    public setLoopCount(arg0: int): void
                    public getLoopCount(): int
                    protected implOpen(): void
                    protected implClose(): void
                    protected hasReceivers(): boolean
                    protected createReceiver(): javax.sound.midi.Receiver
                    protected hasTransmitters(): boolean
                    protected createTransmitter(): javax.sound.midi.Transmitter
                    public setAutoConnect(arg0: javax.sound.midi.Receiver): void
                    public static class: java.lang.Class<any>
                }
                class RealTimeSequencer$$Lambda extends com.sun.media.sound.AbstractMidiDevice implements javax.sound.midi.Sequencer , com.sun.media.sound.AutoConnectSequencer {
                    public (arg0: javax.sound.midi.Sequence): void
                }
                class RealTimeSequencerProvider extends javax.sound.midi.spi.MidiDeviceProvider {
                    public constructor()
                    public getDeviceInfo(): javax.sound.midi.MidiDevice$Info[]
                    public getDevice(arg0: javax.sound.midi.MidiDevice$Info): javax.sound.midi.MidiDevice
                    public static class: java.lang.Class<any>
                }
                interface ReferenceCountingDevice {
                    getReceiverReferenceCounting(): javax.sound.midi.Receiver
                    getTransmitterReferenceCounting(): javax.sound.midi.Transmitter
                }
                class SF2GlobalRegion extends com.sun.media.sound.SF2Region {
                    public constructor()
                    public static class: java.lang.Class<any>
                }
                class SF2Instrument extends com.sun.media.sound.ModelInstrument {
                    public constructor()
                    public constructor(arg0: com.sun.media.sound.SF2Soundbank)
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getPatch(): javax.sound.midi.Patch
                    public setPatch(arg0: javax.sound.midi.Patch): void
                    public getData(): java.lang.Object
                    public getGenre(): long
                    public setGenre(arg0: long): void
                    public getLibrary(): long
                    public setLibrary(arg0: long): void
                    public getMorphology(): long
                    public setMorphology(arg0: long): void
                    public getRegions(): java.util.List<com.sun.media.sound.SF2InstrumentRegion>
                    public getGlobalRegion(): com.sun.media.sound.SF2GlobalRegion
                    public setGlobalZone(arg0: com.sun.media.sound.SF2GlobalRegion): void
                    public toString(): string
                    public getPerformers(): com.sun.media.sound.ModelPerformer[]
                    public static class: java.lang.Class<any>
                }
                class SF2InstrumentRegion extends com.sun.media.sound.SF2Region {
                    public constructor()
                    public getLayer(): com.sun.media.sound.SF2Layer
                    public setLayer(arg0: com.sun.media.sound.SF2Layer): void
                    public static class: java.lang.Class<any>
                }
                class SF2Layer extends javax.sound.midi.SoundbankResource {
                    public constructor(arg0: com.sun.media.sound.SF2Soundbank)
                    public constructor()
                    public getData(): java.lang.Object
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getRegions(): java.util.List<com.sun.media.sound.SF2LayerRegion>
                    public getGlobalRegion(): com.sun.media.sound.SF2GlobalRegion
                    public setGlobalZone(arg0: com.sun.media.sound.SF2GlobalRegion): void
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class SF2LayerRegion extends com.sun.media.sound.SF2Region {
                    public constructor()
                    public getSample(): com.sun.media.sound.SF2Sample
                    public setSample(arg0: com.sun.media.sound.SF2Sample): void
                    public static class: java.lang.Class<any>
                }
                class SF2Modulator {
                    public static SOURCE_NONE: int
                    public static SOURCE_NOTE_ON_VELOCITY: int
                    public static SOURCE_NOTE_ON_KEYNUMBER: int
                    public static SOURCE_POLY_PRESSURE: int
                    public static SOURCE_CHANNEL_PRESSURE: int
                    public static SOURCE_PITCH_WHEEL: int
                    public static SOURCE_PITCH_SENSITIVITY: int
                    public static SOURCE_MIDI_CONTROL: int
                    public static SOURCE_DIRECTION_MIN_MAX: int
                    public static SOURCE_DIRECTION_MAX_MIN: int
                    public static SOURCE_POLARITY_UNIPOLAR: int
                    public static SOURCE_POLARITY_BIPOLAR: int
                    public static SOURCE_TYPE_LINEAR: int
                    public static SOURCE_TYPE_CONCAVE: int
                    public static SOURCE_TYPE_CONVEX: int
                    public static SOURCE_TYPE_SWITCH: int
                    public static TRANSFORM_LINEAR: int
                    public static TRANSFORM_ABSOLUTE: int
                    public constructor()
                    public getAmount(): short
                    public setAmount(arg0: short): void
                    public getAmountSourceOperator(): int
                    public setAmountSourceOperator(arg0: int): void
                    public getTransportOperator(): int
                    public setTransportOperator(arg0: int): void
                    public getDestinationOperator(): int
                    public setDestinationOperator(arg0: int): void
                    public getSourceOperator(): int
                    public setSourceOperator(arg0: int): void
                    public static class: java.lang.Class<any>
                }
                class SF2Region {
                    public static GENERATOR_STARTADDRSOFFSET: int
                    public static GENERATOR_ENDADDRSOFFSET: int
                    public static GENERATOR_STARTLOOPADDRSOFFSET: int
                    public static GENERATOR_ENDLOOPADDRSOFFSET: int
                    public static GENERATOR_STARTADDRSCOARSEOFFSET: int
                    public static GENERATOR_MODLFOTOPITCH: int
                    public static GENERATOR_VIBLFOTOPITCH: int
                    public static GENERATOR_MODENVTOPITCH: int
                    public static GENERATOR_INITIALFILTERFC: int
                    public static GENERATOR_INITIALFILTERQ: int
                    public static GENERATOR_MODLFOTOFILTERFC: int
                    public static GENERATOR_MODENVTOFILTERFC: int
                    public static GENERATOR_ENDADDRSCOARSEOFFSET: int
                    public static GENERATOR_MODLFOTOVOLUME: int
                    public static GENERATOR_UNUSED1: int
                    public static GENERATOR_CHORUSEFFECTSSEND: int
                    public static GENERATOR_REVERBEFFECTSSEND: int
                    public static GENERATOR_PAN: int
                    public static GENERATOR_UNUSED2: int
                    public static GENERATOR_UNUSED3: int
                    public static GENERATOR_UNUSED4: int
                    public static GENERATOR_DELAYMODLFO: int
                    public static GENERATOR_FREQMODLFO: int
                    public static GENERATOR_DELAYVIBLFO: int
                    public static GENERATOR_FREQVIBLFO: int
                    public static GENERATOR_DELAYMODENV: int
                    public static GENERATOR_ATTACKMODENV: int
                    public static GENERATOR_HOLDMODENV: int
                    public static GENERATOR_DECAYMODENV: int
                    public static GENERATOR_SUSTAINMODENV: int
                    public static GENERATOR_RELEASEMODENV: int
                    public static GENERATOR_KEYNUMTOMODENVHOLD: int
                    public static GENERATOR_KEYNUMTOMODENVDECAY: int
                    public static GENERATOR_DELAYVOLENV: int
                    public static GENERATOR_ATTACKVOLENV: int
                    public static GENERATOR_HOLDVOLENV: int
                    public static GENERATOR_DECAYVOLENV: int
                    public static GENERATOR_SUSTAINVOLENV: int
                    public static GENERATOR_RELEASEVOLENV: int
                    public static GENERATOR_KEYNUMTOVOLENVHOLD: int
                    public static GENERATOR_KEYNUMTOVOLENVDECAY: int
                    public static GENERATOR_INSTRUMENT: int
                    public static GENERATOR_RESERVED1: int
                    public static GENERATOR_KEYRANGE: int
                    public static GENERATOR_VELRANGE: int
                    public static GENERATOR_STARTLOOPADDRSCOARSEOFFSET: int
                    public static GENERATOR_KEYNUM: int
                    public static GENERATOR_VELOCITY: int
                    public static GENERATOR_INITIALATTENUATION: int
                    public static GENERATOR_RESERVED2: int
                    public static GENERATOR_ENDLOOPADDRSCOARSEOFFSET: int
                    public static GENERATOR_COARSETUNE: int
                    public static GENERATOR_FINETUNE: int
                    public static GENERATOR_SAMPLEID: int
                    public static GENERATOR_SAMPLEMODES: int
                    public static GENERATOR_RESERVED3: int
                    public static GENERATOR_SCALETUNING: int
                    public static GENERATOR_EXCLUSIVECLASS: int
                    public static GENERATOR_OVERRIDINGROOTKEY: int
                    public static GENERATOR_UNUSED5: int
                    public static GENERATOR_ENDOPR: int
                    protected generators: java.util.Map<java.lang.Integer, java.lang.Short>
                    protected modulators: java.util.List<com.sun.media.sound.SF2Modulator>
                    public constructor()
                    public getGenerators(): java.util.Map<java.lang.Integer, java.lang.Short>
                    public contains(arg0: int): boolean
                    public static getDefaultValue(arg0: int): short
                    public getShort(arg0: int): short
                    public putShort(arg0: int, arg1: short): void
                    public getBytes(arg0: int): byte[]
                    public putBytes(arg0: int, arg1: byte[]): void
                    public getInteger(arg0: int): int
                    public putInteger(arg0: int, arg1: int): void
                    public getModulators(): java.util.List<com.sun.media.sound.SF2Modulator>
                    public static class: java.lang.Class<any>
                }
                class SF2Sample extends javax.sound.midi.SoundbankResource {
                    public constructor(arg0: javax.sound.midi.Soundbank)
                    public constructor()
                    public getData(): java.lang.Object
                    public getDataBuffer(): com.sun.media.sound.ModelByteBuffer
                    public getData24Buffer(): com.sun.media.sound.ModelByteBuffer
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public setData(arg0: com.sun.media.sound.ModelByteBuffer): void
                    public setData(arg0: byte[]): void
                    public setData(arg0: byte[], arg1: int, arg2: int): void
                    public setData24(arg0: com.sun.media.sound.ModelByteBuffer): void
                    public setData24(arg0: byte[]): void
                    public setData24(arg0: byte[], arg1: int, arg2: int): void
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getEndLoop(): long
                    public setEndLoop(arg0: long): void
                    public getOriginalPitch(): int
                    public setOriginalPitch(arg0: int): void
                    public getPitchCorrection(): byte
                    public setPitchCorrection(arg0: byte): void
                    public getSampleLink(): int
                    public setSampleLink(arg0: int): void
                    public getSampleRate(): long
                    public setSampleRate(arg0: long): void
                    public getSampleType(): int
                    public setSampleType(arg0: int): void
                    public getStartLoop(): long
                    public setStartLoop(arg0: long): void
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class SF2Soundbank implements javax.sound.midi.Soundbank {
                    public constructor()
                    public constructor(arg0: java.net.URL)
                    public constructor(arg0: java.io.File)
                    public constructor(arg0: java.io.InputStream)
                    public save(arg0: java.lang.String | string): void
                    public save(arg0: java.io.File): void
                    public save(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): void
                    public getName(): string
                    public getVersion(): string
                    public getVendor(): string
                    public getDescription(): string
                    public setName(arg0: java.lang.String | string): void
                    public setVendor(arg0: java.lang.String | string): void
                    public setDescription(arg0: java.lang.String | string): void
                    public getResources(): javax.sound.midi.SoundbankResource[]
                    public getInstruments(): com.sun.media.sound.SF2Instrument[]
                    public getLayers(): com.sun.media.sound.SF2Layer[]
                    public getSamples(): com.sun.media.sound.SF2Sample[]
                    public getInstrument(arg0: javax.sound.midi.Patch): javax.sound.midi.Instrument
                    public getCreationDate(): string
                    public setCreationDate(arg0: java.lang.String | string): void
                    public getProduct(): string
                    public setProduct(arg0: java.lang.String | string): void
                    public getRomName(): string
                    public setRomName(arg0: java.lang.String | string): void
                    public getRomVersionMajor(): int
                    public setRomVersionMajor(arg0: int): void
                    public getRomVersionMinor(): int
                    public setRomVersionMinor(arg0: int): void
                    public getTargetEngine(): string
                    public setTargetEngine(arg0: java.lang.String | string): void
                    public getTools(): string
                    public setTools(arg0: java.lang.String | string): void
                    public addResource(arg0: javax.sound.midi.SoundbankResource): void
                    public removeResource(arg0: javax.sound.midi.SoundbankResource): void
                    public addInstrument(arg0: com.sun.media.sound.SF2Instrument): void
                    public removeInstrument(arg0: com.sun.media.sound.SF2Instrument): void
                    public getInstruments(): javax.sound.midi.Instrument[]
                    public static class: java.lang.Class<any>
                }
                class SF2SoundbankReader extends javax.sound.midi.spi.SoundbankReader {
                    public constructor()
                    public getSoundbank(arg0: java.net.URL): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.InputStream): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.File): javax.sound.midi.Soundbank
                    public static class: java.lang.Class<any>
                }
                class SimpleInstrument extends com.sun.media.sound.ModelInstrument {
                    protected preset: int
                    protected bank: int
                    protected percussion: boolean
                    protected name: string
                    protected parts: java.util.List<com.sun.media.sound.SimpleInstrument$SimpleInstrumentPart>
                    public constructor()
                    public clear(): void
                    public add(arg0: com.sun.media.sound.ModelPerformer[], arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public add(arg0: com.sun.media.sound.ModelPerformer[], arg1: int, arg2: int, arg3: int, arg4: int): void
                    public add(arg0: com.sun.media.sound.ModelPerformer[], arg1: int, arg2: int): void
                    public add(arg0: com.sun.media.sound.ModelPerformer[]): void
                    public add(arg0: com.sun.media.sound.ModelPerformer, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public add(arg0: com.sun.media.sound.ModelPerformer, arg1: int, arg2: int, arg3: int, arg4: int): void
                    public add(arg0: com.sun.media.sound.ModelPerformer, arg1: int, arg2: int): void
                    public add(arg0: com.sun.media.sound.ModelPerformer): void
                    public add(arg0: com.sun.media.sound.ModelInstrument, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public add(arg0: com.sun.media.sound.ModelInstrument, arg1: int, arg2: int, arg3: int, arg4: int): void
                    public add(arg0: com.sun.media.sound.ModelInstrument, arg1: int, arg2: int): void
                    public add(arg0: com.sun.media.sound.ModelInstrument): void
                    public getPerformers(): com.sun.media.sound.ModelPerformer[]
                    public getData(): java.lang.Object
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public getPatch(): com.sun.media.sound.ModelPatch
                    public setPatch(arg0: javax.sound.midi.Patch): void
                    public getPatch(): javax.sound.midi.Patch
                    public static class: java.lang.Class<any>
                }
                class SimpleSoundbank implements javax.sound.midi.Soundbank {
                    public constructor()
                    public getName(): string
                    public getVersion(): string
                    public getVendor(): string
                    public getDescription(): string
                    public setDescription(arg0: java.lang.String | string): void
                    public setName(arg0: java.lang.String | string): void
                    public setVendor(arg0: java.lang.String | string): void
                    public setVersion(arg0: java.lang.String | string): void
                    public getResources(): javax.sound.midi.SoundbankResource[]
                    public getInstruments(): javax.sound.midi.Instrument[]
                    public getInstrument(arg0: javax.sound.midi.Patch): javax.sound.midi.Instrument
                    public addResource(arg0: javax.sound.midi.SoundbankResource): void
                    public removeResource(arg0: javax.sound.midi.SoundbankResource): void
                    public addInstrument(arg0: javax.sound.midi.Instrument): void
                    public removeInstrument(arg0: javax.sound.midi.Instrument): void
                    public addAllInstruments(arg0: javax.sound.midi.Soundbank): void
                    public removeAllInstruments(arg0: javax.sound.midi.Soundbank): void
                    public static class: java.lang.Class<any>
                }
                abstract class SoftAbstractResampler implements com.sun.media.sound.SoftResampler {
                    public constructor()
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public openStreamer(): com.sun.media.sound.SoftResamplerStreamer
                    public static class: java.lang.Class<any>
                }
                abstract class SoftAbstractResampler$$Lambda implements com.sun.media.sound.SoftResampler {
                    public constructor()
                }
                class SoftAudioBuffer {
                    public constructor(arg0: int, arg1: javax.sound.sampled.AudioFormat)
                    public swap(arg0: com.sun.media.sound.SoftAudioBuffer): void
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public getSize(): int
                    public clear(): void
                    public isSilent(): boolean
                    public array(): float[]
                    public get(arg0: byte[], arg1: int): void
                    public static class: java.lang.Class<any>
                }
                interface SoftAudioProcessor {
                    globalParameterControlChange(arg0: int[], arg1: long, arg2: long): void
                    init(arg0: float, arg1: float): void
                    setInput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    setOutput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    setMixMode(arg0: boolean): void
                    processAudio(): void
                    processControlLogic(): void
                }
                class SoftAudioPusher implements java.lang.Runnable {
                    public constructor(arg0: javax.sound.sampled.SourceDataLine, arg1: javax.sound.sampled.AudioInputStream, arg2: int)
                    public start(): void
                    public stop(): void
                    public run(): void
                    public static class: java.lang.Class<any>
                }
                class SoftAudioPusher$$Lambda implements java.lang.Runnable {
                    public constructor(arg0: javax.sound.sampled.SourceDataLine, arg1: javax.sound.sampled.AudioInputStream, arg2: int)
                }
                class SoftChannel implements javax.sound.midi.MidiChannel , com.sun.media.sound.ModelDirectedPlayer {
                    public constructor(arg0: com.sun.media.sound.SoftSynthesizer, arg1: int)
                    public noteOn(arg0: int, arg1: int): void
                    public noteOff(arg0: int, arg1: int): void
                    public play(arg0: int, arg1: com.sun.media.sound.ModelConnectionBlock[]): void
                    public noteOff(arg0: int): void
                    public setPolyPressure(arg0: int, arg1: int): void
                    public getPolyPressure(arg0: int): int
                    public setChannelPressure(arg0: int): void
                    public getChannelPressure(): int
                    public mapPolyPressureToDestination(arg0: int[], arg1: int[]): void
                    public mapChannelPressureToDestination(arg0: int[], arg1: int[]): void
                    public mapControlToDestination(arg0: int, arg1: int[], arg2: int[]): void
                    public controlChangePerNote(arg0: int, arg1: int, arg2: int): void
                    public getControlPerNote(arg0: int, arg1: int): int
                    public controlChange(arg0: int, arg1: int): void
                    public getController(arg0: int): int
                    public tuningChange(arg0: int): void
                    public tuningChange(arg0: int, arg1: int): void
                    public programChange(arg0: int): void
                    public programChange(arg0: int, arg1: int): void
                    public getProgram(): int
                    public setPitchBend(arg0: int): void
                    public getPitchBend(): int
                    public nrpnChange(arg0: int, arg1: int): void
                    public rpnChange(arg0: int, arg1: int): void
                    public resetAllControllers(): void
                    public resetAllControllers(arg0: boolean): void
                    public allNotesOff(): void
                    public allSoundOff(): void
                    public localControl(arg0: boolean): boolean
                    public setMono(arg0: boolean): void
                    public getMono(): boolean
                    public setOmni(arg0: boolean): void
                    public getOmni(): boolean
                    public setMute(arg0: boolean): void
                    public getMute(): boolean
                    public setSolo(arg0: boolean): void
                    public getSolo(): boolean
                    public static class: java.lang.Class<any>
                }
                class SoftChannel$$Lambda implements javax.sound.midi.MidiChannel , com.sun.media.sound.ModelDirectedPlayer {
                    public constructor(arg0: com.sun.media.sound.SoftSynthesizer, arg1: int)
                }
                class SoftChannelProxy implements javax.sound.midi.MidiChannel {
                    public constructor()
                    public getChannel(): javax.sound.midi.MidiChannel
                    public setChannel(arg0: javax.sound.midi.MidiChannel): void
                    public allNotesOff(): void
                    public allSoundOff(): void
                    public controlChange(arg0: int, arg1: int): void
                    public getChannelPressure(): int
                    public getController(arg0: int): int
                    public getMono(): boolean
                    public getMute(): boolean
                    public getOmni(): boolean
                    public getPitchBend(): int
                    public getPolyPressure(arg0: int): int
                    public getProgram(): int
                    public getSolo(): boolean
                    public localControl(arg0: boolean): boolean
                    public noteOff(arg0: int): void
                    public noteOff(arg0: int, arg1: int): void
                    public noteOn(arg0: int, arg1: int): void
                    public programChange(arg0: int): void
                    public programChange(arg0: int, arg1: int): void
                    public resetAllControllers(): void
                    public setChannelPressure(arg0: int): void
                    public setMono(arg0: boolean): void
                    public setMute(arg0: boolean): void
                    public setOmni(arg0: boolean): void
                    public setPitchBend(arg0: int): void
                    public setPolyPressure(arg0: int, arg1: int): void
                    public setSolo(arg0: boolean): void
                    public static class: java.lang.Class<any>
                }
                class SoftChorus implements com.sun.media.sound.SoftAudioProcessor {
                    public constructor()
                    public init(arg0: float, arg1: float): void
                    public globalParameterControlChange(arg0: int[], arg1: long, arg2: long): void
                    public processControlLogic(): void
                    public processAudio(): void
                    public setInput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    public setMixMode(arg0: boolean): void
                    public setOutput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    public static class: java.lang.Class<any>
                }
                interface SoftControl {
                    get(arg0: int, arg1: java.lang.String | string): double[]
                }
                interface SoftControl$$Lambda {
                    (arg0: int, arg1: java.lang.String | string): double[]
                }
                class SoftCubicResampler extends com.sun.media.sound.SoftAbstractResampler {
                    public constructor()
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public static class: java.lang.Class<any>
                }
                class SoftEnvelopeGenerator implements com.sun.media.sound.SoftProcess {
                    public static EG_OFF: int
                    public static EG_DELAY: int
                    public static EG_ATTACK: int
                    public static EG_HOLD: int
                    public static EG_DECAY: int
                    public static EG_SUSTAIN: int
                    public static EG_RELEASE: int
                    public static EG_SHUTDOWN: int
                    public static EG_END: int
                    public constructor()
                    public reset(): void
                    public init(arg0: com.sun.media.sound.SoftSynthesizer): void
                    public get(arg0: int, arg1: java.lang.String | string): double[]
                    public processControlLogic(): void
                    public static class: java.lang.Class<any>
                }
                class SoftFilter {
                    public static FILTERTYPE_LP6: int
                    public static FILTERTYPE_LP12: int
                    public static FILTERTYPE_HP12: int
                    public static FILTERTYPE_BP12: int
                    public static FILTERTYPE_NP12: int
                    public static FILTERTYPE_LP24: int
                    public static FILTERTYPE_HP24: int
                    public constructor(arg0: float)
                    public setFrequency(arg0: double): void
                    public setResonance(arg0: double): void
                    public reset(): void
                    public setFilterType(arg0: int): void
                    public processAudio(arg0: com.sun.media.sound.SoftAudioBuffer): void
                    public filter4(arg0: com.sun.media.sound.SoftAudioBuffer): void
                    public filter2calc(): void
                    public filter2(arg0: com.sun.media.sound.SoftAudioBuffer): void
                    public filter1calc(): void
                    public filter1(arg0: com.sun.media.sound.SoftAudioBuffer): void
                    public static class: java.lang.Class<any>
                }
                class SoftInstrument extends javax.sound.midi.Instrument {
                    public constructor(arg0: com.sun.media.sound.ModelInstrument)
                    public constructor(arg0: com.sun.media.sound.ModelInstrument, arg1: com.sun.media.sound.ModelPerformer[])
                    public getDirector(arg0: javax.sound.midi.MidiChannel, arg1: com.sun.media.sound.ModelDirectedPlayer | com.sun.media.sound.ModelDirectedPlayer$$Lambda): com.sun.media.sound.ModelDirector
                    public getSourceInstrument(): com.sun.media.sound.ModelInstrument
                    public getData(): java.lang.Object
                    public getPerformer(arg0: int): com.sun.media.sound.SoftPerformer
                    public static class: java.lang.Class<any>
                }
                class SoftJitterCorrector extends javax.sound.sampled.AudioInputStream {
                    public constructor(arg0: javax.sound.sampled.AudioInputStream, arg1: int, arg2: int)
                    public static class: java.lang.Class<any>
                }
                class SoftLanczosResampler extends com.sun.media.sound.SoftAbstractResampler {
                    public constructor()
                    public static sinc(arg0: double): double
                    public static sincTable(arg0: int, arg1: float): float[]
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public static class: java.lang.Class<any>
                }
                class SoftLimiter implements com.sun.media.sound.SoftAudioProcessor {
                    public constructor()
                    public init(arg0: float, arg1: float): void
                    public setInput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    public setOutput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    public setMixMode(arg0: boolean): void
                    public globalParameterControlChange(arg0: int[], arg1: long, arg2: long): void
                    public processAudio(): void
                    public processControlLogic(): void
                    public static class: java.lang.Class<any>
                }
                class SoftLinearResampler extends com.sun.media.sound.SoftAbstractResampler {
                    public constructor()
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public static class: java.lang.Class<any>
                }
                class SoftLinearResampler2 extends com.sun.media.sound.SoftAbstractResampler {
                    public constructor()
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public static class: java.lang.Class<any>
                }
                class SoftLowFrequencyOscillator implements com.sun.media.sound.SoftProcess {
                    public constructor()
                    public reset(): void
                    public init(arg0: com.sun.media.sound.SoftSynthesizer): void
                    public processControlLogic(): void
                    public get(arg0: int, arg1: java.lang.String | string): double[]
                    public static class: java.lang.Class<any>
                }
                class SoftMainMixer {
                    public static CHANNEL_LEFT: int
                    public static CHANNEL_RIGHT: int
                    public static CHANNEL_MONO: int
                    public static CHANNEL_DELAY_LEFT: int
                    public static CHANNEL_DELAY_RIGHT: int
                    public static CHANNEL_DELAY_MONO: int
                    public static CHANNEL_EFFECT1: int
                    public static CHANNEL_EFFECT2: int
                    public static CHANNEL_DELAY_EFFECT1: int
                    public static CHANNEL_DELAY_EFFECT2: int
                    public static CHANNEL_LEFT_DRY: int
                    public static CHANNEL_RIGHT_DRY: int
                    public static CHANNEL_SCRATCH1: int
                    public static CHANNEL_SCRATCH2: int
                    public activity(): void
                    public stopMixer(arg0: com.sun.media.sound.ModelChannelMixer): void
                    public registerMixer(arg0: com.sun.media.sound.ModelChannelMixer): void
                    public constructor(arg0: com.sun.media.sound.SoftSynthesizer)
                    public getInputStream(): javax.sound.sampled.AudioInputStream
                    public reset(): void
                    public setVolume(arg0: int): void
                    public setBalance(arg0: int): void
                    public setFineTuning(arg0: int): void
                    public setCoarseTuning(arg0: int): void
                    public getVolume(): int
                    public getBalance(): int
                    public getFineTuning(): int
                    public getCoarseTuning(): int
                    public globalParameterControlChange(arg0: int[], arg1: long[], arg2: long[]): void
                    public processMessage(arg0: java.lang.Object): void
                    public processMessage(arg0: javax.sound.midi.MidiMessage): void
                    public processMessage(arg0: byte[]): void
                    public processMessage(arg0: int, arg1: int, arg2: int, arg3: int): void
                    public getMicrosecondPosition(): long
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                class SoftMidiAudioFileReader extends javax.sound.sampled.spi.AudioFileReader {
                    public static MIDI: javax.sound.sampled.AudioFileFormat$Type
                    public constructor()
                    public getAudioFileFormat(arg0: javax.sound.midi.Sequence): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: javax.sound.midi.Sequence): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public static class: java.lang.Class<any>
                }
                class SoftMixingClip extends com.sun.media.sound.SoftMixingDataLine implements javax.sound.sampled.Clip {
                    protected processControlLogic(): void
                    protected processAudioLogic(arg0: com.sun.media.sound.SoftAudioBuffer[]): void
                    public getFrameLength(): int
                    public getMicrosecondLength(): long
                    public loop(arg0: int): void
                    public open(arg0: javax.sound.sampled.AudioInputStream): void
                    public open(arg0: javax.sound.sampled.AudioFormat, arg1: byte[], arg2: int, arg3: int): void
                    public setFramePosition(arg0: int): void
                    public setLoopPoints(arg0: int, arg1: int): void
                    public setMicrosecondPosition(arg0: long): void
                    public available(): int
                    public drain(): void
                    public flush(): void
                    public getBufferSize(): int
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public getFramePosition(): int
                    public getLevel(): float
                    public getLongFramePosition(): long
                    public getMicrosecondPosition(): long
                    public isActive(): boolean
                    public isRunning(): boolean
                    public start(): void
                    public stop(): void
                    public close(): void
                    public isOpen(): boolean
                    public open(): void
                    public static class: java.lang.Class<any>
                }
                abstract class SoftMixingDataLine implements javax.sound.sampled.DataLine {
                    public static CHORUS_SEND: javax.sound.sampled.FloatControl$Type
                    protected processControlLogic(): void
                    protected processAudioLogic(arg0: com.sun.media.sound.SoftAudioBuffer[]): void
                    public addLineListener(arg0: javax.sound.sampled.LineListener): void
                    public removeLineListener(arg0: javax.sound.sampled.LineListener): void
                    public getLineInfo(): javax.sound.sampled.Line$Info
                    public getControl(arg0: javax.sound.sampled.Control$Type): javax.sound.sampled.Control
                    public getControls(): javax.sound.sampled.Control[]
                    public isControlSupported(arg0: javax.sound.sampled.Control$Type): boolean
                    public static class: java.lang.Class<any>
                }
                class SoftMixingMainMixer {
                    public static CHANNEL_LEFT: int
                    public static CHANNEL_RIGHT: int
                    public static CHANNEL_EFFECT1: int
                    public static CHANNEL_EFFECT2: int
                    public static CHANNEL_EFFECT3: int
                    public static CHANNEL_EFFECT4: int
                    public static CHANNEL_LEFT_DRY: int
                    public static CHANNEL_RIGHT_DRY: int
                    public static CHANNEL_SCRATCH1: int
                    public static CHANNEL_SCRATCH2: int
                    public static CHANNEL_CHANNELMIXER_LEFT: int
                    public static CHANNEL_CHANNELMIXER_RIGHT: int
                    public getInputStream(): javax.sound.sampled.AudioInputStream
                    public constructor(arg0: com.sun.media.sound.SoftMixingMixer)
                    public openLine(arg0: com.sun.media.sound.SoftMixingDataLine): void
                    public closeLine(arg0: com.sun.media.sound.SoftMixingDataLine): void
                    public getOpenLines(): com.sun.media.sound.SoftMixingDataLine[]
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                class SoftMixingMixer implements javax.sound.sampled.Mixer {
                    public constructor()
                    public getLine(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line
                    public getMaxLines(arg0: javax.sound.sampled.Line$Info): int
                    public getMixerInfo(): javax.sound.sampled.Mixer$Info
                    public getSourceLineInfo(): javax.sound.sampled.Line$Info[]
                    public getSourceLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                    public getSourceLines(): javax.sound.sampled.Line[]
                    public getTargetLineInfo(): javax.sound.sampled.Line$Info[]
                    public getTargetLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                    public getTargetLines(): javax.sound.sampled.Line[]
                    public isLineSupported(arg0: javax.sound.sampled.Line$Info): boolean
                    public isSynchronizationSupported(arg0: javax.sound.sampled.Line[], arg1: boolean): boolean
                    public synchronize(arg0: javax.sound.sampled.Line[], arg1: boolean): void
                    public unsynchronize(arg0: javax.sound.sampled.Line[]): void
                    public addLineListener(arg0: javax.sound.sampled.LineListener): void
                    public close(): void
                    public getControl(arg0: javax.sound.sampled.Control$Type): javax.sound.sampled.Control
                    public getControls(): javax.sound.sampled.Control[]
                    public getLineInfo(): javax.sound.sampled.Line$Info
                    public isControlSupported(arg0: javax.sound.sampled.Control$Type): boolean
                    public isOpen(): boolean
                    public open(): void
                    public open(arg0: javax.sound.sampled.SourceDataLine): void
                    public openStream(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioInputStream
                    public removeLineListener(arg0: javax.sound.sampled.LineListener): void
                    public getLatency(): long
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public static class: java.lang.Class<any>
                }
                class SoftMixingMixerProvider extends javax.sound.sampled.spi.MixerProvider {
                    public constructor()
                    public getMixer(arg0: javax.sound.sampled.Mixer$Info): javax.sound.sampled.Mixer
                    public getMixerInfo(): javax.sound.sampled.Mixer$Info[]
                    public static class: java.lang.Class<any>
                }
                class SoftMixingSourceDataLine extends com.sun.media.sound.SoftMixingDataLine implements javax.sound.sampled.SourceDataLine {
                    public write(arg0: byte[], arg1: int, arg2: int): int
                    protected processControlLogic(): void
                    protected processAudioLogic(arg0: com.sun.media.sound.SoftAudioBuffer[]): void
                    public open(): void
                    public open(arg0: javax.sound.sampled.AudioFormat): void
                    public open(arg0: javax.sound.sampled.AudioFormat, arg1: int): void
                    public available(): int
                    public drain(): void
                    public flush(): void
                    public getBufferSize(): int
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public getFramePosition(): int
                    public getLevel(): float
                    public getLongFramePosition(): long
                    public getMicrosecondPosition(): long
                    public isActive(): boolean
                    public isRunning(): boolean
                    public start(): void
                    public stop(): void
                    public close(): void
                    public isOpen(): boolean
                    public static class: java.lang.Class<any>
                }
                class SoftPerformer {
                    public keyFrom: int
                    public keyTo: int
                    public velFrom: int
                    public velTo: int
                    public exclusiveClass: int
                    public selfNonExclusive: boolean
                    public forcedVelocity: boolean
                    public forcedKeynumber: boolean
                    public performer: com.sun.media.sound.ModelPerformer
                    public connections: com.sun.media.sound.ModelConnectionBlock[]
                    public oscillators: com.sun.media.sound.ModelOscillator[]
                    public midi_rpn_connections: java.util.Map<java.lang.Integer, int[]>
                    public midi_nrpn_connections: java.util.Map<java.lang.Integer, int[]>
                    public midi_ctrl_connections: int[][]
                    public midi_connections: int[][]
                    public ctrl_connections: int[]
                    public constructor(arg0: com.sun.media.sound.ModelPerformer)
                    public static class: java.lang.Class<any>
                }
                class SoftPointResampler extends com.sun.media.sound.SoftAbstractResampler {
                    public constructor()
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public static class: java.lang.Class<any>
                }
                interface SoftProcess extends com.sun.media.sound.SoftControl {
                    init(arg0: com.sun.media.sound.SoftSynthesizer): void
                    get(arg0: int, arg1: java.lang.String | string): double[]
                    processControlLogic(): void
                    reset(): void
                }
                class SoftProvider extends javax.sound.midi.spi.MidiDeviceProvider {
                    public constructor()
                    public getDeviceInfo(): javax.sound.midi.MidiDevice$Info[]
                    public getDevice(arg0: javax.sound.midi.MidiDevice$Info): javax.sound.midi.MidiDevice
                    public static class: java.lang.Class<any>
                }
                class SoftReceiver implements javax.sound.midi.MidiDeviceReceiver {
                    public constructor(arg0: com.sun.media.sound.SoftSynthesizer)
                    public getMidiDevice(): javax.sound.midi.MidiDevice
                    public send(arg0: javax.sound.midi.MidiMessage, arg1: long): void
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                interface SoftResampler {
                    openStreamer(): com.sun.media.sound.SoftResamplerStreamer
                }
                interface SoftResampler$$Lambda {
                    (): com.sun.media.sound.SoftResamplerStreamer
                }
                interface SoftResamplerStreamer extends com.sun.media.sound.ModelOscillatorStream {
                    open(arg0: com.sun.media.sound.ModelWavetable, arg1: float): void
                }
                class SoftReverb implements com.sun.media.sound.SoftAudioProcessor {
                    public constructor()
                    public init(arg0: float, arg1: float): void
                    public setInput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    public setOutput(arg0: int, arg1: com.sun.media.sound.SoftAudioBuffer): void
                    public setMixMode(arg0: boolean): void
                    public processAudio(): void
                    public globalParameterControlChange(arg0: int[], arg1: long, arg2: long): void
                    public processControlLogic(): void
                    public setRoomSize(arg0: float): void
                    public setPreDelay(arg0: float): void
                    public setGain(arg0: float): void
                    public setDamp(arg0: float): void
                    public setLightMode(arg0: boolean): void
                    public static class: java.lang.Class<any>
                }
                class SoftShortMessage extends javax.sound.midi.ShortMessage {
                    public constructor()
                    public getChannel(): int
                    public setMessage(arg0: int, arg1: int, arg2: int, arg3: int): void
                    public clone(): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class SoftSincResampler extends com.sun.media.sound.SoftAbstractResampler {
                    public constructor()
                    public static sinc(arg0: double): double
                    public static wHanning(arg0: int, arg1: float): float[]
                    public static sincTable(arg0: int, arg1: float, arg2: float): float[]
                    public getPadding(): int
                    public interpolate(arg0: float[], arg1: float[], arg2: float, arg3: float[], arg4: float, arg5: float[], arg6: int[], arg7: int): void
                    public static class: java.lang.Class<any>
                }
                class SoftSynthesizer implements com.sun.media.sound.AudioSynthesizer , com.sun.media.sound.ReferenceCountingDevice {
                    public constructor()
                    public getLatency(): long
                    public getFormat(): javax.sound.sampled.AudioFormat
                    public getMaxPolyphony(): int
                    public getChannels(): javax.sound.midi.MidiChannel[]
                    public getVoiceStatus(): javax.sound.midi.VoiceStatus[]
                    public isSoundbankSupported(arg0: javax.sound.midi.Soundbank): boolean
                    public loadInstrument(arg0: javax.sound.midi.Instrument): boolean
                    public unloadInstrument(arg0: javax.sound.midi.Instrument): void
                    public remapInstrument(arg0: javax.sound.midi.Instrument, arg1: javax.sound.midi.Instrument): boolean
                    public getDefaultSoundbank(): javax.sound.midi.Soundbank
                    public getAvailableInstruments(): javax.sound.midi.Instrument[]
                    public getLoadedInstruments(): javax.sound.midi.Instrument[]
                    public loadAllInstruments(arg0: javax.sound.midi.Soundbank): boolean
                    public unloadAllInstruments(arg0: javax.sound.midi.Soundbank): void
                    public loadInstruments(arg0: javax.sound.midi.Soundbank, arg1: javax.sound.midi.Patch[]): boolean
                    public unloadInstruments(arg0: javax.sound.midi.Soundbank, arg1: javax.sound.midi.Patch[]): void
                    public getDeviceInfo(): javax.sound.midi.MidiDevice$Info
                    public getPropertyInfo(arg0: java.util.Map<java.lang.String, java.lang.Object>): com.sun.media.sound.AudioSynthesizerPropertyInfo[]
                    public open(): void
                    public open(arg0: javax.sound.sampled.SourceDataLine, arg1: java.util.Map<java.lang.String, java.lang.Object>): void
                    public openStream(arg0: javax.sound.sampled.AudioFormat, arg1: java.util.Map<java.lang.String, java.lang.Object>): javax.sound.sampled.AudioInputStream
                    public close(): void
                    public isOpen(): boolean
                    public getMicrosecondPosition(): long
                    public getMaxReceivers(): int
                    public getMaxTransmitters(): int
                    public getReceiver(): javax.sound.midi.Receiver
                    public getReceivers(): java.util.List<javax.sound.midi.Receiver>
                    public getTransmitter(): javax.sound.midi.Transmitter
                    public getTransmitters(): java.util.List<javax.sound.midi.Transmitter>
                    public getReceiverReferenceCounting(): javax.sound.midi.Receiver
                    public getTransmitterReferenceCounting(): javax.sound.midi.Transmitter
                    public static class: java.lang.Class<any>
                }
                class SoftTuning {
                    public constructor()
                    public constructor(arg0: byte[])
                    public constructor(arg0: javax.sound.midi.Patch)
                    public constructor(arg0: javax.sound.midi.Patch, arg1: byte[])
                    public load(arg0: byte[]): void
                    public getTuning(): double[]
                    public getTuning(arg0: int): double
                    public getPatch(): javax.sound.midi.Patch
                    public getName(): string
                    public setName(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class SoftVoice extends javax.sound.midi.VoiceStatus {
                    public exclusiveClass: int
                    public releaseTriggered: boolean
                    public constructor(arg0: com.sun.media.sound.SoftSynthesizer)
                    public static class: java.lang.Class<any>
                }
                class StandardMidiFileReader extends javax.sound.midi.spi.MidiFileReader {
                    public constructor()
                    public getMidiFileFormat(arg0: java.io.InputStream): javax.sound.midi.MidiFileFormat
                    public getMidiFileFormat(arg0: java.net.URL): javax.sound.midi.MidiFileFormat
                    public getMidiFileFormat(arg0: java.io.File): javax.sound.midi.MidiFileFormat
                    public getSequence(arg0: java.io.InputStream): javax.sound.midi.Sequence
                    public getSequence(arg0: java.net.URL): javax.sound.midi.Sequence
                    public getSequence(arg0: java.io.File): javax.sound.midi.Sequence
                    public static class: java.lang.Class<any>
                }
                class StandardMidiFileWriter extends javax.sound.midi.spi.MidiFileWriter {
                    public constructor()
                    public getMidiFileTypes(): int[]
                    public getMidiFileTypes(arg0: javax.sound.midi.Sequence): int[]
                    public isFileTypeSupported(arg0: int): boolean
                    public write(arg0: javax.sound.midi.Sequence, arg1: int, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.midi.Sequence, arg1: int, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                abstract class SunFileReader extends javax.sound.sampled.spi.AudioFileReader {
                    protected static bisBufferSize: int
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                abstract class SunFileWriter extends javax.sound.sampled.spi.AudioFileWriter {
                    protected static bufferSize: int
                    protected static bisBufferSize: int
                    public getAudioFileTypes(): javax.sound.sampled.AudioFileFormat$Type[]
                    public getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                class Toolkit {
                    public static getPCMConvertedAudioInputStream(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class UlawCodec extends com.sun.media.sound.SunCodec {
                    public constructor()
                    public getTargetEncodings(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetFormats(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat[]
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class WaveExtensibleFileReader extends javax.sound.sampled.spi.AudioFileReader {
                    public constructor()
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class WaveFileFormat extends javax.sound.sampled.AudioFileFormat {
                    public static class: java.lang.Class<any>
                }
                class WaveFileReader extends com.sun.media.sound.SunFileReader {
                    public constructor()
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class WaveFileWriter extends com.sun.media.sound.SunFileWriter {
                    public constructor()
                    public getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                class WaveFloatFileReader extends javax.sound.sampled.spi.AudioFileReader {
                    public constructor()
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                class WaveFloatFileWriter extends javax.sound.sampled.spi.AudioFileWriter {
                    public constructor()
                    public getAudioFileTypes(): javax.sound.sampled.AudioFileFormat$Type[]
                    public getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: com.sun.media.sound.RIFFWriter): void
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
            }
        }
    }
}
declare namespace java {
    namespace applet {
        class Applet extends java.awt.Panel {
            public constructor()
            public setStub(arg0: java.applet.AppletStub): void
            public isActive(): boolean
            public getDocumentBase(): java.net.URL
            public getCodeBase(): java.net.URL
            public getParameter(arg0: java.lang.String | string): string
            public getAppletContext(): java.applet.AppletContext
            public resize(arg0: int, arg1: int): void
            public resize(arg0: java.awt.Dimension): void
            public isValidateRoot(): boolean
            public showStatus(arg0: java.lang.String | string): void
            public getImage(arg0: java.net.URL): java.awt.Image
            public getImage(arg0: java.net.URL, arg1: java.lang.String | string): java.awt.Image
            public static newAudioClip(arg0: java.net.URL): java.applet.AudioClip
            public getAudioClip(arg0: java.net.URL): java.applet.AudioClip
            public getAudioClip(arg0: java.net.URL, arg1: java.lang.String | string): java.applet.AudioClip
            public getAppletInfo(): string
            public getLocale(): java.util.Locale
            public getParameterInfo(): java.lang.String[][]
            public play(arg0: java.net.URL): void
            public play(arg0: java.net.URL, arg1: java.lang.String | string): void
            public init(): void
            public start(): void
            public stop(): void
            public destroy(): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        interface AppletContext {
            getAudioClip(arg0: java.net.URL): java.applet.AudioClip
            getImage(arg0: java.net.URL): java.awt.Image
            getApplet(arg0: java.lang.String | string): java.applet.Applet
            getApplets(): java.util.Enumeration<java.applet.Applet>
            showDocument(arg0: java.net.URL): void
            showDocument(arg0: java.net.URL, arg1: java.lang.String | string): void
            showStatus(arg0: java.lang.String | string): void
            setStream(arg0: java.lang.String | string, arg1: java.io.InputStream): void
            getStream(arg0: java.lang.String | string): java.io.InputStream
            getStreamKeys(): java.util.Iterator<java.lang.String>
        }
        interface AppletStub {
            isActive(): boolean
            getDocumentBase(): java.net.URL
            getCodeBase(): java.net.URL
            getParameter(arg0: java.lang.String | string): string
            getAppletContext(): java.applet.AppletContext
            appletResize(arg0: int, arg1: int): void
        }
        interface AudioClip {
            play(): void
            loop(): void
            stop(): void
        }
    }
    namespace awt {
        namespace color {
            class CMMException extends java.lang.RuntimeException {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            abstract class ColorSpace implements java.io.Serializable {
                public static TYPE_XYZ: int
                public static TYPE_Lab: int
                public static TYPE_Luv: int
                public static TYPE_YCbCr: int
                public static TYPE_Yxy: int
                public static TYPE_RGB: int
                public static TYPE_GRAY: int
                public static TYPE_HSV: int
                public static TYPE_HLS: int
                public static TYPE_CMYK: int
                public static TYPE_CMY: int
                public static TYPE_2CLR: int
                public static TYPE_3CLR: int
                public static TYPE_4CLR: int
                public static TYPE_5CLR: int
                public static TYPE_6CLR: int
                public static TYPE_7CLR: int
                public static TYPE_8CLR: int
                public static TYPE_9CLR: int
                public static TYPE_ACLR: int
                public static TYPE_BCLR: int
                public static TYPE_CCLR: int
                public static TYPE_DCLR: int
                public static TYPE_ECLR: int
                public static TYPE_FCLR: int
                public static CS_sRGB: int
                public static CS_LINEAR_RGB: int
                public static CS_CIEXYZ: int
                public static CS_PYCC: int
                public static CS_GRAY: int
                protected constructor(arg0: int, arg1: int)
                public static getInstance(arg0: int): java.awt.color.ColorSpace
                public isCS_sRGB(): boolean
                public toRGB(arg0: float[]): float[]
                public fromRGB(arg0: float[]): float[]
                public toCIEXYZ(arg0: float[]): float[]
                public fromCIEXYZ(arg0: float[]): float[]
                public getType(): int
                public getNumComponents(): int
                public getName(arg0: int): string
                public getMinValue(arg0: int): float
                public getMaxValue(arg0: int): float
                public static class: java.lang.Class<any>
            }
            class ICC_ColorSpace extends java.awt.color.ColorSpace {
                public constructor(arg0: java.awt.color.ICC_Profile)
                public getProfile(): java.awt.color.ICC_Profile
                public toRGB(arg0: float[]): float[]
                public fromRGB(arg0: float[]): float[]
                public toCIEXYZ(arg0: float[]): float[]
                public fromCIEXYZ(arg0: float[]): float[]
                public getMinValue(arg0: int): float
                public getMaxValue(arg0: int): float
                public static class: java.lang.Class<any>
            }
            class ICC_Profile implements java.io.Serializable {
                public static CLASS_INPUT: int
                public static CLASS_DISPLAY: int
                public static CLASS_OUTPUT: int
                public static CLASS_DEVICELINK: int
                public static CLASS_COLORSPACECONVERSION: int
                public static CLASS_ABSTRACT: int
                public static CLASS_NAMEDCOLOR: int
                public static icSigXYZData: int
                public static icSigLabData: int
                public static icSigLuvData: int
                public static icSigYCbCrData: int
                public static icSigYxyData: int
                public static icSigRgbData: int
                public static icSigGrayData: int
                public static icSigHsvData: int
                public static icSigHlsData: int
                public static icSigCmykData: int
                public static icSigCmyData: int
                public static icSigSpace2CLR: int
                public static icSigSpace3CLR: int
                public static icSigSpace4CLR: int
                public static icSigSpace5CLR: int
                public static icSigSpace6CLR: int
                public static icSigSpace7CLR: int
                public static icSigSpace8CLR: int
                public static icSigSpace9CLR: int
                public static icSigSpaceACLR: int
                public static icSigSpaceBCLR: int
                public static icSigSpaceCCLR: int
                public static icSigSpaceDCLR: int
                public static icSigSpaceECLR: int
                public static icSigSpaceFCLR: int
                public static icSigInputClass: int
                public static icSigDisplayClass: int
                public static icSigOutputClass: int
                public static icSigLinkClass: int
                public static icSigAbstractClass: int
                public static icSigColorSpaceClass: int
                public static icSigNamedColorClass: int
                public static icPerceptual: int
                public static icRelativeColorimetric: int
                public static icMediaRelativeColorimetric: int
                public static icSaturation: int
                public static icAbsoluteColorimetric: int
                public static icICCAbsoluteColorimetric: int
                public static icSigHead: int
                public static icSigAToB0Tag: int
                public static icSigAToB1Tag: int
                public static icSigAToB2Tag: int
                public static icSigBlueColorantTag: int
                public static icSigBlueMatrixColumnTag: int
                public static icSigBlueTRCTag: int
                public static icSigBToA0Tag: int
                public static icSigBToA1Tag: int
                public static icSigBToA2Tag: int
                public static icSigCalibrationDateTimeTag: int
                public static icSigCharTargetTag: int
                public static icSigCopyrightTag: int
                public static icSigCrdInfoTag: int
                public static icSigDeviceMfgDescTag: int
                public static icSigDeviceModelDescTag: int
                public static icSigDeviceSettingsTag: int
                public static icSigGamutTag: int
                public static icSigGrayTRCTag: int
                public static icSigGreenColorantTag: int
                public static icSigGreenMatrixColumnTag: int
                public static icSigGreenTRCTag: int
                public static icSigLuminanceTag: int
                public static icSigMeasurementTag: int
                public static icSigMediaBlackPointTag: int
                public static icSigMediaWhitePointTag: int
                public static icSigNamedColor2Tag: int
                public static icSigOutputResponseTag: int
                public static icSigPreview0Tag: int
                public static icSigPreview1Tag: int
                public static icSigPreview2Tag: int
                public static icSigProfileDescriptionTag: int
                public static icSigProfileSequenceDescTag: int
                public static icSigPs2CRD0Tag: int
                public static icSigPs2CRD1Tag: int
                public static icSigPs2CRD2Tag: int
                public static icSigPs2CRD3Tag: int
                public static icSigPs2CSATag: int
                public static icSigPs2RenderingIntentTag: int
                public static icSigRedColorantTag: int
                public static icSigRedMatrixColumnTag: int
                public static icSigRedTRCTag: int
                public static icSigScreeningDescTag: int
                public static icSigScreeningTag: int
                public static icSigTechnologyTag: int
                public static icSigUcrBgTag: int
                public static icSigViewingCondDescTag: int
                public static icSigViewingConditionsTag: int
                public static icSigChromaticityTag: int
                public static icSigChromaticAdaptationTag: int
                public static icSigColorantOrderTag: int
                public static icSigColorantTableTag: int
                public static icHdrSize: int
                public static icHdrCmmId: int
                public static icHdrVersion: int
                public static icHdrDeviceClass: int
                public static icHdrColorSpace: int
                public static icHdrPcs: int
                public static icHdrDate: int
                public static icHdrMagic: int
                public static icHdrPlatform: int
                public static icHdrFlags: int
                public static icHdrManufacturer: int
                public static icHdrModel: int
                public static icHdrAttributes: int
                public static icHdrRenderingIntent: int
                public static icHdrIlluminant: int
                public static icHdrCreator: int
                public static icHdrProfileID: int
                public static icTagType: int
                public static icTagReserved: int
                public static icCurveCount: int
                public static icCurveData: int
                public static icXYZNumberX: int
                protected finalize(): void
                public static getInstance(arg0: byte[]): java.awt.color.ICC_Profile
                public static getInstance(arg0: int): java.awt.color.ICC_Profile
                public static getInstance(arg0: java.lang.String | string): java.awt.color.ICC_Profile
                public static getInstance(arg0: java.io.InputStream): java.awt.color.ICC_Profile
                public getMajorVersion(): int
                public getMinorVersion(): int
                public getProfileClass(): int
                public getColorSpaceType(): int
                public getPCSType(): int
                public write(arg0: java.lang.String | string): void
                public write(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): void
                public getData(): byte[]
                public getData(arg0: int): byte[]
                public setData(arg0: int, arg1: byte[]): void
                public getNumComponents(): int
                protected readResolve(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class ICC_ProfileGray extends java.awt.color.ICC_Profile {
                public getMediaWhitePoint(): float[]
                public getGamma(): float
                public getTRC(): short[]
                public static class: java.lang.Class<any>
            }
            class ICC_ProfileRGB extends java.awt.color.ICC_Profile {
                public static REDCOMPONENT: int
                public static GREENCOMPONENT: int
                public static BLUECOMPONENT: int
                public getMediaWhitePoint(): float[]
                public getMatrix(): float[][]
                public getGamma(arg0: int): float
                public getTRC(arg0: int): short[]
                public static class: java.lang.Class<any>
            }
            class ProfileDataException extends java.lang.RuntimeException {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
        }
        namespace dnd {
            namespace peer {
                interface DragSourceContextPeer {
                    startDrag(arg0: java.awt.dnd.DragSourceContext, arg1: java.awt.Cursor, arg2: java.awt.Image, arg3: java.awt.Point): void
                    getCursor(): java.awt.Cursor
                    setCursor(arg0: java.awt.Cursor): void
                    transferablesFlavorsChanged(): void
                }
                interface DropTargetContextPeer {
                    setTargetActions(arg0: int): void
                    getTargetActions(): int
                    getDropTarget(): java.awt.dnd.DropTarget
                    getTransferDataFlavors(): java.awt.datatransfer.DataFlavor[]
                    getTransferable(): java.awt.datatransfer.Transferable
                    isTransferableJVMLocal(): boolean
                    acceptDrag(arg0: int): void
                    rejectDrag(): void
                    acceptDrop(arg0: int): void
                    rejectDrop(): void
                    dropComplete(arg0: boolean): void
                }
                interface DropTargetPeer {
                    addDropTarget(arg0: java.awt.dnd.DropTarget): void
                    removeDropTarget(arg0: java.awt.dnd.DropTarget): void
                }
            }
            interface Autoscroll {
                getAutoscrollInsets(): java.awt.Insets
                autoscroll(arg0: java.awt.Point): void
            }
            class DnDConstants {
                public static ACTION_NONE: int
                public static ACTION_COPY: int
                public static ACTION_MOVE: int
                public static ACTION_COPY_OR_MOVE: int
                public static ACTION_LINK: int
                public static ACTION_REFERENCE: int
                public static class: java.lang.Class<any>
            }
            class DnDEventMulticaster extends java.awt.AWTEventMulticaster implements java.awt.dnd.DragSourceListener , java.awt.dnd.DragSourceMotionListener {
                protected constructor(arg0: java.util.EventListener, arg1: java.util.EventListener)
                public dragEnter(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragOver(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dropActionChanged(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragExit(arg0: java.awt.dnd.DragSourceEvent): void
                public dragDropEnd(arg0: java.awt.dnd.DragSourceDropEvent): void
                public dragMouseMoved(arg0: java.awt.dnd.DragSourceDragEvent): void
                public static add(arg0: java.awt.dnd.DragSourceListener, arg1: java.awt.dnd.DragSourceListener): java.awt.dnd.DragSourceListener
                public static add(arg0: java.awt.dnd.DragSourceMotionListener, arg1: java.awt.dnd.DragSourceMotionListener): java.awt.dnd.DragSourceMotionListener
                public static remove(arg0: java.awt.dnd.DragSourceListener, arg1: java.awt.dnd.DragSourceListener): java.awt.dnd.DragSourceListener
                public static remove(arg0: java.awt.dnd.DragSourceMotionListener, arg1: java.awt.dnd.DragSourceMotionListener): java.awt.dnd.DragSourceMotionListener
                protected static addInternal(arg0: java.util.EventListener, arg1: java.util.EventListener): java.util.EventListener
                protected remove(arg0: java.util.EventListener): java.util.EventListener
                protected static removeInternal(arg0: java.util.EventListener, arg1: java.util.EventListener): java.util.EventListener
                protected static save(arg0: java.io.ObjectOutputStream, arg1: java.lang.String | string, arg2: java.util.EventListener): void
                public static class: java.lang.Class<any>
            }
            class DragGestureEvent extends java.util.EventObject {
                public constructor(arg0: java.awt.dnd.DragGestureRecognizer, arg1: int, arg2: java.awt.Point, arg3: java.util.List<java.awt.event.InputEvent>)
                public getSourceAsDragGestureRecognizer(): java.awt.dnd.DragGestureRecognizer
                public getComponent(): java.awt.Component
                public getDragSource(): java.awt.dnd.DragSource
                public getDragOrigin(): java.awt.Point
                public iterator(): java.util.Iterator<java.awt.event.InputEvent>
                public toArray(): java.lang.Object[]
                public toArray(arg0: java.lang.Object[]): java.lang.Object[]
                public getDragAction(): int
                public getTriggerEvent(): java.awt.event.InputEvent
                public startDrag(arg0: java.awt.Cursor, arg1: java.awt.datatransfer.Transferable): void
                public startDrag(arg0: java.awt.Cursor, arg1: java.awt.datatransfer.Transferable, arg2: java.awt.dnd.DragSourceListener): void
                public startDrag(arg0: java.awt.Cursor, arg1: java.awt.Image, arg2: java.awt.Point, arg3: java.awt.datatransfer.Transferable, arg4: java.awt.dnd.DragSourceListener): void
                public static class: java.lang.Class<any>
            }
            interface DragGestureListener extends java.util.EventListener {
                dragGestureRecognized(arg0: java.awt.dnd.DragGestureEvent): void
            }
            abstract class DragGestureRecognizer implements java.io.Serializable {
                protected dragSource: java.awt.dnd.DragSource
                protected component: java.awt.Component
                protected dragGestureListener: java.awt.dnd.DragGestureListener
                protected sourceActions: int
                protected events: java.util.ArrayList<java.awt.event.InputEvent>
                protected constructor(arg0: java.awt.dnd.DragSource, arg1: java.awt.Component, arg2: int, arg3: java.awt.dnd.DragGestureListener)
                protected constructor(arg0: java.awt.dnd.DragSource, arg1: java.awt.Component, arg2: int)
                protected constructor(arg0: java.awt.dnd.DragSource, arg1: java.awt.Component)
                protected constructor(arg0: java.awt.dnd.DragSource)
                protected registerListeners(): void
                protected unregisterListeners(): void
                public getDragSource(): java.awt.dnd.DragSource
                public getComponent(): java.awt.Component
                public setComponent(arg0: java.awt.Component): void
                public getSourceActions(): int
                public setSourceActions(arg0: int): void
                public getTriggerEvent(): java.awt.event.InputEvent
                public resetRecognizer(): void
                public addDragGestureListener(arg0: java.awt.dnd.DragGestureListener): void
                public removeDragGestureListener(arg0: java.awt.dnd.DragGestureListener): void
                protected fireDragGestureRecognized(arg0: int, arg1: java.awt.Point): void
                protected appendEvent(arg0: java.awt.event.InputEvent): void
                public static class: java.lang.Class<any>
            }
            class DragSource implements java.io.Serializable {
                public static DefaultCopyDrop: java.awt.Cursor
                public static DefaultMoveDrop: java.awt.Cursor
                public static DefaultLinkDrop: java.awt.Cursor
                public static DefaultCopyNoDrop: java.awt.Cursor
                public static DefaultMoveNoDrop: java.awt.Cursor
                public static DefaultLinkNoDrop: java.awt.Cursor
                public static getDefaultDragSource(): java.awt.dnd.DragSource
                public static isDragImageSupported(): boolean
                public constructor()
                public startDrag(arg0: java.awt.dnd.DragGestureEvent, arg1: java.awt.Cursor, arg2: java.awt.Image, arg3: java.awt.Point, arg4: java.awt.datatransfer.Transferable, arg5: java.awt.dnd.DragSourceListener, arg6: java.awt.datatransfer.FlavorMap): void
                public startDrag(arg0: java.awt.dnd.DragGestureEvent, arg1: java.awt.Cursor, arg2: java.awt.datatransfer.Transferable, arg3: java.awt.dnd.DragSourceListener, arg4: java.awt.datatransfer.FlavorMap): void
                public startDrag(arg0: java.awt.dnd.DragGestureEvent, arg1: java.awt.Cursor, arg2: java.awt.Image, arg3: java.awt.Point, arg4: java.awt.datatransfer.Transferable, arg5: java.awt.dnd.DragSourceListener): void
                public startDrag(arg0: java.awt.dnd.DragGestureEvent, arg1: java.awt.Cursor, arg2: java.awt.datatransfer.Transferable, arg3: java.awt.dnd.DragSourceListener): void
                protected createDragSourceContext(arg0: java.awt.dnd.peer.DragSourceContextPeer, arg1: java.awt.dnd.DragGestureEvent, arg2: java.awt.Cursor, arg3: java.awt.Image, arg4: java.awt.Point, arg5: java.awt.datatransfer.Transferable, arg6: java.awt.dnd.DragSourceListener): java.awt.dnd.DragSourceContext
                public getFlavorMap(): java.awt.datatransfer.FlavorMap
                public createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.Component, arg2: int, arg3: java.awt.dnd.DragGestureListener): T
                public createDefaultDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Component, arg1: int, arg2: java.awt.dnd.DragGestureListener): java.awt.dnd.DragGestureRecognizer
                public addDragSourceListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DragSourceListener): void
                public removeDragSourceListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DragSourceListener): void
                public getDragSourceListeners<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.dnd.DragSourceListener[]
                public addDragSourceMotionListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DragSourceMotionListener): void
                public removeDragSourceMotionListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DragSourceMotionListener): void
                public getDragSourceMotionListeners<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.dnd.DragSourceMotionListener[]
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public static getDragThreshold<T extends java.util.EventListener>(): int
                public static class: java.lang.Class<any>
            }
            abstract class DragSourceAdapter implements java.awt.dnd.DragSourceListener , java.awt.dnd.DragSourceMotionListener {
                public constructor()
                public dragEnter(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragOver(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragMouseMoved(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dropActionChanged(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragExit(arg0: java.awt.dnd.DragSourceEvent): void
                public dragDropEnd(arg0: java.awt.dnd.DragSourceDropEvent): void
                public static class: java.lang.Class<any>
            }
            class DragSourceContext implements java.awt.dnd.DragSourceListener , java.awt.dnd.DragSourceMotionListener , java.io.Serializable {
                protected static DEFAULT: int
                protected static ENTER: int
                protected static OVER: int
                protected static CHANGED: int
                public constructor(arg0: java.awt.dnd.peer.DragSourceContextPeer, arg1: java.awt.dnd.DragGestureEvent, arg2: java.awt.Cursor, arg3: java.awt.Image, arg4: java.awt.Point, arg5: java.awt.datatransfer.Transferable, arg6: java.awt.dnd.DragSourceListener)
                public getDragSource(): java.awt.dnd.DragSource
                public getComponent(): java.awt.Component
                public getTrigger(): java.awt.dnd.DragGestureEvent
                public getSourceActions(): int
                public setCursor(arg0: java.awt.Cursor): void
                public getCursor(): java.awt.Cursor
                public addDragSourceListener(arg0: java.awt.dnd.DragSourceListener): void
                public removeDragSourceListener(arg0: java.awt.dnd.DragSourceListener): void
                public transferablesFlavorsChanged(): void
                public dragEnter(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragOver(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragExit(arg0: java.awt.dnd.DragSourceEvent): void
                public dropActionChanged(arg0: java.awt.dnd.DragSourceDragEvent): void
                public dragDropEnd(arg0: java.awt.dnd.DragSourceDropEvent): void
                public dragMouseMoved(arg0: java.awt.dnd.DragSourceDragEvent): void
                public getTransferable(): java.awt.datatransfer.Transferable
                protected updateCurrentCursor(arg0: int, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class DragSourceDragEvent extends java.awt.dnd.DragSourceEvent {
                public constructor(arg0: java.awt.dnd.DragSourceContext, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: java.awt.dnd.DragSourceContext, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int)
                public getTargetActions(): int
                public getGestureModifiers(): int
                public getGestureModifiersEx(): int
                public getUserAction(): int
                public getDropAction(): int
                public static class: java.lang.Class<any>
            }
            class DragSourceDropEvent extends java.awt.dnd.DragSourceEvent {
                public constructor(arg0: java.awt.dnd.DragSourceContext, arg1: int, arg2: boolean)
                public constructor(arg0: java.awt.dnd.DragSourceContext, arg1: int, arg2: boolean, arg3: int, arg4: int)
                public constructor(arg0: java.awt.dnd.DragSourceContext)
                public getDropSuccess(): boolean
                public getDropAction(): int
                public static class: java.lang.Class<any>
            }
            class DragSourceEvent extends java.util.EventObject {
                public constructor(arg0: java.awt.dnd.DragSourceContext)
                public constructor(arg0: java.awt.dnd.DragSourceContext, arg1: int, arg2: int)
                public getDragSourceContext(): java.awt.dnd.DragSourceContext
                public getLocation(): java.awt.Point
                public getX(): int
                public getY(): int
                public static class: java.lang.Class<any>
            }
            interface DragSourceListener extends java.util.EventListener {
                dragEnter(arg0: java.awt.dnd.DragSourceDragEvent): void
                dragOver(arg0: java.awt.dnd.DragSourceDragEvent): void
                dropActionChanged(arg0: java.awt.dnd.DragSourceDragEvent): void
                dragExit(arg0: java.awt.dnd.DragSourceEvent): void
                dragDropEnd(arg0: java.awt.dnd.DragSourceDropEvent): void
            }
            interface DragSourceMotionListener extends java.util.EventListener {
                dragMouseMoved(arg0: java.awt.dnd.DragSourceDragEvent): void
            }
            class DropTarget implements java.awt.dnd.DropTargetListener , java.io.Serializable {
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.dnd.DropTargetListener, arg3: boolean, arg4: java.awt.datatransfer.FlavorMap)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.dnd.DropTargetListener, arg3: boolean)
                public constructor()
                public constructor(arg0: java.awt.Component, arg1: java.awt.dnd.DropTargetListener)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.dnd.DropTargetListener)
                public setComponent(arg0: java.awt.Component): void
                public getComponent(): java.awt.Component
                public setDefaultActions(arg0: int): void
                public getDefaultActions(): int
                public setActive(arg0: boolean): void
                public isActive(): boolean
                public addDropTargetListener(arg0: java.awt.dnd.DropTargetListener): void
                public removeDropTargetListener(arg0: java.awt.dnd.DropTargetListener): void
                public dragEnter(arg0: java.awt.dnd.DropTargetDragEvent): void
                public dragOver(arg0: java.awt.dnd.DropTargetDragEvent): void
                public dropActionChanged(arg0: java.awt.dnd.DropTargetDragEvent): void
                public dragExit(arg0: java.awt.dnd.DropTargetEvent): void
                public drop(arg0: java.awt.dnd.DropTargetDropEvent): void
                public getFlavorMap(): java.awt.datatransfer.FlavorMap
                public setFlavorMap(arg0: java.awt.datatransfer.FlavorMap): void
                public addNotify(arg0: java.awt.peer.ComponentPeer): void
                public removeNotify(arg0: java.awt.peer.ComponentPeer): void
                public getDropTargetContext(): java.awt.dnd.DropTargetContext
                protected createDropTargetContext(): java.awt.dnd.DropTargetContext
                protected createDropTargetAutoScroller(arg0: java.awt.Component, arg1: java.awt.Point): java.awt.dnd.DropTarget$DropTargetAutoScroller
                protected initializeAutoscrolling(arg0: java.awt.Point): void
                protected updateAutoscroll(arg0: java.awt.Point): void
                protected clearAutoscroll(): void
                public static class: java.lang.Class<any>
            }
            abstract class DropTargetAdapter implements java.awt.dnd.DropTargetListener {
                public constructor()
                public dragEnter(arg0: java.awt.dnd.DropTargetDragEvent): void
                public dragOver(arg0: java.awt.dnd.DropTargetDragEvent): void
                public dropActionChanged(arg0: java.awt.dnd.DropTargetDragEvent): void
                public dragExit(arg0: java.awt.dnd.DropTargetEvent): void
                public static class: java.lang.Class<any>
            }
            class DropTargetContext implements java.io.Serializable {
                public getDropTarget(): java.awt.dnd.DropTarget
                public getComponent(): java.awt.Component
                public addNotify(arg0: java.awt.dnd.peer.DropTargetContextPeer): void
                public removeNotify(): void
                protected setTargetActions(arg0: int): void
                protected getTargetActions(): int
                public dropComplete(arg0: boolean): void
                protected acceptDrag(arg0: int): void
                protected rejectDrag(): void
                protected acceptDrop(arg0: int): void
                protected rejectDrop(): void
                protected getCurrentDataFlavors(): java.awt.datatransfer.DataFlavor[]
                protected getCurrentDataFlavorsAsList(): java.util.List<java.awt.datatransfer.DataFlavor>
                protected isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                protected getTransferable(): java.awt.datatransfer.Transferable
                protected createTransferableProxy(arg0: java.awt.datatransfer.Transferable, arg1: boolean): java.awt.datatransfer.Transferable
                public static class: java.lang.Class<any>
            }
            class DropTargetDragEvent extends java.awt.dnd.DropTargetEvent {
                public constructor(arg0: java.awt.dnd.DropTargetContext, arg1: java.awt.Point, arg2: int, arg3: int)
                public getLocation(): java.awt.Point
                public getCurrentDataFlavors(): java.awt.datatransfer.DataFlavor[]
                public getCurrentDataFlavorsAsList(): java.util.List<java.awt.datatransfer.DataFlavor>
                public isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                public getSourceActions(): int
                public getDropAction(): int
                public getTransferable(): java.awt.datatransfer.Transferable
                public acceptDrag(arg0: int): void
                public rejectDrag(): void
                public static class: java.lang.Class<any>
            }
            class DropTargetDropEvent extends java.awt.dnd.DropTargetEvent {
                public constructor(arg0: java.awt.dnd.DropTargetContext, arg1: java.awt.Point, arg2: int, arg3: int)
                public constructor(arg0: java.awt.dnd.DropTargetContext, arg1: java.awt.Point, arg2: int, arg3: int, arg4: boolean)
                public getLocation(): java.awt.Point
                public getCurrentDataFlavors(): java.awt.datatransfer.DataFlavor[]
                public getCurrentDataFlavorsAsList(): java.util.List<java.awt.datatransfer.DataFlavor>
                public isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                public getSourceActions(): int
                public getDropAction(): int
                public getTransferable(): java.awt.datatransfer.Transferable
                public acceptDrop(arg0: int): void
                public rejectDrop(): void
                public dropComplete(arg0: boolean): void
                public isLocalTransfer(): boolean
                public static class: java.lang.Class<any>
            }
            class DropTargetEvent extends java.util.EventObject {
                protected context: java.awt.dnd.DropTargetContext
                public constructor(arg0: java.awt.dnd.DropTargetContext)
                public getDropTargetContext(): java.awt.dnd.DropTargetContext
                public static class: java.lang.Class<any>
            }
            interface DropTargetListener extends java.util.EventListener {
                dragEnter(arg0: java.awt.dnd.DropTargetDragEvent): void
                dragOver(arg0: java.awt.dnd.DropTargetDragEvent): void
                dropActionChanged(arg0: java.awt.dnd.DropTargetDragEvent): void
                dragExit(arg0: java.awt.dnd.DropTargetEvent): void
                drop(arg0: java.awt.dnd.DropTargetDropEvent): void
            }
            class InvalidDnDOperationException extends java.lang.IllegalStateException {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            abstract class MouseDragGestureRecognizer extends java.awt.dnd.DragGestureRecognizer implements java.awt.event.MouseListener , java.awt.event.MouseMotionListener {
                protected constructor(arg0: java.awt.dnd.DragSource, arg1: java.awt.Component, arg2: int, arg3: java.awt.dnd.DragGestureListener)
                protected constructor(arg0: java.awt.dnd.DragSource, arg1: java.awt.Component, arg2: int)
                protected constructor(arg0: java.awt.dnd.DragSource, arg1: java.awt.Component)
                protected constructor(arg0: java.awt.dnd.DragSource)
                protected registerListeners(): void
                protected unregisterListeners(): void
                public mouseClicked(arg0: java.awt.event.MouseEvent): void
                public mousePressed(arg0: java.awt.event.MouseEvent): void
                public mouseReleased(arg0: java.awt.event.MouseEvent): void
                public mouseEntered(arg0: java.awt.event.MouseEvent): void
                public mouseExited(arg0: java.awt.event.MouseEvent): void
                public mouseDragged(arg0: java.awt.event.MouseEvent): void
                public mouseMoved(arg0: java.awt.event.MouseEvent): void
                public static class: java.lang.Class<any>
            }
            class SerializationTester {
                public static class: java.lang.Class<any>
            }
        }
        namespace event {
            interface AWTEventListener extends java.util.EventListener {
                eventDispatched(arg0: java.awt.AWTEvent): void
            }
            class AWTEventListenerProxy extends java.util.EventListenerProxy<java.awt.event.AWTEventListener> implements java.awt.event.AWTEventListener {
                public constructor(arg0: long, arg1: java.awt.event.AWTEventListener)
                public eventDispatched(arg0: java.awt.AWTEvent): void
                public getEventMask(): long
                public static class: java.lang.Class<any>
            }
            class ActionEvent extends java.awt.AWTEvent {
                public static SHIFT_MASK: int
                public static CTRL_MASK: int
                public static META_MASK: int
                public static ALT_MASK: int
                public static ACTION_FIRST: int
                public static ACTION_LAST: int
                public static ACTION_PERFORMED: int
                public constructor(arg0: java.lang.Object, arg1: int, arg2: java.lang.String | string)
                public constructor(arg0: java.lang.Object, arg1: int, arg2: java.lang.String | string, arg3: int)
                public constructor(arg0: java.lang.Object, arg1: int, arg2: java.lang.String | string, arg3: long, arg4: int)
                public getActionCommand(): string
                public getWhen(): long
                public getModifiers(): int
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface ActionListener extends java.util.EventListener {
                actionPerformed(arg0: java.awt.event.ActionEvent): void
            }
            class AdjustmentEvent extends java.awt.AWTEvent {
                public static ADJUSTMENT_FIRST: int
                public static ADJUSTMENT_LAST: int
                public static ADJUSTMENT_VALUE_CHANGED: int
                public static UNIT_INCREMENT: int
                public static UNIT_DECREMENT: int
                public static BLOCK_DECREMENT: int
                public static BLOCK_INCREMENT: int
                public static TRACK: int
                public constructor(arg0: java.awt.Adjustable, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: java.awt.Adjustable, arg1: int, arg2: int, arg3: int, arg4: boolean)
                public getAdjustable(): java.awt.Adjustable
                public getValue(): int
                public getAdjustmentType(): int
                public getValueIsAdjusting(): boolean
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface AdjustmentListener extends java.util.EventListener {
                adjustmentValueChanged(arg0: java.awt.event.AdjustmentEvent): void
            }
            abstract class ComponentAdapter implements java.awt.event.ComponentListener {
                public constructor()
                public componentResized(arg0: java.awt.event.ComponentEvent): void
                public componentMoved(arg0: java.awt.event.ComponentEvent): void
                public componentShown(arg0: java.awt.event.ComponentEvent): void
                public componentHidden(arg0: java.awt.event.ComponentEvent): void
                public static class: java.lang.Class<any>
            }
            class ComponentEvent extends java.awt.AWTEvent {
                public static COMPONENT_FIRST: int
                public static COMPONENT_LAST: int
                public static COMPONENT_MOVED: int
                public static COMPONENT_RESIZED: int
                public static COMPONENT_SHOWN: int
                public static COMPONENT_HIDDEN: int
                public constructor(arg0: java.awt.Component, arg1: int)
                public getComponent(): java.awt.Component
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface ComponentListener extends java.util.EventListener {
                componentResized(arg0: java.awt.event.ComponentEvent): void
                componentMoved(arg0: java.awt.event.ComponentEvent): void
                componentShown(arg0: java.awt.event.ComponentEvent): void
                componentHidden(arg0: java.awt.event.ComponentEvent): void
            }
            abstract class ContainerAdapter implements java.awt.event.ContainerListener {
                public constructor()
                public componentAdded(arg0: java.awt.event.ContainerEvent): void
                public componentRemoved(arg0: java.awt.event.ContainerEvent): void
                public static class: java.lang.Class<any>
            }
            class ContainerEvent extends java.awt.event.ComponentEvent {
                public static CONTAINER_FIRST: int
                public static CONTAINER_LAST: int
                public static COMPONENT_ADDED: int
                public static COMPONENT_REMOVED: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.Component)
                public getContainer(): java.awt.Container
                public getChild(): java.awt.Component
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface ContainerListener extends java.util.EventListener {
                componentAdded(arg0: java.awt.event.ContainerEvent): void
                componentRemoved(arg0: java.awt.event.ContainerEvent): void
            }
            abstract class FocusAdapter implements java.awt.event.FocusListener {
                public constructor()
                public focusGained(arg0: java.awt.event.FocusEvent): void
                public focusLost(arg0: java.awt.event.FocusEvent): void
                public static class: java.lang.Class<any>
            }
            class FocusEvent extends java.awt.event.ComponentEvent {
                public static FOCUS_FIRST: int
                public static FOCUS_LAST: int
                public static FOCUS_GAINED: int
                public static FOCUS_LOST: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: boolean, arg3: java.awt.Component)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: boolean)
                public constructor(arg0: java.awt.Component, arg1: int)
                public isTemporary(): boolean
                public getOppositeComponent(): java.awt.Component
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface FocusListener extends java.util.EventListener {
                focusGained(arg0: java.awt.event.FocusEvent): void
                focusLost(arg0: java.awt.event.FocusEvent): void
            }
            abstract class HierarchyBoundsAdapter implements java.awt.event.HierarchyBoundsListener {
                public constructor()
                public ancestorMoved(arg0: java.awt.event.HierarchyEvent): void
                public ancestorResized(arg0: java.awt.event.HierarchyEvent): void
                public static class: java.lang.Class<any>
            }
            interface HierarchyBoundsListener extends java.util.EventListener {
                ancestorMoved(arg0: java.awt.event.HierarchyEvent): void
                ancestorResized(arg0: java.awt.event.HierarchyEvent): void
            }
            class HierarchyEvent extends java.awt.AWTEvent {
                public static HIERARCHY_FIRST: int
                public static HIERARCHY_CHANGED: int
                public static ANCESTOR_MOVED: int
                public static ANCESTOR_RESIZED: int
                public static HIERARCHY_LAST: int
                public static PARENT_CHANGED: int
                public static DISPLAYABILITY_CHANGED: int
                public static SHOWING_CHANGED: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.Component, arg3: java.awt.Container)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.Component, arg3: java.awt.Container, arg4: long)
                public getComponent(): java.awt.Component
                public getChanged(): java.awt.Component
                public getChangedParent(): java.awt.Container
                public getChangeFlags(): long
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface HierarchyListener extends java.util.EventListener {
                hierarchyChanged(arg0: java.awt.event.HierarchyEvent): void
            }
            abstract class InputEvent extends java.awt.event.ComponentEvent {
                public static SHIFT_MASK: int
                public static CTRL_MASK: int
                public static META_MASK: int
                public static ALT_MASK: int
                public static ALT_GRAPH_MASK: int
                public static BUTTON1_MASK: int
                public static BUTTON2_MASK: int
                public static BUTTON3_MASK: int
                public static SHIFT_DOWN_MASK: int
                public static CTRL_DOWN_MASK: int
                public static META_DOWN_MASK: int
                public static ALT_DOWN_MASK: int
                public static BUTTON1_DOWN_MASK: int
                public static BUTTON2_DOWN_MASK: int
                public static BUTTON3_DOWN_MASK: int
                public static ALT_GRAPH_DOWN_MASK: int
                public static getMaskForButton(arg0: int): int
                public isShiftDown(): boolean
                public isControlDown(): boolean
                public isMetaDown(): boolean
                public isAltDown(): boolean
                public isAltGraphDown(): boolean
                public getWhen(): long
                public getModifiers(): int
                public getModifiersEx(): int
                public consume(): void
                public isConsumed(): boolean
                public static getModifiersExText(arg0: int): string
                public static class: java.lang.Class<any>
            }
            class InputMethodEvent extends java.awt.AWTEvent {
                public static INPUT_METHOD_FIRST: int
                public static INPUT_METHOD_TEXT_CHANGED: int
                public static CARET_POSITION_CHANGED: int
                public static INPUT_METHOD_LAST: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: java.text.AttributedCharacterIterator, arg4: int, arg5: java.awt.font.TextHitInfo, arg6: java.awt.font.TextHitInfo)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.text.AttributedCharacterIterator, arg3: int, arg4: java.awt.font.TextHitInfo, arg5: java.awt.font.TextHitInfo)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.font.TextHitInfo, arg3: java.awt.font.TextHitInfo)
                public getText(): java.text.AttributedCharacterIterator
                public getCommittedCharacterCount(): int
                public getCaret(): java.awt.font.TextHitInfo
                public getVisiblePosition(): java.awt.font.TextHitInfo
                public consume(): void
                public isConsumed(): boolean
                public getWhen(): long
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface InputMethodListener extends java.util.EventListener {
                inputMethodTextChanged(arg0: java.awt.event.InputMethodEvent): void
                caretPositionChanged(arg0: java.awt.event.InputMethodEvent): void
            }
            class InvocationEvent extends java.awt.AWTEvent implements java.awt.ActiveEvent {
                public static INVOCATION_FIRST: int
                public static INVOCATION_DEFAULT: int
                public static INVOCATION_LAST: int
                protected runnable: java.lang.Runnable
                protected notifier: java.lang.Object
                protected catchExceptions: boolean
                public constructor(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda)
                public constructor(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda, arg2: java.lang.Object, arg3: boolean)
                public constructor(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda, arg2: java.lang.Runnable | java.lang.Runnable$$Lambda, arg3: boolean)
                protected constructor(arg0: java.lang.Object, arg1: int, arg2: java.lang.Runnable | java.lang.Runnable$$Lambda, arg3: java.lang.Object, arg4: boolean)
                public dispatch(): void
                public getException(): java.lang.Exception
                public getThrowable(): java.lang.Throwable
                public getWhen(): long
                public isDispatched(): boolean
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            class InvocationEvent$$Lambda extends java.awt.AWTEvent implements java.awt.ActiveEvent {
                public static INVOCATION_FIRST: int
            }
            class ItemEvent extends java.awt.AWTEvent {
                public static ITEM_FIRST: int
                public static ITEM_LAST: int
                public static ITEM_STATE_CHANGED: int
                public static SELECTED: int
                public static DESELECTED: int
                public constructor(arg0: java.awt.ItemSelectable, arg1: int, arg2: java.lang.Object, arg3: int)
                public getItemSelectable(): java.awt.ItemSelectable
                public getItem(): java.lang.Object
                public getStateChange(): int
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface ItemListener extends java.util.EventListener {
                itemStateChanged(arg0: java.awt.event.ItemEvent): void
            }
            abstract class KeyAdapter implements java.awt.event.KeyListener {
                public constructor()
                public keyTyped(arg0: java.awt.event.KeyEvent): void
                public keyPressed(arg0: java.awt.event.KeyEvent): void
                public keyReleased(arg0: java.awt.event.KeyEvent): void
                public static class: java.lang.Class<any>
            }
            class KeyEvent extends java.awt.event.InputEvent {
                public static KEY_FIRST: int
                public static KEY_LAST: int
                public static KEY_TYPED: int
                public static KEY_PRESSED: int
                public static KEY_RELEASED: int
                public static VK_ENTER: int
                public static VK_BACK_SPACE: int
                public static VK_TAB: int
                public static VK_CANCEL: int
                public static VK_CLEAR: int
                public static VK_SHIFT: int
                public static VK_CONTROL: int
                public static VK_ALT: int
                public static VK_PAUSE: int
                public static VK_CAPS_LOCK: int
                public static VK_ESCAPE: int
                public static VK_SPACE: int
                public static VK_PAGE_UP: int
                public static VK_PAGE_DOWN: int
                public static VK_END: int
                public static VK_HOME: int
                public static VK_LEFT: int
                public static VK_UP: int
                public static VK_RIGHT: int
                public static VK_DOWN: int
                public static VK_COMMA: int
                public static VK_MINUS: int
                public static VK_PERIOD: int
                public static VK_SLASH: int
                public static VK_0: int
                public static VK_1: int
                public static VK_2: int
                public static VK_3: int
                public static VK_4: int
                public static VK_5: int
                public static VK_6: int
                public static VK_7: int
                public static VK_8: int
                public static VK_9: int
                public static VK_SEMICOLON: int
                public static VK_EQUALS: int
                public static VK_A: int
                public static VK_B: int
                public static VK_C: int
                public static VK_D: int
                public static VK_E: int
                public static VK_F: int
                public static VK_G: int
                public static VK_H: int
                public static VK_I: int
                public static VK_J: int
                public static VK_K: int
                public static VK_L: int
                public static VK_M: int
                public static VK_N: int
                public static VK_O: int
                public static VK_P: int
                public static VK_Q: int
                public static VK_R: int
                public static VK_S: int
                public static VK_T: int
                public static VK_U: int
                public static VK_V: int
                public static VK_W: int
                public static VK_X: int
                public static VK_Y: int
                public static VK_Z: int
                public static VK_OPEN_BRACKET: int
                public static VK_BACK_SLASH: int
                public static VK_CLOSE_BRACKET: int
                public static VK_NUMPAD0: int
                public static VK_NUMPAD1: int
                public static VK_NUMPAD2: int
                public static VK_NUMPAD3: int
                public static VK_NUMPAD4: int
                public static VK_NUMPAD5: int
                public static VK_NUMPAD6: int
                public static VK_NUMPAD7: int
                public static VK_NUMPAD8: int
                public static VK_NUMPAD9: int
                public static VK_MULTIPLY: int
                public static VK_ADD: int
                public static VK_SEPARATER: int
                public static VK_SEPARATOR: int
                public static VK_SUBTRACT: int
                public static VK_DECIMAL: int
                public static VK_DIVIDE: int
                public static VK_DELETE: int
                public static VK_NUM_LOCK: int
                public static VK_SCROLL_LOCK: int
                public static VK_F1: int
                public static VK_F2: int
                public static VK_F3: int
                public static VK_F4: int
                public static VK_F5: int
                public static VK_F6: int
                public static VK_F7: int
                public static VK_F8: int
                public static VK_F9: int
                public static VK_F10: int
                public static VK_F11: int
                public static VK_F12: int
                public static VK_F13: int
                public static VK_F14: int
                public static VK_F15: int
                public static VK_F16: int
                public static VK_F17: int
                public static VK_F18: int
                public static VK_F19: int
                public static VK_F20: int
                public static VK_F21: int
                public static VK_F22: int
                public static VK_F23: int
                public static VK_F24: int
                public static VK_PRINTSCREEN: int
                public static VK_INSERT: int
                public static VK_HELP: int
                public static VK_META: int
                public static VK_BACK_QUOTE: int
                public static VK_QUOTE: int
                public static VK_KP_UP: int
                public static VK_KP_DOWN: int
                public static VK_KP_LEFT: int
                public static VK_KP_RIGHT: int
                public static VK_DEAD_GRAVE: int
                public static VK_DEAD_ACUTE: int
                public static VK_DEAD_CIRCUMFLEX: int
                public static VK_DEAD_TILDE: int
                public static VK_DEAD_MACRON: int
                public static VK_DEAD_BREVE: int
                public static VK_DEAD_ABOVEDOT: int
                public static VK_DEAD_DIAERESIS: int
                public static VK_DEAD_ABOVERING: int
                public static VK_DEAD_DOUBLEACUTE: int
                public static VK_DEAD_CARON: int
                public static VK_DEAD_CEDILLA: int
                public static VK_DEAD_OGONEK: int
                public static VK_DEAD_IOTA: int
                public static VK_DEAD_VOICED_SOUND: int
                public static VK_DEAD_SEMIVOICED_SOUND: int
                public static VK_AMPERSAND: int
                public static VK_ASTERISK: int
                public static VK_QUOTEDBL: int
                public static VK_LESS: int
                public static VK_GREATER: int
                public static VK_BRACELEFT: int
                public static VK_BRACERIGHT: int
                public static VK_AT: int
                public static VK_COLON: int
                public static VK_CIRCUMFLEX: int
                public static VK_DOLLAR: int
                public static VK_EURO_SIGN: int
                public static VK_EXCLAMATION_MARK: int
                public static VK_INVERTED_EXCLAMATION_MARK: int
                public static VK_LEFT_PARENTHESIS: int
                public static VK_NUMBER_SIGN: int
                public static VK_PLUS: int
                public static VK_RIGHT_PARENTHESIS: int
                public static VK_UNDERSCORE: int
                public static VK_WINDOWS: int
                public static VK_CONTEXT_MENU: int
                public static VK_FINAL: int
                public static VK_CONVERT: int
                public static VK_NONCONVERT: int
                public static VK_ACCEPT: int
                public static VK_MODECHANGE: int
                public static VK_KANA: int
                public static VK_KANJI: int
                public static VK_ALPHANUMERIC: int
                public static VK_KATAKANA: int
                public static VK_HIRAGANA: int
                public static VK_FULL_WIDTH: int
                public static VK_HALF_WIDTH: int
                public static VK_ROMAN_CHARACTERS: int
                public static VK_ALL_CANDIDATES: int
                public static VK_PREVIOUS_CANDIDATE: int
                public static VK_CODE_INPUT: int
                public static VK_JAPANESE_KATAKANA: int
                public static VK_JAPANESE_HIRAGANA: int
                public static VK_JAPANESE_ROMAN: int
                public static VK_KANA_LOCK: int
                public static VK_INPUT_METHOD_ON_OFF: int
                public static VK_CUT: int
                public static VK_COPY: int
                public static VK_PASTE: int
                public static VK_UNDO: int
                public static VK_AGAIN: int
                public static VK_FIND: int
                public static VK_PROPS: int
                public static VK_STOP: int
                public static VK_COMPOSE: int
                public static VK_ALT_GRAPH: int
                public static VK_BEGIN: int
                public static VK_UNDEFINED: int
                public static CHAR_UNDEFINED: char
                public static KEY_LOCATION_UNKNOWN: int
                public static KEY_LOCATION_STANDARD: int
                public static KEY_LOCATION_LEFT: int
                public static KEY_LOCATION_RIGHT: int
                public static KEY_LOCATION_NUMPAD: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: char, arg6: int)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: char)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int)
                public getKeyCode(): int
                public setKeyCode(arg0: int): void
                public getKeyChar(): char
                public setKeyChar(arg0: char): void
                public setModifiers(arg0: int): void
                public getKeyLocation(): int
                public static getKeyText(arg0: int): string
                public static getKeyModifiersText(arg0: int): string
                public isActionKey(): boolean
                public paramString(): string
                public getExtendedKeyCode(): int
                public static getExtendedKeyCodeForChar(arg0: int): int
                public static class: java.lang.Class<any>
            }
            interface KeyListener extends java.util.EventListener {
                keyTyped(arg0: java.awt.event.KeyEvent): void
                keyPressed(arg0: java.awt.event.KeyEvent): void
                keyReleased(arg0: java.awt.event.KeyEvent): void
            }
            abstract class MouseAdapter implements java.awt.event.MouseListener , java.awt.event.MouseWheelListener , java.awt.event.MouseMotionListener {
                public constructor()
                public mouseClicked(arg0: java.awt.event.MouseEvent): void
                public mousePressed(arg0: java.awt.event.MouseEvent): void
                public mouseReleased(arg0: java.awt.event.MouseEvent): void
                public mouseEntered(arg0: java.awt.event.MouseEvent): void
                public mouseExited(arg0: java.awt.event.MouseEvent): void
                public mouseWheelMoved(arg0: java.awt.event.MouseWheelEvent): void
                public mouseDragged(arg0: java.awt.event.MouseEvent): void
                public mouseMoved(arg0: java.awt.event.MouseEvent): void
                public static class: java.lang.Class<any>
            }
            class MouseEvent extends java.awt.event.InputEvent {
                public static MOUSE_FIRST: int
                public static MOUSE_LAST: int
                public static MOUSE_CLICKED: int
                public static MOUSE_PRESSED: int
                public static MOUSE_RELEASED: int
                public static MOUSE_MOVED: int
                public static MOUSE_ENTERED: int
                public static MOUSE_EXITED: int
                public static MOUSE_DRAGGED: int
                public static MOUSE_WHEEL: int
                public static NOBUTTON: int
                public static BUTTON1: int
                public static BUTTON2: int
                public static BUTTON3: int
                public getLocationOnScreen(): java.awt.Point
                public getXOnScreen(): int
                public getYOnScreen(): int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean, arg8: int)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean)
                public getModifiersEx(): int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: boolean, arg10: int)
                public getX(): int
                public getY(): int
                public getPoint(): java.awt.Point
                public translatePoint(arg0: int, arg1: int): void
                public getClickCount(): int
                public getButton(): int
                public isPopupTrigger(): boolean
                public static getMouseModifiersText(arg0: int): string
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface MouseListener extends java.util.EventListener {
                mouseClicked(arg0: java.awt.event.MouseEvent): void
                mousePressed(arg0: java.awt.event.MouseEvent): void
                mouseReleased(arg0: java.awt.event.MouseEvent): void
                mouseEntered(arg0: java.awt.event.MouseEvent): void
                mouseExited(arg0: java.awt.event.MouseEvent): void
            }
            abstract class MouseMotionAdapter implements java.awt.event.MouseMotionListener {
                public constructor()
                public mouseDragged(arg0: java.awt.event.MouseEvent): void
                public mouseMoved(arg0: java.awt.event.MouseEvent): void
                public static class: java.lang.Class<any>
            }
            interface MouseMotionListener extends java.util.EventListener {
                mouseDragged(arg0: java.awt.event.MouseEvent): void
                mouseMoved(arg0: java.awt.event.MouseEvent): void
            }
            class MouseWheelEvent extends java.awt.event.MouseEvent {
                public static WHEEL_UNIT_SCROLL: int
                public static WHEEL_BLOCK_SCROLL: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean, arg8: int, arg9: int, arg10: int)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: boolean, arg10: int, arg11: int, arg12: int)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: boolean, arg10: int, arg11: int, arg12: int, arg13: double)
                public getScrollType(): int
                public getScrollAmount(): int
                public getWheelRotation(): int
                public getPreciseWheelRotation(): double
                public getUnitsToScroll(): int
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface MouseWheelListener extends java.util.EventListener {
                mouseWheelMoved(arg0: java.awt.event.MouseWheelEvent): void
            }
            class NativeLibLoader {
                public static class: java.lang.Class<any>
            }
            class PaintEvent extends java.awt.event.ComponentEvent {
                public static PAINT_FIRST: int
                public static PAINT_LAST: int
                public static PAINT: int
                public static UPDATE: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.Rectangle)
                public getUpdateRect(): java.awt.Rectangle
                public setUpdateRect(arg0: java.awt.Rectangle): void
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            class TextEvent extends java.awt.AWTEvent {
                public static TEXT_FIRST: int
                public static TEXT_LAST: int
                public static TEXT_VALUE_CHANGED: int
                public constructor(arg0: java.lang.Object, arg1: int)
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface TextListener extends java.util.EventListener {
                textValueChanged(arg0: java.awt.event.TextEvent): void
            }
            abstract class WindowAdapter implements java.awt.event.WindowListener , java.awt.event.WindowStateListener , java.awt.event.WindowFocusListener {
                public constructor()
                public windowOpened(arg0: java.awt.event.WindowEvent): void
                public windowClosing(arg0: java.awt.event.WindowEvent): void
                public windowClosed(arg0: java.awt.event.WindowEvent): void
                public windowIconified(arg0: java.awt.event.WindowEvent): void
                public windowDeiconified(arg0: java.awt.event.WindowEvent): void
                public windowActivated(arg0: java.awt.event.WindowEvent): void
                public windowDeactivated(arg0: java.awt.event.WindowEvent): void
                public windowStateChanged(arg0: java.awt.event.WindowEvent): void
                public windowGainedFocus(arg0: java.awt.event.WindowEvent): void
                public windowLostFocus(arg0: java.awt.event.WindowEvent): void
                public static class: java.lang.Class<any>
            }
            class WindowEvent extends java.awt.event.ComponentEvent {
                public static WINDOW_FIRST: int
                public static WINDOW_OPENED: int
                public static WINDOW_CLOSING: int
                public static WINDOW_CLOSED: int
                public static WINDOW_ICONIFIED: int
                public static WINDOW_DEICONIFIED: int
                public static WINDOW_ACTIVATED: int
                public static WINDOW_DEACTIVATED: int
                public static WINDOW_GAINED_FOCUS: int
                public static WINDOW_LOST_FOCUS: int
                public static WINDOW_STATE_CHANGED: int
                public static WINDOW_LAST: int
                public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int, arg2: java.awt.Window | java.awt.Window$$Lambda, arg3: int, arg4: int)
                public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int, arg2: java.awt.Window | java.awt.Window$$Lambda)
                public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int)
                public getWindow(): java.awt.Window
                public getOppositeWindow(): java.awt.Window
                public getOldState(): int
                public getNewState(): int
                public paramString(): string
                public static class: java.lang.Class<any>
            }
            interface WindowFocusListener extends java.util.EventListener {
                windowGainedFocus(arg0: java.awt.event.WindowEvent): void
                windowLostFocus(arg0: java.awt.event.WindowEvent): void
            }
            interface WindowListener extends java.util.EventListener {
                windowOpened(arg0: java.awt.event.WindowEvent): void
                windowClosing(arg0: java.awt.event.WindowEvent): void
                windowClosed(arg0: java.awt.event.WindowEvent): void
                windowIconified(arg0: java.awt.event.WindowEvent): void
                windowDeiconified(arg0: java.awt.event.WindowEvent): void
                windowActivated(arg0: java.awt.event.WindowEvent): void
                windowDeactivated(arg0: java.awt.event.WindowEvent): void
            }
            interface WindowStateListener extends java.util.EventListener {
                windowStateChanged(arg0: java.awt.event.WindowEvent): void
            }
        }
        namespace font {
            class CharArrayIterator implements java.text.CharacterIterator {
                public first(): char
                public last(): char
                public current(): char
                public next(): char
                public previous(): char
                public setIndex(arg0: int): char
                public getBeginIndex(): int
                public getEndIndex(): int
                public getIndex(): int
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class FontRenderContext {
                protected constructor()
                public constructor(arg0: java.awt.geom.AffineTransform, arg1: boolean, arg2: boolean)
                public constructor(arg0: java.awt.geom.AffineTransform, arg1: java.lang.Object, arg2: java.lang.Object)
                public isTransformed(): boolean
                public getTransformType(): int
                public getTransform(): java.awt.geom.AffineTransform
                public isAntiAliased(): boolean
                public usesFractionalMetrics(): boolean
                public getAntiAliasingHint(): java.lang.Object
                public getFractionalMetricsHint(): java.lang.Object
                public equals(arg0: java.lang.Object): boolean
                public equals(arg0: java.awt.font.FontRenderContext): boolean
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            class GlyphJustificationInfo {
                public static PRIORITY_KASHIDA: int
                public static PRIORITY_WHITESPACE: int
                public static PRIORITY_INTERCHAR: int
                public static PRIORITY_NONE: int
                public weight: float
                public growPriority: int
                public growAbsorb: boolean
                public growLeftLimit: float
                public growRightLimit: float
                public shrinkPriority: int
                public shrinkAbsorb: boolean
                public shrinkLeftLimit: float
                public shrinkRightLimit: float
                public constructor(arg0: float, arg1: boolean, arg2: int, arg3: float, arg4: float, arg5: boolean, arg6: int, arg7: float, arg8: float)
                public static class: java.lang.Class<any>
            }
            class GlyphMetrics {
                public static STANDARD: byte
                public static LIGATURE: byte
                public static COMBINING: byte
                public static COMPONENT: byte
                public static WHITESPACE: byte
                public constructor(arg0: float, arg1: java.awt.geom.Rectangle2D, arg2: byte)
                public constructor(arg0: boolean, arg1: float, arg2: float, arg3: java.awt.geom.Rectangle2D, arg4: byte)
                public getAdvance(): float
                public getAdvanceX(): float
                public getAdvanceY(): float
                public getBounds2D(): java.awt.geom.Rectangle2D
                public getLSB(): float
                public getRSB(): float
                public getType(): int
                public isStandard(): boolean
                public isLigature(): boolean
                public isCombining(): boolean
                public isComponent(): boolean
                public isWhitespace(): boolean
                public static class: java.lang.Class<any>
            }
            abstract class GlyphVector implements java.lang.Cloneable {
                public static FLAG_HAS_TRANSFORMS: int
                public static FLAG_HAS_POSITION_ADJUSTMENTS: int
                public static FLAG_RUN_RTL: int
                public static FLAG_COMPLEX_GLYPHS: int
                public static FLAG_MASK: int
                public constructor()
                public getFont(): java.awt.Font
                public getFontRenderContext(): java.awt.font.FontRenderContext
                public performDefaultLayout(): void
                public getNumGlyphs(): int
                public getGlyphCode(arg0: int): int
                public getGlyphCodes(arg0: int, arg1: int, arg2: int[]): int[]
                public getGlyphCharIndex(arg0: int): int
                public getGlyphCharIndices(arg0: int, arg1: int, arg2: int[]): int[]
                public getLogicalBounds(): java.awt.geom.Rectangle2D
                public getVisualBounds(): java.awt.geom.Rectangle2D
                public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
                public getOutline(): java.awt.Shape
                public getOutline(arg0: float, arg1: float): java.awt.Shape
                public getGlyphOutline(arg0: int): java.awt.Shape
                public getGlyphOutline(arg0: int, arg1: float, arg2: float): java.awt.Shape
                public getGlyphPosition(arg0: int): java.awt.geom.Point2D
                public setGlyphPosition(arg0: int, arg1: java.awt.geom.Point2D): void
                public getGlyphTransform(arg0: int): java.awt.geom.AffineTransform
                public setGlyphTransform(arg0: int, arg1: java.awt.geom.AffineTransform): void
                public getLayoutFlags(): int
                public getGlyphPositions(arg0: int, arg1: int, arg2: float[]): float[]
                public getGlyphLogicalBounds(arg0: int): java.awt.Shape
                public getGlyphVisualBounds(arg0: int): java.awt.Shape
                public getGlyphPixelBounds(arg0: int, arg1: java.awt.font.FontRenderContext, arg2: float, arg3: float): java.awt.Rectangle
                public getGlyphMetrics(arg0: int): java.awt.font.GlyphMetrics
                public getGlyphJustificationInfo(arg0: int): java.awt.font.GlyphJustificationInfo
                public equals(arg0: java.awt.font.GlyphVector): boolean
                public static class: java.lang.Class<any>
            }
            abstract class GraphicAttribute {
                public static TOP_ALIGNMENT: int
                public static BOTTOM_ALIGNMENT: int
                public static ROMAN_BASELINE: int
                public static CENTER_BASELINE: int
                public static HANGING_BASELINE: int
                protected constructor(arg0: int)
                public getAscent(): float
                public getDescent(): float
                public getAdvance(): float
                public getBounds(): java.awt.geom.Rectangle2D
                public getOutline(arg0: java.awt.geom.AffineTransform): java.awt.Shape
                public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
                public getAlignment(): int
                public getJustificationInfo(): java.awt.font.GlyphJustificationInfo
                public static class: java.lang.Class<any>
            }
            class ImageGraphicAttribute extends java.awt.font.GraphicAttribute {
                public constructor(arg0: java.awt.Image, arg1: int)
                public constructor(arg0: java.awt.Image, arg1: int, arg2: float, arg3: float)
                public getAscent(): float
                public getDescent(): float
                public getAdvance(): float
                public getBounds(): java.awt.geom.Rectangle2D
                public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public equals(arg0: java.awt.font.ImageGraphicAttribute): boolean
                public static class: java.lang.Class<any>
            }
            abstract class LayoutPath {
                public constructor()
                public pointToPath(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): boolean
                public pathToPoint(arg0: java.awt.geom.Point2D, arg1: boolean, arg2: java.awt.geom.Point2D): void
                public static class: java.lang.Class<any>
            }
            class LineBreakMeasurer {
                public constructor(arg0: java.text.AttributedCharacterIterator, arg1: java.awt.font.FontRenderContext)
                public constructor(arg0: java.text.AttributedCharacterIterator, arg1: java.text.BreakIterator, arg2: java.awt.font.FontRenderContext)
                public nextOffset(arg0: float): int
                public nextOffset(arg0: float, arg1: int, arg2: boolean): int
                public nextLayout(arg0: float): java.awt.font.TextLayout
                public nextLayout(arg0: float, arg1: int, arg2: boolean): java.awt.font.TextLayout
                public getPosition(): int
                public setPosition(arg0: int): void
                public insertChar(arg0: java.text.AttributedCharacterIterator, arg1: int): void
                public deleteChar(arg0: java.text.AttributedCharacterIterator, arg1: int): void
                public static class: java.lang.Class<any>
            }
            abstract class LineMetrics {
                public constructor()
                public getNumChars(): int
                public getAscent(): float
                public getDescent(): float
                public getLeading(): float
                public getHeight(): float
                public getBaselineIndex(): int
                public getBaselineOffsets(): float[]
                public getStrikethroughOffset(): float
                public getStrikethroughThickness(): float
                public getUnderlineOffset(): float
                public getUnderlineThickness(): float
                public static class: java.lang.Class<any>
            }
            interface MultipleMaster {
                getNumDesignAxes(): int
                getDesignAxisRanges(): float[]
                getDesignAxisDefaults(): float[]
                getDesignAxisNames(): java.lang.String[]
                deriveMMFont(arg0: float[]): java.awt.Font
                deriveMMFont(arg0: float[], arg1: float, arg2: float, arg3: float, arg4: float): java.awt.Font
            }
            class NumericShaper implements java.io.Serializable {
                public static EUROPEAN: int
                public static ARABIC: int
                public static EASTERN_ARABIC: int
                public static DEVANAGARI: int
                public static BENGALI: int
                public static GURMUKHI: int
                public static GUJARATI: int
                public static ORIYA: int
                public static TAMIL: int
                public static TELUGU: int
                public static KANNADA: int
                public static MALAYALAM: int
                public static THAI: int
                public static LAO: int
                public static TIBETAN: int
                public static MYANMAR: int
                public static ETHIOPIC: int
                public static KHMER: int
                public static MONGOLIAN: int
                public static ALL_RANGES: int
                public static getShaper(arg0: int): java.awt.font.NumericShaper
                public static getShaper(arg0: java.awt.font.NumericShaper$Range): java.awt.font.NumericShaper
                public static getContextualShaper(arg0: int): java.awt.font.NumericShaper
                public static getContextualShaper(arg0: java.util.Set<java.awt.font.NumericShaper$Range>): java.awt.font.NumericShaper
                public static getContextualShaper(arg0: int, arg1: int): java.awt.font.NumericShaper
                public static getContextualShaper(arg0: java.util.Set<java.awt.font.NumericShaper$Range>, arg1: java.awt.font.NumericShaper$Range): java.awt.font.NumericShaper
                public shape(arg0: char[], arg1: int, arg2: int): void
                public shape(arg0: char[], arg1: int, arg2: int, arg3: int): void
                public shape(arg0: char[], arg1: int, arg2: int, arg3: java.awt.font.NumericShaper$Range): void
                public isContextual(): boolean
                public getRanges(): int
                public getRangeSet(): java.util.Set<java.awt.font.NumericShaper$Range>
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface OpenType {
                TAG_CMAP: int
                TAG_HEAD: int
                TAG_NAME: int
                TAG_GLYF: int
                TAG_MAXP: int
                TAG_PREP: int
                TAG_HMTX: int
                TAG_KERN: int
                TAG_HDMX: int
                TAG_LOCA: int
                TAG_POST: int
                TAG_OS2: int
                TAG_CVT: int
                TAG_GASP: int
                TAG_VDMX: int
                TAG_VMTX: int
                TAG_VHEA: int
                TAG_HHEA: int
                TAG_TYP1: int
                TAG_BSLN: int
                TAG_GSUB: int
                TAG_DSIG: int
                TAG_FPGM: int
                TAG_FVAR: int
                TAG_GVAR: int
                TAG_CFF: int
                TAG_MMSD: int
                TAG_MMFX: int
                TAG_BASE: int
                TAG_GDEF: int
                TAG_GPOS: int
                TAG_JSTF: int
                TAG_EBDT: int
                TAG_EBLC: int
                TAG_EBSC: int
                TAG_LTSH: int
                TAG_PCLT: int
                TAG_ACNT: int
                TAG_AVAR: int
                TAG_BDAT: int
                TAG_BLOC: int
                TAG_CVAR: int
                TAG_FEAT: int
                TAG_FDSC: int
                TAG_FMTX: int
                TAG_JUST: int
                TAG_LCAR: int
                TAG_MORT: int
                TAG_OPBD: int
                TAG_PROP: int
                TAG_TRAK: int
                getVersion(): int
                getFontTable(arg0: int): byte[]
                getFontTable(arg0: java.lang.String | string): byte[]
                getFontTable(arg0: int, arg1: int, arg2: int): byte[]
                getFontTable(arg0: java.lang.String | string, arg1: int, arg2: int): byte[]
                getFontTableSize(arg0: int): int
                getFontTableSize(arg0: java.lang.String | string): int
            }
            class ShapeGraphicAttribute extends java.awt.font.GraphicAttribute {
                public static STROKE: boolean
                public static FILL: boolean
                public constructor(arg0: java.awt.Shape, arg1: int, arg2: boolean)
                public getAscent(): float
                public getDescent(): float
                public getAdvance(): float
                public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
                public getBounds(): java.awt.geom.Rectangle2D
                public getOutline(arg0: java.awt.geom.AffineTransform): java.awt.Shape
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public equals(arg0: java.awt.font.ShapeGraphicAttribute): boolean
                public static class: java.lang.Class<any>
            }
            class StyledParagraph {
                public constructor(arg0: java.text.AttributedCharacterIterator, arg1: char[])
                public static insertChar(arg0: java.text.AttributedCharacterIterator, arg1: char[], arg2: int, arg3: java.awt.font.StyledParagraph): java.awt.font.StyledParagraph
                public static deleteChar(arg0: java.text.AttributedCharacterIterator, arg1: char[], arg2: int, arg3: java.awt.font.StyledParagraph): java.awt.font.StyledParagraph
                public getRunLimit(arg0: int): int
                public getDecorationAt(arg0: int): sun.font.Decoration
                public getFontOrGraphicAt(arg0: int): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class TextAttribute extends java.text.AttributedCharacterIterator$Attribute {
                public static FAMILY: java.awt.font.TextAttribute
                public static WEIGHT: java.awt.font.TextAttribute
                public static WEIGHT_EXTRA_LIGHT: java.lang.Float
                public static WEIGHT_LIGHT: java.lang.Float
                public static WEIGHT_DEMILIGHT: java.lang.Float
                public static WEIGHT_REGULAR: java.lang.Float
                public static WEIGHT_SEMIBOLD: java.lang.Float
                public static WEIGHT_MEDIUM: java.lang.Float
                public static WEIGHT_DEMIBOLD: java.lang.Float
                public static WEIGHT_BOLD: java.lang.Float
                public static WEIGHT_HEAVY: java.lang.Float
                public static WEIGHT_EXTRABOLD: java.lang.Float
                public static WEIGHT_ULTRABOLD: java.lang.Float
                public static WIDTH: java.awt.font.TextAttribute
                public static WIDTH_CONDENSED: java.lang.Float
                public static WIDTH_SEMI_CONDENSED: java.lang.Float
                public static WIDTH_REGULAR: java.lang.Float
                public static WIDTH_SEMI_EXTENDED: java.lang.Float
                public static WIDTH_EXTENDED: java.lang.Float
                public static POSTURE: java.awt.font.TextAttribute
                public static POSTURE_REGULAR: java.lang.Float
                public static POSTURE_OBLIQUE: java.lang.Float
                public static SIZE: java.awt.font.TextAttribute
                public static TRANSFORM: java.awt.font.TextAttribute
                public static SUPERSCRIPT: java.awt.font.TextAttribute
                public static SUPERSCRIPT_SUPER: java.lang.Integer
                public static SUPERSCRIPT_SUB: java.lang.Integer
                public static FONT: java.awt.font.TextAttribute
                public static CHAR_REPLACEMENT: java.awt.font.TextAttribute
                public static FOREGROUND: java.awt.font.TextAttribute
                public static BACKGROUND: java.awt.font.TextAttribute
                public static UNDERLINE: java.awt.font.TextAttribute
                public static UNDERLINE_ON: java.lang.Integer
                public static STRIKETHROUGH: java.awt.font.TextAttribute
                public static STRIKETHROUGH_ON: boolean
                public static RUN_DIRECTION: java.awt.font.TextAttribute
                public static RUN_DIRECTION_LTR: boolean
                public static RUN_DIRECTION_RTL: boolean
                public static BIDI_EMBEDDING: java.awt.font.TextAttribute
                public static JUSTIFICATION: java.awt.font.TextAttribute
                public static JUSTIFICATION_FULL: java.lang.Float
                public static JUSTIFICATION_NONE: java.lang.Float
                public static INPUT_METHOD_HIGHLIGHT: java.awt.font.TextAttribute
                public static INPUT_METHOD_UNDERLINE: java.awt.font.TextAttribute
                public static UNDERLINE_LOW_ONE_PIXEL: java.lang.Integer
                public static UNDERLINE_LOW_TWO_PIXEL: java.lang.Integer
                public static UNDERLINE_LOW_DOTTED: java.lang.Integer
                public static UNDERLINE_LOW_GRAY: java.lang.Integer
                public static UNDERLINE_LOW_DASHED: java.lang.Integer
                public static SWAP_COLORS: java.awt.font.TextAttribute
                public static SWAP_COLORS_ON: boolean
                public static NUMERIC_SHAPING: java.awt.font.TextAttribute
                public static KERNING: java.awt.font.TextAttribute
                public static KERNING_ON: java.lang.Integer
                public static LIGATURES: java.awt.font.TextAttribute
                public static LIGATURES_ON: java.lang.Integer
                public static TRACKING: java.awt.font.TextAttribute
                public static TRACKING_TIGHT: java.lang.Float
                public static TRACKING_LOOSE: java.lang.Float
                protected constructor(arg0: java.lang.String | string)
                protected readResolve(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class TextHitInfo {
                public getCharIndex(): int
                public isLeadingEdge(): boolean
                public getInsertionIndex(): int
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public equals(arg0: java.awt.font.TextHitInfo): boolean
                public toString(): string
                public static leading(arg0: int): java.awt.font.TextHitInfo
                public static trailing(arg0: int): java.awt.font.TextHitInfo
                public static beforeOffset(arg0: int): java.awt.font.TextHitInfo
                public static afterOffset(arg0: int): java.awt.font.TextHitInfo
                public getOtherHit(): java.awt.font.TextHitInfo
                public getOffsetHit(arg0: int): java.awt.font.TextHitInfo
                public static class: java.lang.Class<any>
            }
            class TextJustifier {
                public static MAX_PRIORITY: int
                public justify(arg0: float): float[]
                public static class: java.lang.Class<any>
            }
            class TextLayout implements java.lang.Cloneable {
                public static DEFAULT_CARET_POLICY: java.awt.font.TextLayout$CaretPolicy
                public constructor(arg0: java.lang.String | string, arg1: java.awt.Font, arg2: java.awt.font.FontRenderContext)
                public constructor(arg0: java.lang.String | string, arg1: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>, arg2: java.awt.font.FontRenderContext)
                public constructor(arg0: java.text.AttributedCharacterIterator, arg1: java.awt.font.FontRenderContext)
                protected clone(): java.lang.Object
                public getJustifiedLayout(arg0: float): java.awt.font.TextLayout
                protected handleJustify(arg0: float): void
                public getBaseline(): byte
                public getBaselineOffsets(): float[]
                public getAdvance(): float
                public getVisibleAdvance(): float
                public getAscent(): float
                public getDescent(): float
                public getLeading(): float
                public getBounds(): java.awt.geom.Rectangle2D
                public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
                public isLeftToRight(): boolean
                public isVertical(): boolean
                public getCharacterCount(): int
                public getCaretInfo(arg0: java.awt.font.TextHitInfo, arg1: java.awt.geom.Rectangle2D): float[]
                public getCaretInfo(arg0: java.awt.font.TextHitInfo): float[]
                public getNextRightHit(arg0: java.awt.font.TextHitInfo): java.awt.font.TextHitInfo
                public getNextRightHit(arg0: int, arg1: java.awt.font.TextLayout$CaretPolicy): java.awt.font.TextHitInfo
                public getNextRightHit(arg0: int): java.awt.font.TextHitInfo
                public getNextLeftHit(arg0: java.awt.font.TextHitInfo): java.awt.font.TextHitInfo
                public getNextLeftHit(arg0: int, arg1: java.awt.font.TextLayout$CaretPolicy): java.awt.font.TextHitInfo
                public getNextLeftHit(arg0: int): java.awt.font.TextHitInfo
                public getVisualOtherHit(arg0: java.awt.font.TextHitInfo): java.awt.font.TextHitInfo
                public getCaretShape(arg0: java.awt.font.TextHitInfo, arg1: java.awt.geom.Rectangle2D): java.awt.Shape
                public getCaretShape(arg0: java.awt.font.TextHitInfo): java.awt.Shape
                public getCharacterLevel(arg0: int): byte
                public getCaretShapes(arg0: int, arg1: java.awt.geom.Rectangle2D, arg2: java.awt.font.TextLayout$CaretPolicy): java.awt.Shape[]
                public getCaretShapes(arg0: int, arg1: java.awt.geom.Rectangle2D): java.awt.Shape[]
                public getCaretShapes(arg0: int): java.awt.Shape[]
                public getLogicalRangesForVisualSelection(arg0: java.awt.font.TextHitInfo, arg1: java.awt.font.TextHitInfo): int[]
                public getVisualHighlightShape(arg0: java.awt.font.TextHitInfo, arg1: java.awt.font.TextHitInfo, arg2: java.awt.geom.Rectangle2D): java.awt.Shape
                public getVisualHighlightShape(arg0: java.awt.font.TextHitInfo, arg1: java.awt.font.TextHitInfo): java.awt.Shape
                public getLogicalHighlightShape(arg0: int, arg1: int, arg2: java.awt.geom.Rectangle2D): java.awt.Shape
                public getLogicalHighlightShape(arg0: int, arg1: int): java.awt.Shape
                public getBlackBoxBounds(arg0: int, arg1: int): java.awt.Shape
                public hitTestChar(arg0: float, arg1: float, arg2: java.awt.geom.Rectangle2D): java.awt.font.TextHitInfo
                public hitTestChar(arg0: float, arg1: float): java.awt.font.TextHitInfo
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public equals(arg0: java.awt.font.TextLayout): boolean
                public toString(): string
                public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
                public getOutline(arg0: java.awt.geom.AffineTransform): java.awt.Shape
                public getLayoutPath(): java.awt.font.LayoutPath
                public hitToPoint(arg0: java.awt.font.TextHitInfo, arg1: java.awt.geom.Point2D): void
                public static class: java.lang.Class<any>
            }
            class TextLine {
                public constructor(arg0: java.awt.font.FontRenderContext, arg1: sun.font.TextLineComponent[], arg2: float[], arg3: char[], arg4: int, arg5: int, arg6: int[], arg7: byte[], arg8: boolean)
                public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
                public characterCount(): int
                public isDirectionLTR(): boolean
                public getMetrics(): java.awt.font.TextLine$TextLineMetrics
                public visualToLogical(arg0: int): int
                public logicalToVisual(arg0: int): int
                public getCharLevel(arg0: int): byte
                public isCharLTR(arg0: int): boolean
                public getCharType(arg0: int): int
                public isCharSpace(arg0: int): boolean
                public isCharWhitespace(arg0: int): boolean
                public getCharAngle(arg0: int): float
                public getCoreMetricsAt(arg0: int): sun.font.CoreMetrics
                public getCharAscent(arg0: int): float
                public getCharDescent(arg0: int): float
                public getCharShift(arg0: int): float
                public getCharAdvance(arg0: int): float
                public getCharXPosition(arg0: int): float
                public getCharYPosition(arg0: int): float
                public getCharLinePosition(arg0: int): float
                public getCharLinePosition(arg0: int, arg1: boolean): float
                public caretAtOffsetIsValid(arg0: int): boolean
                public getCharBounds(arg0: int): java.awt.geom.Rectangle2D
                public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
                public getVisualBounds(): java.awt.geom.Rectangle2D
                public getItalicBounds(): java.awt.geom.Rectangle2D
                public getOutline(arg0: java.awt.geom.AffineTransform): java.awt.Shape
                public hashCode(): int
                public toString(): string
                public static fastCreateTextLine(arg0: java.awt.font.FontRenderContext, arg1: char[], arg2: java.awt.Font, arg3: sun.font.CoreMetrics, arg4: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>): java.awt.font.TextLine
                public static createComponentsOnRun(arg0: int, arg1: int, arg2: char[], arg3: int[], arg4: byte[], arg5: sun.font.TextLabelFactory, arg6: java.awt.Font, arg7: sun.font.CoreMetrics, arg8: java.awt.font.FontRenderContext, arg9: sun.font.Decoration, arg10: sun.font.TextLineComponent[], arg11: int): sun.font.TextLineComponent[]
                public static getComponents(arg0: java.awt.font.StyledParagraph, arg1: char[], arg2: int, arg3: int, arg4: int[], arg5: byte[], arg6: sun.font.TextLabelFactory): sun.font.TextLineComponent[]
                public static createLineFromText(arg0: char[], arg1: java.awt.font.StyledParagraph, arg2: sun.font.TextLabelFactory, arg3: boolean, arg4: float[]): java.awt.font.TextLine
                public static standardCreateTextLine(arg0: java.awt.font.FontRenderContext, arg1: java.text.AttributedCharacterIterator, arg2: char[], arg3: float[]): java.awt.font.TextLine
                public getJustifiedLine(arg0: float, arg1: float, arg2: int, arg3: int): java.awt.font.TextLine
                public static getAdvanceBetween(arg0: sun.font.TextLineComponent[], arg1: int, arg2: int): float
                public static class: java.lang.Class<any>
            }
            class TextMeasurer implements java.lang.Cloneable {
                public constructor(arg0: java.text.AttributedCharacterIterator, arg1: java.awt.font.FontRenderContext)
                protected clone(): java.lang.Object
                public getLineBreakIndex(arg0: int, arg1: float): int
                public getAdvanceBetween(arg0: int, arg1: int): float
                public getLayout(arg0: int, arg1: int): java.awt.font.TextLayout
                public insertChar(arg0: java.text.AttributedCharacterIterator, arg1: int): void
                public deleteChar(arg0: java.text.AttributedCharacterIterator, arg1: int): void
                public static class: java.lang.Class<any>
            }
            class TransformAttribute implements java.io.Serializable {
                public static IDENTITY: java.awt.font.TransformAttribute
                public constructor(arg0: java.awt.geom.AffineTransform)
                public getTransform(): java.awt.geom.AffineTransform
                public isIdentity(): boolean
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
        }
        namespace geom {
            class AffineTransform implements java.lang.Cloneable , java.io.Serializable {
                public static TYPE_IDENTITY: int
                public static TYPE_TRANSLATION: int
                public static TYPE_UNIFORM_SCALE: int
                public static TYPE_GENERAL_SCALE: int
                public static TYPE_MASK_SCALE: int
                public static TYPE_FLIP: int
                public static TYPE_QUADRANT_ROTATION: int
                public static TYPE_GENERAL_ROTATION: int
                public static TYPE_MASK_ROTATION: int
                public static TYPE_GENERAL_TRANSFORM: int
                public constructor()
                public constructor(arg0: java.awt.geom.AffineTransform)
                public constructor(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float)
                public constructor(arg0: float[])
                public constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double)
                public constructor(arg0: double[])
                public static getTranslateInstance(arg0: double, arg1: double): java.awt.geom.AffineTransform
                public static getRotateInstance(arg0: double): java.awt.geom.AffineTransform
                public static getRotateInstance(arg0: double, arg1: double, arg2: double): java.awt.geom.AffineTransform
                public static getRotateInstance(arg0: double, arg1: double): java.awt.geom.AffineTransform
                public static getRotateInstance(arg0: double, arg1: double, arg2: double, arg3: double): java.awt.geom.AffineTransform
                public static getQuadrantRotateInstance(arg0: int): java.awt.geom.AffineTransform
                public static getQuadrantRotateInstance(arg0: int, arg1: double, arg2: double): java.awt.geom.AffineTransform
                public static getScaleInstance(arg0: double, arg1: double): java.awt.geom.AffineTransform
                public static getShearInstance(arg0: double, arg1: double): java.awt.geom.AffineTransform
                public getType(): int
                public getDeterminant(): double
                public getMatrix(arg0: double[]): void
                public getScaleX(): double
                public getScaleY(): double
                public getShearX(): double
                public getShearY(): double
                public getTranslateX(): double
                public getTranslateY(): double
                public translate(arg0: double, arg1: double): void
                public rotate(arg0: double): void
                public rotate(arg0: double, arg1: double, arg2: double): void
                public rotate(arg0: double, arg1: double): void
                public rotate(arg0: double, arg1: double, arg2: double, arg3: double): void
                public quadrantRotate(arg0: int): void
                public quadrantRotate(arg0: int, arg1: double, arg2: double): void
                public scale(arg0: double, arg1: double): void
                public shear(arg0: double, arg1: double): void
                public setToIdentity(): void
                public setToTranslation(arg0: double, arg1: double): void
                public setToRotation(arg0: double): void
                public setToRotation(arg0: double, arg1: double, arg2: double): void
                public setToRotation(arg0: double, arg1: double): void
                public setToRotation(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setToQuadrantRotation(arg0: int): void
                public setToQuadrantRotation(arg0: int, arg1: double, arg2: double): void
                public setToScale(arg0: double, arg1: double): void
                public setToShear(arg0: double, arg1: double): void
                public setTransform(arg0: java.awt.geom.AffineTransform): void
                public setTransform(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): void
                public concatenate(arg0: java.awt.geom.AffineTransform): void
                public preConcatenate(arg0: java.awt.geom.AffineTransform): void
                public createInverse(): java.awt.geom.AffineTransform
                public invert(): void
                public transform(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public transform(arg0: java.awt.geom.Point2D[], arg1: int, arg2: java.awt.geom.Point2D[], arg3: int, arg4: int): void
                public transform(arg0: float[], arg1: int, arg2: float[], arg3: int, arg4: int): void
                public transform(arg0: double[], arg1: int, arg2: double[], arg3: int, arg4: int): void
                public transform(arg0: float[], arg1: int, arg2: double[], arg3: int, arg4: int): void
                public transform(arg0: double[], arg1: int, arg2: float[], arg3: int, arg4: int): void
                public inverseTransform(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public inverseTransform(arg0: double[], arg1: int, arg2: double[], arg3: int, arg4: int): void
                public deltaTransform(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public deltaTransform(arg0: double[], arg1: int, arg2: double[], arg3: int, arg4: int): void
                public createTransformedShape(arg0: java.awt.Shape): java.awt.Shape
                public toString(): string
                public isIdentity(): boolean
                public clone(): java.lang.Object
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            abstract class Arc2D extends java.awt.geom.RectangularShape {
                public static OPEN: int
                public static CHORD: int
                public static PIE: int
                protected constructor()
                protected constructor(arg0: int)
                public getAngleStart(): double
                public getAngleExtent(): double
                public getArcType(): int
                public getStartPoint(): java.awt.geom.Point2D
                public getEndPoint(): java.awt.geom.Point2D
                public setArc(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: int): void
                public setArc(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Dimension2D, arg2: double, arg3: double, arg4: int): void
                public setArc(arg0: java.awt.geom.Rectangle2D, arg1: double, arg2: double, arg3: int): void
                public setArc(arg0: java.awt.geom.Arc2D): void
                public setArcByCenter(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: int): void
                public setArcByTangent(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D, arg2: java.awt.geom.Point2D, arg3: double): void
                public setAngleStart(arg0: double): void
                public setAngleExtent(arg0: double): void
                public setAngleStart(arg0: java.awt.geom.Point2D): void
                public setAngles(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setAngles(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): void
                public setArcType(arg0: int): void
                public setFrame(arg0: double, arg1: double, arg2: double, arg3: double): void
                public getBounds2D(): java.awt.geom.Rectangle2D
                protected makeBounds(arg0: double, arg1: double, arg2: double, arg3: double): java.awt.geom.Rectangle2D
                public containsAngle(arg0: double): boolean
                public contains(arg0: double, arg1: double): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            class ArcIterator implements java.awt.geom.PathIterator {
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class Area implements java.awt.Shape , java.lang.Cloneable {
                public constructor()
                public constructor(arg0: java.awt.Shape)
                public add(arg0: java.awt.geom.Area): void
                public subtract(arg0: java.awt.geom.Area): void
                public intersect(arg0: java.awt.geom.Area): void
                public exclusiveOr(arg0: java.awt.geom.Area): void
                public reset(): void
                public isEmpty(): boolean
                public isPolygonal(): boolean
                public isRectangular(): boolean
                public isSingular(): boolean
                public getBounds2D(): java.awt.geom.Rectangle2D
                public getBounds(): java.awt.Rectangle
                public clone(): java.lang.Object
                public equals(arg0: java.awt.geom.Area): boolean
                public transform(arg0: java.awt.geom.AffineTransform): void
                public createTransformedArea(arg0: java.awt.geom.AffineTransform): java.awt.geom.Area
                public contains(arg0: double, arg1: double): boolean
                public contains(arg0: java.awt.geom.Point2D): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersects(arg0: java.awt.geom.Rectangle2D): boolean
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public static class: java.lang.Class<any>
            }
            abstract class CubicCurve2D implements java.awt.Shape , java.lang.Cloneable {
                protected constructor()
                public getX1(): double
                public getY1(): double
                public getP1(): java.awt.geom.Point2D
                public getCtrlX1(): double
                public getCtrlY1(): double
                public getCtrlP1(): java.awt.geom.Point2D
                public getCtrlX2(): double
                public getCtrlY2(): double
                public getCtrlP2(): java.awt.geom.Point2D
                public getX2(): double
                public getY2(): double
                public getP2(): java.awt.geom.Point2D
                public setCurve(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double): void
                public setCurve(arg0: double[], arg1: int): void
                public setCurve(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D, arg2: java.awt.geom.Point2D, arg3: java.awt.geom.Point2D): void
                public setCurve(arg0: java.awt.geom.Point2D[], arg1: int): void
                public setCurve(arg0: java.awt.geom.CubicCurve2D): void
                public static getFlatnessSq(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double): double
                public static getFlatness(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double): double
                public static getFlatnessSq(arg0: double[], arg1: int): double
                public static getFlatness(arg0: double[], arg1: int): double
                public getFlatnessSq(): double
                public getFlatness(): double
                public subdivide(arg0: java.awt.geom.CubicCurve2D, arg1: java.awt.geom.CubicCurve2D): void
                public static subdivide(arg0: java.awt.geom.CubicCurve2D, arg1: java.awt.geom.CubicCurve2D, arg2: java.awt.geom.CubicCurve2D): void
                public static subdivide(arg0: double[], arg1: int, arg2: double[], arg3: int, arg4: double[], arg5: int): void
                public static solveCubic(arg0: double[]): int
                public static solveCubic(arg0: double[], arg1: double[]): int
                public contains(arg0: double, arg1: double): boolean
                public contains(arg0: java.awt.geom.Point2D): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersects(arg0: java.awt.geom.Rectangle2D): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public getBounds(): java.awt.Rectangle
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class CubicIterator implements java.awt.geom.PathIterator {
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            abstract class Dimension2D implements java.lang.Cloneable {
                protected constructor()
                public getWidth(): double
                public getHeight(): double
                public setSize(arg0: double, arg1: double): void
                public setSize(arg0: java.awt.geom.Dimension2D): void
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            abstract class Ellipse2D extends java.awt.geom.RectangularShape {
                protected constructor()
                public contains(arg0: double, arg1: double): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            class EllipseIterator implements java.awt.geom.PathIterator {
                public static CtrlVal: double
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class FlatteningPathIterator implements java.awt.geom.PathIterator {
                public constructor(arg0: java.awt.geom.PathIterator, arg1: double)
                public constructor(arg0: java.awt.geom.PathIterator, arg1: double, arg2: int)
                public getFlatness(): double
                public getRecursionLimit(): int
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class GeneralPath extends java.awt.geom.Path2D$Float {
                public constructor()
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: java.awt.Shape)
                public static class: java.lang.Class<any>
            }
            class IllegalPathStateException extends java.lang.RuntimeException {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            abstract class Line2D implements java.awt.Shape , java.lang.Cloneable {
                protected constructor()
                public getX1(): double
                public getY1(): double
                public getP1(): java.awt.geom.Point2D
                public getX2(): double
                public getY2(): double
                public getP2(): java.awt.geom.Point2D
                public setLine(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setLine(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): void
                public setLine(arg0: java.awt.geom.Line2D): void
                public static relativeCCW(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): int
                public relativeCCW(arg0: double, arg1: double): int
                public relativeCCW(arg0: java.awt.geom.Point2D): int
                public static linesIntersect(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double): boolean
                public intersectsLine(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersectsLine(arg0: java.awt.geom.Line2D): boolean
                public static ptSegDistSq(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): double
                public static ptSegDist(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): double
                public ptSegDistSq(arg0: double, arg1: double): double
                public ptSegDistSq(arg0: java.awt.geom.Point2D): double
                public ptSegDist(arg0: double, arg1: double): double
                public ptSegDist(arg0: java.awt.geom.Point2D): double
                public static ptLineDistSq(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): double
                public static ptLineDist(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): double
                public ptLineDistSq(arg0: double, arg1: double): double
                public ptLineDistSq(arg0: java.awt.geom.Point2D): double
                public ptLineDist(arg0: double, arg1: double): double
                public ptLineDist(arg0: java.awt.geom.Point2D): double
                public contains(arg0: double, arg1: double): boolean
                public contains(arg0: java.awt.geom.Point2D): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersects(arg0: java.awt.geom.Rectangle2D): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public getBounds(): java.awt.Rectangle
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class LineIterator implements java.awt.geom.PathIterator {
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class NoninvertibleTransformException extends java.lang.Exception {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            abstract class Path2D implements java.awt.Shape , java.lang.Cloneable {
                public static WIND_EVEN_ODD: int
                public static WIND_NON_ZERO: int
                public moveTo(arg0: double, arg1: double): void
                public lineTo(arg0: double, arg1: double): void
                public quadTo(arg0: double, arg1: double, arg2: double, arg3: double): void
                public curveTo(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): void
                public closePath(): void
                public append(arg0: java.awt.Shape, arg1: boolean): void
                public append(arg0: java.awt.geom.PathIterator, arg1: boolean): void
                public getWindingRule(): int
                public setWindingRule(arg0: int): void
                public getCurrentPoint(): java.awt.geom.Point2D
                public reset(): void
                public transform(arg0: java.awt.geom.AffineTransform): void
                public createTransformedShape(arg0: java.awt.geom.AffineTransform): java.awt.Shape
                public getBounds(): java.awt.Rectangle
                public static contains(arg0: java.awt.geom.PathIterator, arg1: double, arg2: double): boolean
                public static contains(arg0: java.awt.geom.PathIterator, arg1: java.awt.geom.Point2D): boolean
                public contains(arg0: double, arg1: double): boolean
                public contains(arg0: java.awt.geom.Point2D): boolean
                public static contains(arg0: java.awt.geom.PathIterator, arg1: double, arg2: double, arg3: double, arg4: double): boolean
                public static contains(arg0: java.awt.geom.PathIterator, arg1: java.awt.geom.Rectangle2D): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public static intersects(arg0: java.awt.geom.PathIterator, arg1: double, arg2: double, arg3: double, arg4: double): boolean
                public static intersects(arg0: java.awt.geom.PathIterator, arg1: java.awt.geom.Rectangle2D): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersects(arg0: java.awt.geom.Rectangle2D): boolean
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface PathIterator {
                WIND_EVEN_ODD: int
                WIND_NON_ZERO: int
                SEG_MOVETO: int
                SEG_LINETO: int
                SEG_QUADTO: int
                SEG_CUBICTO: int
                SEG_CLOSE: int
                getWindingRule(): int
                isDone(): boolean
                next(): void
                currentSegment(arg0: float[]): int
                currentSegment(arg0: double[]): int
            }
            abstract class Point2D implements java.lang.Cloneable {
                protected constructor()
                public getX(): double
                public getY(): double
                public setLocation(arg0: double, arg1: double): void
                public setLocation(arg0: java.awt.geom.Point2D): void
                public static distanceSq(arg0: double, arg1: double, arg2: double, arg3: double): double
                public static distance(arg0: double, arg1: double, arg2: double, arg3: double): double
                public distanceSq(arg0: double, arg1: double): double
                public distanceSq(arg0: java.awt.geom.Point2D): double
                public distance(arg0: double, arg1: double): double
                public distance(arg0: java.awt.geom.Point2D): double
                public clone(): java.lang.Object
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            abstract class QuadCurve2D implements java.awt.Shape , java.lang.Cloneable {
                protected constructor()
                public getX1(): double
                public getY1(): double
                public getP1(): java.awt.geom.Point2D
                public getCtrlX(): double
                public getCtrlY(): double
                public getCtrlPt(): java.awt.geom.Point2D
                public getX2(): double
                public getY2(): double
                public getP2(): java.awt.geom.Point2D
                public setCurve(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): void
                public setCurve(arg0: double[], arg1: int): void
                public setCurve(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D, arg2: java.awt.geom.Point2D): void
                public setCurve(arg0: java.awt.geom.Point2D[], arg1: int): void
                public setCurve(arg0: java.awt.geom.QuadCurve2D): void
                public static getFlatnessSq(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): double
                public static getFlatness(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): double
                public static getFlatnessSq(arg0: double[], arg1: int): double
                public static getFlatness(arg0: double[], arg1: int): double
                public getFlatnessSq(): double
                public getFlatness(): double
                public subdivide(arg0: java.awt.geom.QuadCurve2D, arg1: java.awt.geom.QuadCurve2D): void
                public static subdivide(arg0: java.awt.geom.QuadCurve2D, arg1: java.awt.geom.QuadCurve2D, arg2: java.awt.geom.QuadCurve2D): void
                public static subdivide(arg0: double[], arg1: int, arg2: double[], arg3: int, arg4: double[], arg5: int): void
                public static solveQuadratic(arg0: double[]): int
                public static solveQuadratic(arg0: double[], arg1: double[]): int
                public contains(arg0: double, arg1: double): boolean
                public contains(arg0: java.awt.geom.Point2D): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersects(arg0: java.awt.geom.Rectangle2D): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public getBounds(): java.awt.Rectangle
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class QuadIterator implements java.awt.geom.PathIterator {
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class RectIterator implements java.awt.geom.PathIterator {
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            abstract class Rectangle2D extends java.awt.geom.RectangularShape {
                public static OUT_LEFT: int
                public static OUT_TOP: int
                public static OUT_RIGHT: int
                public static OUT_BOTTOM: int
                protected constructor()
                public setRect(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setRect(arg0: java.awt.geom.Rectangle2D): void
                public intersectsLine(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public intersectsLine(arg0: java.awt.geom.Line2D): boolean
                public outcode(arg0: double, arg1: double): int
                public outcode(arg0: java.awt.geom.Point2D): int
                public setFrame(arg0: double, arg1: double, arg2: double, arg3: double): void
                public getBounds2D(): java.awt.geom.Rectangle2D
                public contains(arg0: double, arg1: double): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public createIntersection(arg0: java.awt.geom.Rectangle2D): java.awt.geom.Rectangle2D
                public static intersect(arg0: java.awt.geom.Rectangle2D, arg1: java.awt.geom.Rectangle2D, arg2: java.awt.geom.Rectangle2D): void
                public createUnion(arg0: java.awt.geom.Rectangle2D): java.awt.geom.Rectangle2D
                public static union(arg0: java.awt.geom.Rectangle2D, arg1: java.awt.geom.Rectangle2D, arg2: java.awt.geom.Rectangle2D): void
                public add(arg0: double, arg1: double): void
                public add(arg0: java.awt.geom.Point2D): void
                public add(arg0: java.awt.geom.Rectangle2D): void
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            abstract class RectangularShape implements java.awt.Shape , java.lang.Cloneable {
                protected constructor()
                public getX(): double
                public getY(): double
                public getWidth(): double
                public getHeight(): double
                public getMinX(): double
                public getMinY(): double
                public getMaxX(): double
                public getMaxY(): double
                public getCenterX(): double
                public getCenterY(): double
                public getFrame(): java.awt.geom.Rectangle2D
                public isEmpty(): boolean
                public setFrame(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setFrame(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Dimension2D): void
                public setFrame(arg0: java.awt.geom.Rectangle2D): void
                public setFrameFromDiagonal(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setFrameFromDiagonal(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): void
                public setFrameFromCenter(arg0: double, arg1: double, arg2: double, arg3: double): void
                public setFrameFromCenter(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): void
                public contains(arg0: java.awt.geom.Point2D): boolean
                public intersects(arg0: java.awt.geom.Rectangle2D): boolean
                public contains(arg0: java.awt.geom.Rectangle2D): boolean
                public getBounds(): java.awt.Rectangle
                public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class RoundRectIterator implements java.awt.geom.PathIterator {
                public getWindingRule(): int
                public isDone(): boolean
                public next(): void
                public currentSegment(arg0: float[]): int
                public currentSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            abstract class RoundRectangle2D extends java.awt.geom.RectangularShape {
                protected constructor()
                public getArcWidth(): double
                public getArcHeight(): double
                public setRoundRect(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): void
                public setRoundRect(arg0: java.awt.geom.RoundRectangle2D): void
                public setFrame(arg0: double, arg1: double, arg2: double, arg3: double): void
                public contains(arg0: double, arg1: double): boolean
                public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
        }
        namespace im {
            namespace spi {
                interface InputMethod {
                    setInputMethodContext(arg0: java.awt.im.spi.InputMethodContext): void
                    setLocale(arg0: java.util.Locale): boolean
                    getLocale(): java.util.Locale
                    setCharacterSubsets(arg0: java.lang.Character$Subset[]): void
                    setCompositionEnabled(arg0: boolean): void
                    isCompositionEnabled(): boolean
                    reconvert(): void
                    dispatchEvent(arg0: java.awt.AWTEvent): void
                    notifyClientWindowChange(arg0: java.awt.Rectangle): void
                    activate(): void
                    deactivate(arg0: boolean): void
                    hideWindows(): void
                    removeNotify(): void
                    endComposition(): void
                    dispose(): void
                    getControlObject(): java.lang.Object
                }
                interface InputMethodContext extends java.awt.im.InputMethodRequests {
                    dispatchInputMethodEvent(arg0: int, arg1: java.text.AttributedCharacterIterator, arg2: int, arg3: java.awt.font.TextHitInfo, arg4: java.awt.font.TextHitInfo): void
                    createInputMethodWindow(arg0: java.lang.String | string, arg1: boolean): java.awt.Window
                    createInputMethodJFrame(arg0: java.lang.String | string, arg1: boolean): javax.swing.JFrame
                    enableClientWindowNotification(arg0: java.awt.im.spi.InputMethod, arg1: boolean): void
                }
                interface InputMethodDescriptor {
                    getAvailableLocales(): java.util.Locale[]
                    hasDynamicLocaleList(): boolean
                    getInputMethodDisplayName(arg0: java.util.Locale, arg1: java.util.Locale): string
                    getInputMethodIcon(arg0: java.util.Locale): java.awt.Image
                    createInputMethod(): java.awt.im.spi.InputMethod
                }
            }
            class InputContext {
                protected constructor()
                public static getInstance(): java.awt.im.InputContext
                public selectInputMethod(arg0: java.util.Locale): boolean
                public getLocale(): java.util.Locale
                public setCharacterSubsets(arg0: java.lang.Character$Subset[]): void
                public setCompositionEnabled(arg0: boolean): void
                public isCompositionEnabled(): boolean
                public reconvert(): void
                public dispatchEvent(arg0: java.awt.AWTEvent): void
                public removeNotify(arg0: java.awt.Component): void
                public endComposition(): void
                public dispose(): void
                public getInputMethodControlObject(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class InputMethodHighlight {
                public static RAW_TEXT: int
                public static CONVERTED_TEXT: int
                public static UNSELECTED_RAW_TEXT_HIGHLIGHT: java.awt.im.InputMethodHighlight
                public static SELECTED_RAW_TEXT_HIGHLIGHT: java.awt.im.InputMethodHighlight
                public static UNSELECTED_CONVERTED_TEXT_HIGHLIGHT: java.awt.im.InputMethodHighlight
                public static SELECTED_CONVERTED_TEXT_HIGHLIGHT: java.awt.im.InputMethodHighlight
                public constructor(arg0: boolean, arg1: int)
                public constructor(arg0: boolean, arg1: int, arg2: int)
                public constructor(arg0: boolean, arg1: int, arg2: int, arg3: java.util.Map<java.awt.font.TextAttribute, any>)
                public isSelected(): boolean
                public getState(): int
                public getVariation(): int
                public getStyle(): java.util.Map<java.awt.font.TextAttribute, any>
                public static class: java.lang.Class<any>
            }
            interface InputMethodRequests {
                getTextLocation(arg0: java.awt.font.TextHitInfo): java.awt.Rectangle
                getLocationOffset(arg0: int, arg1: int): java.awt.font.TextHitInfo
                getInsertPositionOffset(): int
                getCommittedText(arg0: int, arg1: int, arg2: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                getCommittedTextLength(): int
                cancelLatestCommittedText(arg0: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                getSelectedText(arg0: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
            }
            class InputSubset extends java.lang.Character$Subset {
                public static LATIN: java.awt.im.InputSubset
                public static LATIN_DIGITS: java.awt.im.InputSubset
                public static TRADITIONAL_HANZI: java.awt.im.InputSubset
                public static SIMPLIFIED_HANZI: java.awt.im.InputSubset
                public static KANJI: java.awt.im.InputSubset
                public static HANJA: java.awt.im.InputSubset
                public static HALFWIDTH_KATAKANA: java.awt.im.InputSubset
                public static FULLWIDTH_LATIN: java.awt.im.InputSubset
                public static FULLWIDTH_DIGITS: java.awt.im.InputSubset
                public static class: java.lang.Class<any>
            }
        }
        namespace image {
            namespace renderable {
                interface ContextualRenderedImageFactory extends java.awt.image.renderable.RenderedImageFactory {
                    mapRenderContext(arg0: int, arg1: java.awt.image.renderable.RenderContext, arg2: java.awt.image.renderable.ParameterBlock, arg3: java.awt.image.renderable.RenderableImage): java.awt.image.renderable.RenderContext
                    create(arg0: java.awt.image.renderable.RenderContext, arg1: java.awt.image.renderable.ParameterBlock): java.awt.image.RenderedImage
                    getBounds2D(arg0: java.awt.image.renderable.ParameterBlock): java.awt.geom.Rectangle2D
                    getProperty(arg0: java.awt.image.renderable.ParameterBlock, arg1: java.lang.String | string): java.lang.Object
                    getPropertyNames(): java.lang.String[]
                    isDynamic(): boolean
                }
                class ParameterBlock implements java.lang.Cloneable , java.io.Serializable {
                    protected sources: java.util.Vector<java.lang.Object>
                    protected parameters: java.util.Vector<java.lang.Object>
                    public constructor()
                    public constructor(arg0: java.util.Vector<java.lang.Object>)
                    public constructor(arg0: java.util.Vector<java.lang.Object>, arg1: java.util.Vector<java.lang.Object>)
                    public shallowClone(): java.lang.Object
                    public clone(): java.lang.Object
                    public addSource(arg0: java.lang.Object): java.awt.image.renderable.ParameterBlock
                    public getSource(arg0: int): java.lang.Object
                    public setSource(arg0: java.lang.Object, arg1: int): java.awt.image.renderable.ParameterBlock
                    public getRenderedSource(arg0: int): java.awt.image.RenderedImage
                    public getRenderableSource(arg0: int): java.awt.image.renderable.RenderableImage
                    public getNumSources(): int
                    public getSources(): java.util.Vector<java.lang.Object>
                    public setSources(arg0: java.util.Vector<java.lang.Object>): void
                    public removeSources(): void
                    public getNumParameters(): int
                    public getParameters(): java.util.Vector<java.lang.Object>
                    public setParameters(arg0: java.util.Vector<java.lang.Object>): void
                    public removeParameters(): void
                    public add(arg0: java.lang.Object): java.awt.image.renderable.ParameterBlock
                    public add(arg0: byte): java.awt.image.renderable.ParameterBlock
                    public add(arg0: char): java.awt.image.renderable.ParameterBlock
                    public add(arg0: short): java.awt.image.renderable.ParameterBlock
                    public add(arg0: int): java.awt.image.renderable.ParameterBlock
                    public add(arg0: long): java.awt.image.renderable.ParameterBlock
                    public add(arg0: float): java.awt.image.renderable.ParameterBlock
                    public add(arg0: double): java.awt.image.renderable.ParameterBlock
                    public set(arg0: java.lang.Object, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: byte, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: char, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: short, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: int, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: long, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: float, arg1: int): java.awt.image.renderable.ParameterBlock
                    public set(arg0: double, arg1: int): java.awt.image.renderable.ParameterBlock
                    public getObjectParameter(arg0: int): java.lang.Object
                    public getByteParameter(arg0: int): byte
                    public getCharParameter(arg0: int): char
                    public getShortParameter(arg0: int): short
                    public getIntParameter(arg0: int): int
                    public getLongParameter(arg0: int): long
                    public getFloatParameter(arg0: int): float
                    public getDoubleParameter(arg0: int): double
                    public getParamClasses(): java.lang.Class[]
                    public static class: java.lang.Class<any>
                }
                class RenderContext implements java.lang.Cloneable {
                    public constructor(arg0: java.awt.geom.AffineTransform, arg1: java.awt.Shape, arg2: java.awt.RenderingHints)
                    public constructor(arg0: java.awt.geom.AffineTransform)
                    public constructor(arg0: java.awt.geom.AffineTransform, arg1: java.awt.RenderingHints)
                    public constructor(arg0: java.awt.geom.AffineTransform, arg1: java.awt.Shape)
                    public getRenderingHints(): java.awt.RenderingHints
                    public setRenderingHints(arg0: java.awt.RenderingHints): void
                    public setTransform(arg0: java.awt.geom.AffineTransform): void
                    public preConcatenateTransform(arg0: java.awt.geom.AffineTransform): void
                    public preConcetenateTransform(arg0: java.awt.geom.AffineTransform): void
                    public concatenateTransform(arg0: java.awt.geom.AffineTransform): void
                    public concetenateTransform(arg0: java.awt.geom.AffineTransform): void
                    public getTransform(): java.awt.geom.AffineTransform
                    public setAreaOfInterest(arg0: java.awt.Shape): void
                    public getAreaOfInterest(): java.awt.Shape
                    public clone(): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                interface RenderableImage {
                    HINTS_OBSERVED: string
                    getSources(): java.util.Vector<java.awt.image.renderable.RenderableImage>
                    getProperty(arg0: java.lang.String | string): java.lang.Object
                    getPropertyNames(): java.lang.String[]
                    isDynamic(): boolean
                    getWidth(): float
                    getHeight(): float
                    getMinX(): float
                    getMinY(): float
                    createScaledRendering(arg0: int, arg1: int, arg2: java.awt.RenderingHints): java.awt.image.RenderedImage
                    createDefaultRendering(): java.awt.image.RenderedImage
                    createRendering(arg0: java.awt.image.renderable.RenderContext): java.awt.image.RenderedImage
                }
                class RenderableImageOp implements java.awt.image.renderable.RenderableImage {
                    public constructor(arg0: java.awt.image.renderable.ContextualRenderedImageFactory, arg1: java.awt.image.renderable.ParameterBlock)
                    public getSources(): java.util.Vector<java.awt.image.renderable.RenderableImage>
                    public getProperty(arg0: java.lang.String | string): java.lang.Object
                    public getPropertyNames(): java.lang.String[]
                    public isDynamic(): boolean
                    public getWidth(): float
                    public getHeight(): float
                    public getMinX(): float
                    public getMinY(): float
                    public setParameterBlock(arg0: java.awt.image.renderable.ParameterBlock): java.awt.image.renderable.ParameterBlock
                    public getParameterBlock(): java.awt.image.renderable.ParameterBlock
                    public createScaledRendering(arg0: int, arg1: int, arg2: java.awt.RenderingHints): java.awt.image.RenderedImage
                    public createDefaultRendering(): java.awt.image.RenderedImage
                    public createRendering(arg0: java.awt.image.renderable.RenderContext): java.awt.image.RenderedImage
                    public static class: java.lang.Class<any>
                }
                class RenderableImageProducer implements java.awt.image.ImageProducer , java.lang.Runnable {
                    public constructor(arg0: java.awt.image.renderable.RenderableImage, arg1: java.awt.image.renderable.RenderContext)
                    public setRenderContext(arg0: java.awt.image.renderable.RenderContext): void
                    public addConsumer(arg0: java.awt.image.ImageConsumer): void
                    public isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                    public removeConsumer(arg0: java.awt.image.ImageConsumer): void
                    public startProduction(arg0: java.awt.image.ImageConsumer): void
                    public requestTopDownLeftRightResend(arg0: java.awt.image.ImageConsumer): void
                    public run(): void
                    public static class: java.lang.Class<any>
                }
                class RenderableImageProducer$$Lambda implements java.awt.image.ImageProducer , java.lang.Runnable {
                    public constructor(arg0: java.awt.image.renderable.RenderableImage, arg1: java.awt.image.renderable.RenderContext)
                }
                interface RenderedImageFactory {
                    create(arg0: java.awt.image.renderable.ParameterBlock, arg1: java.awt.RenderingHints): java.awt.image.RenderedImage
                }
                interface RenderedImageFactory$$Lambda {
                    (arg0: java.awt.image.renderable.ParameterBlock, arg1: java.awt.RenderingHints): java.awt.image.RenderedImage
                }
            }
            class AffineTransformOp implements java.awt.image.BufferedImageOp , java.awt.image.RasterOp {
                public static TYPE_NEAREST_NEIGHBOR: int
                public static TYPE_BILINEAR: int
                public static TYPE_BICUBIC: int
                public constructor(arg0: java.awt.geom.AffineTransform, arg1: java.awt.RenderingHints)
                public constructor(arg0: java.awt.geom.AffineTransform, arg1: int)
                public getInterpolationType(): int
                public filter(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                public filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public getBounds2D(arg0: java.awt.image.BufferedImage): java.awt.geom.Rectangle2D
                public getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                public createCompatibleDestImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.ColorModel): java.awt.image.BufferedImage
                public createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                public getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public getTransform(): java.awt.geom.AffineTransform
                public getRenderingHints(): java.awt.RenderingHints
                public static class: java.lang.Class<any>
            }
            class AreaAveragingScaleFilter extends java.awt.image.ReplicateScaleFilter {
                public constructor(arg0: int, arg1: int)
                public setHints(arg0: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public static class: java.lang.Class<any>
            }
            class BandCombineOp implements java.awt.image.RasterOp {
                public constructor(arg0: float[][], arg1: java.awt.RenderingHints)
                public getMatrix(): float[][]
                public filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                public createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                public getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public getRenderingHints(): java.awt.RenderingHints
                public static class: java.lang.Class<any>
            }
            class BandedSampleModel extends java.awt.image.ComponentSampleModel {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: int[])
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public createSubsetSampleModel(arg0: int[]): java.awt.image.SampleModel
                public createDataBuffer(): java.awt.image.DataBuffer
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): java.lang.Object
                public getPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): int[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): int[]
                public getSample(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): int
                public getSampleFloat(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): float
                public getSampleDouble(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): double
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): int[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): void
                public setPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: float, arg4: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: double, arg4: java.awt.image.DataBuffer): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): void
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            abstract class BufferStrategy {
                public constructor()
                public getCapabilities(): java.awt.BufferCapabilities
                public getDrawGraphics(): java.awt.Graphics
                public contentsLost(): boolean
                public contentsRestored(): boolean
                public show(): void
                public dispose(): void
                public static class: java.lang.Class<any>
            }
            class BufferedImage extends java.awt.Image implements java.awt.image.WritableRenderedImage , java.awt.Transparency {
                public static TYPE_CUSTOM: int
                public static TYPE_INT_RGB: int
                public static TYPE_INT_ARGB: int
                public static TYPE_INT_ARGB_PRE: int
                public static TYPE_INT_BGR: int
                public static TYPE_3BYTE_BGR: int
                public static TYPE_4BYTE_ABGR: int
                public static TYPE_4BYTE_ABGR_PRE: int
                public static TYPE_USHORT_565_RGB: int
                public static TYPE_USHORT_555_RGB: int
                public static TYPE_BYTE_GRAY: int
                public static TYPE_USHORT_GRAY: int
                public static TYPE_BYTE_BINARY: int
                public static TYPE_BYTE_INDEXED: int
                public constructor(arg0: int, arg1: int, arg2: int)
                public constructor(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.IndexColorModel)
                public constructor(arg0: java.awt.image.ColorModel, arg1: java.awt.image.WritableRaster, arg2: boolean, arg3: java.util.Hashtable<any, any>)
                public getType(): int
                public getColorModel(): java.awt.image.ColorModel
                public getRaster(): java.awt.image.WritableRaster
                public getAlphaRaster(): java.awt.image.WritableRaster
                public getRGB(arg0: int, arg1: int): int
                public getRGB(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: int, arg6: int): int[]
                public setRGB(arg0: int, arg1: int, arg2: int): void
                public setRGB(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: int, arg6: int): void
                public getWidth(): int
                public getHeight(): int
                public getWidth(arg0: java.awt.image.ImageObserver): int
                public getHeight(arg0: java.awt.image.ImageObserver): int
                public getSource(): java.awt.image.ImageProducer
                public getProperty(arg0: java.lang.String | string, arg1: java.awt.image.ImageObserver): java.lang.Object
                public getProperty(arg0: java.lang.String | string): java.lang.Object
                public getGraphics(): java.awt.Graphics
                public createGraphics(): java.awt.Graphics2D
                public getSubimage(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.BufferedImage
                public isAlphaPremultiplied(): boolean
                public coerceData(arg0: boolean): void
                public toString(): string
                public getSources(): java.util.Vector<java.awt.image.RenderedImage>
                public getPropertyNames(): java.lang.String[]
                public getMinX(): int
                public getMinY(): int
                public getSampleModel(): java.awt.image.SampleModel
                public getNumXTiles(): int
                public getNumYTiles(): int
                public getMinTileX(): int
                public getMinTileY(): int
                public getTileWidth(): int
                public getTileHeight(): int
                public getTileGridXOffset(): int
                public getTileGridYOffset(): int
                public getTile(arg0: int, arg1: int): java.awt.image.Raster
                public getData(): java.awt.image.Raster
                public getData(arg0: java.awt.Rectangle): java.awt.image.Raster
                public copyData(arg0: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public setData(arg0: java.awt.image.Raster): void
                public addTileObserver(arg0: java.awt.image.TileObserver | java.awt.image.TileObserver$$Lambda): void
                public removeTileObserver(arg0: java.awt.image.TileObserver | java.awt.image.TileObserver$$Lambda): void
                public isTileWritable(arg0: int, arg1: int): boolean
                public getWritableTileIndices(): java.awt.Point[]
                public hasTileWriters(): boolean
                public getWritableTile(arg0: int, arg1: int): java.awt.image.WritableRaster
                public releaseWritableTile(arg0: int, arg1: int): void
                public getTransparency(): int
                public static class: java.lang.Class<any>
            }
            class BufferedImageFilter extends java.awt.image.ImageFilter implements java.lang.Cloneable {
                public constructor(arg0: java.awt.image.BufferedImageOp)
                public getBufferedImageOp(): java.awt.image.BufferedImageOp
                public setDimensions(arg0: int, arg1: int): void
                public setColorModel(arg0: java.awt.image.ColorModel): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public imageComplete(arg0: int): void
                public static class: java.lang.Class<any>
            }
            interface BufferedImageOp {
                filter(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                getBounds2D(arg0: java.awt.image.BufferedImage): java.awt.geom.Rectangle2D
                createCompatibleDestImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.ColorModel): java.awt.image.BufferedImage
                getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                getRenderingHints(): java.awt.RenderingHints
            }
            class ByteLookupTable extends java.awt.image.LookupTable {
                public constructor(arg0: int, arg1: byte[][])
                public constructor(arg0: int, arg1: byte[])
                public getTable(): byte[][]
                public lookupPixel(arg0: int[], arg1: int[]): int[]
                public lookupPixel(arg0: byte[], arg1: byte[]): byte[]
                public static class: java.lang.Class<any>
            }
            class ColorConvertOp implements java.awt.image.BufferedImageOp , java.awt.image.RasterOp {
                public constructor(arg0: java.awt.RenderingHints)
                public constructor(arg0: java.awt.color.ColorSpace, arg1: java.awt.RenderingHints)
                public constructor(arg0: java.awt.color.ColorSpace, arg1: java.awt.color.ColorSpace, arg2: java.awt.RenderingHints)
                public constructor(arg0: java.awt.color.ICC_Profile[], arg1: java.awt.RenderingHints)
                public getICC_Profiles(): java.awt.color.ICC_Profile[]
                public filter(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                public filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public getBounds2D(arg0: java.awt.image.BufferedImage): java.awt.geom.Rectangle2D
                public getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                public createCompatibleDestImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.ColorModel): java.awt.image.BufferedImage
                public createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                public getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public getRenderingHints(): java.awt.RenderingHints
                public static class: java.lang.Class<any>
            }
            abstract class ColorModel implements java.awt.Transparency {
                protected pixel_bits: int
                protected transferType: int
                public static getRGBdefault(): java.awt.image.ColorModel
                public constructor(arg0: int)
                protected constructor(arg0: int, arg1: int[], arg2: java.awt.color.ColorSpace, arg3: boolean, arg4: boolean, arg5: int, arg6: int)
                public hasAlpha(): boolean
                public isAlphaPremultiplied(): boolean
                public getTransferType(): int
                public getPixelSize(): int
                public getComponentSize(arg0: int): int
                public getComponentSize(): int[]
                public getTransparency(): int
                public getNumComponents(): int
                public getNumColorComponents(): int
                public getRed(arg0: int): int
                public getGreen(arg0: int): int
                public getBlue(arg0: int): int
                public getAlpha(arg0: int): int
                public getRGB(arg0: int): int
                public getRed(arg0: java.lang.Object): int
                public getGreen(arg0: java.lang.Object): int
                public getBlue(arg0: java.lang.Object): int
                public getAlpha(arg0: java.lang.Object): int
                public getRGB(arg0: java.lang.Object): int
                public getDataElements(arg0: int, arg1: java.lang.Object): java.lang.Object
                public getComponents(arg0: int, arg1: int[], arg2: int): int[]
                public getComponents(arg0: java.lang.Object, arg1: int[], arg2: int): int[]
                public getUnnormalizedComponents(arg0: float[], arg1: int, arg2: int[], arg3: int): int[]
                public getNormalizedComponents(arg0: int[], arg1: int, arg2: float[], arg3: int): float[]
                public getDataElement(arg0: int[], arg1: int): int
                public getDataElements(arg0: int[], arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElement(arg0: float[], arg1: int): int
                public getDataElements(arg0: float[], arg1: int, arg2: java.lang.Object): java.lang.Object
                public getNormalizedComponents(arg0: java.lang.Object, arg1: float[], arg2: int): float[]
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public getColorSpace(): java.awt.color.ColorSpace
                public coerceData(arg0: java.awt.image.WritableRaster, arg1: boolean): java.awt.image.ColorModel
                public isCompatibleRaster(arg0: java.awt.image.Raster): boolean
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public isCompatibleSampleModel(arg0: java.awt.image.SampleModel): boolean
                public finalize(): void
                public getAlphaRaster(arg0: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class ComponentColorModel extends java.awt.image.ColorModel {
                public constructor(arg0: java.awt.color.ColorSpace, arg1: int[], arg2: boolean, arg3: boolean, arg4: int, arg5: int)
                public constructor(arg0: java.awt.color.ColorSpace, arg1: boolean, arg2: boolean, arg3: int, arg4: int)
                public getRed(arg0: int): int
                public getGreen(arg0: int): int
                public getBlue(arg0: int): int
                public getAlpha(arg0: int): int
                public getRGB(arg0: int): int
                public getRed(arg0: java.lang.Object): int
                public getGreen(arg0: java.lang.Object): int
                public getBlue(arg0: java.lang.Object): int
                public getAlpha(arg0: java.lang.Object): int
                public getRGB(arg0: java.lang.Object): int
                public getDataElements(arg0: int, arg1: java.lang.Object): java.lang.Object
                public getComponents(arg0: int, arg1: int[], arg2: int): int[]
                public getComponents(arg0: java.lang.Object, arg1: int[], arg2: int): int[]
                public getUnnormalizedComponents(arg0: float[], arg1: int, arg2: int[], arg3: int): int[]
                public getNormalizedComponents(arg0: int[], arg1: int, arg2: float[], arg3: int): float[]
                public getDataElement(arg0: int[], arg1: int): int
                public getDataElements(arg0: int[], arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElement(arg0: float[], arg1: int): int
                public getDataElements(arg0: float[], arg1: int, arg2: java.lang.Object): java.lang.Object
                public getNormalizedComponents(arg0: java.lang.Object, arg1: float[], arg2: int): float[]
                public coerceData(arg0: java.awt.image.WritableRaster, arg1: boolean): java.awt.image.ColorModel
                public isCompatibleRaster(arg0: java.awt.image.Raster): boolean
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public isCompatibleSampleModel(arg0: java.awt.image.SampleModel): boolean
                public getAlphaRaster(arg0: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            class ComponentSampleModel extends java.awt.image.SampleModel {
                protected bandOffsets: int[]
                protected bankIndices: int[]
                protected numBands: int
                protected numBanks: int
                protected scanlineStride: int
                protected pixelStride: int
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[])
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: int[])
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public createSubsetSampleModel(arg0: int[]): java.awt.image.SampleModel
                public createDataBuffer(): java.awt.image.DataBuffer
                public getOffset(arg0: int, arg1: int): int
                public getOffset(arg0: int, arg1: int, arg2: int): int
                public getSampleSize(): int[]
                public getSampleSize(arg0: int): int
                public getBankIndices(): int[]
                public getBandOffsets(): int[]
                public getScanlineStride(): int
                public getPixelStride(): int
                public getNumDataElements(): int
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): java.lang.Object
                public getPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): int[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): int[]
                public getSample(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): int
                public getSampleFloat(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): float
                public getSampleDouble(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): double
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): int[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): void
                public setPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: float, arg4: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: double, arg4: java.awt.image.DataBuffer): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): void
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            class ConvolveOp implements java.awt.image.BufferedImageOp , java.awt.image.RasterOp {
                public static EDGE_ZERO_FILL: int
                public static EDGE_NO_OP: int
                public constructor(arg0: java.awt.image.Kernel, arg1: int, arg2: java.awt.RenderingHints)
                public constructor(arg0: java.awt.image.Kernel)
                public getEdgeCondition(): int
                public getKernel(): java.awt.image.Kernel
                public filter(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                public filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public createCompatibleDestImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.ColorModel): java.awt.image.BufferedImage
                public createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                public getBounds2D(arg0: java.awt.image.BufferedImage): java.awt.geom.Rectangle2D
                public getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                public getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public getRenderingHints(): java.awt.RenderingHints
                public static class: java.lang.Class<any>
            }
            class CropImageFilter extends java.awt.image.ImageFilter {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public setProperties(arg0: java.util.Hashtable<any, any>): void
                public setDimensions(arg0: int, arg1: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public static class: java.lang.Class<any>
            }
            abstract class DataBuffer {
                public static TYPE_BYTE: int
                public static TYPE_USHORT: int
                public static TYPE_SHORT: int
                public static TYPE_INT: int
                public static TYPE_FLOAT: int
                public static TYPE_DOUBLE: int
                public static TYPE_UNDEFINED: int
                protected dataType: int
                protected banks: int
                protected offset: int
                protected size: int
                protected offsets: int[]
                public static getDataTypeSize(arg0: int): int
                protected constructor(arg0: int, arg1: int)
                protected constructor(arg0: int, arg1: int, arg2: int)
                protected constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                protected constructor(arg0: int, arg1: int, arg2: int, arg3: int[])
                public getDataType(): int
                public getSize(): int
                public getOffset(): int
                public getOffsets(): int[]
                public getNumBanks(): int
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public getElemFloat(arg0: int): float
                public getElemFloat(arg0: int, arg1: int): float
                public setElemFloat(arg0: int, arg1: float): void
                public setElemFloat(arg0: int, arg1: int, arg2: float): void
                public getElemDouble(arg0: int): double
                public getElemDouble(arg0: int, arg1: int): double
                public setElemDouble(arg0: int, arg1: double): void
                public setElemDouble(arg0: int, arg1: int, arg2: double): void
                public static class: java.lang.Class<any>
            }
            class DataBufferByte extends java.awt.image.DataBuffer {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: byte[], arg1: int)
                public constructor(arg0: byte[], arg1: int, arg2: int)
                public constructor(arg0: byte[][], arg1: int)
                public constructor(arg0: byte[][], arg1: int, arg2: int[])
                public getData(): byte[]
                public getData(arg0: int): byte[]
                public getBankData(): byte[][]
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class DataBufferDouble extends java.awt.image.DataBuffer {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: double[], arg1: int)
                public constructor(arg0: double[], arg1: int, arg2: int)
                public constructor(arg0: double[][], arg1: int)
                public constructor(arg0: double[][], arg1: int, arg2: int[])
                public getData(): double[]
                public getData(arg0: int): double[]
                public getBankData(): double[][]
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public getElemFloat(arg0: int): float
                public getElemFloat(arg0: int, arg1: int): float
                public setElemFloat(arg0: int, arg1: float): void
                public setElemFloat(arg0: int, arg1: int, arg2: float): void
                public getElemDouble(arg0: int): double
                public getElemDouble(arg0: int, arg1: int): double
                public setElemDouble(arg0: int, arg1: double): void
                public setElemDouble(arg0: int, arg1: int, arg2: double): void
                public static class: java.lang.Class<any>
            }
            class DataBufferFloat extends java.awt.image.DataBuffer {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: float[], arg1: int)
                public constructor(arg0: float[], arg1: int, arg2: int)
                public constructor(arg0: float[][], arg1: int)
                public constructor(arg0: float[][], arg1: int, arg2: int[])
                public getData(): float[]
                public getData(arg0: int): float[]
                public getBankData(): float[][]
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public getElemFloat(arg0: int): float
                public getElemFloat(arg0: int, arg1: int): float
                public setElemFloat(arg0: int, arg1: float): void
                public setElemFloat(arg0: int, arg1: int, arg2: float): void
                public getElemDouble(arg0: int): double
                public getElemDouble(arg0: int, arg1: int): double
                public setElemDouble(arg0: int, arg1: double): void
                public setElemDouble(arg0: int, arg1: int, arg2: double): void
                public static class: java.lang.Class<any>
            }
            class DataBufferInt extends java.awt.image.DataBuffer {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: int[], arg1: int)
                public constructor(arg0: int[], arg1: int, arg2: int)
                public constructor(arg0: int[][], arg1: int)
                public constructor(arg0: int[][], arg1: int, arg2: int[])
                public getData(): int[]
                public getData(arg0: int): int[]
                public getBankData(): int[][]
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class DataBufferShort extends java.awt.image.DataBuffer {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: short[], arg1: int)
                public constructor(arg0: short[], arg1: int, arg2: int)
                public constructor(arg0: short[][], arg1: int)
                public constructor(arg0: short[][], arg1: int, arg2: int[])
                public getData(): short[]
                public getData(arg0: int): short[]
                public getBankData(): short[][]
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class DataBufferUShort extends java.awt.image.DataBuffer {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: short[], arg1: int)
                public constructor(arg0: short[], arg1: int, arg2: int)
                public constructor(arg0: short[][], arg1: int)
                public constructor(arg0: short[][], arg1: int, arg2: int[])
                public getData(): short[]
                public getData(arg0: int): short[]
                public getBankData(): short[][]
                public getElem(arg0: int): int
                public getElem(arg0: int, arg1: int): int
                public setElem(arg0: int, arg1: int): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class DirectColorModel extends java.awt.image.PackedColorModel {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int)
                public constructor(arg0: java.awt.color.ColorSpace, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: boolean, arg7: int)
                public getRedMask(): int
                public getGreenMask(): int
                public getBlueMask(): int
                public getAlphaMask(): int
                public getRed(arg0: int): int
                public getGreen(arg0: int): int
                public getBlue(arg0: int): int
                public getAlpha(arg0: int): int
                public getRGB(arg0: int): int
                public getRed(arg0: java.lang.Object): int
                public getGreen(arg0: java.lang.Object): int
                public getBlue(arg0: java.lang.Object): int
                public getAlpha(arg0: java.lang.Object): int
                public getRGB(arg0: java.lang.Object): int
                public getDataElements(arg0: int, arg1: java.lang.Object): java.lang.Object
                public getComponents(arg0: int, arg1: int[], arg2: int): int[]
                public getComponents(arg0: java.lang.Object, arg1: int[], arg2: int): int[]
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public getDataElement(arg0: int[], arg1: int): int
                public getDataElements(arg0: int[], arg1: int, arg2: java.lang.Object): java.lang.Object
                public coerceData(arg0: java.awt.image.WritableRaster, arg1: boolean): java.awt.image.ColorModel
                public isCompatibleRaster(arg0: java.awt.image.Raster): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class FilteredImageSource implements java.awt.image.ImageProducer {
                public constructor(arg0: java.awt.image.ImageProducer, arg1: java.awt.image.ImageFilter)
                public addConsumer(arg0: java.awt.image.ImageConsumer): void
                public isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                public removeConsumer(arg0: java.awt.image.ImageConsumer): void
                public startProduction(arg0: java.awt.image.ImageConsumer): void
                public requestTopDownLeftRightResend(arg0: java.awt.image.ImageConsumer): void
                public static class: java.lang.Class<any>
            }
            interface ImageConsumer {
                RANDOMPIXELORDER: int
                TOPDOWNLEFTRIGHT: int
                COMPLETESCANLINES: int
                SINGLEPASS: int
                SINGLEFRAME: int
                IMAGEERROR: int
                SINGLEFRAMEDONE: int
                STATICIMAGEDONE: int
                IMAGEABORTED: int
                setDimensions(arg0: int, arg1: int): void
                setProperties(arg0: java.util.Hashtable<any, any>): void
                setColorModel(arg0: java.awt.image.ColorModel): void
                setHints(arg0: int): void
                setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                imageComplete(arg0: int): void
            }
            class ImageFilter implements java.awt.image.ImageConsumer , java.lang.Cloneable {
                protected consumer: java.awt.image.ImageConsumer
                public constructor()
                public getFilterInstance(arg0: java.awt.image.ImageConsumer): java.awt.image.ImageFilter
                public setDimensions(arg0: int, arg1: int): void
                public setProperties(arg0: java.util.Hashtable<any, any>): void
                public setColorModel(arg0: java.awt.image.ColorModel): void
                public setHints(arg0: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public imageComplete(arg0: int): void
                public resendTopDownLeftRight(arg0: java.awt.image.ImageProducer): void
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface ImageObserver {
                WIDTH: int
                HEIGHT: int
                PROPERTIES: int
                SOMEBITS: int
                FRAMEBITS: int
                ALLBITS: int
                ERROR: int
                ABORT: int
                imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            }
            interface ImageProducer {
                addConsumer(arg0: java.awt.image.ImageConsumer): void
                isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                removeConsumer(arg0: java.awt.image.ImageConsumer): void
                startProduction(arg0: java.awt.image.ImageConsumer): void
                requestTopDownLeftRightResend(arg0: java.awt.image.ImageConsumer): void
            }
            class ImagingOpException extends java.lang.RuntimeException {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class IndexColorModel extends java.awt.image.ColorModel {
                public constructor(arg0: int, arg1: int, arg2: byte[], arg3: byte[], arg4: byte[])
                public constructor(arg0: int, arg1: int, arg2: byte[], arg3: byte[], arg4: byte[], arg5: int)
                public constructor(arg0: int, arg1: int, arg2: byte[], arg3: byte[], arg4: byte[], arg5: byte[])
                public constructor(arg0: int, arg1: int, arg2: byte[], arg3: int, arg4: boolean)
                public constructor(arg0: int, arg1: int, arg2: byte[], arg3: int, arg4: boolean, arg5: int)
                public constructor(arg0: int, arg1: int, arg2: int[], arg3: int, arg4: boolean, arg5: int, arg6: int)
                public constructor(arg0: int, arg1: int, arg2: int[], arg3: int, arg4: int, arg5: java.math.BigInteger)
                public getTransparency(): int
                public getComponentSize(): int[]
                public getMapSize(): int
                public getTransparentPixel(): int
                public getReds(arg0: byte[]): void
                public getGreens(arg0: byte[]): void
                public getBlues(arg0: byte[]): void
                public getAlphas(arg0: byte[]): void
                public getRGBs(arg0: int[]): void
                public getRed(arg0: int): int
                public getGreen(arg0: int): int
                public getBlue(arg0: int): int
                public getAlpha(arg0: int): int
                public getRGB(arg0: int): int
                public getDataElements(arg0: int, arg1: java.lang.Object): java.lang.Object
                public getComponents(arg0: int, arg1: int[], arg2: int): int[]
                public getComponents(arg0: java.lang.Object, arg1: int[], arg2: int): int[]
                public getDataElement(arg0: int[], arg1: int): int
                public getDataElements(arg0: int[], arg1: int, arg2: java.lang.Object): java.lang.Object
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public isCompatibleRaster(arg0: java.awt.image.Raster): boolean
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public isCompatibleSampleModel(arg0: java.awt.image.SampleModel): boolean
                public convertToIntDiscrete(arg0: java.awt.image.Raster, arg1: boolean): java.awt.image.BufferedImage
                public isValid(arg0: int): boolean
                public isValid(): boolean
                public getValidPixels(): java.math.BigInteger
                public finalize(): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class Kernel implements java.lang.Cloneable {
                public constructor(arg0: int, arg1: int, arg2: float[])
                public getXOrigin(): int
                public getYOrigin(): int
                public getWidth(): int
                public getHeight(): int
                public getKernelData(arg0: float[]): float[]
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class LookupOp implements java.awt.image.BufferedImageOp , java.awt.image.RasterOp {
                public constructor(arg0: java.awt.image.LookupTable, arg1: java.awt.RenderingHints)
                public getTable(): java.awt.image.LookupTable
                public filter(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                public filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public getBounds2D(arg0: java.awt.image.BufferedImage): java.awt.geom.Rectangle2D
                public getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                public createCompatibleDestImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.ColorModel): java.awt.image.BufferedImage
                public createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                public getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public getRenderingHints(): java.awt.RenderingHints
                public static class: java.lang.Class<any>
            }
            abstract class LookupTable {
                protected constructor(arg0: int, arg1: int)
                public getNumComponents(): int
                public getOffset(): int
                public lookupPixel(arg0: int[], arg1: int[]): int[]
                public static class: java.lang.Class<any>
            }
            class MemoryImageSource implements java.awt.image.ImageProducer {
                public constructor(arg0: int, arg1: int, arg2: java.awt.image.ColorModel, arg3: byte[], arg4: int, arg5: int)
                public constructor(arg0: int, arg1: int, arg2: java.awt.image.ColorModel, arg3: byte[], arg4: int, arg5: int, arg6: java.util.Hashtable<any, any>)
                public constructor(arg0: int, arg1: int, arg2: java.awt.image.ColorModel, arg3: int[], arg4: int, arg5: int)
                public constructor(arg0: int, arg1: int, arg2: java.awt.image.ColorModel, arg3: int[], arg4: int, arg5: int, arg6: java.util.Hashtable<any, any>)
                public constructor(arg0: int, arg1: int, arg2: int[], arg3: int, arg4: int)
                public constructor(arg0: int, arg1: int, arg2: int[], arg3: int, arg4: int, arg5: java.util.Hashtable<any, any>)
                public addConsumer(arg0: java.awt.image.ImageConsumer): void
                public isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                public removeConsumer(arg0: java.awt.image.ImageConsumer): void
                public startProduction(arg0: java.awt.image.ImageConsumer): void
                public requestTopDownLeftRightResend(arg0: java.awt.image.ImageConsumer): void
                public setAnimated(arg0: boolean): void
                public setFullBufferUpdates(arg0: boolean): void
                public newPixels(): void
                public newPixels(arg0: int, arg1: int, arg2: int, arg3: int): void
                public newPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
                public newPixels(arg0: byte[], arg1: java.awt.image.ColorModel, arg2: int, arg3: int): void
                public newPixels(arg0: int[], arg1: java.awt.image.ColorModel, arg2: int, arg3: int): void
                public static class: java.lang.Class<any>
            }
            class MultiPixelPackedSampleModel extends java.awt.image.SampleModel {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int)
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public createDataBuffer(): java.awt.image.DataBuffer
                public getNumDataElements(): int
                public getSampleSize(): int[]
                public getSampleSize(arg0: int): int
                public getOffset(arg0: int, arg1: int): int
                public getBitOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelBitStride(): int
                public getDataBitOffset(): int
                public getTransferType(): int
                public createSubsetSampleModel(arg0: int[]): java.awt.image.SampleModel
                public getSample(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): int
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.DataBuffer): void
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): java.lang.Object
                public getPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): int[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): void
                public setPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): void
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            abstract class PackedColorModel extends java.awt.image.ColorModel {
                public constructor(arg0: java.awt.color.ColorSpace, arg1: int, arg2: int[], arg3: int, arg4: boolean, arg5: int, arg6: int)
                public constructor(arg0: java.awt.color.ColorSpace, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: boolean, arg7: int, arg8: int)
                public getMask(arg0: int): int
                public getMasks(): int[]
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public isCompatibleSampleModel(arg0: java.awt.image.SampleModel): boolean
                public getAlphaRaster(arg0: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            class PixelGrabber implements java.awt.image.ImageConsumer {
                public constructor(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: int, arg7: int)
                public constructor(arg0: java.awt.image.ImageProducer, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: int, arg7: int)
                public constructor(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: boolean)
                public startGrabbing(): void
                public abortGrabbing(): void
                public grabPixels(): boolean
                public grabPixels(arg0: long): boolean
                public getStatus(): int
                public getWidth(): int
                public getHeight(): int
                public getPixels(): java.lang.Object
                public getColorModel(): java.awt.image.ColorModel
                public setDimensions(arg0: int, arg1: int): void
                public setHints(arg0: int): void
                public setProperties(arg0: java.util.Hashtable<any, any>): void
                public setColorModel(arg0: java.awt.image.ColorModel): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public imageComplete(arg0: int): void
                public status(): int
                public static class: java.lang.Class<any>
            }
            class PixelInterleavedSampleModel extends java.awt.image.ComponentSampleModel {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[])
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public createSubsetSampleModel(arg0: int[]): java.awt.image.SampleModel
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            abstract class RGBImageFilter extends java.awt.image.ImageFilter {
                protected origmodel: java.awt.image.ColorModel
                protected newmodel: java.awt.image.ColorModel
                protected canFilterIndexColorModel: boolean
                public constructor()
                public setColorModel(arg0: java.awt.image.ColorModel): void
                public substituteColorModel(arg0: java.awt.image.ColorModel, arg1: java.awt.image.ColorModel): void
                public filterIndexColorModel(arg0: java.awt.image.IndexColorModel): java.awt.image.IndexColorModel
                public filterRGBPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: int, arg6: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public filterRGB(arg0: int, arg1: int, arg2: int): int
                public static class: java.lang.Class<any>
            }
            class Raster {
                protected sampleModel: java.awt.image.SampleModel
                protected dataBuffer: java.awt.image.DataBuffer
                protected minX: int
                protected minY: int
                protected width: int
                protected height: int
                protected sampleModelTranslateX: int
                protected sampleModelTranslateY: int
                protected numBands: int
                protected numDataElements: int
                protected parent: java.awt.image.Raster
                public static createInterleavedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Point): java.awt.image.WritableRaster
                public static createInterleavedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.Point): java.awt.image.WritableRaster
                public static createBandedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Point): java.awt.image.WritableRaster
                public static createBandedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: int[], arg6: java.awt.Point): java.awt.image.WritableRaster
                public static createPackedRaster(arg0: int, arg1: int, arg2: int, arg3: int[], arg4: java.awt.Point): java.awt.image.WritableRaster
                public static createPackedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Point): java.awt.image.WritableRaster
                public static createInterleavedRaster(arg0: java.awt.image.DataBuffer, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.Point): java.awt.image.WritableRaster
                public static createBandedRaster(arg0: java.awt.image.DataBuffer, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: int[], arg6: java.awt.Point): java.awt.image.WritableRaster
                public static createPackedRaster(arg0: java.awt.image.DataBuffer, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.Point): java.awt.image.WritableRaster
                public static createPackedRaster(arg0: java.awt.image.DataBuffer, arg1: int, arg2: int, arg3: int, arg4: java.awt.Point): java.awt.image.WritableRaster
                public static createRaster(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point): java.awt.image.Raster
                public static createWritableRaster(arg0: java.awt.image.SampleModel, arg1: java.awt.Point): java.awt.image.WritableRaster
                public static createWritableRaster(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point): java.awt.image.WritableRaster
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: java.awt.image.Raster)
                public getParent(): java.awt.image.Raster
                public getSampleModelTranslateX(): int
                public getSampleModelTranslateY(): int
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: java.awt.Rectangle): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.WritableRaster
                public createTranslatedChild(arg0: int, arg1: int): java.awt.image.Raster
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public getBounds(): java.awt.Rectangle
                public getMinX(): int
                public getMinY(): int
                public getWidth(): int
                public getHeight(): int
                public getNumBands(): int
                public getNumDataElements(): int
                public getTransferType(): int
                public getDataBuffer(): java.awt.image.DataBuffer
                public getSampleModel(): java.awt.image.SampleModel
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getPixel(arg0: int, arg1: int, arg2: int[]): int[]
                public getPixel(arg0: int, arg1: int, arg2: float[]): float[]
                public getPixel(arg0: int, arg1: int, arg2: double[]): double[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[]): int[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: float[]): float[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: double[]): double[]
                public getSample(arg0: int, arg1: int, arg2: int): int
                public getSampleFloat(arg0: int, arg1: int, arg2: int): float
                public getSampleDouble(arg0: int, arg1: int, arg2: int): double
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[]): int[]
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: float[]): float[]
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: double[]): double[]
                public static class: java.lang.Class<any>
            }
            class RasterFormatException extends java.lang.RuntimeException {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            interface RasterOp {
                filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                getRenderingHints(): java.awt.RenderingHints
            }
            interface RenderedImage {
                getSources(): java.util.Vector<java.awt.image.RenderedImage>
                getProperty(arg0: java.lang.String | string): java.lang.Object
                getPropertyNames(): java.lang.String[]
                getColorModel(): java.awt.image.ColorModel
                getSampleModel(): java.awt.image.SampleModel
                getWidth(): int
                getHeight(): int
                getMinX(): int
                getMinY(): int
                getNumXTiles(): int
                getNumYTiles(): int
                getMinTileX(): int
                getMinTileY(): int
                getTileWidth(): int
                getTileHeight(): int
                getTileGridXOffset(): int
                getTileGridYOffset(): int
                getTile(arg0: int, arg1: int): java.awt.image.Raster
                getData(): java.awt.image.Raster
                getData(arg0: java.awt.Rectangle): java.awt.image.Raster
                copyData(arg0: java.awt.image.WritableRaster): java.awt.image.WritableRaster
            }
            class ReplicateScaleFilter extends java.awt.image.ImageFilter {
                protected srcWidth: int
                protected srcHeight: int
                protected destWidth: int
                protected destHeight: int
                protected srcrows: int[]
                protected srccols: int[]
                protected outpixbuf: java.lang.Object
                public constructor(arg0: int, arg1: int)
                public setProperties(arg0: java.util.Hashtable<any, any>): void
                public setDimensions(arg0: int, arg1: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public static class: java.lang.Class<any>
            }
            class RescaleOp implements java.awt.image.BufferedImageOp , java.awt.image.RasterOp {
                public constructor(arg0: float[], arg1: float[], arg2: java.awt.RenderingHints)
                public constructor(arg0: float, arg1: float, arg2: java.awt.RenderingHints)
                public getScaleFactors(arg0: float[]): float[]
                public getOffsets(arg0: float[]): float[]
                public getNumFactors(): int
                public filter(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                public filter(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public getBounds2D(arg0: java.awt.image.BufferedImage): java.awt.geom.Rectangle2D
                public getBounds2D(arg0: java.awt.image.Raster): java.awt.geom.Rectangle2D
                public createCompatibleDestImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.ColorModel): java.awt.image.BufferedImage
                public createCompatibleDestRaster(arg0: java.awt.image.Raster): java.awt.image.WritableRaster
                public getPoint2D(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D): java.awt.geom.Point2D
                public getRenderingHints(): java.awt.RenderingHints
                public static class: java.lang.Class<any>
            }
            abstract class SampleModel {
                protected width: int
                protected height: int
                protected numBands: int
                protected dataType: int
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public getWidth(): int
                public getHeight(): int
                public getNumBands(): int
                public getNumDataElements(): int
                public getDataType(): int
                public getTransferType(): int
                public getPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): int[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object, arg5: java.awt.image.DataBuffer): java.lang.Object
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object, arg5: java.awt.image.DataBuffer): void
                public getPixel(arg0: int, arg1: int, arg2: float[], arg3: java.awt.image.DataBuffer): float[]
                public getPixel(arg0: int, arg1: int, arg2: double[], arg3: java.awt.image.DataBuffer): double[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): int[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: float[], arg5: java.awt.image.DataBuffer): float[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: double[], arg5: java.awt.image.DataBuffer): double[]
                public getSample(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): int
                public getSampleFloat(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): float
                public getSampleDouble(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): double
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): int[]
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: float[], arg6: java.awt.image.DataBuffer): float[]
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: double[], arg6: java.awt.image.DataBuffer): double[]
                public setPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): void
                public setPixel(arg0: int, arg1: int, arg2: float[], arg3: java.awt.image.DataBuffer): void
                public setPixel(arg0: int, arg1: int, arg2: double[], arg3: java.awt.image.DataBuffer): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: float[], arg5: java.awt.image.DataBuffer): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: double[], arg5: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: float, arg4: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: double, arg4: java.awt.image.DataBuffer): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: float[], arg6: java.awt.image.DataBuffer): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: double[], arg6: java.awt.image.DataBuffer): void
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public createSubsetSampleModel(arg0: int[]): java.awt.image.SampleModel
                public createDataBuffer(): java.awt.image.DataBuffer
                public getSampleSize(): int[]
                public getSampleSize(arg0: int): int
                public static class: java.lang.Class<any>
            }
            class ShortLookupTable extends java.awt.image.LookupTable {
                public constructor(arg0: int, arg1: short[][])
                public constructor(arg0: int, arg1: short[])
                public getTable(): short[][]
                public lookupPixel(arg0: int[], arg1: int[]): int[]
                public lookupPixel(arg0: short[], arg1: short[]): short[]
                public static class: java.lang.Class<any>
            }
            class SinglePixelPackedSampleModel extends java.awt.image.SampleModel {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int[])
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[])
                public getNumDataElements(): int
                public createCompatibleSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
                public createDataBuffer(): java.awt.image.DataBuffer
                public getSampleSize(): int[]
                public getSampleSize(arg0: int): int
                public getOffset(arg0: int, arg1: int): int
                public getBitOffsets(): int[]
                public getBitMasks(): int[]
                public getScanlineStride(): int
                public createSubsetSampleModel(arg0: int[]): java.awt.image.SampleModel
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): java.lang.Object
                public getPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): int[]
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): int[]
                public getSample(arg0: int, arg1: int, arg2: int, arg3: java.awt.image.DataBuffer): int
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): int[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object, arg3: java.awt.image.DataBuffer): void
                public setPixel(arg0: int, arg1: int, arg2: int[], arg3: java.awt.image.DataBuffer): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: java.awt.image.DataBuffer): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.DataBuffer): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[], arg6: java.awt.image.DataBuffer): void
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            interface TileObserver {
                tileUpdate(arg0: java.awt.image.WritableRenderedImage, arg1: int, arg2: int, arg3: boolean): void
            }
            interface TileObserver$$Lambda {
                (arg0: java.awt.image.WritableRenderedImage, arg1: int, arg2: int, arg3: boolean): void
            }
            abstract class VolatileImage extends java.awt.Image implements java.awt.Transparency {
                public static IMAGE_OK: int
                public static IMAGE_RESTORED: int
                public static IMAGE_INCOMPATIBLE: int
                protected transparency: int
                public constructor()
                public getSnapshot(): java.awt.image.BufferedImage
                public getWidth(): int
                public getHeight(): int
                public getSource(): java.awt.image.ImageProducer
                public getGraphics(): java.awt.Graphics
                public createGraphics(): java.awt.Graphics2D
                public validate(arg0: java.awt.GraphicsConfiguration): int
                public contentsLost(): boolean
                public getCapabilities(): java.awt.ImageCapabilities
                public getTransparency(): int
                public static class: java.lang.Class<any>
            }
            class WritableRaster extends java.awt.image.Raster {
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: java.awt.image.WritableRaster)
                public getWritableParent(): java.awt.image.WritableRaster
                public createWritableTranslatedChild(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public setRect(arg0: java.awt.image.Raster): void
                public setRect(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setPixel(arg0: int, arg1: int, arg2: int[]): void
                public setPixel(arg0: int, arg1: int, arg2: float[]): void
                public setPixel(arg0: int, arg1: int, arg2: double[]): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[]): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: float[]): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: double[]): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: float): void
                public setSample(arg0: int, arg1: int, arg2: int, arg3: double): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[]): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: float[]): void
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: double[]): void
                public static class: java.lang.Class<any>
            }
            interface WritableRenderedImage extends java.awt.image.RenderedImage {
                addTileObserver(arg0: java.awt.image.TileObserver | java.awt.image.TileObserver$$Lambda): void
                removeTileObserver(arg0: java.awt.image.TileObserver | java.awt.image.TileObserver$$Lambda): void
                getWritableTile(arg0: int, arg1: int): java.awt.image.WritableRaster
                releaseWritableTile(arg0: int, arg1: int): void
                isTileWritable(arg0: int, arg1: int): boolean
                getWritableTileIndices(): java.awt.Point[]
                hasTileWriters(): boolean
                setData(arg0: java.awt.image.Raster): void
            }
        }
        namespace peer {
            interface ButtonPeer extends java.awt.peer.ComponentPeer {
                setLabel(arg0: java.lang.String | string): void
            }
            interface CanvasPeer extends java.awt.peer.ComponentPeer {
                getAppropriateGraphicsConfiguration(arg0: java.awt.GraphicsConfiguration): java.awt.GraphicsConfiguration
            }
            interface CheckboxMenuItemPeer extends java.awt.peer.MenuItemPeer {
                setState(arg0: boolean): void
            }
            interface CheckboxPeer extends java.awt.peer.ComponentPeer {
                setState(arg0: boolean): void
                setCheckboxGroup(arg0: java.awt.CheckboxGroup): void
                setLabel(arg0: java.lang.String | string): void
            }
            interface ChoicePeer extends java.awt.peer.ComponentPeer {
                add(arg0: java.lang.String | string, arg1: int): void
                remove(arg0: int): void
                removeAll(): void
                select(arg0: int): void
            }
            interface ComponentPeer {
                SET_LOCATION: int
                SET_SIZE: int
                SET_BOUNDS: int
                SET_CLIENT_SIZE: int
                RESET_OPERATION: int
                NO_EMBEDDED_CHECK: int
                DEFAULT_OPERATION: int
                isObscured(): boolean
                canDetermineObscurity(): boolean
                setVisible(arg0: boolean): void
                setEnabled(arg0: boolean): void
                paint(arg0: java.awt.Graphics): void
                print(arg0: java.awt.Graphics): void
                setBounds(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): void
                handleEvent(arg0: java.awt.AWTEvent): void
                coalescePaintEvent(arg0: java.awt.event.PaintEvent): void
                getLocationOnScreen(): java.awt.Point
                getPreferredSize(): java.awt.Dimension
                getMinimumSize(): java.awt.Dimension
                getColorModel(): java.awt.image.ColorModel
                getGraphics(): java.awt.Graphics
                getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
                dispose(): void
                setForeground(arg0: java.awt.Color): void
                setBackground(arg0: java.awt.Color): void
                setFont(arg0: java.awt.Font): void
                updateCursorImmediately(): void
                requestFocus(arg0: java.awt.Component, arg1: boolean, arg2: boolean, arg3: long, arg4: sun.awt.CausedFocusEvent$Cause): boolean
                isFocusable(): boolean
                createImage(arg0: java.awt.image.ImageProducer): java.awt.Image
                createImage(arg0: int, arg1: int): java.awt.Image
                createVolatileImage(arg0: int, arg1: int): java.awt.image.VolatileImage
                prepareImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
                checkImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): int
                getGraphicsConfiguration(): java.awt.GraphicsConfiguration
                handlesWheelScrolling(): boolean
                createBuffers(arg0: int, arg1: java.awt.BufferCapabilities): void
                getBackBuffer(): java.awt.Image
                flip(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.BufferCapabilities$FlipContents): void
                destroyBuffers(): void
                reparent(arg0: java.awt.peer.ContainerPeer): void
                isReparentSupported(): boolean
                layout(): void
                applyShape(arg0: sun.java2d.pipe.Region): void
                setZOrder(arg0: java.awt.peer.ComponentPeer): void
                updateGraphicsData(arg0: java.awt.GraphicsConfiguration): boolean
            }
            interface ContainerPeer extends java.awt.peer.ComponentPeer {
                getInsets(): java.awt.Insets
                beginValidate(): void
                endValidate(): void
                beginLayout(): void
                endLayout(): void
            }
            interface DesktopPeer {
                isSupported(arg0: java.awt.Desktop$Action): boolean
                open(arg0: java.io.File): void
                edit(arg0: java.io.File): void
                print(arg0: java.io.File): void
                mail(arg0: java.net.URI): void
                browse(arg0: java.net.URI): void
            }
            interface DialogPeer extends java.awt.peer.WindowPeer {
                setTitle(arg0: java.lang.String | string): void
                setResizable(arg0: boolean): void
                blockWindows(arg0: java.util.List<java.awt.Window>): void
            }
            interface FileDialogPeer extends java.awt.peer.DialogPeer {
                setFile(arg0: java.lang.String | string): void
                setDirectory(arg0: java.lang.String | string): void
                setFilenameFilter(arg0: java.io.FilenameFilter | java.io.FilenameFilter$$Lambda): void
            }
            interface FontPeer {
            }
            interface FramePeer extends java.awt.peer.WindowPeer {
                setTitle(arg0: java.lang.String | string): void
                setMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): void
                setResizable(arg0: boolean): void
                setState(arg0: int): void
                getState(): int
                setMaximizedBounds(arg0: java.awt.Rectangle): void
                setBoundsPrivate(arg0: int, arg1: int, arg2: int, arg3: int): void
                getBoundsPrivate(): java.awt.Rectangle
                emulateActivation(arg0: boolean): void
            }
            interface KeyboardFocusManagerPeer {
                setCurrentFocusedWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): void
                getCurrentFocusedWindow(): java.awt.Window
                setCurrentFocusOwner(arg0: java.awt.Component): void
                getCurrentFocusOwner(): java.awt.Component
                clearGlobalFocusOwner(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            }
            interface LabelPeer extends java.awt.peer.ComponentPeer {
                setText(arg0: java.lang.String | string): void
                setAlignment(arg0: int): void
            }
            interface LightweightPeer extends java.awt.peer.ComponentPeer {
            }
            interface ListPeer extends java.awt.peer.ComponentPeer {
                getSelectedIndexes(): int[]
                add(arg0: java.lang.String | string, arg1: int): void
                delItems(arg0: int, arg1: int): void
                removeAll(): void
                select(arg0: int): void
                deselect(arg0: int): void
                makeVisible(arg0: int): void
                setMultipleMode(arg0: boolean): void
                getPreferredSize(arg0: int): java.awt.Dimension
                getMinimumSize(arg0: int): java.awt.Dimension
            }
            interface MenuBarPeer extends java.awt.peer.MenuComponentPeer {
                addMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): void
                delMenu(arg0: int): void
                addHelpMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): void
            }
            interface MenuComponentPeer {
                dispose(): void
                setFont(arg0: java.awt.Font): void
            }
            interface MenuItemPeer extends java.awt.peer.MenuComponentPeer {
                setLabel(arg0: java.lang.String | string): void
                setEnabled(arg0: boolean): void
            }
            interface MenuPeer extends java.awt.peer.MenuItemPeer {
                addSeparator(): void
                addItem(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): void
                delItem(arg0: int): void
            }
            interface MouseInfoPeer {
                fillPointWithCoords(arg0: java.awt.Point): int
                isWindowUnderMouse(arg0: java.awt.Window | java.awt.Window$$Lambda): boolean
            }
            interface PanelPeer extends java.awt.peer.ContainerPeer {
            }
            interface PopupMenuPeer extends java.awt.peer.MenuPeer {
                show(arg0: java.awt.Event): void
            }
            interface RobotPeer {
                mouseMove(arg0: int, arg1: int): void
                mousePress(arg0: int): void
                mouseRelease(arg0: int): void
                mouseWheel(arg0: int): void
                keyPress(arg0: int): void
                keyRelease(arg0: int): void
                getRGBPixel(arg0: int, arg1: int): int
                getRGBPixels(arg0: java.awt.Rectangle): int[]
                dispose(): void
            }
            interface ScrollPanePeer extends java.awt.peer.ContainerPeer {
                getHScrollbarHeight(): int
                getVScrollbarWidth(): int
                setScrollPosition(arg0: int, arg1: int): void
                childResized(arg0: int, arg1: int): void
                setUnitIncrement(arg0: java.awt.Adjustable, arg1: int): void
                setValue(arg0: java.awt.Adjustable, arg1: int): void
            }
            interface ScrollbarPeer extends java.awt.peer.ComponentPeer {
                setValues(arg0: int, arg1: int, arg2: int, arg3: int): void
                setLineIncrement(arg0: int): void
                setPageIncrement(arg0: int): void
            }
            interface SystemTrayPeer {
                getTrayIconSize(): java.awt.Dimension
            }
            interface SystemTrayPeer$$Lambda {
                (): java.awt.Dimension
            }
            interface TextAreaPeer extends java.awt.peer.TextComponentPeer {
                insert(arg0: java.lang.String | string, arg1: int): void
                replaceRange(arg0: java.lang.String | string, arg1: int, arg2: int): void
                getPreferredSize(arg0: int, arg1: int): java.awt.Dimension
                getMinimumSize(arg0: int, arg1: int): java.awt.Dimension
            }
            interface TextComponentPeer extends java.awt.peer.ComponentPeer {
                setEditable(arg0: boolean): void
                getText(): string
                setText(arg0: java.lang.String | string): void
                getSelectionStart(): int
                getSelectionEnd(): int
                select(arg0: int, arg1: int): void
                setCaretPosition(arg0: int): void
                getCaretPosition(): int
                getInputMethodRequests(): java.awt.im.InputMethodRequests
            }
            interface TextFieldPeer extends java.awt.peer.TextComponentPeer {
                setEchoChar(arg0: char): void
                getPreferredSize(arg0: int): java.awt.Dimension
                getMinimumSize(arg0: int): java.awt.Dimension
            }
            interface TrayIconPeer {
                dispose(): void
                setToolTip(arg0: java.lang.String | string): void
                updateImage(): void
                displayMessage(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): void
                showPopupMenu(arg0: int, arg1: int): void
            }
            interface WindowPeer extends java.awt.peer.ContainerPeer {
                toFront(): void
                toBack(): void
                updateAlwaysOnTopState(): void
                updateFocusableWindowState(): void
                setModalBlocked(arg0: java.awt.Dialog, arg1: boolean): void
                updateMinimumSize(): void
                updateIconImages(): void
                setOpacity(arg0: float): void
                setOpaque(arg0: boolean): void
                updateWindow(): void
                repositionSecurityWarning(): void
            }
        }
        namespace print {
            class Book implements java.awt.print.Pageable {
                public constructor()
                public getNumberOfPages(): int
                public getPageFormat(arg0: int): java.awt.print.PageFormat
                public getPrintable(arg0: int): java.awt.print.Printable
                public setPage(arg0: int, arg1: java.awt.print.Printable, arg2: java.awt.print.PageFormat): void
                public append(arg0: java.awt.print.Printable, arg1: java.awt.print.PageFormat): void
                public append(arg0: java.awt.print.Printable, arg1: java.awt.print.PageFormat, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class PageFormat implements java.lang.Cloneable {
                public static LANDSCAPE: int
                public static PORTRAIT: int
                public static REVERSE_LANDSCAPE: int
                public constructor()
                public clone(): java.lang.Object
                public getWidth(): double
                public getHeight(): double
                public getImageableX(): double
                public getImageableY(): double
                public getImageableWidth(): double
                public getImageableHeight(): double
                public getPaper(): java.awt.print.Paper
                public setPaper(arg0: java.awt.print.Paper): void
                public setOrientation(arg0: int): void
                public getOrientation(): int
                public getMatrix(): double[]
                public static class: java.lang.Class<any>
            }
            interface Pageable {
                UNKNOWN_NUMBER_OF_PAGES: int
                getNumberOfPages(): int
                getPageFormat(arg0: int): java.awt.print.PageFormat
                getPrintable(arg0: int): java.awt.print.Printable
            }
            class Paper implements java.lang.Cloneable {
                public constructor()
                public clone(): java.lang.Object
                public getHeight(): double
                public setSize(arg0: double, arg1: double): void
                public getWidth(): double
                public setImageableArea(arg0: double, arg1: double, arg2: double, arg3: double): void
                public getImageableX(): double
                public getImageableY(): double
                public getImageableWidth(): double
                public getImageableHeight(): double
                public static class: java.lang.Class<any>
            }
            interface Printable {
                PAGE_EXISTS: int
                NO_SUCH_PAGE: int
                print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
            }
            class PrinterAbortException extends java.awt.print.PrinterException {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class PrinterException extends java.lang.Exception {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            interface PrinterGraphics {
                getPrinterJob(): java.awt.print.PrinterJob
            }
            interface PrinterGraphics$$Lambda {
                (): java.awt.print.PrinterJob
            }
            class PrinterIOException extends java.awt.print.PrinterException {
                public constructor(arg0: java.io.IOException)
                public getIOException(): java.io.IOException
                public getCause(): java.lang.Throwable
                public static class: java.lang.Class<any>
            }
            abstract class PrinterJob {
                public static getPrinterJob(): java.awt.print.PrinterJob
                public static lookupPrintServices(): javax.print.PrintService[]
                public static lookupStreamPrintServices(arg0: java.lang.String | string): javax.print.StreamPrintServiceFactory[]
                public constructor()
                public getPrintService(): javax.print.PrintService
                public setPrintService(arg0: javax.print.PrintService): void
                public setPrintable(arg0: java.awt.print.Printable): void
                public setPrintable(arg0: java.awt.print.Printable, arg1: java.awt.print.PageFormat): void
                public setPageable(arg0: java.awt.print.Pageable): void
                public printDialog(): boolean
                public printDialog(arg0: javax.print.attribute.PrintRequestAttributeSet): boolean
                public pageDialog(arg0: java.awt.print.PageFormat): java.awt.print.PageFormat
                public pageDialog(arg0: javax.print.attribute.PrintRequestAttributeSet): java.awt.print.PageFormat
                public defaultPage(arg0: java.awt.print.PageFormat): java.awt.print.PageFormat
                public defaultPage(): java.awt.print.PageFormat
                public getPageFormat(arg0: javax.print.attribute.PrintRequestAttributeSet): java.awt.print.PageFormat
                public validatePage(arg0: java.awt.print.PageFormat): java.awt.print.PageFormat
                public print(): void
                public print(arg0: javax.print.attribute.PrintRequestAttributeSet): void
                public setCopies(arg0: int): void
                public getCopies(): int
                public getUserName(): string
                public setJobName(arg0: java.lang.String | string): void
                public getJobName(): string
                public cancel(): void
                public isCancelled(): boolean
                public static class: java.lang.Class<any>
            }
        }
        class AWTError extends java.lang.Error {
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        abstract class AWTEvent extends java.util.EventObject {
            protected id: int
            protected consumed: boolean
            public static COMPONENT_EVENT_MASK: long
            public static CONTAINER_EVENT_MASK: long
            public static FOCUS_EVENT_MASK: long
            public static KEY_EVENT_MASK: long
            public static MOUSE_EVENT_MASK: long
            public static MOUSE_MOTION_EVENT_MASK: long
            public static WINDOW_EVENT_MASK: long
            public static ACTION_EVENT_MASK: long
            public static ADJUSTMENT_EVENT_MASK: long
            public static ITEM_EVENT_MASK: long
            public static TEXT_EVENT_MASK: long
            public static INPUT_METHOD_EVENT_MASK: long
            public static PAINT_EVENT_MASK: long
            public static INVOCATION_EVENT_MASK: long
            public static HIERARCHY_EVENT_MASK: long
            public static HIERARCHY_BOUNDS_EVENT_MASK: long
            public static MOUSE_WHEEL_EVENT_MASK: long
            public static WINDOW_STATE_EVENT_MASK: long
            public static WINDOW_FOCUS_EVENT_MASK: long
            public static RESERVED_ID_MAX: int
            public constructor(arg0: java.awt.Event)
            public constructor(arg0: java.lang.Object, arg1: int)
            public setSource(arg0: java.lang.Object): void
            public getID(): int
            public toString(): string
            public paramString(): string
            protected consume(): void
            protected isConsumed(): boolean
            public static class: java.lang.Class<any>
        }
        class AWTEventMulticaster implements java.awt.event.ComponentListener , java.awt.event.ContainerListener , java.awt.event.FocusListener , java.awt.event.KeyListener , java.awt.event.MouseListener , java.awt.event.MouseMotionListener , java.awt.event.WindowListener , java.awt.event.WindowFocusListener , java.awt.event.WindowStateListener , java.awt.event.ActionListener , java.awt.event.ItemListener , java.awt.event.AdjustmentListener , java.awt.event.TextListener , java.awt.event.InputMethodListener , java.awt.event.HierarchyListener , java.awt.event.HierarchyBoundsListener , java.awt.event.MouseWheelListener {
            protected a: java.util.EventListener
            protected b: java.util.EventListener
            protected constructor(arg0: java.util.EventListener, arg1: java.util.EventListener)
            protected remove(arg0: java.util.EventListener): java.util.EventListener
            public componentResized(arg0: java.awt.event.ComponentEvent): void
            public componentMoved(arg0: java.awt.event.ComponentEvent): void
            public componentShown(arg0: java.awt.event.ComponentEvent): void
            public componentHidden(arg0: java.awt.event.ComponentEvent): void
            public componentAdded(arg0: java.awt.event.ContainerEvent): void
            public componentRemoved(arg0: java.awt.event.ContainerEvent): void
            public focusGained(arg0: java.awt.event.FocusEvent): void
            public focusLost(arg0: java.awt.event.FocusEvent): void
            public keyTyped(arg0: java.awt.event.KeyEvent): void
            public keyPressed(arg0: java.awt.event.KeyEvent): void
            public keyReleased(arg0: java.awt.event.KeyEvent): void
            public mouseClicked(arg0: java.awt.event.MouseEvent): void
            public mousePressed(arg0: java.awt.event.MouseEvent): void
            public mouseReleased(arg0: java.awt.event.MouseEvent): void
            public mouseEntered(arg0: java.awt.event.MouseEvent): void
            public mouseExited(arg0: java.awt.event.MouseEvent): void
            public mouseDragged(arg0: java.awt.event.MouseEvent): void
            public mouseMoved(arg0: java.awt.event.MouseEvent): void
            public windowOpened(arg0: java.awt.event.WindowEvent): void
            public windowClosing(arg0: java.awt.event.WindowEvent): void
            public windowClosed(arg0: java.awt.event.WindowEvent): void
            public windowIconified(arg0: java.awt.event.WindowEvent): void
            public windowDeiconified(arg0: java.awt.event.WindowEvent): void
            public windowActivated(arg0: java.awt.event.WindowEvent): void
            public windowDeactivated(arg0: java.awt.event.WindowEvent): void
            public windowStateChanged(arg0: java.awt.event.WindowEvent): void
            public windowGainedFocus(arg0: java.awt.event.WindowEvent): void
            public windowLostFocus(arg0: java.awt.event.WindowEvent): void
            public actionPerformed(arg0: java.awt.event.ActionEvent): void
            public itemStateChanged(arg0: java.awt.event.ItemEvent): void
            public adjustmentValueChanged(arg0: java.awt.event.AdjustmentEvent): void
            public textValueChanged(arg0: java.awt.event.TextEvent): void
            public inputMethodTextChanged(arg0: java.awt.event.InputMethodEvent): void
            public caretPositionChanged(arg0: java.awt.event.InputMethodEvent): void
            public hierarchyChanged(arg0: java.awt.event.HierarchyEvent): void
            public ancestorMoved(arg0: java.awt.event.HierarchyEvent): void
            public ancestorResized(arg0: java.awt.event.HierarchyEvent): void
            public mouseWheelMoved(arg0: java.awt.event.MouseWheelEvent): void
            public static add(arg0: java.awt.event.ComponentListener, arg1: java.awt.event.ComponentListener): java.awt.event.ComponentListener
            public static add(arg0: java.awt.event.ContainerListener, arg1: java.awt.event.ContainerListener): java.awt.event.ContainerListener
            public static add(arg0: java.awt.event.FocusListener, arg1: java.awt.event.FocusListener): java.awt.event.FocusListener
            public static add(arg0: java.awt.event.KeyListener, arg1: java.awt.event.KeyListener): java.awt.event.KeyListener
            public static add(arg0: java.awt.event.MouseListener, arg1: java.awt.event.MouseListener): java.awt.event.MouseListener
            public static add(arg0: java.awt.event.MouseMotionListener, arg1: java.awt.event.MouseMotionListener): java.awt.event.MouseMotionListener
            public static add(arg0: java.awt.event.WindowListener, arg1: java.awt.event.WindowListener): java.awt.event.WindowListener
            public static add(arg0: java.awt.event.WindowStateListener, arg1: java.awt.event.WindowStateListener): java.awt.event.WindowStateListener
            public static add(arg0: java.awt.event.WindowFocusListener, arg1: java.awt.event.WindowFocusListener): java.awt.event.WindowFocusListener
            public static add(arg0: java.awt.event.ActionListener, arg1: java.awt.event.ActionListener): java.awt.event.ActionListener
            public static add(arg0: java.awt.event.ItemListener, arg1: java.awt.event.ItemListener): java.awt.event.ItemListener
            public static add(arg0: java.awt.event.AdjustmentListener, arg1: java.awt.event.AdjustmentListener): java.awt.event.AdjustmentListener
            public static add(arg0: java.awt.event.TextListener, arg1: java.awt.event.TextListener): java.awt.event.TextListener
            public static add(arg0: java.awt.event.InputMethodListener, arg1: java.awt.event.InputMethodListener): java.awt.event.InputMethodListener
            public static add(arg0: java.awt.event.HierarchyListener, arg1: java.awt.event.HierarchyListener): java.awt.event.HierarchyListener
            public static add(arg0: java.awt.event.HierarchyBoundsListener, arg1: java.awt.event.HierarchyBoundsListener): java.awt.event.HierarchyBoundsListener
            public static add(arg0: java.awt.event.MouseWheelListener, arg1: java.awt.event.MouseWheelListener): java.awt.event.MouseWheelListener
            public static remove(arg0: java.awt.event.ComponentListener, arg1: java.awt.event.ComponentListener): java.awt.event.ComponentListener
            public static remove(arg0: java.awt.event.ContainerListener, arg1: java.awt.event.ContainerListener): java.awt.event.ContainerListener
            public static remove(arg0: java.awt.event.FocusListener, arg1: java.awt.event.FocusListener): java.awt.event.FocusListener
            public static remove(arg0: java.awt.event.KeyListener, arg1: java.awt.event.KeyListener): java.awt.event.KeyListener
            public static remove(arg0: java.awt.event.MouseListener, arg1: java.awt.event.MouseListener): java.awt.event.MouseListener
            public static remove(arg0: java.awt.event.MouseMotionListener, arg1: java.awt.event.MouseMotionListener): java.awt.event.MouseMotionListener
            public static remove(arg0: java.awt.event.WindowListener, arg1: java.awt.event.WindowListener): java.awt.event.WindowListener
            public static remove(arg0: java.awt.event.WindowStateListener, arg1: java.awt.event.WindowStateListener): java.awt.event.WindowStateListener
            public static remove(arg0: java.awt.event.WindowFocusListener, arg1: java.awt.event.WindowFocusListener): java.awt.event.WindowFocusListener
            public static remove(arg0: java.awt.event.ActionListener, arg1: java.awt.event.ActionListener): java.awt.event.ActionListener
            public static remove(arg0: java.awt.event.ItemListener, arg1: java.awt.event.ItemListener): java.awt.event.ItemListener
            public static remove(arg0: java.awt.event.AdjustmentListener, arg1: java.awt.event.AdjustmentListener): java.awt.event.AdjustmentListener
            public static remove(arg0: java.awt.event.TextListener, arg1: java.awt.event.TextListener): java.awt.event.TextListener
            public static remove(arg0: java.awt.event.InputMethodListener, arg1: java.awt.event.InputMethodListener): java.awt.event.InputMethodListener
            public static remove(arg0: java.awt.event.HierarchyListener, arg1: java.awt.event.HierarchyListener): java.awt.event.HierarchyListener
            public static remove(arg0: java.awt.event.HierarchyBoundsListener, arg1: java.awt.event.HierarchyBoundsListener): java.awt.event.HierarchyBoundsListener
            public static remove(arg0: java.awt.event.MouseWheelListener, arg1: java.awt.event.MouseWheelListener): java.awt.event.MouseWheelListener
            protected static addInternal(arg0: java.util.EventListener, arg1: java.util.EventListener): java.util.EventListener
            protected static removeInternal(arg0: java.util.EventListener, arg1: java.util.EventListener): java.util.EventListener
            protected saveInternal(arg0: java.io.ObjectOutputStream, arg1: java.lang.String | string): void
            protected static save(arg0: java.io.ObjectOutputStream, arg1: java.lang.String | string, arg2: java.util.EventListener): void
            public static getListeners<T extends java.util.EventListener>(arg0: java.util.EventListener, arg1: java.lang.Class<T>): T[]
            public static class: java.lang.Class<any>
        }
        class AWTException extends java.lang.Exception {
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        class AWTKeyStroke implements java.io.Serializable {
            protected constructor()
            protected constructor(arg0: char, arg1: int, arg2: int, arg3: boolean)
            protected static registerSubclass(arg0: java.lang.Class<any>): void
            public static getAWTKeyStroke(arg0: char): java.awt.AWTKeyStroke
            public static getAWTKeyStroke(arg0: java.lang.Character, arg1: int): java.awt.AWTKeyStroke
            public static getAWTKeyStroke(arg0: int, arg1: int, arg2: boolean): java.awt.AWTKeyStroke
            public static getAWTKeyStroke(arg0: int, arg1: int): java.awt.AWTKeyStroke
            public static getAWTKeyStrokeForEvent(arg0: java.awt.event.KeyEvent): java.awt.AWTKeyStroke
            public static getAWTKeyStroke(arg0: java.lang.String | string): java.awt.AWTKeyStroke
            public getKeyChar(): char
            public getKeyCode(): int
            public getModifiers(): int
            public isOnKeyRelease(): boolean
            public getKeyEventType(): int
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public toString(): string
            protected readResolve(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class AWTPermission extends java.security.BasicPermission {
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        interface ActiveEvent {
            dispatch(): void
        }
        interface ActiveEvent$$Lambda {
            (): void
        }
        interface Adjustable {
            HORIZONTAL: int
            VERTICAL: int
            NO_ORIENTATION: int
            getOrientation(): int
            setMinimum(arg0: int): void
            getMinimum(): int
            setMaximum(arg0: int): void
            getMaximum(): int
            setUnitIncrement(arg0: int): void
            getUnitIncrement(): int
            setBlockIncrement(arg0: int): void
            getBlockIncrement(): int
            setVisibleAmount(arg0: int): void
            getVisibleAmount(): int
            setValue(arg0: int): void
            getValue(): int
            addAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            removeAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
        }
        class AlphaComposite implements java.awt.Composite {
            public static CLEAR: int
            public static SRC: int
            public static DST: int
            public static SRC_OVER: int
            public static DST_OVER: int
            public static SRC_IN: int
            public static DST_IN: int
            public static SRC_OUT: int
            public static DST_OUT: int
            public static SRC_ATOP: int
            public static DST_ATOP: int
            public static XOR: int
            public static Clear: java.awt.AlphaComposite
            public static Src: java.awt.AlphaComposite
            public static Dst: java.awt.AlphaComposite
            public static SrcOver: java.awt.AlphaComposite
            public static DstOver: java.awt.AlphaComposite
            public static SrcIn: java.awt.AlphaComposite
            public static DstIn: java.awt.AlphaComposite
            public static SrcOut: java.awt.AlphaComposite
            public static DstOut: java.awt.AlphaComposite
            public static SrcAtop: java.awt.AlphaComposite
            public static DstAtop: java.awt.AlphaComposite
            public static Xor: java.awt.AlphaComposite
            public static getInstance(arg0: int): java.awt.AlphaComposite
            public static getInstance(arg0: int, arg1: float): java.awt.AlphaComposite
            public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.image.ColorModel, arg2: java.awt.RenderingHints): java.awt.CompositeContext
            public getAlpha(): float
            public getRule(): int
            public derive(arg0: int): java.awt.AlphaComposite
            public derive(arg0: float): java.awt.AlphaComposite
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public static class: java.lang.Class<any>
        }
        class AlphaComposite$$Lambda implements java.awt.Composite {
            public static CLEAR: int
        }
        abstract class AttributeValue {
            protected constructor(arg0: int, arg1: java.lang.String[])
            public hashCode(): int
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class BasicStroke implements java.awt.Stroke {
            public static JOIN_MITER: int
            public static JOIN_ROUND: int
            public static JOIN_BEVEL: int
            public static CAP_BUTT: int
            public static CAP_ROUND: int
            public static CAP_SQUARE: int
            public constructor(arg0: float, arg1: int, arg2: int, arg3: float, arg4: float[], arg5: float)
            public constructor(arg0: float, arg1: int, arg2: int, arg3: float)
            public constructor(arg0: float, arg1: int, arg2: int)
            public constructor(arg0: float)
            public constructor()
            public createStrokedShape(arg0: java.awt.Shape): java.awt.Shape
            public getLineWidth(): float
            public getEndCap(): int
            public getLineJoin(): int
            public getMiterLimit(): float
            public getDashArray(): float[]
            public getDashPhase(): float
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public static class: java.lang.Class<any>
        }
        class BasicStroke$$Lambda implements java.awt.Stroke {
            public static JOIN_MITER: int
        }
        class BorderLayout implements java.awt.LayoutManager2 , java.io.Serializable {
            public static NORTH: string
            public static SOUTH: string
            public static EAST: string
            public static WEST: string
            public static CENTER: string
            public static BEFORE_FIRST_LINE: string
            public static AFTER_LAST_LINE: string
            public static BEFORE_LINE_BEGINS: string
            public static AFTER_LINE_ENDS: string
            public static PAGE_START: string
            public static PAGE_END: string
            public static LINE_START: string
            public static LINE_END: string
            public constructor()
            public constructor(arg0: int, arg1: int)
            public getHgap(): int
            public setHgap(arg0: int): void
            public getVgap(): int
            public setVgap(arg0: int): void
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public getLayoutComponent(arg0: java.lang.Object): java.awt.Component
            public getLayoutComponent(arg0: java.awt.Container, arg1: java.lang.Object): java.awt.Component
            public getConstraints(arg0: java.awt.Component): java.lang.Object
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public invalidateLayout(arg0: java.awt.Container): void
            public layoutContainer(arg0: java.awt.Container): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class BufferCapabilities implements java.lang.Cloneable {
            public constructor(arg0: java.awt.ImageCapabilities, arg1: java.awt.ImageCapabilities, arg2: java.awt.BufferCapabilities$FlipContents)
            public getFrontBufferCapabilities(): java.awt.ImageCapabilities
            public getBackBufferCapabilities(): java.awt.ImageCapabilities
            public isPageFlipping(): boolean
            public getFlipContents(): java.awt.BufferCapabilities$FlipContents
            public isFullScreenRequired(): boolean
            public isMultiBufferAvailable(): boolean
            public clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class Button extends java.awt.Component implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public addNotify(): void
            public getLabel(): string
            public setLabel(arg0: java.lang.String | string): void
            public setActionCommand(arg0: java.lang.String | string): void
            public getActionCommand(): string
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processActionEvent<T extends java.util.EventListener>(arg0: java.awt.event.ActionEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Button$$Lambda extends java.awt.Component implements javax.accessibility.Accessible {
            public constructor()
        }
        class Canvas extends java.awt.Component implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.awt.GraphicsConfiguration)
            public addNotify(): void
            public paint(arg0: java.awt.Graphics): void
            public update(arg0: java.awt.Graphics): void
            public createBufferStrategy(arg0: int): void
            public createBufferStrategy(arg0: int, arg1: java.awt.BufferCapabilities): void
            public getBufferStrategy(): java.awt.image.BufferStrategy
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Canvas$$Lambda extends java.awt.Component implements javax.accessibility.Accessible {
            public constructor()
        }
        class CardLayout implements java.awt.LayoutManager2 , java.io.Serializable {
            public constructor()
            public constructor(arg0: int, arg1: int)
            public getHgap(): int
            public setHgap(arg0: int): void
            public getVgap(): int
            public setVgap(arg0: int): void
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public invalidateLayout(arg0: java.awt.Container): void
            public layoutContainer(arg0: java.awt.Container): void
            public first(arg0: java.awt.Container): void
            public next(arg0: java.awt.Container): void
            public previous(arg0: java.awt.Container): void
            public last(arg0: java.awt.Container): void
            public show(arg0: java.awt.Container, arg1: java.lang.String | string): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class Checkbox extends java.awt.Component implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: java.lang.String | string, arg1: boolean, arg2: java.awt.CheckboxGroup)
            public constructor(arg0: java.lang.String | string, arg1: java.awt.CheckboxGroup, arg2: boolean)
            public addNotify(): void
            public getLabel(): string
            public setLabel(arg0: java.lang.String | string): void
            public getState(): boolean
            public setState(arg0: boolean): void
            public getSelectedObjects(): java.lang.Object[]
            public getCheckboxGroup(): java.awt.CheckboxGroup
            public setCheckboxGroup(arg0: java.awt.CheckboxGroup): void
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processItemEvent<T extends java.util.EventListener>(arg0: java.awt.event.ItemEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Checkbox$$Lambda extends java.awt.Component implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
        }
        class CheckboxGroup implements java.io.Serializable {
            public constructor()
            public getSelectedCheckbox(): java.awt.Checkbox
            public getCurrent(): java.awt.Checkbox
            public setSelectedCheckbox(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): void
            public setCurrent(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class CheckboxMenuItem extends java.awt.MenuItem implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public addNotify(): void
            public getState(): boolean
            public setState(arg0: boolean): void
            public getSelectedObjects(): java.lang.Object[]
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processItemEvent<T extends java.util.EventListener>(arg0: java.awt.event.ItemEvent): void
            public paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class CheckboxMenuItem$$Lambda extends java.awt.MenuItem implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
        }
        class Choice extends java.awt.Component implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
            public addNotify(): void
            public getItemCount(): int
            public countItems(): int
            public getItem(arg0: int): string
            public add(arg0: java.lang.String | string): void
            public addItem(arg0: java.lang.String | string): void
            public insert(arg0: java.lang.String | string, arg1: int): void
            public remove(arg0: java.lang.String | string): void
            public remove(arg0: int): void
            public removeAll(): void
            public getSelectedItem(): string
            public getSelectedObjects(): java.lang.Object[]
            public getSelectedIndex(): int
            public select(arg0: int): void
            public select(arg0: java.lang.String | string): void
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processItemEvent<T extends java.util.EventListener>(arg0: java.awt.event.ItemEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Choice$$Lambda extends java.awt.Component implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
        }
        class Color implements java.awt.Paint , java.io.Serializable {
            public static white: java.awt.Color
            public static WHITE: java.awt.Color
            public static lightGray: java.awt.Color
            public static LIGHT_GRAY: java.awt.Color
            public static gray: java.awt.Color
            public static GRAY: java.awt.Color
            public static darkGray: java.awt.Color
            public static DARK_GRAY: java.awt.Color
            public static black: java.awt.Color
            public static BLACK: java.awt.Color
            public static red: java.awt.Color
            public static RED: java.awt.Color
            public static pink: java.awt.Color
            public static PINK: java.awt.Color
            public static orange: java.awt.Color
            public static ORANGE: java.awt.Color
            public static yellow: java.awt.Color
            public static YELLOW: java.awt.Color
            public static green: java.awt.Color
            public static GREEN: java.awt.Color
            public static magenta: java.awt.Color
            public static MAGENTA: java.awt.Color
            public static cyan: java.awt.Color
            public static CYAN: java.awt.Color
            public static blue: java.awt.Color
            public static BLUE: java.awt.Color
            public constructor(arg0: int, arg1: int, arg2: int)
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: boolean)
            public constructor(arg0: float, arg1: float, arg2: float)
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float)
            public constructor(arg0: java.awt.color.ColorSpace, arg1: float[], arg2: float)
            public getRed(): int
            public getGreen(): int
            public getBlue(): int
            public getAlpha(): int
            public getRGB(): int
            public brighter(): java.awt.Color
            public darker(): java.awt.Color
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public toString(): string
            public static decode(arg0: java.lang.String | string): java.awt.Color
            public static getColor(arg0: java.lang.String | string): java.awt.Color
            public static getColor(arg0: java.lang.String | string, arg1: java.awt.Color): java.awt.Color
            public static getColor(arg0: java.lang.String | string, arg1: int): java.awt.Color
            public static HSBtoRGB(arg0: float, arg1: float, arg2: float): int
            public static RGBtoHSB(arg0: int, arg1: int, arg2: int, arg3: float[]): float[]
            public static getHSBColor(arg0: float, arg1: float, arg2: float): java.awt.Color
            public getRGBComponents(arg0: float[]): float[]
            public getRGBColorComponents(arg0: float[]): float[]
            public getComponents(arg0: float[]): float[]
            public getColorComponents(arg0: float[]): float[]
            public getComponents(arg0: java.awt.color.ColorSpace, arg1: float[]): float[]
            public getColorComponents(arg0: java.awt.color.ColorSpace, arg1: float[]): float[]
            public getColorSpace(): java.awt.color.ColorSpace
            public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.Rectangle, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.RenderingHints): java.awt.PaintContext
            public getTransparency(): int
            public static class: java.lang.Class<any>
        }
        class ColorPaintContext implements java.awt.PaintContext {
            protected constructor(arg0: int, arg1: java.awt.image.ColorModel)
            public dispose(): void
            public getColorModel(): java.awt.image.ColorModel
            public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
            public static class: java.lang.Class<any>
        }
        abstract class Component implements java.awt.image.ImageObserver , java.awt.MenuContainer , java.io.Serializable {
            public static TOP_ALIGNMENT: float
            public static CENTER_ALIGNMENT: float
            public static BOTTOM_ALIGNMENT: float
            public static LEFT_ALIGNMENT: float
            public static RIGHT_ALIGNMENT: float
            protected accessibleContext: javax.accessibility.AccessibleContext
            protected constructor()
            public getName(): string
            public setName(arg0: java.lang.String | string): void
            public getParent(): java.awt.Container
            public getPeer(): java.awt.peer.ComponentPeer
            public setDropTarget(arg0: java.awt.dnd.DropTarget): void
            public getDropTarget(): java.awt.dnd.DropTarget
            public getGraphicsConfiguration(): java.awt.GraphicsConfiguration
            public getTreeLock(): java.lang.Object
            public getToolkit(): java.awt.Toolkit
            public isValid(): boolean
            public isDisplayable(): boolean
            public isVisible(): boolean
            public getMousePosition(): java.awt.Point
            public isShowing(): boolean
            public isEnabled(): boolean
            public setEnabled(arg0: boolean): void
            public enable(): void
            public enable(arg0: boolean): void
            public disable(): void
            public isDoubleBuffered(): boolean
            public enableInputMethods(arg0: boolean): void
            public setVisible(arg0: boolean): void
            public show(): void
            public show(arg0: boolean): void
            public hide(): void
            public getForeground(): java.awt.Color
            public setForeground(arg0: java.awt.Color): void
            public isForegroundSet(): boolean
            public getBackground(): java.awt.Color
            public setBackground(arg0: java.awt.Color): void
            public isBackgroundSet(): boolean
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public isFontSet(): boolean
            public getLocale(): java.util.Locale
            public setLocale(arg0: java.util.Locale): void
            public getColorModel(): java.awt.image.ColorModel
            public getLocation(): java.awt.Point
            public getLocationOnScreen(): java.awt.Point
            public location(): java.awt.Point
            public setLocation(arg0: int, arg1: int): void
            public move(arg0: int, arg1: int): void
            public setLocation(arg0: java.awt.Point): void
            public getSize(): java.awt.Dimension
            public size(): java.awt.Dimension
            public setSize(arg0: int, arg1: int): void
            public resize(arg0: int, arg1: int): void
            public setSize(arg0: java.awt.Dimension): void
            public resize(arg0: java.awt.Dimension): void
            public getBounds(): java.awt.Rectangle
            public bounds(): java.awt.Rectangle
            public setBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setBounds(arg0: java.awt.Rectangle): void
            public getX(): int
            public getY(): int
            public getWidth(): int
            public getHeight(): int
            public getBounds(arg0: java.awt.Rectangle): java.awt.Rectangle
            public getSize(arg0: java.awt.Dimension): java.awt.Dimension
            public getLocation(arg0: java.awt.Point): java.awt.Point
            public isOpaque(): boolean
            public isLightweight(): boolean
            public setPreferredSize(arg0: java.awt.Dimension): void
            public isPreferredSizeSet(): boolean
            public getPreferredSize(): java.awt.Dimension
            public preferredSize(): java.awt.Dimension
            public setMinimumSize(arg0: java.awt.Dimension): void
            public isMinimumSizeSet(): boolean
            public getMinimumSize(): java.awt.Dimension
            public minimumSize(): java.awt.Dimension
            public setMaximumSize(arg0: java.awt.Dimension): void
            public isMaximumSizeSet(): boolean
            public getMaximumSize(): java.awt.Dimension
            public getAlignmentX(): float
            public getAlignmentY(): float
            public getBaseline(arg0: int, arg1: int): int
            public getBaselineResizeBehavior(): java.awt.Component$BaselineResizeBehavior
            public doLayout(): void
            public layout(): void
            public validate(): void
            public invalidate(): void
            public revalidate(): void
            public getGraphics(): java.awt.Graphics
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public setCursor(arg0: java.awt.Cursor): void
            public getCursor(): java.awt.Cursor
            public isCursorSet(): boolean
            public paint(arg0: java.awt.Graphics): void
            public update(arg0: java.awt.Graphics): void
            public paintAll(arg0: java.awt.Graphics): void
            public repaint(): void
            public repaint(arg0: long): void
            public repaint(arg0: int, arg1: int, arg2: int, arg3: int): void
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            public print(arg0: java.awt.Graphics): void
            public printAll(arg0: java.awt.Graphics): void
            public imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            public createImage(arg0: java.awt.image.ImageProducer): java.awt.Image
            public createImage(arg0: int, arg1: int): java.awt.Image
            public createVolatileImage(arg0: int, arg1: int): java.awt.image.VolatileImage
            public createVolatileImage(arg0: int, arg1: int, arg2: java.awt.ImageCapabilities): java.awt.image.VolatileImage
            public prepareImage(arg0: java.awt.Image, arg1: java.awt.image.ImageObserver): boolean
            public prepareImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public checkImage(arg0: java.awt.Image, arg1: java.awt.image.ImageObserver): int
            public checkImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): int
            public setIgnoreRepaint(arg0: boolean): void
            public getIgnoreRepaint(): boolean
            public contains(arg0: int, arg1: int): boolean
            public inside(arg0: int, arg1: int): boolean
            public contains(arg0: java.awt.Point): boolean
            public getComponentAt(arg0: int, arg1: int): java.awt.Component
            public locate(arg0: int, arg1: int): java.awt.Component
            public getComponentAt(arg0: java.awt.Point): java.awt.Component
            public deliverEvent(arg0: java.awt.Event): void
            public dispatchEvent(arg0: java.awt.AWTEvent): void
            public postEvent(arg0: java.awt.Event): boolean
            public addComponentListener(arg0: java.awt.event.ComponentListener): void
            public removeComponentListener(arg0: java.awt.event.ComponentListener): void
            public getComponentListeners(): java.awt.event.ComponentListener[]
            public addFocusListener(arg0: java.awt.event.FocusListener): void
            public removeFocusListener(arg0: java.awt.event.FocusListener): void
            public getFocusListeners(): java.awt.event.FocusListener[]
            public addHierarchyListener(arg0: java.awt.event.HierarchyListener): void
            public removeHierarchyListener(arg0: java.awt.event.HierarchyListener): void
            public getHierarchyListeners(): java.awt.event.HierarchyListener[]
            public addHierarchyBoundsListener(arg0: java.awt.event.HierarchyBoundsListener): void
            public removeHierarchyBoundsListener(arg0: java.awt.event.HierarchyBoundsListener): void
            public getHierarchyBoundsListeners(): java.awt.event.HierarchyBoundsListener[]
            public addKeyListener(arg0: java.awt.event.KeyListener): void
            public removeKeyListener(arg0: java.awt.event.KeyListener): void
            public getKeyListeners(): java.awt.event.KeyListener[]
            public addMouseListener(arg0: java.awt.event.MouseListener): void
            public removeMouseListener(arg0: java.awt.event.MouseListener): void
            public getMouseListeners(): java.awt.event.MouseListener[]
            public addMouseMotionListener(arg0: java.awt.event.MouseMotionListener): void
            public removeMouseMotionListener(arg0: java.awt.event.MouseMotionListener): void
            public getMouseMotionListeners(): java.awt.event.MouseMotionListener[]
            public addMouseWheelListener(arg0: java.awt.event.MouseWheelListener): void
            public removeMouseWheelListener(arg0: java.awt.event.MouseWheelListener): void
            public getMouseWheelListeners(): java.awt.event.MouseWheelListener[]
            public addInputMethodListener(arg0: java.awt.event.InputMethodListener): void
            public removeInputMethodListener(arg0: java.awt.event.InputMethodListener): void
            public getInputMethodListeners(): java.awt.event.InputMethodListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public getInputMethodRequests<T extends java.util.EventListener>(): java.awt.im.InputMethodRequests
            public getInputContext<T extends java.util.EventListener>(): java.awt.im.InputContext
            protected enableEvents<T extends java.util.EventListener>(arg0: long): void
            protected disableEvents<T extends java.util.EventListener>(arg0: long): void
            protected coalesceEvents<T extends java.util.EventListener>(arg0: java.awt.AWTEvent, arg1: java.awt.AWTEvent): java.awt.AWTEvent
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processComponentEvent<T extends java.util.EventListener>(arg0: java.awt.event.ComponentEvent): void
            protected processFocusEvent<T extends java.util.EventListener>(arg0: java.awt.event.FocusEvent): void
            protected processKeyEvent<T extends java.util.EventListener>(arg0: java.awt.event.KeyEvent): void
            protected processMouseEvent<T extends java.util.EventListener>(arg0: java.awt.event.MouseEvent): void
            protected processMouseMotionEvent<T extends java.util.EventListener>(arg0: java.awt.event.MouseEvent): void
            protected processMouseWheelEvent<T extends java.util.EventListener>(arg0: java.awt.event.MouseWheelEvent): void
            protected processInputMethodEvent<T extends java.util.EventListener>(arg0: java.awt.event.InputMethodEvent): void
            protected processHierarchyEvent<T extends java.util.EventListener>(arg0: java.awt.event.HierarchyEvent): void
            protected processHierarchyBoundsEvent<T extends java.util.EventListener>(arg0: java.awt.event.HierarchyEvent): void
            public handleEvent<T extends java.util.EventListener>(arg0: java.awt.Event): boolean
            public mouseDown<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int, arg2: int): boolean
            public mouseDrag<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int, arg2: int): boolean
            public mouseUp<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int, arg2: int): boolean
            public mouseMove<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int, arg2: int): boolean
            public mouseEnter<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int, arg2: int): boolean
            public mouseExit<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int, arg2: int): boolean
            public keyDown<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int): boolean
            public keyUp<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: int): boolean
            public action<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: java.lang.Object): boolean
            public addNotify<T extends java.util.EventListener>(): void
            public removeNotify<T extends java.util.EventListener>(): void
            public gotFocus<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: java.lang.Object): boolean
            public lostFocus<T extends java.util.EventListener>(arg0: java.awt.Event, arg1: java.lang.Object): boolean
            public isFocusTraversable<T extends java.util.EventListener>(): boolean
            public isFocusable<T extends java.util.EventListener>(): boolean
            public setFocusable<T extends java.util.EventListener>(arg0: boolean): void
            public setFocusTraversalKeys<T extends java.util.EventListener>(arg0: int, arg1: java.util.Set<java.awt.AWTKeyStroke>): void
            public getFocusTraversalKeys<T extends java.util.EventListener>(arg0: int): java.util.Set<java.awt.AWTKeyStroke>
            public areFocusTraversalKeysSet<T extends java.util.EventListener>(arg0: int): boolean
            public setFocusTraversalKeysEnabled<T extends java.util.EventListener>(arg0: boolean): void
            public getFocusTraversalKeysEnabled<T extends java.util.EventListener>(): boolean
            public requestFocus<T extends java.util.EventListener>(): void
            protected requestFocus<T extends java.util.EventListener>(arg0: boolean): boolean
            public requestFocusInWindow<T extends java.util.EventListener>(): boolean
            protected requestFocusInWindow<T extends java.util.EventListener>(arg0: boolean): boolean
            public getFocusCycleRootAncestor<T extends java.util.EventListener>(): java.awt.Container
            public isFocusCycleRoot<T extends java.util.EventListener>(arg0: java.awt.Container): boolean
            public transferFocus<T extends java.util.EventListener>(): void
            public nextFocus<T extends java.util.EventListener>(): void
            public transferFocusBackward<T extends java.util.EventListener>(): void
            public transferFocusUpCycle<T extends java.util.EventListener>(): void
            public hasFocus<T extends java.util.EventListener>(): boolean
            public isFocusOwner<T extends java.util.EventListener>(): boolean
            public add<T extends java.util.EventListener>(arg0: java.awt.PopupMenu): void
            public remove<T extends java.util.EventListener>(arg0: java.awt.MenuComponent): void
            protected paramString<T extends java.util.EventListener>(): string
            public toString<T extends java.util.EventListener>(): string
            public list<T extends java.util.EventListener>(): void
            public list<T extends java.util.EventListener>(arg0: java.io.PrintStream): void
            public list<T extends java.util.EventListener>(arg0: java.io.PrintStream, arg1: int): void
            public list<T extends java.util.EventListener>(arg0: java.io.PrintWriter): void
            public list<T extends java.util.EventListener>(arg0: java.io.PrintWriter, arg1: int): void
            public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners<T extends java.util.EventListener>(): java.beans.PropertyChangeListener[]
            public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners<T extends java.util.EventListener>(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
            protected firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            protected firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
            protected firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: byte, arg2: byte): void
            public firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: char, arg2: char): void
            public firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: short, arg2: short): void
            public firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: long, arg2: long): void
            public firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: float, arg2: float): void
            public firePropertyChange<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: double, arg2: double): void
            public setComponentOrientation<T extends java.util.EventListener>(arg0: java.awt.ComponentOrientation): void
            public getComponentOrientation<T extends java.util.EventListener>(): java.awt.ComponentOrientation
            public applyComponentOrientation<T extends java.util.EventListener>(arg0: java.awt.ComponentOrientation): void
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class ComponentOrientation implements java.io.Serializable {
            public static LEFT_TO_RIGHT: java.awt.ComponentOrientation
            public static RIGHT_TO_LEFT: java.awt.ComponentOrientation
            public static UNKNOWN: java.awt.ComponentOrientation
            public isHorizontal(): boolean
            public isLeftToRight(): boolean
            public static getOrientation(arg0: java.util.Locale): java.awt.ComponentOrientation
            public static getOrientation(arg0: java.util.ResourceBundle): java.awt.ComponentOrientation
            public static class: java.lang.Class<any>
        }
        interface Composite {
            createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.image.ColorModel, arg2: java.awt.RenderingHints): java.awt.CompositeContext
        }
        interface Composite$$Lambda {
            (arg0: java.awt.image.ColorModel, arg1: java.awt.image.ColorModel, arg2: java.awt.RenderingHints): java.awt.CompositeContext
        }
        interface CompositeContext {
            dispose(): void
            compose(arg0: java.awt.image.Raster, arg1: java.awt.image.Raster, arg2: java.awt.image.WritableRaster): void
        }
        interface Conditional {
            evaluate(): boolean
        }
        interface Conditional$$Lambda {
            (): boolean
        }
        class Container extends java.awt.Component {
            public constructor()
            public getComponentCount(): int
            public countComponents(): int
            public getComponent(arg0: int): java.awt.Component
            public getComponents(): java.awt.Component[]
            public getInsets(): java.awt.Insets
            public insets(): java.awt.Insets
            public add(arg0: java.awt.Component): java.awt.Component
            public add(arg0: java.lang.String | string, arg1: java.awt.Component): java.awt.Component
            public add(arg0: java.awt.Component, arg1: int): java.awt.Component
            public setComponentZOrder(arg0: java.awt.Component, arg1: int): void
            public getComponentZOrder(arg0: java.awt.Component): int
            public add(arg0: java.awt.Component, arg1: java.lang.Object): void
            public add(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: int): void
            public remove(arg0: java.awt.Component): void
            public removeAll(): void
            public getLayout(): java.awt.LayoutManager
            public setLayout(arg0: java.awt.LayoutManager): void
            public doLayout(): void
            public layout(): void
            public isValidateRoot(): boolean
            public invalidate(): void
            public validate(): void
            protected validateTree(): void
            public setFont(arg0: java.awt.Font): void
            public getPreferredSize(): java.awt.Dimension
            public preferredSize(): java.awt.Dimension
            public getMinimumSize(): java.awt.Dimension
            public minimumSize(): java.awt.Dimension
            public getMaximumSize(): java.awt.Dimension
            public getAlignmentX(): float
            public getAlignmentY(): float
            public paint(arg0: java.awt.Graphics): void
            public update(arg0: java.awt.Graphics): void
            public print(arg0: java.awt.Graphics): void
            public paintComponents(arg0: java.awt.Graphics): void
            public printComponents(arg0: java.awt.Graphics): void
            public addContainerListener(arg0: java.awt.event.ContainerListener): void
            public removeContainerListener(arg0: java.awt.event.ContainerListener): void
            public getContainerListeners(): java.awt.event.ContainerListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processContainerEvent<T extends java.util.EventListener>(arg0: java.awt.event.ContainerEvent): void
            public deliverEvent<T extends java.util.EventListener>(arg0: java.awt.Event): void
            public getComponentAt<T extends java.util.EventListener>(arg0: int, arg1: int): java.awt.Component
            public locate<T extends java.util.EventListener>(arg0: int, arg1: int): java.awt.Component
            public getComponentAt<T extends java.util.EventListener>(arg0: java.awt.Point): java.awt.Component
            public getMousePosition<T extends java.util.EventListener>(arg0: boolean): java.awt.Point
            public findComponentAt<T extends java.util.EventListener>(arg0: int, arg1: int): java.awt.Component
            public findComponentAt<T extends java.util.EventListener>(arg0: java.awt.Point): java.awt.Component
            public addNotify<T extends java.util.EventListener>(): void
            public removeNotify<T extends java.util.EventListener>(): void
            public isAncestorOf<T extends java.util.EventListener>(arg0: java.awt.Component): boolean
            protected paramString<T extends java.util.EventListener>(): string
            public list<T extends java.util.EventListener>(arg0: java.io.PrintStream, arg1: int): void
            public list<T extends java.util.EventListener>(arg0: java.io.PrintWriter, arg1: int): void
            public setFocusTraversalKeys<T extends java.util.EventListener>(arg0: int, arg1: java.util.Set<java.awt.AWTKeyStroke>): void
            public getFocusTraversalKeys<T extends java.util.EventListener>(arg0: int): java.util.Set<java.awt.AWTKeyStroke>
            public areFocusTraversalKeysSet<T extends java.util.EventListener>(arg0: int): boolean
            public isFocusCycleRoot<T extends java.util.EventListener>(arg0: java.awt.Container): boolean
            public setFocusTraversalPolicy<T extends java.util.EventListener>(arg0: java.awt.FocusTraversalPolicy): void
            public getFocusTraversalPolicy<T extends java.util.EventListener>(): java.awt.FocusTraversalPolicy
            public isFocusTraversalPolicySet<T extends java.util.EventListener>(): boolean
            public setFocusCycleRoot<T extends java.util.EventListener>(arg0: boolean): void
            public isFocusCycleRoot<T extends java.util.EventListener>(): boolean
            public setFocusTraversalPolicyProvider<T extends java.util.EventListener>(arg0: boolean): void
            public isFocusTraversalPolicyProvider<T extends java.util.EventListener>(): boolean
            public transferFocusDownCycle<T extends java.util.EventListener>(): void
            public applyComponentOrientation<T extends java.util.EventListener>(arg0: java.awt.ComponentOrientation): void
            public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeListener): void
            public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public static class: java.lang.Class<any>
        }
        class ContainerOrderFocusTraversalPolicy extends java.awt.FocusTraversalPolicy implements java.io.Serializable {
            public constructor()
            public getComponentAfter(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getComponentBefore(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getFirstComponent(arg0: java.awt.Container): java.awt.Component
            public getLastComponent(arg0: java.awt.Container): java.awt.Component
            public getDefaultComponent(arg0: java.awt.Container): java.awt.Component
            public setImplicitDownCycleTraversal(arg0: boolean): void
            public getImplicitDownCycleTraversal(): boolean
            protected accept(arg0: java.awt.Component): boolean
            public static class: java.lang.Class<any>
        }
        class Cursor implements java.io.Serializable {
            public static DEFAULT_CURSOR: int
            public static CROSSHAIR_CURSOR: int
            public static TEXT_CURSOR: int
            public static WAIT_CURSOR: int
            public static SW_RESIZE_CURSOR: int
            public static SE_RESIZE_CURSOR: int
            public static NW_RESIZE_CURSOR: int
            public static NE_RESIZE_CURSOR: int
            public static N_RESIZE_CURSOR: int
            public static S_RESIZE_CURSOR: int
            public static W_RESIZE_CURSOR: int
            public static E_RESIZE_CURSOR: int
            public static HAND_CURSOR: int
            public static MOVE_CURSOR: int
            protected static predefined: java.awt.Cursor[]
            public static CUSTOM_CURSOR: int
            protected name: string
            public static getPredefinedCursor(arg0: int): java.awt.Cursor
            public static getSystemCustomCursor(arg0: java.lang.String | string): java.awt.Cursor
            public static getDefaultCursor(): java.awt.Cursor
            public constructor(arg0: int)
            protected constructor(arg0: java.lang.String | string)
            public getType(): int
            public getName(): string
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class DefaultFocusTraversalPolicy extends java.awt.ContainerOrderFocusTraversalPolicy {
            public constructor()
            protected accept(arg0: java.awt.Component): boolean
            public static class: java.lang.Class<any>
        }
        class DefaultKeyboardFocusManager extends java.awt.KeyboardFocusManager {
            public constructor()
            public dispatchEvent(arg0: java.awt.AWTEvent): boolean
            public dispatchKeyEvent(arg0: java.awt.event.KeyEvent): boolean
            public postProcessKeyEvent(arg0: java.awt.event.KeyEvent): boolean
            public processKeyEvent(arg0: java.awt.Component, arg1: java.awt.event.KeyEvent): void
            protected enqueueKeyEvents(arg0: long, arg1: java.awt.Component): void
            protected dequeueKeyEvents(arg0: long, arg1: java.awt.Component): void
            protected discardKeyEvents(arg0: java.awt.Component): void
            public focusPreviousComponent(arg0: java.awt.Component): void
            public focusNextComponent(arg0: java.awt.Component): void
            public upFocusCycle(arg0: java.awt.Component): void
            public downFocusCycle(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        class Desktop {
            public static getDesktop(): java.awt.Desktop
            public static isDesktopSupported(): boolean
            public isSupported(arg0: java.awt.Desktop$Action): boolean
            public open(arg0: java.io.File): void
            public edit(arg0: java.io.File): void
            public print(arg0: java.io.File): void
            public browse(arg0: java.net.URI): void
            public mail(): void
            public mail(arg0: java.net.URI): void
            public static class: java.lang.Class<any>
        }
        class Dialog extends java.awt.Window {
            public static DEFAULT_MODALITY_TYPE: java.awt.Dialog$ModalityType
            public constructor(arg0: java.awt.Frame)
            public constructor(arg0: java.awt.Frame, arg1: boolean)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: boolean)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: boolean, arg3: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.awt.Dialog)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string, arg2: boolean)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string, arg2: boolean, arg3: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.awt.Dialog$ModalityType)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.lang.String | string, arg2: java.awt.Dialog$ModalityType)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.lang.String | string, arg2: java.awt.Dialog$ModalityType, arg3: java.awt.GraphicsConfiguration)
            public addNotify(): void
            public isModal(): boolean
            public setModal(arg0: boolean): void
            public getModalityType(): java.awt.Dialog$ModalityType
            public setModalityType(arg0: java.awt.Dialog$ModalityType): void
            public getTitle(): string
            public setTitle(arg0: java.lang.String | string): void
            public setVisible(arg0: boolean): void
            public show(): void
            public hide(): void
            public toBack(): void
            public isResizable(): boolean
            public setResizable(arg0: boolean): void
            public setUndecorated(arg0: boolean): void
            public isUndecorated(): boolean
            public setOpacity(arg0: float): void
            public setShape(arg0: java.awt.Shape): void
            public setBackground(arg0: java.awt.Color): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Dimension extends java.awt.geom.Dimension2D implements java.io.Serializable {
            public width: int
            public height: int
            public constructor()
            public constructor(arg0: java.awt.Dimension)
            public constructor(arg0: int, arg1: int)
            public getWidth(): double
            public getHeight(): double
            public setSize(arg0: double, arg1: double): void
            public getSize(): java.awt.Dimension
            public setSize(arg0: java.awt.Dimension): void
            public setSize(arg0: int, arg1: int): void
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class DisplayMode {
            public static BIT_DEPTH_MULTI: int
            public static REFRESH_RATE_UNKNOWN: int
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public getHeight(): int
            public getWidth(): int
            public getBitDepth(): int
            public getRefreshRate(): int
            public equals(arg0: java.awt.DisplayMode): boolean
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public static class: java.lang.Class<any>
        }
        class Event implements java.io.Serializable {
            public static SHIFT_MASK: int
            public static CTRL_MASK: int
            public static META_MASK: int
            public static ALT_MASK: int
            public static HOME: int
            public static END: int
            public static PGUP: int
            public static PGDN: int
            public static UP: int
            public static DOWN: int
            public static LEFT: int
            public static RIGHT: int
            public static F1: int
            public static F2: int
            public static F3: int
            public static F4: int
            public static F5: int
            public static F6: int
            public static F7: int
            public static F8: int
            public static F9: int
            public static F10: int
            public static F11: int
            public static F12: int
            public static PRINT_SCREEN: int
            public static SCROLL_LOCK: int
            public static CAPS_LOCK: int
            public static NUM_LOCK: int
            public static PAUSE: int
            public static INSERT: int
            public static ENTER: int
            public static BACK_SPACE: int
            public static TAB: int
            public static ESCAPE: int
            public static DELETE: int
            public static WINDOW_DESTROY: int
            public static WINDOW_EXPOSE: int
            public static WINDOW_ICONIFY: int
            public static WINDOW_DEICONIFY: int
            public static WINDOW_MOVED: int
            public static KEY_PRESS: int
            public static KEY_RELEASE: int
            public static KEY_ACTION: int
            public static KEY_ACTION_RELEASE: int
            public static MOUSE_DOWN: int
            public static MOUSE_UP: int
            public static MOUSE_MOVE: int
            public static MOUSE_ENTER: int
            public static MOUSE_EXIT: int
            public static MOUSE_DRAG: int
            public static SCROLL_LINE_UP: int
            public static SCROLL_LINE_DOWN: int
            public static SCROLL_PAGE_UP: int
            public static SCROLL_PAGE_DOWN: int
            public static SCROLL_ABSOLUTE: int
            public static SCROLL_BEGIN: int
            public static SCROLL_END: int
            public static LIST_SELECT: int
            public static LIST_DESELECT: int
            public static ACTION_EVENT: int
            public static LOAD_FILE: int
            public static SAVE_FILE: int
            public static GOT_FOCUS: int
            public static LOST_FOCUS: int
            public target: java.lang.Object
            public when: long
            public id: int
            public x: int
            public y: int
            public key: int
            public modifiers: int
            public clickCount: int
            public arg: java.lang.Object
            public evt: java.awt.Event
            public constructor(arg0: java.lang.Object, arg1: long, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: java.lang.Object)
            public constructor(arg0: java.lang.Object, arg1: long, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int)
            public constructor(arg0: java.lang.Object, arg1: int, arg2: java.lang.Object)
            public translate(arg0: int, arg1: int): void
            public shiftDown(): boolean
            public controlDown(): boolean
            public metaDown(): boolean
            protected paramString(): string
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class EventDispatchThread extends java.lang.Thread {
            public stopDispatching(): void
            public run(): void
            public getEventQueue(): java.awt.EventQueue
            public setEventQueue(arg0: java.awt.EventQueue): void
            public static class: java.lang.Class<any>
        }
        interface EventFilter {
            acceptEvent(arg0: java.awt.AWTEvent): java.awt.EventFilter$FilterAction
        }
        interface EventFilter$$Lambda {
            (arg0: java.awt.AWTEvent): java.awt.EventFilter$FilterAction
        }
        class EventQueue {
            public constructor()
            public postEvent(arg0: java.awt.AWTEvent): void
            public getNextEvent(): java.awt.AWTEvent
            public peekEvent(): java.awt.AWTEvent
            public peekEvent(arg0: int): java.awt.AWTEvent
            protected dispatchEvent(arg0: java.awt.AWTEvent): void
            public static getMostRecentEventTime(): long
            public static getCurrentEvent(): java.awt.AWTEvent
            public push(arg0: java.awt.EventQueue): void
            protected pop(): void
            public createSecondaryLoop(): java.awt.SecondaryLoop
            public static isDispatchThread(): boolean
            public static invokeLater(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static invokeAndWait(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static class: java.lang.Class<any>
        }
        class FileDialog extends java.awt.Dialog {
            public static LOAD: int
            public static SAVE: int
            public constructor(arg0: java.awt.Frame)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: int)
            public constructor(arg0: java.awt.Dialog)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string, arg2: int)
            public addNotify(): void
            public getMode(): int
            public setMode(arg0: int): void
            public getDirectory(): string
            public setDirectory(arg0: java.lang.String | string): void
            public getFile(): string
            public getFiles(): java.io.File[]
            public setFile(arg0: java.lang.String | string): void
            public setMultipleMode(arg0: boolean): void
            public isMultipleMode(): boolean
            public getFilenameFilter(): java.io.FilenameFilter
            public setFilenameFilter(arg0: java.io.FilenameFilter | java.io.FilenameFilter$$Lambda): void
            protected paramString(): string
            public static class: java.lang.Class<any>
        }
        class FlowLayout implements java.awt.LayoutManager , java.io.Serializable {
            public static LEFT: int
            public static CENTER: int
            public static RIGHT: int
            public static LEADING: int
            public static TRAILING: int
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: int, arg2: int)
            public getAlignment(): int
            public setAlignment(arg0: int): void
            public getHgap(): int
            public setHgap(arg0: int): void
            public getVgap(): int
            public setVgap(arg0: int): void
            public setAlignOnBaseline(arg0: boolean): void
            public getAlignOnBaseline(): boolean
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public layoutContainer(arg0: java.awt.Container): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        abstract class FocusTraversalPolicy {
            public constructor()
            public getComponentAfter(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getComponentBefore(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getFirstComponent(arg0: java.awt.Container): java.awt.Component
            public getLastComponent(arg0: java.awt.Container): java.awt.Component
            public getDefaultComponent(arg0: java.awt.Container): java.awt.Component
            public getInitialComponent(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.Component
            public static class: java.lang.Class<any>
        }
        class Font implements java.io.Serializable {
            public static DIALOG: string
            public static DIALOG_INPUT: string
            public static SANS_SERIF: string
            public static SERIF: string
            public static MONOSPACED: string
            public static PLAIN: int
            public static BOLD: int
            public static ITALIC: int
            public static ROMAN_BASELINE: int
            public static CENTER_BASELINE: int
            public static HANGING_BASELINE: int
            public static TRUETYPE_FONT: int
            public static TYPE1_FONT: int
            protected name: string
            protected style: int
            protected size: int
            protected pointSize: float
            public static LAYOUT_LEFT_TO_RIGHT: int
            public static LAYOUT_RIGHT_TO_LEFT: int
            public static LAYOUT_NO_START_CONTEXT: int
            public static LAYOUT_NO_LIMIT_CONTEXT: int
            public getPeer(): java.awt.peer.FontPeer
            public constructor(arg0: java.lang.String | string, arg1: int, arg2: int)
            public constructor(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>)
            protected constructor(arg0: java.awt.Font)
            public static getFont(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>): java.awt.Font
            public static createFont(arg0: int, arg1: java.io.InputStream): java.awt.Font
            public static createFont(arg0: int, arg1: java.io.File): java.awt.Font
            public getTransform(): java.awt.geom.AffineTransform
            public getFamily(): string
            public getFamily(arg0: java.util.Locale): string
            public getPSName(): string
            public getName(): string
            public getFontName(): string
            public getFontName(arg0: java.util.Locale): string
            public getStyle(): int
            public getSize(): int
            public getSize2D(): float
            public isPlain(): boolean
            public isBold(): boolean
            public isItalic(): boolean
            public isTransformed(): boolean
            public hasLayoutAttributes(): boolean
            public static getFont(arg0: java.lang.String | string): java.awt.Font
            public static decode(arg0: java.lang.String | string): java.awt.Font
            public static getFont(arg0: java.lang.String | string, arg1: java.awt.Font): java.awt.Font
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public toString(): string
            public getNumGlyphs(): int
            public getMissingGlyphCode(): int
            public getBaselineFor(arg0: char): byte
            public getAttributes(): java.util.Map<java.awt.font.TextAttribute, any>
            public getAvailableAttributes(): java.text.AttributedCharacterIterator$Attribute[]
            public deriveFont(arg0: int, arg1: float): java.awt.Font
            public deriveFont(arg0: int, arg1: java.awt.geom.AffineTransform): java.awt.Font
            public deriveFont(arg0: float): java.awt.Font
            public deriveFont(arg0: java.awt.geom.AffineTransform): java.awt.Font
            public deriveFont(arg0: int): java.awt.Font
            public deriveFont(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>): java.awt.Font
            public canDisplay(arg0: char): boolean
            public canDisplay(arg0: int): boolean
            public canDisplayUpTo(arg0: java.lang.String | string): int
            public canDisplayUpTo(arg0: char[], arg1: int, arg2: int): int
            public canDisplayUpTo(arg0: java.text.CharacterIterator, arg1: int, arg2: int): int
            public getItalicAngle(): float
            public hasUniformLineMetrics(): boolean
            public getLineMetrics(arg0: java.lang.String | string, arg1: java.awt.font.FontRenderContext): java.awt.font.LineMetrics
            public getLineMetrics(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: java.awt.font.FontRenderContext): java.awt.font.LineMetrics
            public getLineMetrics(arg0: char[], arg1: int, arg2: int, arg3: java.awt.font.FontRenderContext): java.awt.font.LineMetrics
            public getLineMetrics(arg0: java.text.CharacterIterator, arg1: int, arg2: int, arg3: java.awt.font.FontRenderContext): java.awt.font.LineMetrics
            public getStringBounds(arg0: java.lang.String | string, arg1: java.awt.font.FontRenderContext): java.awt.geom.Rectangle2D
            public getStringBounds(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: java.awt.font.FontRenderContext): java.awt.geom.Rectangle2D
            public getStringBounds(arg0: char[], arg1: int, arg2: int, arg3: java.awt.font.FontRenderContext): java.awt.geom.Rectangle2D
            public getStringBounds(arg0: java.text.CharacterIterator, arg1: int, arg2: int, arg3: java.awt.font.FontRenderContext): java.awt.geom.Rectangle2D
            public getMaxCharBounds(arg0: java.awt.font.FontRenderContext): java.awt.geom.Rectangle2D
            public createGlyphVector(arg0: java.awt.font.FontRenderContext, arg1: java.lang.String | string): java.awt.font.GlyphVector
            public createGlyphVector(arg0: java.awt.font.FontRenderContext, arg1: char[]): java.awt.font.GlyphVector
            public createGlyphVector(arg0: java.awt.font.FontRenderContext, arg1: java.text.CharacterIterator): java.awt.font.GlyphVector
            public createGlyphVector(arg0: java.awt.font.FontRenderContext, arg1: int[]): java.awt.font.GlyphVector
            public layoutGlyphVector(arg0: java.awt.font.FontRenderContext, arg1: char[], arg2: int, arg3: int, arg4: int): java.awt.font.GlyphVector
            public static class: java.lang.Class<any>
        }
        class FontFormatException extends java.lang.Exception {
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        abstract class FontMetrics implements java.io.Serializable {
            protected font: java.awt.Font
            protected constructor(arg0: java.awt.Font)
            public getFont(): java.awt.Font
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public getLeading(): int
            public getAscent(): int
            public getDescent(): int
            public getHeight(): int
            public getMaxAscent(): int
            public getMaxDescent(): int
            public getMaxDecent(): int
            public getMaxAdvance(): int
            public charWidth(arg0: int): int
            public charWidth(arg0: char): int
            public stringWidth(arg0: java.lang.String | string): int
            public charsWidth(arg0: char[], arg1: int, arg2: int): int
            public bytesWidth(arg0: byte[], arg1: int, arg2: int): int
            public getWidths(): int[]
            public hasUniformLineMetrics(): boolean
            public getLineMetrics(arg0: java.lang.String | string, arg1: java.awt.Graphics): java.awt.font.LineMetrics
            public getLineMetrics(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: java.awt.Graphics): java.awt.font.LineMetrics
            public getLineMetrics(arg0: char[], arg1: int, arg2: int, arg3: java.awt.Graphics): java.awt.font.LineMetrics
            public getLineMetrics(arg0: java.text.CharacterIterator, arg1: int, arg2: int, arg3: java.awt.Graphics): java.awt.font.LineMetrics
            public getStringBounds(arg0: java.lang.String | string, arg1: java.awt.Graphics): java.awt.geom.Rectangle2D
            public getStringBounds(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: java.awt.Graphics): java.awt.geom.Rectangle2D
            public getStringBounds(arg0: char[], arg1: int, arg2: int, arg3: java.awt.Graphics): java.awt.geom.Rectangle2D
            public getStringBounds(arg0: java.text.CharacterIterator, arg1: int, arg2: int, arg3: java.awt.Graphics): java.awt.geom.Rectangle2D
            public getMaxCharBounds(arg0: java.awt.Graphics): java.awt.geom.Rectangle2D
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class Frame extends java.awt.Window implements java.awt.MenuContainer {
            public static DEFAULT_CURSOR: int
            public static CROSSHAIR_CURSOR: int
            public static TEXT_CURSOR: int
            public static WAIT_CURSOR: int
            public static SW_RESIZE_CURSOR: int
            public static SE_RESIZE_CURSOR: int
            public static NW_RESIZE_CURSOR: int
            public static NE_RESIZE_CURSOR: int
            public static N_RESIZE_CURSOR: int
            public static S_RESIZE_CURSOR: int
            public static W_RESIZE_CURSOR: int
            public static E_RESIZE_CURSOR: int
            public static HAND_CURSOR: int
            public static MOVE_CURSOR: int
            public static NORMAL: int
            public static ICONIFIED: int
            public static MAXIMIZED_HORIZ: int
            public static MAXIMIZED_VERT: int
            public static MAXIMIZED_BOTH: int
            public constructor()
            public constructor(arg0: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.awt.GraphicsConfiguration)
            public addNotify(): void
            public getTitle(): string
            public setTitle(arg0: java.lang.String | string): void
            public getIconImage(): java.awt.Image
            public setIconImage(arg0: java.awt.Image): void
            public getMenuBar(): java.awt.MenuBar
            public setMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): void
            public isResizable(): boolean
            public setResizable(arg0: boolean): void
            public setState(arg0: int): void
            public setExtendedState(arg0: int): void
            public getState(): int
            public getExtendedState(): int
            public setMaximizedBounds(arg0: java.awt.Rectangle): void
            public getMaximizedBounds(): java.awt.Rectangle
            public setUndecorated(arg0: boolean): void
            public isUndecorated(): boolean
            public setOpacity(arg0: float): void
            public setShape(arg0: java.awt.Shape): void
            public setBackground(arg0: java.awt.Color): void
            public remove(arg0: java.awt.MenuComponent): void
            public removeNotify(): void
            protected paramString(): string
            public setCursor(arg0: int): void
            public getCursorType(): int
            public static getFrames(): java.awt.Frame[]
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class GradientPaint implements java.awt.Paint {
            public constructor(arg0: float, arg1: float, arg2: java.awt.Color, arg3: float, arg4: float, arg5: java.awt.Color)
            public constructor(arg0: java.awt.geom.Point2D, arg1: java.awt.Color, arg2: java.awt.geom.Point2D, arg3: java.awt.Color)
            public constructor(arg0: float, arg1: float, arg2: java.awt.Color, arg3: float, arg4: float, arg5: java.awt.Color, arg6: boolean)
            public constructor(arg0: java.awt.geom.Point2D, arg1: java.awt.Color, arg2: java.awt.geom.Point2D, arg3: java.awt.Color, arg4: boolean)
            public getPoint1(): java.awt.geom.Point2D
            public getColor1(): java.awt.Color
            public getPoint2(): java.awt.geom.Point2D
            public getColor2(): java.awt.Color
            public isCyclic(): boolean
            public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.Rectangle, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.RenderingHints): java.awt.PaintContext
            public getTransparency(): int
            public static class: java.lang.Class<any>
        }
        class GradientPaintContext implements java.awt.PaintContext {
            public constructor(arg0: java.awt.image.ColorModel, arg1: java.awt.geom.Point2D, arg2: java.awt.geom.Point2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.Color, arg5: java.awt.Color, arg6: boolean)
            public dispose(): void
            public getColorModel(): java.awt.image.ColorModel
            public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
            public static class: java.lang.Class<any>
        }
        abstract class Graphics {
            protected constructor()
            public create(): java.awt.Graphics
            public create(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.Graphics
            public translate(arg0: int, arg1: int): void
            public getColor(): java.awt.Color
            public setColor(arg0: java.awt.Color): void
            public setPaintMode(): void
            public setXORMode(arg0: java.awt.Color): void
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public getFontMetrics(): java.awt.FontMetrics
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public getClipBounds(): java.awt.Rectangle
            public clipRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getClip(): java.awt.Shape
            public setClip(arg0: java.awt.Shape): void
            public copyArea(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public draw3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public fill3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: java.awt.Polygon): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: java.awt.Polygon): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawChars(arg0: char[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawBytes(arg0: byte[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public dispose(): void
            public finalize(): void
            public toString(): string
            public getClipRect(): java.awt.Rectangle
            public hitClip(arg0: int, arg1: int, arg2: int, arg3: int): boolean
            public getClipBounds(arg0: java.awt.Rectangle): java.awt.Rectangle
            public static class: java.lang.Class<any>
        }
        abstract class Graphics2D extends java.awt.Graphics {
            protected constructor()
            public draw3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public fill3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public draw(arg0: java.awt.Shape): void
            public drawImage(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImageOp, arg2: int, arg3: int): void
            public drawRenderedImage(arg0: java.awt.image.RenderedImage, arg1: java.awt.geom.AffineTransform): void
            public drawRenderableImage(arg0: java.awt.image.renderable.RenderableImage, arg1: java.awt.geom.AffineTransform): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: float, arg2: float): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: float, arg2: float): void
            public drawGlyphVector(arg0: java.awt.font.GlyphVector, arg1: float, arg2: float): void
            public fill(arg0: java.awt.Shape): void
            public hit(arg0: java.awt.Rectangle, arg1: java.awt.Shape, arg2: boolean): boolean
            public getDeviceConfiguration(): java.awt.GraphicsConfiguration
            public setComposite(arg0: java.awt.Composite | java.awt.Composite$$Lambda): void
            public setPaint(arg0: java.awt.Paint): void
            public setStroke(arg0: java.awt.Stroke | java.awt.Stroke$$Lambda): void
            public setRenderingHint(arg0: java.awt.RenderingHints$Key, arg1: java.lang.Object): void
            public getRenderingHint(arg0: java.awt.RenderingHints$Key): java.lang.Object
            public setRenderingHints(arg0: java.util.Map<any, any>): void
            public addRenderingHints(arg0: java.util.Map<any, any>): void
            public getRenderingHints(): java.awt.RenderingHints
            public translate(arg0: int, arg1: int): void
            public translate(arg0: double, arg1: double): void
            public rotate(arg0: double): void
            public rotate(arg0: double, arg1: double, arg2: double): void
            public scale(arg0: double, arg1: double): void
            public shear(arg0: double, arg1: double): void
            public transform(arg0: java.awt.geom.AffineTransform): void
            public setTransform(arg0: java.awt.geom.AffineTransform): void
            public getTransform(): java.awt.geom.AffineTransform
            public getPaint(): java.awt.Paint
            public getComposite(): java.awt.Composite
            public setBackground(arg0: java.awt.Color): void
            public getBackground(): java.awt.Color
            public getStroke(): java.awt.Stroke
            public clip(arg0: java.awt.Shape): void
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public static class: java.lang.Class<any>
        }
        abstract class GraphicsCallback extends sun.awt.SunGraphicsCallback {
            public static class: java.lang.Class<any>
        }
        abstract class GraphicsConfigTemplate implements java.io.Serializable {
            public static REQUIRED: int
            public static PREFERRED: int
            public static UNNECESSARY: int
            public constructor()
            public getBestConfiguration(arg0: java.awt.GraphicsConfiguration[]): java.awt.GraphicsConfiguration
            public isGraphicsConfigSupported(arg0: java.awt.GraphicsConfiguration): boolean
            public static class: java.lang.Class<any>
        }
        abstract class GraphicsConfiguration {
            protected constructor()
            public getDevice(): java.awt.GraphicsDevice
            public createCompatibleImage(arg0: int, arg1: int): java.awt.image.BufferedImage
            public createCompatibleImage(arg0: int, arg1: int, arg2: int): java.awt.image.BufferedImage
            public createCompatibleVolatileImage(arg0: int, arg1: int): java.awt.image.VolatileImage
            public createCompatibleVolatileImage(arg0: int, arg1: int, arg2: int): java.awt.image.VolatileImage
            public createCompatibleVolatileImage(arg0: int, arg1: int, arg2: java.awt.ImageCapabilities): java.awt.image.VolatileImage
            public createCompatibleVolatileImage(arg0: int, arg1: int, arg2: java.awt.ImageCapabilities, arg3: int): java.awt.image.VolatileImage
            public getColorModel(): java.awt.image.ColorModel
            public getColorModel(arg0: int): java.awt.image.ColorModel
            public getDefaultTransform(): java.awt.geom.AffineTransform
            public getNormalizingTransform(): java.awt.geom.AffineTransform
            public getBounds(): java.awt.Rectangle
            public getBufferCapabilities(): java.awt.BufferCapabilities
            public getImageCapabilities(): java.awt.ImageCapabilities
            public isTranslucencyCapable(): boolean
            public static class: java.lang.Class<any>
        }
        abstract class GraphicsDevice {
            public static TYPE_RASTER_SCREEN: int
            public static TYPE_PRINTER: int
            public static TYPE_IMAGE_BUFFER: int
            protected constructor()
            public getType(): int
            public getIDstring(): string
            public getConfigurations(): java.awt.GraphicsConfiguration[]
            public getDefaultConfiguration(): java.awt.GraphicsConfiguration
            public getBestConfiguration(arg0: java.awt.GraphicsConfigTemplate): java.awt.GraphicsConfiguration
            public isFullScreenSupported(): boolean
            public setFullScreenWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public getFullScreenWindow(): java.awt.Window
            public isDisplayChangeSupported(): boolean
            public setDisplayMode(arg0: java.awt.DisplayMode): void
            public getDisplayMode(): java.awt.DisplayMode
            public getDisplayModes(): java.awt.DisplayMode[]
            public getAvailableAcceleratedMemory(): int
            public isWindowTranslucencySupported(arg0: java.awt.GraphicsDevice$WindowTranslucency): boolean
            public static class: java.lang.Class<any>
        }
        abstract class GraphicsEnvironment {
            protected constructor()
            public static getLocalGraphicsEnvironment(): java.awt.GraphicsEnvironment
            public static isHeadless(): boolean
            public isHeadlessInstance(): boolean
            public getScreenDevices(): java.awt.GraphicsDevice[]
            public getDefaultScreenDevice(): java.awt.GraphicsDevice
            public createGraphics(arg0: java.awt.image.BufferedImage): java.awt.Graphics2D
            public getAllFonts(): java.awt.Font[]
            public getAvailableFontFamilyNames(): java.lang.String[]
            public getAvailableFontFamilyNames(arg0: java.util.Locale): java.lang.String[]
            public registerFont(arg0: java.awt.Font): boolean
            public preferLocaleFonts(): void
            public preferProportionalFonts(): void
            public getCenterPoint(): java.awt.Point
            public getMaximumWindowBounds(): java.awt.Rectangle
            public static class: java.lang.Class<any>
        }
        class GridBagConstraints implements java.lang.Cloneable , java.io.Serializable {
            public static RELATIVE: int
            public static REMAINDER: int
            public static NONE: int
            public static BOTH: int
            public static HORIZONTAL: int
            public static VERTICAL: int
            public static CENTER: int
            public static NORTH: int
            public static NORTHEAST: int
            public static EAST: int
            public static SOUTHEAST: int
            public static SOUTH: int
            public static SOUTHWEST: int
            public static WEST: int
            public static NORTHWEST: int
            public static PAGE_START: int
            public static PAGE_END: int
            public static LINE_START: int
            public static LINE_END: int
            public static FIRST_LINE_START: int
            public static FIRST_LINE_END: int
            public static LAST_LINE_START: int
            public static LAST_LINE_END: int
            public static BASELINE: int
            public static BASELINE_LEADING: int
            public static BASELINE_TRAILING: int
            public static ABOVE_BASELINE: int
            public static ABOVE_BASELINE_LEADING: int
            public static ABOVE_BASELINE_TRAILING: int
            public static BELOW_BASELINE: int
            public static BELOW_BASELINE_LEADING: int
            public static BELOW_BASELINE_TRAILING: int
            public gridx: int
            public gridy: int
            public gridwidth: int
            public gridheight: int
            public weightx: double
            public weighty: double
            public anchor: int
            public fill: int
            public insets: java.awt.Insets
            public ipadx: int
            public ipady: int
            public constructor()
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: double, arg5: double, arg6: int, arg7: int, arg8: java.awt.Insets, arg9: int, arg10: int)
            public clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class GridBagLayout implements java.awt.LayoutManager2 , java.io.Serializable {
            protected static MAXGRIDSIZE: int
            protected static MINSIZE: int
            protected static PREFERREDSIZE: int
            protected comptable: java.util.Hashtable<java.awt.Component, java.awt.GridBagConstraints>
            protected defaultConstraints: java.awt.GridBagConstraints
            protected layoutInfo: java.awt.GridBagLayoutInfo
            public columnWidths: int[]
            public rowHeights: int[]
            public columnWeights: double[]
            public rowWeights: double[]
            public constructor()
            public setConstraints(arg0: java.awt.Component, arg1: java.awt.GridBagConstraints): void
            public getConstraints(arg0: java.awt.Component): java.awt.GridBagConstraints
            protected lookupConstraints(arg0: java.awt.Component): java.awt.GridBagConstraints
            public getLayoutOrigin(): java.awt.Point
            public getLayoutDimensions(): int[][]
            public getLayoutWeights(): double[][]
            public location(arg0: int, arg1: int): java.awt.Point
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public invalidateLayout(arg0: java.awt.Container): void
            public layoutContainer(arg0: java.awt.Container): void
            public toString(): string
            protected getLayoutInfo(arg0: java.awt.Container, arg1: int): java.awt.GridBagLayoutInfo
            protected GetLayoutInfo(arg0: java.awt.Container, arg1: int): java.awt.GridBagLayoutInfo
            protected adjustForGravity(arg0: java.awt.GridBagConstraints, arg1: java.awt.Rectangle): void
            protected AdjustForGravity(arg0: java.awt.GridBagConstraints, arg1: java.awt.Rectangle): void
            protected getMinSize(arg0: java.awt.Container, arg1: java.awt.GridBagLayoutInfo): java.awt.Dimension
            protected GetMinSize(arg0: java.awt.Container, arg1: java.awt.GridBagLayoutInfo): java.awt.Dimension
            protected arrangeGrid(arg0: java.awt.Container): void
            protected ArrangeGrid(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        class GridBagLayoutInfo implements java.io.Serializable {
            public static class: java.lang.Class<any>
        }
        class GridLayout implements java.awt.LayoutManager , java.io.Serializable {
            public constructor()
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public getRows(): int
            public setRows(arg0: int): void
            public getColumns(): int
            public setColumns(arg0: int): void
            public getHgap(): int
            public setHgap(arg0: int): void
            public getVgap(): int
            public setVgap(arg0: int): void
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public layoutContainer(arg0: java.awt.Container): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class HeadlessException extends java.lang.UnsupportedOperationException {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public getMessage(): string
            public static class: java.lang.Class<any>
        }
        class IllegalComponentStateException extends java.lang.IllegalStateException {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        abstract class Image {
            protected accelerationPriority: float
            public static UndefinedProperty: java.lang.Object
            public static SCALE_DEFAULT: int
            public static SCALE_FAST: int
            public static SCALE_SMOOTH: int
            public static SCALE_REPLICATE: int
            public static SCALE_AREA_AVERAGING: int
            public constructor()
            public getWidth(arg0: java.awt.image.ImageObserver): int
            public getHeight(arg0: java.awt.image.ImageObserver): int
            public getSource(): java.awt.image.ImageProducer
            public getGraphics(): java.awt.Graphics
            public getProperty(arg0: java.lang.String | string, arg1: java.awt.image.ImageObserver): java.lang.Object
            public getScaledInstance(arg0: int, arg1: int, arg2: int): java.awt.Image
            public flush(): void
            public getCapabilities(arg0: java.awt.GraphicsConfiguration): java.awt.ImageCapabilities
            public setAccelerationPriority(arg0: float): void
            public getAccelerationPriority(): float
            public static class: java.lang.Class<any>
        }
        class ImageCapabilities implements java.lang.Cloneable {
            public constructor(arg0: boolean)
            public isAccelerated(): boolean
            public isTrueVolatile(): boolean
            public clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class Insets implements java.lang.Cloneable , java.io.Serializable {
            public top: int
            public left: int
            public bottom: int
            public right: int
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public set(arg0: int, arg1: int, arg2: int, arg3: int): void
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public toString(): string
            public clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        interface ItemSelectable {
            getSelectedObjects(): java.lang.Object[]
            addItemListener(arg0: java.awt.event.ItemListener): void
            removeItemListener(arg0: java.awt.event.ItemListener): void
        }
        class JobAttributes implements java.lang.Cloneable {
            public constructor()
            public constructor(arg0: java.awt.JobAttributes)
            public constructor(arg0: int, arg1: java.awt.JobAttributes$DefaultSelectionType, arg2: java.awt.JobAttributes$DestinationType, arg3: java.awt.JobAttributes$DialogType, arg4: java.lang.String | string, arg5: int, arg6: int, arg7: java.awt.JobAttributes$MultipleDocumentHandlingType, arg8: int[][], arg9: java.lang.String | string, arg10: java.awt.JobAttributes$SidesType)
            public clone(): java.lang.Object
            public set(arg0: java.awt.JobAttributes): void
            public getCopies(): int
            public setCopies(arg0: int): void
            public setCopiesToDefault(): void
            public getDefaultSelection(): java.awt.JobAttributes$DefaultSelectionType
            public setDefaultSelection(arg0: java.awt.JobAttributes$DefaultSelectionType): void
            public getDestination(): java.awt.JobAttributes$DestinationType
            public setDestination(arg0: java.awt.JobAttributes$DestinationType): void
            public getDialog(): java.awt.JobAttributes$DialogType
            public setDialog(arg0: java.awt.JobAttributes$DialogType): void
            public getFileName(): string
            public setFileName(arg0: java.lang.String | string): void
            public getFromPage(): int
            public setFromPage(arg0: int): void
            public getMaxPage(): int
            public setMaxPage(arg0: int): void
            public getMinPage(): int
            public setMinPage(arg0: int): void
            public getMultipleDocumentHandling(): java.awt.JobAttributes$MultipleDocumentHandlingType
            public setMultipleDocumentHandling(arg0: java.awt.JobAttributes$MultipleDocumentHandlingType): void
            public setMultipleDocumentHandlingToDefault(): void
            public getPageRanges(): int[][]
            public setPageRanges(arg0: int[][]): void
            public getPrinter(): string
            public setPrinter(arg0: java.lang.String | string): void
            public getSides(): java.awt.JobAttributes$SidesType
            public setSides(arg0: java.awt.JobAttributes$SidesType): void
            public setSidesToDefault(): void
            public getToPage(): int
            public setToPage(arg0: int): void
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface KeyEventDispatcher {
            dispatchKeyEvent(arg0: java.awt.event.KeyEvent): boolean
        }
        interface KeyEventDispatcher$$Lambda {
            (arg0: java.awt.event.KeyEvent): boolean
        }
        interface KeyEventPostProcessor {
            postProcessKeyEvent(arg0: java.awt.event.KeyEvent): boolean
        }
        interface KeyEventPostProcessor$$Lambda {
            (arg0: java.awt.event.KeyEvent): boolean
        }
        abstract class KeyboardFocusManager implements java.awt.KeyEventDispatcher , java.awt.KeyEventPostProcessor {
            public static FORWARD_TRAVERSAL_KEYS: int
            public static BACKWARD_TRAVERSAL_KEYS: int
            public static UP_CYCLE_TRAVERSAL_KEYS: int
            public static DOWN_CYCLE_TRAVERSAL_KEYS: int
            public static getCurrentKeyboardFocusManager(): java.awt.KeyboardFocusManager
            public static setCurrentKeyboardFocusManager(arg0: java.awt.KeyboardFocusManager | java.awt.KeyboardFocusManager$$Lambda): void
            public constructor()
            public getFocusOwner(): java.awt.Component
            protected getGlobalFocusOwner(): java.awt.Component
            protected setGlobalFocusOwner(arg0: java.awt.Component): void
            public clearFocusOwner(): void
            public clearGlobalFocusOwner(): void
            public getPermanentFocusOwner(): java.awt.Component
            protected getGlobalPermanentFocusOwner(): java.awt.Component
            protected setGlobalPermanentFocusOwner(arg0: java.awt.Component): void
            public getFocusedWindow(): java.awt.Window
            protected getGlobalFocusedWindow(): java.awt.Window
            protected setGlobalFocusedWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public getActiveWindow(): java.awt.Window
            protected getGlobalActiveWindow(): java.awt.Window
            protected setGlobalActiveWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public getDefaultFocusTraversalPolicy(): java.awt.FocusTraversalPolicy
            public setDefaultFocusTraversalPolicy(arg0: java.awt.FocusTraversalPolicy): void
            public setDefaultFocusTraversalKeys(arg0: int, arg1: java.util.Set<java.awt.AWTKeyStroke>): void
            public getDefaultFocusTraversalKeys(arg0: int): java.util.Set<java.awt.AWTKeyStroke>
            public getCurrentFocusCycleRoot(): java.awt.Container
            protected getGlobalCurrentFocusCycleRoot(): java.awt.Container
            public setGlobalCurrentFocusCycleRoot(arg0: java.awt.Container): void
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
            public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
            protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public addVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public getVetoableChangeListeners(): java.beans.VetoableChangeListener[]
            public addVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            public getVetoableChangeListeners(arg0: java.lang.String | string): java.beans.VetoableChangeListener[]
            protected fireVetoableChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public addKeyEventDispatcher(arg0: java.awt.KeyEventDispatcher | java.awt.KeyEventDispatcher$$Lambda): void
            public removeKeyEventDispatcher(arg0: java.awt.KeyEventDispatcher | java.awt.KeyEventDispatcher$$Lambda): void
            protected getKeyEventDispatchers(): java.util.List<java.awt.KeyEventDispatcher>
            public addKeyEventPostProcessor(arg0: java.awt.KeyEventPostProcessor | java.awt.KeyEventPostProcessor$$Lambda): void
            public removeKeyEventPostProcessor(arg0: java.awt.KeyEventPostProcessor | java.awt.KeyEventPostProcessor$$Lambda): void
            protected getKeyEventPostProcessors(): java.util.List<java.awt.KeyEventPostProcessor>
            public dispatchEvent(arg0: java.awt.AWTEvent): boolean
            public redispatchEvent(arg0: java.awt.Component, arg1: java.awt.AWTEvent): void
            public dispatchKeyEvent(arg0: java.awt.event.KeyEvent): boolean
            public postProcessKeyEvent(arg0: java.awt.event.KeyEvent): boolean
            public processKeyEvent(arg0: java.awt.Component, arg1: java.awt.event.KeyEvent): void
            protected enqueueKeyEvents(arg0: long, arg1: java.awt.Component): void
            protected dequeueKeyEvents(arg0: long, arg1: java.awt.Component): void
            protected discardKeyEvents(arg0: java.awt.Component): void
            public focusNextComponent(arg0: java.awt.Component): void
            public focusPreviousComponent(arg0: java.awt.Component): void
            public upFocusCycle(arg0: java.awt.Component): void
            public downFocusCycle(arg0: java.awt.Container): void
            public focusNextComponent(): void
            public focusPreviousComponent(): void
            public upFocusCycle(): void
            public downFocusCycle(): void
            public static class: java.lang.Class<any>
        }
        abstract class KeyboardFocusManager$$Lambda implements java.awt.KeyEventDispatcher , java.awt.KeyEventPostProcessor {
            public static FORWARD_TRAVERSAL_KEYS: int
        }
        class Label extends java.awt.Component implements javax.accessibility.Accessible {
            public static LEFT: int
            public static CENTER: int
            public static RIGHT: int
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public addNotify(): void
            public getAlignment(): int
            public setAlignment(arg0: int): void
            public getText(): string
            public setText(arg0: java.lang.String | string): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Label$$Lambda extends java.awt.Component implements javax.accessibility.Accessible {
            public static LEFT: int
        }
        interface LayoutManager {
            addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            removeLayoutComponent(arg0: java.awt.Component): void
            preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            layoutContainer(arg0: java.awt.Container): void
        }
        interface LayoutManager2 extends java.awt.LayoutManager {
            addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            getLayoutAlignmentX(arg0: java.awt.Container): float
            getLayoutAlignmentY(arg0: java.awt.Container): float
            invalidateLayout(arg0: java.awt.Container): void
        }
        class LinearGradientPaint extends java.awt.MultipleGradientPaint {
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float[], arg5: java.awt.Color[])
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float[], arg5: java.awt.Color[], arg6: java.awt.MultipleGradientPaint$CycleMethod)
            public constructor(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D, arg2: float[], arg3: java.awt.Color[])
            public constructor(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D, arg2: float[], arg3: java.awt.Color[], arg4: java.awt.MultipleGradientPaint$CycleMethod)
            public constructor(arg0: java.awt.geom.Point2D, arg1: java.awt.geom.Point2D, arg2: float[], arg3: java.awt.Color[], arg4: java.awt.MultipleGradientPaint$CycleMethod, arg5: java.awt.MultipleGradientPaint$ColorSpaceType, arg6: java.awt.geom.AffineTransform)
            public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.Rectangle, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.RenderingHints): java.awt.PaintContext
            public getStartPoint(): java.awt.geom.Point2D
            public getEndPoint(): java.awt.geom.Point2D
            public static class: java.lang.Class<any>
        }
        class LinearGradientPaintContext extends java.awt.MultipleGradientPaintContext {
            protected fillRaster(arg0: int[], arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
            public static class: java.lang.Class<any>
        }
        class List extends java.awt.Component implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: boolean)
            public addNotify(): void
            public removeNotify(): void
            public getItemCount(): int
            public countItems(): int
            public getItem(arg0: int): string
            public getItems(): java.lang.String[]
            public add(arg0: java.lang.String | string): void
            public addItem(arg0: java.lang.String | string): void
            public add(arg0: java.lang.String | string, arg1: int): void
            public addItem(arg0: java.lang.String | string, arg1: int): void
            public replaceItem(arg0: java.lang.String | string, arg1: int): void
            public removeAll(): void
            public clear(): void
            public remove(arg0: java.lang.String | string): void
            public remove(arg0: int): void
            public delItem(arg0: int): void
            public getSelectedIndex(): int
            public getSelectedIndexes(): int[]
            public getSelectedItem(): string
            public getSelectedItems(): java.lang.String[]
            public getSelectedObjects(): java.lang.Object[]
            public select(arg0: int): void
            public deselect(arg0: int): void
            public isIndexSelected(arg0: int): boolean
            public isSelected(arg0: int): boolean
            public getRows(): int
            public isMultipleMode(): boolean
            public allowsMultipleSelections(): boolean
            public setMultipleMode(arg0: boolean): void
            public setMultipleSelections(arg0: boolean): void
            public getVisibleIndex(): int
            public makeVisible(arg0: int): void
            public getPreferredSize(arg0: int): java.awt.Dimension
            public preferredSize(arg0: int): java.awt.Dimension
            public getPreferredSize(): java.awt.Dimension
            public preferredSize(): java.awt.Dimension
            public getMinimumSize(arg0: int): java.awt.Dimension
            public minimumSize(arg0: int): java.awt.Dimension
            public getMinimumSize(): java.awt.Dimension
            public minimumSize(): java.awt.Dimension
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processItemEvent<T extends java.util.EventListener>(arg0: java.awt.event.ItemEvent): void
            protected processActionEvent<T extends java.util.EventListener>(arg0: java.awt.event.ActionEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public delItems<T extends java.util.EventListener>(arg0: int, arg1: int): void
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class List$$Lambda extends java.awt.Component implements java.awt.ItemSelectable , javax.accessibility.Accessible {
            public constructor()
        }
        class MediaTracker implements java.io.Serializable {
            public static LOADING: int
            public static ABORTED: int
            public static ERRORED: int
            public static COMPLETE: int
            public constructor(arg0: java.awt.Component)
            public addImage(arg0: java.awt.Image, arg1: int): void
            public addImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int): void
            public checkAll(): boolean
            public checkAll(arg0: boolean): boolean
            public isErrorAny(): boolean
            public getErrorsAny(): java.lang.Object[]
            public waitForAll(): void
            public waitForAll(arg0: long): boolean
            public statusAll(arg0: boolean): int
            public checkID(arg0: int): boolean
            public checkID(arg0: int, arg1: boolean): boolean
            public isErrorID(arg0: int): boolean
            public getErrorsID(arg0: int): java.lang.Object[]
            public waitForID(arg0: int): void
            public waitForID(arg0: int, arg1: long): boolean
            public statusID(arg0: int, arg1: boolean): int
            public removeImage(arg0: java.awt.Image): void
            public removeImage(arg0: java.awt.Image, arg1: int): void
            public removeImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int): void
            public static class: java.lang.Class<any>
        }
        class Menu extends java.awt.MenuItem implements java.awt.MenuContainer , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public addNotify(): void
            public removeNotify(): void
            public isTearOff(): boolean
            public getItemCount(): int
            public countItems(): int
            public getItem(arg0: int): java.awt.MenuItem
            public add(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): java.awt.MenuItem
            public add(arg0: java.lang.String | string): void
            public insert(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda, arg1: int): void
            public insert(arg0: java.lang.String | string, arg1: int): void
            public addSeparator(): void
            public insertSeparator(arg0: int): void
            public remove(arg0: int): void
            public remove(arg0: java.awt.MenuComponent): void
            public removeAll(): void
            public paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Menu$$Lambda extends java.awt.MenuItem implements java.awt.MenuContainer , javax.accessibility.Accessible {
            public constructor()
        }
        class MenuBar extends java.awt.MenuComponent implements java.awt.MenuContainer , javax.accessibility.Accessible {
            public constructor()
            public addNotify(): void
            public removeNotify(): void
            public getHelpMenu(): java.awt.Menu
            public setHelpMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): void
            public add(arg0: java.awt.Menu | java.awt.Menu$$Lambda): java.awt.Menu
            public remove(arg0: int): void
            public remove(arg0: java.awt.MenuComponent): void
            public getMenuCount(): int
            public countMenus(): int
            public getMenu(arg0: int): java.awt.Menu
            public shortcuts(): java.util.Enumeration<java.awt.MenuShortcut>
            public getShortcutMenuItem(arg0: java.awt.MenuShortcut): java.awt.MenuItem
            public deleteShortcut(arg0: java.awt.MenuShortcut): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class MenuBar$$Lambda extends java.awt.MenuComponent implements java.awt.MenuContainer , javax.accessibility.Accessible {
            public constructor()
        }
        abstract class MenuComponent implements java.io.Serializable {
            public constructor()
            public getName(): string
            public setName(arg0: java.lang.String | string): void
            public getParent(): java.awt.MenuContainer
            public getPeer(): java.awt.peer.MenuComponentPeer
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public removeNotify(): void
            public postEvent(arg0: java.awt.Event): boolean
            public dispatchEvent(arg0: java.awt.AWTEvent): void
            protected processEvent(arg0: java.awt.AWTEvent): void
            protected paramString(): string
            public toString(): string
            protected getTreeLock(): java.lang.Object
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        interface MenuContainer {
            getFont(): java.awt.Font
            remove(arg0: java.awt.MenuComponent): void
            postEvent(arg0: java.awt.Event): boolean
        }
        class MenuItem extends java.awt.MenuComponent implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.awt.MenuShortcut)
            public addNotify(): void
            public getLabel(): string
            public setLabel(arg0: java.lang.String | string): void
            public isEnabled(): boolean
            public setEnabled(arg0: boolean): void
            public enable(): void
            public enable(arg0: boolean): void
            public disable(): void
            public getShortcut(): java.awt.MenuShortcut
            public setShortcut(arg0: java.awt.MenuShortcut): void
            public deleteShortcut(): void
            protected enableEvents(arg0: long): void
            protected disableEvents(arg0: long): void
            public setActionCommand(arg0: java.lang.String | string): void
            public getActionCommand(): string
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processActionEvent<T extends java.util.EventListener>(arg0: java.awt.event.ActionEvent): void
            public paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class MenuItem$$Lambda extends java.awt.MenuComponent implements javax.accessibility.Accessible {
            public constructor()
        }
        class MenuShortcut implements java.io.Serializable {
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: boolean)
            public getKey(): int
            public usesShiftModifier(): boolean
            public equals(arg0: java.awt.MenuShortcut): boolean
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public toString(): string
            protected paramString(): string
            public static class: java.lang.Class<any>
        }
        abstract class ModalEventFilter implements java.awt.EventFilter {
            protected modalDialog: java.awt.Dialog
            protected disabled: boolean
            protected constructor(arg0: java.awt.Dialog)
            public acceptEvent(arg0: java.awt.AWTEvent): java.awt.EventFilter$FilterAction
            protected acceptWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.EventFilter$FilterAction
            public static class: java.lang.Class<any>
        }
        abstract class ModalEventFilter$$Lambda implements java.awt.EventFilter {
            protected modalDialog: java.awt.Dialog
        }
        class MouseInfo {
            public static getPointerInfo(): java.awt.PointerInfo
            public static getNumberOfButtons(): int
            public static class: java.lang.Class<any>
        }
        abstract class MultipleGradientPaint implements java.awt.Paint {
            public getFractions(): float[]
            public getColors(): java.awt.Color[]
            public getCycleMethod(): java.awt.MultipleGradientPaint$CycleMethod
            public getColorSpace(): java.awt.MultipleGradientPaint$ColorSpaceType
            public getTransform(): java.awt.geom.AffineTransform
            public getTransparency(): int
            public static class: java.lang.Class<any>
        }
        abstract class MultipleGradientPaintContext implements java.awt.PaintContext {
            protected model: java.awt.image.ColorModel
            protected static cachedModel: java.awt.image.ColorModel
            protected static cached: java.lang.ref.WeakReference<java.awt.image.Raster>
            protected saved: java.awt.image.Raster
            protected cycleMethod: java.awt.MultipleGradientPaint$CycleMethod
            protected colorSpace: java.awt.MultipleGradientPaint$ColorSpaceType
            protected a00: float
            protected a01: float
            protected a10: float
            protected a11: float
            protected a02: float
            protected a12: float
            protected isSimpleLookup: boolean
            protected fastGradientArraySize: int
            protected gradient: int[]
            protected static GRADIENT_SIZE: int
            protected static GRADIENT_SIZE_INDEX: int
            protected constructor(arg0: java.awt.MultipleGradientPaint, arg1: java.awt.image.ColorModel, arg2: java.awt.Rectangle, arg3: java.awt.geom.Rectangle2D, arg4: java.awt.geom.AffineTransform, arg5: java.awt.RenderingHints, arg6: float[], arg7: java.awt.Color[], arg8: java.awt.MultipleGradientPaint$CycleMethod, arg9: java.awt.MultipleGradientPaint$ColorSpaceType)
            protected indexIntoGradientsArrays(arg0: float): int
            public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
            protected fillRaster(arg0: int[], arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
            public dispose(): void
            public getColorModel(): java.awt.image.ColorModel
            public static class: java.lang.Class<any>
        }
        class PageAttributes implements java.lang.Cloneable {
            public constructor()
            public constructor(arg0: java.awt.PageAttributes)
            public constructor(arg0: java.awt.PageAttributes$ColorType, arg1: java.awt.PageAttributes$MediaType, arg2: java.awt.PageAttributes$OrientationRequestedType, arg3: java.awt.PageAttributes$OriginType, arg4: java.awt.PageAttributes$PrintQualityType, arg5: int[])
            public clone(): java.lang.Object
            public set(arg0: java.awt.PageAttributes): void
            public getColor(): java.awt.PageAttributes$ColorType
            public setColor(arg0: java.awt.PageAttributes$ColorType): void
            public getMedia(): java.awt.PageAttributes$MediaType
            public setMedia(arg0: java.awt.PageAttributes$MediaType): void
            public setMediaToDefault(): void
            public getOrientationRequested(): java.awt.PageAttributes$OrientationRequestedType
            public setOrientationRequested(arg0: java.awt.PageAttributes$OrientationRequestedType): void
            public setOrientationRequested(arg0: int): void
            public setOrientationRequestedToDefault(): void
            public getOrigin(): java.awt.PageAttributes$OriginType
            public setOrigin(arg0: java.awt.PageAttributes$OriginType): void
            public getPrintQuality(): java.awt.PageAttributes$PrintQualityType
            public setPrintQuality(arg0: java.awt.PageAttributes$PrintQualityType): void
            public setPrintQuality(arg0: int): void
            public setPrintQualityToDefault(): void
            public getPrinterResolution(): int[]
            public setPrinterResolution(arg0: int[]): void
            public setPrinterResolution(arg0: int): void
            public setPrinterResolutionToDefault(): void
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface Paint extends java.awt.Transparency {
            createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.Rectangle, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.RenderingHints): java.awt.PaintContext
        }
        interface PaintContext {
            dispose(): void
            getColorModel(): java.awt.image.ColorModel
            getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
        }
        class Panel extends java.awt.Container implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: java.awt.LayoutManager)
            public addNotify(): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Panel$$Lambda extends java.awt.Container implements javax.accessibility.Accessible {
            public constructor()
        }
        class Point extends java.awt.geom.Point2D implements java.io.Serializable {
            public x: int
            public y: int
            public constructor()
            public constructor(arg0: java.awt.Point)
            public constructor(arg0: int, arg1: int)
            public getX(): double
            public getY(): double
            public getLocation(): java.awt.Point
            public setLocation(arg0: java.awt.Point): void
            public setLocation(arg0: int, arg1: int): void
            public setLocation(arg0: double, arg1: double): void
            public move(arg0: int, arg1: int): void
            public translate(arg0: int, arg1: int): void
            public equals(arg0: java.lang.Object): boolean
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class PointerInfo {
            public getDevice(): java.awt.GraphicsDevice
            public getLocation(): java.awt.Point
            public static class: java.lang.Class<any>
        }
        class Polygon implements java.awt.Shape , java.io.Serializable {
            public npoints: int
            public xpoints: int[]
            public ypoints: int[]
            protected bounds: java.awt.Rectangle
            public constructor()
            public constructor(arg0: int[], arg1: int[], arg2: int)
            public reset(): void
            public invalidate(): void
            public translate(arg0: int, arg1: int): void
            public addPoint(arg0: int, arg1: int): void
            public getBounds(): java.awt.Rectangle
            public getBoundingBox(): java.awt.Rectangle
            public contains(arg0: java.awt.Point): boolean
            public contains(arg0: int, arg1: int): boolean
            public inside(arg0: int, arg1: int): boolean
            public getBounds2D(): java.awt.geom.Rectangle2D
            public contains(arg0: double, arg1: double): boolean
            public contains(arg0: java.awt.geom.Point2D): boolean
            public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
            public intersects(arg0: java.awt.geom.Rectangle2D): boolean
            public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
            public contains(arg0: java.awt.geom.Rectangle2D): boolean
            public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
            public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
            public static class: java.lang.Class<any>
        }
        class PopupMenu extends java.awt.Menu {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public getParent(): java.awt.MenuContainer
            public addNotify(): void
            public show(arg0: java.awt.Component, arg1: int, arg2: int): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        interface PrintGraphics {
            getPrintJob(): java.awt.PrintJob
        }
        interface PrintGraphics$$Lambda {
            (): java.awt.PrintJob
        }
        abstract class PrintJob {
            public constructor()
            public getGraphics(): java.awt.Graphics
            public getPageDimension(): java.awt.Dimension
            public getPageResolution(): int
            public lastPageFirst(): boolean
            public end(): void
            public finalize(): void
            public static class: java.lang.Class<any>
        }
        class RadialGradientPaint extends java.awt.MultipleGradientPaint {
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float[], arg4: java.awt.Color[])
            public constructor(arg0: java.awt.geom.Point2D, arg1: float, arg2: float[], arg3: java.awt.Color[])
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float[], arg4: java.awt.Color[], arg5: java.awt.MultipleGradientPaint$CycleMethod)
            public constructor(arg0: java.awt.geom.Point2D, arg1: float, arg2: float[], arg3: java.awt.Color[], arg4: java.awt.MultipleGradientPaint$CycleMethod)
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float[], arg6: java.awt.Color[], arg7: java.awt.MultipleGradientPaint$CycleMethod)
            public constructor(arg0: java.awt.geom.Point2D, arg1: float, arg2: java.awt.geom.Point2D, arg3: float[], arg4: java.awt.Color[], arg5: java.awt.MultipleGradientPaint$CycleMethod)
            public constructor(arg0: java.awt.geom.Point2D, arg1: float, arg2: java.awt.geom.Point2D, arg3: float[], arg4: java.awt.Color[], arg5: java.awt.MultipleGradientPaint$CycleMethod, arg6: java.awt.MultipleGradientPaint$ColorSpaceType, arg7: java.awt.geom.AffineTransform)
            public constructor(arg0: java.awt.geom.Rectangle2D, arg1: float[], arg2: java.awt.Color[], arg3: java.awt.MultipleGradientPaint$CycleMethod)
            public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.Rectangle, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.RenderingHints): java.awt.PaintContext
            public getCenterPoint(): java.awt.geom.Point2D
            public getFocusPoint(): java.awt.geom.Point2D
            public getRadius(): float
            public static class: java.lang.Class<any>
        }
        class RadialGradientPaintContext extends java.awt.MultipleGradientPaintContext {
            protected fillRaster(arg0: int[], arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
            public static class: java.lang.Class<any>
        }
        class Rectangle extends java.awt.geom.Rectangle2D implements java.awt.Shape , java.io.Serializable {
            public x: int
            public y: int
            public width: int
            public height: int
            public constructor()
            public constructor(arg0: java.awt.Rectangle)
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: java.awt.Point, arg1: java.awt.Dimension)
            public constructor(arg0: java.awt.Point)
            public constructor(arg0: java.awt.Dimension)
            public getX(): double
            public getY(): double
            public getWidth(): double
            public getHeight(): double
            public getBounds(): java.awt.Rectangle
            public getBounds2D(): java.awt.geom.Rectangle2D
            public setBounds(arg0: java.awt.Rectangle): void
            public setBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setRect(arg0: double, arg1: double, arg2: double, arg3: double): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getLocation(): java.awt.Point
            public setLocation(arg0: java.awt.Point): void
            public setLocation(arg0: int, arg1: int): void
            public move(arg0: int, arg1: int): void
            public translate(arg0: int, arg1: int): void
            public getSize(): java.awt.Dimension
            public setSize(arg0: java.awt.Dimension): void
            public setSize(arg0: int, arg1: int): void
            public resize(arg0: int, arg1: int): void
            public contains(arg0: java.awt.Point): boolean
            public contains(arg0: int, arg1: int): boolean
            public contains(arg0: java.awt.Rectangle): boolean
            public contains(arg0: int, arg1: int, arg2: int, arg3: int): boolean
            public inside(arg0: int, arg1: int): boolean
            public intersects(arg0: java.awt.Rectangle): boolean
            public intersection(arg0: java.awt.Rectangle): java.awt.Rectangle
            public union(arg0: java.awt.Rectangle): java.awt.Rectangle
            public add(arg0: int, arg1: int): void
            public add(arg0: java.awt.Point): void
            public add(arg0: java.awt.Rectangle): void
            public grow(arg0: int, arg1: int): void
            public isEmpty(): boolean
            public outcode(arg0: double, arg1: double): int
            public createIntersection(arg0: java.awt.geom.Rectangle2D): java.awt.geom.Rectangle2D
            public createUnion(arg0: java.awt.geom.Rectangle2D): java.awt.geom.Rectangle2D
            public equals(arg0: java.lang.Object): boolean
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class RenderingHints implements java.util.Map<java.lang.Object, java.lang.Object> , java.lang.Cloneable {
            public static KEY_ANTIALIASING: java.awt.RenderingHints$Key
            public static VALUE_ANTIALIAS_ON: java.lang.Object
            public static VALUE_ANTIALIAS_OFF: java.lang.Object
            public static VALUE_ANTIALIAS_DEFAULT: java.lang.Object
            public static KEY_RENDERING: java.awt.RenderingHints$Key
            public static VALUE_RENDER_SPEED: java.lang.Object
            public static VALUE_RENDER_QUALITY: java.lang.Object
            public static VALUE_RENDER_DEFAULT: java.lang.Object
            public static KEY_DITHERING: java.awt.RenderingHints$Key
            public static VALUE_DITHER_DISABLE: java.lang.Object
            public static VALUE_DITHER_ENABLE: java.lang.Object
            public static VALUE_DITHER_DEFAULT: java.lang.Object
            public static KEY_TEXT_ANTIALIASING: java.awt.RenderingHints$Key
            public static VALUE_TEXT_ANTIALIAS_ON: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_OFF: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_DEFAULT: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_GASP: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_HRGB: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_HBGR: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_VRGB: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_VBGR: java.lang.Object
            public static KEY_TEXT_LCD_CONTRAST: java.awt.RenderingHints$Key
            public static KEY_FRACTIONALMETRICS: java.awt.RenderingHints$Key
            public static VALUE_FRACTIONALMETRICS_OFF: java.lang.Object
            public static VALUE_FRACTIONALMETRICS_ON: java.lang.Object
            public static VALUE_FRACTIONALMETRICS_DEFAULT: java.lang.Object
            public static KEY_INTERPOLATION: java.awt.RenderingHints$Key
            public static VALUE_INTERPOLATION_NEAREST_NEIGHBOR: java.lang.Object
            public static VALUE_INTERPOLATION_BILINEAR: java.lang.Object
            public static VALUE_INTERPOLATION_BICUBIC: java.lang.Object
            public static KEY_ALPHA_INTERPOLATION: java.awt.RenderingHints$Key
            public static VALUE_ALPHA_INTERPOLATION_SPEED: java.lang.Object
            public static VALUE_ALPHA_INTERPOLATION_QUALITY: java.lang.Object
            public static VALUE_ALPHA_INTERPOLATION_DEFAULT: java.lang.Object
            public static KEY_COLOR_RENDERING: java.awt.RenderingHints$Key
            public static VALUE_COLOR_RENDER_SPEED: java.lang.Object
            public static VALUE_COLOR_RENDER_QUALITY: java.lang.Object
            public static VALUE_COLOR_RENDER_DEFAULT: java.lang.Object
            public static KEY_STROKE_CONTROL: java.awt.RenderingHints$Key
            public static VALUE_STROKE_DEFAULT: java.lang.Object
            public static VALUE_STROKE_NORMALIZE: java.lang.Object
            public static VALUE_STROKE_PURE: java.lang.Object
            public constructor(arg0: java.util.Map<java.awt.RenderingHints$Key, any>)
            public constructor(arg0: java.awt.RenderingHints$Key, arg1: java.lang.Object)
            public size(): int
            public isEmpty(): boolean
            public containsKey(arg0: java.lang.Object): boolean
            public containsValue(arg0: java.lang.Object): boolean
            public get(arg0: java.lang.Object): java.lang.Object
            public put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
            public add(arg0: java.awt.RenderingHints): void
            public clear(): void
            public remove(arg0: java.lang.Object): java.lang.Object
            public putAll(arg0: java.util.Map<any, any>): void
            public keySet(): java.util.Set<java.lang.Object>
            public values(): java.util.Collection<java.lang.Object>
            public entrySet(): java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>>
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public clone(): java.lang.Object
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class Robot {
            public constructor()
            public constructor(arg0: java.awt.GraphicsDevice)
            public mouseMove(arg0: int, arg1: int): void
            public mousePress(arg0: int): void
            public mouseRelease(arg0: int): void
            public mouseWheel(arg0: int): void
            public keyPress(arg0: int): void
            public keyRelease(arg0: int): void
            public getPixelColor(arg0: int, arg1: int): java.awt.Color
            public createScreenCapture(arg0: java.awt.Rectangle): java.awt.image.BufferedImage
            public isAutoWaitForIdle(): boolean
            public setAutoWaitForIdle(arg0: boolean): void
            public getAutoDelay(): int
            public setAutoDelay(arg0: int): void
            public delay(arg0: int): void
            public waitForIdle(): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class ScrollPane extends java.awt.Container implements javax.accessibility.Accessible {
            public static SCROLLBARS_AS_NEEDED: int
            public static SCROLLBARS_ALWAYS: int
            public static SCROLLBARS_NEVER: int
            public constructor()
            public constructor(arg0: int)
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public getScrollbarDisplayPolicy(): int
            public getViewportSize(): java.awt.Dimension
            public getHScrollbarHeight(): int
            public getVScrollbarWidth(): int
            public getVAdjustable(): java.awt.Adjustable
            public getHAdjustable(): java.awt.Adjustable
            public setScrollPosition(arg0: int, arg1: int): void
            public setScrollPosition(arg0: java.awt.Point): void
            public getScrollPosition(): java.awt.Point
            public setLayout(arg0: java.awt.LayoutManager): void
            public doLayout(): void
            public layout(): void
            public printComponents(arg0: java.awt.Graphics): void
            public addNotify(): void
            public paramString(): string
            protected processMouseWheelEvent(arg0: java.awt.event.MouseWheelEvent): void
            protected eventTypeEnabled(arg0: int): boolean
            public setWheelScrollingEnabled(arg0: boolean): void
            public isWheelScrollingEnabled(): boolean
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class ScrollPane$$Lambda extends java.awt.Container implements javax.accessibility.Accessible {
            public static SCROLLBARS_AS_NEEDED: int
        }
        class ScrollPaneAdjustable implements java.awt.Adjustable , java.io.Serializable {
            public getOrientation(): int
            public setMinimum(arg0: int): void
            public getMinimum(): int
            public setMaximum(arg0: int): void
            public getMaximum(): int
            public setUnitIncrement(arg0: int): void
            public getUnitIncrement(): int
            public setBlockIncrement(arg0: int): void
            public getBlockIncrement(): int
            public setVisibleAmount(arg0: int): void
            public getVisibleAmount(): int
            public setValueIsAdjusting(arg0: boolean): void
            public getValueIsAdjusting(): boolean
            public setValue(arg0: int): void
            public getValue(): int
            public addAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            public removeAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            public getAdjustmentListeners(): java.awt.event.AdjustmentListener[]
            public toString(): string
            public paramString(): string
            public static class: java.lang.Class<any>
        }
        class Scrollbar extends java.awt.Component implements java.awt.Adjustable , javax.accessibility.Accessible {
            public static HORIZONTAL: int
            public static VERTICAL: int
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int)
            public addNotify(): void
            public getOrientation(): int
            public setOrientation(arg0: int): void
            public getValue(): int
            public setValue(arg0: int): void
            public getMinimum(): int
            public setMinimum(arg0: int): void
            public getMaximum(): int
            public setMaximum(arg0: int): void
            public getVisibleAmount(): int
            public getVisible(): int
            public setVisibleAmount(arg0: int): void
            public setUnitIncrement(arg0: int): void
            public setLineIncrement(arg0: int): void
            public getUnitIncrement(): int
            public getLineIncrement(): int
            public setBlockIncrement(arg0: int): void
            public setPageIncrement(arg0: int): void
            public getBlockIncrement(): int
            public getPageIncrement(): int
            public setValues(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getValueIsAdjusting(): boolean
            public setValueIsAdjusting(arg0: boolean): void
            public addAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            public removeAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            public getAdjustmentListeners(): java.awt.event.AdjustmentListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processAdjustmentEvent<T extends java.util.EventListener>(arg0: java.awt.event.AdjustmentEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Scrollbar$$Lambda extends java.awt.Component implements java.awt.Adjustable , javax.accessibility.Accessible {
            public static HORIZONTAL: int
        }
        interface SecondaryLoop {
            enter(): boolean
            exit(): boolean
        }
        class SentEvent extends java.awt.AWTEvent implements java.awt.ActiveEvent {
            public dispatch(): void
            public static class: java.lang.Class<any>
        }
        class SentEvent$$Lambda extends java.awt.AWTEvent implements java.awt.ActiveEvent {
            public (): void
        }
        class SequencedEvent extends java.awt.AWTEvent implements java.awt.ActiveEvent {
            public constructor(arg0: java.awt.AWTEvent)
            public dispatch(): void
            public isFirstOrDisposed(): boolean
            public static class: java.lang.Class<any>
        }
        class SequencedEvent$$Lambda extends java.awt.AWTEvent implements java.awt.ActiveEvent {
            public constructor(arg0: java.awt.AWTEvent)
        }
        interface Shape {
            getBounds(): java.awt.Rectangle
            getBounds2D(): java.awt.geom.Rectangle2D
            contains(arg0: double, arg1: double): boolean
            contains(arg0: java.awt.geom.Point2D): boolean
            intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
            intersects(arg0: java.awt.geom.Rectangle2D): boolean
            contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
            contains(arg0: java.awt.geom.Rectangle2D): boolean
            getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
            getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
        }
        class SplashScreen {
            public static getSplashScreen(): java.awt.SplashScreen
            public setImageURL(arg0: java.net.URL): void
            public getImageURL(): java.net.URL
            public getBounds(): java.awt.Rectangle
            public getSize(): java.awt.Dimension
            public createGraphics(): java.awt.Graphics2D
            public update(): void
            public close(): void
            public isVisible(): boolean
            public static class: java.lang.Class<any>
        }
        interface Stroke {
            createStrokedShape(arg0: java.awt.Shape): java.awt.Shape
        }
        interface Stroke$$Lambda {
            (arg0: java.awt.Shape): java.awt.Shape
        }
        class SystemColor extends java.awt.Color implements java.io.Serializable {
            public static DESKTOP: int
            public static ACTIVE_CAPTION: int
            public static ACTIVE_CAPTION_TEXT: int
            public static ACTIVE_CAPTION_BORDER: int
            public static INACTIVE_CAPTION: int
            public static INACTIVE_CAPTION_TEXT: int
            public static INACTIVE_CAPTION_BORDER: int
            public static WINDOW: int
            public static WINDOW_BORDER: int
            public static WINDOW_TEXT: int
            public static MENU: int
            public static MENU_TEXT: int
            public static TEXT: int
            public static TEXT_TEXT: int
            public static TEXT_HIGHLIGHT: int
            public static TEXT_HIGHLIGHT_TEXT: int
            public static TEXT_INACTIVE_TEXT: int
            public static CONTROL: int
            public static CONTROL_TEXT: int
            public static CONTROL_HIGHLIGHT: int
            public static CONTROL_LT_HIGHLIGHT: int
            public static CONTROL_SHADOW: int
            public static CONTROL_DK_SHADOW: int
            public static SCROLLBAR: int
            public static INFO: int
            public static INFO_TEXT: int
            public static NUM_COLORS: int
            public static desktop: java.awt.SystemColor
            public static activeCaption: java.awt.SystemColor
            public static activeCaptionText: java.awt.SystemColor
            public static activeCaptionBorder: java.awt.SystemColor
            public static inactiveCaption: java.awt.SystemColor
            public static inactiveCaptionText: java.awt.SystemColor
            public static inactiveCaptionBorder: java.awt.SystemColor
            public static window: java.awt.SystemColor
            public static windowBorder: java.awt.SystemColor
            public static windowText: java.awt.SystemColor
            public static menu: java.awt.SystemColor
            public static menuText: java.awt.SystemColor
            public static text: java.awt.SystemColor
            public static textText: java.awt.SystemColor
            public static textHighlight: java.awt.SystemColor
            public static textHighlightText: java.awt.SystemColor
            public static textInactiveText: java.awt.SystemColor
            public static control: java.awt.SystemColor
            public static controlText: java.awt.SystemColor
            public static controlHighlight: java.awt.SystemColor
            public static controlLtHighlight: java.awt.SystemColor
            public static controlShadow: java.awt.SystemColor
            public static controlDkShadow: java.awt.SystemColor
            public static scrollbar: java.awt.SystemColor
            public static info: java.awt.SystemColor
            public static infoText: java.awt.SystemColor
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class SystemTray {
            public static getSystemTray(): java.awt.SystemTray
            public static isSupported(): boolean
            public add(arg0: java.awt.TrayIcon): void
            public remove(arg0: java.awt.TrayIcon): void
            public getTrayIcons(): java.awt.TrayIcon[]
            public getTrayIconSize(): java.awt.Dimension
            public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
            public static class: java.lang.Class<any>
        }
        class TextArea extends java.awt.TextComponent {
            public static SCROLLBARS_BOTH: int
            public static SCROLLBARS_VERTICAL_ONLY: int
            public static SCROLLBARS_HORIZONTAL_ONLY: int
            public static SCROLLBARS_NONE: int
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: java.lang.String | string, arg1: int, arg2: int)
            public constructor(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: int)
            public addNotify(): void
            public insert(arg0: java.lang.String | string, arg1: int): void
            public insertText(arg0: java.lang.String | string, arg1: int): void
            public append(arg0: java.lang.String | string): void
            public appendText(arg0: java.lang.String | string): void
            public replaceRange(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public replaceText(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public getRows(): int
            public setRows(arg0: int): void
            public getColumns(): int
            public setColumns(arg0: int): void
            public getScrollbarVisibility(): int
            public getPreferredSize(arg0: int, arg1: int): java.awt.Dimension
            public preferredSize(arg0: int, arg1: int): java.awt.Dimension
            public getPreferredSize(): java.awt.Dimension
            public preferredSize(): java.awt.Dimension
            public getMinimumSize(arg0: int, arg1: int): java.awt.Dimension
            public minimumSize(arg0: int, arg1: int): java.awt.Dimension
            public getMinimumSize(): java.awt.Dimension
            public minimumSize(): java.awt.Dimension
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class TextComponent extends java.awt.Component implements javax.accessibility.Accessible {
            protected textListener: java.awt.event.TextListener
            public enableInputMethods(arg0: boolean): void
            public getInputMethodRequests(): java.awt.im.InputMethodRequests
            public addNotify(): void
            public removeNotify(): void
            public setText(arg0: java.lang.String | string): void
            public getText(): string
            public getSelectedText(): string
            public isEditable(): boolean
            public setEditable(arg0: boolean): void
            public getBackground(): java.awt.Color
            public setBackground(arg0: java.awt.Color): void
            public getSelectionStart(): int
            public setSelectionStart(arg0: int): void
            public getSelectionEnd(): int
            public setSelectionEnd(arg0: int): void
            public select(arg0: int, arg1: int): void
            public selectAll(): void
            public setCaretPosition(arg0: int): void
            public getCaretPosition(): int
            public addTextListener(arg0: java.awt.event.TextListener): void
            public removeTextListener(arg0: java.awt.event.TextListener): void
            public getTextListeners(): java.awt.event.TextListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processTextEvent<T extends java.util.EventListener>(arg0: java.awt.event.TextEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class TextComponent$$Lambda extends java.awt.Component implements javax.accessibility.Accessible {
            protected textListener: java.awt.event.TextListener
        }
        class TextField extends java.awt.TextComponent {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: int)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public addNotify(): void
            public getEchoChar(): char
            public setEchoChar(arg0: char): void
            public setEchoCharacter(arg0: char): void
            public setText(arg0: java.lang.String | string): void
            public echoCharIsSet(): boolean
            public getColumns(): int
            public setColumns(arg0: int): void
            public getPreferredSize(arg0: int): java.awt.Dimension
            public preferredSize(arg0: int): java.awt.Dimension
            public getPreferredSize(): java.awt.Dimension
            public preferredSize(): java.awt.Dimension
            public getMinimumSize(arg0: int): java.awt.Dimension
            public minimumSize(arg0: int): java.awt.Dimension
            public getMinimumSize(): java.awt.Dimension
            public minimumSize(): java.awt.Dimension
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processActionEvent<T extends java.util.EventListener>(arg0: java.awt.event.ActionEvent): void
            protected paramString<T extends java.util.EventListener>(): string
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class TexturePaint implements java.awt.Paint {
            public constructor(arg0: java.awt.image.BufferedImage, arg1: java.awt.geom.Rectangle2D)
            public getImage(): java.awt.image.BufferedImage
            public getAnchorRect(): java.awt.geom.Rectangle2D
            public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.Rectangle, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.geom.AffineTransform, arg4: java.awt.RenderingHints): java.awt.PaintContext
            public getTransparency(): int
            public static class: java.lang.Class<any>
        }
        abstract class TexturePaintContext implements java.awt.PaintContext {
            public static xrgbmodel: java.awt.image.ColorModel
            public static argbmodel: java.awt.image.ColorModel
            public static getContext(arg0: java.awt.image.BufferedImage, arg1: java.awt.geom.AffineTransform, arg2: java.awt.RenderingHints, arg3: java.awt.Rectangle): java.awt.PaintContext
            public static isFilterableICM(arg0: java.awt.image.ColorModel): boolean
            public static isFilterableDCM(arg0: java.awt.image.ColorModel): boolean
            public static isMaskOK(arg0: int, arg1: boolean): boolean
            public static getInternedColorModel(arg0: java.awt.image.ColorModel): java.awt.image.ColorModel
            public dispose(): void
            public getColorModel(): java.awt.image.ColorModel
            public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
            public makeRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
            public setRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int): void
            public static blend(arg0: int[], arg1: int, arg2: int): int
            public static class: java.lang.Class<any>
        }
        abstract class Toolkit {
            protected desktopProperties: java.util.Map<java.lang.String, java.lang.Object>
            protected desktopPropsSupport: java.beans.PropertyChangeSupport
            public constructor()
            protected createDesktopPeer(arg0: java.awt.Desktop): java.awt.peer.DesktopPeer
            protected createButton(arg0: java.awt.Button | java.awt.Button$$Lambda): java.awt.peer.ButtonPeer
            protected createTextField(arg0: java.awt.TextField): java.awt.peer.TextFieldPeer
            protected createLabel(arg0: java.awt.Label | java.awt.Label$$Lambda): java.awt.peer.LabelPeer
            protected createList(arg0: java.awt.List | java.awt.List$$Lambda): java.awt.peer.ListPeer
            protected createCheckbox(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): java.awt.peer.CheckboxPeer
            protected createScrollbar(arg0: java.awt.Scrollbar | java.awt.Scrollbar$$Lambda): java.awt.peer.ScrollbarPeer
            protected createScrollPane(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda): java.awt.peer.ScrollPanePeer
            protected createTextArea(arg0: java.awt.TextArea): java.awt.peer.TextAreaPeer
            protected createChoice(arg0: java.awt.Choice | java.awt.Choice$$Lambda): java.awt.peer.ChoicePeer
            protected createFrame(arg0: java.awt.Frame): java.awt.peer.FramePeer
            protected createCanvas(arg0: java.awt.Canvas | java.awt.Canvas$$Lambda): java.awt.peer.CanvasPeer
            protected createPanel(arg0: java.awt.Panel | java.awt.Panel$$Lambda): java.awt.peer.PanelPeer
            protected createWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.peer.WindowPeer
            protected createDialog(arg0: java.awt.Dialog): java.awt.peer.DialogPeer
            protected createMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): java.awt.peer.MenuBarPeer
            protected createMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): java.awt.peer.MenuPeer
            protected createPopupMenu(arg0: java.awt.PopupMenu): java.awt.peer.PopupMenuPeer
            protected createMenuItem(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): java.awt.peer.MenuItemPeer
            protected createFileDialog(arg0: java.awt.FileDialog): java.awt.peer.FileDialogPeer
            protected createCheckboxMenuItem(arg0: java.awt.CheckboxMenuItem | java.awt.CheckboxMenuItem$$Lambda): java.awt.peer.CheckboxMenuItemPeer
            protected getMouseInfoPeer(): java.awt.peer.MouseInfoPeer
            protected createComponent(arg0: java.awt.Component): java.awt.peer.LightweightPeer
            protected getFontPeer(arg0: java.lang.String | string, arg1: int): java.awt.peer.FontPeer
            protected loadSystemColors(arg0: int[]): void
            public setDynamicLayout(arg0: boolean): void
            protected isDynamicLayoutSet(): boolean
            public isDynamicLayoutActive(): boolean
            public getScreenSize(): java.awt.Dimension
            public getScreenResolution(): int
            public getScreenInsets(arg0: java.awt.GraphicsConfiguration): java.awt.Insets
            public getColorModel(): java.awt.image.ColorModel
            public getFontList(): java.lang.String[]
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public sync(): void
            public static getDefaultToolkit(): java.awt.Toolkit
            public getImage(arg0: java.lang.String | string): java.awt.Image
            public getImage(arg0: java.net.URL): java.awt.Image
            public createImage(arg0: java.lang.String | string): java.awt.Image
            public createImage(arg0: java.net.URL): java.awt.Image
            public prepareImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public checkImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): int
            public createImage(arg0: java.awt.image.ImageProducer): java.awt.Image
            public createImage(arg0: byte[]): java.awt.Image
            public createImage(arg0: byte[], arg1: int, arg2: int): java.awt.Image
            public getPrintJob(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.util.Properties): java.awt.PrintJob
            public getPrintJob(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.awt.JobAttributes, arg3: java.awt.PageAttributes): java.awt.PrintJob
            public beep(): void
            public getSystemClipboard(): java.awt.datatransfer.Clipboard
            public getSystemSelection(): java.awt.datatransfer.Clipboard
            public getMenuShortcutKeyMask(): int
            public getLockingKeyState(arg0: int): boolean
            public setLockingKeyState(arg0: int, arg1: boolean): void
            protected static getNativeContainer(arg0: java.awt.Component): java.awt.Container
            public createCustomCursor(arg0: java.awt.Image, arg1: java.awt.Point, arg2: java.lang.String | string): java.awt.Cursor
            public getBestCursorSize(arg0: int, arg1: int): java.awt.Dimension
            public getMaximumCursorColors(): int
            public isFrameStateSupported(arg0: int): boolean
            public static getProperty(arg0: java.lang.String | string, arg1: java.lang.String | string): string
            public getSystemEventQueue(): java.awt.EventQueue
            protected getSystemEventQueueImpl(): java.awt.EventQueue
            public createDragSourceContextPeer(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            public createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.dnd.DragSource, arg2: java.awt.Component, arg3: int, arg4: java.awt.dnd.DragGestureListener): T
            public getDesktopProperty<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string): java.lang.Object
            protected setDesktopProperty<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: java.lang.Object): void
            protected lazilyLoadDesktopProperty<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string): java.lang.Object
            protected initializeDesktopProperties<T extends java.awt.dnd.DragGestureRecognizer>(): void
            public addPropertyChangeListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners<T extends java.awt.dnd.DragGestureRecognizer>(): java.beans.PropertyChangeListener[]
            public getPropertyChangeListeners<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
            public isAlwaysOnTopSupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public isModalityTypeSupported<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Dialog$ModalityType): boolean
            public isModalExclusionTypeSupported<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Dialog$ModalExclusionType): boolean
            public addAWTEventListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.event.AWTEventListener, arg1: long): void
            public removeAWTEventListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.event.AWTEventListener): void
            public getAWTEventListeners<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.event.AWTEventListener[]
            public getAWTEventListeners<T extends java.awt.dnd.DragGestureRecognizer>(arg0: long): java.awt.event.AWTEventListener[]
            public mapInputMethodHighlight<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.im.InputMethodHighlight): java.util.Map<java.awt.font.TextAttribute, any>
            public areExtraMouseButtonsEnabled<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public static class: java.lang.Class<any>
        }
        interface Transparency {
            OPAQUE: int
            BITMASK: int
            TRANSLUCENT: int
            getTransparency(): int
        }
        class TrayIcon {
            public constructor(arg0: java.awt.Image)
            public constructor(arg0: java.awt.Image, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Image, arg1: java.lang.String | string, arg2: java.awt.PopupMenu)
            public setImage(arg0: java.awt.Image): void
            public getImage(): java.awt.Image
            public setPopupMenu(arg0: java.awt.PopupMenu): void
            public getPopupMenu(): java.awt.PopupMenu
            public setToolTip(arg0: java.lang.String | string): void
            public getToolTip(): string
            public setImageAutoSize(arg0: boolean): void
            public isImageAutoSize(): boolean
            public addMouseListener(arg0: java.awt.event.MouseListener): void
            public removeMouseListener(arg0: java.awt.event.MouseListener): void
            public getMouseListeners(): java.awt.event.MouseListener[]
            public addMouseMotionListener(arg0: java.awt.event.MouseMotionListener): void
            public removeMouseMotionListener(arg0: java.awt.event.MouseMotionListener): void
            public getMouseMotionListeners(): java.awt.event.MouseMotionListener[]
            public getActionCommand(): string
            public setActionCommand(arg0: java.lang.String | string): void
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            public displayMessage(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.awt.TrayIcon$MessageType): void
            public getSize(): java.awt.Dimension
            public static class: java.lang.Class<any>
        }
        class WaitDispatchSupport implements java.awt.SecondaryLoop {
            public constructor(arg0: java.awt.EventDispatchThread)
            public constructor(arg0: java.awt.EventDispatchThread, arg1: java.awt.Conditional | java.awt.Conditional$$Lambda)
            public constructor(arg0: java.awt.EventDispatchThread, arg1: java.awt.Conditional | java.awt.Conditional$$Lambda, arg2: java.awt.EventFilter | java.awt.EventFilter$$Lambda, arg3: long)
            public enter(): boolean
            public exit(): boolean
            public static class: java.lang.Class<any>
        }
        class Window extends java.awt.Container implements javax.accessibility.Accessible {
            public constructor(arg0: java.awt.Frame)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.awt.GraphicsConfiguration)
            public getIconImages(): java.util.List<java.awt.Image>
            public setIconImages(arg0: java.util.List<java.awt.Image>): void
            public setIconImage(arg0: java.awt.Image): void
            public addNotify(): void
            public removeNotify(): void
            public pack(): void
            public setMinimumSize(arg0: java.awt.Dimension): void
            public setSize(arg0: java.awt.Dimension): void
            public setSize(arg0: int, arg1: int): void
            public setLocation(arg0: int, arg1: int): void
            public setLocation(arg0: java.awt.Point): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setVisible(arg0: boolean): void
            public show(): void
            public hide(): void
            public dispose(): void
            public toFront(): void
            public toBack(): void
            public getToolkit(): java.awt.Toolkit
            public getWarningString(): string
            public getLocale(): java.util.Locale
            public getInputContext(): java.awt.im.InputContext
            public setCursor(arg0: java.awt.Cursor): void
            public getOwner(): java.awt.Window
            public getOwnedWindows(): java.awt.Window[]
            public static getWindows(): java.awt.Window[]
            public static getOwnerlessWindows(): java.awt.Window[]
            public setModalExclusionType(arg0: java.awt.Dialog$ModalExclusionType): void
            public getModalExclusionType(): java.awt.Dialog$ModalExclusionType
            public addWindowListener(arg0: java.awt.event.WindowListener): void
            public addWindowStateListener(arg0: java.awt.event.WindowStateListener): void
            public addWindowFocusListener(arg0: java.awt.event.WindowFocusListener): void
            public removeWindowListener(arg0: java.awt.event.WindowListener): void
            public removeWindowStateListener(arg0: java.awt.event.WindowStateListener): void
            public removeWindowFocusListener(arg0: java.awt.event.WindowFocusListener): void
            public getWindowListeners(): java.awt.event.WindowListener[]
            public getWindowFocusListeners(): java.awt.event.WindowFocusListener[]
            public getWindowStateListeners(): java.awt.event.WindowStateListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            protected processEvent<T extends java.util.EventListener>(arg0: java.awt.AWTEvent): void
            protected processWindowEvent<T extends java.util.EventListener>(arg0: java.awt.event.WindowEvent): void
            protected processWindowFocusEvent<T extends java.util.EventListener>(arg0: java.awt.event.WindowEvent): void
            protected processWindowStateEvent<T extends java.util.EventListener>(arg0: java.awt.event.WindowEvent): void
            public setAlwaysOnTop<T extends java.util.EventListener>(arg0: boolean): void
            public isAlwaysOnTopSupported<T extends java.util.EventListener>(): boolean
            public isAlwaysOnTop<T extends java.util.EventListener>(): boolean
            public getFocusOwner<T extends java.util.EventListener>(): java.awt.Component
            public getMostRecentFocusOwner<T extends java.util.EventListener>(): java.awt.Component
            public isActive<T extends java.util.EventListener>(): boolean
            public isFocused<T extends java.util.EventListener>(): boolean
            public getFocusTraversalKeys<T extends java.util.EventListener>(arg0: int): java.util.Set<java.awt.AWTKeyStroke>
            public setFocusCycleRoot<T extends java.util.EventListener>(arg0: boolean): void
            public isFocusCycleRoot<T extends java.util.EventListener>(): boolean
            public getFocusCycleRootAncestor<T extends java.util.EventListener>(): java.awt.Container
            public isFocusableWindow<T extends java.util.EventListener>(): boolean
            public getFocusableWindowState<T extends java.util.EventListener>(): boolean
            public setFocusableWindowState<T extends java.util.EventListener>(arg0: boolean): void
            public setAutoRequestFocus<T extends java.util.EventListener>(arg0: boolean): void
            public isAutoRequestFocus<T extends java.util.EventListener>(): boolean
            public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeListener): void
            public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public isValidateRoot<T extends java.util.EventListener>(): boolean
            public postEvent<T extends java.util.EventListener>(arg0: java.awt.Event): boolean
            public isShowing<T extends java.util.EventListener>(): boolean
            public applyResourceBundle<T extends java.util.EventListener>(arg0: java.util.ResourceBundle): void
            public applyResourceBundle<T extends java.util.EventListener>(arg0: java.lang.String | string): void
            public setType<T extends java.util.EventListener>(arg0: java.awt.Window$Type): void
            public getType<T extends java.util.EventListener>(): java.awt.Window$Type
            public getAccessibleContext<T extends java.util.EventListener>(): javax.accessibility.AccessibleContext
            public setLocationRelativeTo<T extends java.util.EventListener>(arg0: java.awt.Component): void
            public createBufferStrategy<T extends java.util.EventListener>(arg0: int): void
            public createBufferStrategy<T extends java.util.EventListener>(arg0: int, arg1: java.awt.BufferCapabilities): void
            public getBufferStrategy<T extends java.util.EventListener>(): java.awt.image.BufferStrategy
            public setLocationByPlatform<T extends java.util.EventListener>(arg0: boolean): void
            public isLocationByPlatform<T extends java.util.EventListener>(): boolean
            public setBounds<T extends java.util.EventListener>(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setBounds<T extends java.util.EventListener>(arg0: java.awt.Rectangle): void
            public getOpacity<T extends java.util.EventListener>(): float
            public setOpacity<T extends java.util.EventListener>(arg0: float): void
            public getShape<T extends java.util.EventListener>(): java.awt.Shape
            public setShape<T extends java.util.EventListener>(arg0: java.awt.Shape): void
            public getBackground<T extends java.util.EventListener>(): java.awt.Color
            public setBackground<T extends java.util.EventListener>(arg0: java.awt.Color): void
            public isOpaque<T extends java.util.EventListener>(): boolean
            public paint<T extends java.util.EventListener>(arg0: java.awt.Graphics): void
            public static class: java.lang.Class<any>
        }
        class Window$$Lambda extends java.awt.Container implements javax.accessibility.Accessible {
            public constructor(arg0: java.awt.Frame)
        }
    }
    namespace beans {
        namespace beancontext {
            interface BeanContext extends java.beans.beancontext.BeanContextChild , java.util.Collection , java.beans.DesignMode , java.beans.Visibility {
                globalHierarchyLock: java.lang.Object
                instantiateChild(arg0: java.lang.String | string): java.lang.Object
                getResourceAsStream(arg0: java.lang.String | string, arg1: java.beans.beancontext.BeanContextChild): java.io.InputStream
                getResource(arg0: java.lang.String | string, arg1: java.beans.beancontext.BeanContextChild): java.net.URL
                addBeanContextMembershipListener(arg0: java.beans.beancontext.BeanContextMembershipListener): void
                removeBeanContextMembershipListener(arg0: java.beans.beancontext.BeanContextMembershipListener): void
            }
            interface BeanContextChild {
                setBeanContext(arg0: java.beans.beancontext.BeanContext): void
                getBeanContext(): java.beans.beancontext.BeanContext
                addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
                removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
                addVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
                removeVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            }
            interface BeanContextChildComponentProxy {
                getComponent(): java.awt.Component
            }
            interface BeanContextChildComponentProxy$$Lambda {
                (): java.awt.Component
            }
            class BeanContextChildSupport implements java.beans.beancontext.BeanContextChild , java.beans.beancontext.BeanContextServicesListener , java.io.Serializable {
                public beanContextChildPeer: java.beans.beancontext.BeanContextChild
                protected pcSupport: java.beans.PropertyChangeSupport
                protected vcSupport: java.beans.VetoableChangeSupport
                protected beanContext: java.beans.beancontext.BeanContext
                protected rejectedSetBCOnce: boolean
                public constructor()
                public constructor(arg0: java.beans.beancontext.BeanContextChild)
                public setBeanContext(arg0: java.beans.beancontext.BeanContext): void
                public getBeanContext(): java.beans.beancontext.BeanContext
                public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
                public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
                public addVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
                public removeVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
                public serviceRevoked(arg0: java.beans.beancontext.BeanContextServiceRevokedEvent): void
                public serviceAvailable(arg0: java.beans.beancontext.BeanContextServiceAvailableEvent): void
                public getBeanContextChildPeer(): java.beans.beancontext.BeanContextChild
                public isDelegated(): boolean
                public firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
                public fireVetoableChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
                public validatePendingSetBeanContext(arg0: java.beans.beancontext.BeanContext): boolean
                protected releaseBeanContextResources(): void
                protected initializeBeanContextResources(): void
                public static class: java.lang.Class<any>
            }
            interface BeanContextContainerProxy {
                getContainer(): java.awt.Container
            }
            interface BeanContextContainerProxy$$Lambda {
                (): java.awt.Container
            }
            abstract class BeanContextEvent extends java.util.EventObject {
                protected propagatedFrom: java.beans.beancontext.BeanContext
                protected constructor(arg0: java.beans.beancontext.BeanContext)
                public getBeanContext(): java.beans.beancontext.BeanContext
                public setPropagatedFrom(arg0: java.beans.beancontext.BeanContext): void
                public getPropagatedFrom(): java.beans.beancontext.BeanContext
                public isPropagated(): boolean
                public static class: java.lang.Class<any>
            }
            class BeanContextMembershipEvent extends java.beans.beancontext.BeanContextEvent {
                protected children: java.util.Collection
                public constructor(arg0: java.beans.beancontext.BeanContext, arg1: java.util.Collection)
                public constructor(arg0: java.beans.beancontext.BeanContext, arg1: java.lang.Object[])
                public size(): int
                public contains(arg0: java.lang.Object): boolean
                public toArray(): java.lang.Object[]
                public iterator(): java.util.Iterator
                public static class: java.lang.Class<any>
            }
            interface BeanContextMembershipListener extends java.util.EventListener {
                childrenAdded(arg0: java.beans.beancontext.BeanContextMembershipEvent): void
                childrenRemoved(arg0: java.beans.beancontext.BeanContextMembershipEvent): void
            }
            interface BeanContextProxy {
                getBeanContextProxy(): java.beans.beancontext.BeanContextChild
            }
            interface BeanContextProxy$$Lambda {
                (): java.beans.beancontext.BeanContextChild
            }
            class BeanContextServiceAvailableEvent extends java.beans.beancontext.BeanContextEvent {
                protected serviceClass: java.lang.Class
                public constructor(arg0: java.beans.beancontext.BeanContextServices, arg1: java.lang.Class)
                public getSourceAsBeanContextServices(): java.beans.beancontext.BeanContextServices
                public getServiceClass(): java.lang.Class
                public getCurrentServiceSelectors(): java.util.Iterator
                public static class: java.lang.Class<any>
            }
            interface BeanContextServiceProvider {
                getService(arg0: java.beans.beancontext.BeanContextServices, arg1: java.lang.Object, arg2: java.lang.Class, arg3: java.lang.Object): java.lang.Object
                releaseService(arg0: java.beans.beancontext.BeanContextServices, arg1: java.lang.Object, arg2: java.lang.Object): void
                getCurrentServiceSelectors(arg0: java.beans.beancontext.BeanContextServices, arg1: java.lang.Class): java.util.Iterator
            }
            interface BeanContextServiceProviderBeanInfo extends java.beans.BeanInfo {
                getServicesBeanInfo(): java.beans.BeanInfo[]
            }
            class BeanContextServiceRevokedEvent extends java.beans.beancontext.BeanContextEvent {
                protected serviceClass: java.lang.Class
                public constructor(arg0: java.beans.beancontext.BeanContextServices, arg1: java.lang.Class, arg2: boolean)
                public getSourceAsBeanContextServices(): java.beans.beancontext.BeanContextServices
                public getServiceClass(): java.lang.Class
                public isServiceClass(arg0: java.lang.Class): boolean
                public isCurrentServiceInvalidNow(): boolean
                public static class: java.lang.Class<any>
            }
            interface BeanContextServiceRevokedListener extends java.util.EventListener {
                serviceRevoked(arg0: java.beans.beancontext.BeanContextServiceRevokedEvent): void
            }
            interface BeanContextServices extends java.beans.beancontext.BeanContext , java.beans.beancontext.BeanContextServicesListener {
                addService(arg0: java.lang.Class, arg1: java.beans.beancontext.BeanContextServiceProvider): boolean
                revokeService(arg0: java.lang.Class, arg1: java.beans.beancontext.BeanContextServiceProvider, arg2: boolean): void
                hasService(arg0: java.lang.Class): boolean
                getService(arg0: java.beans.beancontext.BeanContextChild, arg1: java.lang.Object, arg2: java.lang.Class, arg3: java.lang.Object, arg4: java.beans.beancontext.BeanContextServiceRevokedListener): java.lang.Object
                releaseService(arg0: java.beans.beancontext.BeanContextChild, arg1: java.lang.Object, arg2: java.lang.Object): void
                getCurrentServiceClasses(): java.util.Iterator
                getCurrentServiceSelectors(arg0: java.lang.Class): java.util.Iterator
                addBeanContextServicesListener(arg0: java.beans.beancontext.BeanContextServicesListener): void
                removeBeanContextServicesListener(arg0: java.beans.beancontext.BeanContextServicesListener): void
            }
            interface BeanContextServicesListener extends java.beans.beancontext.BeanContextServiceRevokedListener {
                serviceAvailable(arg0: java.beans.beancontext.BeanContextServiceAvailableEvent): void
            }
            class BeanContextServicesSupport extends java.beans.beancontext.BeanContextSupport implements java.beans.beancontext.BeanContextServices {
                protected services: java.util.HashMap
                protected serializable: int
                protected proxy: java.beans.beancontext.BeanContextServicesSupport$BCSSProxyServiceProvider
                protected bcsListeners: java.util.ArrayList
                public constructor(arg0: java.beans.beancontext.BeanContextServices, arg1: java.util.Locale, arg2: boolean, arg3: boolean)
                public constructor(arg0: java.beans.beancontext.BeanContextServices, arg1: java.util.Locale, arg2: boolean)
                public constructor(arg0: java.beans.beancontext.BeanContextServices, arg1: java.util.Locale)
                public constructor(arg0: java.beans.beancontext.BeanContextServices)
                public constructor()
                public initialize(): void
                public getBeanContextServicesPeer(): java.beans.beancontext.BeanContextServices
                protected createBCSChild(arg0: java.lang.Object, arg1: java.lang.Object): java.beans.beancontext.BeanContextSupport$BCSChild
                protected createBCSSServiceProvider(arg0: java.lang.Class, arg1: java.beans.beancontext.BeanContextServiceProvider): java.beans.beancontext.BeanContextServicesSupport$BCSSServiceProvider
                public addBeanContextServicesListener(arg0: java.beans.beancontext.BeanContextServicesListener): void
                public removeBeanContextServicesListener(arg0: java.beans.beancontext.BeanContextServicesListener): void
                public addService(arg0: java.lang.Class, arg1: java.beans.beancontext.BeanContextServiceProvider): boolean
                protected addService(arg0: java.lang.Class, arg1: java.beans.beancontext.BeanContextServiceProvider, arg2: boolean): boolean
                public revokeService(arg0: java.lang.Class, arg1: java.beans.beancontext.BeanContextServiceProvider, arg2: boolean): void
                public hasService(arg0: java.lang.Class): boolean
                public getService(arg0: java.beans.beancontext.BeanContextChild, arg1: java.lang.Object, arg2: java.lang.Class, arg3: java.lang.Object, arg4: java.beans.beancontext.BeanContextServiceRevokedListener): java.lang.Object
                public releaseService(arg0: java.beans.beancontext.BeanContextChild, arg1: java.lang.Object, arg2: java.lang.Object): void
                public getCurrentServiceClasses(): java.util.Iterator
                public getCurrentServiceSelectors(arg0: java.lang.Class): java.util.Iterator
                public serviceAvailable(arg0: java.beans.beancontext.BeanContextServiceAvailableEvent): void
                public serviceRevoked(arg0: java.beans.beancontext.BeanContextServiceRevokedEvent): void
                protected static getChildBeanContextServicesListener(arg0: java.lang.Object): java.beans.beancontext.BeanContextServicesListener
                protected childJustRemovedHook(arg0: java.lang.Object, arg1: java.beans.beancontext.BeanContextSupport$BCSChild): void
                protected releaseBeanContextResources(): void
                protected initializeBeanContextResources(): void
                protected fireServiceAdded(arg0: java.lang.Class): void
                protected fireServiceAdded(arg0: java.beans.beancontext.BeanContextServiceAvailableEvent): void
                protected fireServiceRevoked(arg0: java.beans.beancontext.BeanContextServiceRevokedEvent): void
                protected fireServiceRevoked(arg0: java.lang.Class, arg1: boolean): void
                protected bcsPreSerializationHook(arg0: java.io.ObjectOutputStream): void
                protected bcsPreDeserializationHook(arg0: java.io.ObjectInputStream): void
                public static class: java.lang.Class<any>
            }
            class BeanContextSupport extends java.beans.beancontext.BeanContextChildSupport implements java.beans.beancontext.BeanContext , java.io.Serializable , java.beans.PropertyChangeListener , java.beans.VetoableChangeListener {
                protected children: java.util.HashMap
                protected bcmListeners: java.util.ArrayList
                protected locale: java.util.Locale
                protected okToUseGui: boolean
                protected designTime: boolean
                public constructor(arg0: java.beans.beancontext.BeanContext, arg1: java.util.Locale, arg2: boolean, arg3: boolean)
                public constructor(arg0: java.beans.beancontext.BeanContext, arg1: java.util.Locale, arg2: boolean)
                public constructor(arg0: java.beans.beancontext.BeanContext, arg1: java.util.Locale)
                public constructor(arg0: java.beans.beancontext.BeanContext)
                public constructor()
                public getBeanContextPeer(): java.beans.beancontext.BeanContext
                public instantiateChild(arg0: java.lang.String | string): java.lang.Object
                public size(): int
                public isEmpty(): boolean
                public contains(arg0: java.lang.Object): boolean
                public containsKey(arg0: java.lang.Object): boolean
                public iterator(): java.util.Iterator
                public toArray(): java.lang.Object[]
                public toArray(arg0: java.lang.Object[]): java.lang.Object[]
                protected createBCSChild(arg0: java.lang.Object, arg1: java.lang.Object): java.beans.beancontext.BeanContextSupport$BCSChild
                public add(arg0: java.lang.Object): boolean
                public remove(arg0: java.lang.Object): boolean
                protected remove(arg0: java.lang.Object, arg1: boolean): boolean
                public containsAll(arg0: java.util.Collection): boolean
                public addAll(arg0: java.util.Collection): boolean
                public removeAll(arg0: java.util.Collection): boolean
                public retainAll(arg0: java.util.Collection): boolean
                public clear(): void
                public addBeanContextMembershipListener(arg0: java.beans.beancontext.BeanContextMembershipListener): void
                public removeBeanContextMembershipListener(arg0: java.beans.beancontext.BeanContextMembershipListener): void
                public getResourceAsStream(arg0: java.lang.String | string, arg1: java.beans.beancontext.BeanContextChild): java.io.InputStream
                public getResource(arg0: java.lang.String | string, arg1: java.beans.beancontext.BeanContextChild): java.net.URL
                public setDesignTime(arg0: boolean): void
                public isDesignTime(): boolean
                public setLocale(arg0: java.util.Locale): void
                public getLocale(): java.util.Locale
                public needsGui(): boolean
                public dontUseGui(): void
                public okToUseGui(): void
                public avoidingGui(): boolean
                public isSerializing(): boolean
                protected bcsChildren(): java.util.Iterator
                protected bcsPreSerializationHook(arg0: java.io.ObjectOutputStream): void
                protected bcsPreDeserializationHook(arg0: java.io.ObjectInputStream): void
                protected childDeserializedHook(arg0: java.lang.Object, arg1: java.beans.beancontext.BeanContextSupport$BCSChild): void
                protected serialize(arg0: java.io.ObjectOutputStream, arg1: java.util.Collection): void
                protected deserialize(arg0: java.io.ObjectInputStream, arg1: java.util.Collection): void
                public writeChildren(arg0: java.io.ObjectOutputStream): void
                public readChildren(arg0: java.io.ObjectInputStream): void
                public vetoableChange(arg0: java.beans.PropertyChangeEvent): void
                public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                protected validatePendingAdd(arg0: java.lang.Object): boolean
                protected validatePendingRemove(arg0: java.lang.Object): boolean
                protected childJustAddedHook(arg0: java.lang.Object, arg1: java.beans.beancontext.BeanContextSupport$BCSChild): void
                protected childJustRemovedHook(arg0: java.lang.Object, arg1: java.beans.beancontext.BeanContextSupport$BCSChild): void
                protected static getChildVisibility(arg0: java.lang.Object): java.beans.Visibility
                protected static getChildSerializable(arg0: java.lang.Object): java.io.Serializable
                protected static getChildPropertyChangeListener(arg0: java.lang.Object): java.beans.PropertyChangeListener
                protected static getChildVetoableChangeListener(arg0: java.lang.Object): java.beans.VetoableChangeListener
                protected static getChildBeanContextMembershipListener(arg0: java.lang.Object): java.beans.beancontext.BeanContextMembershipListener
                protected static getChildBeanContextChild(arg0: java.lang.Object): java.beans.beancontext.BeanContextChild
                protected fireChildrenAdded(arg0: java.beans.beancontext.BeanContextMembershipEvent): void
                protected fireChildrenRemoved(arg0: java.beans.beancontext.BeanContextMembershipEvent): void
                protected initialize(): void
                protected copyChildren(): java.lang.Object[]
                protected static classEquals(arg0: java.lang.Class, arg1: java.lang.Class): boolean
                public static class: java.lang.Class<any>
            }
        }
        interface AppletInitializer {
            initialize(arg0: java.applet.Applet, arg1: java.beans.beancontext.BeanContext): void
            activate(arg0: java.applet.Applet): void
        }
        class BeanDescriptor extends java.beans.FeatureDescriptor {
            public constructor(arg0: java.lang.Class<any>)
            public constructor(arg0: java.lang.Class<any>, arg1: java.lang.Class<any>)
            public getBeanClass(): java.lang.Class<any>
            public getCustomizerClass(): java.lang.Class<any>
            public static class: java.lang.Class<any>
        }
        interface BeanInfo {
            ICON_COLOR_16x16: int
            ICON_COLOR_32x32: int
            ICON_MONO_16x16: int
            ICON_MONO_32x32: int
            getBeanDescriptor(): java.beans.BeanDescriptor
            getEventSetDescriptors(): java.beans.EventSetDescriptor[]
            getDefaultEventIndex(): int
            getPropertyDescriptors(): java.beans.PropertyDescriptor[]
            getDefaultPropertyIndex(): int
            getMethodDescriptors(): java.beans.MethodDescriptor[]
            getAdditionalBeanInfo(): java.beans.BeanInfo[]
            getIcon(arg0: int): java.awt.Image
        }
        class Beans {
            public constructor()
            public static instantiate(arg0: java.lang.ClassLoader, arg1: java.lang.String | string): java.lang.Object
            public static instantiate(arg0: java.lang.ClassLoader, arg1: java.lang.String | string, arg2: java.beans.beancontext.BeanContext): java.lang.Object
            public static instantiate(arg0: java.lang.ClassLoader, arg1: java.lang.String | string, arg2: java.beans.beancontext.BeanContext, arg3: java.beans.AppletInitializer): java.lang.Object
            public static getInstanceOf(arg0: java.lang.Object, arg1: java.lang.Class<any>): java.lang.Object
            public static isInstanceOf(arg0: java.lang.Object, arg1: java.lang.Class<any>): boolean
            public static isDesignTime(): boolean
            public static isGuiAvailable(): boolean
            public static setDesignTime(arg0: boolean): void
            public static setGuiAvailable(arg0: boolean): void
            public static class: java.lang.Class<any>
        }
        abstract class ChangeListenerMap<L extends java.util.EventListener> {
            protected newArray(arg0: int): L[]
            protected newProxy(arg0: java.lang.String | string, arg1: L): L
            public add(arg0: java.lang.String | string, arg1: L): void
            public remove(arg0: java.lang.String | string, arg1: L): void
            public get(arg0: java.lang.String | string): L[]
            public set(arg0: java.lang.String | string, arg1: L[]): void
            public getListeners(): L[]
            public getListeners(arg0: java.lang.String | string): L[]
            public hasListeners(arg0: java.lang.String | string): boolean
            public getEntries(): java.util.Set<java.util.Map$Entry<java.lang.String, L[]>>
            public extract(arg0: L): L
            public static class: java.lang.Class<any>
        }
        interface ConstructorProperties extends java.lang.annotation.Annotation {
            value(): java.lang.String[]
        }
        interface Customizer {
            setObject(arg0: java.lang.Object): void
            addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
        }
        class DefaultPersistenceDelegate extends java.beans.PersistenceDelegate {
            public constructor()
            public constructor(arg0: java.lang.String[])
            protected mutatesTo(arg0: java.lang.Object, arg1: java.lang.Object): boolean
            protected instantiate(arg0: java.lang.Object, arg1: java.beans.Encoder): java.beans.Expression
            protected initialize(arg0: java.lang.Class<any>, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.beans.Encoder): void
            public static class: java.lang.Class<any>
        }
        interface DesignMode {
            PROPERTYNAME: string
            setDesignTime(arg0: boolean): void
            isDesignTime(): boolean
        }
        class Encoder {
            public constructor()
            protected writeObject(arg0: java.lang.Object): void
            public setExceptionListener(arg0: java.beans.ExceptionListener | java.beans.ExceptionListener$$Lambda): void
            public getExceptionListener(): java.beans.ExceptionListener
            public getPersistenceDelegate(arg0: java.lang.Class<any>): java.beans.PersistenceDelegate
            public setPersistenceDelegate(arg0: java.lang.Class<any>, arg1: java.beans.PersistenceDelegate): void
            public remove(arg0: java.lang.Object): java.lang.Object
            public get(arg0: java.lang.Object): java.lang.Object
            public writeStatement(arg0: java.beans.Statement): void
            public writeExpression(arg0: java.beans.Expression): void
            public static class: java.lang.Class<any>
        }
        class EventHandler implements java.lang.reflect.InvocationHandler {
            public constructor(arg0: java.lang.Object, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String | string)
            public getTarget(): java.lang.Object
            public getAction(): string
            public getEventPropertyName(): string
            public getListenerMethodName(): string
            public invoke(arg0: java.lang.Object, arg1: java.lang.reflect.Method, arg2: java.lang.Object[]): java.lang.Object
            public static create<T>(arg0: java.lang.Class<T>, arg1: java.lang.Object, arg2: java.lang.String | string): T
            public static create<T>(arg0: java.lang.Class<T>, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: java.lang.String | string): T
            public static create<T>(arg0: java.lang.Class<T>, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: java.lang.String | string, arg4: java.lang.String | string): T
            public static class: java.lang.Class<any>
        }
        class EventHandler$$Lambda implements java.lang.reflect.InvocationHandler {
            public constructor(arg0: java.lang.Object, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String | string)
        }
        class EventSetDescriptor extends java.beans.FeatureDescriptor {
            public constructor(arg0: java.lang.Class<any>, arg1: java.lang.String | string, arg2: java.lang.Class<any>, arg3: java.lang.String | string)
            public constructor(arg0: java.lang.Class<any>, arg1: java.lang.String | string, arg2: java.lang.Class<any>, arg3: java.lang.String[], arg4: java.lang.String | string, arg5: java.lang.String | string)
            public constructor(arg0: java.lang.Class<any>, arg1: java.lang.String | string, arg2: java.lang.Class<any>, arg3: java.lang.String[], arg4: java.lang.String | string, arg5: java.lang.String | string, arg6: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>, arg2: java.lang.reflect.Method[], arg3: java.lang.reflect.Method, arg4: java.lang.reflect.Method)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>, arg2: java.lang.reflect.Method[], arg3: java.lang.reflect.Method, arg4: java.lang.reflect.Method, arg5: java.lang.reflect.Method)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>, arg2: java.beans.MethodDescriptor[], arg3: java.lang.reflect.Method, arg4: java.lang.reflect.Method)
            public getListenerType(): java.lang.Class<any>
            public getListenerMethods(): java.lang.reflect.Method[]
            public getListenerMethodDescriptors(): java.beans.MethodDescriptor[]
            public getAddListenerMethod(): java.lang.reflect.Method
            public getRemoveListenerMethod(): java.lang.reflect.Method
            public getGetListenerMethod(): java.lang.reflect.Method
            public setUnicast(arg0: boolean): void
            public isUnicast(): boolean
            public setInDefaultEventSet(arg0: boolean): void
            public isInDefaultEventSet(): boolean
            public static class: java.lang.Class<any>
        }
        interface ExceptionListener {
            exceptionThrown(arg0: java.lang.Exception): void
        }
        interface ExceptionListener$$Lambda {
            (arg0: java.lang.Exception): void
        }
        class Expression extends java.beans.Statement {
            public constructor(arg0: java.lang.Object, arg1: java.lang.String | string, arg2: java.lang.Object[])
            public constructor(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: java.lang.Object[])
            public execute(): void
            public getValue(): java.lang.Object
            public setValue(arg0: java.lang.Object): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class FeatureDescriptor {
            public constructor()
            public getName(): string
            public setName(arg0: java.lang.String | string): void
            public getDisplayName(): string
            public setDisplayName(arg0: java.lang.String | string): void
            public isExpert(): boolean
            public setExpert(arg0: boolean): void
            public isHidden(): boolean
            public setHidden(arg0: boolean): void
            public isPreferred(): boolean
            public setPreferred(arg0: boolean): void
            public getShortDescription(): string
            public setShortDescription(arg0: java.lang.String | string): void
            public setValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
            public getValue(arg0: java.lang.String | string): java.lang.Object
            public attributeNames(): java.util.Enumeration<java.lang.String>
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class IndexedPropertyChangeEvent extends java.beans.PropertyChangeEvent {
            public constructor(arg0: java.lang.Object, arg1: java.lang.String | string, arg2: java.lang.Object, arg3: java.lang.Object, arg4: int)
            public getIndex(): int
            public static class: java.lang.Class<any>
        }
        class IndexedPropertyDescriptor extends java.beans.PropertyDescriptor {
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>, arg2: java.lang.String | string, arg3: java.lang.String | string, arg4: java.lang.String | string, arg5: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.reflect.Method, arg2: java.lang.reflect.Method, arg3: java.lang.reflect.Method, arg4: java.lang.reflect.Method)
            public getIndexedReadMethod(): java.lang.reflect.Method
            public setIndexedReadMethod(arg0: java.lang.reflect.Method): void
            public getIndexedWriteMethod(): java.lang.reflect.Method
            public setIndexedWriteMethod(arg0: java.lang.reflect.Method): void
            public getIndexedPropertyType(): java.lang.Class<any>
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public static class: java.lang.Class<any>
        }
        class IntrospectionException extends java.lang.Exception {
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        class Introspector {
            public static USE_ALL_BEANINFO: int
            public static IGNORE_IMMEDIATE_BEANINFO: int
            public static IGNORE_ALL_BEANINFO: int
            public static getBeanInfo(arg0: java.lang.Class<any>): java.beans.BeanInfo
            public static getBeanInfo(arg0: java.lang.Class<any>, arg1: int): java.beans.BeanInfo
            public static getBeanInfo(arg0: java.lang.Class<any>, arg1: java.lang.Class<any>): java.beans.BeanInfo
            public static getBeanInfo(arg0: java.lang.Class<any>, arg1: java.lang.Class<any>, arg2: int): java.beans.BeanInfo
            public static decapitalize(arg0: java.lang.String | string): string
            public static getBeanInfoSearchPath(): java.lang.String[]
            public static setBeanInfoSearchPath(arg0: java.lang.String[]): void
            public static flushCaches(): void
            public static flushFromCaches(arg0: java.lang.Class<any>): void
            public static class: java.lang.Class<any>
        }
        class MetaData {
            public static getPersistenceDelegate(arg0: java.lang.Class): java.beans.PersistenceDelegate
            public static class: java.lang.Class<any>
        }
        class MethodDescriptor extends java.beans.FeatureDescriptor {
            public constructor(arg0: java.lang.reflect.Method)
            public constructor(arg0: java.lang.reflect.Method, arg1: java.beans.ParameterDescriptor[])
            public getMethod(): java.lang.reflect.Method
            public getParameterDescriptors(): java.beans.ParameterDescriptor[]
            public static class: java.lang.Class<any>
        }
        class MethodRef {
            public static class: java.lang.Class<any>
        }
        class NameGenerator {
            public constructor()
            public clear(): void
            public static unqualifiedClassName(arg0: java.lang.Class): string
            public static capitalize(arg0: java.lang.String | string): string
            public instanceName(arg0: java.lang.Object): string
            public static class: java.lang.Class<any>
        }
        class ParameterDescriptor extends java.beans.FeatureDescriptor {
            public constructor()
            public static class: java.lang.Class<any>
        }
        abstract class PersistenceDelegate {
            public constructor()
            public writeObject(arg0: java.lang.Object, arg1: java.beans.Encoder): void
            protected mutatesTo(arg0: java.lang.Object, arg1: java.lang.Object): boolean
            protected instantiate(arg0: java.lang.Object, arg1: java.beans.Encoder): java.beans.Expression
            protected initialize(arg0: java.lang.Class<any>, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.beans.Encoder): void
            public static class: java.lang.Class<any>
        }
        class PropertyChangeEvent extends java.util.EventObject {
            public constructor(arg0: java.lang.Object, arg1: java.lang.String | string, arg2: java.lang.Object, arg3: java.lang.Object)
            public getPropertyName(): string
            public getNewValue(): java.lang.Object
            public getOldValue(): java.lang.Object
            public setPropagationId(arg0: java.lang.Object): void
            public getPropagationId(): java.lang.Object
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface PropertyChangeListener extends java.util.EventListener {
            propertyChange(arg0: java.beans.PropertyChangeEvent): void
        }
        class PropertyChangeListenerProxy extends java.util.EventListenerProxy<java.beans.PropertyChangeListener> implements java.beans.PropertyChangeListener {
            public constructor(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener)
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            public getPropertyName(): string
            public static class: java.lang.Class<any>
        }
        class PropertyChangeSupport implements java.io.Serializable {
            public constructor(arg0: java.lang.Object)
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
            public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
            public firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
            public firePropertyChange(arg0: java.beans.PropertyChangeEvent): void
            public fireIndexedPropertyChange(arg0: java.lang.String | string, arg1: int, arg2: java.lang.Object, arg3: java.lang.Object): void
            public fireIndexedPropertyChange(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: int): void
            public fireIndexedPropertyChange(arg0: java.lang.String | string, arg1: int, arg2: boolean, arg3: boolean): void
            public hasListeners(arg0: java.lang.String | string): boolean
            public static class: java.lang.Class<any>
        }
        class PropertyDescriptor extends java.beans.FeatureDescriptor {
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Class<any>, arg2: java.lang.String | string, arg3: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.reflect.Method, arg2: java.lang.reflect.Method)
            public getPropertyType(): java.lang.Class<any>
            public getReadMethod(): java.lang.reflect.Method
            public setReadMethod(arg0: java.lang.reflect.Method): void
            public getWriteMethod(): java.lang.reflect.Method
            public setWriteMethod(arg0: java.lang.reflect.Method): void
            public isBound(): boolean
            public setBound(arg0: boolean): void
            public isConstrained(): boolean
            public setConstrained(arg0: boolean): void
            public setPropertyEditorClass(arg0: java.lang.Class<any>): void
            public getPropertyEditorClass(): java.lang.Class<any>
            public createPropertyEditor(arg0: java.lang.Object): java.beans.PropertyEditor
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public static class: java.lang.Class<any>
        }
        interface PropertyEditor {
            setValue(arg0: java.lang.Object): void
            getValue(): java.lang.Object
            isPaintable(): boolean
            paintValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle): void
            getJavaInitializationString(): string
            getAsText(): string
            setAsText(arg0: java.lang.String | string): void
            getTags(): java.lang.String[]
            getCustomEditor(): java.awt.Component
            supportsCustomEditor(): boolean
            addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
        }
        class PropertyEditorManager {
            public constructor()
            public static registerEditor(arg0: java.lang.Class<any>, arg1: java.lang.Class<any>): void
            public static findEditor(arg0: java.lang.Class<any>): java.beans.PropertyEditor
            public static getEditorSearchPath(): java.lang.String[]
            public static setEditorSearchPath(arg0: java.lang.String[]): void
            public static class: java.lang.Class<any>
        }
        class PropertyEditorSupport implements java.beans.PropertyEditor {
            public constructor()
            public constructor(arg0: java.lang.Object)
            public getSource(): java.lang.Object
            public setSource(arg0: java.lang.Object): void
            public setValue(arg0: java.lang.Object): void
            public getValue(): java.lang.Object
            public isPaintable(): boolean
            public paintValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle): void
            public getJavaInitializationString(): string
            public getAsText(): string
            public setAsText(arg0: java.lang.String | string): void
            public getTags(): java.lang.String[]
            public getCustomEditor(): java.awt.Component
            public supportsCustomEditor(): boolean
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public firePropertyChange(): void
            public static class: java.lang.Class<any>
        }
        class PropertyVetoException extends java.lang.Exception {
            public constructor(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeEvent)
            public getPropertyChangeEvent(): java.beans.PropertyChangeEvent
            public static class: java.lang.Class<any>
        }
        class SimpleBeanInfo implements java.beans.BeanInfo {
            public constructor()
            public getBeanDescriptor(): java.beans.BeanDescriptor
            public getPropertyDescriptors(): java.beans.PropertyDescriptor[]
            public getDefaultPropertyIndex(): int
            public getEventSetDescriptors(): java.beans.EventSetDescriptor[]
            public getDefaultEventIndex(): int
            public getMethodDescriptors(): java.beans.MethodDescriptor[]
            public getAdditionalBeanInfo(): java.beans.BeanInfo[]
            public getIcon(arg0: int): java.awt.Image
            public loadImage(arg0: java.lang.String | string): java.awt.Image
            public static class: java.lang.Class<any>
        }
        class Statement {
            public constructor(arg0: java.lang.Object, arg1: java.lang.String | string, arg2: java.lang.Object[])
            public getTarget(): java.lang.Object
            public getMethodName(): string
            public getArguments(): java.lang.Object[]
            public execute(): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class ThreadGroupContext {
            public static class: java.lang.Class<any>
        }
        interface Transient extends java.lang.annotation.Annotation {
            value(): boolean
        }
        interface VetoableChangeListener extends java.util.EventListener {
            vetoableChange(arg0: java.beans.PropertyChangeEvent): void
        }
        class VetoableChangeListenerProxy extends java.util.EventListenerProxy<java.beans.VetoableChangeListener> implements java.beans.VetoableChangeListener {
            public constructor(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener)
            public vetoableChange(arg0: java.beans.PropertyChangeEvent): void
            public getPropertyName(): string
            public static class: java.lang.Class<any>
        }
        class VetoableChangeSupport implements java.io.Serializable {
            public constructor(arg0: java.lang.Object)
            public addVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public getVetoableChangeListeners(): java.beans.VetoableChangeListener[]
            public addVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            public getVetoableChangeListeners(arg0: java.lang.String | string): java.beans.VetoableChangeListener[]
            public fireVetoableChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public fireVetoableChange(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public fireVetoableChange(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
            public fireVetoableChange(arg0: java.beans.PropertyChangeEvent): void
            public hasListeners(arg0: java.lang.String | string): boolean
            public static class: java.lang.Class<any>
        }
        interface Visibility {
            needsGui(): boolean
            dontUseGui(): void
            okToUseGui(): void
            avoidingGui(): boolean
        }
        abstract class WeakIdentityMap<T> {
            public get(arg0: java.lang.Object): T
            protected create(arg0: java.lang.Object): T
            public static class: java.lang.Class<any>
        }
        class XMLDecoder implements java.lang.AutoCloseable {
            public constructor(arg0: java.io.InputStream)
            public constructor(arg0: java.io.InputStream, arg1: java.lang.Object)
            public constructor(arg0: java.io.InputStream, arg1: java.lang.Object, arg2: java.beans.ExceptionListener | java.beans.ExceptionListener$$Lambda)
            public constructor(arg0: java.io.InputStream, arg1: java.lang.Object, arg2: java.beans.ExceptionListener | java.beans.ExceptionListener$$Lambda, arg3: java.lang.ClassLoader)
            public constructor(arg0: org.xml.sax.InputSource)
            public close(): void
            public setExceptionListener(arg0: java.beans.ExceptionListener | java.beans.ExceptionListener$$Lambda): void
            public getExceptionListener(): java.beans.ExceptionListener
            public readObject(): java.lang.Object
            public setOwner(arg0: java.lang.Object): void
            public getOwner(): java.lang.Object
            public static createHandler(arg0: java.lang.Object, arg1: java.beans.ExceptionListener | java.beans.ExceptionListener$$Lambda, arg2: java.lang.ClassLoader): org.xml.sax.helpers.DefaultHandler
            public static class: java.lang.Class<any>
        }
        class XMLDecoder$$Lambda implements java.lang.AutoCloseable {
            public constructor(arg0: java.io.InputStream)
        }
        class XMLEncoder extends java.beans.Encoder implements java.lang.AutoCloseable {
            public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
            public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: java.lang.String | string, arg2: boolean, arg3: int)
            public setOwner(arg0: java.lang.Object): void
            public getOwner(): java.lang.Object
            public writeObject(arg0: java.lang.Object): void
            public writeStatement(arg0: java.beans.Statement): void
            public writeExpression(arg0: java.beans.Expression): void
            public flush(): void
            public close(): void
            public static class: java.lang.Class<any>
        }
        class XMLEncoder$$Lambda extends java.beans.Encoder implements java.lang.AutoCloseable {
            public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
        }
    }
}
declare namespace javax {
    namespace accessibility {
        interface Accessible {
            getAccessibleContext(): javax.accessibility.AccessibleContext
        }
        interface Accessible$$Lambda {
            (): javax.accessibility.AccessibleContext
        }
        interface AccessibleAction {
            TOGGLE_EXPAND: string
            INCREMENT: string
            DECREMENT: string
            CLICK: string
            TOGGLE_POPUP: string
            getAccessibleActionCount(): int
            getAccessibleActionDescription(arg0: int): string
            doAccessibleAction(arg0: int): boolean
        }
        class AccessibleAttributeSequence {
            public startIndex: int
            public endIndex: int
            public attributes: javax.swing.text.AttributeSet
            public constructor(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet)
            public static class: java.lang.Class<any>
        }
        abstract class AccessibleBundle {
            protected key: string
            public constructor()
            protected toDisplayString(arg0: java.lang.String | string, arg1: java.util.Locale): string
            public toDisplayString(arg0: java.util.Locale): string
            public toDisplayString(): string
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface AccessibleComponent {
            getBackground(): java.awt.Color
            setBackground(arg0: java.awt.Color): void
            getForeground(): java.awt.Color
            setForeground(arg0: java.awt.Color): void
            getCursor(): java.awt.Cursor
            setCursor(arg0: java.awt.Cursor): void
            getFont(): java.awt.Font
            setFont(arg0: java.awt.Font): void
            getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            isEnabled(): boolean
            setEnabled(arg0: boolean): void
            isVisible(): boolean
            setVisible(arg0: boolean): void
            isShowing(): boolean
            contains(arg0: java.awt.Point): boolean
            getLocationOnScreen(): java.awt.Point
            getLocation(): java.awt.Point
            setLocation(arg0: java.awt.Point): void
            getBounds(): java.awt.Rectangle
            setBounds(arg0: java.awt.Rectangle): void
            getSize(): java.awt.Dimension
            setSize(arg0: java.awt.Dimension): void
            getAccessibleAt(arg0: java.awt.Point): javax.accessibility.Accessible
            isFocusTraversable(): boolean
            requestFocus(): void
            addFocusListener(arg0: java.awt.event.FocusListener): void
            removeFocusListener(arg0: java.awt.event.FocusListener): void
        }
        abstract class AccessibleContext {
            public static ACCESSIBLE_NAME_PROPERTY: string
            public static ACCESSIBLE_DESCRIPTION_PROPERTY: string
            public static ACCESSIBLE_STATE_PROPERTY: string
            public static ACCESSIBLE_VALUE_PROPERTY: string
            public static ACCESSIBLE_SELECTION_PROPERTY: string
            public static ACCESSIBLE_CARET_PROPERTY: string
            public static ACCESSIBLE_VISIBLE_DATA_PROPERTY: string
            public static ACCESSIBLE_CHILD_PROPERTY: string
            public static ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY: string
            public static ACCESSIBLE_TABLE_CAPTION_CHANGED: string
            public static ACCESSIBLE_TABLE_SUMMARY_CHANGED: string
            public static ACCESSIBLE_TABLE_MODEL_CHANGED: string
            public static ACCESSIBLE_TABLE_ROW_HEADER_CHANGED: string
            public static ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED: string
            public static ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED: string
            public static ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED: string
            public static ACCESSIBLE_ACTION_PROPERTY: string
            public static ACCESSIBLE_HYPERTEXT_OFFSET: string
            public static ACCESSIBLE_TEXT_PROPERTY: string
            public static ACCESSIBLE_INVALIDATE_CHILDREN: string
            public static ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED: string
            public static ACCESSIBLE_COMPONENT_BOUNDS_CHANGED: string
            protected accessibleParent: javax.accessibility.Accessible
            protected accessibleName: string
            protected accessibleDescription: string
            public constructor()
            public getAccessibleName(): string
            public setAccessibleName(arg0: java.lang.String | string): void
            public getAccessibleDescription(): string
            public setAccessibleDescription(arg0: java.lang.String | string): void
            public getAccessibleRole(): javax.accessibility.AccessibleRole
            public getAccessibleStateSet(): javax.accessibility.AccessibleStateSet
            public getAccessibleParent(): javax.accessibility.Accessible
            public setAccessibleParent(arg0: javax.accessibility.Accessible | javax.accessibility.Accessible$$Lambda): void
            public getAccessibleIndexInParent(): int
            public getAccessibleChildrenCount(): int
            public getAccessibleChild(arg0: int): javax.accessibility.Accessible
            public getLocale(): java.util.Locale
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public getAccessibleAction(): javax.accessibility.AccessibleAction
            public getAccessibleComponent(): javax.accessibility.AccessibleComponent
            public getAccessibleSelection(): javax.accessibility.AccessibleSelection
            public getAccessibleText(): javax.accessibility.AccessibleText
            public getAccessibleEditableText(): javax.accessibility.AccessibleEditableText
            public getAccessibleValue(): javax.accessibility.AccessibleValue
            public getAccessibleIcon(): javax.accessibility.AccessibleIcon[]
            public getAccessibleRelationSet(): javax.accessibility.AccessibleRelationSet
            public getAccessibleTable(): javax.accessibility.AccessibleTable
            public firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public static class: java.lang.Class<any>
        }
        interface AccessibleEditableText extends javax.accessibility.AccessibleText {
            setTextContents(arg0: java.lang.String | string): void
            insertTextAtIndex(arg0: int, arg1: java.lang.String | string): void
            getTextRange(arg0: int, arg1: int): string
            delete(arg0: int, arg1: int): void
            cut(arg0: int, arg1: int): void
            paste(arg0: int): void
            replaceText(arg0: int, arg1: int, arg2: java.lang.String | string): void
            selectText(arg0: int, arg1: int): void
            setAttributes(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet): void
        }
        interface AccessibleExtendedComponent extends javax.accessibility.AccessibleComponent {
            getToolTipText(): string
            getTitledBorderText(): string
            getAccessibleKeyBinding(): javax.accessibility.AccessibleKeyBinding
        }
        interface AccessibleExtendedTable extends javax.accessibility.AccessibleTable {
            getAccessibleRow(arg0: int): int
            getAccessibleColumn(arg0: int): int
            getAccessibleIndex(arg0: int, arg1: int): int
        }
        interface AccessibleExtendedText {
            LINE: int
            ATTRIBUTE_RUN: int
            getTextRange(arg0: int, arg1: int): string
            getTextSequenceAt(arg0: int, arg1: int): javax.accessibility.AccessibleTextSequence
            getTextSequenceAfter(arg0: int, arg1: int): javax.accessibility.AccessibleTextSequence
            getTextSequenceBefore(arg0: int, arg1: int): javax.accessibility.AccessibleTextSequence
            getTextBounds(arg0: int, arg1: int): java.awt.Rectangle
        }
        abstract class AccessibleHyperlink implements javax.accessibility.AccessibleAction {
            public constructor()
            public isValid(): boolean
            public getAccessibleActionCount(): int
            public doAccessibleAction(arg0: int): boolean
            public getAccessibleActionDescription(arg0: int): string
            public getAccessibleActionObject(arg0: int): java.lang.Object
            public getAccessibleActionAnchor(arg0: int): java.lang.Object
            public getStartIndex(): int
            public getEndIndex(): int
            public static class: java.lang.Class<any>
        }
        interface AccessibleHypertext extends javax.accessibility.AccessibleText {
            getLinkCount(): int
            getLink(arg0: int): javax.accessibility.AccessibleHyperlink
            getLinkIndex(arg0: int): int
        }
        interface AccessibleIcon {
            getAccessibleIconDescription(): string
            setAccessibleIconDescription(arg0: java.lang.String | string): void
            getAccessibleIconWidth(): int
            getAccessibleIconHeight(): int
        }
        interface AccessibleKeyBinding {
            getAccessibleKeyBindingCount(): int
            getAccessibleKeyBinding(arg0: int): java.lang.Object
        }
        class AccessibleRelation extends javax.accessibility.AccessibleBundle {
            public static LABEL_FOR: string
            public static LABELED_BY: string
            public static MEMBER_OF: string
            public static CONTROLLER_FOR: string
            public static CONTROLLED_BY: string
            public static FLOWS_TO: string
            public static FLOWS_FROM: string
            public static SUBWINDOW_OF: string
            public static PARENT_WINDOW_OF: string
            public static EMBEDS: string
            public static EMBEDDED_BY: string
            public static CHILD_NODE_OF: string
            public static LABEL_FOR_PROPERTY: string
            public static LABELED_BY_PROPERTY: string
            public static MEMBER_OF_PROPERTY: string
            public static CONTROLLER_FOR_PROPERTY: string
            public static CONTROLLED_BY_PROPERTY: string
            public static FLOWS_TO_PROPERTY: string
            public static FLOWS_FROM_PROPERTY: string
            public static SUBWINDOW_OF_PROPERTY: string
            public static PARENT_WINDOW_OF_PROPERTY: string
            public static EMBEDS_PROPERTY: string
            public static EMBEDDED_BY_PROPERTY: string
            public static CHILD_NODE_OF_PROPERTY: string
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Object)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Object[])
            public getKey(): string
            public getTarget(): java.lang.Object[]
            public setTarget(arg0: java.lang.Object): void
            public setTarget(arg0: java.lang.Object[]): void
            public static class: java.lang.Class<any>
        }
        class AccessibleRelationSet {
            protected relations: java.util.Vector<javax.accessibility.AccessibleRelation>
            public constructor()
            public constructor(arg0: javax.accessibility.AccessibleRelation[])
            public add(arg0: javax.accessibility.AccessibleRelation): boolean
            public addAll(arg0: javax.accessibility.AccessibleRelation[]): void
            public remove(arg0: javax.accessibility.AccessibleRelation): boolean
            public clear(): void
            public size(): int
            public contains(arg0: java.lang.String | string): boolean
            public get(arg0: java.lang.String | string): javax.accessibility.AccessibleRelation
            public toArray(): javax.accessibility.AccessibleRelation[]
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class AccessibleResourceBundle extends java.util.ListResourceBundle {
            public constructor()
            public getContents(): java.lang.Object[][]
            public static class: java.lang.Class<any>
        }
        class AccessibleRole extends javax.accessibility.AccessibleBundle {
            public static ALERT: javax.accessibility.AccessibleRole
            public static COLUMN_HEADER: javax.accessibility.AccessibleRole
            public static CANVAS: javax.accessibility.AccessibleRole
            public static COMBO_BOX: javax.accessibility.AccessibleRole
            public static DESKTOP_ICON: javax.accessibility.AccessibleRole
            public static HTML_CONTAINER: javax.accessibility.AccessibleRole
            public static INTERNAL_FRAME: javax.accessibility.AccessibleRole
            public static DESKTOP_PANE: javax.accessibility.AccessibleRole
            public static OPTION_PANE: javax.accessibility.AccessibleRole
            public static WINDOW: javax.accessibility.AccessibleRole
            public static FRAME: javax.accessibility.AccessibleRole
            public static DIALOG: javax.accessibility.AccessibleRole
            public static COLOR_CHOOSER: javax.accessibility.AccessibleRole
            public static DIRECTORY_PANE: javax.accessibility.AccessibleRole
            public static FILE_CHOOSER: javax.accessibility.AccessibleRole
            public static FILLER: javax.accessibility.AccessibleRole
            public static HYPERLINK: javax.accessibility.AccessibleRole
            public static ICON: javax.accessibility.AccessibleRole
            public static LABEL: javax.accessibility.AccessibleRole
            public static ROOT_PANE: javax.accessibility.AccessibleRole
            public static GLASS_PANE: javax.accessibility.AccessibleRole
            public static LAYERED_PANE: javax.accessibility.AccessibleRole
            public static LIST: javax.accessibility.AccessibleRole
            public static LIST_ITEM: javax.accessibility.AccessibleRole
            public static MENU_BAR: javax.accessibility.AccessibleRole
            public static POPUP_MENU: javax.accessibility.AccessibleRole
            public static MENU: javax.accessibility.AccessibleRole
            public static MENU_ITEM: javax.accessibility.AccessibleRole
            public static SEPARATOR: javax.accessibility.AccessibleRole
            public static PAGE_TAB_LIST: javax.accessibility.AccessibleRole
            public static PAGE_TAB: javax.accessibility.AccessibleRole
            public static PANEL: javax.accessibility.AccessibleRole
            public static PROGRESS_BAR: javax.accessibility.AccessibleRole
            public static PASSWORD_TEXT: javax.accessibility.AccessibleRole
            public static PUSH_BUTTON: javax.accessibility.AccessibleRole
            public static TOGGLE_BUTTON: javax.accessibility.AccessibleRole
            public static CHECK_BOX: javax.accessibility.AccessibleRole
            public static RADIO_BUTTON: javax.accessibility.AccessibleRole
            public static ROW_HEADER: javax.accessibility.AccessibleRole
            public static SCROLL_PANE: javax.accessibility.AccessibleRole
            public static SCROLL_BAR: javax.accessibility.AccessibleRole
            public static VIEWPORT: javax.accessibility.AccessibleRole
            public static SLIDER: javax.accessibility.AccessibleRole
            public static SPLIT_PANE: javax.accessibility.AccessibleRole
            public static TABLE: javax.accessibility.AccessibleRole
            public static TEXT: javax.accessibility.AccessibleRole
            public static TREE: javax.accessibility.AccessibleRole
            public static TOOL_BAR: javax.accessibility.AccessibleRole
            public static TOOL_TIP: javax.accessibility.AccessibleRole
            public static AWT_COMPONENT: javax.accessibility.AccessibleRole
            public static SWING_COMPONENT: javax.accessibility.AccessibleRole
            public static UNKNOWN: javax.accessibility.AccessibleRole
            public static STATUS_BAR: javax.accessibility.AccessibleRole
            public static DATE_EDITOR: javax.accessibility.AccessibleRole
            public static SPIN_BOX: javax.accessibility.AccessibleRole
            public static FONT_CHOOSER: javax.accessibility.AccessibleRole
            public static GROUP_BOX: javax.accessibility.AccessibleRole
            public static HEADER: javax.accessibility.AccessibleRole
            public static FOOTER: javax.accessibility.AccessibleRole
            public static PARAGRAPH: javax.accessibility.AccessibleRole
            public static RULER: javax.accessibility.AccessibleRole
            public static EDITBAR: javax.accessibility.AccessibleRole
            public static PROGRESS_MONITOR: javax.accessibility.AccessibleRole
            protected constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        interface AccessibleSelection {
            getAccessibleSelectionCount(): int
            getAccessibleSelection(arg0: int): javax.accessibility.Accessible
            isAccessibleChildSelected(arg0: int): boolean
            addAccessibleSelection(arg0: int): void
            removeAccessibleSelection(arg0: int): void
            clearAccessibleSelection(): void
            selectAllAccessibleSelection(): void
        }
        class AccessibleState extends javax.accessibility.AccessibleBundle {
            public static ACTIVE: javax.accessibility.AccessibleState
            public static PRESSED: javax.accessibility.AccessibleState
            public static ARMED: javax.accessibility.AccessibleState
            public static BUSY: javax.accessibility.AccessibleState
            public static CHECKED: javax.accessibility.AccessibleState
            public static EDITABLE: javax.accessibility.AccessibleState
            public static EXPANDABLE: javax.accessibility.AccessibleState
            public static COLLAPSED: javax.accessibility.AccessibleState
            public static EXPANDED: javax.accessibility.AccessibleState
            public static ENABLED: javax.accessibility.AccessibleState
            public static FOCUSABLE: javax.accessibility.AccessibleState
            public static FOCUSED: javax.accessibility.AccessibleState
            public static ICONIFIED: javax.accessibility.AccessibleState
            public static MODAL: javax.accessibility.AccessibleState
            public static OPAQUE: javax.accessibility.AccessibleState
            public static RESIZABLE: javax.accessibility.AccessibleState
            public static MULTISELECTABLE: javax.accessibility.AccessibleState
            public static SELECTABLE: javax.accessibility.AccessibleState
            public static SELECTED: javax.accessibility.AccessibleState
            public static SHOWING: javax.accessibility.AccessibleState
            public static VISIBLE: javax.accessibility.AccessibleState
            public static VERTICAL: javax.accessibility.AccessibleState
            public static HORIZONTAL: javax.accessibility.AccessibleState
            public static SINGLE_LINE: javax.accessibility.AccessibleState
            public static MULTI_LINE: javax.accessibility.AccessibleState
            public static TRANSIENT: javax.accessibility.AccessibleState
            public static MANAGES_DESCENDANTS: javax.accessibility.AccessibleState
            public static INDETERMINATE: javax.accessibility.AccessibleState
            public static TRUNCATED: javax.accessibility.AccessibleState
            protected constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        class AccessibleStateSet {
            protected states: java.util.Vector<javax.accessibility.AccessibleState>
            public constructor()
            public constructor(arg0: javax.accessibility.AccessibleState[])
            public add(arg0: javax.accessibility.AccessibleState): boolean
            public addAll(arg0: javax.accessibility.AccessibleState[]): void
            public remove(arg0: javax.accessibility.AccessibleState): boolean
            public clear(): void
            public contains(arg0: javax.accessibility.AccessibleState): boolean
            public toArray(): javax.accessibility.AccessibleState[]
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface AccessibleStreamable {
            getMimeTypes(): java.awt.datatransfer.DataFlavor[]
            getStream(arg0: java.awt.datatransfer.DataFlavor): java.io.InputStream
        }
        interface AccessibleTable {
            getAccessibleCaption(): javax.accessibility.Accessible
            setAccessibleCaption(arg0: javax.accessibility.Accessible | javax.accessibility.Accessible$$Lambda): void
            getAccessibleSummary(): javax.accessibility.Accessible
            setAccessibleSummary(arg0: javax.accessibility.Accessible | javax.accessibility.Accessible$$Lambda): void
            getAccessibleRowCount(): int
            getAccessibleColumnCount(): int
            getAccessibleAt(arg0: int, arg1: int): javax.accessibility.Accessible
            getAccessibleRowExtentAt(arg0: int, arg1: int): int
            getAccessibleColumnExtentAt(arg0: int, arg1: int): int
            getAccessibleRowHeader(): javax.accessibility.AccessibleTable
            setAccessibleRowHeader(arg0: javax.accessibility.AccessibleTable): void
            getAccessibleColumnHeader(): javax.accessibility.AccessibleTable
            setAccessibleColumnHeader(arg0: javax.accessibility.AccessibleTable): void
            getAccessibleRowDescription(arg0: int): javax.accessibility.Accessible
            setAccessibleRowDescription(arg0: int, arg1: javax.accessibility.Accessible | javax.accessibility.Accessible$$Lambda): void
            getAccessibleColumnDescription(arg0: int): javax.accessibility.Accessible
            setAccessibleColumnDescription(arg0: int, arg1: javax.accessibility.Accessible | javax.accessibility.Accessible$$Lambda): void
            isAccessibleSelected(arg0: int, arg1: int): boolean
            isAccessibleRowSelected(arg0: int): boolean
            isAccessibleColumnSelected(arg0: int): boolean
            getSelectedAccessibleRows(): int[]
            getSelectedAccessibleColumns(): int[]
        }
        interface AccessibleTableModelChange {
            INSERT: int
            UPDATE: int
            DELETE: int
            getType(): int
            getFirstRow(): int
            getLastRow(): int
            getFirstColumn(): int
            getLastColumn(): int
        }
        interface AccessibleText {
            CHARACTER: int
            WORD: int
            SENTENCE: int
            getIndexAtPoint(arg0: java.awt.Point): int
            getCharacterBounds(arg0: int): java.awt.Rectangle
            getCharCount(): int
            getCaretPosition(): int
            getAtIndex(arg0: int, arg1: int): string
            getAfterIndex(arg0: int, arg1: int): string
            getBeforeIndex(arg0: int, arg1: int): string
            getCharacterAttribute(arg0: int): javax.swing.text.AttributeSet
            getSelectionStart(): int
            getSelectionEnd(): int
            getSelectedText(): string
        }
        class AccessibleTextSequence {
            public startIndex: int
            public endIndex: int
            public text: string
            public constructor(arg0: int, arg1: int, arg2: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        interface AccessibleValue {
            getCurrentAccessibleValue(): java.lang.Number
            setCurrentAccessibleValue(arg0: java.lang.Number): boolean
            getMinimumAccessibleValue(): java.lang.Number
            getMaximumAccessibleValue(): java.lang.Number
        }
    }
    namespace imageio {
        namespace event {
            interface IIOReadProgressListener extends java.util.EventListener {
                sequenceStarted(arg0: javax.imageio.ImageReader, arg1: int): void
                sequenceComplete(arg0: javax.imageio.ImageReader): void
                imageStarted(arg0: javax.imageio.ImageReader, arg1: int): void
                imageProgress(arg0: javax.imageio.ImageReader, arg1: float): void
                imageComplete(arg0: javax.imageio.ImageReader): void
                thumbnailStarted(arg0: javax.imageio.ImageReader, arg1: int, arg2: int): void
                thumbnailProgress(arg0: javax.imageio.ImageReader, arg1: float): void
                thumbnailComplete(arg0: javax.imageio.ImageReader): void
                readAborted(arg0: javax.imageio.ImageReader): void
            }
            interface IIOReadUpdateListener extends java.util.EventListener {
                passStarted(arg0: javax.imageio.ImageReader, arg1: java.awt.image.BufferedImage, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int[]): void
                imageUpdate(arg0: javax.imageio.ImageReader, arg1: java.awt.image.BufferedImage, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int[]): void
                passComplete(arg0: javax.imageio.ImageReader, arg1: java.awt.image.BufferedImage): void
                thumbnailPassStarted(arg0: javax.imageio.ImageReader, arg1: java.awt.image.BufferedImage, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int[]): void
                thumbnailUpdate(arg0: javax.imageio.ImageReader, arg1: java.awt.image.BufferedImage, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int[]): void
                thumbnailPassComplete(arg0: javax.imageio.ImageReader, arg1: java.awt.image.BufferedImage): void
            }
            interface IIOReadWarningListener extends java.util.EventListener {
                warningOccurred(arg0: javax.imageio.ImageReader, arg1: java.lang.String | string): void
            }
            interface IIOWriteProgressListener extends java.util.EventListener {
                imageStarted(arg0: javax.imageio.ImageWriter, arg1: int): void
                imageProgress(arg0: javax.imageio.ImageWriter, arg1: float): void
                imageComplete(arg0: javax.imageio.ImageWriter): void
                thumbnailStarted(arg0: javax.imageio.ImageWriter, arg1: int, arg2: int): void
                thumbnailProgress(arg0: javax.imageio.ImageWriter, arg1: float): void
                thumbnailComplete(arg0: javax.imageio.ImageWriter): void
                writeAborted(arg0: javax.imageio.ImageWriter): void
            }
            interface IIOWriteWarningListener extends java.util.EventListener {
                warningOccurred(arg0: javax.imageio.ImageWriter, arg1: int, arg2: java.lang.String | string): void
            }
        }
        namespace metadata {
            class IIOInvalidTreeException extends javax.imageio.IIOException {
                protected offendingNode: org.w3c.dom.Node
                public constructor(arg0: java.lang.String | string, arg1: org.w3c.dom.Node)
                public constructor(arg0: java.lang.String | string, arg1: java.lang.Throwable, arg2: org.w3c.dom.Node)
                public getOffendingNode(): org.w3c.dom.Node
                public static class: java.lang.Class<any>
            }
            abstract class IIOMetadata {
                protected standardFormatSupported: boolean
                protected nativeMetadataFormatName: string
                protected nativeMetadataFormatClassName: string
                protected extraMetadataFormatNames: java.lang.String[]
                protected extraMetadataFormatClassNames: java.lang.String[]
                protected defaultController: javax.imageio.metadata.IIOMetadataController
                protected controller: javax.imageio.metadata.IIOMetadataController
                protected constructor()
                protected constructor(arg0: boolean, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String[], arg4: java.lang.String[])
                public isStandardMetadataFormatSupported(): boolean
                public isReadOnly(): boolean
                public getNativeMetadataFormatName(): string
                public getExtraMetadataFormatNames(): java.lang.String[]
                public getMetadataFormatNames(): java.lang.String[]
                public getMetadataFormat(arg0: java.lang.String | string): javax.imageio.metadata.IIOMetadataFormat
                public getAsTree(arg0: java.lang.String | string): org.w3c.dom.Node
                public mergeTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                protected getStandardChromaNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardCompressionNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardDataNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardDimensionNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardDocumentNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardTextNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardTileNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardTransparencyNode(): javax.imageio.metadata.IIOMetadataNode
                protected getStandardTree(): javax.imageio.metadata.IIOMetadataNode
                public setFromTree(arg0: java.lang.String | string, arg1: org.w3c.dom.Node): void
                public reset(): void
                public setController(arg0: javax.imageio.metadata.IIOMetadataController | javax.imageio.metadata.IIOMetadataController$$Lambda): void
                public getController(): javax.imageio.metadata.IIOMetadataController
                public getDefaultController(): javax.imageio.metadata.IIOMetadataController
                public hasController(): boolean
                public activateController(): boolean
                public static class: java.lang.Class<any>
            }
            interface IIOMetadataController {
                activate(arg0: javax.imageio.metadata.IIOMetadata): boolean
            }
            interface IIOMetadataController$$Lambda {
                (arg0: javax.imageio.metadata.IIOMetadata): boolean
            }
            interface IIOMetadataFormat {
                CHILD_POLICY_EMPTY: int
                CHILD_POLICY_ALL: int
                CHILD_POLICY_SOME: int
                CHILD_POLICY_CHOICE: int
                CHILD_POLICY_SEQUENCE: int
                CHILD_POLICY_REPEAT: int
                CHILD_POLICY_MAX: int
                VALUE_NONE: int
                VALUE_ARBITRARY: int
                VALUE_RANGE: int
                VALUE_RANGE_MIN_INCLUSIVE_MASK: int
                VALUE_RANGE_MAX_INCLUSIVE_MASK: int
                VALUE_RANGE_MIN_INCLUSIVE: int
                VALUE_RANGE_MAX_INCLUSIVE: int
                VALUE_RANGE_MIN_MAX_INCLUSIVE: int
                VALUE_ENUMERATION: int
                VALUE_LIST: int
                DATATYPE_STRING: int
                DATATYPE_BOOLEAN: int
                DATATYPE_INTEGER: int
                DATATYPE_FLOAT: int
                DATATYPE_DOUBLE: int
                getRootName(): string
                canNodeAppear(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                getElementMinChildren(arg0: java.lang.String | string): int
                getElementMaxChildren(arg0: java.lang.String | string): int
                getElementDescription(arg0: java.lang.String | string, arg1: java.util.Locale): string
                getChildPolicy(arg0: java.lang.String | string): int
                getChildNames(arg0: java.lang.String | string): java.lang.String[]
                getAttributeNames(arg0: java.lang.String | string): java.lang.String[]
                getAttributeValueType(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                getAttributeDataType(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                isAttributeRequired(arg0: java.lang.String | string, arg1: java.lang.String | string): boolean
                getAttributeDefaultValue(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                getAttributeEnumerations(arg0: java.lang.String | string, arg1: java.lang.String | string): java.lang.String[]
                getAttributeMinValue(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                getAttributeMaxValue(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                getAttributeListMinLength(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                getAttributeListMaxLength(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                getAttributeDescription(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.util.Locale): string
                getObjectValueType(arg0: java.lang.String | string): int
                getObjectClass(arg0: java.lang.String | string): java.lang.Class<any>
                getObjectDefaultValue(arg0: java.lang.String | string): java.lang.Object
                getObjectEnumerations(arg0: java.lang.String | string): java.lang.Object[]
                getObjectMinValue(arg0: java.lang.String | string): java.lang.Comparable<any>
                getObjectMaxValue(arg0: java.lang.String | string): java.lang.Comparable<any>
                getObjectArrayMinLength(arg0: java.lang.String | string): int
                getObjectArrayMaxLength(arg0: java.lang.String | string): int
            }
            abstract class IIOMetadataFormatImpl implements javax.imageio.metadata.IIOMetadataFormat {
                public static standardMetadataFormatName: string
                public constructor(arg0: java.lang.String | string, arg1: int)
                public constructor(arg0: java.lang.String | string, arg1: int, arg2: int)
                protected setResourceBaseName(arg0: java.lang.String | string): void
                protected getResourceBaseName(): string
                protected addElement(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int): void
                protected addElement(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int, arg3: int): void
                protected addChildElement(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                protected removeElement(arg0: java.lang.String | string): void
                protected addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int, arg3: boolean, arg4: java.lang.String | string): void
                protected addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int, arg3: boolean, arg4: java.lang.String | string, arg5: java.util.List<java.lang.String>): void
                protected addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int, arg3: boolean, arg4: java.lang.String | string, arg5: java.lang.String | string, arg6: java.lang.String | string, arg7: boolean, arg8: boolean): void
                protected addAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: int, arg3: boolean, arg4: int, arg5: int): void
                protected addBooleanAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: boolean, arg3: boolean): void
                protected removeAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                protected addObjectValue<T>(arg0: java.lang.String | string, arg1: java.lang.Class<T>, arg2: boolean, arg3: T): void
                protected addObjectValue<T>(arg0: java.lang.String | string, arg1: java.lang.Class<T>, arg2: boolean, arg3: T, arg4: java.util.List<T>): void
                protected addObjectValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.Class<T>, arg2: T, arg3: java.lang.Comparable<T> | java.lang.Comparable$$Lambda<T>, arg4: java.lang.Comparable<T> | java.lang.Comparable$$Lambda<T>, arg5: boolean, arg6: boolean): void
                protected addObjectValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.Class<any>, arg2: int, arg3: int): void
                protected removeObjectValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): void
                public getRootName<T extends java.lang.Comparable<T>>(): string
                public canNodeAppear<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: javax.imageio.ImageTypeSpecifier): boolean
                public getElementMinChildren<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): int
                public getElementMaxChildren<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): int
                public getElementDescription<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.util.Locale): string
                public getChildPolicy<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): int
                public getChildNames<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.String[]
                public getAttributeNames<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.String[]
                public getAttributeValueType<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                public getAttributeDataType<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                public isAttributeRequired<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): boolean
                public getAttributeDefaultValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                public getAttributeEnumerations<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): java.lang.String[]
                public getAttributeMinValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                public getAttributeMaxValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                public getAttributeListMinLength<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                public getAttributeListMaxLength<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string): int
                public getAttributeDescription<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.util.Locale): string
                public getObjectValueType<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): int
                public getObjectClass<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.Class<any>
                public getObjectDefaultValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.Object
                public getObjectEnumerations<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.Object[]
                public getObjectMinValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.Comparable<any>
                public getObjectMaxValue<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): java.lang.Comparable<any>
                public getObjectArrayMinLength<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): int
                public getObjectArrayMaxLength<T extends java.lang.Comparable<T>>(arg0: java.lang.String | string): int
                public static getStandardFormatInstance<T extends java.lang.Comparable<T>>(): javax.imageio.metadata.IIOMetadataFormat
                public static class: java.lang.Class<any>
            }
            class IIOMetadataNode implements org.w3c.dom.Element , org.w3c.dom.NodeList {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public getNodeName(): string
                public getNodeValue(): string
                public setNodeValue(arg0: java.lang.String | string): void
                public getNodeType(): short
                public getParentNode(): org.w3c.dom.Node
                public getChildNodes(): org.w3c.dom.NodeList
                public getFirstChild(): org.w3c.dom.Node
                public getLastChild(): org.w3c.dom.Node
                public getPreviousSibling(): org.w3c.dom.Node
                public getNextSibling(): org.w3c.dom.Node
                public getAttributes(): org.w3c.dom.NamedNodeMap
                public getOwnerDocument(): org.w3c.dom.Document
                public insertBefore(arg0: org.w3c.dom.Node, arg1: org.w3c.dom.Node): org.w3c.dom.Node
                public replaceChild(arg0: org.w3c.dom.Node, arg1: org.w3c.dom.Node): org.w3c.dom.Node
                public removeChild(arg0: org.w3c.dom.Node): org.w3c.dom.Node
                public appendChild(arg0: org.w3c.dom.Node): org.w3c.dom.Node
                public hasChildNodes(): boolean
                public cloneNode(arg0: boolean): org.w3c.dom.Node
                public normalize(): void
                public isSupported(arg0: java.lang.String | string, arg1: java.lang.String | string): boolean
                public getNamespaceURI(): string
                public getPrefix(): string
                public setPrefix(arg0: java.lang.String | string): void
                public getLocalName(): string
                public getTagName(): string
                public getAttribute(arg0: java.lang.String | string): string
                public getAttributeNS(arg0: java.lang.String | string, arg1: java.lang.String | string): string
                public setAttribute(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                public setAttributeNS(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): void
                public removeAttribute(arg0: java.lang.String | string): void
                public removeAttributeNS(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                public getAttributeNode(arg0: java.lang.String | string): org.w3c.dom.Attr
                public getAttributeNodeNS(arg0: java.lang.String | string, arg1: java.lang.String | string): org.w3c.dom.Attr
                public setAttributeNode(arg0: org.w3c.dom.Attr): org.w3c.dom.Attr
                public setAttributeNodeNS(arg0: org.w3c.dom.Attr): org.w3c.dom.Attr
                public removeAttributeNode(arg0: org.w3c.dom.Attr): org.w3c.dom.Attr
                public getElementsByTagName(arg0: java.lang.String | string): org.w3c.dom.NodeList
                public getElementsByTagNameNS(arg0: java.lang.String | string, arg1: java.lang.String | string): org.w3c.dom.NodeList
                public hasAttributes(): boolean
                public hasAttribute(arg0: java.lang.String | string): boolean
                public hasAttributeNS(arg0: java.lang.String | string, arg1: java.lang.String | string): boolean
                public getLength(): int
                public item(arg0: int): org.w3c.dom.Node
                public getUserObject(): java.lang.Object
                public setUserObject(arg0: java.lang.Object): void
                public setIdAttribute(arg0: java.lang.String | string, arg1: boolean): void
                public setIdAttributeNS(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: boolean): void
                public setIdAttributeNode(arg0: org.w3c.dom.Attr, arg1: boolean): void
                public getSchemaTypeInfo(): org.w3c.dom.TypeInfo
                public setUserData(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: org.w3c.dom.UserDataHandler): java.lang.Object
                public getUserData(arg0: java.lang.String | string): java.lang.Object
                public getFeature(arg0: java.lang.String | string, arg1: java.lang.String | string): java.lang.Object
                public isSameNode(arg0: org.w3c.dom.Node): boolean
                public isEqualNode(arg0: org.w3c.dom.Node): boolean
                public lookupNamespaceURI(arg0: java.lang.String | string): string
                public isDefaultNamespace(arg0: java.lang.String | string): boolean
                public lookupPrefix(arg0: java.lang.String | string): string
                public getTextContent(): string
                public setTextContent(arg0: java.lang.String | string): void
                public compareDocumentPosition(arg0: org.w3c.dom.Node): short
                public getBaseURI(): string
                public static class: java.lang.Class<any>
            }
        }
        namespace plugins {
            namespace bmp {
                class BMPImageWriteParam extends javax.imageio.ImageWriteParam {
                    public constructor(arg0: java.util.Locale)
                    public constructor()
                    public setTopDown(arg0: boolean): void
                    public isTopDown(): boolean
                    public static class: java.lang.Class<any>
                }
            }
            namespace jpeg {
                class JPEGHuffmanTable {
                    public static StdDCLuminance: javax.imageio.plugins.jpeg.JPEGHuffmanTable
                    public static StdDCChrominance: javax.imageio.plugins.jpeg.JPEGHuffmanTable
                    public static StdACLuminance: javax.imageio.plugins.jpeg.JPEGHuffmanTable
                    public static StdACChrominance: javax.imageio.plugins.jpeg.JPEGHuffmanTable
                    public constructor(arg0: short[], arg1: short[])
                    public getLengths(): short[]
                    public getValues(): short[]
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class JPEGImageReadParam extends javax.imageio.ImageReadParam {
                    public constructor()
                    public areTablesSet(): boolean
                    public setDecodeTables(arg0: javax.imageio.plugins.jpeg.JPEGQTable[], arg1: javax.imageio.plugins.jpeg.JPEGHuffmanTable[], arg2: javax.imageio.plugins.jpeg.JPEGHuffmanTable[]): void
                    public unsetDecodeTables(): void
                    public getQTables(): javax.imageio.plugins.jpeg.JPEGQTable[]
                    public getDCHuffmanTables(): javax.imageio.plugins.jpeg.JPEGHuffmanTable[]
                    public getACHuffmanTables(): javax.imageio.plugins.jpeg.JPEGHuffmanTable[]
                    public static class: java.lang.Class<any>
                }
                class JPEGImageWriteParam extends javax.imageio.ImageWriteParam {
                    public constructor(arg0: java.util.Locale)
                    public unsetCompression(): void
                    public isCompressionLossless(): boolean
                    public getCompressionQualityDescriptions(): java.lang.String[]
                    public getCompressionQualityValues(): float[]
                    public areTablesSet(): boolean
                    public setEncodeTables(arg0: javax.imageio.plugins.jpeg.JPEGQTable[], arg1: javax.imageio.plugins.jpeg.JPEGHuffmanTable[], arg2: javax.imageio.plugins.jpeg.JPEGHuffmanTable[]): void
                    public unsetEncodeTables(): void
                    public getQTables(): javax.imageio.plugins.jpeg.JPEGQTable[]
                    public getDCHuffmanTables(): javax.imageio.plugins.jpeg.JPEGHuffmanTable[]
                    public getACHuffmanTables(): javax.imageio.plugins.jpeg.JPEGHuffmanTable[]
                    public setOptimizeHuffmanTables(arg0: boolean): void
                    public getOptimizeHuffmanTables(): boolean
                    public static class: java.lang.Class<any>
                }
                class JPEGQTable {
                    public static K1Luminance: javax.imageio.plugins.jpeg.JPEGQTable
                    public static K1Div2Luminance: javax.imageio.plugins.jpeg.JPEGQTable
                    public static K2Chrominance: javax.imageio.plugins.jpeg.JPEGQTable
                    public static K2Div2Chrominance: javax.imageio.plugins.jpeg.JPEGQTable
                    public constructor(arg0: int[])
                    public getTable(): int[]
                    public getScaledInstance(arg0: float, arg1: boolean): javax.imageio.plugins.jpeg.JPEGQTable
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
            }
        }
        namespace spi {
            class DigraphNode implements java.lang.Cloneable , java.io.Serializable {
                protected data: java.lang.Object
                protected outNodes: java.util.Set
                protected inDegree: int
                public constructor(arg0: java.lang.Object)
                public getData(): java.lang.Object
                public getOutNodes(): java.util.Iterator
                public addEdge(arg0: javax.imageio.spi.DigraphNode): boolean
                public hasEdge(arg0: javax.imageio.spi.DigraphNode): boolean
                public removeEdge(arg0: javax.imageio.spi.DigraphNode): boolean
                public dispose(): void
                public getInDegree(): int
                public static class: java.lang.Class<any>
            }
            class IIORegistry extends javax.imageio.spi.ServiceRegistry {
                public static getDefaultInstance(): javax.imageio.spi.IIORegistry
                public registerApplicationClasspathSpis(): void
                public static class: java.lang.Class<any>
            }
            abstract class IIOServiceProvider implements javax.imageio.spi.RegisterableService {
                protected vendorName: string
                protected version: string
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
                public constructor()
                public onRegistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                public onDeregistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                public getVendorName(): string
                public getVersion(): string
                public getDescription(arg0: java.util.Locale): string
                public static class: java.lang.Class<any>
            }
            abstract class ImageInputStreamSpi extends javax.imageio.spi.IIOServiceProvider {
                protected inputClass: java.lang.Class<any>
                protected constructor()
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.Class<any>)
                public getInputClass(): java.lang.Class<any>
                public canUseCacheFile(): boolean
                public needsCacheFile(): boolean
                public createInputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageInputStream
                public createInputStreamInstance(arg0: java.lang.Object): javax.imageio.stream.ImageInputStream
                public static class: java.lang.Class<any>
            }
            abstract class ImageOutputStreamSpi extends javax.imageio.spi.IIOServiceProvider {
                protected outputClass: java.lang.Class<any>
                protected constructor()
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.Class<any>)
                public getOutputClass(): java.lang.Class<any>
                public canUseCacheFile(): boolean
                public needsCacheFile(): boolean
                public createOutputStreamInstance(arg0: java.lang.Object, arg1: boolean, arg2: java.io.File): javax.imageio.stream.ImageOutputStream
                public createOutputStreamInstance(arg0: java.lang.Object): javax.imageio.stream.ImageOutputStream
                public static class: java.lang.Class<any>
            }
            abstract class ImageReaderSpi extends javax.imageio.spi.ImageReaderWriterSpi {
                public static STANDARD_INPUT_TYPE: java.lang.Class[]
                protected inputTypes: java.lang.Class[]
                protected writerSpiNames: java.lang.String[]
                protected constructor()
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String[], arg3: java.lang.String[], arg4: java.lang.String[], arg5: java.lang.String | string, arg6: java.lang.Class[], arg7: java.lang.String[], arg8: boolean, arg9: java.lang.String | string, arg10: java.lang.String | string, arg11: java.lang.String[], arg12: java.lang.String[], arg13: boolean, arg14: java.lang.String | string, arg15: java.lang.String | string, arg16: java.lang.String[], arg17: java.lang.String[])
                public getInputTypes(): java.lang.Class[]
                public canDecodeInput(arg0: java.lang.Object): boolean
                public createReaderInstance(): javax.imageio.ImageReader
                public createReaderInstance(arg0: java.lang.Object): javax.imageio.ImageReader
                public isOwnReader(arg0: javax.imageio.ImageReader): boolean
                public getImageWriterSpiNames(): java.lang.String[]
                public static class: java.lang.Class<any>
            }
            abstract class ImageReaderWriterSpi extends javax.imageio.spi.IIOServiceProvider {
                protected names: java.lang.String[]
                protected suffixes: java.lang.String[]
                protected MIMETypes: java.lang.String[]
                protected pluginClassName: string
                protected supportsStandardStreamMetadataFormat: boolean
                protected nativeStreamMetadataFormatName: string
                protected nativeStreamMetadataFormatClassName: string
                protected extraStreamMetadataFormatNames: java.lang.String[]
                protected extraStreamMetadataFormatClassNames: java.lang.String[]
                protected supportsStandardImageMetadataFormat: boolean
                protected nativeImageMetadataFormatName: string
                protected nativeImageMetadataFormatClassName: string
                protected extraImageMetadataFormatNames: java.lang.String[]
                protected extraImageMetadataFormatClassNames: java.lang.String[]
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String[], arg3: java.lang.String[], arg4: java.lang.String[], arg5: java.lang.String | string, arg6: boolean, arg7: java.lang.String | string, arg8: java.lang.String | string, arg9: java.lang.String[], arg10: java.lang.String[], arg11: boolean, arg12: java.lang.String | string, arg13: java.lang.String | string, arg14: java.lang.String[], arg15: java.lang.String[])
                public constructor()
                public getFormatNames(): java.lang.String[]
                public getFileSuffixes(): java.lang.String[]
                public getMIMETypes(): java.lang.String[]
                public getPluginClassName(): string
                public isStandardStreamMetadataFormatSupported(): boolean
                public getNativeStreamMetadataFormatName(): string
                public getExtraStreamMetadataFormatNames(): java.lang.String[]
                public isStandardImageMetadataFormatSupported(): boolean
                public getNativeImageMetadataFormatName(): string
                public getExtraImageMetadataFormatNames(): java.lang.String[]
                public getStreamMetadataFormat(arg0: java.lang.String | string): javax.imageio.metadata.IIOMetadataFormat
                public getImageMetadataFormat(arg0: java.lang.String | string): javax.imageio.metadata.IIOMetadataFormat
                public static class: java.lang.Class<any>
            }
            abstract class ImageTranscoderSpi extends javax.imageio.spi.IIOServiceProvider {
                protected constructor()
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
                public getReaderServiceProviderName(): string
                public getWriterServiceProviderName(): string
                public createTranscoderInstance(): javax.imageio.ImageTranscoder
                public static class: java.lang.Class<any>
            }
            abstract class ImageWriterSpi extends javax.imageio.spi.ImageReaderWriterSpi {
                public static STANDARD_OUTPUT_TYPE: java.lang.Class[]
                protected outputTypes: java.lang.Class[]
                protected readerSpiNames: java.lang.String[]
                protected constructor()
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String[], arg3: java.lang.String[], arg4: java.lang.String[], arg5: java.lang.String | string, arg6: java.lang.Class[], arg7: java.lang.String[], arg8: boolean, arg9: java.lang.String | string, arg10: java.lang.String | string, arg11: java.lang.String[], arg12: java.lang.String[], arg13: boolean, arg14: java.lang.String | string, arg15: java.lang.String | string, arg16: java.lang.String[], arg17: java.lang.String[])
                public isFormatLossless(): boolean
                public getOutputTypes(): java.lang.Class[]
                public canEncodeImage(arg0: javax.imageio.ImageTypeSpecifier): boolean
                public canEncodeImage(arg0: java.awt.image.RenderedImage): boolean
                public createWriterInstance(): javax.imageio.ImageWriter
                public createWriterInstance(arg0: java.lang.Object): javax.imageio.ImageWriter
                public isOwnWriter(arg0: javax.imageio.ImageWriter): boolean
                public getImageReaderSpiNames(): java.lang.String[]
                public static class: java.lang.Class<any>
            }
            class PartiallyOrderedSet extends java.util.AbstractSet {
                public constructor()
                public size(): int
                public contains(arg0: java.lang.Object): boolean
                public iterator(): java.util.Iterator
                public add(arg0: java.lang.Object): boolean
                public remove(arg0: java.lang.Object): boolean
                public clear(): void
                public setOrdering(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                public unsetOrdering(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                public hasOrdering(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            interface RegisterableService {
                onRegistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
                onDeregistration(arg0: javax.imageio.spi.ServiceRegistry, arg1: java.lang.Class<any>): void
            }
            class ServiceRegistry {
                public constructor(arg0: java.util.Iterator<java.lang.Class<any>>)
                public static lookupProviders<T>(arg0: java.lang.Class<T>, arg1: java.lang.ClassLoader): java.util.Iterator<T>
                public static lookupProviders<T>(arg0: java.lang.Class<T>): java.util.Iterator<T>
                public getCategories(): java.util.Iterator<java.lang.Class<any>>
                public registerServiceProvider<T>(arg0: T, arg1: java.lang.Class<T>): boolean
                public registerServiceProvider<T>(arg0: java.lang.Object): void
                public registerServiceProviders<T>(arg0: java.util.Iterator<any>): void
                public deregisterServiceProvider<T>(arg0: T, arg1: java.lang.Class<T>): boolean
                public deregisterServiceProvider<T>(arg0: java.lang.Object): void
                public contains<T>(arg0: java.lang.Object): boolean
                public getServiceProviders<T>(arg0: java.lang.Class<T>, arg1: boolean): java.util.Iterator<T>
                public getServiceProviders<T>(arg0: java.lang.Class<T>, arg1: javax.imageio.spi.ServiceRegistry$Filter, arg2: boolean): java.util.Iterator<T>
                public getServiceProviderByClass<T>(arg0: java.lang.Class<T>): T
                public setOrdering<T>(arg0: java.lang.Class<T>, arg1: T, arg2: T): boolean
                public unsetOrdering<T>(arg0: java.lang.Class<T>, arg1: T, arg2: T): boolean
                public deregisterAll<T>(arg0: java.lang.Class<any>): void
                public deregisterAll<T>(): void
                public finalize<T>(): void
                public static class: java.lang.Class<any>
            }
        }
        namespace stream {
            class FileCacheImageInputStream extends javax.imageio.stream.ImageInputStreamImpl {
                public constructor(arg0: java.io.InputStream, arg1: java.io.File)
                public read(): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public isCached(): boolean
                public isCachedFile(): boolean
                public isCachedMemory(): boolean
                public close(): void
                protected finalize(): void
                public static class: java.lang.Class<any>
            }
            class FileCacheImageOutputStream extends javax.imageio.stream.ImageOutputStreamImpl {
                public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: java.io.File)
                public read(): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public write(arg0: int): void
                public write(arg0: byte[], arg1: int, arg2: int): void
                public length(): long
                public seek(arg0: long): void
                public isCached(): boolean
                public isCachedFile(): boolean
                public isCachedMemory(): boolean
                public close(): void
                public flushBefore(arg0: long): void
                public static class: java.lang.Class<any>
            }
            class FileImageInputStream extends javax.imageio.stream.ImageInputStreamImpl {
                public constructor(arg0: java.io.File)
                public constructor(arg0: java.io.RandomAccessFile)
                public read(): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public length(): long
                public seek(arg0: long): void
                public close(): void
                protected finalize(): void
                public static class: java.lang.Class<any>
            }
            class FileImageOutputStream extends javax.imageio.stream.ImageOutputStreamImpl {
                public constructor(arg0: java.io.File)
                public constructor(arg0: java.io.RandomAccessFile)
                public read(): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public write(arg0: int): void
                public write(arg0: byte[], arg1: int, arg2: int): void
                public length(): long
                public seek(arg0: long): void
                public close(): void
                protected finalize(): void
                public static class: java.lang.Class<any>
            }
            class IIOByteBuffer {
                public constructor(arg0: byte[], arg1: int, arg2: int)
                public getData(): byte[]
                public setData(arg0: byte[]): void
                public getOffset(): int
                public setOffset(arg0: int): void
                public getLength(): int
                public setLength(arg0: int): void
                public static class: java.lang.Class<any>
            }
            interface ImageInputStream extends java.io.DataInput , java.io.Closeable {
                setByteOrder(arg0: java.nio.ByteOrder): void
                getByteOrder(): java.nio.ByteOrder
                read(): int
                read(arg0: byte[]): int
                read(arg0: byte[], arg1: int, arg2: int): int
                readBytes(arg0: javax.imageio.stream.IIOByteBuffer, arg1: int): void
                readBoolean(): boolean
                readByte(): byte
                readUnsignedByte(): int
                readShort(): short
                readUnsignedShort(): int
                readChar(): char
                readInt(): int
                readUnsignedInt(): long
                readLong(): long
                readFloat(): float
                readDouble(): double
                readLine(): string
                readUTF(): string
                readFully(arg0: byte[], arg1: int, arg2: int): void
                readFully(arg0: byte[]): void
                readFully(arg0: short[], arg1: int, arg2: int): void
                readFully(arg0: char[], arg1: int, arg2: int): void
                readFully(arg0: int[], arg1: int, arg2: int): void
                readFully(arg0: long[], arg1: int, arg2: int): void
                readFully(arg0: float[], arg1: int, arg2: int): void
                readFully(arg0: double[], arg1: int, arg2: int): void
                getStreamPosition(): long
                getBitOffset(): int
                setBitOffset(arg0: int): void
                readBit(): int
                readBits(arg0: int): long
                length(): long
                skipBytes(arg0: int): int
                skipBytes(arg0: long): long
                seek(arg0: long): void
                mark(): void
                reset(): void
                flushBefore(arg0: long): void
                flush(): void
                getFlushedPosition(): long
                isCached(): boolean
                isCachedMemory(): boolean
                isCachedFile(): boolean
                close(): void
            }
            abstract class ImageInputStreamImpl implements javax.imageio.stream.ImageInputStream {
                protected byteOrder: java.nio.ByteOrder
                protected streamPos: long
                protected bitOffset: int
                protected flushedPos: long
                public constructor()
                protected checkClosed(): void
                public setByteOrder(arg0: java.nio.ByteOrder): void
                public getByteOrder(): java.nio.ByteOrder
                public read(): int
                public read(arg0: byte[]): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public readBytes(arg0: javax.imageio.stream.IIOByteBuffer, arg1: int): void
                public readBoolean(): boolean
                public readByte(): byte
                public readUnsignedByte(): int
                public readShort(): short
                public readUnsignedShort(): int
                public readChar(): char
                public readInt(): int
                public readUnsignedInt(): long
                public readLong(): long
                public readFloat(): float
                public readDouble(): double
                public readLine(): string
                public readUTF(): string
                public readFully(arg0: byte[], arg1: int, arg2: int): void
                public readFully(arg0: byte[]): void
                public readFully(arg0: short[], arg1: int, arg2: int): void
                public readFully(arg0: char[], arg1: int, arg2: int): void
                public readFully(arg0: int[], arg1: int, arg2: int): void
                public readFully(arg0: long[], arg1: int, arg2: int): void
                public readFully(arg0: float[], arg1: int, arg2: int): void
                public readFully(arg0: double[], arg1: int, arg2: int): void
                public getStreamPosition(): long
                public getBitOffset(): int
                public setBitOffset(arg0: int): void
                public readBit(): int
                public readBits(arg0: int): long
                public length(): long
                public skipBytes(arg0: int): int
                public skipBytes(arg0: long): long
                public seek(arg0: long): void
                public mark(): void
                public reset(): void
                public flushBefore(arg0: long): void
                public flush(): void
                public getFlushedPosition(): long
                public isCached(): boolean
                public isCachedMemory(): boolean
                public isCachedFile(): boolean
                public close(): void
                protected finalize(): void
                public static class: java.lang.Class<any>
            }
            interface ImageOutputStream extends javax.imageio.stream.ImageInputStream , java.io.DataOutput {
                write(arg0: int): void
                write(arg0: byte[]): void
                write(arg0: byte[], arg1: int, arg2: int): void
                writeBoolean(arg0: boolean): void
                writeByte(arg0: int): void
                writeShort(arg0: int): void
                writeChar(arg0: int): void
                writeInt(arg0: int): void
                writeLong(arg0: long): void
                writeFloat(arg0: float): void
                writeDouble(arg0: double): void
                writeBytes(arg0: java.lang.String | string): void
                writeChars(arg0: java.lang.String | string): void
                writeUTF(arg0: java.lang.String | string): void
                writeShorts(arg0: short[], arg1: int, arg2: int): void
                writeChars(arg0: char[], arg1: int, arg2: int): void
                writeInts(arg0: int[], arg1: int, arg2: int): void
                writeLongs(arg0: long[], arg1: int, arg2: int): void
                writeFloats(arg0: float[], arg1: int, arg2: int): void
                writeDoubles(arg0: double[], arg1: int, arg2: int): void
                writeBit(arg0: int): void
                writeBits(arg0: long, arg1: int): void
                flushBefore(arg0: long): void
            }
            abstract class ImageOutputStreamImpl extends javax.imageio.stream.ImageInputStreamImpl implements javax.imageio.stream.ImageOutputStream {
                public constructor()
                public write(arg0: int): void
                public write(arg0: byte[]): void
                public write(arg0: byte[], arg1: int, arg2: int): void
                public writeBoolean(arg0: boolean): void
                public writeByte(arg0: int): void
                public writeShort(arg0: int): void
                public writeChar(arg0: int): void
                public writeInt(arg0: int): void
                public writeLong(arg0: long): void
                public writeFloat(arg0: float): void
                public writeDouble(arg0: double): void
                public writeBytes(arg0: java.lang.String | string): void
                public writeChars(arg0: java.lang.String | string): void
                public writeUTF(arg0: java.lang.String | string): void
                public writeShorts(arg0: short[], arg1: int, arg2: int): void
                public writeChars(arg0: char[], arg1: int, arg2: int): void
                public writeInts(arg0: int[], arg1: int, arg2: int): void
                public writeLongs(arg0: long[], arg1: int, arg2: int): void
                public writeFloats(arg0: float[], arg1: int, arg2: int): void
                public writeDoubles(arg0: double[], arg1: int, arg2: int): void
                public writeBit(arg0: int): void
                public writeBits(arg0: long, arg1: int): void
                protected flushBits(): void
                public static class: java.lang.Class<any>
            }
            class MemoryCache {
                public loadFromStream(arg0: java.io.InputStream, arg1: long): long
                public writeToStream(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: long, arg2: long): void
                public write(arg0: byte[], arg1: int, arg2: int, arg3: long): void
                public write(arg0: int, arg1: long): void
                public getLength(): long
                public read(arg0: long): int
                public read(arg0: byte[], arg1: int, arg2: int, arg3: long): void
                public disposeBefore(arg0: long): void
                public reset(): void
                public static class: java.lang.Class<any>
            }
            class MemoryCacheImageInputStream extends javax.imageio.stream.ImageInputStreamImpl {
                public constructor(arg0: java.io.InputStream)
                public read(): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public flushBefore(arg0: long): void
                public isCached(): boolean
                public isCachedFile(): boolean
                public isCachedMemory(): boolean
                public close(): void
                protected finalize(): void
                public static class: java.lang.Class<any>
            }
            class MemoryCacheImageOutputStream extends javax.imageio.stream.ImageOutputStreamImpl {
                public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
                public read(): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public write(arg0: int): void
                public write(arg0: byte[], arg1: int, arg2: int): void
                public length(): long
                public isCached(): boolean
                public isCachedFile(): boolean
                public isCachedMemory(): boolean
                public close(): void
                public flushBefore(arg0: long): void
                public static class: java.lang.Class<any>
            }
        }
        class IIOException extends java.io.IOException {
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Throwable)
            public static class: java.lang.Class<any>
        }
        class IIOImage {
            protected image: java.awt.image.RenderedImage
            protected raster: java.awt.image.Raster
            protected thumbnails: java.util.List<java.awt.image.BufferedImage>
            protected metadata: javax.imageio.metadata.IIOMetadata
            public constructor(arg0: java.awt.image.RenderedImage, arg1: java.util.List<java.awt.image.BufferedImage>, arg2: javax.imageio.metadata.IIOMetadata)
            public constructor(arg0: java.awt.image.Raster, arg1: java.util.List<java.awt.image.BufferedImage>, arg2: javax.imageio.metadata.IIOMetadata)
            public getRenderedImage(): java.awt.image.RenderedImage
            public setRenderedImage(arg0: java.awt.image.RenderedImage): void
            public hasRaster(): boolean
            public getRaster(): java.awt.image.Raster
            public setRaster(arg0: java.awt.image.Raster): void
            public getNumThumbnails(): int
            public getThumbnail(arg0: int): java.awt.image.BufferedImage
            public getThumbnails(): java.util.List<java.awt.image.BufferedImage>
            public setThumbnails(arg0: java.util.List<java.awt.image.BufferedImage>): void
            public getMetadata(): javax.imageio.metadata.IIOMetadata
            public setMetadata(arg0: javax.imageio.metadata.IIOMetadata): void
            public static class: java.lang.Class<any>
        }
        abstract class IIOParam {
            protected sourceRegion: java.awt.Rectangle
            protected sourceXSubsampling: int
            protected sourceYSubsampling: int
            protected subsamplingXOffset: int
            protected subsamplingYOffset: int
            protected sourceBands: int[]
            protected destinationType: javax.imageio.ImageTypeSpecifier
            protected destinationOffset: java.awt.Point
            protected defaultController: javax.imageio.IIOParamController
            protected controller: javax.imageio.IIOParamController
            protected constructor()
            public setSourceRegion(arg0: java.awt.Rectangle): void
            public getSourceRegion(): java.awt.Rectangle
            public setSourceSubsampling(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getSourceXSubsampling(): int
            public getSourceYSubsampling(): int
            public getSubsamplingXOffset(): int
            public getSubsamplingYOffset(): int
            public setSourceBands(arg0: int[]): void
            public getSourceBands(): int[]
            public setDestinationType(arg0: javax.imageio.ImageTypeSpecifier): void
            public getDestinationType(): javax.imageio.ImageTypeSpecifier
            public setDestinationOffset(arg0: java.awt.Point): void
            public getDestinationOffset(): java.awt.Point
            public setController(arg0: javax.imageio.IIOParamController | javax.imageio.IIOParamController$$Lambda): void
            public getController(): javax.imageio.IIOParamController
            public getDefaultController(): javax.imageio.IIOParamController
            public hasController(): boolean
            public activateController(): boolean
            public static class: java.lang.Class<any>
        }
        interface IIOParamController {
            activate(arg0: javax.imageio.IIOParam): boolean
        }
        interface IIOParamController$$Lambda {
            (arg0: javax.imageio.IIOParam): boolean
        }
        class ImageIO {
            public static scanForPlugins(): void
            public static setUseCache(arg0: boolean): void
            public static getUseCache(): boolean
            public static setCacheDirectory(arg0: java.io.File): void
            public static getCacheDirectory(): java.io.File
            public static createImageInputStream(arg0: java.lang.Object): javax.imageio.stream.ImageInputStream
            public static createImageOutputStream(arg0: java.lang.Object): javax.imageio.stream.ImageOutputStream
            public static getReaderFormatNames(): java.lang.String[]
            public static getReaderMIMETypes(): java.lang.String[]
            public static getReaderFileSuffixes(): java.lang.String[]
            public static getImageReaders(arg0: java.lang.Object): java.util.Iterator<javax.imageio.ImageReader>
            public static getImageReadersByFormatName(arg0: java.lang.String | string): java.util.Iterator<javax.imageio.ImageReader>
            public static getImageReadersBySuffix(arg0: java.lang.String | string): java.util.Iterator<javax.imageio.ImageReader>
            public static getImageReadersByMIMEType(arg0: java.lang.String | string): java.util.Iterator<javax.imageio.ImageReader>
            public static getWriterFormatNames(): java.lang.String[]
            public static getWriterMIMETypes(): java.lang.String[]
            public static getWriterFileSuffixes(): java.lang.String[]
            public static getImageWritersByFormatName(arg0: java.lang.String | string): java.util.Iterator<javax.imageio.ImageWriter>
            public static getImageWritersBySuffix(arg0: java.lang.String | string): java.util.Iterator<javax.imageio.ImageWriter>
            public static getImageWritersByMIMEType(arg0: java.lang.String | string): java.util.Iterator<javax.imageio.ImageWriter>
            public static getImageWriter(arg0: javax.imageio.ImageReader): javax.imageio.ImageWriter
            public static getImageReader(arg0: javax.imageio.ImageWriter): javax.imageio.ImageReader
            public static getImageWriters(arg0: javax.imageio.ImageTypeSpecifier, arg1: java.lang.String | string): java.util.Iterator<javax.imageio.ImageWriter>
            public static getImageTranscoders(arg0: javax.imageio.ImageReader, arg1: javax.imageio.ImageWriter): java.util.Iterator<javax.imageio.ImageTranscoder>
            public static read(arg0: java.io.File): java.awt.image.BufferedImage
            public static read(arg0: java.io.InputStream): java.awt.image.BufferedImage
            public static read(arg0: java.net.URL): java.awt.image.BufferedImage
            public static read(arg0: javax.imageio.stream.ImageInputStream): java.awt.image.BufferedImage
            public static write(arg0: java.awt.image.RenderedImage, arg1: java.lang.String | string, arg2: javax.imageio.stream.ImageOutputStream): boolean
            public static write(arg0: java.awt.image.RenderedImage, arg1: java.lang.String | string, arg2: java.io.File): boolean
            public static write(arg0: java.awt.image.RenderedImage, arg1: java.lang.String | string, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): boolean
            public static class: java.lang.Class<any>
        }
        class ImageReadParam extends javax.imageio.IIOParam {
            protected canSetSourceRenderSize: boolean
            protected sourceRenderSize: java.awt.Dimension
            protected destination: java.awt.image.BufferedImage
            protected destinationBands: int[]
            protected minProgressivePass: int
            protected numProgressivePasses: int
            public constructor()
            public setDestinationType(arg0: javax.imageio.ImageTypeSpecifier): void
            public setDestination(arg0: java.awt.image.BufferedImage): void
            public getDestination(): java.awt.image.BufferedImage
            public setDestinationBands(arg0: int[]): void
            public getDestinationBands(): int[]
            public canSetSourceRenderSize(): boolean
            public setSourceRenderSize(arg0: java.awt.Dimension): void
            public getSourceRenderSize(): java.awt.Dimension
            public setSourceProgressivePasses(arg0: int, arg1: int): void
            public getSourceMinProgressivePass(): int
            public getSourceMaxProgressivePass(): int
            public getSourceNumProgressivePasses(): int
            public static class: java.lang.Class<any>
        }
        abstract class ImageReader {
            protected originatingProvider: javax.imageio.spi.ImageReaderSpi
            protected input: java.lang.Object
            protected seekForwardOnly: boolean
            protected ignoreMetadata: boolean
            protected minIndex: int
            protected availableLocales: java.util.Locale[]
            protected locale: java.util.Locale
            protected warningListeners: java.util.List<javax.imageio.event.IIOReadWarningListener>
            protected warningLocales: java.util.List<java.util.Locale>
            protected progressListeners: java.util.List<javax.imageio.event.IIOReadProgressListener>
            protected updateListeners: java.util.List<javax.imageio.event.IIOReadUpdateListener>
            protected constructor(arg0: javax.imageio.spi.ImageReaderSpi)
            public getFormatName(): string
            public getOriginatingProvider(): javax.imageio.spi.ImageReaderSpi
            public setInput(arg0: java.lang.Object, arg1: boolean, arg2: boolean): void
            public setInput(arg0: java.lang.Object, arg1: boolean): void
            public setInput(arg0: java.lang.Object): void
            public getInput(): java.lang.Object
            public isSeekForwardOnly(): boolean
            public isIgnoringMetadata(): boolean
            public getMinIndex(): int
            public getAvailableLocales(): java.util.Locale[]
            public setLocale(arg0: java.util.Locale): void
            public getLocale(): java.util.Locale
            public getNumImages(arg0: boolean): int
            public getWidth(arg0: int): int
            public getHeight(arg0: int): int
            public isRandomAccessEasy(arg0: int): boolean
            public getAspectRatio(arg0: int): float
            public getRawImageType(arg0: int): javax.imageio.ImageTypeSpecifier
            public getImageTypes(arg0: int): java.util.Iterator<javax.imageio.ImageTypeSpecifier>
            public getDefaultReadParam(): javax.imageio.ImageReadParam
            public getStreamMetadata(): javax.imageio.metadata.IIOMetadata
            public getStreamMetadata(arg0: java.lang.String | string, arg1: java.util.Set<java.lang.String>): javax.imageio.metadata.IIOMetadata
            public getImageMetadata(arg0: int): javax.imageio.metadata.IIOMetadata
            public getImageMetadata(arg0: int, arg1: java.lang.String | string, arg2: java.util.Set<java.lang.String>): javax.imageio.metadata.IIOMetadata
            public read(arg0: int): java.awt.image.BufferedImage
            public read(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.BufferedImage
            public readAll(arg0: int, arg1: javax.imageio.ImageReadParam): javax.imageio.IIOImage
            public readAll(arg0: java.util.Iterator<javax.imageio.ImageReadParam>): java.util.Iterator<javax.imageio.IIOImage>
            public canReadRaster(): boolean
            public readRaster(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.Raster
            public isImageTiled(arg0: int): boolean
            public getTileWidth(arg0: int): int
            public getTileHeight(arg0: int): int
            public getTileGridXOffset(arg0: int): int
            public getTileGridYOffset(arg0: int): int
            public readTile(arg0: int, arg1: int, arg2: int): java.awt.image.BufferedImage
            public readTileRaster(arg0: int, arg1: int, arg2: int): java.awt.image.Raster
            public readAsRenderedImage(arg0: int, arg1: javax.imageio.ImageReadParam): java.awt.image.RenderedImage
            public readerSupportsThumbnails(): boolean
            public hasThumbnails(arg0: int): boolean
            public getNumThumbnails(arg0: int): int
            public getThumbnailWidth(arg0: int, arg1: int): int
            public getThumbnailHeight(arg0: int, arg1: int): int
            public readThumbnail(arg0: int, arg1: int): java.awt.image.BufferedImage
            public abort(): void
            protected abortRequested(): boolean
            protected clearAbortRequest(): void
            public addIIOReadWarningListener(arg0: javax.imageio.event.IIOReadWarningListener): void
            public removeIIOReadWarningListener(arg0: javax.imageio.event.IIOReadWarningListener): void
            public removeAllIIOReadWarningListeners(): void
            public addIIOReadProgressListener(arg0: javax.imageio.event.IIOReadProgressListener): void
            public removeIIOReadProgressListener(arg0: javax.imageio.event.IIOReadProgressListener): void
            public removeAllIIOReadProgressListeners(): void
            public addIIOReadUpdateListener(arg0: javax.imageio.event.IIOReadUpdateListener): void
            public removeIIOReadUpdateListener(arg0: javax.imageio.event.IIOReadUpdateListener): void
            public removeAllIIOReadUpdateListeners(): void
            protected processSequenceStarted(arg0: int): void
            protected processSequenceComplete(): void
            protected processImageStarted(arg0: int): void
            protected processImageProgress(arg0: float): void
            protected processImageComplete(): void
            protected processThumbnailStarted(arg0: int, arg1: int): void
            protected processThumbnailProgress(arg0: float): void
            protected processThumbnailComplete(): void
            protected processReadAborted(): void
            protected processPassStarted(arg0: java.awt.image.BufferedImage, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int[]): void
            protected processImageUpdate(arg0: java.awt.image.BufferedImage, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int[]): void
            protected processPassComplete(arg0: java.awt.image.BufferedImage): void
            protected processThumbnailPassStarted(arg0: java.awt.image.BufferedImage, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int[]): void
            protected processThumbnailUpdate(arg0: java.awt.image.BufferedImage, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int[]): void
            protected processThumbnailPassComplete(arg0: java.awt.image.BufferedImage): void
            protected processWarningOccurred(arg0: java.lang.String | string): void
            protected processWarningOccurred(arg0: java.lang.String | string, arg1: java.lang.String | string): void
            public reset(): void
            public dispose(): void
            protected static getSourceRegion(arg0: javax.imageio.ImageReadParam, arg1: int, arg2: int): java.awt.Rectangle
            protected static computeRegions(arg0: javax.imageio.ImageReadParam, arg1: int, arg2: int, arg3: java.awt.image.BufferedImage, arg4: java.awt.Rectangle, arg5: java.awt.Rectangle): void
            protected static checkReadParamBandSettings(arg0: javax.imageio.ImageReadParam, arg1: int, arg2: int): void
            protected static getDestination(arg0: javax.imageio.ImageReadParam, arg1: java.util.Iterator<javax.imageio.ImageTypeSpecifier>, arg2: int, arg3: int): java.awt.image.BufferedImage
            public static class: java.lang.Class<any>
        }
        interface ImageTranscoder {
            convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
            convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
        }
        class ImageTypeSpecifier {
            protected colorModel: java.awt.image.ColorModel
            protected sampleModel: java.awt.image.SampleModel
            public constructor(arg0: java.awt.image.ColorModel, arg1: java.awt.image.SampleModel)
            public constructor(arg0: java.awt.image.RenderedImage)
            public static createPacked(arg0: java.awt.color.ColorSpace, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: boolean): javax.imageio.ImageTypeSpecifier
            public static createInterleaved(arg0: java.awt.color.ColorSpace, arg1: int[], arg2: int, arg3: boolean, arg4: boolean): javax.imageio.ImageTypeSpecifier
            public static createBanded(arg0: java.awt.color.ColorSpace, arg1: int[], arg2: int[], arg3: int, arg4: boolean, arg5: boolean): javax.imageio.ImageTypeSpecifier
            public static createGrayscale(arg0: int, arg1: int, arg2: boolean): javax.imageio.ImageTypeSpecifier
            public static createGrayscale(arg0: int, arg1: int, arg2: boolean, arg3: boolean): javax.imageio.ImageTypeSpecifier
            public static createIndexed(arg0: byte[], arg1: byte[], arg2: byte[], arg3: byte[], arg4: int, arg5: int): javax.imageio.ImageTypeSpecifier
            public static createFromBufferedImageType(arg0: int): javax.imageio.ImageTypeSpecifier
            public static createFromRenderedImage(arg0: java.awt.image.RenderedImage): javax.imageio.ImageTypeSpecifier
            public getBufferedImageType(): int
            public getNumComponents(): int
            public getNumBands(): int
            public getBitsPerBand(arg0: int): int
            public getSampleModel(): java.awt.image.SampleModel
            public getSampleModel(arg0: int, arg1: int): java.awt.image.SampleModel
            public getColorModel(): java.awt.image.ColorModel
            public createBufferedImage(arg0: int, arg1: int): java.awt.image.BufferedImage
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            public static class: java.lang.Class<any>
        }
        class ImageWriteParam extends javax.imageio.IIOParam {
            public static MODE_DISABLED: int
            public static MODE_DEFAULT: int
            public static MODE_EXPLICIT: int
            public static MODE_COPY_FROM_METADATA: int
            protected canWriteTiles: boolean
            protected tilingMode: int
            protected preferredTileSizes: java.awt.Dimension[]
            protected tilingSet: boolean
            protected tileWidth: int
            protected tileHeight: int
            protected canOffsetTiles: boolean
            protected tileGridXOffset: int
            protected tileGridYOffset: int
            protected canWriteProgressive: boolean
            protected progressiveMode: int
            protected canWriteCompressed: boolean
            protected compressionMode: int
            protected compressionTypes: java.lang.String[]
            protected compressionType: string
            protected compressionQuality: float
            protected locale: java.util.Locale
            protected constructor()
            public constructor(arg0: java.util.Locale)
            public getLocale(): java.util.Locale
            public canWriteTiles(): boolean
            public canOffsetTiles(): boolean
            public setTilingMode(arg0: int): void
            public getTilingMode(): int
            public getPreferredTileSizes(): java.awt.Dimension[]
            public setTiling(arg0: int, arg1: int, arg2: int, arg3: int): void
            public unsetTiling(): void
            public getTileWidth(): int
            public getTileHeight(): int
            public getTileGridXOffset(): int
            public getTileGridYOffset(): int
            public canWriteProgressive(): boolean
            public setProgressiveMode(arg0: int): void
            public getProgressiveMode(): int
            public canWriteCompressed(): boolean
            public setCompressionMode(arg0: int): void
            public getCompressionMode(): int
            public getCompressionTypes(): java.lang.String[]
            public setCompressionType(arg0: java.lang.String | string): void
            public getCompressionType(): string
            public unsetCompression(): void
            public getLocalizedCompressionTypeName(): string
            public isCompressionLossless(): boolean
            public setCompressionQuality(arg0: float): void
            public getCompressionQuality(): float
            public getBitRate(arg0: float): float
            public getCompressionQualityDescriptions(): java.lang.String[]
            public getCompressionQualityValues(): float[]
            public static class: java.lang.Class<any>
        }
        abstract class ImageWriter implements javax.imageio.ImageTranscoder {
            protected originatingProvider: javax.imageio.spi.ImageWriterSpi
            protected output: java.lang.Object
            protected availableLocales: java.util.Locale[]
            protected locale: java.util.Locale
            protected warningListeners: java.util.List<javax.imageio.event.IIOWriteWarningListener>
            protected warningLocales: java.util.List<java.util.Locale>
            protected progressListeners: java.util.List<javax.imageio.event.IIOWriteProgressListener>
            protected constructor(arg0: javax.imageio.spi.ImageWriterSpi)
            public getOriginatingProvider(): javax.imageio.spi.ImageWriterSpi
            public setOutput(arg0: java.lang.Object): void
            public getOutput(): java.lang.Object
            public getAvailableLocales(): java.util.Locale[]
            public setLocale(arg0: java.util.Locale): void
            public getLocale(): java.util.Locale
            public getDefaultWriteParam(): javax.imageio.ImageWriteParam
            public getDefaultStreamMetadata(arg0: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
            public getDefaultImageMetadata(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
            public convertStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
            public convertImageMetadata(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: javax.imageio.ImageWriteParam): javax.imageio.metadata.IIOMetadata
            public getNumThumbnailsSupported(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam, arg2: javax.imageio.metadata.IIOMetadata, arg3: javax.imageio.metadata.IIOMetadata): int
            public getPreferredThumbnailSizes(arg0: javax.imageio.ImageTypeSpecifier, arg1: javax.imageio.ImageWriteParam, arg2: javax.imageio.metadata.IIOMetadata, arg3: javax.imageio.metadata.IIOMetadata): java.awt.Dimension[]
            public canWriteRasters(): boolean
            public write(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
            public write(arg0: javax.imageio.IIOImage): void
            public write(arg0: java.awt.image.RenderedImage): void
            public canWriteSequence(): boolean
            public prepareWriteSequence(arg0: javax.imageio.metadata.IIOMetadata): void
            public writeToSequence(arg0: javax.imageio.IIOImage, arg1: javax.imageio.ImageWriteParam): void
            public endWriteSequence(): void
            public canReplaceStreamMetadata(): boolean
            public replaceStreamMetadata(arg0: javax.imageio.metadata.IIOMetadata): void
            public canReplaceImageMetadata(arg0: int): boolean
            public replaceImageMetadata(arg0: int, arg1: javax.imageio.metadata.IIOMetadata): void
            public canInsertImage(arg0: int): boolean
            public writeInsert(arg0: int, arg1: javax.imageio.IIOImage, arg2: javax.imageio.ImageWriteParam): void
            public canRemoveImage(arg0: int): boolean
            public removeImage(arg0: int): void
            public canWriteEmpty(): boolean
            public prepareWriteEmpty(arg0: javax.imageio.metadata.IIOMetadata, arg1: javax.imageio.ImageTypeSpecifier, arg2: int, arg3: int, arg4: javax.imageio.metadata.IIOMetadata, arg5: java.util.List<java.awt.image.BufferedImage>, arg6: javax.imageio.ImageWriteParam): void
            public endWriteEmpty(): void
            public canInsertEmpty(arg0: int): boolean
            public prepareInsertEmpty(arg0: int, arg1: javax.imageio.ImageTypeSpecifier, arg2: int, arg3: int, arg4: javax.imageio.metadata.IIOMetadata, arg5: java.util.List<java.awt.image.BufferedImage>, arg6: javax.imageio.ImageWriteParam): void
            public endInsertEmpty(): void
            public canReplacePixels(arg0: int): boolean
            public prepareReplacePixels(arg0: int, arg1: java.awt.Rectangle): void
            public replacePixels(arg0: java.awt.image.RenderedImage, arg1: javax.imageio.ImageWriteParam): void
            public replacePixels(arg0: java.awt.image.Raster, arg1: javax.imageio.ImageWriteParam): void
            public endReplacePixels(): void
            public abort(): void
            protected abortRequested(): boolean
            protected clearAbortRequest(): void
            public addIIOWriteWarningListener(arg0: javax.imageio.event.IIOWriteWarningListener): void
            public removeIIOWriteWarningListener(arg0: javax.imageio.event.IIOWriteWarningListener): void
            public removeAllIIOWriteWarningListeners(): void
            public addIIOWriteProgressListener(arg0: javax.imageio.event.IIOWriteProgressListener): void
            public removeIIOWriteProgressListener(arg0: javax.imageio.event.IIOWriteProgressListener): void
            public removeAllIIOWriteProgressListeners(): void
            protected processImageStarted(arg0: int): void
            protected processImageProgress(arg0: float): void
            protected processImageComplete(): void
            protected processThumbnailStarted(arg0: int, arg1: int): void
            protected processThumbnailProgress(arg0: float): void
            protected processThumbnailComplete(): void
            protected processWriteAborted(): void
            protected processWarningOccurred(arg0: int, arg1: java.lang.String | string): void
            protected processWarningOccurred(arg0: int, arg1: java.lang.String | string, arg2: java.lang.String | string): void
            public reset(): void
            public dispose(): void
            public static class: java.lang.Class<any>
        }
    }
    namespace print {
        namespace attribute {
            namespace standard {
                class Chromaticity extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static MONOCHROME: javax.print.attribute.standard.Chromaticity
                    public static COLOR: javax.print.attribute.standard.Chromaticity
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class ColorSupported extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public static NOT_SUPPORTED: javax.print.attribute.standard.ColorSupported
                    public static SUPPORTED: javax.print.attribute.standard.ColorSupported
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Compression extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute {
                    public static NONE: javax.print.attribute.standard.Compression
                    public static DEFLATE: javax.print.attribute.standard.Compression
                    public static GZIP: javax.print.attribute.standard.Compression
                    public static COMPRESS: javax.print.attribute.standard.Compression
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Copies extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class CopiesSupported extends javax.print.attribute.SetOfIntegerSyntax implements javax.print.attribute.SupportedValuesAttribute {
                    public constructor(arg0: int)
                    public constructor(arg0: int, arg1: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class DateTimeAtCompleted extends javax.print.attribute.DateTimeSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.util.Date)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class DateTimeAtCreation extends javax.print.attribute.DateTimeSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.util.Date)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class DateTimeAtProcessing extends javax.print.attribute.DateTimeSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.util.Date)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Destination extends javax.print.attribute.URISyntax implements javax.print.attribute.PrintJobAttribute , javax.print.attribute.PrintRequestAttribute {
                    public constructor(arg0: java.net.URI)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class DialogTypeSelection extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintRequestAttribute {
                    public static NATIVE: javax.print.attribute.standard.DialogTypeSelection
                    public static COMMON: javax.print.attribute.standard.DialogTypeSelection
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class DocumentName extends javax.print.attribute.TextSyntax implements javax.print.attribute.DocAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Fidelity extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintJobAttribute , javax.print.attribute.PrintRequestAttribute {
                    public static FIDELITY_TRUE: javax.print.attribute.standard.Fidelity
                    public static FIDELITY_FALSE: javax.print.attribute.standard.Fidelity
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Finishings extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static NONE: javax.print.attribute.standard.Finishings
                    public static STAPLE: javax.print.attribute.standard.Finishings
                    public static COVER: javax.print.attribute.standard.Finishings
                    public static BIND: javax.print.attribute.standard.Finishings
                    public static SADDLE_STITCH: javax.print.attribute.standard.Finishings
                    public static EDGE_STITCH: javax.print.attribute.standard.Finishings
                    public static STAPLE_TOP_LEFT: javax.print.attribute.standard.Finishings
                    public static STAPLE_BOTTOM_LEFT: javax.print.attribute.standard.Finishings
                    public static STAPLE_TOP_RIGHT: javax.print.attribute.standard.Finishings
                    public static STAPLE_BOTTOM_RIGHT: javax.print.attribute.standard.Finishings
                    public static EDGE_STITCH_LEFT: javax.print.attribute.standard.Finishings
                    public static EDGE_STITCH_TOP: javax.print.attribute.standard.Finishings
                    public static EDGE_STITCH_RIGHT: javax.print.attribute.standard.Finishings
                    public static EDGE_STITCH_BOTTOM: javax.print.attribute.standard.Finishings
                    public static STAPLE_DUAL_LEFT: javax.print.attribute.standard.Finishings
                    public static STAPLE_DUAL_TOP: javax.print.attribute.standard.Finishings
                    public static STAPLE_DUAL_RIGHT: javax.print.attribute.standard.Finishings
                    public static STAPLE_DUAL_BOTTOM: javax.print.attribute.standard.Finishings
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    protected getOffset(): int
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobHoldUntil extends javax.print.attribute.DateTimeSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.util.Date)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobImpressions extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobImpressionsCompleted extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobImpressionsSupported extends javax.print.attribute.SetOfIntegerSyntax implements javax.print.attribute.SupportedValuesAttribute {
                    public constructor(arg0: int, arg1: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobKOctets extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobKOctetsProcessed extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobKOctetsSupported extends javax.print.attribute.SetOfIntegerSyntax implements javax.print.attribute.SupportedValuesAttribute {
                    public constructor(arg0: int, arg1: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobMediaSheets extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobMediaSheetsCompleted extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobMediaSheetsSupported extends javax.print.attribute.SetOfIntegerSyntax implements javax.print.attribute.SupportedValuesAttribute {
                    public constructor(arg0: int, arg1: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobMessageFromOperator extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobName extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobOriginatingUserName extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobPriority extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobPrioritySupported extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.SupportedValuesAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobSheets extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static NONE: javax.print.attribute.standard.JobSheets
                    public static STANDARD: javax.print.attribute.standard.JobSheets
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobState extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintJobAttribute {
                    public static UNKNOWN: javax.print.attribute.standard.JobState
                    public static PENDING: javax.print.attribute.standard.JobState
                    public static PENDING_HELD: javax.print.attribute.standard.JobState
                    public static PROCESSING: javax.print.attribute.standard.JobState
                    public static PROCESSING_STOPPED: javax.print.attribute.standard.JobState
                    public static CANCELED: javax.print.attribute.standard.JobState
                    public static ABORTED: javax.print.attribute.standard.JobState
                    public static COMPLETED: javax.print.attribute.standard.JobState
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobStateReason extends javax.print.attribute.EnumSyntax implements javax.print.attribute.Attribute {
                    public static JOB_INCOMING: javax.print.attribute.standard.JobStateReason
                    public static JOB_DATA_INSUFFICIENT: javax.print.attribute.standard.JobStateReason
                    public static DOCUMENT_ACCESS_ERROR: javax.print.attribute.standard.JobStateReason
                    public static SUBMISSION_INTERRUPTED: javax.print.attribute.standard.JobStateReason
                    public static JOB_OUTGOING: javax.print.attribute.standard.JobStateReason
                    public static JOB_HOLD_UNTIL_SPECIFIED: javax.print.attribute.standard.JobStateReason
                    public static RESOURCES_ARE_NOT_READY: javax.print.attribute.standard.JobStateReason
                    public static PRINTER_STOPPED_PARTLY: javax.print.attribute.standard.JobStateReason
                    public static PRINTER_STOPPED: javax.print.attribute.standard.JobStateReason
                    public static JOB_INTERPRETING: javax.print.attribute.standard.JobStateReason
                    public static JOB_QUEUED: javax.print.attribute.standard.JobStateReason
                    public static JOB_TRANSFORMING: javax.print.attribute.standard.JobStateReason
                    public static JOB_QUEUED_FOR_MARKER: javax.print.attribute.standard.JobStateReason
                    public static JOB_PRINTING: javax.print.attribute.standard.JobStateReason
                    public static JOB_CANCELED_BY_USER: javax.print.attribute.standard.JobStateReason
                    public static JOB_CANCELED_BY_OPERATOR: javax.print.attribute.standard.JobStateReason
                    public static JOB_CANCELED_AT_DEVICE: javax.print.attribute.standard.JobStateReason
                    public static ABORTED_BY_SYSTEM: javax.print.attribute.standard.JobStateReason
                    public static UNSUPPORTED_COMPRESSION: javax.print.attribute.standard.JobStateReason
                    public static COMPRESSION_ERROR: javax.print.attribute.standard.JobStateReason
                    public static UNSUPPORTED_DOCUMENT_FORMAT: javax.print.attribute.standard.JobStateReason
                    public static DOCUMENT_FORMAT_ERROR: javax.print.attribute.standard.JobStateReason
                    public static PROCESSING_TO_STOP_POINT: javax.print.attribute.standard.JobStateReason
                    public static SERVICE_OFF_LINE: javax.print.attribute.standard.JobStateReason
                    public static JOB_COMPLETED_SUCCESSFULLY: javax.print.attribute.standard.JobStateReason
                    public static JOB_COMPLETED_WITH_WARNINGS: javax.print.attribute.standard.JobStateReason
                    public static JOB_COMPLETED_WITH_ERRORS: javax.print.attribute.standard.JobStateReason
                    public static JOB_RESTARTABLE: javax.print.attribute.standard.JobStateReason
                    public static QUEUED_IN_DEVICE: javax.print.attribute.standard.JobStateReason
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class JobStateReasons extends java.util.HashSet<javax.print.attribute.standard.JobStateReason> implements javax.print.attribute.PrintJobAttribute {
                    public constructor()
                    public constructor(arg0: int)
                    public constructor(arg0: int, arg1: float)
                    public constructor(arg0: java.util.Collection<javax.print.attribute.standard.JobStateReason>)
                    public add(arg0: javax.print.attribute.standard.JobStateReason): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public add(arg0: java.lang.Object): boolean
                    public static class: java.lang.Class<any>
                }
                abstract class Media extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    protected constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class MediaName extends javax.print.attribute.standard.Media implements javax.print.attribute.Attribute {
                    public static NA_LETTER_WHITE: javax.print.attribute.standard.MediaName
                    public static NA_LETTER_TRANSPARENT: javax.print.attribute.standard.MediaName
                    public static ISO_A4_WHITE: javax.print.attribute.standard.MediaName
                    public static ISO_A4_TRANSPARENT: javax.print.attribute.standard.MediaName
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public static class: java.lang.Class<any>
                }
                class MediaPrintableArea implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static INCH: int
                    public static MM: int
                    public constructor(arg0: float, arg1: float, arg2: float, arg3: float, arg4: int)
                    public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int)
                    public getPrintableArea(arg0: int): float[]
                    public getX(arg0: int): float
                    public getY(arg0: int): float
                    public getWidth(arg0: int): float
                    public getHeight(arg0: int): float
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public toString(arg0: int, arg1: java.lang.String | string): string
                    public toString(): string
                    public hashCode(): int
                    public static class: java.lang.Class<any>
                }
                class MediaSize extends javax.print.attribute.Size2DSyntax implements javax.print.attribute.Attribute {
                    public constructor(arg0: float, arg1: float, arg2: int)
                    public constructor(arg0: int, arg1: int, arg2: int)
                    public constructor(arg0: float, arg1: float, arg2: int, arg3: javax.print.attribute.standard.MediaSizeName)
                    public constructor(arg0: int, arg1: int, arg2: int, arg3: javax.print.attribute.standard.MediaSizeName)
                    public getMediaSizeName(): javax.print.attribute.standard.MediaSizeName
                    public static getMediaSizeForName(arg0: javax.print.attribute.standard.MediaSizeName): javax.print.attribute.standard.MediaSize
                    public static findMedia(arg0: float, arg1: float, arg2: int): javax.print.attribute.standard.MediaSizeName
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class MediaSizeName extends javax.print.attribute.standard.Media {
                    public static ISO_A0: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A1: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A2: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A3: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A4: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A5: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A6: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A7: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A8: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A9: javax.print.attribute.standard.MediaSizeName
                    public static ISO_A10: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B0: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B1: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B2: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B3: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B4: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B5: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B6: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B7: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B8: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B9: javax.print.attribute.standard.MediaSizeName
                    public static ISO_B10: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B0: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B1: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B2: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B3: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B4: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B5: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B6: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B7: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B8: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B9: javax.print.attribute.standard.MediaSizeName
                    public static JIS_B10: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C0: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C1: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C2: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C3: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C4: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C5: javax.print.attribute.standard.MediaSizeName
                    public static ISO_C6: javax.print.attribute.standard.MediaSizeName
                    public static NA_LETTER: javax.print.attribute.standard.MediaSizeName
                    public static NA_LEGAL: javax.print.attribute.standard.MediaSizeName
                    public static EXECUTIVE: javax.print.attribute.standard.MediaSizeName
                    public static LEDGER: javax.print.attribute.standard.MediaSizeName
                    public static TABLOID: javax.print.attribute.standard.MediaSizeName
                    public static INVOICE: javax.print.attribute.standard.MediaSizeName
                    public static FOLIO: javax.print.attribute.standard.MediaSizeName
                    public static QUARTO: javax.print.attribute.standard.MediaSizeName
                    public static JAPANESE_POSTCARD: javax.print.attribute.standard.MediaSizeName
                    public static JAPANESE_DOUBLE_POSTCARD: javax.print.attribute.standard.MediaSizeName
                    public static A: javax.print.attribute.standard.MediaSizeName
                    public static B: javax.print.attribute.standard.MediaSizeName
                    public static C: javax.print.attribute.standard.MediaSizeName
                    public static D: javax.print.attribute.standard.MediaSizeName
                    public static E: javax.print.attribute.standard.MediaSizeName
                    public static ISO_DESIGNATED_LONG: javax.print.attribute.standard.MediaSizeName
                    public static ITALY_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static MONARCH_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static PERSONAL_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_NUMBER_9_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_NUMBER_10_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_NUMBER_11_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_NUMBER_12_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_NUMBER_14_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_6X9_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_7X9_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_9X11_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_9X12_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_10X13_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_10X14_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_10X15_ENVELOPE: javax.print.attribute.standard.MediaSizeName
                    public static NA_5X7: javax.print.attribute.standard.MediaSizeName
                    public static NA_8X10: javax.print.attribute.standard.MediaSizeName
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public static class: java.lang.Class<any>
                }
                class MediaTray extends javax.print.attribute.standard.Media implements javax.print.attribute.Attribute {
                    public static TOP: javax.print.attribute.standard.MediaTray
                    public static MIDDLE: javax.print.attribute.standard.MediaTray
                    public static BOTTOM: javax.print.attribute.standard.MediaTray
                    public static ENVELOPE: javax.print.attribute.standard.MediaTray
                    public static MANUAL: javax.print.attribute.standard.MediaTray
                    public static LARGE_CAPACITY: javax.print.attribute.standard.MediaTray
                    public static MAIN: javax.print.attribute.standard.MediaTray
                    public static SIDE: javax.print.attribute.standard.MediaTray
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public static class: java.lang.Class<any>
                }
                class MultipleDocumentHandling extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static SINGLE_DOCUMENT: javax.print.attribute.standard.MultipleDocumentHandling
                    public static SEPARATE_DOCUMENTS_UNCOLLATED_COPIES: javax.print.attribute.standard.MultipleDocumentHandling
                    public static SEPARATE_DOCUMENTS_COLLATED_COPIES: javax.print.attribute.standard.MultipleDocumentHandling
                    public static SINGLE_DOCUMENT_NEW_SHEET: javax.print.attribute.standard.MultipleDocumentHandling
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class NumberOfDocuments extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class NumberOfInterveningJobs extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class NumberUp extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class NumberUpSupported extends javax.print.attribute.SetOfIntegerSyntax implements javax.print.attribute.SupportedValuesAttribute {
                    public constructor(arg0: int[][])
                    public constructor(arg0: int)
                    public constructor(arg0: int, arg1: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class OrientationRequested extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static PORTRAIT: javax.print.attribute.standard.OrientationRequested
                    public static LANDSCAPE: javax.print.attribute.standard.OrientationRequested
                    public static REVERSE_LANDSCAPE: javax.print.attribute.standard.OrientationRequested
                    public static REVERSE_PORTRAIT: javax.print.attribute.standard.OrientationRequested
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    protected getOffset(): int
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class OutputDeviceAssigned extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PDLOverrideSupported extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public static NOT_ATTEMPTED: javax.print.attribute.standard.PDLOverrideSupported
                    public static ATTEMPTED: javax.print.attribute.standard.PDLOverrideSupported
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PageRanges extends javax.print.attribute.SetOfIntegerSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int[][])
                    public constructor(arg0: java.lang.String | string)
                    public constructor(arg0: int)
                    public constructor(arg0: int, arg1: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PagesPerMinute extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PagesPerMinuteColor extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PresentationDirection extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintJobAttribute , javax.print.attribute.PrintRequestAttribute {
                    public static TOBOTTOM_TORIGHT: javax.print.attribute.standard.PresentationDirection
                    public static TOBOTTOM_TOLEFT: javax.print.attribute.standard.PresentationDirection
                    public static TOTOP_TORIGHT: javax.print.attribute.standard.PresentationDirection
                    public static TOTOP_TOLEFT: javax.print.attribute.standard.PresentationDirection
                    public static TORIGHT_TOBOTTOM: javax.print.attribute.standard.PresentationDirection
                    public static TORIGHT_TOTOP: javax.print.attribute.standard.PresentationDirection
                    public static TOLEFT_TOBOTTOM: javax.print.attribute.standard.PresentationDirection
                    public static TOLEFT_TOTOP: javax.print.attribute.standard.PresentationDirection
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrintQuality extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static DRAFT: javax.print.attribute.standard.PrintQuality
                    public static NORMAL: javax.print.attribute.standard.PrintQuality
                    public static HIGH: javax.print.attribute.standard.PrintQuality
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    protected getOffset(): int
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterInfo extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterIsAcceptingJobs extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public static NOT_ACCEPTING_JOBS: javax.print.attribute.standard.PrinterIsAcceptingJobs
                    public static ACCEPTING_JOBS: javax.print.attribute.standard.PrinterIsAcceptingJobs
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterLocation extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterMakeAndModel extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterMessageFromOperator extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterMoreInfo extends javax.print.attribute.URISyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.net.URI)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterMoreInfoManufacturer extends javax.print.attribute.URISyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.net.URI)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterName extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterResolution extends javax.print.attribute.ResolutionSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public constructor(arg0: int, arg1: int, arg2: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterState extends javax.print.attribute.EnumSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public static UNKNOWN: javax.print.attribute.standard.PrinterState
                    public static IDLE: javax.print.attribute.standard.PrinterState
                    public static PROCESSING: javax.print.attribute.standard.PrinterState
                    public static STOPPED: javax.print.attribute.standard.PrinterState
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterStateReason extends javax.print.attribute.EnumSyntax implements javax.print.attribute.Attribute {
                    public static OTHER: javax.print.attribute.standard.PrinterStateReason
                    public static MEDIA_NEEDED: javax.print.attribute.standard.PrinterStateReason
                    public static MEDIA_JAM: javax.print.attribute.standard.PrinterStateReason
                    public static MOVING_TO_PAUSED: javax.print.attribute.standard.PrinterStateReason
                    public static PAUSED: javax.print.attribute.standard.PrinterStateReason
                    public static SHUTDOWN: javax.print.attribute.standard.PrinterStateReason
                    public static CONNECTING_TO_DEVICE: javax.print.attribute.standard.PrinterStateReason
                    public static TIMED_OUT: javax.print.attribute.standard.PrinterStateReason
                    public static STOPPING: javax.print.attribute.standard.PrinterStateReason
                    public static STOPPED_PARTLY: javax.print.attribute.standard.PrinterStateReason
                    public static TONER_LOW: javax.print.attribute.standard.PrinterStateReason
                    public static TONER_EMPTY: javax.print.attribute.standard.PrinterStateReason
                    public static SPOOL_AREA_FULL: javax.print.attribute.standard.PrinterStateReason
                    public static COVER_OPEN: javax.print.attribute.standard.PrinterStateReason
                    public static INTERLOCK_OPEN: javax.print.attribute.standard.PrinterStateReason
                    public static DOOR_OPEN: javax.print.attribute.standard.PrinterStateReason
                    public static INPUT_TRAY_MISSING: javax.print.attribute.standard.PrinterStateReason
                    public static MEDIA_LOW: javax.print.attribute.standard.PrinterStateReason
                    public static MEDIA_EMPTY: javax.print.attribute.standard.PrinterStateReason
                    public static OUTPUT_TRAY_MISSING: javax.print.attribute.standard.PrinterStateReason
                    public static OUTPUT_AREA_ALMOST_FULL: javax.print.attribute.standard.PrinterStateReason
                    public static OUTPUT_AREA_FULL: javax.print.attribute.standard.PrinterStateReason
                    public static MARKER_SUPPLY_LOW: javax.print.attribute.standard.PrinterStateReason
                    public static MARKER_SUPPLY_EMPTY: javax.print.attribute.standard.PrinterStateReason
                    public static MARKER_WASTE_ALMOST_FULL: javax.print.attribute.standard.PrinterStateReason
                    public static MARKER_WASTE_FULL: javax.print.attribute.standard.PrinterStateReason
                    public static FUSER_OVER_TEMP: javax.print.attribute.standard.PrinterStateReason
                    public static FUSER_UNDER_TEMP: javax.print.attribute.standard.PrinterStateReason
                    public static OPC_NEAR_EOL: javax.print.attribute.standard.PrinterStateReason
                    public static OPC_LIFE_OVER: javax.print.attribute.standard.PrinterStateReason
                    public static DEVELOPER_LOW: javax.print.attribute.standard.PrinterStateReason
                    public static DEVELOPER_EMPTY: javax.print.attribute.standard.PrinterStateReason
                    public static INTERPRETER_RESOURCE_UNAVAILABLE: javax.print.attribute.standard.PrinterStateReason
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class PrinterStateReasons extends java.util.HashMap<javax.print.attribute.standard.PrinterStateReason, javax.print.attribute.standard.Severity> implements javax.print.attribute.PrintServiceAttribute {
                    public constructor()
                    public constructor(arg0: int)
                    public constructor(arg0: int, arg1: float)
                    public constructor(arg0: java.util.Map<javax.print.attribute.standard.PrinterStateReason, javax.print.attribute.standard.Severity>)
                    public put(arg0: javax.print.attribute.standard.PrinterStateReason, arg1: javax.print.attribute.standard.Severity): javax.print.attribute.standard.Severity
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public printerStateReasonSet(arg0: javax.print.attribute.standard.Severity): java.util.Set<javax.print.attribute.standard.PrinterStateReason>
                    public put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class PrinterURI extends javax.print.attribute.URISyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: java.net.URI)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class QueuedJobCount extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.PrintServiceAttribute {
                    public constructor(arg0: int)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class ReferenceUriSchemesSupported extends javax.print.attribute.EnumSyntax implements javax.print.attribute.Attribute {
                    public static FTP: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static HTTP: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static HTTPS: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static GOPHER: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static NEWS: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static NNTP: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static WAIS: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    public static FILE: javax.print.attribute.standard.ReferenceUriSchemesSupported
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class RequestingUserName extends javax.print.attribute.TextSyntax implements javax.print.attribute.PrintRequestAttribute {
                    public constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                    public equals(arg0: java.lang.Object): boolean
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Severity extends javax.print.attribute.EnumSyntax implements javax.print.attribute.Attribute {
                    public static REPORT: javax.print.attribute.standard.Severity
                    public static WARNING: javax.print.attribute.standard.Severity
                    public static ERROR: javax.print.attribute.standard.Severity
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class SheetCollate extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static UNCOLLATED: javax.print.attribute.standard.SheetCollate
                    public static COLLATED: javax.print.attribute.standard.SheetCollate
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
                class Sides extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute , javax.print.attribute.PrintRequestAttribute , javax.print.attribute.PrintJobAttribute {
                    public static ONE_SIDED: javax.print.attribute.standard.Sides
                    public static TWO_SIDED_LONG_EDGE: javax.print.attribute.standard.Sides
                    public static TWO_SIDED_SHORT_EDGE: javax.print.attribute.standard.Sides
                    public static DUPLEX: javax.print.attribute.standard.Sides
                    public static TUMBLE: javax.print.attribute.standard.Sides
                    protected constructor(arg0: int)
                    protected getStringTable(): java.lang.String[]
                    protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                    public getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                    public getName(): string
                    public static class: java.lang.Class<any>
                }
            }
            interface Attribute extends java.io.Serializable {
                getCategory(): java.lang.Class<javax.print.attribute.Attribute>
                getName(): string
            }
            interface AttributeSet {
                get(arg0: java.lang.Class<any>): javax.print.attribute.Attribute
                add(arg0: javax.print.attribute.Attribute): boolean
                remove(arg0: java.lang.Class<any>): boolean
                remove(arg0: javax.print.attribute.Attribute): boolean
                containsKey(arg0: java.lang.Class<any>): boolean
                containsValue(arg0: javax.print.attribute.Attribute): boolean
                addAll(arg0: javax.print.attribute.AttributeSet): boolean
                size(): int
                toArray(): javax.print.attribute.Attribute[]
                clear(): void
                isEmpty(): boolean
                equals(arg0: java.lang.Object): boolean
                hashCode(): int
            }
            class AttributeSetUtilities {
                public static unmodifiableView(arg0: javax.print.attribute.AttributeSet): javax.print.attribute.AttributeSet
                public static unmodifiableView(arg0: javax.print.attribute.DocAttributeSet): javax.print.attribute.DocAttributeSet
                public static unmodifiableView(arg0: javax.print.attribute.PrintRequestAttributeSet): javax.print.attribute.PrintRequestAttributeSet
                public static unmodifiableView(arg0: javax.print.attribute.PrintJobAttributeSet): javax.print.attribute.PrintJobAttributeSet
                public static unmodifiableView(arg0: javax.print.attribute.PrintServiceAttributeSet): javax.print.attribute.PrintServiceAttributeSet
                public static synchronizedView(arg0: javax.print.attribute.AttributeSet): javax.print.attribute.AttributeSet
                public static synchronizedView(arg0: javax.print.attribute.DocAttributeSet): javax.print.attribute.DocAttributeSet
                public static synchronizedView(arg0: javax.print.attribute.PrintRequestAttributeSet): javax.print.attribute.PrintRequestAttributeSet
                public static synchronizedView(arg0: javax.print.attribute.PrintJobAttributeSet): javax.print.attribute.PrintJobAttributeSet
                public static synchronizedView(arg0: javax.print.attribute.PrintServiceAttributeSet): javax.print.attribute.PrintServiceAttributeSet
                public static verifyAttributeCategory(arg0: java.lang.Object, arg1: java.lang.Class<any>): java.lang.Class<any>
                public static verifyAttributeValue(arg0: java.lang.Object, arg1: java.lang.Class<any>): javax.print.attribute.Attribute
                public static verifyCategoryForValue(arg0: java.lang.Class<any>, arg1: javax.print.attribute.Attribute): void
                public static class: java.lang.Class<any>
            }
            abstract class DateTimeSyntax implements java.io.Serializable , java.lang.Cloneable {
                protected constructor(arg0: java.util.Date)
                public getValue(): java.util.Date
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface DocAttribute extends javax.print.attribute.Attribute {
            }
            interface DocAttributeSet extends javax.print.attribute.AttributeSet {
                add(arg0: javax.print.attribute.Attribute): boolean
                addAll(arg0: javax.print.attribute.AttributeSet): boolean
            }
            abstract class EnumSyntax implements java.io.Serializable , java.lang.Cloneable {
                protected constructor(arg0: int)
                public getValue(): int
                public clone(): java.lang.Object
                public hashCode(): int
                public toString(): string
                protected readResolve(): java.lang.Object
                protected getStringTable(): java.lang.String[]
                protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
                protected getOffset(): int
                public static class: java.lang.Class<any>
            }
            class HashAttributeSet implements javax.print.attribute.AttributeSet , java.io.Serializable {
                public constructor()
                public constructor(arg0: javax.print.attribute.Attribute)
                public constructor(arg0: javax.print.attribute.Attribute[])
                public constructor(arg0: javax.print.attribute.AttributeSet)
                protected constructor(arg0: java.lang.Class<any>)
                protected constructor(arg0: javax.print.attribute.Attribute, arg1: java.lang.Class<any>)
                protected constructor(arg0: javax.print.attribute.Attribute[], arg1: java.lang.Class<any>)
                protected constructor(arg0: javax.print.attribute.AttributeSet, arg1: java.lang.Class<any>)
                public get(arg0: java.lang.Class<any>): javax.print.attribute.Attribute
                public add(arg0: javax.print.attribute.Attribute): boolean
                public remove(arg0: java.lang.Class<any>): boolean
                public remove(arg0: javax.print.attribute.Attribute): boolean
                public containsKey(arg0: java.lang.Class<any>): boolean
                public containsValue(arg0: javax.print.attribute.Attribute): boolean
                public addAll(arg0: javax.print.attribute.AttributeSet): boolean
                public size(): int
                public toArray(): javax.print.attribute.Attribute[]
                public clear(): void
                public isEmpty(): boolean
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            class HashDocAttributeSet extends javax.print.attribute.HashAttributeSet implements javax.print.attribute.DocAttributeSet , java.io.Serializable {
                public constructor()
                public constructor(arg0: javax.print.attribute.DocAttribute)
                public constructor(arg0: javax.print.attribute.DocAttribute[])
                public constructor(arg0: javax.print.attribute.DocAttributeSet)
                public static class: java.lang.Class<any>
            }
            class HashPrintJobAttributeSet extends javax.print.attribute.HashAttributeSet implements javax.print.attribute.PrintJobAttributeSet , java.io.Serializable {
                public constructor()
                public constructor(arg0: javax.print.attribute.PrintJobAttribute)
                public constructor(arg0: javax.print.attribute.PrintJobAttribute[])
                public constructor(arg0: javax.print.attribute.PrintJobAttributeSet)
                public static class: java.lang.Class<any>
            }
            class HashPrintRequestAttributeSet extends javax.print.attribute.HashAttributeSet implements javax.print.attribute.PrintRequestAttributeSet , java.io.Serializable {
                public constructor()
                public constructor(arg0: javax.print.attribute.PrintRequestAttribute)
                public constructor(arg0: javax.print.attribute.PrintRequestAttribute[])
                public constructor(arg0: javax.print.attribute.PrintRequestAttributeSet)
                public static class: java.lang.Class<any>
            }
            class HashPrintServiceAttributeSet extends javax.print.attribute.HashAttributeSet implements javax.print.attribute.PrintServiceAttributeSet , java.io.Serializable {
                public constructor()
                public constructor(arg0: javax.print.attribute.PrintServiceAttribute)
                public constructor(arg0: javax.print.attribute.PrintServiceAttribute[])
                public constructor(arg0: javax.print.attribute.PrintServiceAttributeSet)
                public static class: java.lang.Class<any>
            }
            abstract class IntegerSyntax implements java.io.Serializable , java.lang.Cloneable {
                protected constructor(arg0: int)
                protected constructor(arg0: int, arg1: int, arg2: int)
                public getValue(): int
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface PrintJobAttribute extends javax.print.attribute.Attribute {
            }
            interface PrintJobAttributeSet extends javax.print.attribute.AttributeSet {
                add(arg0: javax.print.attribute.Attribute): boolean
                addAll(arg0: javax.print.attribute.AttributeSet): boolean
            }
            interface PrintRequestAttribute extends javax.print.attribute.Attribute {
            }
            interface PrintRequestAttributeSet extends javax.print.attribute.AttributeSet {
                add(arg0: javax.print.attribute.Attribute): boolean
                addAll(arg0: javax.print.attribute.AttributeSet): boolean
            }
            interface PrintServiceAttribute extends javax.print.attribute.Attribute {
            }
            interface PrintServiceAttributeSet extends javax.print.attribute.AttributeSet {
                add(arg0: javax.print.attribute.Attribute): boolean
                addAll(arg0: javax.print.attribute.AttributeSet): boolean
            }
            abstract class ResolutionSyntax implements java.io.Serializable , java.lang.Cloneable {
                public static DPI: int
                public static DPCM: int
                public constructor(arg0: int, arg1: int, arg2: int)
                public getResolution(arg0: int): int[]
                public getCrossFeedResolution(arg0: int): int
                public getFeedResolution(arg0: int): int
                public toString(arg0: int, arg1: java.lang.String | string): string
                public lessThanOrEquals(arg0: javax.print.attribute.ResolutionSyntax): boolean
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                protected getCrossFeedResolutionDphi(): int
                protected getFeedResolutionDphi(): int
                public static class: java.lang.Class<any>
            }
            abstract class SetOfIntegerSyntax implements java.io.Serializable , java.lang.Cloneable {
                protected constructor(arg0: java.lang.String | string)
                protected constructor(arg0: int[][])
                protected constructor(arg0: int)
                protected constructor(arg0: int, arg1: int)
                public getMembers(): int[][]
                public contains(arg0: int): boolean
                public contains(arg0: javax.print.attribute.IntegerSyntax): boolean
                public next(arg0: int): int
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class Size2DSyntax implements java.io.Serializable , java.lang.Cloneable {
                public static INCH: int
                public static MM: int
                protected constructor(arg0: float, arg1: float, arg2: int)
                protected constructor(arg0: int, arg1: int, arg2: int)
                public getSize(arg0: int): float[]
                public getX(arg0: int): float
                public getY(arg0: int): float
                public toString(arg0: int, arg1: java.lang.String | string): string
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                protected getXMicrometers(): int
                protected getYMicrometers(): int
                public static class: java.lang.Class<any>
            }
            interface SupportedValuesAttribute extends javax.print.attribute.Attribute {
            }
            abstract class TextSyntax implements java.io.Serializable , java.lang.Cloneable {
                protected constructor(arg0: java.lang.String | string, arg1: java.util.Locale)
                public getValue(): string
                public getLocale(): java.util.Locale
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class URISyntax implements java.io.Serializable , java.lang.Cloneable {
                protected constructor(arg0: java.net.URI)
                public getURI(): java.net.URI
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class UnmodifiableSetException extends java.lang.RuntimeException {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
        }
        namespace event {
            class PrintEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object)
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class PrintJobAdapter implements javax.print.event.PrintJobListener {
                public constructor()
                public printDataTransferCompleted(arg0: javax.print.event.PrintJobEvent): void
                public printJobCompleted(arg0: javax.print.event.PrintJobEvent): void
                public printJobFailed(arg0: javax.print.event.PrintJobEvent): void
                public printJobCanceled(arg0: javax.print.event.PrintJobEvent): void
                public printJobNoMoreEvents(arg0: javax.print.event.PrintJobEvent): void
                public printJobRequiresAttention(arg0: javax.print.event.PrintJobEvent): void
                public static class: java.lang.Class<any>
            }
            class PrintJobAttributeEvent extends javax.print.event.PrintEvent {
                public constructor(arg0: javax.print.DocPrintJob, arg1: javax.print.attribute.PrintJobAttributeSet)
                public getPrintJob(): javax.print.DocPrintJob
                public getAttributes(): javax.print.attribute.PrintJobAttributeSet
                public static class: java.lang.Class<any>
            }
            interface PrintJobAttributeListener {
                attributeUpdate(arg0: javax.print.event.PrintJobAttributeEvent): void
            }
            interface PrintJobAttributeListener$$Lambda {
                (arg0: javax.print.event.PrintJobAttributeEvent): void
            }
            class PrintJobEvent extends javax.print.event.PrintEvent {
                public static JOB_CANCELED: int
                public static JOB_COMPLETE: int
                public static JOB_FAILED: int
                public static REQUIRES_ATTENTION: int
                public static NO_MORE_EVENTS: int
                public static DATA_TRANSFER_COMPLETE: int
                public constructor(arg0: javax.print.DocPrintJob, arg1: int)
                public getPrintEventType(): int
                public getPrintJob(): javax.print.DocPrintJob
                public static class: java.lang.Class<any>
            }
            interface PrintJobListener {
                printDataTransferCompleted(arg0: javax.print.event.PrintJobEvent): void
                printJobCompleted(arg0: javax.print.event.PrintJobEvent): void
                printJobFailed(arg0: javax.print.event.PrintJobEvent): void
                printJobCanceled(arg0: javax.print.event.PrintJobEvent): void
                printJobNoMoreEvents(arg0: javax.print.event.PrintJobEvent): void
                printJobRequiresAttention(arg0: javax.print.event.PrintJobEvent): void
            }
            class PrintServiceAttributeEvent extends javax.print.event.PrintEvent {
                public constructor(arg0: javax.print.PrintService, arg1: javax.print.attribute.PrintServiceAttributeSet)
                public getPrintService(): javax.print.PrintService
                public getAttributes(): javax.print.attribute.PrintServiceAttributeSet
                public static class: java.lang.Class<any>
            }
            interface PrintServiceAttributeListener {
                attributeUpdate(arg0: javax.print.event.PrintServiceAttributeEvent): void
            }
            interface PrintServiceAttributeListener$$Lambda {
                (arg0: javax.print.event.PrintServiceAttributeEvent): void
            }
        }
        interface AttributeException {
            getUnsupportedAttributes(): java.lang.Class[]
            getUnsupportedValues(): javax.print.attribute.Attribute[]
        }
        interface CancelablePrintJob extends javax.print.DocPrintJob {
            cancel(): void
        }
        interface Doc {
            getDocFlavor(): javax.print.DocFlavor
            getPrintData(): java.lang.Object
            getAttributes(): javax.print.attribute.DocAttributeSet
            getReaderForText(): java.io.Reader
            getStreamForBytes(): java.io.InputStream
        }
        class DocFlavor implements java.io.Serializable , java.lang.Cloneable {
            public static hostEncoding: string
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
            public getMimeType(): string
            public getMediaType(): string
            public getMediaSubtype(): string
            public getParameter(arg0: java.lang.String | string): string
            public getRepresentationClassName(): string
            public toString(): string
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public static class: java.lang.Class<any>
        }
        interface DocPrintJob {
            getPrintService(): javax.print.PrintService
            getAttributes(): javax.print.attribute.PrintJobAttributeSet
            addPrintJobListener(arg0: javax.print.event.PrintJobListener): void
            removePrintJobListener(arg0: javax.print.event.PrintJobListener): void
            addPrintJobAttributeListener(arg0: javax.print.event.PrintJobAttributeListener | javax.print.event.PrintJobAttributeListener$$Lambda, arg1: javax.print.attribute.PrintJobAttributeSet): void
            removePrintJobAttributeListener(arg0: javax.print.event.PrintJobAttributeListener | javax.print.event.PrintJobAttributeListener$$Lambda): void
            print(arg0: javax.print.Doc, arg1: javax.print.attribute.PrintRequestAttributeSet): void
        }
        interface FlavorException {
            getUnsupportedFlavors(): javax.print.DocFlavor[]
        }
        interface FlavorException$$Lambda {
            (): javax.print.DocFlavor[]
        }
        class MimeType implements java.io.Serializable , java.lang.Cloneable {
            public constructor(arg0: java.lang.String | string)
            public getMimeType(): string
            public getMediaType(): string
            public getMediaSubtype(): string
            public getParameterMap(): java.util.Map
            public toString(): string
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public static class: java.lang.Class<any>
        }
        interface MultiDoc {
            getDoc(): javax.print.Doc
            next(): javax.print.MultiDoc
        }
        interface MultiDocPrintJob extends javax.print.DocPrintJob {
            print(arg0: javax.print.MultiDoc, arg1: javax.print.attribute.PrintRequestAttributeSet): void
        }
        interface MultiDocPrintService extends javax.print.PrintService {
            createMultiDocPrintJob(): javax.print.MultiDocPrintJob
        }
        class PrintException extends java.lang.Exception {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.Exception)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Exception)
            public static class: java.lang.Class<any>
        }
        interface PrintService {
            getName(): string
            createPrintJob(): javax.print.DocPrintJob
            addPrintServiceAttributeListener(arg0: javax.print.event.PrintServiceAttributeListener | javax.print.event.PrintServiceAttributeListener$$Lambda): void
            removePrintServiceAttributeListener(arg0: javax.print.event.PrintServiceAttributeListener | javax.print.event.PrintServiceAttributeListener$$Lambda): void
            getAttributes(): javax.print.attribute.PrintServiceAttributeSet
            getAttribute<T extends javax.print.attribute.PrintServiceAttribute>(arg0: java.lang.Class<T>): T
            getSupportedDocFlavors(): javax.print.DocFlavor[]
            isDocFlavorSupported(arg0: javax.print.DocFlavor): boolean
            getSupportedAttributeCategories(): java.lang.Class<any>[]
            isAttributeCategorySupported(arg0: java.lang.Class<javax.print.attribute.Attribute>): boolean
            getDefaultAttributeValue(arg0: java.lang.Class<javax.print.attribute.Attribute>): java.lang.Object
            getSupportedAttributeValues(arg0: java.lang.Class<javax.print.attribute.Attribute>, arg1: javax.print.DocFlavor, arg2: javax.print.attribute.AttributeSet): java.lang.Object
            isAttributeValueSupported(arg0: javax.print.attribute.Attribute, arg1: javax.print.DocFlavor, arg2: javax.print.attribute.AttributeSet): boolean
            getUnsupportedAttributes(arg0: javax.print.DocFlavor, arg1: javax.print.attribute.AttributeSet): javax.print.attribute.AttributeSet
            getServiceUIFactory(): javax.print.ServiceUIFactory
            equals(arg0: java.lang.Object): boolean
            hashCode(): int
        }
        abstract class PrintServiceLookup {
            public constructor()
            public static lookupPrintServices(arg0: javax.print.DocFlavor, arg1: javax.print.attribute.AttributeSet): javax.print.PrintService[]
            public static lookupMultiDocPrintServices(arg0: javax.print.DocFlavor[], arg1: javax.print.attribute.AttributeSet): javax.print.MultiDocPrintService[]
            public static lookupDefaultPrintService(): javax.print.PrintService
            public static registerServiceProvider(arg0: javax.print.PrintServiceLookup): boolean
            public static registerService(arg0: javax.print.PrintService): boolean
            public getPrintServices(arg0: javax.print.DocFlavor, arg1: javax.print.attribute.AttributeSet): javax.print.PrintService[]
            public getPrintServices(): javax.print.PrintService[]
            public getMultiDocPrintServices(arg0: javax.print.DocFlavor[], arg1: javax.print.attribute.AttributeSet): javax.print.MultiDocPrintService[]
            public getDefaultPrintService(): javax.print.PrintService
            public static class: java.lang.Class<any>
        }
        class ServiceUI {
            public constructor()
            public static printDialog(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: javax.print.PrintService[], arg4: javax.print.PrintService, arg5: javax.print.DocFlavor, arg6: javax.print.attribute.PrintRequestAttributeSet): javax.print.PrintService
            public static class: java.lang.Class<any>
        }
        abstract class ServiceUIFactory {
            public static JCOMPONENT_UI: string
            public static PANEL_UI: string
            public static DIALOG_UI: string
            public static JDIALOG_UI: string
            public static ABOUT_UIROLE: int
            public static ADMIN_UIROLE: int
            public static MAIN_UIROLE: int
            public static RESERVED_UIROLE: int
            public constructor()
            public getUI(arg0: int, arg1: java.lang.String | string): java.lang.Object
            public getUIClassNamesForRole(arg0: int): java.lang.String[]
            public static class: java.lang.Class<any>
        }
        class SimpleDoc implements javax.print.Doc {
            public constructor(arg0: java.lang.Object, arg1: javax.print.DocFlavor, arg2: javax.print.attribute.DocAttributeSet)
            public getDocFlavor(): javax.print.DocFlavor
            public getAttributes(): javax.print.attribute.DocAttributeSet
            public getPrintData(): java.lang.Object
            public getReaderForText(): java.io.Reader
            public getStreamForBytes(): java.io.InputStream
            public static class: java.lang.Class<any>
        }
        abstract class StreamPrintService implements javax.print.PrintService {
            protected constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
            public getOutputStream(): java.io.OutputStream
            public getOutputFormat(): string
            public dispose(): void
            public isDisposed(): boolean
            public static class: java.lang.Class<any>
        }
        abstract class StreamPrintServiceFactory {
            public constructor()
            public static lookupStreamPrintServiceFactories(arg0: javax.print.DocFlavor, arg1: java.lang.String | string): javax.print.StreamPrintServiceFactory[]
            public getOutputFormat(): string
            public getSupportedDocFlavors(): javax.print.DocFlavor[]
            public getPrintService(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): javax.print.StreamPrintService
            public static class: java.lang.Class<any>
        }
        interface URIException {
            URIInaccessible: int
            URISchemeNotSupported: int
            URIOtherProblem: int
            getUnsupportedURI(): java.net.URI
            getReason(): int
        }
    }
    namespace sound {
        namespace midi {
            namespace spi {
                abstract class MidiDeviceProvider {
                    public constructor()
                    public isDeviceSupported(arg0: javax.sound.midi.MidiDevice$Info): boolean
                    public getDeviceInfo(): javax.sound.midi.MidiDevice$Info[]
                    public getDevice(arg0: javax.sound.midi.MidiDevice$Info): javax.sound.midi.MidiDevice
                    public static class: java.lang.Class<any>
                }
                abstract class MidiFileReader {
                    public constructor()
                    public getMidiFileFormat(arg0: java.io.InputStream): javax.sound.midi.MidiFileFormat
                    public getMidiFileFormat(arg0: java.net.URL): javax.sound.midi.MidiFileFormat
                    public getMidiFileFormat(arg0: java.io.File): javax.sound.midi.MidiFileFormat
                    public getSequence(arg0: java.io.InputStream): javax.sound.midi.Sequence
                    public getSequence(arg0: java.net.URL): javax.sound.midi.Sequence
                    public getSequence(arg0: java.io.File): javax.sound.midi.Sequence
                    public static class: java.lang.Class<any>
                }
                abstract class MidiFileWriter {
                    public constructor()
                    public getMidiFileTypes(): int[]
                    public getMidiFileTypes(arg0: javax.sound.midi.Sequence): int[]
                    public isFileTypeSupported(arg0: int): boolean
                    public isFileTypeSupported(arg0: int, arg1: javax.sound.midi.Sequence): boolean
                    public write(arg0: javax.sound.midi.Sequence, arg1: int, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.midi.Sequence, arg1: int, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                abstract class SoundbankReader {
                    public constructor()
                    public getSoundbank(arg0: java.net.URL): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.InputStream): javax.sound.midi.Soundbank
                    public getSoundbank(arg0: java.io.File): javax.sound.midi.Soundbank
                    public static class: java.lang.Class<any>
                }
            }
            interface ControllerEventListener extends java.util.EventListener {
                controlChange(arg0: javax.sound.midi.ShortMessage): void
            }
            abstract class Instrument extends javax.sound.midi.SoundbankResource {
                protected constructor(arg0: javax.sound.midi.Soundbank, arg1: javax.sound.midi.Patch, arg2: java.lang.String | string, arg3: java.lang.Class<any>)
                public getPatch(): javax.sound.midi.Patch
                public static class: java.lang.Class<any>
            }
            class InvalidMidiDataException extends java.lang.Exception {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            interface MetaEventListener extends java.util.EventListener {
                meta(arg0: javax.sound.midi.MetaMessage): void
            }
            class MetaMessage extends javax.sound.midi.MidiMessage {
                public static META: int
                public constructor()
                public constructor(arg0: int, arg1: byte[], arg2: int)
                protected constructor(arg0: byte[])
                public setMessage(arg0: int, arg1: byte[], arg2: int): void
                public getType(): int
                public getData(): byte[]
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface MidiChannel {
                noteOn(arg0: int, arg1: int): void
                noteOff(arg0: int, arg1: int): void
                noteOff(arg0: int): void
                setPolyPressure(arg0: int, arg1: int): void
                getPolyPressure(arg0: int): int
                setChannelPressure(arg0: int): void
                getChannelPressure(): int
                controlChange(arg0: int, arg1: int): void
                getController(arg0: int): int
                programChange(arg0: int): void
                programChange(arg0: int, arg1: int): void
                getProgram(): int
                setPitchBend(arg0: int): void
                getPitchBend(): int
                resetAllControllers(): void
                allNotesOff(): void
                allSoundOff(): void
                localControl(arg0: boolean): boolean
                setMono(arg0: boolean): void
                getMono(): boolean
                setOmni(arg0: boolean): void
                getOmni(): boolean
                setMute(arg0: boolean): void
                getMute(): boolean
                setSolo(arg0: boolean): void
                getSolo(): boolean
            }
            interface MidiDevice extends java.lang.AutoCloseable {
                getDeviceInfo(): javax.sound.midi.MidiDevice$Info
                open(): void
                close(): void
                isOpen(): boolean
                getMicrosecondPosition(): long
                getMaxReceivers(): int
                getMaxTransmitters(): int
                getReceiver(): javax.sound.midi.Receiver
                getReceivers(): java.util.List<javax.sound.midi.Receiver>
                getTransmitter(): javax.sound.midi.Transmitter
                getTransmitters(): java.util.List<javax.sound.midi.Transmitter>
            }
            interface MidiDeviceReceiver extends javax.sound.midi.Receiver {
                getMidiDevice(): javax.sound.midi.MidiDevice
            }
            interface MidiDeviceTransmitter extends javax.sound.midi.Transmitter {
                getMidiDevice(): javax.sound.midi.MidiDevice
            }
            class MidiEvent {
                public constructor(arg0: javax.sound.midi.MidiMessage, arg1: long)
                public getMessage(): javax.sound.midi.MidiMessage
                public setTick(arg0: long): void
                public getTick(): long
                public static class: java.lang.Class<any>
            }
            class MidiFileFormat {
                public static UNKNOWN_LENGTH: int
                protected type: int
                protected divisionType: float
                protected resolution: int
                protected byteLength: int
                protected microsecondLength: long
                public constructor(arg0: int, arg1: float, arg2: int, arg3: int, arg4: long)
                public constructor(arg0: int, arg1: float, arg2: int, arg3: int, arg4: long, arg5: java.util.Map<java.lang.String, java.lang.Object>)
                public getType(): int
                public getDivisionType(): float
                public getResolution(): int
                public getByteLength(): int
                public getMicrosecondLength(): long
                public properties(): java.util.Map<java.lang.String, java.lang.Object>
                public getProperty(arg0: java.lang.String | string): java.lang.Object
                public static class: java.lang.Class<any>
            }
            abstract class MidiMessage implements java.lang.Cloneable {
                protected data: byte[]
                protected length: int
                protected constructor(arg0: byte[])
                protected setMessage(arg0: byte[], arg1: int): void
                public getMessage(): byte[]
                public getStatus(): int
                public getLength(): int
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class MidiSystem {
                public static getMidiDeviceInfo(): javax.sound.midi.MidiDevice$Info[]
                public static getMidiDevice(arg0: javax.sound.midi.MidiDevice$Info): javax.sound.midi.MidiDevice
                public static getReceiver(): javax.sound.midi.Receiver
                public static getTransmitter(): javax.sound.midi.Transmitter
                public static getSynthesizer(): javax.sound.midi.Synthesizer
                public static getSequencer(): javax.sound.midi.Sequencer
                public static getSequencer(arg0: boolean): javax.sound.midi.Sequencer
                public static getSoundbank(arg0: java.io.InputStream): javax.sound.midi.Soundbank
                public static getSoundbank(arg0: java.net.URL): javax.sound.midi.Soundbank
                public static getSoundbank(arg0: java.io.File): javax.sound.midi.Soundbank
                public static getMidiFileFormat(arg0: java.io.InputStream): javax.sound.midi.MidiFileFormat
                public static getMidiFileFormat(arg0: java.net.URL): javax.sound.midi.MidiFileFormat
                public static getMidiFileFormat(arg0: java.io.File): javax.sound.midi.MidiFileFormat
                public static getSequence(arg0: java.io.InputStream): javax.sound.midi.Sequence
                public static getSequence(arg0: java.net.URL): javax.sound.midi.Sequence
                public static getSequence(arg0: java.io.File): javax.sound.midi.Sequence
                public static getMidiFileTypes(): int[]
                public static isFileTypeSupported(arg0: int): boolean
                public static getMidiFileTypes(arg0: javax.sound.midi.Sequence): int[]
                public static isFileTypeSupported(arg0: int, arg1: javax.sound.midi.Sequence): boolean
                public static write(arg0: javax.sound.midi.Sequence, arg1: int, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                public static write(arg0: javax.sound.midi.Sequence, arg1: int, arg2: java.io.File): int
                public static class: java.lang.Class<any>
            }
            class MidiUnavailableException extends java.lang.Exception {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class Patch {
                public constructor(arg0: int, arg1: int)
                public getBank(): int
                public getProgram(): int
                public static class: java.lang.Class<any>
            }
            interface Receiver extends java.lang.AutoCloseable {
                send(arg0: javax.sound.midi.MidiMessage, arg1: long): void
                close(): void
            }
            class Sequence {
                public static PPQ: float
                public static SMPTE_24: float
                public static SMPTE_25: float
                public static SMPTE_30DROP: float
                public static SMPTE_30: float
                protected divisionType: float
                protected resolution: int
                protected tracks: java.util.Vector<javax.sound.midi.Track>
                public constructor(arg0: float, arg1: int)
                public constructor(arg0: float, arg1: int, arg2: int)
                public getDivisionType(): float
                public getResolution(): int
                public createTrack(): javax.sound.midi.Track
                public deleteTrack(arg0: javax.sound.midi.Track): boolean
                public getTracks(): javax.sound.midi.Track[]
                public getMicrosecondLength(): long
                public getTickLength(): long
                public getPatchList(): javax.sound.midi.Patch[]
                public static class: java.lang.Class<any>
            }
            interface Sequencer extends javax.sound.midi.MidiDevice {
                LOOP_CONTINUOUSLY: int
                setSequence(arg0: javax.sound.midi.Sequence): void
                setSequence(arg0: java.io.InputStream): void
                getSequence(): javax.sound.midi.Sequence
                start(): void
                stop(): void
                isRunning(): boolean
                startRecording(): void
                stopRecording(): void
                isRecording(): boolean
                recordEnable(arg0: javax.sound.midi.Track, arg1: int): void
                recordDisable(arg0: javax.sound.midi.Track): void
                getTempoInBPM(): float
                setTempoInBPM(arg0: float): void
                getTempoInMPQ(): float
                setTempoInMPQ(arg0: float): void
                setTempoFactor(arg0: float): void
                getTempoFactor(): float
                getTickLength(): long
                getTickPosition(): long
                setTickPosition(arg0: long): void
                getMicrosecondLength(): long
                getMicrosecondPosition(): long
                setMicrosecondPosition(arg0: long): void
                setMasterSyncMode(arg0: javax.sound.midi.Sequencer$SyncMode): void
                getMasterSyncMode(): javax.sound.midi.Sequencer$SyncMode
                getMasterSyncModes(): javax.sound.midi.Sequencer$SyncMode[]
                setSlaveSyncMode(arg0: javax.sound.midi.Sequencer$SyncMode): void
                getSlaveSyncMode(): javax.sound.midi.Sequencer$SyncMode
                getSlaveSyncModes(): javax.sound.midi.Sequencer$SyncMode[]
                setTrackMute(arg0: int, arg1: boolean): void
                getTrackMute(arg0: int): boolean
                setTrackSolo(arg0: int, arg1: boolean): void
                getTrackSolo(arg0: int): boolean
                addMetaEventListener(arg0: javax.sound.midi.MetaEventListener): boolean
                removeMetaEventListener(arg0: javax.sound.midi.MetaEventListener): void
                addControllerEventListener(arg0: javax.sound.midi.ControllerEventListener, arg1: int[]): int[]
                removeControllerEventListener(arg0: javax.sound.midi.ControllerEventListener, arg1: int[]): int[]
                setLoopStartPoint(arg0: long): void
                getLoopStartPoint(): long
                setLoopEndPoint(arg0: long): void
                getLoopEndPoint(): long
                setLoopCount(arg0: int): void
                getLoopCount(): int
            }
            class ShortMessage extends javax.sound.midi.MidiMessage {
                public static MIDI_TIME_CODE: int
                public static SONG_POSITION_POINTER: int
                public static SONG_SELECT: int
                public static TUNE_REQUEST: int
                public static END_OF_EXCLUSIVE: int
                public static TIMING_CLOCK: int
                public static START: int
                public static CONTINUE: int
                public static STOP: int
                public static ACTIVE_SENSING: int
                public static SYSTEM_RESET: int
                public static NOTE_OFF: int
                public static NOTE_ON: int
                public static POLY_PRESSURE: int
                public static CONTROL_CHANGE: int
                public static PROGRAM_CHANGE: int
                public static CHANNEL_PRESSURE: int
                public static PITCH_BEND: int
                public constructor()
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int, arg2: int)
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                protected constructor(arg0: byte[])
                public setMessage(arg0: int): void
                public setMessage(arg0: int, arg1: int, arg2: int): void
                public setMessage(arg0: int, arg1: int, arg2: int, arg3: int): void
                public getChannel(): int
                public getCommand(): int
                public getData1(): int
                public getData2(): int
                public clone(): java.lang.Object
                protected getDataLength(arg0: int): int
                public static class: java.lang.Class<any>
            }
            interface Soundbank {
                getName(): string
                getVersion(): string
                getVendor(): string
                getDescription(): string
                getResources(): javax.sound.midi.SoundbankResource[]
                getInstruments(): javax.sound.midi.Instrument[]
                getInstrument(arg0: javax.sound.midi.Patch): javax.sound.midi.Instrument
            }
            abstract class SoundbankResource {
                protected constructor(arg0: javax.sound.midi.Soundbank, arg1: java.lang.String | string, arg2: java.lang.Class<any>)
                public getSoundbank(): javax.sound.midi.Soundbank
                public getName(): string
                public getDataClass(): java.lang.Class<any>
                public getData(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface Synthesizer extends javax.sound.midi.MidiDevice {
                getMaxPolyphony(): int
                getLatency(): long
                getChannels(): javax.sound.midi.MidiChannel[]
                getVoiceStatus(): javax.sound.midi.VoiceStatus[]
                isSoundbankSupported(arg0: javax.sound.midi.Soundbank): boolean
                loadInstrument(arg0: javax.sound.midi.Instrument): boolean
                unloadInstrument(arg0: javax.sound.midi.Instrument): void
                remapInstrument(arg0: javax.sound.midi.Instrument, arg1: javax.sound.midi.Instrument): boolean
                getDefaultSoundbank(): javax.sound.midi.Soundbank
                getAvailableInstruments(): javax.sound.midi.Instrument[]
                getLoadedInstruments(): javax.sound.midi.Instrument[]
                loadAllInstruments(arg0: javax.sound.midi.Soundbank): boolean
                unloadAllInstruments(arg0: javax.sound.midi.Soundbank): void
                loadInstruments(arg0: javax.sound.midi.Soundbank, arg1: javax.sound.midi.Patch[]): boolean
                unloadInstruments(arg0: javax.sound.midi.Soundbank, arg1: javax.sound.midi.Patch[]): void
            }
            class SysexMessage extends javax.sound.midi.MidiMessage {
                public static SYSTEM_EXCLUSIVE: int
                public static SPECIAL_SYSTEM_EXCLUSIVE: int
                public constructor()
                public constructor(arg0: byte[], arg1: int)
                public constructor(arg0: int, arg1: byte[], arg2: int)
                protected constructor(arg0: byte[])
                public setMessage(arg0: byte[], arg1: int): void
                public setMessage(arg0: int, arg1: byte[], arg2: int): void
                public getData(): byte[]
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class Track {
                public add(arg0: javax.sound.midi.MidiEvent): boolean
                public remove(arg0: javax.sound.midi.MidiEvent): boolean
                public get(arg0: int): javax.sound.midi.MidiEvent
                public size(): int
                public ticks(): long
                public static class: java.lang.Class<any>
            }
            interface Transmitter extends java.lang.AutoCloseable {
                setReceiver(arg0: javax.sound.midi.Receiver): void
                getReceiver(): javax.sound.midi.Receiver
                close(): void
            }
            class VoiceStatus {
                public active: boolean
                public channel: int
                public bank: int
                public program: int
                public note: int
                public volume: int
                public constructor()
                public static class: java.lang.Class<any>
            }
        }
        namespace sampled {
            namespace spi {
                abstract class AudioFileReader {
                    public constructor()
                    public getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                    public getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                    public getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                abstract class AudioFileWriter {
                    public constructor()
                    public getAudioFileTypes(): javax.sound.sampled.AudioFileFormat$Type[]
                    public isFileTypeSupported(arg0: javax.sound.sampled.AudioFileFormat$Type): boolean
                    public getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                    public isFileTypeSupported(arg0: javax.sound.sampled.AudioFileFormat$Type, arg1: javax.sound.sampled.AudioInputStream): boolean
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                    public write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                    public static class: java.lang.Class<any>
                }
                abstract class FormatConversionProvider {
                    public constructor()
                    public getSourceEncodings(): javax.sound.sampled.AudioFormat$Encoding[]
                    public getTargetEncodings(): javax.sound.sampled.AudioFormat$Encoding[]
                    public isSourceEncodingSupported(arg0: javax.sound.sampled.AudioFormat$Encoding): boolean
                    public isTargetEncodingSupported(arg0: javax.sound.sampled.AudioFormat$Encoding): boolean
                    public getTargetEncodings(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat$Encoding[]
                    public isConversionSupported(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): boolean
                    public getTargetFormats(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat[]
                    public isConversionSupported(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioFormat): boolean
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                    public static class: java.lang.Class<any>
                }
                abstract class MixerProvider {
                    public constructor()
                    public isMixerSupported(arg0: javax.sound.sampled.Mixer$Info): boolean
                    public getMixerInfo(): javax.sound.sampled.Mixer$Info[]
                    public getMixer(arg0: javax.sound.sampled.Mixer$Info): javax.sound.sampled.Mixer
                    public static class: java.lang.Class<any>
                }
            }
            class AudioFileFormat {
                protected constructor(arg0: javax.sound.sampled.AudioFileFormat$Type, arg1: int, arg2: javax.sound.sampled.AudioFormat, arg3: int)
                public constructor(arg0: javax.sound.sampled.AudioFileFormat$Type, arg1: javax.sound.sampled.AudioFormat, arg2: int)
                public constructor(arg0: javax.sound.sampled.AudioFileFormat$Type, arg1: javax.sound.sampled.AudioFormat, arg2: int, arg3: java.util.Map<java.lang.String, java.lang.Object>)
                public getType(): javax.sound.sampled.AudioFileFormat$Type
                public getByteLength(): int
                public getFormat(): javax.sound.sampled.AudioFormat
                public getFrameLength(): int
                public properties(): java.util.Map<java.lang.String, java.lang.Object>
                public getProperty(arg0: java.lang.String | string): java.lang.Object
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class AudioFormat {
                protected encoding: javax.sound.sampled.AudioFormat$Encoding
                protected sampleRate: float
                protected sampleSizeInBits: int
                protected channels: int
                protected frameSize: int
                protected frameRate: float
                protected bigEndian: boolean
                public constructor(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: float, arg2: int, arg3: int, arg4: int, arg5: float, arg6: boolean)
                public constructor(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: float, arg2: int, arg3: int, arg4: int, arg5: float, arg6: boolean, arg7: java.util.Map<java.lang.String, java.lang.Object>)
                public constructor(arg0: float, arg1: int, arg2: int, arg3: boolean, arg4: boolean)
                public getEncoding(): javax.sound.sampled.AudioFormat$Encoding
                public getSampleRate(): float
                public getSampleSizeInBits(): int
                public getChannels(): int
                public getFrameSize(): int
                public getFrameRate(): float
                public isBigEndian(): boolean
                public properties(): java.util.Map<java.lang.String, java.lang.Object>
                public getProperty(arg0: java.lang.String | string): java.lang.Object
                public matches(arg0: javax.sound.sampled.AudioFormat): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class AudioInputStream extends java.io.InputStream {
                protected format: javax.sound.sampled.AudioFormat
                protected frameLength: long
                protected frameSize: int
                protected framePos: long
                public constructor(arg0: java.io.InputStream, arg1: javax.sound.sampled.AudioFormat, arg2: long)
                public constructor(arg0: javax.sound.sampled.TargetDataLine)
                public getFormat(): javax.sound.sampled.AudioFormat
                public getFrameLength(): long
                public read(): int
                public read(arg0: byte[]): int
                public read(arg0: byte[], arg1: int, arg2: int): int
                public skip(arg0: long): long
                public available(): int
                public close(): void
                public mark(arg0: int): void
                public reset(): void
                public markSupported(): boolean
                public static class: java.lang.Class<any>
            }
            class AudioPermission extends java.security.BasicPermission {
                public constructor(arg0: java.lang.String | string)
                public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class AudioSystem {
                public static NOT_SPECIFIED: int
                public static getMixerInfo(): javax.sound.sampled.Mixer$Info[]
                public static getMixer(arg0: javax.sound.sampled.Mixer$Info): javax.sound.sampled.Mixer
                public static getSourceLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                public static getTargetLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                public static isLineSupported(arg0: javax.sound.sampled.Line$Info): boolean
                public static getLine(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line
                public static getClip(): javax.sound.sampled.Clip
                public static getClip(arg0: javax.sound.sampled.Mixer$Info): javax.sound.sampled.Clip
                public static getSourceDataLine(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.SourceDataLine
                public static getSourceDataLine(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.Mixer$Info): javax.sound.sampled.SourceDataLine
                public static getTargetDataLine(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.TargetDataLine
                public static getTargetDataLine(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.Mixer$Info): javax.sound.sampled.TargetDataLine
                public static getTargetEncodings(arg0: javax.sound.sampled.AudioFormat$Encoding): javax.sound.sampled.AudioFormat$Encoding[]
                public static getTargetEncodings(arg0: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat$Encoding[]
                public static isConversionSupported(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): boolean
                public static getAudioInputStream(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                public static getTargetFormats(arg0: javax.sound.sampled.AudioFormat$Encoding, arg1: javax.sound.sampled.AudioFormat): javax.sound.sampled.AudioFormat[]
                public static isConversionSupported(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioFormat): boolean
                public static getAudioInputStream(arg0: javax.sound.sampled.AudioFormat, arg1: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioInputStream
                public static getAudioFileFormat(arg0: java.io.InputStream): javax.sound.sampled.AudioFileFormat
                public static getAudioFileFormat(arg0: java.net.URL): javax.sound.sampled.AudioFileFormat
                public static getAudioFileFormat(arg0: java.io.File): javax.sound.sampled.AudioFileFormat
                public static getAudioInputStream(arg0: java.io.InputStream): javax.sound.sampled.AudioInputStream
                public static getAudioInputStream(arg0: java.net.URL): javax.sound.sampled.AudioInputStream
                public static getAudioInputStream(arg0: java.io.File): javax.sound.sampled.AudioInputStream
                public static getAudioFileTypes(): javax.sound.sampled.AudioFileFormat$Type[]
                public static isFileTypeSupported(arg0: javax.sound.sampled.AudioFileFormat$Type): boolean
                public static getAudioFileTypes(arg0: javax.sound.sampled.AudioInputStream): javax.sound.sampled.AudioFileFormat$Type[]
                public static isFileTypeSupported(arg0: javax.sound.sampled.AudioFileFormat$Type, arg1: javax.sound.sampled.AudioInputStream): boolean
                public static write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.OutputStream | java.io.OutputStream$$Lambda): int
                public static write(arg0: javax.sound.sampled.AudioInputStream, arg1: javax.sound.sampled.AudioFileFormat$Type, arg2: java.io.File): int
                public static class: java.lang.Class<any>
            }
            abstract class BooleanControl extends javax.sound.sampled.Control {
                protected constructor(arg0: javax.sound.sampled.BooleanControl$Type, arg1: boolean, arg2: java.lang.String | string, arg3: java.lang.String | string)
                protected constructor(arg0: javax.sound.sampled.BooleanControl$Type, arg1: boolean)
                public setValue(arg0: boolean): void
                public getValue(): boolean
                public getStateLabel(arg0: boolean): string
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface Clip extends javax.sound.sampled.DataLine {
                LOOP_CONTINUOUSLY: int
                open(arg0: javax.sound.sampled.AudioFormat, arg1: byte[], arg2: int, arg3: int): void
                open(arg0: javax.sound.sampled.AudioInputStream): void
                getFrameLength(): int
                getMicrosecondLength(): long
                setFramePosition(arg0: int): void
                setMicrosecondPosition(arg0: long): void
                setLoopPoints(arg0: int, arg1: int): void
                loop(arg0: int): void
            }
            abstract class CompoundControl extends javax.sound.sampled.Control {
                protected constructor(arg0: javax.sound.sampled.CompoundControl$Type, arg1: javax.sound.sampled.Control[])
                public getMemberControls(): javax.sound.sampled.Control[]
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class Control {
                protected constructor(arg0: javax.sound.sampled.Control$Type)
                public getType(): javax.sound.sampled.Control$Type
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface DataLine extends javax.sound.sampled.Line {
                drain(): void
                flush(): void
                start(): void
                stop(): void
                isRunning(): boolean
                isActive(): boolean
                getFormat(): javax.sound.sampled.AudioFormat
                getBufferSize(): int
                available(): int
                getFramePosition(): int
                getLongFramePosition(): long
                getMicrosecondPosition(): long
                getLevel(): float
            }
            abstract class EnumControl extends javax.sound.sampled.Control {
                protected constructor(arg0: javax.sound.sampled.EnumControl$Type, arg1: java.lang.Object[], arg2: java.lang.Object)
                public setValue(arg0: java.lang.Object): void
                public getValue(): java.lang.Object
                public getValues(): java.lang.Object[]
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class FloatControl extends javax.sound.sampled.Control {
                protected constructor(arg0: javax.sound.sampled.FloatControl$Type, arg1: float, arg2: float, arg3: float, arg4: int, arg5: float, arg6: java.lang.String | string, arg7: java.lang.String | string, arg8: java.lang.String | string, arg9: java.lang.String | string)
                protected constructor(arg0: javax.sound.sampled.FloatControl$Type, arg1: float, arg2: float, arg3: float, arg4: int, arg5: float, arg6: java.lang.String | string)
                public setValue(arg0: float): void
                public getValue(): float
                public getMaximum(): float
                public getMinimum(): float
                public getUnits(): string
                public getMinLabel(): string
                public getMidLabel(): string
                public getMaxLabel(): string
                public getPrecision(): float
                public getUpdatePeriod(): int
                public shift(arg0: float, arg1: float, arg2: int): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface Line extends java.lang.AutoCloseable {
                getLineInfo(): javax.sound.sampled.Line$Info
                open(): void
                close(): void
                isOpen(): boolean
                getControls(): javax.sound.sampled.Control[]
                isControlSupported(arg0: javax.sound.sampled.Control$Type): boolean
                getControl(arg0: javax.sound.sampled.Control$Type): javax.sound.sampled.Control
                addLineListener(arg0: javax.sound.sampled.LineListener): void
                removeLineListener(arg0: javax.sound.sampled.LineListener): void
            }
            class LineEvent extends java.util.EventObject {
                public constructor(arg0: javax.sound.sampled.Line, arg1: javax.sound.sampled.LineEvent$Type, arg2: long)
                public getLine(): javax.sound.sampled.Line
                public getType(): javax.sound.sampled.LineEvent$Type
                public getFramePosition(): long
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface LineListener extends java.util.EventListener {
                update(arg0: javax.sound.sampled.LineEvent): void
            }
            class LineUnavailableException extends java.lang.Exception {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            interface Mixer extends javax.sound.sampled.Line {
                getMixerInfo(): javax.sound.sampled.Mixer$Info
                getSourceLineInfo(): javax.sound.sampled.Line$Info[]
                getTargetLineInfo(): javax.sound.sampled.Line$Info[]
                getSourceLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                getTargetLineInfo(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line$Info[]
                isLineSupported(arg0: javax.sound.sampled.Line$Info): boolean
                getLine(arg0: javax.sound.sampled.Line$Info): javax.sound.sampled.Line
                getMaxLines(arg0: javax.sound.sampled.Line$Info): int
                getSourceLines(): javax.sound.sampled.Line[]
                getTargetLines(): javax.sound.sampled.Line[]
                synchronize(arg0: javax.sound.sampled.Line[], arg1: boolean): void
                unsynchronize(arg0: javax.sound.sampled.Line[]): void
                isSynchronizationSupported(arg0: javax.sound.sampled.Line[], arg1: boolean): boolean
            }
            interface Port extends javax.sound.sampled.Line {
            }
            class ReverbType {
                protected constructor(arg0: java.lang.String | string, arg1: int, arg2: float, arg3: int, arg4: float, arg5: int)
                public getName(): string
                public getEarlyReflectionDelay(): int
                public getEarlyReflectionIntensity(): float
                public getLateReflectionDelay(): int
                public getLateReflectionIntensity(): float
                public getDecayTime(): int
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface SourceDataLine extends javax.sound.sampled.DataLine {
                open(arg0: javax.sound.sampled.AudioFormat, arg1: int): void
                open(arg0: javax.sound.sampled.AudioFormat): void
                write(arg0: byte[], arg1: int, arg2: int): int
            }
            interface TargetDataLine extends javax.sound.sampled.DataLine {
                open(arg0: javax.sound.sampled.AudioFormat, arg1: int): void
                open(arg0: javax.sound.sampled.AudioFormat): void
                read(arg0: byte[], arg1: int, arg2: int): int
            }
            class UnsupportedAudioFileException extends java.lang.Exception {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
        }
    }
    namespace swing {
        namespace border {
            abstract class AbstractBorder implements javax.swing.border.Border , java.io.Serializable {
                public constructor()
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component): java.awt.Insets
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public isBorderOpaque(): boolean
                public getInteriorRectangle(arg0: java.awt.Component, arg1: int, arg2: int, arg3: int, arg4: int): java.awt.Rectangle
                public static getInteriorRectangle(arg0: java.awt.Component, arg1: javax.swing.border.Border, arg2: int, arg3: int, arg4: int, arg5: int): java.awt.Rectangle
                public getBaseline(arg0: java.awt.Component, arg1: int, arg2: int): int
                public getBaselineResizeBehavior(arg0: java.awt.Component): java.awt.Component$BaselineResizeBehavior
                public static class: java.lang.Class<any>
            }
            class BevelBorder extends javax.swing.border.AbstractBorder {
                public static RAISED: int
                public static LOWERED: int
                protected bevelType: int
                protected highlightOuter: java.awt.Color
                protected highlightInner: java.awt.Color
                protected shadowInner: java.awt.Color
                protected shadowOuter: java.awt.Color
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color)
                public constructor(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color, arg3: java.awt.Color, arg4: java.awt.Color)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public getHighlightOuterColor(arg0: java.awt.Component): java.awt.Color
                public getHighlightInnerColor(arg0: java.awt.Component): java.awt.Color
                public getShadowInnerColor(arg0: java.awt.Component): java.awt.Color
                public getShadowOuterColor(arg0: java.awt.Component): java.awt.Color
                public getHighlightOuterColor(): java.awt.Color
                public getHighlightInnerColor(): java.awt.Color
                public getShadowInnerColor(): java.awt.Color
                public getShadowOuterColor(): java.awt.Color
                public getBevelType(): int
                public isBorderOpaque(): boolean
                protected paintRaisedBevel(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                protected paintLoweredBevel(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public static class: java.lang.Class<any>
            }
            interface Border {
                paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                getBorderInsets(arg0: java.awt.Component): java.awt.Insets
                isBorderOpaque(): boolean
            }
            class CompoundBorder extends javax.swing.border.AbstractBorder {
                protected outsideBorder: javax.swing.border.Border
                protected insideBorder: javax.swing.border.Border
                public constructor()
                public constructor(arg0: javax.swing.border.Border, arg1: javax.swing.border.Border)
                public isBorderOpaque(): boolean
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public getOutsideBorder(): javax.swing.border.Border
                public getInsideBorder(): javax.swing.border.Border
                public static class: java.lang.Class<any>
            }
            class EmptyBorder extends javax.swing.border.AbstractBorder implements java.io.Serializable {
                protected left: int
                protected right: int
                protected top: int
                protected bottom: int
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: java.awt.Insets)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public getBorderInsets(): java.awt.Insets
                public isBorderOpaque(): boolean
                public static class: java.lang.Class<any>
            }
            class EtchedBorder extends javax.swing.border.AbstractBorder {
                public static RAISED: int
                public static LOWERED: int
                protected etchType: int
                protected highlight: java.awt.Color
                protected shadow: java.awt.Color
                public constructor()
                public constructor(arg0: int)
                public constructor(arg0: java.awt.Color, arg1: java.awt.Color)
                public constructor(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public isBorderOpaque(): boolean
                public getEtchType(): int
                public getHighlightColor(arg0: java.awt.Component): java.awt.Color
                public getHighlightColor(): java.awt.Color
                public getShadowColor(arg0: java.awt.Component): java.awt.Color
                public getShadowColor(): java.awt.Color
                public static class: java.lang.Class<any>
            }
            class LineBorder extends javax.swing.border.AbstractBorder {
                protected thickness: int
                protected lineColor: java.awt.Color
                protected roundedCorners: boolean
                public static createBlackLineBorder(): javax.swing.border.Border
                public static createGrayLineBorder(): javax.swing.border.Border
                public constructor(arg0: java.awt.Color)
                public constructor(arg0: java.awt.Color, arg1: int)
                public constructor(arg0: java.awt.Color, arg1: int, arg2: boolean)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public getLineColor(): java.awt.Color
                public getThickness(): int
                public getRoundedCorners(): boolean
                public isBorderOpaque(): boolean
                public static class: java.lang.Class<any>
            }
            class MatteBorder extends javax.swing.border.EmptyBorder {
                protected color: java.awt.Color
                protected tileIcon: javax.swing.Icon
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color)
                public constructor(arg0: java.awt.Insets, arg1: java.awt.Color)
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: javax.swing.Icon)
                public constructor(arg0: java.awt.Insets, arg1: javax.swing.Icon)
                public constructor(arg0: javax.swing.Icon)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public getBorderInsets(): java.awt.Insets
                public getMatteColor(): java.awt.Color
                public getTileIcon(): javax.swing.Icon
                public isBorderOpaque(): boolean
                public static class: java.lang.Class<any>
            }
            class SoftBevelBorder extends javax.swing.border.BevelBorder {
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color)
                public constructor(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color, arg3: java.awt.Color, arg4: java.awt.Color)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public isBorderOpaque(): boolean
                public static class: java.lang.Class<any>
            }
            class StrokeBorder extends javax.swing.border.AbstractBorder {
                public constructor(arg0: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda)
                public constructor(arg0: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda, arg1: java.awt.Paint)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public getStroke(): java.awt.BasicStroke
                public getPaint(): java.awt.Paint
                public static class: java.lang.Class<any>
            }
            class TitledBorder extends javax.swing.border.AbstractBorder {
                protected title: string
                protected border: javax.swing.border.Border
                protected titlePosition: int
                protected titleJustification: int
                protected titleFont: java.awt.Font
                protected titleColor: java.awt.Color
                public static DEFAULT_POSITION: int
                public static ABOVE_TOP: int
                public static TOP: int
                public static BELOW_TOP: int
                public static ABOVE_BOTTOM: int
                public static BOTTOM: int
                public static BELOW_BOTTOM: int
                public static DEFAULT_JUSTIFICATION: int
                public static LEFT: int
                public static CENTER: int
                public static RIGHT: int
                public static LEADING: int
                public static TRAILING: int
                protected static EDGE_SPACING: int
                protected static TEXT_SPACING: int
                protected static TEXT_INSET_H: int
                public constructor(arg0: java.lang.String | string)
                public constructor(arg0: javax.swing.border.Border)
                public constructor(arg0: javax.swing.border.Border, arg1: java.lang.String | string)
                public constructor(arg0: javax.swing.border.Border, arg1: java.lang.String | string, arg2: int, arg3: int)
                public constructor(arg0: javax.swing.border.Border, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: java.awt.Font)
                public constructor(arg0: javax.swing.border.Border, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: java.awt.Font, arg5: java.awt.Color)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                public isBorderOpaque(): boolean
                public getTitle(): string
                public getBorder(): javax.swing.border.Border
                public getTitlePosition(): int
                public getTitleJustification(): int
                public getTitleFont(): java.awt.Font
                public getTitleColor(): java.awt.Color
                public setTitle(arg0: java.lang.String | string): void
                public setBorder(arg0: javax.swing.border.Border): void
                public setTitlePosition(arg0: int): void
                public setTitleJustification(arg0: int): void
                public setTitleFont(arg0: java.awt.Font): void
                public setTitleColor(arg0: java.awt.Color): void
                public getMinimumSize(arg0: java.awt.Component): java.awt.Dimension
                public getBaseline(arg0: java.awt.Component, arg1: int, arg2: int): int
                public getBaselineResizeBehavior(arg0: java.awt.Component): java.awt.Component$BaselineResizeBehavior
                protected getFont(arg0: java.awt.Component): java.awt.Font
                public static class: java.lang.Class<any>
            }
        }
        namespace colorchooser {
            abstract class AbstractColorChooserPanel extends javax.swing.JPanel {
                public constructor()
                public updateChooser(): void
                protected buildChooser(): void
                public getDisplayName(): string
                public getMnemonic(): int
                public getDisplayedMnemonicIndex(): int
                public getSmallDisplayIcon(): javax.swing.Icon
                public getLargeDisplayIcon(): javax.swing.Icon
                public installChooserPanel(arg0: javax.swing.JColorChooser | javax.swing.JColorChooser$$Lambda): void
                public uninstallChooserPanel(arg0: javax.swing.JColorChooser | javax.swing.JColorChooser$$Lambda): void
                public getColorSelectionModel(): javax.swing.colorchooser.ColorSelectionModel
                protected getColorFromModel(): java.awt.Color
                public paint(arg0: java.awt.Graphics): void
                public static class: java.lang.Class<any>
            }
            class CenterLayout implements java.awt.LayoutManager , java.io.Serializable {
                public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
                public removeLayoutComponent(arg0: java.awt.Component): void
                public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                public layoutContainer(arg0: java.awt.Container): void
                public static class: java.lang.Class<any>
            }
            class ColorChooserComponentFactory {
                public static getDefaultChooserPanels(): javax.swing.colorchooser.AbstractColorChooserPanel[]
                public static getPreviewPanel(): javax.swing.JComponent
                public static class: java.lang.Class<any>
            }
            class ColorChooserPanel extends javax.swing.colorchooser.AbstractColorChooserPanel implements java.beans.PropertyChangeListener {
                public setEnabled(arg0: boolean): void
                public updateChooser(): void
                protected buildChooser(): void
                public getDisplayName(): string
                public getMnemonic(): int
                public getDisplayedMnemonicIndex(): int
                public getSmallDisplayIcon(): javax.swing.Icon
                public getLargeDisplayIcon(): javax.swing.Icon
                public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                public static class: java.lang.Class<any>
            }
            class ColorModel {
                public static class: java.lang.Class<any>
            }
            class ColorModelCMYK extends javax.swing.colorchooser.ColorModel {
                public static class: java.lang.Class<any>
            }
            class ColorModelHSL extends javax.swing.colorchooser.ColorModel {
                public static class: java.lang.Class<any>
            }
            class ColorModelHSV extends javax.swing.colorchooser.ColorModel {
                public static class: java.lang.Class<any>
            }
            class ColorPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
                public actionPerformed(arg0: java.awt.event.ActionEvent): void
                public static class: java.lang.Class<any>
            }
            interface ColorSelectionModel {
                getSelectedColor(): java.awt.Color
                setSelectedColor(arg0: java.awt.Color): void
                addChangeListener(arg0: javax.swing.event.ChangeListener): void
                removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            }
            class DefaultColorSelectionModel implements javax.swing.colorchooser.ColorSelectionModel , java.io.Serializable {
                protected changeEvent: javax.swing.event.ChangeEvent
                protected listenerList: javax.swing.event.EventListenerList
                public constructor()
                public constructor(arg0: java.awt.Color)
                public getSelectedColor(): java.awt.Color
                public setSelectedColor(arg0: java.awt.Color): void
                public addChangeListener(arg0: javax.swing.event.ChangeListener): void
                public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
                public getChangeListeners(): javax.swing.event.ChangeListener[]
                protected fireStateChanged(): void
                public static class: java.lang.Class<any>
            }
            class DefaultPreviewPanel extends javax.swing.JPanel {
                public getPreferredSize(): java.awt.Dimension
                public paintComponent(arg0: java.awt.Graphics): void
                public static class: java.lang.Class<any>
            }
            class DefaultSwatchChooserPanel extends javax.swing.colorchooser.AbstractColorChooserPanel {
                public constructor()
                public getDisplayName(): string
                public getMnemonic(): int
                public getDisplayedMnemonicIndex(): int
                public getSmallDisplayIcon(): javax.swing.Icon
                public getLargeDisplayIcon(): javax.swing.Icon
                public installChooserPanel(arg0: javax.swing.JColorChooser | javax.swing.JColorChooser$$Lambda): void
                protected buildChooser(): void
                public uninstallChooserPanel(arg0: javax.swing.JColorChooser | javax.swing.JColorChooser$$Lambda): void
                public updateChooser(): void
                public static class: java.lang.Class<any>
            }
            class DiagramComponent extends javax.swing.JComponent implements java.awt.event.MouseListener , java.awt.event.MouseMotionListener {
                protected paintComponent(arg0: java.awt.Graphics): void
                public mousePressed(arg0: java.awt.event.MouseEvent): void
                public mouseReleased(arg0: java.awt.event.MouseEvent): void
                public mouseClicked(arg0: java.awt.event.MouseEvent): void
                public mouseEntered(arg0: java.awt.event.MouseEvent): void
                public mouseExited(arg0: java.awt.event.MouseEvent): void
                public mouseMoved(arg0: java.awt.event.MouseEvent): void
                public mouseDragged(arg0: java.awt.event.MouseEvent): void
                public static class: java.lang.Class<any>
            }
            class SlidingSpinner implements javax.swing.event.ChangeListener {
                public stateChanged(arg0: javax.swing.event.ChangeEvent): void
                public static class: java.lang.Class<any>
            }
            class SmartGridLayout implements java.awt.LayoutManager , java.io.Serializable {
                public constructor(arg0: int, arg1: int)
                public layoutContainer(arg0: java.awt.Container): void
                public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
                public removeLayoutComponent(arg0: java.awt.Component): void
                public static class: java.lang.Class<any>
            }
            class ValueFormatter extends javax.swing.JFormattedTextField$AbstractFormatter implements java.awt.event.FocusListener , java.lang.Runnable {
                public stringToValue(arg0: java.lang.String | string): java.lang.Object
                public valueToString(arg0: java.lang.Object): string
                protected getDocumentFilter(): javax.swing.text.DocumentFilter
                public focusGained(arg0: java.awt.event.FocusEvent): void
                public focusLost(arg0: java.awt.event.FocusEvent): void
                public run(): void
                public static class: java.lang.Class<any>
            }
            class ValueFormatter$$Lambda extends javax.swing.JFormattedTextField$AbstractFormatter implements java.awt.event.FocusListener , java.lang.Runnable {
                public (arg0: java.lang.String | string): java.lang.Object
            }
        }
        namespace event {
            class AncestorEvent extends java.awt.AWTEvent {
                public static ANCESTOR_ADDED: int
                public static ANCESTOR_REMOVED: int
                public static ANCESTOR_MOVED: int
                public constructor(arg0: javax.swing.JComponent, arg1: int, arg2: java.awt.Container, arg3: java.awt.Container)
                public getAncestor(): java.awt.Container
                public getAncestorParent(): java.awt.Container
                public getComponent(): javax.swing.JComponent
                public static class: java.lang.Class<any>
            }
            interface AncestorListener extends java.util.EventListener {
                ancestorAdded(arg0: javax.swing.event.AncestorEvent): void
                ancestorRemoved(arg0: javax.swing.event.AncestorEvent): void
                ancestorMoved(arg0: javax.swing.event.AncestorEvent): void
            }
            abstract class CaretEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object)
                public getDot(): int
                public getMark(): int
                public static class: java.lang.Class<any>
            }
            interface CaretListener extends java.util.EventListener {
                caretUpdate(arg0: javax.swing.event.CaretEvent): void
            }
            interface CellEditorListener extends java.util.EventListener {
                editingStopped(arg0: javax.swing.event.ChangeEvent): void
                editingCanceled(arg0: javax.swing.event.ChangeEvent): void
            }
            class ChangeEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object)
                public static class: java.lang.Class<any>
            }
            interface ChangeListener extends java.util.EventListener {
                stateChanged(arg0: javax.swing.event.ChangeEvent): void
            }
            interface DocumentEvent {
                getOffset(): int
                getLength(): int
                getDocument(): javax.swing.text.Document
                getType(): javax.swing.event.DocumentEvent$EventType
                getChange(arg0: javax.swing.text.Element): javax.swing.event.DocumentEvent$ElementChange
            }
            interface DocumentListener extends java.util.EventListener {
                insertUpdate(arg0: javax.swing.event.DocumentEvent): void
                removeUpdate(arg0: javax.swing.event.DocumentEvent): void
                changedUpdate(arg0: javax.swing.event.DocumentEvent): void
            }
            class EventListenerList implements java.io.Serializable {
                protected listenerList: java.lang.Object[]
                public constructor()
                public getListenerList(): java.lang.Object[]
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public getListenerCount<T extends java.util.EventListener>(): int
                public getListenerCount<T extends java.util.EventListener>(arg0: java.lang.Class<any>): int
                public add<T extends java.util.EventListener>(arg0: java.lang.Class<T>, arg1: T): void
                public remove<T extends java.util.EventListener>(arg0: java.lang.Class<T>, arg1: T): void
                public toString<T extends java.util.EventListener>(): string
                public static class: java.lang.Class<any>
            }
            class HyperlinkEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL)
                public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string)
                public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string, arg4: javax.swing.text.Element)
                public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string, arg4: javax.swing.text.Element, arg5: java.awt.event.InputEvent)
                public getEventType(): javax.swing.event.HyperlinkEvent$EventType
                public getDescription(): string
                public getURL(): java.net.URL
                public getSourceElement(): javax.swing.text.Element
                public getInputEvent(): java.awt.event.InputEvent
                public static class: java.lang.Class<any>
            }
            interface HyperlinkListener extends java.util.EventListener {
                hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
            }
            abstract class InternalFrameAdapter implements javax.swing.event.InternalFrameListener {
                public constructor()
                public internalFrameOpened(arg0: javax.swing.event.InternalFrameEvent): void
                public internalFrameClosing(arg0: javax.swing.event.InternalFrameEvent): void
                public internalFrameClosed(arg0: javax.swing.event.InternalFrameEvent): void
                public internalFrameIconified(arg0: javax.swing.event.InternalFrameEvent): void
                public internalFrameDeiconified(arg0: javax.swing.event.InternalFrameEvent): void
                public internalFrameActivated(arg0: javax.swing.event.InternalFrameEvent): void
                public internalFrameDeactivated(arg0: javax.swing.event.InternalFrameEvent): void
                public static class: java.lang.Class<any>
            }
            class InternalFrameEvent extends java.awt.AWTEvent {
                public static INTERNAL_FRAME_FIRST: int
                public static INTERNAL_FRAME_LAST: int
                public static INTERNAL_FRAME_OPENED: int
                public static INTERNAL_FRAME_CLOSING: int
                public static INTERNAL_FRAME_CLOSED: int
                public static INTERNAL_FRAME_ICONIFIED: int
                public static INTERNAL_FRAME_DEICONIFIED: int
                public static INTERNAL_FRAME_ACTIVATED: int
                public static INTERNAL_FRAME_DEACTIVATED: int
                public constructor(arg0: javax.swing.JInternalFrame, arg1: int)
                public paramString(): string
                public getInternalFrame(): javax.swing.JInternalFrame
                public static class: java.lang.Class<any>
            }
            interface InternalFrameListener extends java.util.EventListener {
                internalFrameOpened(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameClosing(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameClosed(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameIconified(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameDeiconified(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameActivated(arg0: javax.swing.event.InternalFrameEvent): void
                internalFrameDeactivated(arg0: javax.swing.event.InternalFrameEvent): void
            }
            class ListDataEvent extends java.util.EventObject {
                public static CONTENTS_CHANGED: int
                public static INTERVAL_ADDED: int
                public static INTERVAL_REMOVED: int
                public getType(): int
                public getIndex0(): int
                public getIndex1(): int
                public constructor(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int)
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface ListDataListener extends java.util.EventListener {
                intervalAdded(arg0: javax.swing.event.ListDataEvent): void
                intervalRemoved(arg0: javax.swing.event.ListDataEvent): void
                contentsChanged(arg0: javax.swing.event.ListDataEvent): void
            }
            class ListSelectionEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object, arg1: int, arg2: int, arg3: boolean)
                public getFirstIndex(): int
                public getLastIndex(): int
                public getValueIsAdjusting(): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface ListSelectionListener extends java.util.EventListener {
                valueChanged(arg0: javax.swing.event.ListSelectionEvent): void
            }
            class MenuDragMouseEvent extends java.awt.event.MouseEvent {
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean, arg8: javax.swing.MenuElement[], arg9: javax.swing.MenuSelectionManager)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: boolean, arg10: javax.swing.MenuElement[], arg11: javax.swing.MenuSelectionManager)
                public getPath(): javax.swing.MenuElement[]
                public getMenuSelectionManager(): javax.swing.MenuSelectionManager
                public static class: java.lang.Class<any>
            }
            interface MenuDragMouseListener extends java.util.EventListener {
                menuDragMouseEntered(arg0: javax.swing.event.MenuDragMouseEvent): void
                menuDragMouseExited(arg0: javax.swing.event.MenuDragMouseEvent): void
                menuDragMouseDragged(arg0: javax.swing.event.MenuDragMouseEvent): void
                menuDragMouseReleased(arg0: javax.swing.event.MenuDragMouseEvent): void
            }
            class MenuEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object)
                public static class: java.lang.Class<any>
            }
            class MenuKeyEvent extends java.awt.event.KeyEvent {
                public constructor(arg0: java.awt.Component, arg1: int, arg2: long, arg3: int, arg4: int, arg5: char, arg6: javax.swing.MenuElement[], arg7: javax.swing.MenuSelectionManager)
                public getPath(): javax.swing.MenuElement[]
                public getMenuSelectionManager(): javax.swing.MenuSelectionManager
                public static class: java.lang.Class<any>
            }
            interface MenuKeyListener extends java.util.EventListener {
                menuKeyTyped(arg0: javax.swing.event.MenuKeyEvent): void
                menuKeyPressed(arg0: javax.swing.event.MenuKeyEvent): void
                menuKeyReleased(arg0: javax.swing.event.MenuKeyEvent): void
            }
            interface MenuListener extends java.util.EventListener {
                menuSelected(arg0: javax.swing.event.MenuEvent): void
                menuDeselected(arg0: javax.swing.event.MenuEvent): void
                menuCanceled(arg0: javax.swing.event.MenuEvent): void
            }
            abstract class MouseInputAdapter extends java.awt.event.MouseAdapter implements javax.swing.event.MouseInputListener {
                public constructor()
                public static class: java.lang.Class<any>
            }
            interface MouseInputListener extends java.awt.event.MouseListener , java.awt.event.MouseMotionListener {
            }
            class PopupMenuEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object)
                public static class: java.lang.Class<any>
            }
            interface PopupMenuListener extends java.util.EventListener {
                popupMenuWillBecomeVisible(arg0: javax.swing.event.PopupMenuEvent): void
                popupMenuWillBecomeInvisible(arg0: javax.swing.event.PopupMenuEvent): void
                popupMenuCanceled(arg0: javax.swing.event.PopupMenuEvent): void
            }
            class RowSorterEvent extends java.util.EventObject {
                public constructor(arg0: javax.swing.RowSorter)
                public constructor(arg0: javax.swing.RowSorter, arg1: javax.swing.event.RowSorterEvent$Type, arg2: int[])
                public getSource(): javax.swing.RowSorter
                public getType(): javax.swing.event.RowSorterEvent$Type
                public convertPreviousRowIndexToModel(arg0: int): int
                public getPreviousRowCount(): int
                public getSource(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface RowSorterListener extends java.util.EventListener {
                sorterChanged(arg0: javax.swing.event.RowSorterEvent): void
            }
            class SwingPropertyChangeSupport extends java.beans.PropertyChangeSupport {
                public constructor(arg0: java.lang.Object)
                public constructor(arg0: java.lang.Object, arg1: boolean)
                public firePropertyChange(arg0: java.beans.PropertyChangeEvent): void
                public isNotifyOnEDT(): boolean
                public static class: java.lang.Class<any>
            }
            class TableColumnModelEvent extends java.util.EventObject {
                protected fromIndex: int
                protected toIndex: int
                public constructor(arg0: javax.swing.table.TableColumnModel, arg1: int, arg2: int)
                public getFromIndex(): int
                public getToIndex(): int
                public static class: java.lang.Class<any>
            }
            interface TableColumnModelListener extends java.util.EventListener {
                columnAdded(arg0: javax.swing.event.TableColumnModelEvent): void
                columnRemoved(arg0: javax.swing.event.TableColumnModelEvent): void
                columnMoved(arg0: javax.swing.event.TableColumnModelEvent): void
                columnMarginChanged(arg0: javax.swing.event.ChangeEvent): void
                columnSelectionChanged(arg0: javax.swing.event.ListSelectionEvent): void
            }
            class TableModelEvent extends java.util.EventObject {
                public static INSERT: int
                public static UPDATE: int
                public static DELETE: int
                public static HEADER_ROW: int
                public static ALL_COLUMNS: int
                protected type: int
                protected firstRow: int
                protected lastRow: int
                protected column: int
                public constructor(arg0: javax.swing.table.TableModel)
                public constructor(arg0: javax.swing.table.TableModel, arg1: int)
                public constructor(arg0: javax.swing.table.TableModel, arg1: int, arg2: int)
                public constructor(arg0: javax.swing.table.TableModel, arg1: int, arg2: int, arg3: int)
                public constructor(arg0: javax.swing.table.TableModel, arg1: int, arg2: int, arg3: int, arg4: int)
                public getFirstRow(): int
                public getLastRow(): int
                public getColumn(): int
                public getType(): int
                public static class: java.lang.Class<any>
            }
            interface TableModelListener extends java.util.EventListener {
                tableChanged(arg0: javax.swing.event.TableModelEvent): void
            }
            class TreeExpansionEvent extends java.util.EventObject {
                protected path: javax.swing.tree.TreePath
                public constructor(arg0: java.lang.Object, arg1: javax.swing.tree.TreePath)
                public getPath(): javax.swing.tree.TreePath
                public static class: java.lang.Class<any>
            }
            interface TreeExpansionListener extends java.util.EventListener {
                treeExpanded(arg0: javax.swing.event.TreeExpansionEvent): void
                treeCollapsed(arg0: javax.swing.event.TreeExpansionEvent): void
            }
            class TreeModelEvent extends java.util.EventObject {
                protected path: javax.swing.tree.TreePath
                protected childIndices: int[]
                protected children: java.lang.Object[]
                public constructor(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[])
                public constructor(arg0: java.lang.Object, arg1: javax.swing.tree.TreePath, arg2: int[], arg3: java.lang.Object[])
                public constructor(arg0: java.lang.Object, arg1: java.lang.Object[])
                public constructor(arg0: java.lang.Object, arg1: javax.swing.tree.TreePath)
                public getTreePath(): javax.swing.tree.TreePath
                public getPath(): java.lang.Object[]
                public getChildren(): java.lang.Object[]
                public getChildIndices(): int[]
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface TreeModelListener extends java.util.EventListener {
                treeNodesChanged(arg0: javax.swing.event.TreeModelEvent): void
                treeNodesInserted(arg0: javax.swing.event.TreeModelEvent): void
                treeNodesRemoved(arg0: javax.swing.event.TreeModelEvent): void
                treeStructureChanged(arg0: javax.swing.event.TreeModelEvent): void
            }
            class TreeSelectionEvent extends java.util.EventObject {
                protected paths: javax.swing.tree.TreePath[]
                protected areNew: boolean[]
                protected oldLeadSelectionPath: javax.swing.tree.TreePath
                protected newLeadSelectionPath: javax.swing.tree.TreePath
                public constructor(arg0: java.lang.Object, arg1: javax.swing.tree.TreePath[], arg2: boolean[], arg3: javax.swing.tree.TreePath, arg4: javax.swing.tree.TreePath)
                public constructor(arg0: java.lang.Object, arg1: javax.swing.tree.TreePath, arg2: boolean, arg3: javax.swing.tree.TreePath, arg4: javax.swing.tree.TreePath)
                public getPaths(): javax.swing.tree.TreePath[]
                public getPath(): javax.swing.tree.TreePath
                public isAddedPath(): boolean
                public isAddedPath(arg0: javax.swing.tree.TreePath): boolean
                public isAddedPath(arg0: int): boolean
                public getOldLeadSelectionPath(): javax.swing.tree.TreePath
                public getNewLeadSelectionPath(): javax.swing.tree.TreePath
                public cloneWithSource(arg0: java.lang.Object): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface TreeSelectionListener extends java.util.EventListener {
                valueChanged(arg0: javax.swing.event.TreeSelectionEvent): void
            }
            interface TreeWillExpandListener extends java.util.EventListener {
                treeWillExpand(arg0: javax.swing.event.TreeExpansionEvent): void
                treeWillCollapse(arg0: javax.swing.event.TreeExpansionEvent): void
            }
            class UndoableEditEvent extends java.util.EventObject {
                public constructor(arg0: java.lang.Object, arg1: javax.swing.undo.UndoableEdit)
                public getEdit(): javax.swing.undo.UndoableEdit
                public static class: java.lang.Class<any>
            }
            interface UndoableEditListener extends java.util.EventListener {
                undoableEditHappened(arg0: javax.swing.event.UndoableEditEvent): void
            }
        }
        namespace filechooser {
            abstract class FileFilter {
                public constructor()
                public accept(arg0: java.io.File): boolean
                public getDescription(): string
                public static class: java.lang.Class<any>
            }
            class FileNameExtensionFilter extends javax.swing.filechooser.FileFilter {
                public constructor(arg0: java.lang.String | string, ...arg1: java.lang.String[])
                public accept(arg0: java.io.File): boolean
                public getDescription(): string
                public getExtensions(): java.lang.String[]
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class FileSystemView {
                public static getFileSystemView(): javax.swing.filechooser.FileSystemView
                public constructor()
                public isRoot(arg0: java.io.File): boolean
                public isTraversable(arg0: java.io.File): boolean
                public getSystemDisplayName(arg0: java.io.File): string
                public getSystemTypeDescription(arg0: java.io.File): string
                public getSystemIcon(arg0: java.io.File): javax.swing.Icon
                public isParent(arg0: java.io.File, arg1: java.io.File): boolean
                public getChild(arg0: java.io.File, arg1: java.lang.String | string): java.io.File
                public isFileSystem(arg0: java.io.File): boolean
                public createNewFolder(arg0: java.io.File): java.io.File
                public isHiddenFile(arg0: java.io.File): boolean
                public isFileSystemRoot(arg0: java.io.File): boolean
                public isDrive(arg0: java.io.File): boolean
                public isFloppyDrive(arg0: java.io.File): boolean
                public isComputerNode(arg0: java.io.File): boolean
                public getRoots(): java.io.File[]
                public getHomeDirectory(): java.io.File
                public getDefaultDirectory(): java.io.File
                public createFileObject(arg0: java.io.File, arg1: java.lang.String | string): java.io.File
                public createFileObject(arg0: java.lang.String | string): java.io.File
                public getFiles(arg0: java.io.File, arg1: boolean): java.io.File[]
                public getParentDirectory(arg0: java.io.File): java.io.File
                protected createFileSystemRoot(arg0: java.io.File): java.io.File
                public static class: java.lang.Class<any>
            }
            abstract class FileView {
                public constructor()
                public getName(arg0: java.io.File): string
                public getDescription(arg0: java.io.File): string
                public getTypeDescription(arg0: java.io.File): string
                public getIcon(arg0: java.io.File): javax.swing.Icon
                public isTraversable(arg0: java.io.File): boolean
                public static class: java.lang.Class<any>
            }
        }
        namespace plaf {
            namespace basic {
                class BasicArrowButton extends javax.swing.JButton implements javax.swing.SwingConstants {
                    protected direction: int
                    public constructor(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color, arg3: java.awt.Color, arg4: java.awt.Color)
                    public constructor(arg0: int)
                    public getDirection(): int
                    public setDirection(arg0: int): void
                    public paint(arg0: java.awt.Graphics): void
                    public getPreferredSize(): java.awt.Dimension
                    public getMinimumSize(): java.awt.Dimension
                    public getMaximumSize(): java.awt.Dimension
                    public isFocusTraversable(): boolean
                    public paintTriangle(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: boolean): void
                    public static class: java.lang.Class<any>
                }
                class BasicBorders {
                    public constructor()
                    public static getButtonBorder(): javax.swing.border.Border
                    public static getRadioButtonBorder(): javax.swing.border.Border
                    public static getToggleButtonBorder(): javax.swing.border.Border
                    public static getMenuBarBorder(): javax.swing.border.Border
                    public static getSplitPaneBorder(): javax.swing.border.Border
                    public static getSplitPaneDividerBorder(): javax.swing.border.Border
                    public static getTextFieldBorder(): javax.swing.border.Border
                    public static getProgressBarBorder(): javax.swing.border.Border
                    public static getInternalFrameBorder(): javax.swing.border.Border
                    public static class: java.lang.Class<any>
                }
                class BasicButtonListener implements java.awt.event.MouseListener , java.awt.event.MouseMotionListener , java.awt.event.FocusListener , javax.swing.event.ChangeListener , java.beans.PropertyChangeListener {
                    public constructor(arg0: javax.swing.AbstractButton)
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected checkOpacity(arg0: javax.swing.AbstractButton): void
                    public installKeyboardActions(arg0: javax.swing.JComponent): void
                    public uninstallKeyboardActions(arg0: javax.swing.JComponent): void
                    public stateChanged(arg0: javax.swing.event.ChangeEvent): void
                    public focusGained(arg0: java.awt.event.FocusEvent): void
                    public focusLost(arg0: java.awt.event.FocusEvent): void
                    public mouseMoved(arg0: java.awt.event.MouseEvent): void
                    public mouseDragged(arg0: java.awt.event.MouseEvent): void
                    public mouseClicked(arg0: java.awt.event.MouseEvent): void
                    public mousePressed(arg0: java.awt.event.MouseEvent): void
                    public mouseReleased(arg0: java.awt.event.MouseEvent): void
                    public mouseEntered(arg0: java.awt.event.MouseEvent): void
                    public mouseExited(arg0: java.awt.event.MouseEvent): void
                    public static class: java.lang.Class<any>
                }
                class BasicButtonUI extends javax.swing.plaf.ButtonUI {
                    protected defaultTextIconGap: int
                    protected defaultTextShiftOffset: int
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.AbstractButton): void
                    protected installListeners(arg0: javax.swing.AbstractButton): void
                    protected installKeyboardActions(arg0: javax.swing.AbstractButton): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallKeyboardActions(arg0: javax.swing.AbstractButton): void
                    protected uninstallListeners(arg0: javax.swing.AbstractButton): void
                    protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    protected createButtonListener(arg0: javax.swing.AbstractButton): javax.swing.plaf.basic.BasicButtonListener
                    public getDefaultTextIconGap(arg0: javax.swing.AbstractButton): int
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintIcon(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                    protected paintText(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle, arg3: java.lang.String | string): void
                    protected paintText(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle, arg3: java.lang.String | string): void
                    protected paintFocus(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle, arg3: java.awt.Rectangle, arg4: java.awt.Rectangle): void
                    protected paintButtonPressed(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton): void
                    protected clearTextShiftOffset(): void
                    protected setTextShiftOffset(): void
                    protected getTextShiftOffset(): int
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public static class: java.lang.Class<any>
                }
                class BasicCheckBoxMenuItemUI extends javax.swing.plaf.basic.BasicMenuItemUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public processMouseEvent(arg0: javax.swing.JMenuItem, arg1: java.awt.event.MouseEvent, arg2: javax.swing.MenuElement[], arg3: javax.swing.MenuSelectionManager): void
                    public static class: java.lang.Class<any>
                }
                class BasicCheckBoxUI extends javax.swing.plaf.basic.BasicRadioButtonUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public getPropertyPrefix(): string
                    public static class: java.lang.Class<any>
                }
                class BasicColorChooserUI extends javax.swing.plaf.ColorChooserUI {
                    protected chooser: javax.swing.JColorChooser
                    protected defaultChoosers: javax.swing.colorchooser.AbstractColorChooserPanel[]
                    protected previewListener: javax.swing.event.ChangeListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected createDefaultChoosers(): javax.swing.colorchooser.AbstractColorChooserPanel[]
                    protected uninstallDefaultChoosers(): void
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installPreviewPanel(): void
                    protected uninstallPreviewPanel(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installListeners(): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected uninstallListeners(): void
                    public static class: java.lang.Class<any>
                }
                class BasicComboBoxEditor implements javax.swing.ComboBoxEditor , java.awt.event.FocusListener {
                    protected editor: javax.swing.JTextField
                    public constructor()
                    public getEditorComponent(): java.awt.Component
                    protected createEditorComponent(): javax.swing.JTextField
                    public setItem(arg0: java.lang.Object): void
                    public getItem(): java.lang.Object
                    public selectAll(): void
                    public focusGained(arg0: java.awt.event.FocusEvent): void
                    public focusLost(arg0: java.awt.event.FocusEvent): void
                    public addActionListener(arg0: java.awt.event.ActionListener): void
                    public removeActionListener(arg0: java.awt.event.ActionListener): void
                    public static class: java.lang.Class<any>
                }
                class BasicComboBoxRenderer extends javax.swing.JLabel implements javax.swing.ListCellRenderer , java.io.Serializable {
                    protected static noFocusBorder: javax.swing.border.Border
                    public constructor()
                    public getPreferredSize(): java.awt.Dimension
                    public getListCellRendererComponent(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: java.lang.Object, arg2: int, arg3: boolean, arg4: boolean): java.awt.Component
                    public static class: java.lang.Class<any>
                }
                class BasicComboBoxUI extends javax.swing.plaf.ComboBoxUI {
                    protected comboBox: javax.swing.JComboBox
                    protected hasFocus: boolean
                    protected listBox: javax.swing.JList
                    protected currentValuePane: javax.swing.CellRendererPane
                    protected popup: javax.swing.plaf.basic.ComboPopup
                    protected editor: java.awt.Component
                    protected arrowButton: javax.swing.JButton
                    protected keyListener: java.awt.event.KeyListener
                    protected focusListener: java.awt.event.FocusListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected itemListener: java.awt.event.ItemListener
                    protected popupMouseListener: java.awt.event.MouseListener
                    protected popupMouseMotionListener: java.awt.event.MouseMotionListener
                    protected popupKeyListener: java.awt.event.KeyListener
                    protected listDataListener: javax.swing.event.ListDataListener
                    protected isMinimumSizeDirty: boolean
                    protected cachedMinimumSize: java.awt.Dimension
                    protected squareButton: boolean
                    protected padding: java.awt.Insets
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected createPopup(): javax.swing.plaf.basic.ComboPopup
                    protected createKeyListener(): java.awt.event.KeyListener
                    protected createFocusListener(): java.awt.event.FocusListener
                    protected createListDataListener(): javax.swing.event.ListDataListener
                    protected createItemListener(): java.awt.event.ItemListener
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createLayoutManager(): java.awt.LayoutManager
                    protected createRenderer(): javax.swing.ListCellRenderer
                    protected createEditor(): javax.swing.ComboBoxEditor
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    public addEditor(): void
                    public removeEditor(): void
                    protected configureEditor(): void
                    protected unconfigureEditor(): void
                    public configureArrowButton(): void
                    public unconfigureArrowButton(): void
                    protected createArrowButton(): javax.swing.JButton
                    public isPopupVisible(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): boolean
                    public setPopupVisible(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda, arg1: boolean): void
                    public isFocusTraversable(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): boolean
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    protected isNavigationKey(arg0: int): boolean
                    protected selectNextPossibleValue(): void
                    protected selectPreviousPossibleValue(): void
                    protected toggleOpenClose(): void
                    protected rectangleForCurrentValue(): java.awt.Rectangle
                    protected getInsets(): java.awt.Insets
                    public paintCurrentValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: boolean): void
                    public paintCurrentValueBackground(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: boolean): void
                    protected getDefaultSize(): java.awt.Dimension
                    protected getDisplaySize(): java.awt.Dimension
                    protected getSizeForComponent(arg0: java.awt.Component): java.awt.Dimension
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    public static class: java.lang.Class<any>
                }
                class BasicComboPopup extends javax.swing.JPopupMenu implements javax.swing.plaf.basic.ComboPopup {
                    protected comboBox: javax.swing.JComboBox
                    protected list: javax.swing.JList
                    protected scroller: javax.swing.JScrollPane
                    protected valueIsAdjusting: boolean
                    protected mouseMotionListener: java.awt.event.MouseMotionListener
                    protected mouseListener: java.awt.event.MouseListener
                    protected keyListener: java.awt.event.KeyListener
                    protected listSelectionListener: javax.swing.event.ListSelectionListener
                    protected listMouseListener: java.awt.event.MouseListener
                    protected listMouseMotionListener: java.awt.event.MouseMotionListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected listDataListener: javax.swing.event.ListDataListener
                    protected itemListener: java.awt.event.ItemListener
                    protected autoscrollTimer: javax.swing.Timer
                    protected hasEntered: boolean
                    protected isAutoScrolling: boolean
                    protected scrollDirection: int
                    protected static SCROLL_UP: int
                    protected static SCROLL_DOWN: int
                    public show(): void
                    public hide(): void
                    public getList(): javax.swing.JList
                    public getMouseListener(): java.awt.event.MouseListener
                    public getMouseMotionListener(): java.awt.event.MouseMotionListener
                    public getKeyListener(): java.awt.event.KeyListener
                    public uninstallingUI(): void
                    protected uninstallComboBoxModelListeners(arg0: javax.swing.ComboBoxModel): void
                    protected uninstallKeyboardActions(): void
                    public constructor(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda)
                    protected firePopupMenuWillBecomeVisible(): void
                    protected firePopupMenuWillBecomeInvisible(): void
                    protected firePopupMenuCanceled(): void
                    protected createMouseListener(): java.awt.event.MouseListener
                    protected createMouseMotionListener(): java.awt.event.MouseMotionListener
                    protected createKeyListener(): java.awt.event.KeyListener
                    protected createListSelectionListener(): javax.swing.event.ListSelectionListener
                    protected createListDataListener(): javax.swing.event.ListDataListener
                    protected createListMouseListener(): java.awt.event.MouseListener
                    protected createListMouseMotionListener(): java.awt.event.MouseMotionListener
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createItemListener(): java.awt.event.ItemListener
                    protected createList(): javax.swing.JList
                    protected configureList(): void
                    protected installListListeners(): void
                    protected createScroller(): javax.swing.JScrollPane
                    protected configureScroller(): void
                    protected configurePopup(): void
                    protected installComboBoxListeners(): void
                    protected installComboBoxModelListeners(arg0: javax.swing.ComboBoxModel): void
                    protected installKeyboardActions(): void
                    public isFocusTraversable(): boolean
                    protected startAutoScrolling(arg0: int): void
                    protected stopAutoScrolling(): void
                    protected autoScrollUp(): void
                    protected autoScrollDown(): void
                    public getAccessibleContext(): javax.accessibility.AccessibleContext
                    protected delegateFocus(arg0: java.awt.event.MouseEvent): void
                    protected togglePopup(): void
                    protected convertMouseEvent(arg0: java.awt.event.MouseEvent): java.awt.event.MouseEvent
                    protected getPopupHeightForRowCount(arg0: int): int
                    protected computePopupBounds(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.Rectangle
                    protected updateListBoxSelectionForEvent(arg0: java.awt.event.MouseEvent, arg1: boolean): void
                    public static class: java.lang.Class<any>
                }
                class BasicDesktopIconUI extends javax.swing.plaf.DesktopIconUI {
                    protected desktopIcon: javax.swing.JInternalFrame$JDesktopIcon
                    protected frame: javax.swing.JInternalFrame
                    protected iconPane: javax.swing.JComponent
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected createMouseInputListener(): javax.swing.event.MouseInputListener
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getInsets(arg0: javax.swing.JComponent): java.awt.Insets
                    public deiconize(): void
                    public static class: java.lang.Class<any>
                }
                class BasicDesktopPaneUI extends javax.swing.plaf.DesktopPaneUI {
                    protected desktop: javax.swing.JDesktopPane
                    protected desktopManager: javax.swing.DesktopManager
                    protected minimizeKey: javax.swing.KeyStroke
                    protected maximizeKey: javax.swing.KeyStroke
                    protected closeKey: javax.swing.KeyStroke
                    protected navigateKey: javax.swing.KeyStroke
                    protected navigateKey2: javax.swing.KeyStroke
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDesktopManager(): void
                    protected uninstallDesktopManager(): void
                    protected installKeyboardActions(): void
                    protected registerKeyboardActions(): void
                    protected unregisterKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    public static class: java.lang.Class<any>
                }
                class BasicDirectoryModel extends javax.swing.AbstractListModel<java.lang.Object> implements java.beans.PropertyChangeListener {
                    public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public invalidateFileCache(): void
                    public getDirectories(): java.util.Vector<java.io.File>
                    public getFiles(): java.util.Vector<java.io.File>
                    public validateFileCache(): void
                    public renameFile(arg0: java.io.File, arg1: java.io.File): boolean
                    public fireContentsChanged(): void
                    public getSize(): int
                    public contains(arg0: java.lang.Object): boolean
                    public indexOf(arg0: java.lang.Object): int
                    public getElementAt(arg0: int): java.lang.Object
                    public intervalAdded(arg0: javax.swing.event.ListDataEvent): void
                    public intervalRemoved(arg0: javax.swing.event.ListDataEvent): void
                    protected sort(arg0: java.util.Vector<java.io.File>): void
                    protected lt(arg0: java.io.File, arg1: java.io.File): boolean
                    public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                    public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
                    protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
                    public static class: java.lang.Class<any>
                }
                class BasicEditorPaneUI extends javax.swing.plaf.basic.BasicTextUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected getPropertyPrefix(): string
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public getEditorKit(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.EditorKit
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class BasicFileChooserUI extends javax.swing.plaf.FileChooserUI {
                    protected directoryIcon: javax.swing.Icon
                    protected fileIcon: javax.swing.Icon
                    protected computerIcon: javax.swing.Icon
                    protected hardDriveIcon: javax.swing.Icon
                    protected floppyDriveIcon: javax.swing.Icon
                    protected newFolderIcon: javax.swing.Icon
                    protected upFolderIcon: javax.swing.Icon
                    protected homeFolderIcon: javax.swing.Icon
                    protected listViewIcon: javax.swing.Icon
                    protected detailsViewIcon: javax.swing.Icon
                    protected viewMenuIcon: javax.swing.Icon
                    protected saveButtonMnemonic: int
                    protected openButtonMnemonic: int
                    protected cancelButtonMnemonic: int
                    protected updateButtonMnemonic: int
                    protected helpButtonMnemonic: int
                    protected directoryOpenButtonMnemonic: int
                    protected saveButtonText: string
                    protected openButtonText: string
                    protected cancelButtonText: string
                    protected updateButtonText: string
                    protected helpButtonText: string
                    protected directoryOpenButtonText: string
                    protected saveButtonToolTipText: string
                    protected openButtonToolTipText: string
                    protected cancelButtonToolTipText: string
                    protected updateButtonToolTipText: string
                    protected helpButtonToolTipText: string
                    protected directoryOpenButtonToolTipText: string
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public installComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public uninstallComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installDefaults(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installIcons(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected uninstallIcons(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected uninstallStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected createModel(): void
                    public getModel(): javax.swing.plaf.basic.BasicDirectoryModel
                    public createPropertyChangeListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): java.beans.PropertyChangeListener
                    public getFileName(): string
                    public getDirectoryName(): string
                    public setFileName(arg0: java.lang.String | string): void
                    public setDirectoryName(arg0: java.lang.String | string): void
                    public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
                    public getFileChooser(): javax.swing.JFileChooser
                    public getAccessoryPanel(): javax.swing.JPanel
                    protected getApproveButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                    public getDefaultButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                    public getApproveButtonToolTipText(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                    public clearIconCache(): void
                    protected createDoubleClickListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: javax.swing.JList | javax.swing.JList$$Lambda): java.awt.event.MouseListener
                    public createListSelectionListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.event.ListSelectionListener
                    protected isDirectorySelected(): boolean
                    protected setDirectorySelected(arg0: boolean): void
                    protected getDirectory(): java.io.File
                    protected setDirectory(arg0: java.io.File): void
                    public getAcceptAllFileFilter(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileFilter
                    public getFileView(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileView
                    public getDialogTitle(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                    public getApproveButtonMnemonic(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): int
                    public getApproveButtonText(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                    public getNewFolderAction(): javax.swing.Action
                    public getGoHomeAction(): javax.swing.Action
                    public getChangeToParentDirectoryAction(): javax.swing.Action
                    public getApproveSelectionAction(): javax.swing.Action
                    public getCancelSelectionAction(): javax.swing.Action
                    public getUpdateAction(): javax.swing.Action
                    public static class: java.lang.Class<any>
                }
                class BasicFormattedTextFieldUI extends javax.swing.plaf.basic.BasicTextFieldUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public static class: java.lang.Class<any>
                }
                class BasicGraphicsUtils {
                    public constructor()
                    public static drawEtchedRect(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.Color, arg7: java.awt.Color, arg8: java.awt.Color): void
                    public static getEtchedInsets(): java.awt.Insets
                    public static drawGroove(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.Color): void
                    public static getGrooveInsets(): java.awt.Insets
                    public static drawBezel(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: boolean, arg6: boolean, arg7: java.awt.Color, arg8: java.awt.Color, arg9: java.awt.Color, arg10: java.awt.Color): void
                    public static drawLoweredBezel(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.Color, arg7: java.awt.Color, arg8: java.awt.Color): void
                    public static drawString(arg0: java.awt.Graphics, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: int): void
                    public static drawStringUnderlineCharAt(arg0: java.awt.Graphics, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: int): void
                    public static drawDashedRect(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): void
                    public static getPreferredButtonSize(arg0: javax.swing.AbstractButton, arg1: int): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicHTML {
                    public static propertyKey: string
                    public static documentBaseKey: string
                    public constructor()
                    public static createHTMLView(arg0: javax.swing.JComponent, arg1: java.lang.String | string): javax.swing.text.View
                    public static getHTMLBaseline(arg0: javax.swing.text.View, arg1: int, arg2: int): int
                    public static isHTMLString(arg0: java.lang.String | string): boolean
                    public static updateRenderer(arg0: javax.swing.JComponent, arg1: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class BasicIconFactory implements java.io.Serializable {
                    public constructor()
                    public static getMenuItemCheckIcon(): javax.swing.Icon
                    public static getMenuItemArrowIcon(): javax.swing.Icon
                    public static getMenuArrowIcon(): javax.swing.Icon
                    public static getCheckBoxIcon(): javax.swing.Icon
                    public static getRadioButtonIcon(): javax.swing.Icon
                    public static getCheckBoxMenuItemIcon(): javax.swing.Icon
                    public static getRadioButtonMenuItemIcon(): javax.swing.Icon
                    public static createEmptyFrameIcon(): javax.swing.Icon
                    public static class: java.lang.Class<any>
                }
                class BasicInternalFrameTitlePane extends javax.swing.JComponent {
                    protected menuBar: javax.swing.JMenuBar
                    protected iconButton: javax.swing.JButton
                    protected maxButton: javax.swing.JButton
                    protected closeButton: javax.swing.JButton
                    protected windowMenu: javax.swing.JMenu
                    protected frame: javax.swing.JInternalFrame
                    protected selectedTitleColor: java.awt.Color
                    protected selectedTextColor: java.awt.Color
                    protected notSelectedTitleColor: java.awt.Color
                    protected notSelectedTextColor: java.awt.Color
                    protected maxIcon: javax.swing.Icon
                    protected minIcon: javax.swing.Icon
                    protected iconIcon: javax.swing.Icon
                    protected closeIcon: javax.swing.Icon
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected closeAction: javax.swing.Action
                    protected maximizeAction: javax.swing.Action
                    protected iconifyAction: javax.swing.Action
                    protected restoreAction: javax.swing.Action
                    protected moveAction: javax.swing.Action
                    protected sizeAction: javax.swing.Action
                    protected static CLOSE_CMD: string
                    protected static ICONIFY_CMD: string
                    protected static RESTORE_CMD: string
                    protected static MAXIMIZE_CMD: string
                    protected static MOVE_CMD: string
                    protected static SIZE_CMD: string
                    public constructor(arg0: javax.swing.JInternalFrame)
                    protected installTitlePane(): void
                    protected addSubComponents(): void
                    protected createActions(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected createButtons(): void
                    protected setButtonIcons(): void
                    protected assembleSystemMenu(): void
                    protected addSystemMenuItems(arg0: javax.swing.JMenu): void
                    protected createSystemMenu(): javax.swing.JMenu
                    protected createSystemMenuBar(): javax.swing.JMenuBar
                    protected showSystemMenu(): void
                    public paintComponent(arg0: java.awt.Graphics): void
                    protected paintTitleBackground(arg0: java.awt.Graphics): void
                    protected getTitle(arg0: java.lang.String | string, arg1: java.awt.FontMetrics, arg2: int): string
                    protected postClosingEvent(arg0: javax.swing.JInternalFrame): void
                    protected enableActions(): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createLayout(): java.awt.LayoutManager
                    public static class: java.lang.Class<any>
                }
                class BasicInternalFrameUI extends javax.swing.plaf.InternalFrameUI {
                    protected frame: javax.swing.JInternalFrame
                    protected borderListener: javax.swing.event.MouseInputAdapter
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected internalFrameLayout: java.awt.LayoutManager
                    protected componentListener: java.awt.event.ComponentListener
                    protected glassPaneDispatcher: javax.swing.event.MouseInputListener
                    protected northPane: javax.swing.JComponent
                    protected southPane: javax.swing.JComponent
                    protected westPane: javax.swing.JComponent
                    protected eastPane: javax.swing.JComponent
                    protected titlePane: javax.swing.plaf.basic.BasicInternalFrameTitlePane
                    protected openMenuKey: javax.swing.KeyStroke
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor(arg0: javax.swing.JInternalFrame)
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installKeyboardActions(): void
                    protected installComponents(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallComponents(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    protected createLayoutManager(): java.awt.LayoutManager
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected replacePane(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent): void
                    protected deinstallMouseHandlers(arg0: javax.swing.JComponent): void
                    protected installMouseHandlers(arg0: javax.swing.JComponent): void
                    protected createNorthPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                    protected createSouthPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                    protected createWestPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                    protected createEastPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                    protected createBorderListener(arg0: javax.swing.JInternalFrame): javax.swing.event.MouseInputAdapter
                    protected createInternalFrameListener(): void
                    protected isKeyBindingRegistered(): boolean
                    protected setKeyBindingRegistered(arg0: boolean): void
                    public isKeyBindingActive(): boolean
                    protected setKeyBindingActive(arg0: boolean): void
                    protected setupMenuOpenKey(): void
                    protected setupMenuCloseKey(): void
                    public getNorthPane(): javax.swing.JComponent
                    public setNorthPane(arg0: javax.swing.JComponent): void
                    public getSouthPane(): javax.swing.JComponent
                    public setSouthPane(arg0: javax.swing.JComponent): void
                    public getWestPane(): javax.swing.JComponent
                    public setWestPane(arg0: javax.swing.JComponent): void
                    public getEastPane(): javax.swing.JComponent
                    public setEastPane(arg0: javax.swing.JComponent): void
                    protected getDesktopManager(): javax.swing.DesktopManager
                    protected createDesktopManager(): javax.swing.DesktopManager
                    protected closeFrame(arg0: javax.swing.JInternalFrame): void
                    protected maximizeFrame(arg0: javax.swing.JInternalFrame): void
                    protected minimizeFrame(arg0: javax.swing.JInternalFrame): void
                    protected iconifyFrame(arg0: javax.swing.JInternalFrame): void
                    protected deiconifyFrame(arg0: javax.swing.JInternalFrame): void
                    protected activateFrame(arg0: javax.swing.JInternalFrame): void
                    protected deactivateFrame(arg0: javax.swing.JInternalFrame): void
                    protected createComponentListener(): java.awt.event.ComponentListener
                    protected createGlassPaneDispatcher(): javax.swing.event.MouseInputListener
                    public static class: java.lang.Class<any>
                }
                class BasicLabelUI extends javax.swing.plaf.LabelUI implements java.beans.PropertyChangeListener {
                    protected static labelUI: javax.swing.plaf.basic.BasicLabelUI
                    public constructor()
                    protected layoutCL(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda, arg1: java.awt.FontMetrics, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: java.awt.Rectangle, arg5: java.awt.Rectangle, arg6: java.awt.Rectangle): string
                    protected paintEnabledText(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int): void
                    protected paintDisabledText(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected installListeners(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected installComponents(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected installKeyboardActions(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected uninstallComponents(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected uninstallKeyboardActions(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class BasicListUI extends javax.swing.plaf.ListUI {
                    protected list: javax.swing.JList
                    protected rendererPane: javax.swing.CellRendererPane
                    protected focusListener: java.awt.event.FocusListener
                    protected mouseInputListener: javax.swing.event.MouseInputListener
                    protected listSelectionListener: javax.swing.event.ListSelectionListener
                    protected listDataListener: javax.swing.event.ListDataListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected cellHeights: int[]
                    protected cellHeight: int
                    protected cellWidth: int
                    protected updateLayoutStateNeeded: int
                    protected static modelChanged: int
                    protected static selectionModelChanged: int
                    protected static fontChanged: int
                    protected static fixedCellWidthChanged: int
                    protected static fixedCellHeightChanged: int
                    protected static prototypeCellValueChanged: int
                    protected static cellRendererChanged: int
                    public constructor()
                    protected paintCell(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Rectangle, arg3: javax.swing.ListCellRenderer | javax.swing.ListCellRenderer$$Lambda, arg4: javax.swing.ListModel, arg5: javax.swing.ListSelectionModel, arg6: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected selectPreviousIndex(): void
                    protected selectNextIndex(): void
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public locationToIndex(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: java.awt.Point): int
                    public indexToLocation(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: int): java.awt.Point
                    public getCellBounds(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: int, arg2: int): java.awt.Rectangle
                    protected getRowHeight(arg0: int): int
                    protected convertYToRow(arg0: int): int
                    protected convertRowToY(arg0: int): int
                    protected maybeUpdateLayoutState(): void
                    protected updateLayoutState(): void
                    protected createMouseInputListener(): javax.swing.event.MouseInputListener
                    protected createFocusListener(): java.awt.event.FocusListener
                    protected createListSelectionListener(): javax.swing.event.ListSelectionListener
                    protected createListDataListener(): javax.swing.event.ListDataListener
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    public static class: java.lang.Class<any>
                }
                abstract class BasicLookAndFeel extends javax.swing.LookAndFeel implements java.io.Serializable {
                    public constructor()
                    public getDefaults(): javax.swing.UIDefaults
                    public initialize(): void
                    public uninitialize(): void
                    protected initClassDefaults(arg0: javax.swing.UIDefaults): void
                    protected initSystemColorDefaults(arg0: javax.swing.UIDefaults): void
                    protected loadSystemColors(arg0: javax.swing.UIDefaults, arg1: java.lang.String[], arg2: boolean): void
                    protected initComponentDefaults(arg0: javax.swing.UIDefaults): void
                    protected getAudioActionMap(): javax.swing.ActionMap
                    protected createAudioAction(arg0: java.lang.Object): javax.swing.Action
                    protected playSound(arg0: javax.swing.Action): void
                    public static class: java.lang.Class<any>
                }
                class BasicMenuBarUI extends javax.swing.plaf.MenuBarUI {
                    protected menuBar: javax.swing.JMenuBar
                    protected containerListener: java.awt.event.ContainerListener
                    protected changeListener: javax.swing.event.ChangeListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    protected createContainerListener(): java.awt.event.ContainerListener
                    protected createChangeListener(): javax.swing.event.ChangeListener
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicMenuItemUI extends javax.swing.plaf.MenuItemUI {
                    protected menuItem: javax.swing.JMenuItem
                    protected selectionBackground: java.awt.Color
                    protected selectionForeground: java.awt.Color
                    protected disabledForeground: java.awt.Color
                    protected acceleratorForeground: java.awt.Color
                    protected acceleratorSelectionForeground: java.awt.Color
                    protected acceleratorDelimiter: string
                    protected defaultTextIconGap: int
                    protected acceleratorFont: java.awt.Font
                    protected mouseInputListener: javax.swing.event.MouseInputListener
                    protected menuDragMouseListener: javax.swing.event.MenuDragMouseListener
                    protected menuKeyListener: javax.swing.event.MenuKeyListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected arrowIcon: javax.swing.Icon
                    protected checkIcon: javax.swing.Icon
                    protected oldBorderPainted: boolean
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installComponents(arg0: javax.swing.JMenuItem): void
                    protected getPropertyPrefix(): string
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallComponents(arg0: javax.swing.JMenuItem): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    protected createMouseInputListener(arg0: javax.swing.JComponent): javax.swing.event.MouseInputListener
                    protected createMenuDragMouseListener(arg0: javax.swing.JComponent): javax.swing.event.MenuDragMouseListener
                    protected createMenuKeyListener(arg0: javax.swing.JComponent): javax.swing.event.MenuKeyListener
                    protected createPropertyChangeListener(arg0: javax.swing.JComponent): java.beans.PropertyChangeListener
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected getPreferredMenuItemSize(arg0: javax.swing.JComponent, arg1: javax.swing.Icon, arg2: javax.swing.Icon, arg3: int): java.awt.Dimension
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintMenuItem(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: javax.swing.Icon, arg3: javax.swing.Icon, arg4: java.awt.Color, arg5: java.awt.Color, arg6: int): void
                    protected paintBackground(arg0: java.awt.Graphics, arg1: javax.swing.JMenuItem, arg2: java.awt.Color): void
                    protected paintText(arg0: java.awt.Graphics, arg1: javax.swing.JMenuItem, arg2: java.awt.Rectangle, arg3: java.lang.String | string): void
                    public getPath(): javax.swing.MenuElement[]
                    protected doClick(arg0: javax.swing.MenuSelectionManager): void
                    public static class: java.lang.Class<any>
                }
                class BasicMenuUI extends javax.swing.plaf.basic.BasicMenuItemUI {
                    protected changeListener: javax.swing.event.ChangeListener
                    protected menuListener: javax.swing.event.MenuListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected getPropertyPrefix(): string
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected createMouseInputListener(arg0: javax.swing.JComponent): javax.swing.event.MouseInputListener
                    protected createMenuListener(arg0: javax.swing.JComponent): javax.swing.event.MenuListener
                    protected createChangeListener(arg0: javax.swing.JComponent): javax.swing.event.ChangeListener
                    protected createPropertyChangeListener(arg0: javax.swing.JComponent): java.beans.PropertyChangeListener
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected createMenuDragMouseListener(arg0: javax.swing.JComponent): javax.swing.event.MenuDragMouseListener
                    protected createMenuKeyListener(arg0: javax.swing.JComponent): javax.swing.event.MenuKeyListener
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected setupPostTimer(arg0: javax.swing.JMenu): void
                    public static class: java.lang.Class<any>
                }
                class BasicOptionPaneUI extends javax.swing.plaf.OptionPaneUI {
                    public static MinimumWidth: int
                    public static MinimumHeight: int
                    protected optionPane: javax.swing.JOptionPane
                    protected minimumSize: java.awt.Dimension
                    protected inputComponent: javax.swing.JComponent
                    protected initialFocusComponent: java.awt.Component
                    protected hasCustomComponents: boolean
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    protected createLayoutManager(): java.awt.LayoutManager
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    public getMinimumOptionPaneSize(): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected createMessageArea(): java.awt.Container
                    protected addMessageComponents(arg0: java.awt.Container, arg1: java.awt.GridBagConstraints, arg2: java.lang.Object, arg3: int, arg4: boolean): void
                    protected getMessage(): java.lang.Object
                    protected addIcon(arg0: java.awt.Container): void
                    protected getIcon(): javax.swing.Icon
                    protected getIconForType(arg0: int): javax.swing.Icon
                    protected getMaxCharactersPerLineCount(): int
                    protected burstStringInto(arg0: java.awt.Container, arg1: java.lang.String | string, arg2: int): void
                    protected createSeparator(): java.awt.Container
                    protected createButtonArea(): java.awt.Container
                    protected addButtonComponents(arg0: java.awt.Container, arg1: java.lang.Object[], arg2: int): void
                    protected createButtonActionListener(arg0: int): java.awt.event.ActionListener
                    protected getButtons(): java.lang.Object[]
                    protected getSizeButtonsToSameWidth(): boolean
                    protected getInitialValueIndex(): int
                    protected resetInputValue(): void
                    public selectInitialValue(arg0: javax.swing.JOptionPane | javax.swing.JOptionPane$$Lambda): void
                    public containsCustomComponents(arg0: javax.swing.JOptionPane | javax.swing.JOptionPane$$Lambda): boolean
                    public static class: java.lang.Class<any>
                }
                class BasicPanelUI extends javax.swing.plaf.PanelUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public static class: java.lang.Class<any>
                }
                class BasicPasswordFieldUI extends javax.swing.plaf.basic.BasicTextFieldUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    protected installDefaults(): void
                    public create(arg0: javax.swing.text.Element): javax.swing.text.View
                    public static class: java.lang.Class<any>
                }
                class BasicPopupMenuSeparatorUI extends javax.swing.plaf.basic.BasicSeparatorUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicPopupMenuUI extends javax.swing.plaf.PopupMenuUI {
                    protected popupMenu: javax.swing.JPopupMenu
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    public installUI(arg0: javax.swing.JComponent): void
                    public installDefaults(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    public isPopupTrigger(arg0: java.awt.event.MouseEvent): boolean
                    public static class: java.lang.Class<any>
                }
                class BasicProgressBarUI extends javax.swing.plaf.ProgressBarUI {
                    protected progressBar: javax.swing.JProgressBar
                    protected changeListener: javax.swing.event.ChangeListener
                    protected boxRect: java.awt.Rectangle
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installListeners(): void
                    protected startAnimationTimer(): void
                    protected stopAnimationTimer(): void
                    protected uninstallListeners(): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    protected getPreferredInnerHorizontal(): java.awt.Dimension
                    protected getPreferredInnerVertical(): java.awt.Dimension
                    protected getSelectionForeground(): java.awt.Color
                    protected getSelectionBackground(): java.awt.Color
                    protected getCellLength(): int
                    protected setCellLength(arg0: int): void
                    protected getCellSpacing(): int
                    protected setCellSpacing(arg0: int): void
                    protected getAmountFull(arg0: java.awt.Insets, arg1: int, arg2: int): int
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected getBox(arg0: java.awt.Rectangle): java.awt.Rectangle
                    protected getBoxLength(arg0: int, arg1: int): int
                    protected paintIndeterminate(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintDeterminate(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintString(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Insets): void
                    protected getStringPlacement(arg0: java.awt.Graphics, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: int, arg5: int): java.awt.Point
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected getAnimationIndex(): int
                    protected getFrameCount(): int
                    protected setAnimationIndex(arg0: int): void
                    protected incrementAnimationIndex(): void
                    public static class: java.lang.Class<any>
                }
                class BasicRadioButtonMenuItemUI extends javax.swing.plaf.basic.BasicMenuItemUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public processMouseEvent(arg0: javax.swing.JMenuItem, arg1: java.awt.event.MouseEvent, arg2: javax.swing.MenuElement[], arg3: javax.swing.MenuSelectionManager): void
                    public static class: java.lang.Class<any>
                }
                class BasicRadioButtonUI extends javax.swing.plaf.basic.BasicToggleButtonUI {
                    protected icon: javax.swing.Icon
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    protected installDefaults(arg0: javax.swing.AbstractButton): void
                    protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    public getDefaultIcon(): javax.swing.Icon
                    protected installListeners(arg0: javax.swing.AbstractButton): void
                    protected uninstallListeners(arg0: javax.swing.AbstractButton): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintFocus(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Dimension): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicRootPaneUI extends javax.swing.plaf.RootPaneUI implements java.beans.PropertyChangeListener {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected installComponents(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected installListeners(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected installKeyboardActions(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected uninstallComponents(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected uninstallKeyboardActions(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class BasicScrollBarUI extends javax.swing.plaf.ScrollBarUI implements java.awt.LayoutManager , javax.swing.SwingConstants {
                    protected minimumThumbSize: java.awt.Dimension
                    protected maximumThumbSize: java.awt.Dimension
                    protected thumbHighlightColor: java.awt.Color
                    protected thumbLightShadowColor: java.awt.Color
                    protected thumbDarkShadowColor: java.awt.Color
                    protected thumbColor: java.awt.Color
                    protected trackColor: java.awt.Color
                    protected trackHighlightColor: java.awt.Color
                    protected scrollbar: javax.swing.JScrollBar
                    protected incrButton: javax.swing.JButton
                    protected decrButton: javax.swing.JButton
                    protected isDragging: boolean
                    protected trackListener: javax.swing.plaf.basic.BasicScrollBarUI$TrackListener
                    protected buttonListener: javax.swing.plaf.basic.BasicScrollBarUI$ArrowButtonListener
                    protected modelListener: javax.swing.plaf.basic.BasicScrollBarUI$ModelListener
                    protected thumbRect: java.awt.Rectangle
                    protected trackRect: java.awt.Rectangle
                    protected trackHighlight: int
                    protected static NO_HIGHLIGHT: int
                    protected static DECREASE_HIGHLIGHT: int
                    protected static INCREASE_HIGHLIGHT: int
                    protected scrollListener: javax.swing.plaf.basic.BasicScrollBarUI$ScrollListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected scrollTimer: javax.swing.Timer
                    protected scrollBarWidth: int
                    protected incrGap: int
                    protected decrGap: int
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected configureScrollBarColors(): void
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected uninstallListeners(): void
                    protected uninstallDefaults(): void
                    protected createTrackListener(): javax.swing.plaf.basic.BasicScrollBarUI$TrackListener
                    protected createArrowButtonListener(): javax.swing.plaf.basic.BasicScrollBarUI$ArrowButtonListener
                    protected createModelListener(): javax.swing.plaf.basic.BasicScrollBarUI$ModelListener
                    protected createScrollListener(): javax.swing.plaf.basic.BasicScrollBarUI$ScrollListener
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected setThumbRollover(arg0: boolean): void
                    public isThumbRollover(): boolean
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected createDecreaseButton(arg0: int): javax.swing.JButton
                    protected createIncreaseButton(arg0: int): javax.swing.JButton
                    protected paintDecreaseHighlight(arg0: java.awt.Graphics): void
                    protected paintIncreaseHighlight(arg0: java.awt.Graphics): void
                    protected paintTrack(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                    protected paintThumb(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                    protected getMinimumThumbSize(): java.awt.Dimension
                    protected getMaximumThumbSize(): java.awt.Dimension
                    public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
                    public removeLayoutComponent(arg0: java.awt.Component): void
                    public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                    public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                    protected layoutVScrollbar(arg0: javax.swing.JScrollBar | javax.swing.JScrollBar$$Lambda): void
                    protected layoutHScrollbar(arg0: javax.swing.JScrollBar | javax.swing.JScrollBar$$Lambda): void
                    public layoutContainer(arg0: java.awt.Container): void
                    protected setThumbBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
                    protected getThumbBounds(): java.awt.Rectangle
                    protected getTrackBounds(): java.awt.Rectangle
                    protected scrollByBlock(arg0: int): void
                    protected scrollByUnit(arg0: int): void
                    public getSupportsAbsolutePositioning(): boolean
                    public static class: java.lang.Class<any>
                }
                class BasicScrollPaneUI extends javax.swing.plaf.ScrollPaneUI implements javax.swing.ScrollPaneConstants {
                    protected scrollpane: javax.swing.JScrollPane
                    protected vsbChangeListener: javax.swing.event.ChangeListener
                    protected hsbChangeListener: javax.swing.event.ChangeListener
                    protected viewportChangeListener: javax.swing.event.ChangeListener
                    protected spPropertyChangeListener: java.beans.PropertyChangeListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected installDefaults(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected installListeners(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected installKeyboardActions(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    public installUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JComponent): void
                    protected uninstallKeyboardActions(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected syncScrollPaneWithViewport(): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    protected createViewportChangeListener(): javax.swing.event.ChangeListener
                    protected createHSBChangeListener(): javax.swing.event.ChangeListener
                    protected createVSBChangeListener(): javax.swing.event.ChangeListener
                    protected createMouseWheelListener(): java.awt.event.MouseWheelListener
                    protected updateScrollBarDisplayPolicy(arg0: java.beans.PropertyChangeEvent): void
                    protected updateViewport(arg0: java.beans.PropertyChangeEvent): void
                    protected updateRowHeader(arg0: java.beans.PropertyChangeEvent): void
                    protected updateColumnHeader(arg0: java.beans.PropertyChangeEvent): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    public static class: java.lang.Class<any>
                }
                class BasicSeparatorUI extends javax.swing.plaf.SeparatorUI {
                    protected shadow: java.awt.Color
                    protected highlight: java.awt.Color
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    protected installListeners(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicSliderUI extends javax.swing.plaf.SliderUI {
                    public static POSITIVE_SCROLL: int
                    public static NEGATIVE_SCROLL: int
                    public static MIN_SCROLL: int
                    public static MAX_SCROLL: int
                    protected scrollTimer: javax.swing.Timer
                    protected slider: javax.swing.JSlider
                    protected focusInsets: java.awt.Insets
                    protected insetCache: java.awt.Insets
                    protected leftToRightCache: boolean
                    protected focusRect: java.awt.Rectangle
                    protected contentRect: java.awt.Rectangle
                    protected labelRect: java.awt.Rectangle
                    protected tickRect: java.awt.Rectangle
                    protected trackRect: java.awt.Rectangle
                    protected thumbRect: java.awt.Rectangle
                    protected trackBuffer: int
                    protected trackListener: javax.swing.plaf.basic.BasicSliderUI$TrackListener
                    protected changeListener: javax.swing.event.ChangeListener
                    protected componentListener: java.awt.event.ComponentListener
                    protected focusListener: java.awt.event.FocusListener
                    protected scrollListener: javax.swing.plaf.basic.BasicSliderUI$ScrollListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected getShadowColor(): java.awt.Color
                    protected getHighlightColor(): java.awt.Color
                    protected getFocusColor(): java.awt.Color
                    protected isDragging(): boolean
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda)
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected createTrackListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): javax.swing.plaf.basic.BasicSliderUI$TrackListener
                    protected createChangeListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): javax.swing.event.ChangeListener
                    protected createComponentListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): java.awt.event.ComponentListener
                    protected createFocusListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): java.awt.event.FocusListener
                    protected createScrollListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): javax.swing.plaf.basic.BasicSliderUI$ScrollListener
                    protected createPropertyChangeListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): java.beans.PropertyChangeListener
                    protected installListeners(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected installKeyboardActions(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected uninstallKeyboardActions(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    protected labelsHaveSameBaselines(): boolean
                    public getPreferredHorizontalSize(): java.awt.Dimension
                    public getPreferredVerticalSize(): java.awt.Dimension
                    public getMinimumHorizontalSize(): java.awt.Dimension
                    public getMinimumVerticalSize(): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected calculateGeometry(): void
                    protected calculateFocusRect(): void
                    protected calculateThumbSize(): void
                    protected calculateContentRect(): void
                    protected calculateThumbLocation(): void
                    protected calculateTrackBuffer(): void
                    protected calculateTrackRect(): void
                    protected getTickLength(): int
                    protected calculateTickRect(): void
                    protected calculateLabelRect(): void
                    protected getThumbSize(): java.awt.Dimension
                    protected getWidthOfWidestLabel(): int
                    protected getHeightOfTallestLabel(): int
                    protected getWidthOfHighValueLabel(): int
                    protected getWidthOfLowValueLabel(): int
                    protected getHeightOfHighValueLabel(): int
                    protected getHeightOfLowValueLabel(): int
                    protected drawInverted(): boolean
                    protected getHighestValue(): java.lang.Integer
                    protected getLowestValue(): java.lang.Integer
                    protected getLowestValueLabel(): java.awt.Component
                    protected getHighestValueLabel(): java.awt.Component
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected recalculateIfInsetsChanged(): void
                    protected recalculateIfOrientationChanged(): void
                    public paintFocus(arg0: java.awt.Graphics): void
                    public paintTrack(arg0: java.awt.Graphics): void
                    public paintTicks(arg0: java.awt.Graphics): void
                    protected paintMinorTickForHorizSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected paintMajorTickForHorizSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected paintMinorTickForVertSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected paintMajorTickForVertSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    public paintLabels(arg0: java.awt.Graphics): void
                    protected paintHorizontalLabel(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Component): void
                    protected paintVerticalLabel(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Component): void
                    public paintThumb(arg0: java.awt.Graphics): void
                    public setThumbLocation(arg0: int, arg1: int): void
                    public scrollByBlock(arg0: int): void
                    public scrollByUnit(arg0: int): void
                    protected scrollDueToClickInTrack(arg0: int): void
                    protected xPositionForValue(arg0: int): int
                    protected yPositionForValue(arg0: int): int
                    protected yPositionForValue(arg0: int, arg1: int, arg2: int): int
                    public valueForYPosition(arg0: int): int
                    public valueForXPosition(arg0: int): int
                    public static class: java.lang.Class<any>
                }
                class BasicSpinnerUI extends javax.swing.plaf.SpinnerUI {
                    protected spinner: javax.swing.JSpinner
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installNextButtonListeners(arg0: java.awt.Component): void
                    protected installPreviousButtonListeners(arg0: java.awt.Component): void
                    protected createLayout(): java.awt.LayoutManager
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createPreviousButton(): java.awt.Component
                    protected createNextButton(): java.awt.Component
                    protected createEditor(): javax.swing.JComponent
                    protected replaceEditor(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent): void
                    protected installKeyboardActions(): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public static class: java.lang.Class<any>
                }
                class BasicSplitPaneDivider extends java.awt.Container implements java.beans.PropertyChangeListener {
                    protected static ONE_TOUCH_SIZE: int
                    protected static ONE_TOUCH_OFFSET: int
                    protected dragger: javax.swing.plaf.basic.BasicSplitPaneDivider$DragController
                    protected splitPaneUI: javax.swing.plaf.basic.BasicSplitPaneUI
                    protected dividerSize: int
                    protected hiddenDivider: java.awt.Component
                    protected splitPane: javax.swing.JSplitPane
                    protected mouseHandler: javax.swing.plaf.basic.BasicSplitPaneDivider$MouseHandler
                    protected orientation: int
                    protected leftButton: javax.swing.JButton
                    protected rightButton: javax.swing.JButton
                    public constructor(arg0: javax.swing.plaf.basic.BasicSplitPaneUI)
                    public setBasicSplitPaneUI(arg0: javax.swing.plaf.basic.BasicSplitPaneUI): void
                    public getBasicSplitPaneUI(): javax.swing.plaf.basic.BasicSplitPaneUI
                    public setDividerSize(arg0: int): void
                    public getDividerSize(): int
                    public setBorder(arg0: javax.swing.border.Border): void
                    public getBorder(): javax.swing.border.Border
                    public getInsets(): java.awt.Insets
                    protected setMouseOver(arg0: boolean): void
                    public isMouseOver(): boolean
                    public getPreferredSize(): java.awt.Dimension
                    public getMinimumSize(): java.awt.Dimension
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public paint(arg0: java.awt.Graphics): void
                    protected oneTouchExpandableChanged(): void
                    protected createLeftOneTouchButton(): javax.swing.JButton
                    protected createRightOneTouchButton(): javax.swing.JButton
                    protected prepareForDragging(): void
                    protected dragDividerTo(arg0: int): void
                    protected finishDraggingTo(arg0: int): void
                    public static class: java.lang.Class<any>
                }
                class BasicSplitPaneUI extends javax.swing.plaf.SplitPaneUI {
                    protected static NON_CONTINUOUS_DIVIDER: string
                    protected static KEYBOARD_DIVIDER_MOVE_OFFSET: int
                    protected splitPane: javax.swing.JSplitPane
                    protected layoutManager: javax.swing.plaf.basic.BasicSplitPaneUI$BasicHorizontalLayoutManager
                    protected divider: javax.swing.plaf.basic.BasicSplitPaneDivider
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected focusListener: java.awt.event.FocusListener
                    protected dividerSize: int
                    protected nonContinuousLayoutDivider: java.awt.Component
                    protected draggingHW: boolean
                    protected beginDragDividerLocation: int
                    protected upKey: javax.swing.KeyStroke
                    protected downKey: javax.swing.KeyStroke
                    protected leftKey: javax.swing.KeyStroke
                    protected rightKey: javax.swing.KeyStroke
                    protected homeKey: javax.swing.KeyStroke
                    protected endKey: javax.swing.KeyStroke
                    protected dividerResizeToggleKey: javax.swing.KeyStroke
                    protected keyboardUpLeftListener: java.awt.event.ActionListener
                    protected keyboardDownRightListener: java.awt.event.ActionListener
                    protected keyboardHomeListener: java.awt.event.ActionListener
                    protected keyboardEndListener: java.awt.event.ActionListener
                    protected keyboardResizeToggleListener: java.awt.event.ActionListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createFocusListener(): java.awt.event.FocusListener
                    protected createKeyboardUpLeftListener(): java.awt.event.ActionListener
                    protected createKeyboardDownRightListener(): java.awt.event.ActionListener
                    protected createKeyboardHomeListener(): java.awt.event.ActionListener
                    protected createKeyboardEndListener(): java.awt.event.ActionListener
                    protected createKeyboardResizeToggleListener(): java.awt.event.ActionListener
                    public getOrientation(): int
                    public setOrientation(arg0: int): void
                    public isContinuousLayout(): boolean
                    public setContinuousLayout(arg0: boolean): void
                    public getLastDragLocation(): int
                    public setLastDragLocation(arg0: int): void
                    public getDivider(): javax.swing.plaf.basic.BasicSplitPaneDivider
                    protected createDefaultNonContinuousLayoutDivider(): java.awt.Component
                    protected setNonContinuousLayoutDivider(arg0: java.awt.Component): void
                    protected setNonContinuousLayoutDivider(arg0: java.awt.Component, arg1: boolean): void
                    public getNonContinuousLayoutDivider(): java.awt.Component
                    public getSplitPane(): javax.swing.JSplitPane
                    public createDefaultDivider(): javax.swing.plaf.basic.BasicSplitPaneDivider
                    public resetToPreferredSizes(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): void
                    public setDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: int): void
                    public getDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                    public getMinimumDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                    public getMaximumDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                    public finishedPaintingChildren(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: java.awt.Graphics): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getInsets(arg0: javax.swing.JComponent): java.awt.Insets
                    protected resetLayoutManager(): void
                    protected startDragging(): void
                    protected dragDividerTo(arg0: int): void
                    protected finishDraggingTo(arg0: int): void
                    protected getDividerBorderSize(): int
                    public static class: java.lang.Class<any>
                }
                class BasicTabbedPaneUI extends javax.swing.plaf.TabbedPaneUI implements javax.swing.SwingConstants {
                    protected tabPane: javax.swing.JTabbedPane
                    protected highlight: java.awt.Color
                    protected lightHighlight: java.awt.Color
                    protected shadow: java.awt.Color
                    protected darkShadow: java.awt.Color
                    protected focus: java.awt.Color
                    protected textIconGap: int
                    protected tabRunOverlay: int
                    protected tabInsets: java.awt.Insets
                    protected selectedTabPadInsets: java.awt.Insets
                    protected tabAreaInsets: java.awt.Insets
                    protected contentBorderInsets: java.awt.Insets
                    protected upKey: javax.swing.KeyStroke
                    protected downKey: javax.swing.KeyStroke
                    protected leftKey: javax.swing.KeyStroke
                    protected rightKey: javax.swing.KeyStroke
                    protected tabRuns: int[]
                    protected runCount: int
                    protected selectedRun: int
                    protected rects: java.awt.Rectangle[]
                    protected maxTabHeight: int
                    protected maxTabWidth: int
                    protected tabChangeListener: javax.swing.event.ChangeListener
                    protected propertyChangeListener: java.beans.PropertyChangeListener
                    protected mouseListener: java.awt.event.MouseListener
                    protected focusListener: java.awt.event.FocusListener
                    protected calcRect: java.awt.Rectangle
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected createLayoutManager(): java.awt.LayoutManager
                    protected installComponents(): void
                    protected createScrollButton(arg0: int): javax.swing.JButton
                    protected uninstallComponents(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected createMouseListener(): java.awt.event.MouseListener
                    protected createFocusListener(): java.awt.event.FocusListener
                    protected createChangeListener(): javax.swing.event.ChangeListener
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected setRolloverTab(arg0: int): void
                    protected getRolloverTab(): int
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    protected getBaseline(arg0: int): int
                    protected getBaselineOffset(): int
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintTabArea(arg0: java.awt.Graphics, arg1: int, arg2: int): void
                    protected paintTab(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Rectangle[], arg3: int, arg4: java.awt.Rectangle, arg5: java.awt.Rectangle): void
                    protected layoutLabel(arg0: int, arg1: java.awt.FontMetrics, arg2: int, arg3: java.lang.String | string, arg4: javax.swing.Icon, arg5: java.awt.Rectangle, arg6: java.awt.Rectangle, arg7: java.awt.Rectangle, arg8: boolean): void
                    protected paintIcon(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: javax.swing.Icon, arg4: java.awt.Rectangle, arg5: boolean): void
                    protected paintText(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Font, arg3: java.awt.FontMetrics, arg4: int, arg5: java.lang.String | string, arg6: java.awt.Rectangle, arg7: boolean): void
                    protected getTabLabelShiftX(arg0: int, arg1: int, arg2: boolean): int
                    protected getTabLabelShiftY(arg0: int, arg1: int, arg2: boolean): int
                    protected paintFocusIndicator(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Rectangle[], arg3: int, arg4: java.awt.Rectangle, arg5: java.awt.Rectangle, arg6: boolean): void
                    protected paintTabBorder(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
                    protected paintTabBackground(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
                    protected paintContentBorder(arg0: java.awt.Graphics, arg1: int, arg2: int): void
                    protected paintContentBorderTopEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected paintContentBorderLeftEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected paintContentBorderBottomEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected paintContentBorderRightEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public getTabBounds(arg0: javax.swing.JTabbedPane, arg1: int): java.awt.Rectangle
                    public getTabRunCount(arg0: javax.swing.JTabbedPane): int
                    public tabForCoordinate(arg0: javax.swing.JTabbedPane, arg1: int, arg2: int): int
                    protected getTabBounds(arg0: int, arg1: java.awt.Rectangle): java.awt.Rectangle
                    protected getVisibleComponent(): java.awt.Component
                    protected setVisibleComponent(arg0: java.awt.Component): void
                    protected assureRectsCreated(arg0: int): void
                    protected expandTabRunsArray(): void
                    protected getRunForTab(arg0: int, arg1: int): int
                    protected lastTabInRun(arg0: int, arg1: int): int
                    protected getTabRunOverlay(arg0: int): int
                    protected getTabRunIndent(arg0: int, arg1: int): int
                    protected shouldPadTabRun(arg0: int, arg1: int): boolean
                    protected shouldRotateTabRuns(arg0: int): boolean
                    protected getIconForTab(arg0: int): javax.swing.Icon
                    protected getTextViewForTab(arg0: int): javax.swing.text.View
                    protected calculateTabHeight(arg0: int, arg1: int, arg2: int): int
                    protected calculateMaxTabHeight(arg0: int): int
                    protected calculateTabWidth(arg0: int, arg1: int, arg2: java.awt.FontMetrics): int
                    protected calculateMaxTabWidth(arg0: int): int
                    protected calculateTabAreaHeight(arg0: int, arg1: int, arg2: int): int
                    protected calculateTabAreaWidth(arg0: int, arg1: int, arg2: int): int
                    protected getTabInsets(arg0: int, arg1: int): java.awt.Insets
                    protected getSelectedTabPadInsets(arg0: int): java.awt.Insets
                    protected getTabAreaInsets(arg0: int): java.awt.Insets
                    protected getContentBorderInsets(arg0: int): java.awt.Insets
                    protected getFontMetrics(): java.awt.FontMetrics
                    protected navigateSelectedTab(arg0: int): void
                    protected selectNextTabInRun(arg0: int): void
                    protected selectPreviousTabInRun(arg0: int): void
                    protected selectNextTab(arg0: int): void
                    protected selectPreviousTab(arg0: int): void
                    protected selectAdjacentRunTab(arg0: int, arg1: int, arg2: int): void
                    protected getFocusIndex(): int
                    protected getTabRunOffset(arg0: int, arg1: int, arg2: int, arg3: boolean): int
                    protected getPreviousTabIndex(arg0: int): int
                    protected getNextTabIndex(arg0: int): int
                    protected getNextTabIndexInRun(arg0: int, arg1: int): int
                    protected getPreviousTabIndexInRun(arg0: int, arg1: int): int
                    protected getPreviousTabRun(arg0: int): int
                    protected getNextTabRun(arg0: int): int
                    protected static rotateInsets(arg0: java.awt.Insets, arg1: java.awt.Insets, arg2: int): void
                    public static class: java.lang.Class<any>
                }
                class BasicTableHeaderUI extends javax.swing.plaf.TableHeaderUI {
                    protected header: javax.swing.table.JTableHeader
                    protected rendererPane: javax.swing.CellRendererPane
                    protected mouseInputListener: javax.swing.event.MouseInputListener
                    public constructor()
                    protected createMouseInputListener(): javax.swing.event.MouseInputListener
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    protected getRolloverColumn(): int
                    protected rolloverColumnUpdated(arg0: int, arg1: int): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicTableUI extends javax.swing.plaf.TableUI {
                    protected table: javax.swing.JTable
                    protected rendererPane: javax.swing.CellRendererPane
                    protected keyListener: java.awt.event.KeyListener
                    protected focusListener: java.awt.event.FocusListener
                    protected mouseInputListener: javax.swing.event.MouseInputListener
                    public constructor()
                    protected createKeyListener(): java.awt.event.KeyListener
                    protected createFocusListener(): java.awt.event.FocusListener
                    protected createMouseInputListener(): javax.swing.event.MouseInputListener
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static class: java.lang.Class<any>
                }
                class BasicTextAreaUI extends javax.swing.plaf.basic.BasicTextUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected getPropertyPrefix(): string
                    protected installDefaults(): void
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public create(arg0: javax.swing.text.Element): javax.swing.text.View
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public static class: java.lang.Class<any>
                }
                class BasicTextFieldUI extends javax.swing.plaf.basic.BasicTextUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected getPropertyPrefix(): string
                    public create(arg0: javax.swing.text.Element): javax.swing.text.View
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public static class: java.lang.Class<any>
                }
                class BasicTextPaneUI extends javax.swing.plaf.basic.BasicEditorPaneUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected getPropertyPrefix(): string
                    public installUI(arg0: javax.swing.JComponent): void
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                abstract class BasicTextUI extends javax.swing.plaf.TextUI implements javax.swing.text.ViewFactory {
                    public constructor()
                    protected createCaret(): javax.swing.text.Caret
                    protected createHighlighter(): javax.swing.text.Highlighter
                    protected getKeymapName(): string
                    protected createKeymap(): javax.swing.text.Keymap
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected getPropertyPrefix(): string
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected paintBackground(arg0: java.awt.Graphics): void
                    protected getComponent(): javax.swing.text.JTextComponent
                    protected modelChanged(): void
                    protected setView(arg0: javax.swing.text.View): void
                    protected paintSafely(arg0: java.awt.Graphics): void
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected getVisibleEditorRect(): java.awt.Rectangle
                    public modelToView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): java.awt.Rectangle
                    public modelToView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias): java.awt.Rectangle
                    public viewToModel(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point): int
                    public viewToModel(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point, arg2: javax.swing.text.Position$Bias[]): int
                    public getNextVisualPositionFrom(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                    public damageRange(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int): void
                    public damageRange(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int, arg3: javax.swing.text.Position$Bias, arg4: javax.swing.text.Position$Bias): void
                    public getEditorKit(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.EditorKit
                    public getRootView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.View
                    public getToolTipText(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point): string
                    public create(arg0: javax.swing.text.Element): javax.swing.text.View
                    public create(arg0: javax.swing.text.Element, arg1: int, arg2: int): javax.swing.text.View
                    public static class: java.lang.Class<any>
                }
                abstract class BasicTextUI$$Lambda extends javax.swing.plaf.TextUI implements javax.swing.text.ViewFactory {
                    public constructor()
                }
                class BasicToggleButtonUI extends javax.swing.plaf.basic.BasicButtonUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintIcon(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle): void
                    protected getTextShiftOffset(): int
                    public static class: java.lang.Class<any>
                }
                class BasicToolBarSeparatorUI extends javax.swing.plaf.basic.BasicSeparatorUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicToolBarUI extends javax.swing.plaf.ToolBarUI implements javax.swing.SwingConstants {
                    protected toolBar: javax.swing.JToolBar
                    protected dragWindow: javax.swing.plaf.basic.BasicToolBarUI$DragWindow
                    protected focusedCompIndex: int
                    protected dockingColor: java.awt.Color
                    protected floatingColor: java.awt.Color
                    protected dockingBorderColor: java.awt.Color
                    protected floatingBorderColor: java.awt.Color
                    protected dockingListener: javax.swing.event.MouseInputListener
                    protected propertyListener: java.beans.PropertyChangeListener
                    protected toolBarContListener: java.awt.event.ContainerListener
                    protected toolBarFocusListener: java.awt.event.FocusListener
                    protected constraintBeforeFloating: string
                    protected upKey: javax.swing.KeyStroke
                    protected downKey: javax.swing.KeyStroke
                    protected leftKey: javax.swing.KeyStroke
                    protected rightKey: javax.swing.KeyStroke
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected navigateFocusedComp(arg0: int): void
                    protected createRolloverBorder(): javax.swing.border.Border
                    protected createNonRolloverBorder(): javax.swing.border.Border
                    protected createFloatingFrame(arg0: javax.swing.JToolBar | javax.swing.JToolBar$$Lambda): javax.swing.JFrame
                    protected createFloatingWindow(arg0: javax.swing.JToolBar | javax.swing.JToolBar$$Lambda): javax.swing.RootPaneContainer
                    protected createDragWindow(arg0: javax.swing.JToolBar | javax.swing.JToolBar$$Lambda): javax.swing.plaf.basic.BasicToolBarUI$DragWindow
                    public isRolloverBorders(): boolean
                    public setRolloverBorders(arg0: boolean): void
                    protected installRolloverBorders(arg0: javax.swing.JComponent): void
                    protected installNonRolloverBorders(arg0: javax.swing.JComponent): void
                    protected installNormalBorders(arg0: javax.swing.JComponent): void
                    protected setBorderToRollover(arg0: java.awt.Component): void
                    protected getRolloverBorder(arg0: javax.swing.AbstractButton): javax.swing.border.Border
                    protected setBorderToNonRollover(arg0: java.awt.Component): void
                    protected getNonRolloverBorder(arg0: javax.swing.AbstractButton): javax.swing.border.Border
                    protected setBorderToNormal(arg0: java.awt.Component): void
                    public setFloatingLocation(arg0: int, arg1: int): void
                    public isFloating(): boolean
                    public setFloating(arg0: boolean, arg1: java.awt.Point): void
                    public setOrientation(arg0: int): void
                    public getDockingColor(): java.awt.Color
                    public setDockingColor(arg0: java.awt.Color): void
                    public getFloatingColor(): java.awt.Color
                    public setFloatingColor(arg0: java.awt.Color): void
                    public canDock(arg0: java.awt.Component, arg1: java.awt.Point): boolean
                    protected dragTo(arg0: java.awt.Point, arg1: java.awt.Point): void
                    protected floatAt(arg0: java.awt.Point, arg1: java.awt.Point): void
                    protected createToolBarContListener(): java.awt.event.ContainerListener
                    protected createToolBarFocusListener(): java.awt.event.FocusListener
                    protected createPropertyListener(): java.beans.PropertyChangeListener
                    protected createDockingListener(): javax.swing.event.MouseInputListener
                    protected createFrameListener(): java.awt.event.WindowListener
                    protected paintDragWindow(arg0: java.awt.Graphics): void
                    public static class: java.lang.Class<any>
                }
                class BasicToolTipUI extends javax.swing.plaf.ToolTipUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(arg0: javax.swing.JComponent): void
                    protected installListeners(arg0: javax.swing.JComponent): void
                    protected uninstallListeners(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class BasicTransferable implements java.awt.datatransfer.Transferable , javax.swing.plaf.UIResource {
                    protected plainData: string
                    protected htmlData: string
                    public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
                    public getTransferDataFlavors(): java.awt.datatransfer.DataFlavor[]
                    public isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                    public getTransferData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
                    protected isRicherFlavor(arg0: java.awt.datatransfer.DataFlavor): boolean
                    protected getRicherFlavors(): java.awt.datatransfer.DataFlavor[]
                    protected getRicherData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
                    protected isHTMLFlavor(arg0: java.awt.datatransfer.DataFlavor): boolean
                    protected isHTMLSupported(): boolean
                    protected getHTMLData(): string
                    protected isPlainFlavor(arg0: java.awt.datatransfer.DataFlavor): boolean
                    protected isPlainSupported(): boolean
                    protected getPlainData(): string
                    protected isStringFlavor(arg0: java.awt.datatransfer.DataFlavor): boolean
                    public static class: java.lang.Class<any>
                }
                class BasicTreeUI extends javax.swing.plaf.TreeUI {
                    protected collapsedIcon: javax.swing.Icon
                    protected expandedIcon: javax.swing.Icon
                    protected leftChildIndent: int
                    protected rightChildIndent: int
                    protected totalChildIndent: int
                    protected preferredMinSize: java.awt.Dimension
                    protected lastSelectedRow: int
                    protected tree: javax.swing.JTree
                    protected currentCellRenderer: javax.swing.tree.TreeCellRenderer
                    protected createdRenderer: boolean
                    protected cellEditor: javax.swing.tree.TreeCellEditor
                    protected createdCellEditor: boolean
                    protected stopEditingInCompleteEditing: boolean
                    protected rendererPane: javax.swing.CellRendererPane
                    protected preferredSize: java.awt.Dimension
                    protected validCachedPreferredSize: boolean
                    protected treeState: javax.swing.tree.AbstractLayoutCache
                    protected drawingCache: java.util.Hashtable<javax.swing.tree.TreePath, java.lang.Boolean>
                    protected largeModel: boolean
                    protected nodeDimensions: javax.swing.tree.AbstractLayoutCache$NodeDimensions
                    protected treeModel: javax.swing.tree.TreeModel
                    protected treeSelectionModel: javax.swing.tree.TreeSelectionModel
                    protected depthOffset: int
                    protected editingComponent: java.awt.Component
                    protected editingPath: javax.swing.tree.TreePath
                    protected editingRow: int
                    protected editorHasDifferentSize: boolean
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected getHashColor(): java.awt.Color
                    protected setHashColor(arg0: java.awt.Color): void
                    public setLeftChildIndent(arg0: int): void
                    public getLeftChildIndent(): int
                    public setRightChildIndent(arg0: int): void
                    public getRightChildIndent(): int
                    public setExpandedIcon(arg0: javax.swing.Icon): void
                    public getExpandedIcon(): javax.swing.Icon
                    public setCollapsedIcon(arg0: javax.swing.Icon): void
                    public getCollapsedIcon(): javax.swing.Icon
                    protected setLargeModel(arg0: boolean): void
                    protected isLargeModel(): boolean
                    protected setRowHeight(arg0: int): void
                    protected getRowHeight(): int
                    protected setCellRenderer(arg0: javax.swing.tree.TreeCellRenderer | javax.swing.tree.TreeCellRenderer$$Lambda): void
                    protected getCellRenderer(): javax.swing.tree.TreeCellRenderer
                    protected setModel(arg0: javax.swing.tree.TreeModel): void
                    protected getModel(): javax.swing.tree.TreeModel
                    protected setRootVisible(arg0: boolean): void
                    protected isRootVisible(): boolean
                    protected setShowsRootHandles(arg0: boolean): void
                    protected getShowsRootHandles(): boolean
                    protected setCellEditor(arg0: javax.swing.tree.TreeCellEditor): void
                    protected getCellEditor(): javax.swing.tree.TreeCellEditor
                    protected setEditable(arg0: boolean): void
                    protected isEditable(): boolean
                    protected setSelectionModel(arg0: javax.swing.tree.TreeSelectionModel): void
                    protected getSelectionModel(): javax.swing.tree.TreeSelectionModel
                    public getPathBounds(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): java.awt.Rectangle
                    public getPathForRow(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: int): javax.swing.tree.TreePath
                    public getRowForPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): int
                    public getRowCount(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): int
                    public getClosestPathForLocation(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: int, arg2: int): javax.swing.tree.TreePath
                    public isEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): boolean
                    public stopEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): boolean
                    public cancelEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): void
                    public startEditingAtPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): void
                    public getEditingPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): javax.swing.tree.TreePath
                    public installUI(arg0: javax.swing.JComponent): void
                    protected prepareForUIInstall(): void
                    protected completeUIInstall(): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected installKeyboardActions(): void
                    protected installComponents(): void
                    protected createNodeDimensions(): javax.swing.tree.AbstractLayoutCache$NodeDimensions
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createMouseListener(): java.awt.event.MouseListener
                    protected createFocusListener(): java.awt.event.FocusListener
                    protected createKeyListener(): java.awt.event.KeyListener
                    protected createSelectionModelPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createTreeSelectionListener(): javax.swing.event.TreeSelectionListener
                    protected createCellEditorListener(): javax.swing.event.CellEditorListener
                    protected createComponentListener(): java.awt.event.ComponentListener
                    protected createTreeExpansionListener(): javax.swing.event.TreeExpansionListener
                    protected createLayoutCache(): javax.swing.tree.AbstractLayoutCache
                    protected createCellRendererPane(): javax.swing.CellRendererPane
                    protected createDefaultCellEditor(): javax.swing.tree.TreeCellEditor
                    protected createDefaultCellRenderer(): javax.swing.tree.TreeCellRenderer
                    protected createTreeModelListener(): javax.swing.event.TreeModelListener
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected prepareForUIUninstall(): void
                    protected completeUIUninstall(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallKeyboardActions(): void
                    protected uninstallComponents(): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected isDropLine(arg0: javax.swing.JTree$DropLocation): boolean
                    protected paintDropLine(arg0: java.awt.Graphics): void
                    protected getDropLineRect(arg0: javax.swing.JTree$DropLocation): java.awt.Rectangle
                    protected paintHorizontalPartOfLeg(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: java.awt.Rectangle, arg4: javax.swing.tree.TreePath, arg5: int, arg6: boolean, arg7: boolean, arg8: boolean): void
                    protected paintVerticalPartOfLeg(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: javax.swing.tree.TreePath): void
                    protected paintExpandControl(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: java.awt.Rectangle, arg4: javax.swing.tree.TreePath, arg5: int, arg6: boolean, arg7: boolean, arg8: boolean): void
                    protected paintRow(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: java.awt.Rectangle, arg4: javax.swing.tree.TreePath, arg5: int, arg6: boolean, arg7: boolean, arg8: boolean): void
                    protected shouldPaintExpandControl(arg0: javax.swing.tree.TreePath, arg1: int, arg2: boolean, arg3: boolean, arg4: boolean): boolean
                    protected paintVerticalLine(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: int): void
                    protected paintHorizontalLine(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: int): void
                    protected getVerticalLegBuffer(): int
                    protected getHorizontalLegBuffer(): int
                    protected drawCentered(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: javax.swing.Icon, arg3: int, arg4: int): void
                    protected drawDashedHorizontalLine(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int): void
                    protected drawDashedVerticalLine(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int): void
                    protected getRowX(arg0: int, arg1: int): int
                    protected updateLayoutCacheExpandedNodes(): void
                    protected updateExpandedDescendants(arg0: javax.swing.tree.TreePath): void
                    protected getLastChildPath(arg0: javax.swing.tree.TreePath): javax.swing.tree.TreePath
                    protected updateDepthOffset(): void
                    protected updateCellEditor(): void
                    protected updateRenderer(): void
                    protected configureLayoutCache(): void
                    protected updateSize(): void
                    protected updateCachedPreferredSize(): void
                    protected pathWasExpanded(arg0: javax.swing.tree.TreePath): void
                    protected pathWasCollapsed(arg0: javax.swing.tree.TreePath): void
                    protected ensureRowsAreVisible(arg0: int, arg1: int): void
                    public setPreferredMinSize(arg0: java.awt.Dimension): void
                    public getPreferredMinSize(): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent, arg1: boolean): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected completeEditing(): void
                    protected completeEditing(arg0: boolean, arg1: boolean, arg2: boolean): void
                    protected startEditing(arg0: javax.swing.tree.TreePath, arg1: java.awt.event.MouseEvent): boolean
                    protected checkForClickInExpandControl(arg0: javax.swing.tree.TreePath, arg1: int, arg2: int): void
                    protected isLocationInExpandControl(arg0: javax.swing.tree.TreePath, arg1: int, arg2: int): boolean
                    protected handleExpandControlClick(arg0: javax.swing.tree.TreePath, arg1: int, arg2: int): void
                    protected toggleExpandState(arg0: javax.swing.tree.TreePath): void
                    protected isToggleSelectionEvent(arg0: java.awt.event.MouseEvent): boolean
                    protected isMultiSelectEvent(arg0: java.awt.event.MouseEvent): boolean
                    protected isToggleEvent(arg0: java.awt.event.MouseEvent): boolean
                    protected selectPathForEvent(arg0: javax.swing.tree.TreePath, arg1: java.awt.event.MouseEvent): void
                    protected isLeaf(arg0: int): boolean
                    protected updateLeadSelectionRow(): void
                    protected getLeadSelectionRow(): int
                    public static class: java.lang.Class<any>
                }
                class BasicViewportUI extends javax.swing.plaf.ViewportUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(arg0: javax.swing.JComponent): void
                    public static class: java.lang.Class<any>
                }
                class CenterLayout implements java.awt.LayoutManager , java.io.Serializable {
                    public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
                    public removeLayoutComponent(arg0: java.awt.Component): void
                    public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                    public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                    public layoutContainer(arg0: java.awt.Container): void
                    public static class: java.lang.Class<any>
                }
                interface ComboPopup {
                    show(): void
                    hide(): void
                    isVisible(): boolean
                    getList(): javax.swing.JList
                    getMouseListener(): java.awt.event.MouseListener
                    getMouseMotionListener(): java.awt.event.MouseMotionListener
                    getKeyListener(): java.awt.event.KeyListener
                    uninstallingUI(): void
                }
                class DefaultMenuLayout extends javax.swing.BoxLayout implements javax.swing.plaf.UIResource {
                    public constructor(arg0: java.awt.Container, arg1: int)
                    public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class DragRecognitionSupport {
                    public static mousePressed(arg0: java.awt.event.MouseEvent): boolean
                    public static mouseReleased(arg0: java.awt.event.MouseEvent): java.awt.event.MouseEvent
                    public static mouseDragged(arg0: java.awt.event.MouseEvent, arg1: javax.swing.plaf.basic.DragRecognitionSupport$BeforeDrag): boolean
                    public static class: java.lang.Class<any>
                }
                class LazyActionMap extends javax.swing.plaf.ActionMapUIResource {
                    public put(arg0: javax.swing.Action): void
                    public put(arg0: java.lang.Object, arg1: javax.swing.Action): void
                    public get(arg0: java.lang.Object): javax.swing.Action
                    public remove(arg0: java.lang.Object): void
                    public clear(): void
                    public keys(): java.lang.Object[]
                    public size(): int
                    public allKeys(): java.lang.Object[]
                    public setParent(arg0: javax.swing.ActionMap): void
                    public static class: java.lang.Class<any>
                }
            }
            namespace metal {
                class DefaultMetalTheme extends javax.swing.plaf.metal.MetalTheme {
                    public getName(): string
                    public constructor()
                    protected getPrimary1(): javax.swing.plaf.ColorUIResource
                    protected getPrimary2(): javax.swing.plaf.ColorUIResource
                    protected getPrimary3(): javax.swing.plaf.ColorUIResource
                    protected getSecondary1(): javax.swing.plaf.ColorUIResource
                    protected getSecondary2(): javax.swing.plaf.ColorUIResource
                    protected getSecondary3(): javax.swing.plaf.ColorUIResource
                    public getControlTextFont(): javax.swing.plaf.FontUIResource
                    public getSystemTextFont(): javax.swing.plaf.FontUIResource
                    public getUserTextFont(): javax.swing.plaf.FontUIResource
                    public getMenuTextFont(): javax.swing.plaf.FontUIResource
                    public getWindowTitleFont(): javax.swing.plaf.FontUIResource
                    public getSubTextFont(): javax.swing.plaf.FontUIResource
                    public static class: java.lang.Class<any>
                }
                class MetalBorders {
                    public constructor()
                    public static getButtonBorder(): javax.swing.border.Border
                    public static getTextBorder(): javax.swing.border.Border
                    public static getTextFieldBorder(): javax.swing.border.Border
                    public static getToggleButtonBorder(): javax.swing.border.Border
                    public static getDesktopIconBorder(): javax.swing.border.Border
                    public static class: java.lang.Class<any>
                }
                class MetalBumps implements javax.swing.Icon {
                    protected xBumps: int
                    protected yBumps: int
                    protected topColor: java.awt.Color
                    protected shadowColor: java.awt.Color
                    protected backColor: java.awt.Color
                    protected buffer: javax.swing.plaf.metal.BumpBuffer
                    public constructor(arg0: int, arg1: int, arg2: java.awt.Color, arg3: java.awt.Color, arg4: java.awt.Color)
                    public setBumpArea(arg0: java.awt.Dimension): void
                    public setBumpArea(arg0: int, arg1: int): void
                    public setBumpColors(arg0: java.awt.Color, arg1: java.awt.Color, arg2: java.awt.Color): void
                    public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                    public getIconWidth(): int
                    public getIconHeight(): int
                    public static class: java.lang.Class<any>
                }
                class MetalButtonUI extends javax.swing.plaf.basic.BasicButtonUI {
                    protected focusColor: java.awt.Color
                    protected selectColor: java.awt.Color
                    protected disabledTextColor: java.awt.Color
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installDefaults(arg0: javax.swing.AbstractButton): void
                    public uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    protected createButtonListener(arg0: javax.swing.AbstractButton): javax.swing.plaf.basic.BasicButtonListener
                    protected getSelectColor(): java.awt.Color
                    protected getDisabledTextColor(): java.awt.Color
                    protected getFocusColor(): java.awt.Color
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintButtonPressed(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton): void
                    protected paintFocus(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle, arg3: java.awt.Rectangle, arg4: java.awt.Rectangle): void
                    protected paintText(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle, arg3: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class MetalCheckBoxIcon implements javax.swing.Icon , javax.swing.plaf.UIResource , java.io.Serializable {
                    public constructor()
                    protected getControlSize(): int
                    public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                    protected drawCheck(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                    public getIconWidth(): int
                    public getIconHeight(): int
                    public static class: java.lang.Class<any>
                }
                class MetalCheckBoxUI extends javax.swing.plaf.metal.MetalRadioButtonUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public getPropertyPrefix(): string
                    public installDefaults(arg0: javax.swing.AbstractButton): void
                    protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    public static class: java.lang.Class<any>
                }
                class MetalComboBoxButton extends javax.swing.JButton {
                    protected comboBox: javax.swing.JComboBox
                    protected listBox: javax.swing.JList
                    protected rendererPane: javax.swing.CellRendererPane
                    protected comboIcon: javax.swing.Icon
                    protected iconOnly: boolean
                    public getComboBox(): javax.swing.JComboBox
                    public setComboBox(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): void
                    public getComboIcon(): javax.swing.Icon
                    public setComboIcon(arg0: javax.swing.Icon): void
                    public isIconOnly(): boolean
                    public setIconOnly(arg0: boolean): void
                    public constructor(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda, arg1: javax.swing.Icon, arg2: javax.swing.CellRendererPane | javax.swing.CellRendererPane$$Lambda, arg3: javax.swing.JList | javax.swing.JList$$Lambda)
                    public constructor(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda, arg1: javax.swing.Icon, arg2: boolean, arg3: javax.swing.CellRendererPane | javax.swing.CellRendererPane$$Lambda, arg4: javax.swing.JList | javax.swing.JList$$Lambda)
                    public isFocusTraversable(): boolean
                    public setEnabled(arg0: boolean): void
                    public paintComponent(arg0: java.awt.Graphics): void
                    public getMinimumSize(): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class MetalComboBoxEditor extends javax.swing.plaf.basic.BasicComboBoxEditor {
                    protected static editorBorderInsets: java.awt.Insets
                    public constructor()
                    public static class: java.lang.Class<any>
                }
                class MetalComboBoxIcon implements javax.swing.Icon , java.io.Serializable {
                    public constructor()
                    public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                    public getIconWidth(): int
                    public getIconHeight(): int
                    public static class: java.lang.Class<any>
                }
                class MetalComboBoxUI extends javax.swing.plaf.basic.BasicComboBoxUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintCurrentValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: boolean): void
                    public paintCurrentValueBackground(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: boolean): void
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    protected createEditor(): javax.swing.ComboBoxEditor
                    protected createPopup(): javax.swing.plaf.basic.ComboPopup
                    protected createArrowButton(): javax.swing.JButton
                    public createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected editablePropertyChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected createLayoutManager(): java.awt.LayoutManager
                    public layoutComboBox(arg0: java.awt.Container, arg1: javax.swing.plaf.metal.MetalComboBoxUI$MetalComboBoxLayoutManager): void
                    protected removeListeners(): void
                    public configureEditor(): void
                    public unconfigureEditor(): void
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class MetalDesktopIconUI extends javax.swing.plaf.basic.BasicDesktopIconUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected installDefaults(): void
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class MetalFileChooserUI extends javax.swing.plaf.basic.BasicFileChooserUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public installComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected getButtonPanel(): javax.swing.JPanel
                    protected getBottomPanel(): javax.swing.JPanel
                    protected installStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected getActionMap(): javax.swing.ActionMap
                    protected createActionMap(): javax.swing.ActionMap
                    protected createList(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JPanel
                    protected createDetailsView(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JPanel
                    public createListSelectionListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.event.ListSelectionListener
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public createPropertyChangeListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): java.beans.PropertyChangeListener
                    protected removeControlButtons(): void
                    protected addControlButtons(): void
                    public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
                    public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public getFileName(): string
                    public setFileName(arg0: java.lang.String | string): void
                    protected setDirectorySelected(arg0: boolean): void
                    public getDirectoryName(): string
                    public setDirectoryName(arg0: java.lang.String | string): void
                    protected createDirectoryComboBoxRenderer(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.plaf.metal.MetalFileChooserUI$DirectoryComboBoxRenderer
                    protected createDirectoryComboBoxModel(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.plaf.metal.MetalFileChooserUI$DirectoryComboBoxModel
                    protected createFilterComboBoxRenderer(): javax.swing.plaf.metal.MetalFileChooserUI$FilterComboBoxRenderer
                    protected createFilterComboBoxModel(): javax.swing.plaf.metal.MetalFileChooserUI$FilterComboBoxModel
                    public valueChanged(arg0: javax.swing.event.ListSelectionEvent): void
                    protected getApproveButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                    public static class: java.lang.Class<any>
                }
                class MetalFontDesktopProperty extends com.sun.java.swing.plaf.windows.DesktopProperty {
                    protected configureValue(arg0: java.lang.Object): java.lang.Object
                    protected getDefaultValue(): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class MetalHighContrastTheme extends javax.swing.plaf.metal.DefaultMetalTheme {
                    public getName(): string
                    protected getPrimary1(): javax.swing.plaf.ColorUIResource
                    protected getPrimary2(): javax.swing.plaf.ColorUIResource
                    protected getPrimary3(): javax.swing.plaf.ColorUIResource
                    public getPrimaryControlHighlight(): javax.swing.plaf.ColorUIResource
                    protected getSecondary2(): javax.swing.plaf.ColorUIResource
                    protected getSecondary3(): javax.swing.plaf.ColorUIResource
                    public getControlHighlight(): javax.swing.plaf.ColorUIResource
                    public getFocusColor(): javax.swing.plaf.ColorUIResource
                    public getTextHighlightColor(): javax.swing.plaf.ColorUIResource
                    public getHighlightedTextColor(): javax.swing.plaf.ColorUIResource
                    public getMenuSelectedBackground(): javax.swing.plaf.ColorUIResource
                    public getMenuSelectedForeground(): javax.swing.plaf.ColorUIResource
                    public getAcceleratorForeground(): javax.swing.plaf.ColorUIResource
                    public getAcceleratorSelectedForeground(): javax.swing.plaf.ColorUIResource
                    public addCustomEntriesToTable(arg0: javax.swing.UIDefaults): void
                    public static class: java.lang.Class<any>
                }
                class MetalIconFactory implements java.io.Serializable {
                    public static DARK: boolean
                    public static LIGHT: boolean
                    public constructor()
                    public static getFileChooserDetailViewIcon(): javax.swing.Icon
                    public static getFileChooserHomeFolderIcon(): javax.swing.Icon
                    public static getFileChooserListViewIcon(): javax.swing.Icon
                    public static getFileChooserNewFolderIcon(): javax.swing.Icon
                    public static getFileChooserUpFolderIcon(): javax.swing.Icon
                    public static getInternalFrameAltMaximizeIcon(arg0: int): javax.swing.Icon
                    public static getInternalFrameCloseIcon(arg0: int): javax.swing.Icon
                    public static getInternalFrameDefaultMenuIcon(): javax.swing.Icon
                    public static getInternalFrameMaximizeIcon(arg0: int): javax.swing.Icon
                    public static getInternalFrameMinimizeIcon(arg0: int): javax.swing.Icon
                    public static getRadioButtonIcon(): javax.swing.Icon
                    public static getCheckBoxIcon(): javax.swing.Icon
                    public static getTreeComputerIcon(): javax.swing.Icon
                    public static getTreeFloppyDriveIcon(): javax.swing.Icon
                    public static getTreeFolderIcon(): javax.swing.Icon
                    public static getTreeHardDriveIcon(): javax.swing.Icon
                    public static getTreeLeafIcon(): javax.swing.Icon
                    public static getTreeControlIcon(arg0: boolean): javax.swing.Icon
                    public static getMenuArrowIcon(): javax.swing.Icon
                    public static getMenuItemCheckIcon(): javax.swing.Icon
                    public static getMenuItemArrowIcon(): javax.swing.Icon
                    public static getCheckBoxMenuItemIcon(): javax.swing.Icon
                    public static getRadioButtonMenuItemIcon(): javax.swing.Icon
                    public static getHorizontalSliderThumbIcon(): javax.swing.Icon
                    public static getVerticalSliderThumbIcon(): javax.swing.Icon
                    public static class: java.lang.Class<any>
                }
                class MetalInternalFrameTitlePane extends javax.swing.plaf.basic.BasicInternalFrameTitlePane {
                    protected isPalette: boolean
                    protected paletteCloseIcon: javax.swing.Icon
                    protected paletteTitleHeight: int
                    public constructor(arg0: javax.swing.JInternalFrame)
                    public addNotify(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected createButtons(): void
                    protected assembleSystemMenu(): void
                    protected addSystemMenuItems(arg0: javax.swing.JMenu): void
                    protected showSystemMenu(): void
                    protected addSubComponents(): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected createLayout(): java.awt.LayoutManager
                    public paintPalette(arg0: java.awt.Graphics): void
                    public paintComponent(arg0: java.awt.Graphics): void
                    public setPalette(arg0: boolean): void
                    public static class: java.lang.Class<any>
                }
                class MetalInternalFrameUI extends javax.swing.plaf.basic.BasicInternalFrameUI {
                    protected static IS_PALETTE: string
                    public constructor(arg0: javax.swing.JInternalFrame)
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installKeyboardActions(): void
                    protected uninstallKeyboardActions(): void
                    protected uninstallComponents(): void
                    protected createNorthPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                    public setPalette(arg0: boolean): void
                    protected createBorderListener(arg0: javax.swing.JInternalFrame): javax.swing.event.MouseInputAdapter
                    public static class: java.lang.Class<any>
                }
                class MetalLabelUI extends javax.swing.plaf.basic.BasicLabelUI {
                    protected static metalLabelUI: javax.swing.plaf.metal.MetalLabelUI
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected paintDisabledText(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int): void
                    public static class: java.lang.Class<any>
                }
                class MetalLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel {
                    public constructor()
                    public getName(): string
                    public getID(): string
                    public getDescription(): string
                    public isNativeLookAndFeel(): boolean
                    public isSupportedLookAndFeel(): boolean
                    public getSupportsWindowDecorations(): boolean
                    protected initClassDefaults(arg0: javax.swing.UIDefaults): void
                    protected initSystemColorDefaults(arg0: javax.swing.UIDefaults): void
                    protected initComponentDefaults(arg0: javax.swing.UIDefaults): void
                    protected createDefaultTheme(): void
                    public getDefaults(): javax.swing.UIDefaults
                    public provideErrorFeedback(arg0: java.awt.Component): void
                    public static setCurrentTheme(arg0: javax.swing.plaf.metal.MetalTheme): void
                    public static getCurrentTheme(): javax.swing.plaf.metal.MetalTheme
                    public getDisabledIcon(arg0: javax.swing.JComponent, arg1: javax.swing.Icon): javax.swing.Icon
                    public getDisabledSelectedIcon(arg0: javax.swing.JComponent, arg1: javax.swing.Icon): javax.swing.Icon
                    public static getControlTextFont(): javax.swing.plaf.FontUIResource
                    public static getSystemTextFont(): javax.swing.plaf.FontUIResource
                    public static getUserTextFont(): javax.swing.plaf.FontUIResource
                    public static getMenuTextFont(): javax.swing.plaf.FontUIResource
                    public static getWindowTitleFont(): javax.swing.plaf.FontUIResource
                    public static getSubTextFont(): javax.swing.plaf.FontUIResource
                    public static getDesktopColor(): javax.swing.plaf.ColorUIResource
                    public static getFocusColor(): javax.swing.plaf.ColorUIResource
                    public static getWhite(): javax.swing.plaf.ColorUIResource
                    public static getBlack(): javax.swing.plaf.ColorUIResource
                    public static getControl(): javax.swing.plaf.ColorUIResource
                    public static getControlShadow(): javax.swing.plaf.ColorUIResource
                    public static getControlDarkShadow(): javax.swing.plaf.ColorUIResource
                    public static getControlInfo(): javax.swing.plaf.ColorUIResource
                    public static getControlHighlight(): javax.swing.plaf.ColorUIResource
                    public static getControlDisabled(): javax.swing.plaf.ColorUIResource
                    public static getPrimaryControl(): javax.swing.plaf.ColorUIResource
                    public static getPrimaryControlShadow(): javax.swing.plaf.ColorUIResource
                    public static getPrimaryControlDarkShadow(): javax.swing.plaf.ColorUIResource
                    public static getPrimaryControlInfo(): javax.swing.plaf.ColorUIResource
                    public static getPrimaryControlHighlight(): javax.swing.plaf.ColorUIResource
                    public static getSystemTextColor(): javax.swing.plaf.ColorUIResource
                    public static getControlTextColor(): javax.swing.plaf.ColorUIResource
                    public static getInactiveControlTextColor(): javax.swing.plaf.ColorUIResource
                    public static getInactiveSystemTextColor(): javax.swing.plaf.ColorUIResource
                    public static getUserTextColor(): javax.swing.plaf.ColorUIResource
                    public static getTextHighlightColor(): javax.swing.plaf.ColorUIResource
                    public static getHighlightedTextColor(): javax.swing.plaf.ColorUIResource
                    public static getWindowBackground(): javax.swing.plaf.ColorUIResource
                    public static getWindowTitleBackground(): javax.swing.plaf.ColorUIResource
                    public static getWindowTitleForeground(): javax.swing.plaf.ColorUIResource
                    public static getWindowTitleInactiveBackground(): javax.swing.plaf.ColorUIResource
                    public static getWindowTitleInactiveForeground(): javax.swing.plaf.ColorUIResource
                    public static getMenuBackground(): javax.swing.plaf.ColorUIResource
                    public static getMenuForeground(): javax.swing.plaf.ColorUIResource
                    public static getMenuSelectedBackground(): javax.swing.plaf.ColorUIResource
                    public static getMenuSelectedForeground(): javax.swing.plaf.ColorUIResource
                    public static getMenuDisabledForeground(): javax.swing.plaf.ColorUIResource
                    public static getSeparatorBackground(): javax.swing.plaf.ColorUIResource
                    public static getSeparatorForeground(): javax.swing.plaf.ColorUIResource
                    public static getAcceleratorForeground(): javax.swing.plaf.ColorUIResource
                    public static getAcceleratorSelectedForeground(): javax.swing.plaf.ColorUIResource
                    public getLayoutStyle(): javax.swing.LayoutStyle
                    public static class: java.lang.Class<any>
                }
                class MetalMenuBarUI extends javax.swing.plaf.basic.BasicMenuBarUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static class: java.lang.Class<any>
                }
                class MetalPopupMenuSeparatorUI extends javax.swing.plaf.metal.MetalSeparatorUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class MetalProgressBarUI extends javax.swing.plaf.basic.BasicProgressBarUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public paintDeterminate(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintIndeterminate(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static class: java.lang.Class<any>
                }
                class MetalRadioButtonUI extends javax.swing.plaf.basic.BasicRadioButtonUI {
                    protected focusColor: java.awt.Color
                    protected selectColor: java.awt.Color
                    protected disabledTextColor: java.awt.Color
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installDefaults(arg0: javax.swing.AbstractButton): void
                    protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    protected getSelectColor(): java.awt.Color
                    protected getDisabledTextColor(): java.awt.Color
                    protected getFocusColor(): java.awt.Color
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintFocus(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Dimension): void
                    public static class: java.lang.Class<any>
                }
                class MetalRootPaneUI extends javax.swing.plaf.basic.BasicRootPaneUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class MetalScrollBarUI extends javax.swing.plaf.basic.BasicScrollBarUI {
                    protected bumps: javax.swing.plaf.metal.MetalBumps
                    protected increaseButton: javax.swing.plaf.metal.MetalScrollButton
                    protected decreaseButton: javax.swing.plaf.metal.MetalScrollButton
                    protected scrollBarWidth: int
                    public static FREE_STANDING_PROP: string
                    protected isFreeStanding: boolean
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected createPropertyChangeListener(): java.beans.PropertyChangeListener
                    protected configureScrollBarColors(): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected createDecreaseButton(arg0: int): javax.swing.JButton
                    protected createIncreaseButton(arg0: int): javax.swing.JButton
                    protected paintTrack(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                    protected paintThumb(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle): void
                    protected getMinimumThumbSize(): java.awt.Dimension
                    protected setThumbBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
                    public static class: java.lang.Class<any>
                }
                class MetalScrollButton extends javax.swing.plaf.basic.BasicArrowButton {
                    public constructor(arg0: int, arg1: int, arg2: boolean)
                    public setFreeStanding(arg0: boolean): void
                    public paint(arg0: java.awt.Graphics): void
                    public getPreferredSize(): java.awt.Dimension
                    public getMinimumSize(): java.awt.Dimension
                    public getMaximumSize(): java.awt.Dimension
                    public getButtonWidth(): int
                    public static class: java.lang.Class<any>
                }
                class MetalScrollPaneUI extends javax.swing.plaf.basic.BasicScrollPaneUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public installListeners(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JComponent): void
                    public uninstallListeners(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected createScrollBarSwapListener(): java.beans.PropertyChangeListener
                    public static class: java.lang.Class<any>
                }
                class MetalSeparatorUI extends javax.swing.plaf.basic.BasicSeparatorUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class MetalSliderUI extends javax.swing.plaf.basic.BasicSliderUI {
                    protected TICK_BUFFER: int
                    protected filledSlider: boolean
                    protected static thumbColor: java.awt.Color
                    protected static highlightColor: java.awt.Color
                    protected static darkShadowColor: java.awt.Color
                    protected static trackWidth: int
                    protected static tickLength: int
                    protected static horizThumbIcon: javax.swing.Icon
                    protected static vertThumbIcon: javax.swing.Icon
                    protected SLIDER_FILL: string
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    public installUI(arg0: javax.swing.JComponent): void
                    protected createPropertyChangeListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): java.beans.PropertyChangeListener
                    public paintThumb(arg0: java.awt.Graphics): void
                    public paintTrack(arg0: java.awt.Graphics): void
                    public paintFocus(arg0: java.awt.Graphics): void
                    protected getThumbSize(): java.awt.Dimension
                    public getTickLength(): int
                    protected getTrackWidth(): int
                    protected getTrackLength(): int
                    protected getThumbOverhang(): int
                    protected scrollDueToClickInTrack(arg0: int): void
                    protected paintMinorTickForHorizSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected paintMajorTickForHorizSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected paintMinorTickForVertSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected paintMajorTickForVertSlider(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    public static class: java.lang.Class<any>
                }
                class MetalSplitPaneDivider extends javax.swing.plaf.basic.BasicSplitPaneDivider {
                    public constructor(arg0: javax.swing.plaf.basic.BasicSplitPaneUI)
                    public paint(arg0: java.awt.Graphics): void
                    protected createLeftOneTouchButton(): javax.swing.JButton
                    protected createRightOneTouchButton(): javax.swing.JButton
                    public static class: java.lang.Class<any>
                }
                class MetalSplitPaneUI extends javax.swing.plaf.basic.BasicSplitPaneUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public createDefaultDivider(): javax.swing.plaf.basic.BasicSplitPaneDivider
                    public static class: java.lang.Class<any>
                }
                class MetalTabbedPaneUI extends javax.swing.plaf.basic.BasicTabbedPaneUI {
                    protected minTabWidth: int
                    protected tabAreaBackground: java.awt.Color
                    protected selectColor: java.awt.Color
                    protected selectHighlight: java.awt.Color
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected createLayoutManager(): java.awt.LayoutManager
                    protected installDefaults(): void
                    protected paintTabBorder(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
                    protected paintTopTabBorder(arg0: int, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: boolean): void
                    protected shouldFillGap(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                    protected getColorForGap(arg0: int, arg1: int, arg2: int): java.awt.Color
                    protected paintLeftTabBorder(arg0: int, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: boolean): void
                    protected paintBottomTabBorder(arg0: int, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: boolean): void
                    protected paintRightTabBorder(arg0: int, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: boolean): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintTabBackground(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
                    protected getTabLabelShiftX(arg0: int, arg1: int, arg2: boolean): int
                    protected getTabLabelShiftY(arg0: int, arg1: int, arg2: boolean): int
                    protected getBaselineOffset(): int
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintHighlightBelowTab(): void
                    protected paintFocusIndicator(arg0: java.awt.Graphics, arg1: int, arg2: java.awt.Rectangle[], arg3: int, arg4: java.awt.Rectangle, arg5: java.awt.Rectangle, arg6: boolean): void
                    protected paintContentBorderTopEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected paintContentBorderBottomEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected paintContentBorderLeftEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected paintContentBorderRightEdge(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    protected calculateMaxTabHeight(arg0: int): int
                    protected getTabRunOverlay(arg0: int): int
                    protected shouldRotateTabRuns(arg0: int, arg1: int): boolean
                    protected shouldPadTabRun(arg0: int, arg1: int): boolean
                    public static class: java.lang.Class<any>
                }
                class MetalTextFieldUI extends javax.swing.plaf.basic.BasicTextFieldUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                abstract class MetalTheme {
                    public constructor()
                    public getName(): string
                    protected getPrimary1(): javax.swing.plaf.ColorUIResource
                    protected getPrimary2(): javax.swing.plaf.ColorUIResource
                    protected getPrimary3(): javax.swing.plaf.ColorUIResource
                    protected getSecondary1(): javax.swing.plaf.ColorUIResource
                    protected getSecondary2(): javax.swing.plaf.ColorUIResource
                    protected getSecondary3(): javax.swing.plaf.ColorUIResource
                    public getControlTextFont(): javax.swing.plaf.FontUIResource
                    public getSystemTextFont(): javax.swing.plaf.FontUIResource
                    public getUserTextFont(): javax.swing.plaf.FontUIResource
                    public getMenuTextFont(): javax.swing.plaf.FontUIResource
                    public getWindowTitleFont(): javax.swing.plaf.FontUIResource
                    public getSubTextFont(): javax.swing.plaf.FontUIResource
                    protected getWhite(): javax.swing.plaf.ColorUIResource
                    protected getBlack(): javax.swing.plaf.ColorUIResource
                    public getFocusColor(): javax.swing.plaf.ColorUIResource
                    public getDesktopColor(): javax.swing.plaf.ColorUIResource
                    public getControl(): javax.swing.plaf.ColorUIResource
                    public getControlShadow(): javax.swing.plaf.ColorUIResource
                    public getControlDarkShadow(): javax.swing.plaf.ColorUIResource
                    public getControlInfo(): javax.swing.plaf.ColorUIResource
                    public getControlHighlight(): javax.swing.plaf.ColorUIResource
                    public getControlDisabled(): javax.swing.plaf.ColorUIResource
                    public getPrimaryControl(): javax.swing.plaf.ColorUIResource
                    public getPrimaryControlShadow(): javax.swing.plaf.ColorUIResource
                    public getPrimaryControlDarkShadow(): javax.swing.plaf.ColorUIResource
                    public getPrimaryControlInfo(): javax.swing.plaf.ColorUIResource
                    public getPrimaryControlHighlight(): javax.swing.plaf.ColorUIResource
                    public getSystemTextColor(): javax.swing.plaf.ColorUIResource
                    public getControlTextColor(): javax.swing.plaf.ColorUIResource
                    public getInactiveControlTextColor(): javax.swing.plaf.ColorUIResource
                    public getInactiveSystemTextColor(): javax.swing.plaf.ColorUIResource
                    public getUserTextColor(): javax.swing.plaf.ColorUIResource
                    public getTextHighlightColor(): javax.swing.plaf.ColorUIResource
                    public getHighlightedTextColor(): javax.swing.plaf.ColorUIResource
                    public getWindowBackground(): javax.swing.plaf.ColorUIResource
                    public getWindowTitleBackground(): javax.swing.plaf.ColorUIResource
                    public getWindowTitleForeground(): javax.swing.plaf.ColorUIResource
                    public getWindowTitleInactiveBackground(): javax.swing.plaf.ColorUIResource
                    public getWindowTitleInactiveForeground(): javax.swing.plaf.ColorUIResource
                    public getMenuBackground(): javax.swing.plaf.ColorUIResource
                    public getMenuForeground(): javax.swing.plaf.ColorUIResource
                    public getMenuSelectedBackground(): javax.swing.plaf.ColorUIResource
                    public getMenuSelectedForeground(): javax.swing.plaf.ColorUIResource
                    public getMenuDisabledForeground(): javax.swing.plaf.ColorUIResource
                    public getSeparatorBackground(): javax.swing.plaf.ColorUIResource
                    public getSeparatorForeground(): javax.swing.plaf.ColorUIResource
                    public getAcceleratorForeground(): javax.swing.plaf.ColorUIResource
                    public getAcceleratorSelectedForeground(): javax.swing.plaf.ColorUIResource
                    public addCustomEntriesToTable(arg0: javax.swing.UIDefaults): void
                    public static class: java.lang.Class<any>
                }
                class MetalTitlePane extends javax.swing.JComponent {
                    public constructor(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda, arg1: javax.swing.plaf.metal.MetalRootPaneUI)
                    public getRootPane(): javax.swing.JRootPane
                    public addNotify(): void
                    public removeNotify(): void
                    protected createMenuBar(): javax.swing.JMenuBar
                    public paintComponent(arg0: java.awt.Graphics): void
                    public static class: java.lang.Class<any>
                }
                class MetalToggleButtonUI extends javax.swing.plaf.basic.BasicToggleButtonUI {
                    protected focusColor: java.awt.Color
                    protected selectColor: java.awt.Color
                    protected disabledTextColor: java.awt.Color
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installDefaults(arg0: javax.swing.AbstractButton): void
                    protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    protected getSelectColor(): java.awt.Color
                    protected getDisabledTextColor(): java.awt.Color
                    protected getFocusColor(): java.awt.Color
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintButtonPressed(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton): void
                    protected paintText(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: java.awt.Rectangle, arg3: java.lang.String | string): void
                    protected paintFocus(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle, arg3: java.awt.Rectangle, arg4: java.awt.Rectangle): void
                    protected paintIcon(arg0: java.awt.Graphics, arg1: javax.swing.AbstractButton, arg2: java.awt.Rectangle): void
                    public static class: java.lang.Class<any>
                }
                class MetalToolBarUI extends javax.swing.plaf.basic.BasicToolBarUI {
                    protected contListener: java.awt.event.ContainerListener
                    protected rolloverListener: java.beans.PropertyChangeListener
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected createRolloverBorder(): javax.swing.border.Border
                    protected createNonRolloverBorder(): javax.swing.border.Border
                    protected setBorderToNonRollover(arg0: java.awt.Component): void
                    protected createContainerListener(): java.awt.event.ContainerListener
                    protected createRolloverListener(): java.beans.PropertyChangeListener
                    protected createDockingListener(): javax.swing.event.MouseInputListener
                    protected setDragOffset(arg0: java.awt.Point): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static class: java.lang.Class<any>
                }
                class MetalToolTipUI extends javax.swing.plaf.basic.BasicToolTipUI {
                    public static padSpaceBetweenStrings: int
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected isAcceleratorHidden(): boolean
                    public getAcceleratorString(): string
                    public static class: java.lang.Class<any>
                }
                class MetalTreeUI extends javax.swing.plaf.basic.BasicTreeUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    protected getHorizontalLegBuffer(): int
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected decodeLineStyle(arg0: java.lang.Object): void
                    protected isLocationInExpandControl(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintHorizontalSeparators(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paintVerticalPartOfLeg(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: javax.swing.tree.TreePath): void
                    protected paintHorizontalPartOfLeg(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: java.awt.Rectangle, arg4: javax.swing.tree.TreePath, arg5: int, arg6: boolean, arg7: boolean, arg8: boolean): void
                    public static class: java.lang.Class<any>
                }
                class MetalUtils {
                    public static class: java.lang.Class<any>
                }
                class OceanTheme extends javax.swing.plaf.metal.DefaultMetalTheme {
                    public constructor()
                    public addCustomEntriesToTable(arg0: javax.swing.UIDefaults): void
                    public getName(): string
                    protected getPrimary1(): javax.swing.plaf.ColorUIResource
                    protected getPrimary2(): javax.swing.plaf.ColorUIResource
                    protected getPrimary3(): javax.swing.plaf.ColorUIResource
                    protected getSecondary1(): javax.swing.plaf.ColorUIResource
                    protected getSecondary2(): javax.swing.plaf.ColorUIResource
                    protected getSecondary3(): javax.swing.plaf.ColorUIResource
                    protected getBlack(): javax.swing.plaf.ColorUIResource
                    public getDesktopColor(): javax.swing.plaf.ColorUIResource
                    public getInactiveControlTextColor(): javax.swing.plaf.ColorUIResource
                    public getControlTextColor(): javax.swing.plaf.ColorUIResource
                    public getMenuDisabledForeground(): javax.swing.plaf.ColorUIResource
                    public static class: java.lang.Class<any>
                }
            }
            namespace multi {
                class MultiButtonUI extends javax.swing.plaf.ButtonUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiColorChooserUI extends javax.swing.plaf.ColorChooserUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiComboBoxUI extends javax.swing.plaf.ComboBoxUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public isFocusTraversable(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): boolean
                    public setPopupVisible(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda, arg1: boolean): void
                    public isPopupVisible(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): boolean
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiDesktopIconUI extends javax.swing.plaf.DesktopIconUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiDesktopPaneUI extends javax.swing.plaf.DesktopPaneUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiFileChooserUI extends javax.swing.plaf.FileChooserUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public getAcceptAllFileFilter(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileFilter
                    public getFileView(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileView
                    public getApproveButtonText(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                    public getDialogTitle(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                    public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiInternalFrameUI extends javax.swing.plaf.InternalFrameUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiLabelUI extends javax.swing.plaf.LabelUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiListUI extends javax.swing.plaf.ListUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public locationToIndex(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: java.awt.Point): int
                    public indexToLocation(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: int): java.awt.Point
                    public getCellBounds(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: int, arg2: int): java.awt.Rectangle
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiLookAndFeel extends javax.swing.LookAndFeel {
                    public constructor()
                    public getName(): string
                    public getID(): string
                    public getDescription(): string
                    public isNativeLookAndFeel(): boolean
                    public isSupportedLookAndFeel(): boolean
                    public getDefaults(): javax.swing.UIDefaults
                    public static createUIs(arg0: javax.swing.plaf.ComponentUI, arg1: java.util.Vector, arg2: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected static uisToArray(arg0: java.util.Vector): javax.swing.plaf.ComponentUI[]
                    public static class: java.lang.Class<any>
                }
                class MultiMenuBarUI extends javax.swing.plaf.MenuBarUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiMenuItemUI extends javax.swing.plaf.MenuItemUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiOptionPaneUI extends javax.swing.plaf.OptionPaneUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public selectInitialValue(arg0: javax.swing.JOptionPane | javax.swing.JOptionPane$$Lambda): void
                    public containsCustomComponents(arg0: javax.swing.JOptionPane | javax.swing.JOptionPane$$Lambda): boolean
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiPanelUI extends javax.swing.plaf.PanelUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiPopupMenuUI extends javax.swing.plaf.PopupMenuUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public isPopupTrigger(arg0: java.awt.event.MouseEvent): boolean
                    public getPopup(arg0: javax.swing.JPopupMenu, arg1: int, arg2: int): javax.swing.Popup
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiProgressBarUI extends javax.swing.plaf.ProgressBarUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiRootPaneUI extends javax.swing.plaf.RootPaneUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiScrollBarUI extends javax.swing.plaf.ScrollBarUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiScrollPaneUI extends javax.swing.plaf.ScrollPaneUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiSeparatorUI extends javax.swing.plaf.SeparatorUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiSliderUI extends javax.swing.plaf.SliderUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiSpinnerUI extends javax.swing.plaf.SpinnerUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiSplitPaneUI extends javax.swing.plaf.SplitPaneUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public resetToPreferredSizes(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): void
                    public setDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: int): void
                    public getDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                    public getMinimumDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                    public getMaximumDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                    public finishedPaintingChildren(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: java.awt.Graphics): void
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiTabbedPaneUI extends javax.swing.plaf.TabbedPaneUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public tabForCoordinate(arg0: javax.swing.JTabbedPane, arg1: int, arg2: int): int
                    public getTabBounds(arg0: javax.swing.JTabbedPane, arg1: int): java.awt.Rectangle
                    public getTabRunCount(arg0: javax.swing.JTabbedPane): int
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiTableHeaderUI extends javax.swing.plaf.TableHeaderUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiTableUI extends javax.swing.plaf.TableUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiTextUI extends javax.swing.plaf.TextUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public getToolTipText(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point): string
                    public modelToView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): java.awt.Rectangle
                    public modelToView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias): java.awt.Rectangle
                    public viewToModel(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point): int
                    public viewToModel(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point, arg2: javax.swing.text.Position$Bias[]): int
                    public getNextVisualPositionFrom(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                    public damageRange(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int): void
                    public damageRange(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int, arg3: javax.swing.text.Position$Bias, arg4: javax.swing.text.Position$Bias): void
                    public getEditorKit(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.EditorKit
                    public getRootView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.View
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiToolBarUI extends javax.swing.plaf.ToolBarUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiToolTipUI extends javax.swing.plaf.ToolTipUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiTreeUI extends javax.swing.plaf.TreeUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public getPathBounds(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): java.awt.Rectangle
                    public getPathForRow(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: int): javax.swing.tree.TreePath
                    public getRowForPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): int
                    public getRowCount(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): int
                    public getClosestPathForLocation(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: int, arg2: int): javax.swing.tree.TreePath
                    public isEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): boolean
                    public stopEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): boolean
                    public cancelEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): void
                    public startEditingAtPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): void
                    public getEditingPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): javax.swing.tree.TreePath
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
                class MultiViewportUI extends javax.swing.plaf.ViewportUI {
                    protected uis: java.util.Vector
                    public constructor()
                    public getUIs(): javax.swing.plaf.ComponentUI[]
                    public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                    public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                    public static class: java.lang.Class<any>
                }
            }
            namespace nimbus {
                abstract class AbstractRegionPainter implements javax.swing.Painter<javax.swing.JComponent> {
                    protected constructor()
                    public paint(arg0: java.awt.Graphics2D, arg1: javax.swing.JComponent, arg2: int, arg3: int): void
                    protected getExtendedCacheKeys(arg0: javax.swing.JComponent): java.lang.Object[]
                    protected getPaintContext(): javax.swing.plaf.nimbus.AbstractRegionPainter$PaintContext
                    protected configureGraphics(arg0: java.awt.Graphics2D): void
                    protected doPaint(arg0: java.awt.Graphics2D, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: java.lang.Object[]): void
                    protected decodeX(arg0: float): float
                    protected decodeY(arg0: float): float
                    protected decodeAnchorX(arg0: float, arg1: float): float
                    protected decodeAnchorY(arg0: float, arg1: float): float
                    protected decodeColor(arg0: java.lang.String | string, arg1: float, arg2: float, arg3: float, arg4: int): java.awt.Color
                    protected decodeColor(arg0: java.awt.Color, arg1: java.awt.Color, arg2: float): java.awt.Color
                    protected decodeGradient(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float[], arg5: java.awt.Color[]): java.awt.LinearGradientPaint
                    protected decodeRadialGradient(arg0: float, arg1: float, arg2: float, arg3: float[], arg4: java.awt.Color[]): java.awt.RadialGradientPaint
                    protected getComponentColor(arg0: javax.swing.JComponent, arg1: java.lang.String | string, arg2: java.awt.Color, arg3: float, arg4: float, arg5: int): java.awt.Color
                    public paint(arg0: java.awt.Graphics2D, arg1: java.lang.Object, arg2: int, arg3: int): void
                    public static class: java.lang.Class<any>
                }
                class DerivedColor extends java.awt.Color {
                    public getUiDefaultParentName(): string
                    public getHueOffset(): float
                    public getSaturationOffset(): float
                    public getBrightnessOffset(): float
                    public getAlphaOffset(): int
                    public rederiveColor(): void
                    public getRGB(): int
                    public equals(arg0: java.lang.Object): boolean
                    public hashCode(): int
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class DropShadowEffect extends javax.swing.plaf.nimbus.ShadowEffect {
                    public static class: java.lang.Class<any>
                }
                abstract class Effect {
                    protected static getArrayCache(): javax.swing.plaf.nimbus.Effect$ArrayCache
                    public static class: java.lang.Class<any>
                }
                class EffectUtils {
                    public static getPixels(arg0: java.awt.image.BufferedImage, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[]): int[]
                    public static setPixels(arg0: java.awt.image.BufferedImage, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[]): void
                    public static createColorModelCompatibleImage(arg0: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                    public static createCompatibleTranslucentImage(arg0: int, arg1: int): java.awt.image.BufferedImage
                    public static class: java.lang.Class<any>
                }
                class ImageCache {
                    public constructor()
                    public constructor(arg0: int, arg1: int)
                    public flush(): void
                    public isImageCachable(arg0: int, arg1: int): boolean
                    public getImage(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, ...arg3: java.lang.Object[]): java.awt.Image
                    public setImage(arg0: java.awt.Image, arg1: java.awt.GraphicsConfiguration, arg2: int, arg3: int, ...arg4: java.lang.Object[]): boolean
                    public static class: java.lang.Class<any>
                }
                class ImageScalingHelper {
                    public static paint(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Image, arg6: java.awt.Insets, arg7: java.awt.Insets, arg8: javax.swing.plaf.nimbus.ImageScalingHelper$PaintType, arg9: int): void
                    public static class: java.lang.Class<any>
                }
                class InnerGlowEffect extends javax.swing.plaf.nimbus.InnerShadowEffect {
                    public static class: java.lang.Class<any>
                }
                class InnerShadowEffect extends javax.swing.plaf.nimbus.ShadowEffect {
                    public static class: java.lang.Class<any>
                }
                class LoweredBorder extends javax.swing.plaf.nimbus.AbstractRegionPainter implements javax.swing.border.Border {
                    protected getExtendedCacheKeys(arg0: javax.swing.JComponent): java.lang.Object[]
                    protected doPaint(arg0: java.awt.Graphics2D, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: java.lang.Object[]): void
                    protected getPaintContext(): javax.swing.plaf.nimbus.AbstractRegionPainter$PaintContext
                    public getBorderInsets(arg0: java.awt.Component): java.awt.Insets
                    public isBorderOpaque(): boolean
                    public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class NimbusIcon extends sun.swing.plaf.synth.SynthIcon {
                    public paintIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                    public getIconWidth(arg0: javax.swing.plaf.synth.SynthContext): int
                    public getIconHeight(arg0: javax.swing.plaf.synth.SynthContext): int
                    public static class: java.lang.Class<any>
                }
                class NimbusLookAndFeel extends javax.swing.plaf.synth.SynthLookAndFeel {
                    public constructor()
                    public initialize(): void
                    public uninitialize(): void
                    public getDefaults(): javax.swing.UIDefaults
                    public static getStyle(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region): javax.swing.plaf.nimbus.NimbusStyle
                    public getName(): string
                    public getID(): string
                    public getDescription(): string
                    public shouldUpdateStyleOnAncestorChanged(): boolean
                    protected shouldUpdateStyleOnEvent(arg0: java.beans.PropertyChangeEvent): boolean
                    public register(arg0: javax.swing.plaf.synth.Region, arg1: java.lang.String | string): void
                    public getDisabledIcon(arg0: javax.swing.JComponent, arg1: javax.swing.Icon): javax.swing.Icon
                    public getDerivedColor(arg0: java.lang.String | string, arg1: float, arg2: float, arg3: float, arg4: int, arg5: boolean): java.awt.Color
                    protected getDerivedColor(arg0: java.awt.Color, arg1: java.awt.Color, arg2: float, arg3: boolean): java.awt.Color
                    protected getDerivedColor(arg0: java.awt.Color, arg1: java.awt.Color, arg2: float): java.awt.Color
                    public static class: java.lang.Class<any>
                }
                class NimbusStyle extends javax.swing.plaf.synth.SynthStyle {
                    public static LARGE_KEY: string
                    public static SMALL_KEY: string
                    public static MINI_KEY: string
                    public static LARGE_SCALE: double
                    public static SMALL_SCALE: double
                    public static MINI_SCALE: double
                    public installDefaults(arg0: javax.swing.plaf.synth.SynthContext): void
                    public getInsets(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Insets): java.awt.Insets
                    protected getColorForState(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                    protected getFontForState(arg0: javax.swing.plaf.synth.SynthContext): java.awt.Font
                    public getPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthPainter
                    public isOpaque(arg0: javax.swing.plaf.synth.SynthContext): boolean
                    public get(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object): java.lang.Object
                    public getBackgroundPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.Painter
                    public getForegroundPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.Painter
                    public getBorderPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.Painter
                    public static class: java.lang.Class<any>
                }
                class OuterGlowEffect extends javax.swing.plaf.nimbus.DropShadowEffect {
                    public static class: java.lang.Class<any>
                }
                abstract class ShadowEffect extends javax.swing.plaf.nimbus.Effect {
                    protected color: java.awt.Color
                    protected opacity: float
                    protected angle: int
                    protected distance: int
                    protected spread: int
                    protected size: int
                    public static class: java.lang.Class<any>
                }
                abstract class State<T extends javax.swing.JComponent> {
                    protected constructor(arg0: java.lang.String | string)
                    public toString(): string
                    protected isInState(arg0: T): boolean
                    public static class: java.lang.Class<any>
                }
                class SynthPainterImpl extends javax.swing.plaf.synth.SynthPainter {
                    public paintArrowButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintArrowButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintArrowButtonForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintColorChooserBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintColorChooserBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintComboBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintComboBoxBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopIconBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopIconBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintEditorPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintEditorPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFileChooserBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFileChooserBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFormattedTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFormattedTextFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameTitlePaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameTitlePaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintLabelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintLabelBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintListBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintListBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintOptionPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintOptionPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPanelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPanelBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPasswordFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPasswordFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPopupMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPopupMenuBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintProgressBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintProgressBarForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintRadioButtonMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRootPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRootPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarThumbBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSeparatorBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSeparatorForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderThumbBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSpinnerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSpinnerBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneDividerForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneDragDivider(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                    public paintTabbedPaneTabBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                    public paintTabbedPaneContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableHeaderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableHeaderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToggleButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToggleButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarDragWindowBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarDragWindowBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolTipBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolTipBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellFocus(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintViewportBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintViewportBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class TableScrollPaneCorner extends javax.swing.JComponent implements javax.swing.plaf.UIResource {
                    protected paintComponent(arg0: java.awt.Graphics): void
                    public static class: java.lang.Class<any>
                }
                class ToolBarSeparatorPainter extends javax.swing.plaf.nimbus.AbstractRegionPainter {
                    protected getPaintContext(): javax.swing.plaf.nimbus.AbstractRegionPainter$PaintContext
                    protected doPaint(arg0: java.awt.Graphics2D, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: java.lang.Object[]): void
                    public static class: java.lang.Class<any>
                }
            }
            namespace synth {
                class ColorType {
                    public static FOREGROUND: javax.swing.plaf.synth.ColorType
                    public static BACKGROUND: javax.swing.plaf.synth.ColorType
                    public static TEXT_FOREGROUND: javax.swing.plaf.synth.ColorType
                    public static TEXT_BACKGROUND: javax.swing.plaf.synth.ColorType
                    public static FOCUS: javax.swing.plaf.synth.ColorType
                    public static MAX_COUNT: int
                    protected constructor(arg0: java.lang.String | string)
                    public getID(): int
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class DefaultSynthStyleFactory extends javax.swing.plaf.synth.SynthStyleFactory {
                    public static NAME: int
                    public static REGION: int
                    public addStyle(arg0: sun.swing.plaf.synth.DefaultSynthStyle, arg1: java.lang.String | string, arg2: int): void
                    public getStyle(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region): javax.swing.plaf.synth.SynthStyle
                    public static class: java.lang.Class<any>
                }
                class ImagePainter extends javax.swing.plaf.synth.SynthPainter {
                    public getTiles(): boolean
                    public getPaintsCenter(): boolean
                    public getCenter(): boolean
                    public getInsets(arg0: java.awt.Insets): java.awt.Insets
                    public getImage(): java.awt.Image
                    public paintArrowButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintArrowButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintArrowButtonForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintColorChooserBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintColorChooserBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintComboBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintComboBoxBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopIconBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopIconBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintEditorPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintEditorPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFileChooserBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFileChooserBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFormattedTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFormattedTextFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameTitlePaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameTitlePaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintLabelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintLabelBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintListBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintListBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintOptionPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintOptionPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPanelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPanelBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPasswordFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPasswordFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPopupMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPopupMenuBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintProgressBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintProgressBarForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintRadioButtonMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRootPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRootPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarThumbBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSeparatorBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSeparatorForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderThumbBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSpinnerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSpinnerBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneDividerForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneDragDivider(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                    public paintTabbedPaneTabBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                    public paintTabbedPaneContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableHeaderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableHeaderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToggleButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToggleButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarDragWindowBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarDragWindowBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolTipBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolTipBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellFocus(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintViewportBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintViewportBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class ParsedSynthStyle extends sun.swing.plaf.synth.DefaultSynthStyle {
                    public constructor()
                    public constructor(arg0: sun.swing.plaf.synth.DefaultSynthStyle)
                    public getPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthPainter
                    public setPainters(arg0: javax.swing.plaf.synth.ParsedSynthStyle$PainterInfo[]): void
                    public addTo(arg0: sun.swing.plaf.synth.DefaultSynthStyle): sun.swing.plaf.synth.DefaultSynthStyle
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class Region {
                    public static ARROW_BUTTON: javax.swing.plaf.synth.Region
                    public static BUTTON: javax.swing.plaf.synth.Region
                    public static CHECK_BOX: javax.swing.plaf.synth.Region
                    public static CHECK_BOX_MENU_ITEM: javax.swing.plaf.synth.Region
                    public static COLOR_CHOOSER: javax.swing.plaf.synth.Region
                    public static COMBO_BOX: javax.swing.plaf.synth.Region
                    public static DESKTOP_PANE: javax.swing.plaf.synth.Region
                    public static DESKTOP_ICON: javax.swing.plaf.synth.Region
                    public static EDITOR_PANE: javax.swing.plaf.synth.Region
                    public static FILE_CHOOSER: javax.swing.plaf.synth.Region
                    public static FORMATTED_TEXT_FIELD: javax.swing.plaf.synth.Region
                    public static INTERNAL_FRAME: javax.swing.plaf.synth.Region
                    public static INTERNAL_FRAME_TITLE_PANE: javax.swing.plaf.synth.Region
                    public static LABEL: javax.swing.plaf.synth.Region
                    public static LIST: javax.swing.plaf.synth.Region
                    public static MENU: javax.swing.plaf.synth.Region
                    public static MENU_BAR: javax.swing.plaf.synth.Region
                    public static MENU_ITEM: javax.swing.plaf.synth.Region
                    public static MENU_ITEM_ACCELERATOR: javax.swing.plaf.synth.Region
                    public static OPTION_PANE: javax.swing.plaf.synth.Region
                    public static PANEL: javax.swing.plaf.synth.Region
                    public static PASSWORD_FIELD: javax.swing.plaf.synth.Region
                    public static POPUP_MENU: javax.swing.plaf.synth.Region
                    public static POPUP_MENU_SEPARATOR: javax.swing.plaf.synth.Region
                    public static PROGRESS_BAR: javax.swing.plaf.synth.Region
                    public static RADIO_BUTTON: javax.swing.plaf.synth.Region
                    public static RADIO_BUTTON_MENU_ITEM: javax.swing.plaf.synth.Region
                    public static ROOT_PANE: javax.swing.plaf.synth.Region
                    public static SCROLL_BAR: javax.swing.plaf.synth.Region
                    public static SCROLL_BAR_TRACK: javax.swing.plaf.synth.Region
                    public static SCROLL_BAR_THUMB: javax.swing.plaf.synth.Region
                    public static SCROLL_PANE: javax.swing.plaf.synth.Region
                    public static SEPARATOR: javax.swing.plaf.synth.Region
                    public static SLIDER: javax.swing.plaf.synth.Region
                    public static SLIDER_TRACK: javax.swing.plaf.synth.Region
                    public static SLIDER_THUMB: javax.swing.plaf.synth.Region
                    public static SPINNER: javax.swing.plaf.synth.Region
                    public static SPLIT_PANE: javax.swing.plaf.synth.Region
                    public static SPLIT_PANE_DIVIDER: javax.swing.plaf.synth.Region
                    public static TABBED_PANE: javax.swing.plaf.synth.Region
                    public static TABBED_PANE_TAB: javax.swing.plaf.synth.Region
                    public static TABBED_PANE_TAB_AREA: javax.swing.plaf.synth.Region
                    public static TABBED_PANE_CONTENT: javax.swing.plaf.synth.Region
                    public static TABLE: javax.swing.plaf.synth.Region
                    public static TABLE_HEADER: javax.swing.plaf.synth.Region
                    public static TEXT_AREA: javax.swing.plaf.synth.Region
                    public static TEXT_FIELD: javax.swing.plaf.synth.Region
                    public static TEXT_PANE: javax.swing.plaf.synth.Region
                    public static TOGGLE_BUTTON: javax.swing.plaf.synth.Region
                    public static TOOL_BAR: javax.swing.plaf.synth.Region
                    public static TOOL_BAR_CONTENT: javax.swing.plaf.synth.Region
                    public static TOOL_BAR_DRAG_WINDOW: javax.swing.plaf.synth.Region
                    public static TOOL_TIP: javax.swing.plaf.synth.Region
                    public static TOOL_BAR_SEPARATOR: javax.swing.plaf.synth.Region
                    public static TREE: javax.swing.plaf.synth.Region
                    public static TREE_CELL: javax.swing.plaf.synth.Region
                    public static VIEWPORT: javax.swing.plaf.synth.Region
                    protected constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: boolean)
                    public isSubregion(): boolean
                    public getName(): string
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class SynthArrowButton extends javax.swing.JButton implements javax.swing.SwingConstants , javax.swing.plaf.UIResource {
                    public constructor(arg0: int)
                    public getUIClassID(): string
                    public updateUI(): void
                    public setDirection(arg0: int): void
                    public getDirection(): int
                    public setFocusable(arg0: boolean): void
                    public static class: java.lang.Class<any>
                }
                class SynthBorder extends javax.swing.border.AbstractBorder implements javax.swing.plaf.UIResource {
                    public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                    public isBorderOpaque(): boolean
                    public static class: java.lang.Class<any>
                }
                class SynthButtonUI extends javax.swing.plaf.basic.BasicButtonUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(arg0: javax.swing.AbstractButton): void
                    protected installListeners(arg0: javax.swing.AbstractButton): void
                    protected uninstallListeners(arg0: javax.swing.AbstractButton): void
                    protected uninstallDefaults(arg0: javax.swing.AbstractButton): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected getDefaultIcon(arg0: javax.swing.AbstractButton): javax.swing.Icon
                    protected getIcon(arg0: javax.swing.AbstractButton): javax.swing.Icon
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected getSizingIcon(arg0: javax.swing.AbstractButton): javax.swing.Icon
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthCheckBoxMenuItemUI extends javax.swing.plaf.synth.SynthMenuItemUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthCheckBoxUI extends javax.swing.plaf.synth.SynthRadioButtonUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthColorChooserUI extends javax.swing.plaf.basic.BasicColorChooserUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected createDefaultChoosers(): javax.swing.colorchooser.AbstractColorChooserPanel[]
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthComboBoxUI extends javax.swing.plaf.basic.BasicComboBoxUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected createPopup(): javax.swing.plaf.basic.ComboPopup
                    protected createRenderer(): javax.swing.ListCellRenderer
                    protected createEditor(): javax.swing.ComboBoxEditor
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected createArrowButton(): javax.swing.JButton
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCurrentValue(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: boolean): void
                    protected getDefaultSize(): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class SynthComboPopup extends javax.swing.plaf.basic.BasicComboPopup {
                    public constructor(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda)
                    protected configureList(): void
                    protected computePopupBounds(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.Rectangle
                    public static class: java.lang.Class<any>
                }
                interface SynthConstants {
                    ENABLED: int
                    MOUSE_OVER: int
                    PRESSED: int
                    DISABLED: int
                    FOCUSED: int
                    SELECTED: int
                    DEFAULT: int
                }
                class SynthContext {
                    public constructor(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region, arg2: javax.swing.plaf.synth.SynthStyle, arg3: int)
                    public getComponent(): javax.swing.JComponent
                    public getRegion(): javax.swing.plaf.synth.Region
                    public getStyle(): javax.swing.plaf.synth.SynthStyle
                    public getComponentState(): int
                    public static class: java.lang.Class<any>
                }
                class SynthDefaultLookup extends sun.swing.DefaultLookup {
                    public getDefault(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
                class SynthDesktopIconUI extends javax.swing.plaf.basic.BasicDesktopIconUI implements javax.swing.plaf.synth.SynthUI , java.beans.PropertyChangeListener {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installComponents(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthDesktopPaneUI extends javax.swing.plaf.basic.BasicDesktopPaneUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installListeners(): void
                    protected installDefaults(): void
                    protected uninstallListeners(): void
                    protected uninstallDefaults(): void
                    protected installDesktopManager(): void
                    protected uninstallDesktopManager(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthEditorPaneUI extends javax.swing.plaf.basic.BasicEditorPaneUI implements javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    protected paintBackground(arg0: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthFormattedTextFieldUI extends javax.swing.plaf.synth.SynthTextFieldUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthGraphicsUtils {
                    public constructor()
                    public drawLine(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object, arg2: java.awt.Graphics, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public drawLine(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object, arg2: java.awt.Graphics, arg3: int, arg4: int, arg5: int, arg6: int, arg7: java.lang.Object): void
                    public layoutText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.FontMetrics, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Rectangle, arg9: java.awt.Rectangle, arg10: java.awt.Rectangle, arg11: int): string
                    public computeStringWidth(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Font, arg2: java.awt.FontMetrics, arg3: java.lang.String | string): int
                    public getMinimumSize(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Font, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Font, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int): java.awt.Dimension
                    public getMaximumCharHeight(arg0: javax.swing.plaf.synth.SynthContext): int
                    public getPreferredSize(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Font, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int): java.awt.Dimension
                    public paintText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: java.awt.Rectangle, arg4: int): void
                    public paintText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: int): void
                    public paintText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthInternalFrameTitlePane extends javax.swing.plaf.basic.BasicInternalFrameTitlePane implements javax.swing.plaf.synth.SynthUI , java.beans.PropertyChangeListener {
                    protected systemPopupMenu: javax.swing.JPopupMenu
                    protected menuButton: javax.swing.JButton
                    public constructor(arg0: javax.swing.JInternalFrame)
                    public getUIClassID(): string
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public getContext(arg0: javax.swing.JComponent, arg1: int): javax.swing.plaf.synth.SynthContext
                    protected addSubComponents(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected assembleSystemMenu(): void
                    protected addSystemMenuItems(arg0: javax.swing.JPopupMenu): void
                    protected showSystemMenu(): void
                    public paintComponent(arg0: java.awt.Graphics): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected createLayout(): java.awt.LayoutManager
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthInternalFrameUI extends javax.swing.plaf.basic.BasicInternalFrameUI implements javax.swing.plaf.synth.SynthUI , java.beans.PropertyChangeListener {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected constructor(arg0: javax.swing.JInternalFrame)
                    public installDefaults(): void
                    protected installListeners(): void
                    protected uninstallComponents(): void
                    protected uninstallListeners(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected createNorthPane(arg0: javax.swing.JInternalFrame): javax.swing.JComponent
                    protected createComponentListener(): java.awt.event.ComponentListener
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthLabelUI extends javax.swing.plaf.basic.BasicLabelUI implements javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JLabel | javax.swing.JLabel$$Lambda): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthListUI extends javax.swing.plaf.basic.BasicListUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected installListeners(): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public static class: java.lang.Class<any>
                }
                class SynthLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel {
                    public static setStyleFactory(arg0: javax.swing.plaf.synth.SynthStyleFactory): void
                    public static getStyleFactory(): javax.swing.plaf.synth.SynthStyleFactory
                    public static getStyle(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region): javax.swing.plaf.synth.SynthStyle
                    public static updateStyles(arg0: java.awt.Component): void
                    public static getRegion(arg0: javax.swing.JComponent): javax.swing.plaf.synth.Region
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor()
                    public load(arg0: java.io.InputStream, arg1: java.lang.Class<any>): void
                    public load(arg0: java.net.URL): void
                    public initialize(): void
                    public uninitialize(): void
                    public getDefaults(): javax.swing.UIDefaults
                    public isSupportedLookAndFeel(): boolean
                    public isNativeLookAndFeel(): boolean
                    public getDescription(): string
                    public getName(): string
                    public getID(): string
                    public shouldUpdateStyleOnAncestorChanged(): boolean
                    protected shouldUpdateStyleOnEvent(arg0: java.beans.PropertyChangeEvent): boolean
                    public static class: java.lang.Class<any>
                }
                class SynthMenuBarUI extends javax.swing.plaf.basic.BasicMenuBarUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthMenuItemLayoutHelper extends sun.swing.MenuItemLayoutHelper {
                    public static MAX_ACC_OR_ARROW_WIDTH: sun.swing.StringUIClientPropertyKey
                    public static LTR_ALIGNMENT_1: sun.swing.MenuItemLayoutHelper$ColumnAlignment
                    public static LTR_ALIGNMENT_2: sun.swing.MenuItemLayoutHelper$ColumnAlignment
                    public static RTL_ALIGNMENT_1: sun.swing.MenuItemLayoutHelper$ColumnAlignment
                    public static RTL_ALIGNMENT_2: sun.swing.MenuItemLayoutHelper$ColumnAlignment
                    public constructor(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.SynthContext, arg2: javax.swing.JMenuItem, arg3: javax.swing.Icon, arg4: javax.swing.Icon, arg5: java.awt.Rectangle, arg6: int, arg7: java.lang.String | string, arg8: boolean, arg9: boolean, arg10: java.lang.String | string)
                    protected calcWidthsAndHeights(): void
                    protected calcMaxWidths(): void
                    public getContext(): javax.swing.plaf.synth.SynthContext
                    public getAccContext(): javax.swing.plaf.synth.SynthContext
                    public getStyle(): javax.swing.plaf.synth.SynthStyle
                    public getAccStyle(): javax.swing.plaf.synth.SynthStyle
                    public getGraphicsUtils(): javax.swing.plaf.synth.SynthGraphicsUtils
                    public getAccGraphicsUtils(): javax.swing.plaf.synth.SynthGraphicsUtils
                    public alignAcceleratorText(): boolean
                    public getMaxAccOrArrowWidth(): int
                    protected prepareForLayout(arg0: sun.swing.MenuItemLayoutHelper$LayoutResult): void
                    public getLTRColumnAlignment(): sun.swing.MenuItemLayoutHelper$ColumnAlignment
                    public getRTLColumnAlignment(): sun.swing.MenuItemLayoutHelper$ColumnAlignment
                    protected layoutIconAndTextInLabelRect(arg0: sun.swing.MenuItemLayoutHelper$LayoutResult): void
                    public static class: java.lang.Class<any>
                }
                class SynthMenuItemUI extends javax.swing.plaf.basic.BasicMenuItemUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected getPreferredMenuItemSize(arg0: javax.swing.JComponent, arg1: javax.swing.Icon, arg2: javax.swing.Icon, arg3: int): java.awt.Dimension
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthMenuLayout extends javax.swing.plaf.basic.DefaultMenuLayout {
                    public constructor(arg0: java.awt.Container, arg1: int)
                    public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class SynthMenuUI extends javax.swing.plaf.basic.BasicMenuUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected getPreferredMenuItemSize(arg0: javax.swing.JComponent, arg1: javax.swing.Icon, arg2: javax.swing.Icon, arg3: int): java.awt.Dimension
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthOptionPaneUI extends javax.swing.plaf.basic.BasicOptionPaneUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    protected installComponents(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected getSizeButtonsToSameWidth(): boolean
                    protected createMessageArea(): java.awt.Container
                    protected createSeparator(): java.awt.Container
                    public static class: java.lang.Class<any>
                }
                abstract class SynthPainter {
                    public constructor()
                    public paintArrowButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintArrowButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintArrowButtonForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintCheckBoxBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintColorChooserBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintColorChooserBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintComboBoxBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintComboBoxBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopIconBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopIconBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintDesktopPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintEditorPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintEditorPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFileChooserBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFileChooserBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFormattedTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintFormattedTextFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameTitlePaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameTitlePaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintInternalFrameBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintLabelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintLabelBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintListBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintListBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintMenuBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintOptionPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintOptionPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPanelBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPanelBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPasswordFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPasswordFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPopupMenuBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintPopupMenuBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintProgressBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintProgressBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintProgressBarForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintRadioButtonMenuItemBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonMenuItemBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRadioButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRootPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintRootPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarThumbBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollBarTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollBarTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintScrollPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintScrollPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSeparatorBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSeparatorBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSeparatorForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderThumbBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderThumbBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderTrackBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSliderTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSliderTrackBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSpinnerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSpinnerBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneDividerBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneDividerForeground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneDragDivider(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintSplitPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintSplitPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneTabAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                    public paintTabbedPaneTabBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintTabbedPaneTabBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                    public paintTabbedPaneContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTabbedPaneContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableHeaderBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableHeaderBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTableBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextAreaBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextAreaBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextPaneBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextPaneBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextFieldBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTextFieldBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToggleButtonBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToggleButtonBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarContentBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarContentBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarDragWindowBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolBarDragWindowBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolBarDragWindowBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                    public paintToolTipBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintToolTipBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintTreeCellFocus(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintViewportBackground(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paintViewportBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthPanelUI extends javax.swing.plaf.basic.BasicPanelUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installListeners(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
                    protected installDefaults(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthParser extends org.xml.sax.helpers.DefaultHandler {
                    public parse(arg0: java.io.InputStream, arg1: javax.swing.plaf.synth.DefaultSynthStyleFactory, arg2: java.net.URL, arg3: java.lang.Class<any>, arg4: java.util.Map<java.lang.String, java.lang.Object>): void
                    public resolveEntity(arg0: java.lang.String | string, arg1: java.lang.String | string): org.xml.sax.InputSource
                    public notationDecl(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): void
                    public unparsedEntityDecl(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String | string): void
                    public setDocumentLocator(arg0: org.xml.sax.Locator): void
                    public startDocument(): void
                    public endDocument(): void
                    public startElement(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: org.xml.sax.Attributes): void
                    public endElement(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): void
                    public characters(arg0: char[], arg1: int, arg2: int): void
                    public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                    public processingInstruction(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                    public warning(arg0: org.xml.sax.SAXParseException): void
                    public error(arg0: org.xml.sax.SAXParseException): void
                    public fatalError(arg0: org.xml.sax.SAXParseException): void
                    public static class: java.lang.Class<any>
                }
                class SynthPasswordFieldUI extends javax.swing.plaf.synth.SynthTextFieldUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public create(arg0: javax.swing.text.Element): javax.swing.text.View
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected installKeyboardActions(): void
                    public static class: java.lang.Class<any>
                }
                class SynthPopupMenuUI extends javax.swing.plaf.basic.BasicPopupMenuUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthProgressBarUI extends javax.swing.plaf.basic.BasicProgressBarUI implements javax.swing.plaf.synth.SynthUI , java.beans.PropertyChangeListener {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    protected getBox(arg0: java.awt.Rectangle): java.awt.Rectangle
                    protected setAnimationIndex(arg0: int): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    protected paintText(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.lang.String | string): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public static class: java.lang.Class<any>
                }
                class SynthRadioButtonMenuItemUI extends javax.swing.plaf.synth.SynthMenuItemUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthRadioButtonUI extends javax.swing.plaf.synth.SynthToggleButtonUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    protected getSizingIcon(arg0: javax.swing.AbstractButton): javax.swing.Icon
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthRootPaneUI extends javax.swing.plaf.basic.BasicRootPaneUI implements javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthScrollBarUI extends javax.swing.plaf.basic.BasicScrollBarUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected configureScrollBarColors(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public getSupportsAbsolutePositioning(): boolean
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected paintTrack(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.awt.Rectangle): void
                    protected paintThumb(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.awt.Rectangle): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected getMinimumThumbSize(): java.awt.Dimension
                    protected createDecreaseButton(arg0: int): javax.swing.JButton
                    protected createIncreaseButton(arg0: int): javax.swing.JButton
                    protected setThumbRollover(arg0: boolean): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthScrollPaneUI extends javax.swing.plaf.basic.BasicScrollPaneUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected installDefaults(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected installListeners(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JComponent): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthSeparatorUI extends javax.swing.plaf.SeparatorUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    public installDefaults(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public uninstallDefaults(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public installListeners(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public uninstallListeners(arg0: javax.swing.JSeparator | javax.swing.JSeparator$$Lambda): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthSliderUI extends javax.swing.plaf.basic.BasicSliderUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected constructor(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda)
                    protected installDefaults(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected installListeners(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): void
                    protected createTrackListener(arg0: javax.swing.JSlider | javax.swing.JSlider$$Lambda): javax.swing.plaf.basic.BasicSliderUI$TrackListener
                    public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    protected calculateGeometry(): void
                    protected layout(): void
                    protected calculateThumbLocation(): void
                    public setThumbLocation(arg0: int, arg1: int): void
                    protected xPositionForValue(arg0: int): int
                    protected yPositionForValue(arg0: int, arg1: int, arg2: int): int
                    public valueForYPosition(arg0: int): int
                    public valueForXPosition(arg0: int): int
                    protected getThumbSize(): java.awt.Dimension
                    protected recalculateIfInsetsChanged(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected paintThumb(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.awt.Rectangle): void
                    protected paintTrack(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.awt.Rectangle): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthSpinnerUI extends javax.swing.plaf.basic.BasicSpinnerUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    protected createLayout(): java.awt.LayoutManager
                    protected createPreviousButton(): java.awt.Component
                    protected createNextButton(): java.awt.Component
                    protected createEditor(): javax.swing.JComponent
                    protected replaceEditor(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthSplitPaneDivider extends javax.swing.plaf.basic.BasicSplitPaneDivider {
                    public constructor(arg0: javax.swing.plaf.basic.BasicSplitPaneUI)
                    protected setMouseOver(arg0: boolean): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public paint(arg0: java.awt.Graphics): void
                    protected createLeftOneTouchButton(): javax.swing.JButton
                    protected createRightOneTouchButton(): javax.swing.JButton
                    public static class: java.lang.Class<any>
                }
                class SynthSplitPaneUI extends javax.swing.plaf.basic.BasicSplitPaneUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public createDefaultDivider(): javax.swing.plaf.basic.BasicSplitPaneDivider
                    protected createDefaultNonContinuousLayoutDivider(): java.awt.Component
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public finishedPaintingChildren(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: java.awt.Graphics): void
                    public static class: java.lang.Class<any>
                }
                abstract class SynthStyle {
                    public constructor()
                    public getGraphicsUtils(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthGraphicsUtils
                    public getColor(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                    protected getColorForState(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                    public getFont(arg0: javax.swing.plaf.synth.SynthContext): java.awt.Font
                    protected getFontForState(arg0: javax.swing.plaf.synth.SynthContext): java.awt.Font
                    public getInsets(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Insets): java.awt.Insets
                    public getPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthPainter
                    public isOpaque(arg0: javax.swing.plaf.synth.SynthContext): boolean
                    public get(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object): java.lang.Object
                    public installDefaults(arg0: javax.swing.plaf.synth.SynthContext): void
                    public uninstallDefaults(arg0: javax.swing.plaf.synth.SynthContext): void
                    public getInt(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object, arg2: int): int
                    public getBoolean(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object, arg2: boolean): boolean
                    public getIcon(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object): javax.swing.Icon
                    public getString(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object, arg2: java.lang.String | string): string
                    public static class: java.lang.Class<any>
                }
                abstract class SynthStyleFactory {
                    public constructor()
                    public getStyle(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region): javax.swing.plaf.synth.SynthStyle
                    public static class: java.lang.Class<any>
                }
                class SynthTabbedPaneUI extends javax.swing.plaf.basic.BasicTabbedPaneUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected createScrollButton(arg0: int): javax.swing.JButton
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected createMouseListener(): java.awt.event.MouseListener
                    protected getTabLabelShiftX(arg0: int, arg1: int, arg2: boolean): int
                    protected getTabLabelShiftY(arg0: int, arg1: int, arg2: boolean): int
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected getBaseline(arg0: int): int
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    protected paintTabArea(arg0: java.awt.Graphics, arg1: int, arg2: int): void
                    protected setRolloverTab(arg0: int): void
                    protected calculateMaxTabHeight(arg0: int): int
                    protected calculateTabWidth(arg0: int, arg1: int, arg2: java.awt.FontMetrics): int
                    protected calculateMaxTabWidth(arg0: int): int
                    protected getTabInsets(arg0: int, arg1: int): java.awt.Insets
                    protected getFontMetrics(): java.awt.FontMetrics
                    protected createLayoutManager(): java.awt.LayoutManager
                    public static class: java.lang.Class<any>
                }
                class SynthTableHeaderUI extends javax.swing.plaf.basic.BasicTableHeaderUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected rolloverColumnUpdated(arg0: int, arg1: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthTableUI extends javax.swing.plaf.basic.BasicTableUI implements javax.swing.plaf.synth.SynthUI , java.beans.PropertyChangeListener {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthTextAreaUI extends javax.swing.plaf.basic.BasicTextAreaUI implements javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    protected paintBackground(arg0: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthTextFieldUI extends javax.swing.plaf.basic.BasicTextFieldUI implements javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected paintBackground(arg0: java.awt.Graphics): void
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected installDefaults(): void
                    protected uninstallDefaults(): void
                    public static class: java.lang.Class<any>
                }
                class SynthTextPaneUI extends javax.swing.plaf.synth.SynthEditorPaneUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public installUI(arg0: javax.swing.JComponent): void
                    protected propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthToggleButtonUI extends javax.swing.plaf.synth.SynthButtonUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected getPropertyPrefix(): string
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class SynthToolBarUI extends javax.swing.plaf.basic.BasicToolBarUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(): void
                    protected installListeners(): void
                    protected uninstallListeners(): void
                    protected uninstallDefaults(): void
                    protected installComponents(): void
                    protected uninstallComponents(): void
                    protected createLayout(): java.awt.LayoutManager
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    protected setBorderToNonRollover(arg0: java.awt.Component): void
                    protected setBorderToRollover(arg0: java.awt.Component): void
                    protected setBorderToNormal(arg0: java.awt.Component): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    protected paintContent(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: java.awt.Rectangle): void
                    protected paintDragWindow(arg0: java.awt.Graphics): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthToolTipUI extends javax.swing.plaf.basic.BasicToolTipUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    protected installDefaults(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(arg0: javax.swing.JComponent): void
                    protected installListeners(arg0: javax.swing.JComponent): void
                    protected uninstallListeners(arg0: javax.swing.JComponent): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
                class SynthTreeUI extends javax.swing.plaf.basic.BasicTreeUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public getExpandedIcon(): javax.swing.Icon
                    protected installDefaults(): void
                    protected installListeners(): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected createDefaultCellEditor(): javax.swing.tree.TreeCellEditor
                    protected createDefaultCellRenderer(): javax.swing.tree.TreeCellRenderer
                    protected uninstallDefaults(): void
                    protected uninstallListeners(): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    protected paintHorizontalPartOfLeg(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: java.awt.Rectangle, arg4: javax.swing.tree.TreePath, arg5: int, arg6: boolean, arg7: boolean, arg8: boolean): void
                    protected paintHorizontalLine(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: int): void
                    protected paintVerticalPartOfLeg(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: javax.swing.tree.TreePath): void
                    protected paintVerticalLine(arg0: java.awt.Graphics, arg1: javax.swing.JComponent, arg2: int, arg3: int, arg4: int): void
                    protected paintExpandControl(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: java.awt.Insets, arg3: java.awt.Rectangle, arg4: javax.swing.tree.TreePath, arg5: int, arg6: boolean, arg7: boolean, arg8: boolean): void
                    protected drawCentered(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: javax.swing.Icon, arg3: int, arg4: int): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    protected paintDropLine(arg0: java.awt.Graphics): void
                    protected getRowX(arg0: int, arg1: int): int
                    public static class: java.lang.Class<any>
                }
                interface SynthUI extends javax.swing.plaf.synth.SynthConstants {
                    getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                }
                class SynthViewportUI extends javax.swing.plaf.ViewportUI implements java.beans.PropertyChangeListener , javax.swing.plaf.synth.SynthUI {
                    public constructor()
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public installUI(arg0: javax.swing.JComponent): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installDefaults(arg0: javax.swing.JComponent): void
                    protected installListeners(arg0: javax.swing.JComponent): void
                    protected uninstallListeners(arg0: javax.swing.JComponent): void
                    protected uninstallDefaults(arg0: javax.swing.JComponent): void
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                    public static class: java.lang.Class<any>
                }
            }
            class ActionMapUIResource extends javax.swing.ActionMap implements javax.swing.plaf.UIResource {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class BorderUIResource implements javax.swing.border.Border , javax.swing.plaf.UIResource , java.io.Serializable {
                public static getEtchedBorderUIResource(): javax.swing.border.Border
                public static getLoweredBevelBorderUIResource(): javax.swing.border.Border
                public static getRaisedBevelBorderUIResource(): javax.swing.border.Border
                public static getBlackLineBorderUIResource(): javax.swing.border.Border
                public constructor(arg0: javax.swing.border.Border)
                public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                public getBorderInsets(arg0: java.awt.Component): java.awt.Insets
                public isBorderOpaque(): boolean
                public static class: java.lang.Class<any>
            }
            abstract class ButtonUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class ColorChooserUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class ColorUIResource extends java.awt.Color implements javax.swing.plaf.UIResource {
                public constructor(arg0: int, arg1: int, arg2: int)
                public constructor(arg0: int)
                public constructor(arg0: float, arg1: float, arg2: float)
                public constructor(arg0: java.awt.Color)
                public static class: java.lang.Class<any>
            }
            abstract class ComboBoxUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public setPopupVisible(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda, arg1: boolean): void
                public isPopupVisible(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): boolean
                public isFocusTraversable(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda): boolean
                public static class: java.lang.Class<any>
            }
            class ComponentInputMapUIResource extends javax.swing.ComponentInputMap implements javax.swing.plaf.UIResource {
                public constructor(arg0: javax.swing.JComponent)
                public static class: java.lang.Class<any>
            }
            abstract class ComponentUI {
                public constructor()
                public installUI(arg0: javax.swing.JComponent): void
                public uninstallUI(arg0: javax.swing.JComponent): void
                public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                public contains(arg0: javax.swing.JComponent, arg1: int, arg2: int): boolean
                public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                public getAccessibleChildrenCount(arg0: javax.swing.JComponent): int
                public getAccessibleChild(arg0: javax.swing.JComponent, arg1: int): javax.accessibility.Accessible
                public static class: java.lang.Class<any>
            }
            abstract class DesktopIconUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class DesktopPaneUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class DimensionUIResource extends java.awt.Dimension implements javax.swing.plaf.UIResource {
                public constructor(arg0: int, arg1: int)
                public static class: java.lang.Class<any>
            }
            abstract class FileChooserUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public getAcceptAllFileFilter(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileFilter
                public getFileView(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.filechooser.FileView
                public getApproveButtonText(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                public getDialogTitle(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): string
                public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
                public getDefaultButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                public static class: java.lang.Class<any>
            }
            class FontUIResource extends java.awt.Font implements javax.swing.plaf.UIResource {
                public constructor(arg0: java.lang.String | string, arg1: int, arg2: int)
                public constructor(arg0: java.awt.Font)
                public static class: java.lang.Class<any>
            }
            class IconUIResource implements javax.swing.Icon , javax.swing.plaf.UIResource , java.io.Serializable {
                public constructor(arg0: javax.swing.Icon)
                public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                public getIconWidth(): int
                public getIconHeight(): int
                public static class: java.lang.Class<any>
            }
            class InputMapUIResource extends javax.swing.InputMap implements javax.swing.plaf.UIResource {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class InsetsUIResource extends java.awt.Insets implements javax.swing.plaf.UIResource {
                public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public static class: java.lang.Class<any>
            }
            abstract class InternalFrameUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class LabelUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class LayerUI<V extends java.awt.Component> extends javax.swing.plaf.ComponentUI implements java.io.Serializable {
                public constructor()
                public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                public eventDispatched(arg0: java.awt.AWTEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processComponentEvent(arg0: java.awt.event.ComponentEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processFocusEvent(arg0: java.awt.event.FocusEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processKeyEvent(arg0: java.awt.event.KeyEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processMouseEvent(arg0: java.awt.event.MouseEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processMouseMotionEvent(arg0: java.awt.event.MouseEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processMouseWheelEvent(arg0: java.awt.event.MouseWheelEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processInputMethodEvent(arg0: java.awt.event.InputMethodEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processHierarchyEvent(arg0: java.awt.event.HierarchyEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                protected processHierarchyBoundsEvent(arg0: java.awt.event.HierarchyEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                public updateUI(arg0: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                public installUI(arg0: javax.swing.JComponent): void
                public uninstallUI(arg0: javax.swing.JComponent): void
                public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
                public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
                public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
                public getPropertyChangeListeners(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
                protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
                public applyPropertyChange(arg0: java.beans.PropertyChangeEvent, arg1: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                public getBaseline(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
                public getBaselineResizeBehavior(arg0: javax.swing.JComponent): java.awt.Component$BaselineResizeBehavior
                public doLayout(arg0: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                public getPreferredSize(arg0: javax.swing.JComponent): java.awt.Dimension
                public getMinimumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                public getMaximumSize(arg0: javax.swing.JComponent): java.awt.Dimension
                public paintImmediately(arg0: int, arg1: int, arg2: int, arg3: int, arg4: javax.swing.JLayer<V> | javax.swing.JLayer$$Lambda<V>): void
                public static class: java.lang.Class<any>
            }
            abstract class ListUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public locationToIndex(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: java.awt.Point): int
                public indexToLocation(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: int): java.awt.Point
                public getCellBounds(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: int, arg2: int): java.awt.Rectangle
                public static class: java.lang.Class<any>
            }
            abstract class MenuBarUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class MenuItemUI extends javax.swing.plaf.ButtonUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class OptionPaneUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public selectInitialValue(arg0: javax.swing.JOptionPane | javax.swing.JOptionPane$$Lambda): void
                public containsCustomComponents(arg0: javax.swing.JOptionPane | javax.swing.JOptionPane$$Lambda): boolean
                public static class: java.lang.Class<any>
            }
            abstract class PanelUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class PopupMenuUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public isPopupTrigger(arg0: java.awt.event.MouseEvent): boolean
                public getPopup(arg0: javax.swing.JPopupMenu, arg1: int, arg2: int): javax.swing.Popup
                public static class: java.lang.Class<any>
            }
            abstract class ProgressBarUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class RootPaneUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class ScrollBarUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class ScrollPaneUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class SeparatorUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class SliderUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class SpinnerUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class SplitPaneUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public resetToPreferredSizes(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): void
                public setDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: int): void
                public getDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                public getMinimumDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                public getMaximumDividerLocation(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda): int
                public finishedPaintingChildren(arg0: javax.swing.JSplitPane | javax.swing.JSplitPane$$Lambda, arg1: java.awt.Graphics): void
                public static class: java.lang.Class<any>
            }
            abstract class TabbedPaneUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public tabForCoordinate(arg0: javax.swing.JTabbedPane, arg1: int, arg2: int): int
                public getTabBounds(arg0: javax.swing.JTabbedPane, arg1: int): java.awt.Rectangle
                public getTabRunCount(arg0: javax.swing.JTabbedPane): int
                public static class: java.lang.Class<any>
            }
            abstract class TableHeaderUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class TableUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class TextUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public modelToView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): java.awt.Rectangle
                public modelToView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias): java.awt.Rectangle
                public viewToModel(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point): int
                public viewToModel(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point, arg2: javax.swing.text.Position$Bias[]): int
                public getNextVisualPositionFrom(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                public damageRange(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int): void
                public damageRange(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int, arg3: javax.swing.text.Position$Bias, arg4: javax.swing.text.Position$Bias): void
                public getEditorKit(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.EditorKit
                public getRootView(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): javax.swing.text.View
                public getToolTipText(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.Point): string
                public static class: java.lang.Class<any>
            }
            abstract class ToolBarUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class ToolTipUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            abstract class TreeUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public getPathBounds(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): java.awt.Rectangle
                public getPathForRow(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: int): javax.swing.tree.TreePath
                public getRowForPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): int
                public getRowCount(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): int
                public getClosestPathForLocation(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: int, arg2: int): javax.swing.tree.TreePath
                public isEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): boolean
                public stopEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): boolean
                public cancelEditing(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): void
                public startEditingAtPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.TreePath): void
                public getEditingPath(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): javax.swing.tree.TreePath
                public static class: java.lang.Class<any>
            }
            interface UIResource {
            }
            abstract class ViewportUI extends javax.swing.plaf.ComponentUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
        }
        namespace table {
            abstract class AbstractTableModel implements javax.swing.table.TableModel , java.io.Serializable {
                protected listenerList: javax.swing.event.EventListenerList
                public constructor()
                public getColumnName(arg0: int): string
                public findColumn(arg0: java.lang.String | string): int
                public getColumnClass(arg0: int): java.lang.Class<any>
                public isCellEditable(arg0: int, arg1: int): boolean
                public setValueAt(arg0: java.lang.Object, arg1: int, arg2: int): void
                public addTableModelListener(arg0: javax.swing.event.TableModelListener): void
                public removeTableModelListener(arg0: javax.swing.event.TableModelListener): void
                public getTableModelListeners(): javax.swing.event.TableModelListener[]
                public fireTableDataChanged(): void
                public fireTableStructureChanged(): void
                public fireTableRowsInserted(arg0: int, arg1: int): void
                public fireTableRowsUpdated(arg0: int, arg1: int): void
                public fireTableRowsDeleted(arg0: int, arg1: int): void
                public fireTableCellUpdated(arg0: int, arg1: int): void
                public fireTableChanged(arg0: javax.swing.event.TableModelEvent): void
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public static class: java.lang.Class<any>
            }
            class DefaultTableCellRenderer extends javax.swing.JLabel implements javax.swing.table.TableCellRenderer , java.io.Serializable {
                protected static noFocusBorder: javax.swing.border.Border
                public constructor()
                public setForeground(arg0: java.awt.Color): void
                public setBackground(arg0: java.awt.Color): void
                public updateUI(): void
                public getTableCellRendererComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
                public isOpaque(): boolean
                public invalidate(): void
                public validate(): void
                public revalidate(): void
                public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
                public repaint(arg0: java.awt.Rectangle): void
                public repaint(): void
                protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
                protected setValue(arg0: java.lang.Object): void
                public static class: java.lang.Class<any>
            }
            class DefaultTableColumnModel implements javax.swing.table.TableColumnModel , java.beans.PropertyChangeListener , javax.swing.event.ListSelectionListener , java.io.Serializable {
                protected tableColumns: java.util.Vector<javax.swing.table.TableColumn>
                protected selectionModel: javax.swing.ListSelectionModel
                protected columnMargin: int
                protected listenerList: javax.swing.event.EventListenerList
                protected changeEvent: javax.swing.event.ChangeEvent
                protected columnSelectionAllowed: boolean
                protected totalColumnWidth: int
                public constructor()
                public addColumn(arg0: javax.swing.table.TableColumn): void
                public removeColumn(arg0: javax.swing.table.TableColumn): void
                public moveColumn(arg0: int, arg1: int): void
                public setColumnMargin(arg0: int): void
                public getColumnCount(): int
                public getColumns(): java.util.Enumeration<javax.swing.table.TableColumn>
                public getColumnIndex(arg0: java.lang.Object): int
                public getColumn(arg0: int): javax.swing.table.TableColumn
                public getColumnMargin(): int
                public getColumnIndexAtX(arg0: int): int
                public getTotalColumnWidth(): int
                public setSelectionModel(arg0: javax.swing.ListSelectionModel): void
                public getSelectionModel(): javax.swing.ListSelectionModel
                public setColumnSelectionAllowed(arg0: boolean): void
                public getColumnSelectionAllowed(): boolean
                public getSelectedColumns(): int[]
                public getSelectedColumnCount(): int
                public addColumnModelListener(arg0: javax.swing.event.TableColumnModelListener): void
                public removeColumnModelListener(arg0: javax.swing.event.TableColumnModelListener): void
                public getColumnModelListeners(): javax.swing.event.TableColumnModelListener[]
                protected fireColumnAdded(arg0: javax.swing.event.TableColumnModelEvent): void
                protected fireColumnRemoved(arg0: javax.swing.event.TableColumnModelEvent): void
                protected fireColumnMoved(arg0: javax.swing.event.TableColumnModelEvent): void
                protected fireColumnSelectionChanged(arg0: javax.swing.event.ListSelectionEvent): void
                protected fireColumnMarginChanged(): void
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public propertyChange<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeEvent): void
                public valueChanged<T extends java.util.EventListener>(arg0: javax.swing.event.ListSelectionEvent): void
                protected createSelectionModel<T extends java.util.EventListener>(): javax.swing.ListSelectionModel
                protected recalcWidthCache<T extends java.util.EventListener>(): void
                public static class: java.lang.Class<any>
            }
            class DefaultTableModel extends javax.swing.table.AbstractTableModel implements java.io.Serializable {
                protected dataVector: java.util.Vector
                protected columnIdentifiers: java.util.Vector
                public constructor()
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: java.util.Vector, arg1: int)
                public constructor(arg0: java.lang.Object[], arg1: int)
                public constructor(arg0: java.util.Vector, arg1: java.util.Vector)
                public constructor(arg0: java.lang.Object[][], arg1: java.lang.Object[])
                public getDataVector(): java.util.Vector
                public setDataVector(arg0: java.util.Vector, arg1: java.util.Vector): void
                public setDataVector(arg0: java.lang.Object[][], arg1: java.lang.Object[]): void
                public newDataAvailable(arg0: javax.swing.event.TableModelEvent): void
                public newRowsAdded(arg0: javax.swing.event.TableModelEvent): void
                public rowsRemoved(arg0: javax.swing.event.TableModelEvent): void
                public setNumRows(arg0: int): void
                public setRowCount(arg0: int): void
                public addRow(arg0: java.util.Vector): void
                public addRow(arg0: java.lang.Object[]): void
                public insertRow(arg0: int, arg1: java.util.Vector): void
                public insertRow(arg0: int, arg1: java.lang.Object[]): void
                public moveRow(arg0: int, arg1: int, arg2: int): void
                public removeRow(arg0: int): void
                public setColumnIdentifiers(arg0: java.util.Vector): void
                public setColumnIdentifiers(arg0: java.lang.Object[]): void
                public setColumnCount(arg0: int): void
                public addColumn(arg0: java.lang.Object): void
                public addColumn(arg0: java.lang.Object, arg1: java.util.Vector): void
                public addColumn(arg0: java.lang.Object, arg1: java.lang.Object[]): void
                public getRowCount(): int
                public getColumnCount(): int
                public getColumnName(arg0: int): string
                public isCellEditable(arg0: int, arg1: int): boolean
                public getValueAt(arg0: int, arg1: int): java.lang.Object
                public setValueAt(arg0: java.lang.Object, arg1: int, arg2: int): void
                protected static convertToVector(arg0: java.lang.Object[]): java.util.Vector
                protected static convertToVector(arg0: java.lang.Object[][]): java.util.Vector
                public static class: java.lang.Class<any>
            }
            class JTableHeader extends javax.swing.JComponent implements javax.swing.event.TableColumnModelListener , javax.accessibility.Accessible {
                protected table: javax.swing.JTable
                protected columnModel: javax.swing.table.TableColumnModel
                protected reorderingAllowed: boolean
                protected resizingAllowed: boolean
                protected updateTableInRealTime: boolean
                protected resizingColumn: javax.swing.table.TableColumn
                protected draggedColumn: javax.swing.table.TableColumn
                protected draggedDistance: int
                public constructor()
                public constructor(arg0: javax.swing.table.TableColumnModel)
                public setTable(arg0: javax.swing.JTable): void
                public getTable(): javax.swing.JTable
                public setReorderingAllowed(arg0: boolean): void
                public getReorderingAllowed(): boolean
                public setResizingAllowed(arg0: boolean): void
                public getResizingAllowed(): boolean
                public getDraggedColumn(): javax.swing.table.TableColumn
                public getDraggedDistance(): int
                public getResizingColumn(): javax.swing.table.TableColumn
                public setUpdateTableInRealTime(arg0: boolean): void
                public getUpdateTableInRealTime(): boolean
                public setDefaultRenderer(arg0: javax.swing.table.TableCellRenderer | javax.swing.table.TableCellRenderer$$Lambda): void
                public getDefaultRenderer(): javax.swing.table.TableCellRenderer
                public columnAtPoint(arg0: java.awt.Point): int
                public getHeaderRect(arg0: int): java.awt.Rectangle
                public getToolTipText(arg0: java.awt.event.MouseEvent): string
                public getUI(): javax.swing.plaf.TableHeaderUI
                public setUI(arg0: javax.swing.plaf.TableHeaderUI): void
                public updateUI(): void
                public getUIClassID(): string
                public setColumnModel(arg0: javax.swing.table.TableColumnModel): void
                public getColumnModel(): javax.swing.table.TableColumnModel
                public columnAdded(arg0: javax.swing.event.TableColumnModelEvent): void
                public columnRemoved(arg0: javax.swing.event.TableColumnModelEvent): void
                public columnMoved(arg0: javax.swing.event.TableColumnModelEvent): void
                public columnMarginChanged(arg0: javax.swing.event.ChangeEvent): void
                public columnSelectionChanged(arg0: javax.swing.event.ListSelectionEvent): void
                protected createDefaultColumnModel(): javax.swing.table.TableColumnModel
                protected createDefaultRenderer(): javax.swing.table.TableCellRenderer
                protected initializeLocalVars(): void
                public resizeAndRepaint(): void
                public setDraggedColumn(arg0: javax.swing.table.TableColumn): void
                public setDraggedDistance(arg0: int): void
                public setResizingColumn(arg0: javax.swing.table.TableColumn): void
                protected paramString(): string
                public getAccessibleContext(): javax.accessibility.AccessibleContext
                public static class: java.lang.Class<any>
            }
            class JTableHeader$$Lambda extends javax.swing.JComponent implements javax.swing.event.TableColumnModelListener , javax.accessibility.Accessible {
                protected table: javax.swing.JTable
            }
            interface TableCellEditor extends javax.swing.CellEditor {
                getTableCellEditorComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: int, arg4: int): java.awt.Component
            }
            interface TableCellRenderer {
                getTableCellRendererComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
            }
            interface TableCellRenderer$$Lambda {
                (arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
            }
            class TableColumn implements java.io.Serializable {
                public static COLUMN_WIDTH_PROPERTY: string
                public static HEADER_VALUE_PROPERTY: string
                public static HEADER_RENDERER_PROPERTY: string
                public static CELL_RENDERER_PROPERTY: string
                protected modelIndex: int
                protected identifier: java.lang.Object
                protected width: int
                protected minWidth: int
                protected maxWidth: int
                protected headerRenderer: javax.swing.table.TableCellRenderer
                protected headerValue: java.lang.Object
                protected cellRenderer: javax.swing.table.TableCellRenderer
                protected cellEditor: javax.swing.table.TableCellEditor
                protected isResizable: boolean
                protected resizedPostingDisableCount: int
                public constructor()
                public constructor(arg0: int)
                public constructor(arg0: int, arg1: int)
                public constructor(arg0: int, arg1: int, arg2: javax.swing.table.TableCellRenderer | javax.swing.table.TableCellRenderer$$Lambda, arg3: javax.swing.table.TableCellEditor)
                public setModelIndex(arg0: int): void
                public getModelIndex(): int
                public setIdentifier(arg0: java.lang.Object): void
                public getIdentifier(): java.lang.Object
                public setHeaderValue(arg0: java.lang.Object): void
                public getHeaderValue(): java.lang.Object
                public setHeaderRenderer(arg0: javax.swing.table.TableCellRenderer | javax.swing.table.TableCellRenderer$$Lambda): void
                public getHeaderRenderer(): javax.swing.table.TableCellRenderer
                public setCellRenderer(arg0: javax.swing.table.TableCellRenderer | javax.swing.table.TableCellRenderer$$Lambda): void
                public getCellRenderer(): javax.swing.table.TableCellRenderer
                public setCellEditor(arg0: javax.swing.table.TableCellEditor): void
                public getCellEditor(): javax.swing.table.TableCellEditor
                public setWidth(arg0: int): void
                public getWidth(): int
                public setPreferredWidth(arg0: int): void
                public getPreferredWidth(): int
                public setMinWidth(arg0: int): void
                public getMinWidth(): int
                public setMaxWidth(arg0: int): void
                public getMaxWidth(): int
                public setResizable(arg0: boolean): void
                public getResizable(): boolean
                public sizeWidthToFit(): void
                public disableResizedPosting(): void
                public enableResizedPosting(): void
                public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
                protected createDefaultHeaderRenderer(): javax.swing.table.TableCellRenderer
                public static class: java.lang.Class<any>
            }
            interface TableColumnModel {
                addColumn(arg0: javax.swing.table.TableColumn): void
                removeColumn(arg0: javax.swing.table.TableColumn): void
                moveColumn(arg0: int, arg1: int): void
                setColumnMargin(arg0: int): void
                getColumnCount(): int
                getColumns(): java.util.Enumeration<javax.swing.table.TableColumn>
                getColumnIndex(arg0: java.lang.Object): int
                getColumn(arg0: int): javax.swing.table.TableColumn
                getColumnMargin(): int
                getColumnIndexAtX(arg0: int): int
                getTotalColumnWidth(): int
                setColumnSelectionAllowed(arg0: boolean): void
                getColumnSelectionAllowed(): boolean
                getSelectedColumns(): int[]
                getSelectedColumnCount(): int
                setSelectionModel(arg0: javax.swing.ListSelectionModel): void
                getSelectionModel(): javax.swing.ListSelectionModel
                addColumnModelListener(arg0: javax.swing.event.TableColumnModelListener): void
                removeColumnModelListener(arg0: javax.swing.event.TableColumnModelListener): void
            }
            interface TableModel {
                getRowCount(): int
                getColumnCount(): int
                getColumnName(arg0: int): string
                getColumnClass(arg0: int): java.lang.Class<any>
                isCellEditable(arg0: int, arg1: int): boolean
                getValueAt(arg0: int, arg1: int): java.lang.Object
                setValueAt(arg0: java.lang.Object, arg1: int, arg2: int): void
                addTableModelListener(arg0: javax.swing.event.TableModelListener): void
                removeTableModelListener(arg0: javax.swing.event.TableModelListener): void
            }
            class TableRowSorter<M extends javax.swing.table.TableModel> extends javax.swing.DefaultRowSorter<M, java.lang.Integer> {
                public constructor()
                public constructor(arg0: M)
                public setModel(arg0: M): void
                public setStringConverter(arg0: javax.swing.table.TableStringConverter): void
                public getStringConverter(): javax.swing.table.TableStringConverter
                public getComparator(arg0: int): java.util.Comparator<any>
                protected useToString(arg0: int): boolean
                public static class: java.lang.Class<any>
            }
            abstract class TableStringConverter {
                public constructor()
                public toString(arg0: javax.swing.table.TableModel, arg1: int, arg2: int): string
                public static class: java.lang.Class<any>
            }
        }
        namespace text {
            namespace html {
                namespace parser {
                    class AttributeList implements javax.swing.text.html.parser.DTDConstants , java.io.Serializable {
                        public name: string
                        public type: int
                        public values: java.util.Vector<any>
                        public modifier: int
                        public value: string
                        public next: javax.swing.text.html.parser.AttributeList
                        public constructor(arg0: java.lang.String | string)
                        public constructor(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: java.lang.String | string, arg4: java.util.Vector<any>, arg5: javax.swing.text.html.parser.AttributeList)
                        public getName(): string
                        public getType(): int
                        public getModifier(): int
                        public getValues(): java.util.Enumeration<any>
                        public getValue(): string
                        public getNext(): javax.swing.text.html.parser.AttributeList
                        public toString(): string
                        public static name2type(arg0: java.lang.String | string): int
                        public static type2name(arg0: int): string
                        public static class: java.lang.Class<any>
                    }
                    class ContentModel implements java.io.Serializable {
                        public type: int
                        public content: java.lang.Object
                        public next: javax.swing.text.html.parser.ContentModel
                        public constructor()
                        public constructor(arg0: javax.swing.text.html.parser.Element)
                        public constructor(arg0: int, arg1: javax.swing.text.html.parser.ContentModel)
                        public constructor(arg0: int, arg1: java.lang.Object, arg2: javax.swing.text.html.parser.ContentModel)
                        public empty(): boolean
                        public getElements(arg0: java.util.Vector<javax.swing.text.html.parser.Element>): void
                        public first(arg0: java.lang.Object): boolean
                        public first(): javax.swing.text.html.parser.Element
                        public toString(): string
                        public static class: java.lang.Class<any>
                    }
                    class ContentModelState {
                        public constructor(arg0: javax.swing.text.html.parser.ContentModel)
                        public getModel(): javax.swing.text.html.parser.ContentModel
                        public terminate(): boolean
                        public first(): javax.swing.text.html.parser.Element
                        public advance(arg0: java.lang.Object): javax.swing.text.html.parser.ContentModelState
                        public static class: java.lang.Class<any>
                    }
                    class DTD implements javax.swing.text.html.parser.DTDConstants {
                        public name: string
                        public elements: java.util.Vector<javax.swing.text.html.parser.Element>
                        public elementHash: java.util.Hashtable<java.lang.String, javax.swing.text.html.parser.Element>
                        public entityHash: java.util.Hashtable<java.lang.Object, javax.swing.text.html.parser.Entity>
                        public pcdata: javax.swing.text.html.parser.Element
                        public html: javax.swing.text.html.parser.Element
                        public meta: javax.swing.text.html.parser.Element
                        public base: javax.swing.text.html.parser.Element
                        public isindex: javax.swing.text.html.parser.Element
                        public head: javax.swing.text.html.parser.Element
                        public body: javax.swing.text.html.parser.Element
                        public applet: javax.swing.text.html.parser.Element
                        public param: javax.swing.text.html.parser.Element
                        public p: javax.swing.text.html.parser.Element
                        public title: javax.swing.text.html.parser.Element
                        public static FILE_VERSION: int
                        protected constructor(arg0: java.lang.String | string)
                        public getName(): string
                        public getEntity(arg0: java.lang.String | string): javax.swing.text.html.parser.Entity
                        public getEntity(arg0: int): javax.swing.text.html.parser.Entity
                        public getElement(arg0: java.lang.String | string): javax.swing.text.html.parser.Element
                        public getElement(arg0: int): javax.swing.text.html.parser.Element
                        public defineEntity(arg0: java.lang.String | string, arg1: int, arg2: char[]): javax.swing.text.html.parser.Entity
                        public defineElement(arg0: java.lang.String | string, arg1: int, arg2: boolean, arg3: boolean, arg4: javax.swing.text.html.parser.ContentModel, arg5: java.util.BitSet, arg6: java.util.BitSet, arg7: javax.swing.text.html.parser.AttributeList): javax.swing.text.html.parser.Element
                        public defineAttributes(arg0: java.lang.String | string, arg1: javax.swing.text.html.parser.AttributeList): void
                        public defEntity(arg0: java.lang.String | string, arg1: int, arg2: int): javax.swing.text.html.parser.Entity
                        protected defEntity(arg0: java.lang.String | string, arg1: int, arg2: java.lang.String | string): javax.swing.text.html.parser.Entity
                        protected defElement(arg0: java.lang.String | string, arg1: int, arg2: boolean, arg3: boolean, arg4: javax.swing.text.html.parser.ContentModel, arg5: java.lang.String[], arg6: java.lang.String[], arg7: javax.swing.text.html.parser.AttributeList): javax.swing.text.html.parser.Element
                        protected defAttributeList(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: java.lang.String | string, arg4: java.lang.String | string, arg5: javax.swing.text.html.parser.AttributeList): javax.swing.text.html.parser.AttributeList
                        protected defContentModel(arg0: int, arg1: java.lang.Object, arg2: javax.swing.text.html.parser.ContentModel): javax.swing.text.html.parser.ContentModel
                        public toString(): string
                        public static putDTDHash(arg0: java.lang.String | string, arg1: javax.swing.text.html.parser.DTD): void
                        public static getDTD(arg0: java.lang.String | string): javax.swing.text.html.parser.DTD
                        public read(arg0: java.io.DataInputStream): void
                        public static class: java.lang.Class<any>
                    }
                    interface DTDConstants {
                        CDATA: int
                        ENTITY: int
                        ENTITIES: int
                        ID: int
                        IDREF: int
                        IDREFS: int
                        NAME: int
                        NAMES: int
                        NMTOKEN: int
                        NMTOKENS: int
                        NOTATION: int
                        NUMBER: int
                        NUMBERS: int
                        NUTOKEN: int
                        NUTOKENS: int
                        RCDATA: int
                        EMPTY: int
                        MODEL: int
                        ANY: int
                        FIXED: int
                        REQUIRED: int
                        CURRENT: int
                        CONREF: int
                        IMPLIED: int
                        PUBLIC: int
                        SDATA: int
                        PI: int
                        STARTTAG: int
                        ENDTAG: int
                        MS: int
                        MD: int
                        SYSTEM: int
                        GENERAL: int
                        DEFAULT: int
                        PARAMETER: int
                    }
                    class DocumentParser extends javax.swing.text.html.parser.Parser {
                        public constructor(arg0: javax.swing.text.html.parser.DTD)
                        public parse(arg0: java.io.Reader, arg1: javax.swing.text.html.HTMLEditorKit$ParserCallback, arg2: boolean): void
                        protected handleStartTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected handleComment(arg0: char[]): void
                        protected handleEmptyTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected handleEndTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected handleText(arg0: char[]): void
                        protected handleError(arg0: int, arg1: java.lang.String | string): void
                        public static class: java.lang.Class<any>
                    }
                    class Element implements javax.swing.text.html.parser.DTDConstants , java.io.Serializable {
                        public index: int
                        public name: string
                        public oStart: boolean
                        public oEnd: boolean
                        public inclusions: java.util.BitSet
                        public exclusions: java.util.BitSet
                        public type: int
                        public content: javax.swing.text.html.parser.ContentModel
                        public atts: javax.swing.text.html.parser.AttributeList
                        public data: java.lang.Object
                        public getName(): string
                        public omitStart(): boolean
                        public omitEnd(): boolean
                        public getType(): int
                        public getContent(): javax.swing.text.html.parser.ContentModel
                        public getAttributes(): javax.swing.text.html.parser.AttributeList
                        public getIndex(): int
                        public isEmpty(): boolean
                        public toString(): string
                        public getAttribute(arg0: java.lang.String | string): javax.swing.text.html.parser.AttributeList
                        public getAttributeByValue(arg0: java.lang.String | string): javax.swing.text.html.parser.AttributeList
                        public static name2type(arg0: java.lang.String | string): int
                        public static class: java.lang.Class<any>
                    }
                    class Entity implements javax.swing.text.html.parser.DTDConstants {
                        public name: string
                        public type: int
                        public data: char[]
                        public constructor(arg0: java.lang.String | string, arg1: int, arg2: char[])
                        public getName(): string
                        public getType(): int
                        public isParameter(): boolean
                        public isGeneral(): boolean
                        public getData(): char[]
                        public getString(): string
                        public static name2type(arg0: java.lang.String | string): int
                        public static class: java.lang.Class<any>
                    }
                    class Parser implements javax.swing.text.html.parser.DTDConstants {
                        protected dtd: javax.swing.text.html.parser.DTD
                        protected strict: boolean
                        public constructor(arg0: javax.swing.text.html.parser.DTD)
                        protected getCurrentLine(): int
                        protected makeTag(arg0: javax.swing.text.html.parser.Element, arg1: boolean): javax.swing.text.html.parser.TagElement
                        protected makeTag(arg0: javax.swing.text.html.parser.Element): javax.swing.text.html.parser.TagElement
                        protected getAttributes(): javax.swing.text.SimpleAttributeSet
                        protected flushAttributes(): void
                        protected handleText(arg0: char[]): void
                        protected handleTitle(arg0: char[]): void
                        protected handleComment(arg0: char[]): void
                        protected handleEOFInComment(): void
                        protected handleEmptyTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected handleStartTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected handleEndTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected handleError(arg0: int, arg1: java.lang.String | string): void
                        protected error(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String | string): void
                        protected error(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string): void
                        protected error(arg0: java.lang.String | string, arg1: java.lang.String | string): void
                        protected error(arg0: java.lang.String | string): void
                        protected startTag(arg0: javax.swing.text.html.parser.TagElement): void
                        protected endTag(arg0: boolean): void
                        protected markFirstTime(arg0: javax.swing.text.html.parser.Element): void
                        public parseDTDMarkup(): string
                        protected parseMarkupDeclarations(arg0: java.lang.StringBuffer): boolean
                        public parse(arg0: java.io.Reader): void
                        protected getCurrentPos(): int
                        public static class: java.lang.Class<any>
                    }
                    class ParserDelegator extends javax.swing.text.html.HTMLEditorKit$Parser implements java.io.Serializable {
                        protected static setDefaultDTD(): void
                        protected static createDTD(arg0: javax.swing.text.html.parser.DTD, arg1: java.lang.String | string): javax.swing.text.html.parser.DTD
                        public constructor()
                        public parse(arg0: java.io.Reader, arg1: javax.swing.text.html.HTMLEditorKit$ParserCallback, arg2: boolean): void
                        public static class: java.lang.Class<any>
                    }
                    class TagElement {
                        public constructor(arg0: javax.swing.text.html.parser.Element)
                        public constructor(arg0: javax.swing.text.html.parser.Element, arg1: boolean)
                        public breaksFlow(): boolean
                        public isPreformatted(): boolean
                        public getElement(): javax.swing.text.html.parser.Element
                        public getHTMLTag(): javax.swing.text.html.HTML$Tag
                        public fictional(): boolean
                        public static class: java.lang.Class<any>
                    }
                    class TagStack implements javax.swing.text.html.parser.DTDConstants {
                        public first(): javax.swing.text.html.parser.Element
                        public contentModel(): javax.swing.text.html.parser.ContentModel
                        public toString(): string
                        public static class: java.lang.Class<any>
                    }
                }
                class AccessibleHTML implements javax.accessibility.Accessible {
                    public constructor(arg0: javax.swing.JEditorPane)
                    public getAccessibleContext(): javax.accessibility.AccessibleContext
                    public static class: java.lang.Class<any>
                }
                class AccessibleHTML$$Lambda implements javax.accessibility.Accessible {
                    public constructor(arg0: javax.swing.JEditorPane)
                }
                class BRView extends javax.swing.text.html.InlineView {
                    public constructor(arg0: javax.swing.text.Element)
                    public getBreakWeight(arg0: int, arg1: float, arg2: float): int
                    public static class: java.lang.Class<any>
                }
                class BlockView extends javax.swing.text.BoxView {
                    public constructor(arg0: javax.swing.text.Element, arg1: int)
                    public setParent(arg0: javax.swing.text.View): void
                    protected calculateMajorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                    protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                    protected layoutMinorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public getAttributes(): javax.swing.text.AttributeSet
                    public getResizeWeight(arg0: int): int
                    public getAlignment(arg0: int): float
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public getPreferredSpan(arg0: int): float
                    public getMinimumSpan(arg0: int): float
                    public getMaximumSpan(arg0: int): float
                    protected setPropertiesFromAttributes(): void
                    protected getStyleSheet(): javax.swing.text.html.StyleSheet
                    public static class: java.lang.Class<any>
                }
                class CSS implements java.io.Serializable {
                    public constructor()
                    public static getAllAttributeKeys(): javax.swing.text.html.CSS$Attribute[]
                    public static getAttribute(arg0: java.lang.String | string): javax.swing.text.html.CSS$Attribute
                    public static class: java.lang.Class<any>
                }
                class CSSBorder extends javax.swing.border.AbstractBorder {
                    public getBorderInsets(arg0: java.awt.Component, arg1: java.awt.Insets): java.awt.Insets
                    public paintBorder(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public static class: java.lang.Class<any>
                }
                class CSSParser {
                    public static class: java.lang.Class<any>
                }
                class CommentView extends javax.swing.text.html.HiddenTagView {
                    protected createComponent(): java.awt.Component
                    public static class: java.lang.Class<any>
                }
                class EditableView extends javax.swing.text.ComponentView {
                    public getMinimumSpan(arg0: int): float
                    public getPreferredSpan(arg0: int): float
                    public getMaximumSpan(arg0: int): float
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public setParent(arg0: javax.swing.text.View): void
                    public isVisible(): boolean
                    public static class: java.lang.Class<any>
                }
                class FormSubmitEvent extends javax.swing.text.html.HTMLFrameHyperlinkEvent {
                    public getMethod(): javax.swing.text.html.FormSubmitEvent$MethodType
                    public getData(): string
                    public static class: java.lang.Class<any>
                }
                class FormView extends javax.swing.text.ComponentView implements java.awt.event.ActionListener {
                    public static SUBMIT: string
                    public static RESET: string
                    public constructor(arg0: javax.swing.text.Element)
                    protected createComponent(): java.awt.Component
                    public getMaximumSpan(arg0: int): float
                    public actionPerformed(arg0: java.awt.event.ActionEvent): void
                    protected submitData(arg0: java.lang.String | string): void
                    protected imageSubmit(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class FrameSetView extends javax.swing.text.BoxView {
                    public constructor(arg0: javax.swing.text.Element, arg1: int)
                    protected layoutMajorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                    protected getChildRequests(arg0: int, arg1: int): javax.swing.SizeRequirements[]
                    public static class: java.lang.Class<any>
                }
                class FrameView extends javax.swing.text.ComponentView implements javax.swing.event.HyperlinkListener {
                    public constructor(arg0: javax.swing.text.Element)
                    protected createComponent(): java.awt.Component
                    public setParent(arg0: javax.swing.text.View): void
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public hyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public getMinimumSpan(arg0: int): float
                    public getMaximumSpan(arg0: int): float
                    public static class: java.lang.Class<any>
                }
                class HRuleView extends javax.swing.text.View {
                    public constructor(arg0: javax.swing.text.Element)
                    protected setPropertiesFromAttributes(): void
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public getPreferredSpan(arg0: int): float
                    public getResizeWeight(arg0: int): int
                    public getBreakWeight(arg0: int, arg1: float, arg2: float): int
                    public breakView(arg0: int, arg1: int, arg2: float, arg3: float): javax.swing.text.View
                    public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                    public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                    public getAttributes(): javax.swing.text.AttributeSet
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public static class: java.lang.Class<any>
                }
                class HTML {
                    public static NULL_ATTRIBUTE_VALUE: string
                    public constructor()
                    public static getAllTags(): javax.swing.text.html.HTML$Tag[]
                    public static getTag(arg0: java.lang.String | string): javax.swing.text.html.HTML$Tag
                    public static getIntegerAttributeValue(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.html.HTML$Attribute, arg2: int): int
                    public static getAllAttributeKeys(): javax.swing.text.html.HTML$Attribute[]
                    public static getAttributeKey(arg0: java.lang.String | string): javax.swing.text.html.HTML$Attribute
                    public static class: java.lang.Class<any>
                }
                class HTMLDocument extends javax.swing.text.DefaultStyledDocument {
                    public static AdditionalComments: string
                    public constructor()
                    public constructor(arg0: javax.swing.text.html.StyleSheet)
                    public constructor(arg0: javax.swing.text.AbstractDocument$Content, arg1: javax.swing.text.html.StyleSheet)
                    public getReader(arg0: int): javax.swing.text.html.HTMLEditorKit$ParserCallback
                    public getReader(arg0: int, arg1: int, arg2: int, arg3: javax.swing.text.html.HTML$Tag): javax.swing.text.html.HTMLEditorKit$ParserCallback
                    public getBase(): java.net.URL
                    public setBase(arg0: java.net.URL): void
                    protected insert(arg0: int, arg1: javax.swing.text.DefaultStyledDocument$ElementSpec[]): void
                    protected insertUpdate(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent, arg1: javax.swing.text.AttributeSet): void
                    protected create(arg0: javax.swing.text.DefaultStyledDocument$ElementSpec[]): void
                    public setParagraphAttributes(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet, arg3: boolean): void
                    public getStyleSheet(): javax.swing.text.html.StyleSheet
                    public getIterator(arg0: javax.swing.text.html.HTML$Tag): javax.swing.text.html.HTMLDocument$Iterator
                    protected createLeafElement(arg0: javax.swing.text.Element, arg1: javax.swing.text.AttributeSet, arg2: int, arg3: int): javax.swing.text.Element
                    protected createBranchElement(arg0: javax.swing.text.Element, arg1: javax.swing.text.AttributeSet): javax.swing.text.Element
                    protected createDefaultRoot(): javax.swing.text.AbstractDocument$AbstractElement
                    public setTokenThreshold(arg0: int): void
                    public getTokenThreshold(): int
                    public setPreservesUnknownTags(arg0: boolean): void
                    public getPreservesUnknownTags(): boolean
                    public processHTMLFrameHyperlinkEvent(arg0: javax.swing.text.html.HTMLFrameHyperlinkEvent): void
                    public setParser(arg0: javax.swing.text.html.HTMLEditorKit$Parser): void
                    public getParser(): javax.swing.text.html.HTMLEditorKit$Parser
                    public setInnerHTML(arg0: javax.swing.text.Element, arg1: java.lang.String | string): void
                    public setOuterHTML(arg0: javax.swing.text.Element, arg1: java.lang.String | string): void
                    public insertAfterStart(arg0: javax.swing.text.Element, arg1: java.lang.String | string): void
                    public insertBeforeEnd(arg0: javax.swing.text.Element, arg1: java.lang.String | string): void
                    public insertBeforeStart(arg0: javax.swing.text.Element, arg1: java.lang.String | string): void
                    public insertAfterEnd(arg0: javax.swing.text.Element, arg1: java.lang.String | string): void
                    public getElement(arg0: java.lang.String | string): javax.swing.text.Element
                    public getElement(arg0: javax.swing.text.Element, arg1: java.lang.Object, arg2: java.lang.Object): javax.swing.text.Element
                    protected fireChangedUpdate(arg0: javax.swing.event.DocumentEvent): void
                    protected fireUndoableEditUpdate(arg0: javax.swing.event.UndoableEditEvent): void
                    public static class: java.lang.Class<any>
                }
                class HTMLEditorKit extends javax.swing.text.StyledEditorKit implements javax.accessibility.Accessible {
                    public static DEFAULT_CSS: string
                    public static BOLD_ACTION: string
                    public static ITALIC_ACTION: string
                    public static PARA_INDENT_LEFT: string
                    public static PARA_INDENT_RIGHT: string
                    public static FONT_CHANGE_BIGGER: string
                    public static FONT_CHANGE_SMALLER: string
                    public static COLOR_ACTION: string
                    public static LOGICAL_STYLE_ACTION: string
                    public static IMG_ALIGN_TOP: string
                    public static IMG_ALIGN_MIDDLE: string
                    public static IMG_ALIGN_BOTTOM: string
                    public static IMG_BORDER: string
                    public constructor()
                    public getContentType(): string
                    public getViewFactory(): javax.swing.text.ViewFactory
                    public createDefaultDocument(): javax.swing.text.Document
                    public read(arg0: java.io.Reader, arg1: javax.swing.text.Document, arg2: int): void
                    public insertHTML(arg0: javax.swing.text.html.HTMLDocument, arg1: int, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: javax.swing.text.html.HTML$Tag): void
                    public write(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                    public install(arg0: javax.swing.JEditorPane): void
                    public deinstall(arg0: javax.swing.JEditorPane): void
                    public setStyleSheet(arg0: javax.swing.text.html.StyleSheet): void
                    public getStyleSheet(): javax.swing.text.html.StyleSheet
                    public getActions(): javax.swing.Action[]
                    protected createInputAttributes(arg0: javax.swing.text.Element, arg1: javax.swing.text.MutableAttributeSet): void
                    public getInputAttributes(): javax.swing.text.MutableAttributeSet
                    public setDefaultCursor(arg0: java.awt.Cursor): void
                    public getDefaultCursor(): java.awt.Cursor
                    public setLinkCursor(arg0: java.awt.Cursor): void
                    public getLinkCursor(): java.awt.Cursor
                    public isAutoFormSubmission(): boolean
                    public setAutoFormSubmission(arg0: boolean): void
                    public clone(): java.lang.Object
                    protected getParser(): javax.swing.text.html.HTMLEditorKit$Parser
                    public getAccessibleContext(): javax.accessibility.AccessibleContext
                    public static class: java.lang.Class<any>
                }
                class HTMLEditorKit$$Lambda extends javax.swing.text.StyledEditorKit implements javax.accessibility.Accessible {
                    public static DEFAULT_CSS: string
                }
                class HTMLFrameHyperlinkEvent extends javax.swing.event.HyperlinkEvent {
                    public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string)
                    public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string, arg4: java.lang.String | string)
                    public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: javax.swing.text.Element, arg4: java.lang.String | string)
                    public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string, arg4: javax.swing.text.Element, arg5: java.lang.String | string)
                    public constructor(arg0: java.lang.Object, arg1: javax.swing.event.HyperlinkEvent$EventType, arg2: java.net.URL, arg3: java.lang.String | string, arg4: javax.swing.text.Element, arg5: java.awt.event.InputEvent, arg6: java.lang.String | string)
                    public getTarget(): string
                    public static class: java.lang.Class<any>
                }
                class HTMLWriter extends javax.swing.text.AbstractWriter {
                    public constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.html.HTMLDocument)
                    public constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.html.HTMLDocument, arg2: int, arg3: int)
                    public write(): void
                    protected writeAttributes(arg0: javax.swing.text.AttributeSet): void
                    protected emptyTag(arg0: javax.swing.text.Element): void
                    protected isBlockTag(arg0: javax.swing.text.AttributeSet): boolean
                    protected startTag(arg0: javax.swing.text.Element): void
                    protected textAreaContent(arg0: javax.swing.text.AttributeSet): void
                    protected text(arg0: javax.swing.text.Element): void
                    protected selectContent(arg0: javax.swing.text.AttributeSet): void
                    protected writeOption(arg0: javax.swing.text.html.Option): void
                    protected endTag(arg0: javax.swing.text.Element): void
                    protected comment(arg0: javax.swing.text.Element): void
                    protected synthesizedElement(arg0: javax.swing.text.Element): boolean
                    protected matchNameAttribute(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.html.HTML$Tag): boolean
                    protected writeEmbeddedTags(arg0: javax.swing.text.AttributeSet): void
                    protected closeOutUnwantedEmbeddedTags(arg0: javax.swing.text.AttributeSet): void
                    protected writeLineSeparator(): void
                    protected output(arg0: char[], arg1: int, arg2: int): void
                    public static class: java.lang.Class<any>
                }
                class HiddenTagView extends javax.swing.text.html.EditableView implements javax.swing.event.DocumentListener {
                    protected createComponent(): java.awt.Component
                    public getAlignment(arg0: int): float
                    public getMinimumSpan(arg0: int): float
                    public getPreferredSpan(arg0: int): float
                    public getMaximumSpan(arg0: int): float
                    public insertUpdate(arg0: javax.swing.event.DocumentEvent): void
                    public removeUpdate(arg0: javax.swing.event.DocumentEvent): void
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent): void
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public static class: java.lang.Class<any>
                }
                class ImageView extends javax.swing.text.View {
                    public constructor(arg0: javax.swing.text.Element)
                    public getAltText(): string
                    public getImageURL(): java.net.URL
                    public getNoImageIcon(): javax.swing.Icon
                    public getLoadingImageIcon(): javax.swing.Icon
                    public getImage(): java.awt.Image
                    public setLoadsSynchronously(arg0: boolean): void
                    public getLoadsSynchronously(): boolean
                    protected getStyleSheet(): javax.swing.text.html.StyleSheet
                    public getAttributes(): javax.swing.text.AttributeSet
                    public getToolTipText(arg0: float, arg1: float, arg2: java.awt.Shape): string
                    protected setPropertiesFromAttributes(): void
                    public setParent(arg0: javax.swing.text.View): void
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public getPreferredSpan(arg0: int): float
                    public getAlignment(arg0: int): float
                    public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                    public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                    public setSize(arg0: float, arg1: float): void
                    public static class: java.lang.Class<any>
                }
                class InlineView extends javax.swing.text.LabelView {
                    public constructor(arg0: javax.swing.text.Element)
                    public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public getAttributes(): javax.swing.text.AttributeSet
                    public getBreakWeight(arg0: int, arg1: float, arg2: float): int
                    public breakView(arg0: int, arg1: int, arg2: float, arg3: float): javax.swing.text.View
                    protected setPropertiesFromAttributes(): void
                    protected getStyleSheet(): javax.swing.text.html.StyleSheet
                    public static class: java.lang.Class<any>
                }
                class IsindexView extends javax.swing.text.ComponentView implements java.awt.event.ActionListener {
                    public constructor(arg0: javax.swing.text.Element)
                    public createComponent(): java.awt.Component
                    public actionPerformed(arg0: java.awt.event.ActionEvent): void
                    public static class: java.lang.Class<any>
                }
                class LineView extends javax.swing.text.html.ParagraphView {
                    public constructor(arg0: javax.swing.text.Element)
                    public isVisible(): boolean
                    public getMinimumSpan(arg0: int): float
                    public getResizeWeight(arg0: int): int
                    public getAlignment(arg0: int): float
                    protected layout(arg0: int, arg1: int): void
                    public nextTabStop(arg0: float, arg1: int): float
                    protected getPreTab(arg0: float, arg1: int): float
                    protected getCharactersPerTab(): int
                    public static class: java.lang.Class<any>
                }
                class ListView extends javax.swing.text.html.BlockView {
                    public constructor(arg0: javax.swing.text.Element)
                    public getAlignment(arg0: int): float
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    protected paintChild(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                    protected setPropertiesFromAttributes(): void
                    public static class: java.lang.Class<any>
                }
                class Map implements java.io.Serializable {
                    public constructor()
                    public constructor(arg0: java.lang.String | string)
                    public getName(): string
                    public addArea(arg0: javax.swing.text.AttributeSet): void
                    public removeArea(arg0: javax.swing.text.AttributeSet): void
                    public getAreas(): javax.swing.text.AttributeSet[]
                    public getArea(arg0: int, arg1: int, arg2: int, arg3: int): javax.swing.text.AttributeSet
                    protected createRegionContainment(arg0: javax.swing.text.AttributeSet): javax.swing.text.html.Map$RegionContainment
                    protected static extractCoords(arg0: java.lang.Object): int[]
                    public static class: java.lang.Class<any>
                }
                class MinimalHTMLWriter extends javax.swing.text.AbstractWriter {
                    public constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.StyledDocument)
                    public constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.StyledDocument, arg2: int, arg3: int)
                    public write(): void
                    protected writeAttributes(arg0: javax.swing.text.AttributeSet): void
                    protected text(arg0: javax.swing.text.Element): void
                    protected writeStartTag(arg0: java.lang.String | string): void
                    protected writeEndTag(arg0: java.lang.String | string): void
                    protected writeHeader(): void
                    protected writeStyles(): void
                    protected writeBody(): void
                    protected writeEndParagraph(): void
                    protected writeStartParagraph(arg0: javax.swing.text.Element): void
                    protected writeLeaf(arg0: javax.swing.text.Element): void
                    protected writeImage(arg0: javax.swing.text.Element): void
                    protected writeComponent(arg0: javax.swing.text.Element): void
                    protected isText(arg0: javax.swing.text.Element): boolean
                    protected writeContent(arg0: javax.swing.text.Element, arg1: boolean): void
                    protected writeHTMLTags(arg0: javax.swing.text.AttributeSet): void
                    protected writeNonHTMLAttributes(arg0: javax.swing.text.AttributeSet): void
                    protected inFontTag(): boolean
                    protected endFontTag(): void
                    protected startFontTag(arg0: java.lang.String | string): void
                    public static class: java.lang.Class<any>
                }
                class MuxingAttributeSet implements javax.swing.text.AttributeSet , java.io.Serializable {
                    public constructor(arg0: javax.swing.text.AttributeSet[])
                    protected constructor()
                    protected setAttributes(arg0: javax.swing.text.AttributeSet[]): void
                    protected getAttributes(): javax.swing.text.AttributeSet[]
                    protected insertAttributeSetAt(arg0: javax.swing.text.AttributeSet, arg1: int): void
                    protected removeAttributeSetAt(arg0: int): void
                    public getAttributeCount(): int
                    public isDefined(arg0: java.lang.Object): boolean
                    public isEqual(arg0: javax.swing.text.AttributeSet): boolean
                    public copyAttributes(): javax.swing.text.AttributeSet
                    public getAttribute(arg0: java.lang.Object): java.lang.Object
                    public getAttributeNames(): java.util.Enumeration
                    public containsAttribute(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                    public containsAttributes(arg0: javax.swing.text.AttributeSet): boolean
                    public getResolveParent(): javax.swing.text.AttributeSet
                    public static class: java.lang.Class<any>
                }
                class NoFramesView extends javax.swing.text.html.BlockView {
                    public constructor(arg0: javax.swing.text.Element, arg1: int)
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public setParent(arg0: javax.swing.text.View): void
                    public isVisible(): boolean
                    protected layout(arg0: int, arg1: int): void
                    public getPreferredSpan(arg0: int): float
                    public getMinimumSpan(arg0: int): float
                    public getMaximumSpan(arg0: int): float
                    public static class: java.lang.Class<any>
                }
                class ObjectView extends javax.swing.text.ComponentView {
                    public constructor(arg0: javax.swing.text.Element)
                    protected createComponent(): java.awt.Component
                    public static class: java.lang.Class<any>
                }
                class Option implements java.io.Serializable {
                    public constructor(arg0: javax.swing.text.AttributeSet)
                    public setLabel(arg0: java.lang.String | string): void
                    public getLabel(): string
                    public getAttributes(): javax.swing.text.AttributeSet
                    public toString(): string
                    protected setSelection(arg0: boolean): void
                    public isSelected(): boolean
                    public getValue(): string
                    public static class: java.lang.Class<any>
                }
                class OptionComboBoxModel<E> extends javax.swing.DefaultComboBoxModel<E> implements java.io.Serializable {
                    public setInitialSelection(arg0: javax.swing.text.html.Option): void
                    public getInitialSelection(): javax.swing.text.html.Option
                    public static class: java.lang.Class<any>
                }
                class OptionListModel<E> extends javax.swing.DefaultListModel<E> implements javax.swing.ListSelectionModel , java.io.Serializable {
                    protected listenerList: javax.swing.event.EventListenerList
                    protected leadAnchorNotificationEnabled: boolean
                    public getMinSelectionIndex(): int
                    public getMaxSelectionIndex(): int
                    public getValueIsAdjusting(): boolean
                    public getSelectionMode(): int
                    public setSelectionMode(arg0: int): void
                    public isSelectedIndex(arg0: int): boolean
                    public isSelectionEmpty(): boolean
                    public addListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
                    public removeListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
                    public getListSelectionListeners(): javax.swing.event.ListSelectionListener[]
                    protected fireValueChanged(arg0: boolean): void
                    protected fireValueChanged(arg0: int, arg1: int): void
                    protected fireValueChanged(arg0: int, arg1: int, arg2: boolean): void
                    public setLeadAnchorNotificationEnabled(arg0: boolean): void
                    public isLeadAnchorNotificationEnabled(): boolean
                    public clearSelection(): void
                    public setSelectionInterval(arg0: int, arg1: int): void
                    public addSelectionInterval(arg0: int, arg1: int): void
                    public removeSelectionInterval(arg0: int, arg1: int): void
                    public insertIndexInterval(arg0: int, arg1: int, arg2: boolean): void
                    public removeIndexInterval(arg0: int, arg1: int): void
                    public setValueIsAdjusting(arg0: boolean): void
                    public toString(): string
                    public clone(): java.lang.Object
                    public getAnchorSelectionIndex(): int
                    public getLeadSelectionIndex(): int
                    public setAnchorSelectionIndex(arg0: int): void
                    public setLeadSelectionIndex(arg0: int): void
                    public setInitialSelection(arg0: int): void
                    public getInitialSelection(): java.util.BitSet
                    public static class: java.lang.Class<any>
                }
                class ParagraphView extends javax.swing.text.ParagraphView {
                    public constructor(arg0: javax.swing.text.Element)
                    public setParent(arg0: javax.swing.text.View): void
                    public getAttributes(): javax.swing.text.AttributeSet
                    protected setPropertiesFromAttributes(): void
                    protected getStyleSheet(): javax.swing.text.html.StyleSheet
                    protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                    public isVisible(): boolean
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public getPreferredSpan(arg0: int): float
                    public getMinimumSpan(arg0: int): float
                    public getMaximumSpan(arg0: int): float
                    public static class: java.lang.Class<any>
                }
                class StyleSheet extends javax.swing.text.StyleContext {
                    public constructor()
                    public getRule(arg0: javax.swing.text.html.HTML$Tag, arg1: javax.swing.text.Element): javax.swing.text.Style
                    public getRule(arg0: java.lang.String | string): javax.swing.text.Style
                    public addRule(arg0: java.lang.String | string): void
                    public getDeclaration(arg0: java.lang.String | string): javax.swing.text.AttributeSet
                    public loadRules(arg0: java.io.Reader, arg1: java.net.URL): void
                    public getViewAttributes(arg0: javax.swing.text.View): javax.swing.text.AttributeSet
                    public removeStyle(arg0: java.lang.String | string): void
                    public addStyleSheet(arg0: javax.swing.text.html.StyleSheet): void
                    public removeStyleSheet(arg0: javax.swing.text.html.StyleSheet): void
                    public getStyleSheets(): javax.swing.text.html.StyleSheet[]
                    public importStyleSheet(arg0: java.net.URL): void
                    public setBase(arg0: java.net.URL): void
                    public getBase(): java.net.URL
                    public addCSSAttribute(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.text.html.CSS$Attribute, arg2: java.lang.String | string): void
                    public addCSSAttributeFromHTML(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.text.html.CSS$Attribute, arg2: java.lang.String | string): boolean
                    public translateHTMLToCSS(arg0: javax.swing.text.AttributeSet): javax.swing.text.AttributeSet
                    public addAttribute(arg0: javax.swing.text.AttributeSet, arg1: java.lang.Object, arg2: java.lang.Object): javax.swing.text.AttributeSet
                    public addAttributes(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.AttributeSet): javax.swing.text.AttributeSet
                    public removeAttribute(arg0: javax.swing.text.AttributeSet, arg1: java.lang.Object): javax.swing.text.AttributeSet
                    public removeAttributes(arg0: javax.swing.text.AttributeSet, arg1: java.util.Enumeration<any>): javax.swing.text.AttributeSet
                    public removeAttributes(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.AttributeSet): javax.swing.text.AttributeSet
                    protected createSmallAttributeSet(arg0: javax.swing.text.AttributeSet): javax.swing.text.StyleContext$SmallAttributeSet
                    protected createLargeAttributeSet(arg0: javax.swing.text.AttributeSet): javax.swing.text.MutableAttributeSet
                    public getFont(arg0: javax.swing.text.AttributeSet): java.awt.Font
                    public getForeground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                    public getBackground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                    public getBoxPainter(arg0: javax.swing.text.AttributeSet): javax.swing.text.html.StyleSheet$BoxPainter
                    public getListPainter(arg0: javax.swing.text.AttributeSet): javax.swing.text.html.StyleSheet$ListPainter
                    public setBaseFontSize(arg0: int): void
                    public setBaseFontSize(arg0: java.lang.String | string): void
                    public static getIndexOfSize(arg0: float): int
                    public getPointSize(arg0: int): float
                    public getPointSize(arg0: java.lang.String | string): float
                    public stringToColor(arg0: java.lang.String | string): java.awt.Color
                    public static class: java.lang.Class<any>
                }
                class TableView extends javax.swing.text.BoxView implements javax.swing.text.ViewFactory {
                    public constructor(arg0: javax.swing.text.Element)
                    protected createTableRow(arg0: javax.swing.text.Element): javax.swing.text.html.TableView$RowView
                    public getColumnCount(): int
                    public getColumnSpan(arg0: int): int
                    public getRowCount(): int
                    public getMultiRowSpan(arg0: int, arg1: int): int
                    public getRowSpan(arg0: int): int
                    protected getViewAtPoint(arg0: int, arg1: int, arg2: java.awt.Rectangle): javax.swing.text.View
                    protected getColumnsOccupied(arg0: javax.swing.text.View): int
                    protected getRowsOccupied(arg0: javax.swing.text.View): int
                    protected invalidateGrid(): void
                    protected getStyleSheet(): javax.swing.text.html.StyleSheet
                    protected setPropertiesFromAttributes(): void
                    protected layoutColumns(arg0: int, arg1: int[], arg2: int[], arg3: javax.swing.SizeRequirements[]): void
                    protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                    protected calculateMajorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                    protected layoutMinorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                    protected layoutMajorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                    protected getViewAtPosition(arg0: int, arg1: java.awt.Rectangle): javax.swing.text.View
                    public getAttributes(): javax.swing.text.AttributeSet
                    public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                    public setParent(arg0: javax.swing.text.View): void
                    public getViewFactory(): javax.swing.text.ViewFactory
                    public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    protected forwardUpdate(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape, arg3: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                    public replace(arg0: int, arg1: int, arg2: javax.swing.text.View[]): void
                    public create(arg0: javax.swing.text.Element): javax.swing.text.View
                    public static class: java.lang.Class<any>
                }
                class TableView$$Lambda extends javax.swing.text.BoxView implements javax.swing.text.ViewFactory {
                    public constructor(arg0: javax.swing.text.Element)
                }
                class TextAreaDocument extends javax.swing.text.PlainDocument {
                    public static class: java.lang.Class<any>
                }
            }
            namespace rtf {
                abstract class AbstractFilter extends java.io.OutputStream {
                    protected translationTable: char[]
                    protected specialsTable: boolean[]
                    public readFromStream(arg0: java.io.InputStream): void
                    public readFromReader(arg0: java.io.Reader): void
                    public constructor()
                    public write(arg0: int): void
                    public write(arg0: byte[], arg1: int, arg2: int): void
                    public write(arg0: java.lang.String | string): void
                    protected write(arg0: char): void
                    protected writeSpecial(arg0: int): void
                    public static class: java.lang.Class<any>
                }
                class Constants {
                    public static class: java.lang.Class<any>
                }
                class MockAttributeSet implements javax.swing.text.AttributeSet , javax.swing.text.MutableAttributeSet {
                    public backing: java.util.Dictionary<java.lang.Object, java.lang.Object>
                    public isEmpty(): boolean
                    public getAttributeCount(): int
                    public isDefined(arg0: java.lang.Object): boolean
                    public isEqual(arg0: javax.swing.text.AttributeSet): boolean
                    public copyAttributes(): javax.swing.text.AttributeSet
                    public getAttribute(arg0: java.lang.Object): java.lang.Object
                    public addAttribute(arg0: java.lang.Object, arg1: java.lang.Object): void
                    public addAttributes(arg0: javax.swing.text.AttributeSet): void
                    public removeAttribute(arg0: java.lang.Object): void
                    public removeAttributes(arg0: javax.swing.text.AttributeSet): void
                    public removeAttributes(arg0: java.util.Enumeration<any>): void
                    public setResolveParent(arg0: javax.swing.text.AttributeSet): void
                    public getAttributeNames(): java.util.Enumeration
                    public containsAttribute(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                    public containsAttributes(arg0: javax.swing.text.AttributeSet): boolean
                    public getResolveParent(): javax.swing.text.AttributeSet
                    public static class: java.lang.Class<any>
                }
                interface RTFAttribute {
                    D_CHARACTER: int
                    D_PARAGRAPH: int
                    D_SECTION: int
                    D_DOCUMENT: int
                    D_META: int
                    domain(): int
                    swingName(): java.lang.Object
                    rtfName(): string
                    set(arg0: javax.swing.text.MutableAttributeSet): boolean
                    set(arg0: javax.swing.text.MutableAttributeSet, arg1: int): boolean
                    setDefault(arg0: javax.swing.text.MutableAttributeSet): boolean
                    write(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.rtf.RTFGenerator, arg2: boolean): boolean
                    writeValue(arg0: java.lang.Object, arg1: javax.swing.text.rtf.RTFGenerator, arg2: boolean): boolean
                }
                class RTFAttributes {
                    public static class: java.lang.Class<any>
                }
                class RTFEditorKit extends javax.swing.text.StyledEditorKit {
                    public constructor()
                    public getContentType(): string
                    public read(arg0: java.io.InputStream, arg1: javax.swing.text.Document, arg2: int): void
                    public write(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                    public read(arg0: java.io.Reader, arg1: javax.swing.text.Document, arg2: int): void
                    public write(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                    public static class: java.lang.Class<any>
                }
                class RTFGenerator {
                    public static defaultRTFColor: java.awt.Color
                    public static defaultFontSize: float
                    public static defaultFontFamily: string
                    protected static textKeywords: javax.swing.text.rtf.RTFGenerator$CharacterKeywordPair[]
                    public static writeDocument(arg0: javax.swing.text.Document, arg1: java.io.OutputStream | java.io.OutputStream$$Lambda): void
                    public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
                    public examineElement(arg0: javax.swing.text.Element): void
                    public writeLineBreak(): void
                    public writeRTFHeader(): void
                    public writeRTFTrailer(): void
                    protected checkNumericControlWord(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.text.AttributeSet, arg2: java.lang.Object, arg3: java.lang.String | string, arg4: float, arg5: float): void
                    protected checkControlWord(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.text.AttributeSet, arg2: javax.swing.text.rtf.RTFAttribute): void
                    protected checkControlWords(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.text.AttributeSet, arg2: javax.swing.text.rtf.RTFAttribute[], arg3: int): void
                    protected resetSectionAttributes(arg0: javax.swing.text.MutableAttributeSet): void
                    public writeParagraphElement(arg0: javax.swing.text.Element): void
                    protected resetParagraphAttributes(arg0: javax.swing.text.MutableAttributeSet): void
                    protected resetCharacterAttributes(arg0: javax.swing.text.MutableAttributeSet): void
                    public writeTextElement(arg0: javax.swing.text.Element): void
                    public writeText(arg0: javax.swing.text.Segment): void
                    public writeText(arg0: java.lang.String | string): void
                    public writeRawString(arg0: java.lang.String | string): void
                    public writeControlWord(arg0: java.lang.String | string): void
                    public writeControlWord(arg0: java.lang.String | string, arg1: int): void
                    public writeBegingroup(): void
                    public writeEndgroup(): void
                    public writeCharacter(arg0: char): void
                    protected static convertCharacter(arg0: int[], arg1: char): int
                    public static class: java.lang.Class<any>
                }
                abstract class RTFParser extends javax.swing.text.rtf.AbstractFilter {
                    public level: int
                    protected warnings: java.io.PrintStream
                    public handleKeyword(arg0: java.lang.String | string): boolean
                    public handleKeyword(arg0: java.lang.String | string, arg1: int): boolean
                    public handleText(arg0: java.lang.String | string): void
                    public handleText(arg0: char): void
                    public handleBinaryBlob(arg0: byte[]): void
                    public begingroup(): void
                    public endgroup(): void
                    public constructor()
                    public writeSpecial(arg0: int): void
                    protected warning(arg0: java.lang.String | string): void
                    public write(arg0: java.lang.String | string): void
                    public write(arg0: char): void
                    public flush(): void
                    public close(): void
                    public static class: java.lang.Class<any>
                }
                class RTFReader extends javax.swing.text.rtf.RTFParser {
                    public constructor(arg0: javax.swing.text.StyledDocument)
                    public handleBinaryBlob(arg0: byte[]): void
                    public handleText(arg0: java.lang.String | string): void
                    public begingroup(): void
                    public endgroup(): void
                    protected setRTFDestination(arg0: javax.swing.text.rtf.RTFReader$Destination): void
                    public close(): void
                    public handleKeyword(arg0: java.lang.String | string): boolean
                    public handleKeyword(arg0: java.lang.String | string, arg1: int): boolean
                    public setCharacterSet(arg0: java.lang.String | string): void
                    public static defineCharacterSet(arg0: java.lang.String | string, arg1: char[]): void
                    public static getCharacterSet(arg0: java.lang.String | string): java.lang.Object
                    public static class: java.lang.Class<any>
                }
            }
            abstract class AbstractDocument implements javax.swing.text.Document , java.io.Serializable {
                protected listenerList: javax.swing.event.EventListenerList
                protected static BAD_LOCATION: string
                public static ParagraphElementName: string
                public static ContentElementName: string
                public static SectionElementName: string
                public static BidiElementName: string
                public static ElementNameAttribute: string
                protected constructor(arg0: javax.swing.text.AbstractDocument$Content)
                protected constructor(arg0: javax.swing.text.AbstractDocument$Content, arg1: javax.swing.text.AbstractDocument$AttributeContext)
                public getDocumentProperties(): java.util.Dictionary<java.lang.Object, java.lang.Object>
                public setDocumentProperties(arg0: java.util.Dictionary<java.lang.Object, java.lang.Object>): void
                protected fireInsertUpdate(arg0: javax.swing.event.DocumentEvent): void
                protected fireChangedUpdate(arg0: javax.swing.event.DocumentEvent): void
                protected fireRemoveUpdate(arg0: javax.swing.event.DocumentEvent): void
                protected fireUndoableEditUpdate(arg0: javax.swing.event.UndoableEditEvent): void
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public getAsynchronousLoadPriority<T extends java.util.EventListener>(): int
                public setAsynchronousLoadPriority<T extends java.util.EventListener>(arg0: int): void
                public setDocumentFilter<T extends java.util.EventListener>(arg0: javax.swing.text.DocumentFilter): void
                public getDocumentFilter<T extends java.util.EventListener>(): javax.swing.text.DocumentFilter
                public render<T extends java.util.EventListener>(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
                public getLength<T extends java.util.EventListener>(): int
                public addDocumentListener<T extends java.util.EventListener>(arg0: javax.swing.event.DocumentListener): void
                public removeDocumentListener<T extends java.util.EventListener>(arg0: javax.swing.event.DocumentListener): void
                public getDocumentListeners<T extends java.util.EventListener>(): javax.swing.event.DocumentListener[]
                public addUndoableEditListener<T extends java.util.EventListener>(arg0: javax.swing.event.UndoableEditListener): void
                public removeUndoableEditListener<T extends java.util.EventListener>(arg0: javax.swing.event.UndoableEditListener): void
                public getUndoableEditListeners<T extends java.util.EventListener>(): javax.swing.event.UndoableEditListener[]
                public getProperty<T extends java.util.EventListener>(arg0: java.lang.Object): java.lang.Object
                public putProperty<T extends java.util.EventListener>(arg0: java.lang.Object, arg1: java.lang.Object): void
                public remove<T extends java.util.EventListener>(arg0: int, arg1: int): void
                public replace<T extends java.util.EventListener>(arg0: int, arg1: int, arg2: java.lang.String | string, arg3: javax.swing.text.AttributeSet): void
                public insertString<T extends java.util.EventListener>(arg0: int, arg1: java.lang.String | string, arg2: javax.swing.text.AttributeSet): void
                public getText<T extends java.util.EventListener>(arg0: int, arg1: int): string
                public getText<T extends java.util.EventListener>(arg0: int, arg1: int, arg2: javax.swing.text.Segment): void
                public createPosition<T extends java.util.EventListener>(arg0: int): javax.swing.text.Position
                public getStartPosition<T extends java.util.EventListener>(): javax.swing.text.Position
                public getEndPosition<T extends java.util.EventListener>(): javax.swing.text.Position
                public getRootElements<T extends java.util.EventListener>(): javax.swing.text.Element[]
                public getDefaultRootElement<T extends java.util.EventListener>(): javax.swing.text.Element
                public getBidiRootElement<T extends java.util.EventListener>(): javax.swing.text.Element
                public getParagraphElement<T extends java.util.EventListener>(arg0: int): javax.swing.text.Element
                protected getAttributeContext<T extends java.util.EventListener>(): javax.swing.text.AbstractDocument$AttributeContext
                protected insertUpdate<T extends java.util.EventListener>(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent, arg1: javax.swing.text.AttributeSet): void
                protected removeUpdate<T extends java.util.EventListener>(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent): void
                protected postRemoveUpdate<T extends java.util.EventListener>(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent): void
                public dump<T extends java.util.EventListener>(arg0: java.io.PrintStream): void
                protected getContent<T extends java.util.EventListener>(): javax.swing.text.AbstractDocument$Content
                protected createLeafElement<T extends java.util.EventListener>(arg0: javax.swing.text.Element, arg1: javax.swing.text.AttributeSet, arg2: int, arg3: int): javax.swing.text.Element
                protected createBranchElement<T extends java.util.EventListener>(arg0: javax.swing.text.Element, arg1: javax.swing.text.AttributeSet): javax.swing.text.Element
                protected getCurrentWriter<T extends java.util.EventListener>(): java.lang.Thread
                protected writeLock<T extends java.util.EventListener>(): void
                protected writeUnlock<T extends java.util.EventListener>(): void
                public readLock<T extends java.util.EventListener>(): void
                public readUnlock<T extends java.util.EventListener>(): void
                public static class: java.lang.Class<any>
            }
            abstract class AbstractWriter {
                protected static NEWLINE: char
                protected constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Document)
                protected constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int)
                protected constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Element)
                protected constructor(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Element, arg2: int, arg3: int)
                public getStartOffset(): int
                public getEndOffset(): int
                protected getElementIterator(): javax.swing.text.ElementIterator
                protected getWriter(): java.io.Writer
                protected getDocument(): javax.swing.text.Document
                protected inRange(arg0: javax.swing.text.Element): boolean
                protected write(): void
                protected getText(arg0: javax.swing.text.Element): string
                protected text(arg0: javax.swing.text.Element): void
                protected setLineLength(arg0: int): void
                protected getLineLength(): int
                protected setCurrentLineLength(arg0: int): void
                protected getCurrentLineLength(): int
                protected isLineEmpty(): boolean
                protected setCanWrapLines(arg0: boolean): void
                protected getCanWrapLines(): boolean
                protected setIndentSpace(arg0: int): void
                protected getIndentSpace(): int
                public setLineSeparator(arg0: java.lang.String | string): void
                public getLineSeparator(): string
                protected incrIndent(): void
                protected decrIndent(): void
                protected getIndentLevel(): int
                protected indent(): void
                protected write(arg0: char): void
                protected write(arg0: java.lang.String | string): void
                protected writeLineSeparator(): void
                protected write(arg0: char[], arg1: int, arg2: int): void
                protected writeAttributes(arg0: javax.swing.text.AttributeSet): void
                protected output(arg0: char[], arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class AsyncBoxView extends javax.swing.text.View {
                protected locator: javax.swing.text.AsyncBoxView$ChildLocator
                public constructor(arg0: javax.swing.text.Element, arg1: int)
                public getMajorAxis(): int
                public getMinorAxis(): int
                public getTopInset(): float
                public setTopInset(arg0: float): void
                public getBottomInset(): float
                public setBottomInset(arg0: float): void
                public getLeftInset(): float
                public setLeftInset(arg0: float): void
                public getRightInset(): float
                public setRightInset(arg0: float): void
                protected getInsetSpan(arg0: int): float
                protected setEstimatedMajorSpan(arg0: boolean): void
                protected getEstimatedMajorSpan(): boolean
                protected getChildState(arg0: int): javax.swing.text.AsyncBoxView$ChildState
                protected getLayoutQueue(): javax.swing.text.LayoutQueue
                protected createChildState(arg0: javax.swing.text.View): javax.swing.text.AsyncBoxView$ChildState
                protected majorRequirementChange(arg0: javax.swing.text.AsyncBoxView$ChildState, arg1: float): void
                protected minorRequirementChange(arg0: javax.swing.text.AsyncBoxView$ChildState): void
                protected flushRequirementChanges(): void
                public replace(arg0: int, arg1: int, arg2: javax.swing.text.View[]): void
                protected loadChildren(arg0: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                protected getViewIndexAtPosition(arg0: int, arg1: javax.swing.text.Position$Bias): int
                protected updateLayout(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape): void
                public setParent(arg0: javax.swing.text.View): void
                public preferenceChanged(arg0: javax.swing.text.View, arg1: boolean, arg2: boolean): void
                public setSize(arg0: float, arg1: float): void
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getPreferredSpan(arg0: int): float
                public getMinimumSpan(arg0: int): float
                public getMaximumSpan(arg0: int): float
                public getViewCount(): int
                public getView(arg0: int): javax.swing.text.View
                public getChildAllocation(arg0: int, arg1: java.awt.Shape): java.awt.Shape
                public getViewIndex(arg0: int, arg1: javax.swing.text.Position$Bias): int
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public getNextVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                public static class: java.lang.Class<any>
            }
            interface AttributeSet {
                NameAttribute: java.lang.Object
                ResolveAttribute: java.lang.Object
                getAttributeCount(): int
                isDefined(arg0: java.lang.Object): boolean
                isEqual(arg0: javax.swing.text.AttributeSet): boolean
                copyAttributes(): javax.swing.text.AttributeSet
                getAttribute(arg0: java.lang.Object): java.lang.Object
                getAttributeNames(): java.util.Enumeration<any>
                containsAttribute(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                containsAttributes(arg0: javax.swing.text.AttributeSet): boolean
                getResolveParent(): javax.swing.text.AttributeSet
            }
            class BadLocationException extends java.lang.Exception {
                public constructor(arg0: java.lang.String | string, arg1: int)
                public offsetRequested(): int
                public static class: java.lang.Class<any>
            }
            class BoxView extends javax.swing.text.CompositeView {
                public constructor(arg0: javax.swing.text.Element, arg1: int)
                public getAxis(): int
                public setAxis(arg0: int): void
                public layoutChanged(arg0: int): void
                protected isLayoutValid(arg0: int): boolean
                protected paintChild(arg0: java.awt.Graphics, arg1: java.awt.Rectangle, arg2: int): void
                public replace(arg0: int, arg1: int, arg2: javax.swing.text.View[]): void
                protected forwardUpdate(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape, arg3: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public preferenceChanged(arg0: javax.swing.text.View, arg1: boolean, arg2: boolean): void
                public getResizeWeight(arg0: int): int
                public setSize(arg0: float, arg1: float): void
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getChildAllocation(arg0: int, arg1: java.awt.Shape): java.awt.Shape
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public getAlignment(arg0: int): float
                public getPreferredSpan(arg0: int): float
                public getMinimumSpan(arg0: int): float
                public getMaximumSpan(arg0: int): float
                protected isAllocationValid(): boolean
                protected isBefore(arg0: int, arg1: int, arg2: java.awt.Rectangle): boolean
                protected isAfter(arg0: int, arg1: int, arg2: java.awt.Rectangle): boolean
                protected getViewAtPoint(arg0: int, arg1: int, arg2: java.awt.Rectangle): javax.swing.text.View
                protected childAllocation(arg0: int, arg1: java.awt.Rectangle): void
                protected layout(arg0: int, arg1: int): void
                public getWidth(): int
                public getHeight(): int
                protected layoutMajorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                protected layoutMinorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                protected calculateMajorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                protected baselineLayout(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                protected baselineRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                protected getOffset(arg0: int, arg1: int): int
                protected getSpan(arg0: int, arg1: int): int
                protected flipEastAndWestAtEnds(arg0: int, arg1: javax.swing.text.Position$Bias): boolean
                public static class: java.lang.Class<any>
            }
            interface Caret {
                install(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                deinstall(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                paint(arg0: java.awt.Graphics): void
                addChangeListener(arg0: javax.swing.event.ChangeListener): void
                removeChangeListener(arg0: javax.swing.event.ChangeListener): void
                isVisible(): boolean
                setVisible(arg0: boolean): void
                isSelectionVisible(): boolean
                setSelectionVisible(arg0: boolean): void
                setMagicCaretPosition(arg0: java.awt.Point): void
                getMagicCaretPosition(): java.awt.Point
                setBlinkRate(arg0: int): void
                getBlinkRate(): int
                getDot(): int
                getMark(): int
                setDot(arg0: int): void
                moveDot(arg0: int): void
            }
            class ChangedCharSetException extends java.io.IOException {
                public constructor(arg0: java.lang.String | string, arg1: boolean)
                public getCharSetSpec(): string
                public keyEqualsCharSet(): boolean
                public static class: java.lang.Class<any>
            }
            class ComponentView extends javax.swing.text.View {
                public constructor(arg0: javax.swing.text.Element)
                protected createComponent(): java.awt.Component
                public getComponent(): java.awt.Component
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getPreferredSpan(arg0: int): float
                public getMinimumSpan(arg0: int): float
                public getMaximumSpan(arg0: int): float
                public getAlignment(arg0: int): float
                public setParent(arg0: javax.swing.text.View): void
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public static class: java.lang.Class<any>
            }
            abstract class CompositeView extends javax.swing.text.View {
                public constructor(arg0: javax.swing.text.Element)
                protected loadChildren(arg0: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public setParent(arg0: javax.swing.text.View): void
                public getViewCount(): int
                public getView(arg0: int): javax.swing.text.View
                public replace(arg0: int, arg1: int, arg2: javax.swing.text.View[]): void
                public getChildAllocation(arg0: int, arg1: java.awt.Shape): java.awt.Shape
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public modelToView(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: int, arg3: javax.swing.text.Position$Bias, arg4: java.awt.Shape): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public getNextVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                public getViewIndex(arg0: int, arg1: javax.swing.text.Position$Bias): int
                protected isBefore(arg0: int, arg1: int, arg2: java.awt.Rectangle): boolean
                protected isAfter(arg0: int, arg1: int, arg2: java.awt.Rectangle): boolean
                protected getViewAtPoint(arg0: int, arg1: int, arg2: java.awt.Rectangle): javax.swing.text.View
                protected childAllocation(arg0: int, arg1: java.awt.Rectangle): void
                protected getViewAtPosition(arg0: int, arg1: java.awt.Rectangle): javax.swing.text.View
                protected getViewIndexAtPosition(arg0: int): int
                protected getInsideAllocation(arg0: java.awt.Shape): java.awt.Rectangle
                protected setParagraphInsets(arg0: javax.swing.text.AttributeSet): void
                protected setInsets(arg0: short, arg1: short, arg2: short, arg3: short): void
                protected getLeftInset(): short
                protected getRightInset(): short
                protected getTopInset(): short
                protected getBottomInset(): short
                protected getNextNorthSouthVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                protected getNextEastWestVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                protected flipEastAndWestAtEnds(arg0: int, arg1: javax.swing.text.Position$Bias): boolean
                public static class: java.lang.Class<any>
            }
            class DateFormatter extends javax.swing.text.InternationalFormatter {
                public constructor()
                public constructor(arg0: java.text.DateFormat)
                public setFormat(arg0: java.text.DateFormat): void
                public static class: java.lang.Class<any>
            }
            class DefaultCaret extends java.awt.Rectangle implements javax.swing.text.Caret , java.awt.event.FocusListener , java.awt.event.MouseListener , java.awt.event.MouseMotionListener {
                public static UPDATE_WHEN_ON_EDT: int
                public static NEVER_UPDATE: int
                public static ALWAYS_UPDATE: int
                protected listenerList: javax.swing.event.EventListenerList
                protected changeEvent: javax.swing.event.ChangeEvent
                public constructor()
                public setUpdatePolicy(arg0: int): void
                public getUpdatePolicy(): int
                protected getComponent(): javax.swing.text.JTextComponent
                protected repaint(): void
                protected damage(arg0: java.awt.Rectangle): void
                protected adjustVisibility(arg0: java.awt.Rectangle): void
                protected getSelectionPainter(): javax.swing.text.Highlighter$HighlightPainter
                protected positionCaret(arg0: java.awt.event.MouseEvent): void
                protected moveCaret(arg0: java.awt.event.MouseEvent): void
                public focusGained(arg0: java.awt.event.FocusEvent): void
                public focusLost(arg0: java.awt.event.FocusEvent): void
                public mouseClicked(arg0: java.awt.event.MouseEvent): void
                public mousePressed(arg0: java.awt.event.MouseEvent): void
                public mouseReleased(arg0: java.awt.event.MouseEvent): void
                public mouseEntered(arg0: java.awt.event.MouseEvent): void
                public mouseExited(arg0: java.awt.event.MouseEvent): void
                public mouseDragged(arg0: java.awt.event.MouseEvent): void
                public mouseMoved(arg0: java.awt.event.MouseEvent): void
                public paint(arg0: java.awt.Graphics): void
                public install(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                public deinstall(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                public addChangeListener(arg0: javax.swing.event.ChangeListener): void
                public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
                public getChangeListeners(): javax.swing.event.ChangeListener[]
                protected fireStateChanged(): void
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public setSelectionVisible<T extends java.util.EventListener>(arg0: boolean): void
                public isSelectionVisible<T extends java.util.EventListener>(): boolean
                public isActive<T extends java.util.EventListener>(): boolean
                public isVisible<T extends java.util.EventListener>(): boolean
                public setVisible<T extends java.util.EventListener>(arg0: boolean): void
                public setBlinkRate<T extends java.util.EventListener>(arg0: int): void
                public getBlinkRate<T extends java.util.EventListener>(): int
                public getDot<T extends java.util.EventListener>(): int
                public getMark<T extends java.util.EventListener>(): int
                public setDot<T extends java.util.EventListener>(arg0: int): void
                public moveDot<T extends java.util.EventListener>(arg0: int): void
                public moveDot<T extends java.util.EventListener>(arg0: int, arg1: javax.swing.text.Position$Bias): void
                public setDot<T extends java.util.EventListener>(arg0: int, arg1: javax.swing.text.Position$Bias): void
                public getDotBias<T extends java.util.EventListener>(): javax.swing.text.Position$Bias
                public getMarkBias<T extends java.util.EventListener>(): javax.swing.text.Position$Bias
                public setMagicCaretPosition<T extends java.util.EventListener>(arg0: java.awt.Point): void
                public getMagicCaretPosition<T extends java.util.EventListener>(): java.awt.Point
                public equals<T extends java.util.EventListener>(arg0: java.lang.Object): boolean
                public toString<T extends java.util.EventListener>(): string
                public static class: java.lang.Class<any>
            }
            class DefaultEditorKit extends javax.swing.text.EditorKit {
                public static EndOfLineStringProperty: string
                public static insertContentAction: string
                public static insertBreakAction: string
                public static insertTabAction: string
                public static deletePrevCharAction: string
                public static deleteNextCharAction: string
                public static deleteNextWordAction: string
                public static deletePrevWordAction: string
                public static readOnlyAction: string
                public static writableAction: string
                public static cutAction: string
                public static copyAction: string
                public static pasteAction: string
                public static beepAction: string
                public static pageUpAction: string
                public static pageDownAction: string
                public static forwardAction: string
                public static backwardAction: string
                public static selectionForwardAction: string
                public static selectionBackwardAction: string
                public static upAction: string
                public static downAction: string
                public static selectionUpAction: string
                public static selectionDownAction: string
                public static beginWordAction: string
                public static endWordAction: string
                public static selectionBeginWordAction: string
                public static selectionEndWordAction: string
                public static previousWordAction: string
                public static nextWordAction: string
                public static selectionPreviousWordAction: string
                public static selectionNextWordAction: string
                public static beginLineAction: string
                public static endLineAction: string
                public static selectionBeginLineAction: string
                public static selectionEndLineAction: string
                public static beginParagraphAction: string
                public static endParagraphAction: string
                public static selectionBeginParagraphAction: string
                public static selectionEndParagraphAction: string
                public static beginAction: string
                public static endAction: string
                public static selectionBeginAction: string
                public static selectionEndAction: string
                public static selectWordAction: string
                public static selectLineAction: string
                public static selectParagraphAction: string
                public static selectAllAction: string
                public static defaultKeyTypedAction: string
                public constructor()
                public getContentType(): string
                public getViewFactory(): javax.swing.text.ViewFactory
                public getActions(): javax.swing.Action[]
                public createCaret(): javax.swing.text.Caret
                public createDefaultDocument(): javax.swing.text.Document
                public read(arg0: java.io.InputStream, arg1: javax.swing.text.Document, arg2: int): void
                public write(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                public read(arg0: java.io.Reader, arg1: javax.swing.text.Document, arg2: int): void
                public write(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                public static class: java.lang.Class<any>
            }
            class DefaultFormatter extends javax.swing.JFormattedTextField$AbstractFormatter implements java.lang.Cloneable , java.io.Serializable {
                public constructor()
                public install(arg0: javax.swing.JFormattedTextField): void
                public setCommitsOnValidEdit(arg0: boolean): void
                public getCommitsOnValidEdit(): boolean
                public setOverwriteMode(arg0: boolean): void
                public getOverwriteMode(): boolean
                public setAllowsInvalid(arg0: boolean): void
                public getAllowsInvalid(): boolean
                public setValueClass(arg0: java.lang.Class<any>): void
                public getValueClass(): java.lang.Class<any>
                public stringToValue(arg0: java.lang.String | string): java.lang.Object
                public valueToString(arg0: java.lang.Object): string
                protected getDocumentFilter(): javax.swing.text.DocumentFilter
                protected getNavigationFilter(): javax.swing.text.NavigationFilter
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class DefaultFormatterFactory extends javax.swing.JFormattedTextField$AbstractFormatterFactory implements java.io.Serializable {
                public constructor()
                public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatter)
                public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatter, arg1: javax.swing.JFormattedTextField$AbstractFormatter)
                public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatter, arg1: javax.swing.JFormattedTextField$AbstractFormatter, arg2: javax.swing.JFormattedTextField$AbstractFormatter)
                public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatter, arg1: javax.swing.JFormattedTextField$AbstractFormatter, arg2: javax.swing.JFormattedTextField$AbstractFormatter, arg3: javax.swing.JFormattedTextField$AbstractFormatter)
                public setDefaultFormatter(arg0: javax.swing.JFormattedTextField$AbstractFormatter): void
                public getDefaultFormatter(): javax.swing.JFormattedTextField$AbstractFormatter
                public setDisplayFormatter(arg0: javax.swing.JFormattedTextField$AbstractFormatter): void
                public getDisplayFormatter(): javax.swing.JFormattedTextField$AbstractFormatter
                public setEditFormatter(arg0: javax.swing.JFormattedTextField$AbstractFormatter): void
                public getEditFormatter(): javax.swing.JFormattedTextField$AbstractFormatter
                public setNullFormatter(arg0: javax.swing.JFormattedTextField$AbstractFormatter): void
                public getNullFormatter(): javax.swing.JFormattedTextField$AbstractFormatter
                public getFormatter(arg0: javax.swing.JFormattedTextField): javax.swing.JFormattedTextField$AbstractFormatter
                public static class: java.lang.Class<any>
            }
            class DefaultHighlighter extends javax.swing.text.LayeredHighlighter {
                public static DefaultPainter: javax.swing.text.LayeredHighlighter$LayerPainter
                public constructor()
                public paint(arg0: java.awt.Graphics): void
                public install(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                public deinstall(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                public addHighlight(arg0: int, arg1: int, arg2: javax.swing.text.Highlighter$HighlightPainter): java.lang.Object
                public removeHighlight(arg0: java.lang.Object): void
                public removeAllHighlights(): void
                public changeHighlight(arg0: java.lang.Object, arg1: int, arg2: int): void
                public getHighlights(): javax.swing.text.Highlighter$Highlight[]
                public paintLayeredHighlights(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: java.awt.Shape, arg4: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg5: javax.swing.text.View): void
                public setDrawsLayeredHighlights(arg0: boolean): void
                public getDrawsLayeredHighlights(): boolean
                public static class: java.lang.Class<any>
            }
            class DefaultStyledDocument extends javax.swing.text.AbstractDocument implements javax.swing.text.StyledDocument {
                public static BUFFER_SIZE_DEFAULT: int
                protected buffer: javax.swing.text.DefaultStyledDocument$ElementBuffer
                public constructor(arg0: javax.swing.text.AbstractDocument$Content, arg1: javax.swing.text.StyleContext)
                public constructor(arg0: javax.swing.text.StyleContext)
                public constructor()
                public getDefaultRootElement(): javax.swing.text.Element
                protected create(arg0: javax.swing.text.DefaultStyledDocument$ElementSpec[]): void
                protected insert(arg0: int, arg1: javax.swing.text.DefaultStyledDocument$ElementSpec[]): void
                public removeElement(arg0: javax.swing.text.Element): void
                public addStyle(arg0: java.lang.String | string, arg1: javax.swing.text.Style): javax.swing.text.Style
                public removeStyle(arg0: java.lang.String | string): void
                public getStyle(arg0: java.lang.String | string): javax.swing.text.Style
                public getStyleNames(): java.util.Enumeration<any>
                public setLogicalStyle(arg0: int, arg1: javax.swing.text.Style): void
                public getLogicalStyle(arg0: int): javax.swing.text.Style
                public setCharacterAttributes(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet, arg3: boolean): void
                public setParagraphAttributes(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet, arg3: boolean): void
                public getParagraphElement(arg0: int): javax.swing.text.Element
                public getCharacterElement(arg0: int): javax.swing.text.Element
                protected insertUpdate(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent, arg1: javax.swing.text.AttributeSet): void
                protected removeUpdate(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent): void
                protected createDefaultRoot(): javax.swing.text.AbstractDocument$AbstractElement
                public getForeground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                public getBackground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                public getFont(arg0: javax.swing.text.AttributeSet): java.awt.Font
                protected styleChanged(arg0: javax.swing.text.Style): void
                public addDocumentListener(arg0: javax.swing.event.DocumentListener): void
                public removeDocumentListener(arg0: javax.swing.event.DocumentListener): void
                public static class: java.lang.Class<any>
            }
            abstract class DefaultTextUI extends javax.swing.plaf.basic.BasicTextUI {
                public constructor()
                public static class: java.lang.Class<any>
            }
            interface Document {
                StreamDescriptionProperty: string
                TitleProperty: string
                getLength(): int
                addDocumentListener(arg0: javax.swing.event.DocumentListener): void
                removeDocumentListener(arg0: javax.swing.event.DocumentListener): void
                addUndoableEditListener(arg0: javax.swing.event.UndoableEditListener): void
                removeUndoableEditListener(arg0: javax.swing.event.UndoableEditListener): void
                getProperty(arg0: java.lang.Object): java.lang.Object
                putProperty(arg0: java.lang.Object, arg1: java.lang.Object): void
                remove(arg0: int, arg1: int): void
                insertString(arg0: int, arg1: java.lang.String | string, arg2: javax.swing.text.AttributeSet): void
                getText(arg0: int, arg1: int): string
                getText(arg0: int, arg1: int, arg2: javax.swing.text.Segment): void
                getStartPosition(): javax.swing.text.Position
                getEndPosition(): javax.swing.text.Position
                createPosition(arg0: int): javax.swing.text.Position
                getRootElements(): javax.swing.text.Element[]
                getDefaultRootElement(): javax.swing.text.Element
                render(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            }
            class DocumentFilter {
                public constructor()
                public remove(arg0: javax.swing.text.DocumentFilter$FilterBypass, arg1: int, arg2: int): void
                public insertString(arg0: javax.swing.text.DocumentFilter$FilterBypass, arg1: int, arg2: java.lang.String | string, arg3: javax.swing.text.AttributeSet): void
                public replace(arg0: javax.swing.text.DocumentFilter$FilterBypass, arg1: int, arg2: int, arg3: java.lang.String | string, arg4: javax.swing.text.AttributeSet): void
                public static class: java.lang.Class<any>
            }
            abstract class EditorKit implements java.lang.Cloneable , java.io.Serializable {
                public constructor()
                public clone(): java.lang.Object
                public install(arg0: javax.swing.JEditorPane): void
                public deinstall(arg0: javax.swing.JEditorPane): void
                public getContentType(): string
                public getViewFactory(): javax.swing.text.ViewFactory
                public getActions(): javax.swing.Action[]
                public createCaret(): javax.swing.text.Caret
                public createDefaultDocument(): javax.swing.text.Document
                public read(arg0: java.io.InputStream, arg1: javax.swing.text.Document, arg2: int): void
                public write(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                public read(arg0: java.io.Reader, arg1: javax.swing.text.Document, arg2: int): void
                public write(arg0: java.io.Writer | java.io.Writer$$Lambda, arg1: javax.swing.text.Document, arg2: int, arg3: int): void
                public static class: java.lang.Class<any>
            }
            interface Element {
                getDocument(): javax.swing.text.Document
                getParentElement(): javax.swing.text.Element
                getName(): string
                getAttributes(): javax.swing.text.AttributeSet
                getStartOffset(): int
                getEndOffset(): int
                getElementIndex(arg0: int): int
                getElementCount(): int
                getElement(arg0: int): javax.swing.text.Element
                isLeaf(): boolean
            }
            class ElementIterator implements java.lang.Cloneable {
                public constructor(arg0: javax.swing.text.Document)
                public constructor(arg0: javax.swing.text.Element)
                public clone(): java.lang.Object
                public first(): javax.swing.text.Element
                public depth(): int
                public current(): javax.swing.text.Element
                public next(): javax.swing.text.Element
                public previous(): javax.swing.text.Element
                public static class: java.lang.Class<any>
            }
            class FieldView extends javax.swing.text.PlainView {
                public constructor(arg0: javax.swing.text.Element)
                protected getFontMetrics(): java.awt.FontMetrics
                protected adjustAllocation(arg0: java.awt.Shape): java.awt.Shape
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getPreferredSpan(arg0: int): float
                public getResizeWeight(arg0: int): int
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public static class: java.lang.Class<any>
            }
            abstract class FlowView extends javax.swing.text.BoxView {
                protected layoutSpan: int
                protected layoutPool: javax.swing.text.View
                protected strategy: javax.swing.text.FlowView$FlowStrategy
                public constructor(arg0: javax.swing.text.Element, arg1: int)
                public getFlowAxis(): int
                public getFlowSpan(arg0: int): int
                public getFlowStart(arg0: int): int
                protected createRow(): javax.swing.text.View
                protected loadChildren(arg0: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                protected getViewIndexAtPosition(arg0: int): int
                protected layout(arg0: int, arg1: int): void
                protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public setParent(arg0: javax.swing.text.View): void
                public static class: java.lang.Class<any>
            }
            class GapContent extends javax.swing.text.GapVector implements javax.swing.text.AbstractDocument$Content , java.io.Serializable {
                public constructor()
                public constructor(arg0: int)
                protected allocateArray(arg0: int): java.lang.Object
                protected getArrayLength(): int
                public length(): int
                public insertString(arg0: int, arg1: java.lang.String | string): javax.swing.undo.UndoableEdit
                public remove(arg0: int, arg1: int): javax.swing.undo.UndoableEdit
                public getString(arg0: int, arg1: int): string
                public getChars(arg0: int, arg1: int, arg2: javax.swing.text.Segment): void
                public createPosition(arg0: int): javax.swing.text.Position
                protected shiftEnd(arg0: int): void
                protected shiftGap(arg0: int): void
                protected resetMarksAtZero(): void
                protected shiftGapStartDown(arg0: int): void
                protected shiftGapEndUp(arg0: int): void
                protected getPositionsInRange(arg0: java.util.Vector, arg1: int, arg2: int): java.util.Vector
                protected updateUndoPositions(arg0: java.util.Vector, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            abstract class GapVector implements java.io.Serializable {
                public constructor()
                public constructor(arg0: int)
                protected allocateArray(arg0: int): java.lang.Object
                protected getArrayLength(): int
                protected getArray(): java.lang.Object
                protected getGapStart(): int
                protected getGapEnd(): int
                protected replace(arg0: int, arg1: int, arg2: java.lang.Object, arg3: int): void
                protected shiftEnd(arg0: int): void
                protected shiftGap(arg0: int): void
                protected shiftGapStartDown(arg0: int): void
                protected shiftGapEndUp(arg0: int): void
                public static class: java.lang.Class<any>
            }
            class GlyphPainter1 extends javax.swing.text.GlyphView$GlyphPainter {
                public getSpan(arg0: javax.swing.text.GlyphView, arg1: int, arg2: int, arg3: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg4: float): float
                public getHeight(arg0: javax.swing.text.GlyphView): float
                public getAscent(arg0: javax.swing.text.GlyphView): float
                public getDescent(arg0: javax.swing.text.GlyphView): float
                public paint(arg0: javax.swing.text.GlyphView, arg1: java.awt.Graphics, arg2: java.awt.Shape, arg3: int, arg4: int): void
                public modelToView(arg0: javax.swing.text.GlyphView, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: java.awt.Shape): java.awt.Shape
                public viewToModel(arg0: javax.swing.text.GlyphView, arg1: float, arg2: float, arg3: java.awt.Shape, arg4: javax.swing.text.Position$Bias[]): int
                public getBoundedPosition(arg0: javax.swing.text.GlyphView, arg1: int, arg2: float, arg3: float): int
                public static class: java.lang.Class<any>
            }
            class GlyphPainter2 extends javax.swing.text.GlyphView$GlyphPainter {
                public constructor(arg0: java.awt.font.TextLayout)
                public getPainter(arg0: javax.swing.text.GlyphView, arg1: int, arg2: int): javax.swing.text.GlyphView$GlyphPainter
                public getSpan(arg0: javax.swing.text.GlyphView, arg1: int, arg2: int, arg3: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg4: float): float
                public getHeight(arg0: javax.swing.text.GlyphView): float
                public getAscent(arg0: javax.swing.text.GlyphView): float
                public getDescent(arg0: javax.swing.text.GlyphView): float
                public paint(arg0: javax.swing.text.GlyphView, arg1: java.awt.Graphics, arg2: java.awt.Shape, arg3: int, arg4: int): void
                public modelToView(arg0: javax.swing.text.GlyphView, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: java.awt.Shape): java.awt.Shape
                public viewToModel(arg0: javax.swing.text.GlyphView, arg1: float, arg2: float, arg3: java.awt.Shape, arg4: javax.swing.text.Position$Bias[]): int
                public getBoundedPosition(arg0: javax.swing.text.GlyphView, arg1: int, arg2: float, arg3: float): int
                public getNextVisualPositionFrom(arg0: javax.swing.text.GlyphView, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: java.awt.Shape, arg4: int, arg5: javax.swing.text.Position$Bias[]): int
                public static class: java.lang.Class<any>
            }
            class GlyphView extends javax.swing.text.View implements javax.swing.text.TabableView , java.lang.Cloneable {
                public constructor(arg0: javax.swing.text.Element)
                protected clone(): java.lang.Object
                public getGlyphPainter(): javax.swing.text.GlyphView$GlyphPainter
                public setGlyphPainter(arg0: javax.swing.text.GlyphView$GlyphPainter): void
                public getText(arg0: int, arg1: int): javax.swing.text.Segment
                public getBackground(): java.awt.Color
                public getForeground(): java.awt.Color
                public getFont(): java.awt.Font
                public isUnderline(): boolean
                public isStrikeThrough(): boolean
                public isSubscript(): boolean
                public isSuperscript(): boolean
                public getTabExpander(): javax.swing.text.TabExpander
                protected checkPainter(): void
                public getTabbedSpan(arg0: float, arg1: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda): float
                public getPartialSpan(arg0: int, arg1: int): float
                public getStartOffset(): int
                public getEndOffset(): int
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getMinimumSpan(arg0: int): float
                public getPreferredSpan(arg0: int): float
                public getAlignment(arg0: int): float
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public getBreakWeight(arg0: int, arg1: float, arg2: float): int
                public breakView(arg0: int, arg1: int, arg2: float, arg3: float): javax.swing.text.View
                public createFragment(arg0: int, arg1: int): javax.swing.text.View
                public getNextVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public static class: java.lang.Class<any>
            }
            interface Highlighter {
                install(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                deinstall(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): void
                paint(arg0: java.awt.Graphics): void
                addHighlight(arg0: int, arg1: int, arg2: javax.swing.text.Highlighter$HighlightPainter): java.lang.Object
                removeHighlight(arg0: java.lang.Object): void
                removeAllHighlights(): void
                changeHighlight(arg0: java.lang.Object, arg1: int, arg2: int): void
                getHighlights(): javax.swing.text.Highlighter$Highlight[]
            }
            class IconView extends javax.swing.text.View {
                public constructor(arg0: javax.swing.text.Element)
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getPreferredSpan(arg0: int): float
                public getAlignment(arg0: int): float
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public static class: java.lang.Class<any>
            }
            class InternationalFormatter extends javax.swing.text.DefaultFormatter {
                public constructor()
                public constructor(arg0: java.text.Format)
                public setFormat(arg0: java.text.Format): void
                public getFormat(): java.text.Format
                public setMinimum(arg0: java.lang.Comparable | java.lang.Comparable$$Lambda): void
                public getMinimum(): java.lang.Comparable
                public setMaximum(arg0: java.lang.Comparable | java.lang.Comparable$$Lambda): void
                public getMaximum(): java.lang.Comparable
                public install(arg0: javax.swing.JFormattedTextField): void
                public valueToString(arg0: java.lang.Object): string
                public stringToValue(arg0: java.lang.String | string): java.lang.Object
                public getFields(arg0: int): java.text.Format$Field[]
                public clone(): java.lang.Object
                protected getActions(): javax.swing.Action[]
                public static class: java.lang.Class<any>
            }
            abstract class JTextComponent extends javax.swing.JComponent implements javax.swing.Scrollable , javax.accessibility.Accessible {
                public static FOCUS_ACCELERATOR_KEY: string
                public static DEFAULT_KEYMAP: string
                public constructor()
                public getUI(): javax.swing.plaf.TextUI
                public setUI(arg0: javax.swing.plaf.TextUI): void
                public updateUI(): void
                public addCaretListener(arg0: javax.swing.event.CaretListener): void
                public removeCaretListener(arg0: javax.swing.event.CaretListener): void
                public getCaretListeners(): javax.swing.event.CaretListener[]
                protected fireCaretUpdate(arg0: javax.swing.event.CaretEvent): void
                public setDocument(arg0: javax.swing.text.Document): void
                public getDocument(): javax.swing.text.Document
                public setComponentOrientation(arg0: java.awt.ComponentOrientation): void
                public getActions(): javax.swing.Action[]
                public setMargin(arg0: java.awt.Insets): void
                public getMargin(): java.awt.Insets
                public setNavigationFilter(arg0: javax.swing.text.NavigationFilter): void
                public getNavigationFilter(): javax.swing.text.NavigationFilter
                public getCaret(): javax.swing.text.Caret
                public setCaret(arg0: javax.swing.text.Caret): void
                public getHighlighter(): javax.swing.text.Highlighter
                public setHighlighter(arg0: javax.swing.text.Highlighter): void
                public setKeymap(arg0: javax.swing.text.Keymap): void
                public setDragEnabled(arg0: boolean): void
                public getDragEnabled(): boolean
                public setDropMode(arg0: javax.swing.DropMode): void
                public getDropMode(): javax.swing.DropMode
                public getDropLocation(): javax.swing.text.JTextComponent$DropLocation
                public getKeymap(): javax.swing.text.Keymap
                public static addKeymap(arg0: java.lang.String | string, arg1: javax.swing.text.Keymap): javax.swing.text.Keymap
                public static removeKeymap(arg0: java.lang.String | string): javax.swing.text.Keymap
                public static getKeymap(arg0: java.lang.String | string): javax.swing.text.Keymap
                public static loadKeymap(arg0: javax.swing.text.Keymap, arg1: javax.swing.text.JTextComponent$KeyBinding[], arg2: javax.swing.Action[]): void
                public getCaretColor(): java.awt.Color
                public setCaretColor(arg0: java.awt.Color): void
                public getSelectionColor(): java.awt.Color
                public setSelectionColor(arg0: java.awt.Color): void
                public getSelectedTextColor(): java.awt.Color
                public setSelectedTextColor(arg0: java.awt.Color): void
                public getDisabledTextColor(): java.awt.Color
                public setDisabledTextColor(arg0: java.awt.Color): void
                public replaceSelection(arg0: java.lang.String | string): void
                public getText(arg0: int, arg1: int): string
                public modelToView(arg0: int): java.awt.Rectangle
                public viewToModel(arg0: java.awt.Point): int
                public cut(): void
                public copy(): void
                public paste(): void
                public moveCaretPosition(arg0: int): void
                public setFocusAccelerator(arg0: char): void
                public getFocusAccelerator(): char
                public read(arg0: java.io.Reader, arg1: java.lang.Object): void
                public write(arg0: java.io.Writer | java.io.Writer$$Lambda): void
                public removeNotify(): void
                public setCaretPosition(arg0: int): void
                public getCaretPosition(): int
                public setText(arg0: java.lang.String | string): void
                public getText(): string
                public getSelectedText(): string
                public isEditable(): boolean
                public setEditable(arg0: boolean): void
                public getSelectionStart(): int
                public setSelectionStart(arg0: int): void
                public getSelectionEnd(): int
                public setSelectionEnd(arg0: int): void
                public select(arg0: int, arg1: int): void
                public selectAll(): void
                public getToolTipText(arg0: java.awt.event.MouseEvent): string
                public getPreferredScrollableViewportSize(): java.awt.Dimension
                public getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
                public getScrollableBlockIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
                public getScrollableTracksViewportWidth(): boolean
                public getScrollableTracksViewportHeight(): boolean
                public print(): boolean
                public print(arg0: java.text.MessageFormat, arg1: java.text.MessageFormat): boolean
                public print(arg0: java.text.MessageFormat, arg1: java.text.MessageFormat, arg2: boolean, arg3: javax.print.PrintService, arg4: javax.print.attribute.PrintRequestAttributeSet, arg5: boolean): boolean
                public getPrintable(arg0: java.text.MessageFormat, arg1: java.text.MessageFormat): java.awt.print.Printable
                public getAccessibleContext(): javax.accessibility.AccessibleContext
                protected paramString(): string
                protected processInputMethodEvent(arg0: java.awt.event.InputMethodEvent): void
                public getInputMethodRequests(): java.awt.im.InputMethodRequests
                public addInputMethodListener(arg0: java.awt.event.InputMethodListener): void
                protected saveComposedText(arg0: int): boolean
                protected restoreComposedText(): void
                public static class: java.lang.Class<any>
            }
            abstract class JTextComponent$$Lambda extends javax.swing.JComponent implements javax.swing.Scrollable , javax.accessibility.Accessible {
                public static FOCUS_ACCELERATOR_KEY: string
            }
            interface Keymap {
                getName(): string
                getDefaultAction(): javax.swing.Action
                setDefaultAction(arg0: javax.swing.Action): void
                getAction(arg0: javax.swing.KeyStroke): javax.swing.Action
                getBoundKeyStrokes(): javax.swing.KeyStroke[]
                getBoundActions(): javax.swing.Action[]
                getKeyStrokesForAction(arg0: javax.swing.Action): javax.swing.KeyStroke[]
                isLocallyDefined(arg0: javax.swing.KeyStroke): boolean
                addActionForKeyStroke(arg0: javax.swing.KeyStroke, arg1: javax.swing.Action): void
                removeKeyStrokeBinding(arg0: javax.swing.KeyStroke): void
                removeBindings(): void
                getResolveParent(): javax.swing.text.Keymap
                setResolveParent(arg0: javax.swing.text.Keymap): void
            }
            class LabelView extends javax.swing.text.GlyphView implements javax.swing.text.TabableView {
                public constructor(arg0: javax.swing.text.Element)
                protected setUnderline(arg0: boolean): void
                protected setStrikeThrough(arg0: boolean): void
                protected setSuperscript(arg0: boolean): void
                protected setSubscript(arg0: boolean): void
                protected setBackground(arg0: java.awt.Color): void
                protected setPropertiesFromAttributes(): void
                protected getFontMetrics(): java.awt.FontMetrics
                public getBackground(): java.awt.Color
                public getForeground(): java.awt.Color
                public getFont(): java.awt.Font
                public isUnderline(): boolean
                public isStrikeThrough(): boolean
                public isSubscript(): boolean
                public isSuperscript(): boolean
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public static class: java.lang.Class<any>
            }
            abstract class LayeredHighlighter implements javax.swing.text.Highlighter {
                public constructor()
                public paintLayeredHighlights(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: java.awt.Shape, arg4: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg5: javax.swing.text.View): void
                public static class: java.lang.Class<any>
            }
            class LayoutQueue {
                public constructor()
                public static getDefaultQueue(): javax.swing.text.LayoutQueue
                public static setDefaultQueue(arg0: javax.swing.text.LayoutQueue): void
                public addTask(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
                protected waitForWork(): java.lang.Runnable
                public static class: java.lang.Class<any>
            }
            class MaskFormatter extends javax.swing.text.DefaultFormatter {
                public constructor()
                public constructor(arg0: java.lang.String | string)
                public setMask(arg0: java.lang.String | string): void
                public getMask(): string
                public setValidCharacters(arg0: java.lang.String | string): void
                public getValidCharacters(): string
                public setInvalidCharacters(arg0: java.lang.String | string): void
                public getInvalidCharacters(): string
                public setPlaceholder(arg0: java.lang.String | string): void
                public getPlaceholder(): string
                public setPlaceholderCharacter(arg0: char): void
                public getPlaceholderCharacter(): char
                public setValueContainsLiteralCharacters(arg0: boolean): void
                public getValueContainsLiteralCharacters(): boolean
                public stringToValue(arg0: java.lang.String | string): java.lang.Object
                public valueToString(arg0: java.lang.Object): string
                public install(arg0: javax.swing.JFormattedTextField): void
                public static class: java.lang.Class<any>
            }
            interface MutableAttributeSet extends javax.swing.text.AttributeSet {
                addAttribute(arg0: java.lang.Object, arg1: java.lang.Object): void
                addAttributes(arg0: javax.swing.text.AttributeSet): void
                removeAttribute(arg0: java.lang.Object): void
                removeAttributes(arg0: java.util.Enumeration<any>): void
                removeAttributes(arg0: javax.swing.text.AttributeSet): void
                setResolveParent(arg0: javax.swing.text.AttributeSet): void
            }
            class NavigationFilter {
                public constructor()
                public setDot(arg0: javax.swing.text.NavigationFilter$FilterBypass, arg1: int, arg2: javax.swing.text.Position$Bias): void
                public moveDot(arg0: javax.swing.text.NavigationFilter$FilterBypass, arg1: int, arg2: javax.swing.text.Position$Bias): void
                public getNextVisualPositionFrom(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: javax.swing.text.Position$Bias, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                public static class: java.lang.Class<any>
            }
            class NumberFormatter extends javax.swing.text.InternationalFormatter {
                public constructor()
                public constructor(arg0: java.text.NumberFormat)
                public setFormat(arg0: java.text.Format): void
                public static class: java.lang.Class<any>
            }
            class ParagraphView extends javax.swing.text.FlowView implements javax.swing.text.TabExpander {
                protected firstLineIndent: int
                public constructor(arg0: javax.swing.text.Element)
                protected setJustification(arg0: int): void
                protected setLineSpacing(arg0: float): void
                protected setFirstLineIndent(arg0: float): void
                protected setPropertiesFromAttributes(): void
                protected getLayoutViewCount(): int
                protected getLayoutView(arg0: int): javax.swing.text.View
                protected getNextNorthSouthVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                protected getClosestPositionTo(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[], arg5: int, arg6: int): int
                protected flipEastAndWestAtEnds(arg0: int, arg1: javax.swing.text.Position$Bias): boolean
                public getFlowSpan(arg0: int): int
                public getFlowStart(arg0: int): int
                protected createRow(): javax.swing.text.View
                public nextTabStop(arg0: float, arg1: int): float
                protected getTabSet(): javax.swing.text.TabSet
                protected getPartialSize(arg0: int, arg1: int): float
                protected findOffsetToCharactersInString(arg0: char[], arg1: int): int
                protected getTabBase(): float
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public getAlignment(arg0: int): float
                public breakView(arg0: int, arg1: float, arg2: java.awt.Shape): javax.swing.text.View
                public getBreakWeight(arg0: int, arg1: float): int
                protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public static class: java.lang.Class<any>
            }
            class ParagraphView$$Lambda extends javax.swing.text.FlowView implements javax.swing.text.TabExpander {
                protected firstLineIndent: int
            }
            class PasswordView extends javax.swing.text.FieldView {
                public constructor(arg0: javax.swing.text.Element)
                protected drawUnselectedText(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): int
                protected drawSelectedText(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): int
                protected drawEchoCharacter(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: char): int
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public getPreferredSpan(arg0: int): float
                public static class: java.lang.Class<any>
            }
            class PlainDocument extends javax.swing.text.AbstractDocument {
                public static tabSizeAttribute: string
                public static lineLimitAttribute: string
                public constructor()
                public constructor(arg0: javax.swing.text.AbstractDocument$Content)
                public insertString(arg0: int, arg1: java.lang.String | string, arg2: javax.swing.text.AttributeSet): void
                public getDefaultRootElement(): javax.swing.text.Element
                protected createDefaultRoot(): javax.swing.text.AbstractDocument$AbstractElement
                public getParagraphElement(arg0: int): javax.swing.text.Element
                protected insertUpdate(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent, arg1: javax.swing.text.AttributeSet): void
                protected removeUpdate(arg0: javax.swing.text.AbstractDocument$DefaultDocumentEvent): void
                public static class: java.lang.Class<any>
            }
            class PlainView extends javax.swing.text.View implements javax.swing.text.TabExpander {
                protected metrics: java.awt.FontMetrics
                public constructor(arg0: javax.swing.text.Element)
                protected getTabSize(): int
                protected drawLine(arg0: int, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                protected drawUnselectedText(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): int
                protected drawSelectedText(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): int
                protected getLineBuffer(): javax.swing.text.Segment
                protected updateMetrics(): void
                public getPreferredSpan(arg0: int): float
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public setSize(arg0: float, arg1: float): void
                public nextTabStop(arg0: float, arg1: int): float
                protected updateDamage(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                protected damageLineRange(arg0: int, arg1: int, arg2: java.awt.Shape, arg3: java.awt.Component): void
                protected lineToRect(arg0: java.awt.Shape, arg1: int): java.awt.Rectangle
                public static class: java.lang.Class<any>
            }
            class PlainView$$Lambda extends javax.swing.text.View implements javax.swing.text.TabExpander {
                protected metrics: java.awt.FontMetrics
            }
            interface Position {
                getOffset(): int
            }
            interface Position$$Lambda {
                (): int
            }
            class Segment implements java.lang.Cloneable , java.text.CharacterIterator , java.lang.CharSequence {
                public array: char[]
                public offset: int
                public count: int
                public constructor()
                public constructor(arg0: char[], arg1: int, arg2: int)
                public setPartialReturn(arg0: boolean): void
                public isPartialReturn(): boolean
                public toString(): string
                public first(): char
                public last(): char
                public current(): char
                public next(): char
                public previous(): char
                public setIndex(arg0: int): char
                public getBeginIndex(): int
                public getEndIndex(): int
                public getIndex(): int
                public charAt(arg0: int): char
                public length(): int
                public subSequence(arg0: int, arg1: int): java.lang.CharSequence
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class SegmentCache {
                public static getSharedInstance(): javax.swing.text.SegmentCache
                public static getSharedSegment(): javax.swing.text.Segment
                public static releaseSharedSegment(arg0: javax.swing.text.Segment): void
                public constructor()
                public getSegment(): javax.swing.text.Segment
                public releaseSegment(arg0: javax.swing.text.Segment): void
                public static class: java.lang.Class<any>
            }
            class SimpleAttributeSet implements javax.swing.text.MutableAttributeSet , java.io.Serializable , java.lang.Cloneable {
                public static EMPTY: javax.swing.text.AttributeSet
                public constructor()
                public constructor(arg0: javax.swing.text.AttributeSet)
                public isEmpty(): boolean
                public getAttributeCount(): int
                public isDefined(arg0: java.lang.Object): boolean
                public isEqual(arg0: javax.swing.text.AttributeSet): boolean
                public copyAttributes(): javax.swing.text.AttributeSet
                public getAttributeNames(): java.util.Enumeration<any>
                public getAttribute(arg0: java.lang.Object): java.lang.Object
                public containsAttribute(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                public containsAttributes(arg0: javax.swing.text.AttributeSet): boolean
                public addAttribute(arg0: java.lang.Object, arg1: java.lang.Object): void
                public addAttributes(arg0: javax.swing.text.AttributeSet): void
                public removeAttribute(arg0: java.lang.Object): void
                public removeAttributes(arg0: java.util.Enumeration<any>): void
                public removeAttributes(arg0: javax.swing.text.AttributeSet): void
                public getResolveParent(): javax.swing.text.AttributeSet
                public setResolveParent(arg0: javax.swing.text.AttributeSet): void
                public clone(): java.lang.Object
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class StateInvariantError extends java.lang.Error {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class StringContent implements javax.swing.text.AbstractDocument$Content , java.io.Serializable {
                public constructor()
                public constructor(arg0: int)
                public length(): int
                public insertString(arg0: int, arg1: java.lang.String | string): javax.swing.undo.UndoableEdit
                public remove(arg0: int, arg1: int): javax.swing.undo.UndoableEdit
                public getString(arg0: int, arg1: int): string
                public getChars(arg0: int, arg1: int, arg2: javax.swing.text.Segment): void
                public createPosition(arg0: int): javax.swing.text.Position
                protected getPositionsInRange(arg0: java.util.Vector, arg1: int, arg2: int): java.util.Vector
                protected updateUndoPositions(arg0: java.util.Vector): void
                public static class: java.lang.Class<any>
            }
            interface Style extends javax.swing.text.MutableAttributeSet {
                getName(): string
                addChangeListener(arg0: javax.swing.event.ChangeListener): void
                removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            }
            class StyleConstants {
                public static ComponentElementName: string
                public static IconElementName: string
                public static NameAttribute: java.lang.Object
                public static ResolveAttribute: java.lang.Object
                public static ModelAttribute: java.lang.Object
                public static BidiLevel: java.lang.Object
                public static FontFamily: java.lang.Object
                public static Family: java.lang.Object
                public static FontSize: java.lang.Object
                public static Size: java.lang.Object
                public static Bold: java.lang.Object
                public static Italic: java.lang.Object
                public static Underline: java.lang.Object
                public static StrikeThrough: java.lang.Object
                public static Superscript: java.lang.Object
                public static Subscript: java.lang.Object
                public static Foreground: java.lang.Object
                public static Background: java.lang.Object
                public static ComponentAttribute: java.lang.Object
                public static IconAttribute: java.lang.Object
                public static ComposedTextAttribute: java.lang.Object
                public static FirstLineIndent: java.lang.Object
                public static LeftIndent: java.lang.Object
                public static RightIndent: java.lang.Object
                public static LineSpacing: java.lang.Object
                public static SpaceAbove: java.lang.Object
                public static SpaceBelow: java.lang.Object
                public static Alignment: java.lang.Object
                public static TabSet: java.lang.Object
                public static Orientation: java.lang.Object
                public static ALIGN_LEFT: int
                public static ALIGN_CENTER: int
                public static ALIGN_RIGHT: int
                public static ALIGN_JUSTIFIED: int
                public toString(): string
                public static getBidiLevel(arg0: javax.swing.text.AttributeSet): int
                public static setBidiLevel(arg0: javax.swing.text.MutableAttributeSet, arg1: int): void
                public static getComponent(arg0: javax.swing.text.AttributeSet): java.awt.Component
                public static setComponent(arg0: javax.swing.text.MutableAttributeSet, arg1: java.awt.Component): void
                public static getIcon(arg0: javax.swing.text.AttributeSet): javax.swing.Icon
                public static setIcon(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.Icon): void
                public static getFontFamily(arg0: javax.swing.text.AttributeSet): string
                public static setFontFamily(arg0: javax.swing.text.MutableAttributeSet, arg1: java.lang.String | string): void
                public static getFontSize(arg0: javax.swing.text.AttributeSet): int
                public static setFontSize(arg0: javax.swing.text.MutableAttributeSet, arg1: int): void
                public static isBold(arg0: javax.swing.text.AttributeSet): boolean
                public static setBold(arg0: javax.swing.text.MutableAttributeSet, arg1: boolean): void
                public static isItalic(arg0: javax.swing.text.AttributeSet): boolean
                public static setItalic(arg0: javax.swing.text.MutableAttributeSet, arg1: boolean): void
                public static isUnderline(arg0: javax.swing.text.AttributeSet): boolean
                public static isStrikeThrough(arg0: javax.swing.text.AttributeSet): boolean
                public static isSuperscript(arg0: javax.swing.text.AttributeSet): boolean
                public static isSubscript(arg0: javax.swing.text.AttributeSet): boolean
                public static setUnderline(arg0: javax.swing.text.MutableAttributeSet, arg1: boolean): void
                public static setStrikeThrough(arg0: javax.swing.text.MutableAttributeSet, arg1: boolean): void
                public static setSuperscript(arg0: javax.swing.text.MutableAttributeSet, arg1: boolean): void
                public static setSubscript(arg0: javax.swing.text.MutableAttributeSet, arg1: boolean): void
                public static getForeground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                public static setForeground(arg0: javax.swing.text.MutableAttributeSet, arg1: java.awt.Color): void
                public static getBackground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                public static setBackground(arg0: javax.swing.text.MutableAttributeSet, arg1: java.awt.Color): void
                public static getFirstLineIndent(arg0: javax.swing.text.AttributeSet): float
                public static setFirstLineIndent(arg0: javax.swing.text.MutableAttributeSet, arg1: float): void
                public static getRightIndent(arg0: javax.swing.text.AttributeSet): float
                public static setRightIndent(arg0: javax.swing.text.MutableAttributeSet, arg1: float): void
                public static getLeftIndent(arg0: javax.swing.text.AttributeSet): float
                public static setLeftIndent(arg0: javax.swing.text.MutableAttributeSet, arg1: float): void
                public static getLineSpacing(arg0: javax.swing.text.AttributeSet): float
                public static setLineSpacing(arg0: javax.swing.text.MutableAttributeSet, arg1: float): void
                public static getSpaceAbove(arg0: javax.swing.text.AttributeSet): float
                public static setSpaceAbove(arg0: javax.swing.text.MutableAttributeSet, arg1: float): void
                public static getSpaceBelow(arg0: javax.swing.text.AttributeSet): float
                public static setSpaceBelow(arg0: javax.swing.text.MutableAttributeSet, arg1: float): void
                public static getAlignment(arg0: javax.swing.text.AttributeSet): int
                public static setAlignment(arg0: javax.swing.text.MutableAttributeSet, arg1: int): void
                public static getTabSet(arg0: javax.swing.text.AttributeSet): javax.swing.text.TabSet
                public static setTabSet(arg0: javax.swing.text.MutableAttributeSet, arg1: javax.swing.text.TabSet): void
                public static class: java.lang.Class<any>
            }
            class StyleContext implements java.io.Serializable , javax.swing.text.AbstractDocument$AttributeContext {
                public static DEFAULT_STYLE: string
                public static getDefaultStyleContext(): javax.swing.text.StyleContext
                public constructor()
                public addStyle(arg0: java.lang.String | string, arg1: javax.swing.text.Style): javax.swing.text.Style
                public removeStyle(arg0: java.lang.String | string): void
                public getStyle(arg0: java.lang.String | string): javax.swing.text.Style
                public getStyleNames(): java.util.Enumeration<any>
                public addChangeListener(arg0: javax.swing.event.ChangeListener): void
                public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
                public getChangeListeners(): javax.swing.event.ChangeListener[]
                public getFont(arg0: javax.swing.text.AttributeSet): java.awt.Font
                public getForeground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                public getBackground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                public getFont(arg0: java.lang.String | string, arg1: int, arg2: int): java.awt.Font
                public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
                public addAttribute(arg0: javax.swing.text.AttributeSet, arg1: java.lang.Object, arg2: java.lang.Object): javax.swing.text.AttributeSet
                public addAttributes(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.AttributeSet): javax.swing.text.AttributeSet
                public removeAttribute(arg0: javax.swing.text.AttributeSet, arg1: java.lang.Object): javax.swing.text.AttributeSet
                public removeAttributes(arg0: javax.swing.text.AttributeSet, arg1: java.util.Enumeration<any>): javax.swing.text.AttributeSet
                public removeAttributes(arg0: javax.swing.text.AttributeSet, arg1: javax.swing.text.AttributeSet): javax.swing.text.AttributeSet
                public getEmptySet(): javax.swing.text.AttributeSet
                public reclaim(arg0: javax.swing.text.AttributeSet): void
                protected getCompressionThreshold(): int
                protected createSmallAttributeSet(arg0: javax.swing.text.AttributeSet): javax.swing.text.StyleContext$SmallAttributeSet
                protected createLargeAttributeSet(arg0: javax.swing.text.AttributeSet): javax.swing.text.MutableAttributeSet
                public toString(): string
                public writeAttributes(arg0: java.io.ObjectOutputStream, arg1: javax.swing.text.AttributeSet): void
                public readAttributes(arg0: java.io.ObjectInputStream, arg1: javax.swing.text.MutableAttributeSet): void
                public static writeAttributeSet(arg0: java.io.ObjectOutputStream, arg1: javax.swing.text.AttributeSet): void
                public static readAttributeSet(arg0: java.io.ObjectInputStream, arg1: javax.swing.text.MutableAttributeSet): void
                public static registerStaticAttributeKey(arg0: java.lang.Object): void
                public static getStaticAttribute(arg0: java.lang.Object): java.lang.Object
                public static getStaticAttributeKey(arg0: java.lang.Object): java.lang.Object
                public static class: java.lang.Class<any>
            }
            interface StyledDocument extends javax.swing.text.Document {
                addStyle(arg0: java.lang.String | string, arg1: javax.swing.text.Style): javax.swing.text.Style
                removeStyle(arg0: java.lang.String | string): void
                getStyle(arg0: java.lang.String | string): javax.swing.text.Style
                setCharacterAttributes(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet, arg3: boolean): void
                setParagraphAttributes(arg0: int, arg1: int, arg2: javax.swing.text.AttributeSet, arg3: boolean): void
                setLogicalStyle(arg0: int, arg1: javax.swing.text.Style): void
                getLogicalStyle(arg0: int): javax.swing.text.Style
                getParagraphElement(arg0: int): javax.swing.text.Element
                getCharacterElement(arg0: int): javax.swing.text.Element
                getForeground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                getBackground(arg0: javax.swing.text.AttributeSet): java.awt.Color
                getFont(arg0: javax.swing.text.AttributeSet): java.awt.Font
            }
            class StyledEditorKit extends javax.swing.text.DefaultEditorKit {
                public constructor()
                public getInputAttributes(): javax.swing.text.MutableAttributeSet
                public getCharacterAttributeRun(): javax.swing.text.Element
                public getActions(): javax.swing.Action[]
                public createDefaultDocument(): javax.swing.text.Document
                public install(arg0: javax.swing.JEditorPane): void
                public deinstall(arg0: javax.swing.JEditorPane): void
                public getViewFactory(): javax.swing.text.ViewFactory
                public clone(): java.lang.Object
                protected createInputAttributes(arg0: javax.swing.text.Element, arg1: javax.swing.text.MutableAttributeSet): void
                public static class: java.lang.Class<any>
            }
            interface TabExpander {
                nextTabStop(arg0: float, arg1: int): float
            }
            interface TabExpander$$Lambda {
                (arg0: float, arg1: int): float
            }
            class TabSet implements java.io.Serializable {
                public constructor(arg0: javax.swing.text.TabStop[])
                public getTabCount(): int
                public getTab(arg0: int): javax.swing.text.TabStop
                public getTabAfter(arg0: float): javax.swing.text.TabStop
                public getTabIndex(arg0: javax.swing.text.TabStop): int
                public getTabIndexAfter(arg0: float): int
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class TabStop implements java.io.Serializable {
                public static ALIGN_LEFT: int
                public static ALIGN_RIGHT: int
                public static ALIGN_CENTER: int
                public static ALIGN_DECIMAL: int
                public static ALIGN_BAR: int
                public static LEAD_NONE: int
                public static LEAD_DOTS: int
                public static LEAD_HYPHENS: int
                public static LEAD_UNDERLINE: int
                public static LEAD_THICKLINE: int
                public static LEAD_EQUALS: int
                public constructor(arg0: float)
                public constructor(arg0: float, arg1: int, arg2: int)
                public getPosition(): float
                public getAlignment(): int
                public getLeader(): int
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface TabableView {
                getTabbedSpan(arg0: float, arg1: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda): float
                getPartialSpan(arg0: int, arg1: int): float
            }
            abstract class TableView extends javax.swing.text.BoxView {
                public constructor(arg0: javax.swing.text.Element)
                protected createTableRow(arg0: javax.swing.text.Element): javax.swing.text.TableView$TableRow
                protected createTableCell(arg0: javax.swing.text.Element): javax.swing.text.TableView$TableCell
                protected forwardUpdate(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape, arg3: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public replace(arg0: int, arg1: int, arg2: javax.swing.text.View[]): void
                protected layoutColumns(arg0: int, arg1: int[], arg2: int[], arg3: javax.swing.SizeRequirements[]): void
                protected layoutMinorAxis(arg0: int, arg1: int, arg2: int[], arg3: int[]): void
                protected calculateMinorAxisRequirements(arg0: int, arg1: javax.swing.SizeRequirements): javax.swing.SizeRequirements
                protected getViewAtPosition(arg0: int, arg1: java.awt.Rectangle): javax.swing.text.View
                public static class: java.lang.Class<any>
            }
            abstract class TextAction extends javax.swing.AbstractAction {
                public constructor(arg0: java.lang.String | string)
                protected getTextComponent(arg0: java.awt.event.ActionEvent): javax.swing.text.JTextComponent
                public static augmentList(arg0: javax.swing.Action[], arg1: javax.swing.Action[]): javax.swing.Action[]
                protected getFocusedComponent(): javax.swing.text.JTextComponent
                public static class: java.lang.Class<any>
            }
            class TextLayoutStrategy extends javax.swing.text.FlowView$FlowStrategy {
                public constructor()
                public insertUpdate(arg0: javax.swing.text.FlowView, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Rectangle): void
                public removeUpdate(arg0: javax.swing.text.FlowView, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Rectangle): void
                public changedUpdate(arg0: javax.swing.text.FlowView, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Rectangle): void
                public layout(arg0: javax.swing.text.FlowView): void
                protected layoutRow(arg0: javax.swing.text.FlowView, arg1: int, arg2: int): int
                protected adjustRow(arg0: javax.swing.text.FlowView, arg1: int, arg2: int, arg3: int): void
                protected createView(arg0: javax.swing.text.FlowView, arg1: int, arg2: int, arg3: int): javax.swing.text.View
                public static class: java.lang.Class<any>
            }
            class Utilities {
                public constructor()
                public static drawTabbedText(arg0: javax.swing.text.Segment, arg1: int, arg2: int, arg3: java.awt.Graphics, arg4: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg5: int): int
                public static getTabbedTextWidth(arg0: javax.swing.text.Segment, arg1: java.awt.FontMetrics, arg2: int, arg3: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg4: int): int
                public static getTabbedTextOffset(arg0: javax.swing.text.Segment, arg1: java.awt.FontMetrics, arg2: int, arg3: int, arg4: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg5: int): int
                public static getTabbedTextOffset(arg0: javax.swing.text.Segment, arg1: java.awt.FontMetrics, arg2: int, arg3: int, arg4: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg5: int, arg6: boolean): int
                public static getBreakLocation(arg0: javax.swing.text.Segment, arg1: java.awt.FontMetrics, arg2: int, arg3: int, arg4: javax.swing.text.TabExpander | javax.swing.text.TabExpander$$Lambda, arg5: int): int
                public static getRowStart(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): int
                public static getRowEnd(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): int
                public static getPositionAbove(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int): int
                public static getPositionBelow(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int, arg2: int): int
                public static getWordStart(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): int
                public static getWordEnd(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): int
                public static getNextWord(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): int
                public static getPreviousWord(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): int
                public static getParagraphElement(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: int): javax.swing.text.Element
                public static class: java.lang.Class<any>
            }
            abstract class View implements javax.swing.SwingConstants {
                public static BadBreakWeight: int
                public static GoodBreakWeight: int
                public static ExcellentBreakWeight: int
                public static ForcedBreakWeight: int
                public static X_AXIS: int
                public static Y_AXIS: int
                public constructor(arg0: javax.swing.text.Element)
                public getParent(): javax.swing.text.View
                public isVisible(): boolean
                public getPreferredSpan(arg0: int): float
                public getMinimumSpan(arg0: int): float
                public getMaximumSpan(arg0: int): float
                public preferenceChanged(arg0: javax.swing.text.View, arg1: boolean, arg2: boolean): void
                public getAlignment(arg0: int): float
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public setParent(arg0: javax.swing.text.View): void
                public getViewCount(): int
                public getView(arg0: int): javax.swing.text.View
                public removeAll(): void
                public remove(arg0: int): void
                public insert(arg0: int, arg1: javax.swing.text.View): void
                public append(arg0: javax.swing.text.View): void
                public replace(arg0: int, arg1: int, arg2: javax.swing.text.View[]): void
                public getViewIndex(arg0: int, arg1: javax.swing.text.Position$Bias): int
                public getChildAllocation(arg0: int, arg1: java.awt.Shape): java.awt.Shape
                public getNextVisualPositionFrom(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: java.awt.Shape, arg3: int, arg4: javax.swing.text.Position$Bias[]): int
                public modelToView(arg0: int, arg1: java.awt.Shape, arg2: javax.swing.text.Position$Bias): java.awt.Shape
                public modelToView(arg0: int, arg1: javax.swing.text.Position$Bias, arg2: int, arg3: javax.swing.text.Position$Bias, arg4: java.awt.Shape): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape, arg3: javax.swing.text.Position$Bias[]): int
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public getDocument(): javax.swing.text.Document
                public getStartOffset(): int
                public getEndOffset(): int
                public getElement(): javax.swing.text.Element
                public getGraphics(): java.awt.Graphics
                public getAttributes(): javax.swing.text.AttributeSet
                public breakView(arg0: int, arg1: int, arg2: float, arg3: float): javax.swing.text.View
                public createFragment(arg0: int, arg1: int): javax.swing.text.View
                public getBreakWeight(arg0: int, arg1: float, arg2: float): int
                public getResizeWeight(arg0: int): int
                public setSize(arg0: float, arg1: float): void
                public getContainer(): java.awt.Container
                public getViewFactory(): javax.swing.text.ViewFactory
                public getToolTipText(arg0: float, arg1: float, arg2: java.awt.Shape): string
                public getViewIndex(arg0: float, arg1: float, arg2: java.awt.Shape): int
                protected updateChildren(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): boolean
                protected forwardUpdate(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape, arg3: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                protected forwardUpdateToView(arg0: javax.swing.text.View, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape, arg3: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                protected updateLayout(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: java.awt.Shape): void
                public modelToView(arg0: int, arg1: java.awt.Shape): java.awt.Shape
                public viewToModel(arg0: float, arg1: float, arg2: java.awt.Shape): int
                public static class: java.lang.Class<any>
            }
            interface ViewFactory {
                create(arg0: javax.swing.text.Element): javax.swing.text.View
            }
            interface ViewFactory$$Lambda {
                (arg0: javax.swing.text.Element): javax.swing.text.View
            }
            class WhitespaceBasedBreakIterator extends java.text.BreakIterator {
                public setText(arg0: java.text.CharacterIterator): void
                public getText(): java.text.CharacterIterator
                public first(): int
                public last(): int
                public current(): int
                public next(): int
                public previous(): int
                public next(arg0: int): int
                public following(arg0: int): int
                public preceding(arg0: int): int
                public static class: java.lang.Class<any>
            }
            class WrappedPlainView extends javax.swing.text.BoxView implements javax.swing.text.TabExpander {
                public constructor(arg0: javax.swing.text.Element)
                public constructor(arg0: javax.swing.text.Element, arg1: boolean)
                protected getTabSize(): int
                protected drawLine(arg0: int, arg1: int, arg2: java.awt.Graphics, arg3: int, arg4: int): void
                protected drawUnselectedText(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): int
                protected drawSelectedText(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): int
                protected getLineBuffer(): javax.swing.text.Segment
                protected calculateBreakPosition(arg0: int, arg1: int): int
                protected loadChildren(arg0: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public nextTabStop(arg0: float, arg1: int): float
                public paint(arg0: java.awt.Graphics, arg1: java.awt.Shape): void
                public setSize(arg0: float, arg1: float): void
                public getPreferredSpan(arg0: int): float
                public getMinimumSpan(arg0: int): float
                public getMaximumSpan(arg0: int): float
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public changedUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public static class: java.lang.Class<any>
            }
            class WrappedPlainView$$Lambda extends javax.swing.text.BoxView implements javax.swing.text.TabExpander {
                public constructor(arg0: javax.swing.text.Element)
            }
            class ZoneView extends javax.swing.text.BoxView {
                public constructor(arg0: javax.swing.text.Element, arg1: int)
                public getMaximumZoneSize(): int
                public setMaximumZoneSize(arg0: int): void
                public getMaxZonesLoaded(): int
                public setMaxZonesLoaded(arg0: int): void
                protected zoneWasLoaded(arg0: javax.swing.text.View): void
                protected unloadZone(arg0: javax.swing.text.View): void
                protected isZoneLoaded(arg0: javax.swing.text.View): boolean
                protected createZone(arg0: int, arg1: int): javax.swing.text.View
                protected loadChildren(arg0: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                protected getViewIndexAtPosition(arg0: int): int
                protected updateChildren(arg0: javax.swing.event.DocumentEvent$ElementChange, arg1: javax.swing.event.DocumentEvent, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): boolean
                public insertUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public removeUpdate(arg0: javax.swing.event.DocumentEvent, arg1: java.awt.Shape, arg2: javax.swing.text.ViewFactory | javax.swing.text.ViewFactory$$Lambda): void
                public static class: java.lang.Class<any>
            }
        }
        namespace tree {
            abstract class AbstractLayoutCache implements javax.swing.tree.RowMapper {
                protected nodeDimensions: javax.swing.tree.AbstractLayoutCache$NodeDimensions
                protected treeModel: javax.swing.tree.TreeModel
                protected treeSelectionModel: javax.swing.tree.TreeSelectionModel
                protected rootVisible: boolean
                protected rowHeight: int
                public constructor()
                public setNodeDimensions(arg0: javax.swing.tree.AbstractLayoutCache$NodeDimensions): void
                public getNodeDimensions(): javax.swing.tree.AbstractLayoutCache$NodeDimensions
                public setModel(arg0: javax.swing.tree.TreeModel): void
                public getModel(): javax.swing.tree.TreeModel
                public setRootVisible(arg0: boolean): void
                public isRootVisible(): boolean
                public setRowHeight(arg0: int): void
                public getRowHeight(): int
                public setSelectionModel(arg0: javax.swing.tree.TreeSelectionModel): void
                public getSelectionModel(): javax.swing.tree.TreeSelectionModel
                public getPreferredHeight(): int
                public getPreferredWidth(arg0: java.awt.Rectangle): int
                public isExpanded(arg0: javax.swing.tree.TreePath): boolean
                public getBounds(arg0: javax.swing.tree.TreePath, arg1: java.awt.Rectangle): java.awt.Rectangle
                public getPathForRow(arg0: int): javax.swing.tree.TreePath
                public getRowForPath(arg0: javax.swing.tree.TreePath): int
                public getPathClosestTo(arg0: int, arg1: int): javax.swing.tree.TreePath
                public getVisiblePathsFrom(arg0: javax.swing.tree.TreePath): java.util.Enumeration<javax.swing.tree.TreePath>
                public getVisibleChildCount(arg0: javax.swing.tree.TreePath): int
                public setExpandedState(arg0: javax.swing.tree.TreePath, arg1: boolean): void
                public getExpandedState(arg0: javax.swing.tree.TreePath): boolean
                public getRowCount(): int
                public invalidateSizes(): void
                public invalidatePathBounds(arg0: javax.swing.tree.TreePath): void
                public treeNodesChanged(arg0: javax.swing.event.TreeModelEvent): void
                public treeNodesInserted(arg0: javax.swing.event.TreeModelEvent): void
                public treeNodesRemoved(arg0: javax.swing.event.TreeModelEvent): void
                public treeStructureChanged(arg0: javax.swing.event.TreeModelEvent): void
                public getRowsForPaths(arg0: javax.swing.tree.TreePath[]): int[]
                protected getNodeDimensions(arg0: java.lang.Object, arg1: int, arg2: int, arg3: boolean, arg4: java.awt.Rectangle): java.awt.Rectangle
                protected isFixedRowHeight(): boolean
                public static class: java.lang.Class<any>
            }
            abstract class AbstractLayoutCache$$Lambda implements javax.swing.tree.RowMapper {
                protected nodeDimensions: javax.swing.tree.AbstractLayoutCache$NodeDimensions
            }
            class DefaultMutableTreeNode implements java.lang.Cloneable , javax.swing.tree.MutableTreeNode , java.io.Serializable {
                public static EMPTY_ENUMERATION: java.util.Enumeration<javax.swing.tree.TreeNode>
                protected parent: javax.swing.tree.MutableTreeNode
                protected children: java.util.Vector
                protected userObject: java.lang.Object
                protected allowsChildren: boolean
                public constructor()
                public constructor(arg0: java.lang.Object)
                public constructor(arg0: java.lang.Object, arg1: boolean)
                public insert(arg0: javax.swing.tree.MutableTreeNode, arg1: int): void
                public remove(arg0: int): void
                public setParent(arg0: javax.swing.tree.MutableTreeNode): void
                public getParent(): javax.swing.tree.TreeNode
                public getChildAt(arg0: int): javax.swing.tree.TreeNode
                public getChildCount(): int
                public getIndex(arg0: javax.swing.tree.TreeNode): int
                public children(): java.util.Enumeration
                public setAllowsChildren(arg0: boolean): void
                public getAllowsChildren(): boolean
                public setUserObject(arg0: java.lang.Object): void
                public getUserObject(): java.lang.Object
                public removeFromParent(): void
                public remove(arg0: javax.swing.tree.MutableTreeNode): void
                public removeAllChildren(): void
                public add(arg0: javax.swing.tree.MutableTreeNode): void
                public isNodeAncestor(arg0: javax.swing.tree.TreeNode): boolean
                public isNodeDescendant(arg0: javax.swing.tree.DefaultMutableTreeNode): boolean
                public getSharedAncestor(arg0: javax.swing.tree.DefaultMutableTreeNode): javax.swing.tree.TreeNode
                public isNodeRelated(arg0: javax.swing.tree.DefaultMutableTreeNode): boolean
                public getDepth(): int
                public getLevel(): int
                public getPath(): javax.swing.tree.TreeNode[]
                protected getPathToRoot(arg0: javax.swing.tree.TreeNode, arg1: int): javax.swing.tree.TreeNode[]
                public getUserObjectPath(): java.lang.Object[]
                public getRoot(): javax.swing.tree.TreeNode
                public isRoot(): boolean
                public getNextNode(): javax.swing.tree.DefaultMutableTreeNode
                public getPreviousNode(): javax.swing.tree.DefaultMutableTreeNode
                public preorderEnumeration(): java.util.Enumeration
                public postorderEnumeration(): java.util.Enumeration
                public breadthFirstEnumeration(): java.util.Enumeration
                public depthFirstEnumeration(): java.util.Enumeration
                public pathFromAncestorEnumeration(arg0: javax.swing.tree.TreeNode): java.util.Enumeration
                public isNodeChild(arg0: javax.swing.tree.TreeNode): boolean
                public getFirstChild(): javax.swing.tree.TreeNode
                public getLastChild(): javax.swing.tree.TreeNode
                public getChildAfter(arg0: javax.swing.tree.TreeNode): javax.swing.tree.TreeNode
                public getChildBefore(arg0: javax.swing.tree.TreeNode): javax.swing.tree.TreeNode
                public isNodeSibling(arg0: javax.swing.tree.TreeNode): boolean
                public getSiblingCount(): int
                public getNextSibling(): javax.swing.tree.DefaultMutableTreeNode
                public getPreviousSibling(): javax.swing.tree.DefaultMutableTreeNode
                public isLeaf(): boolean
                public getFirstLeaf(): javax.swing.tree.DefaultMutableTreeNode
                public getLastLeaf(): javax.swing.tree.DefaultMutableTreeNode
                public getNextLeaf(): javax.swing.tree.DefaultMutableTreeNode
                public getPreviousLeaf(): javax.swing.tree.DefaultMutableTreeNode
                public getLeafCount(): int
                public toString(): string
                public clone(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class DefaultTreeCellEditor implements java.awt.event.ActionListener , javax.swing.tree.TreeCellEditor , javax.swing.event.TreeSelectionListener {
                protected realEditor: javax.swing.tree.TreeCellEditor
                protected renderer: javax.swing.tree.DefaultTreeCellRenderer
                protected editingContainer: java.awt.Container
                protected editingComponent: java.awt.Component
                protected canEdit: boolean
                protected offset: int
                protected tree: javax.swing.JTree
                protected lastPath: javax.swing.tree.TreePath
                protected timer: javax.swing.Timer
                protected lastRow: int
                protected borderSelectionColor: java.awt.Color
                protected editingIcon: javax.swing.Icon
                protected font: java.awt.Font
                public constructor(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.DefaultTreeCellRenderer | javax.swing.tree.DefaultTreeCellRenderer$$Lambda)
                public constructor(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: javax.swing.tree.DefaultTreeCellRenderer | javax.swing.tree.DefaultTreeCellRenderer$$Lambda, arg2: javax.swing.tree.TreeCellEditor)
                public setBorderSelectionColor(arg0: java.awt.Color): void
                public getBorderSelectionColor(): java.awt.Color
                public setFont(arg0: java.awt.Font): void
                public getFont(): java.awt.Font
                public getTreeCellEditorComponent(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int): java.awt.Component
                public getCellEditorValue(): java.lang.Object
                public isCellEditable(arg0: java.util.EventObject): boolean
                public shouldSelectCell(arg0: java.util.EventObject): boolean
                public stopCellEditing(): boolean
                public cancelCellEditing(): void
                public addCellEditorListener(arg0: javax.swing.event.CellEditorListener): void
                public removeCellEditorListener(arg0: javax.swing.event.CellEditorListener): void
                public getCellEditorListeners(): javax.swing.event.CellEditorListener[]
                public valueChanged(arg0: javax.swing.event.TreeSelectionEvent): void
                public actionPerformed(arg0: java.awt.event.ActionEvent): void
                protected setTree(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda): void
                protected shouldStartEditingTimer(arg0: java.util.EventObject): boolean
                protected startEditingTimer(): void
                protected canEditImmediately(arg0: java.util.EventObject): boolean
                protected inHitRegion(arg0: int, arg1: int): boolean
                protected determineOffset(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int): void
                protected prepareForEditing(): void
                protected createContainer(): java.awt.Container
                protected createTreeCellEditor(): javax.swing.tree.TreeCellEditor
                public static class: java.lang.Class<any>
            }
            class DefaultTreeCellRenderer extends javax.swing.JLabel implements javax.swing.tree.TreeCellRenderer {
                protected selected: boolean
                protected hasFocus: boolean
                protected closedIcon: javax.swing.Icon
                protected leafIcon: javax.swing.Icon
                protected openIcon: javax.swing.Icon
                protected textSelectionColor: java.awt.Color
                protected textNonSelectionColor: java.awt.Color
                protected backgroundSelectionColor: java.awt.Color
                protected backgroundNonSelectionColor: java.awt.Color
                protected borderSelectionColor: java.awt.Color
                public constructor()
                public updateUI(): void
                public getDefaultOpenIcon(): javax.swing.Icon
                public getDefaultClosedIcon(): javax.swing.Icon
                public getDefaultLeafIcon(): javax.swing.Icon
                public setOpenIcon(arg0: javax.swing.Icon): void
                public getOpenIcon(): javax.swing.Icon
                public setClosedIcon(arg0: javax.swing.Icon): void
                public getClosedIcon(): javax.swing.Icon
                public setLeafIcon(arg0: javax.swing.Icon): void
                public getLeafIcon(): javax.swing.Icon
                public setTextSelectionColor(arg0: java.awt.Color): void
                public getTextSelectionColor(): java.awt.Color
                public setTextNonSelectionColor(arg0: java.awt.Color): void
                public getTextNonSelectionColor(): java.awt.Color
                public setBackgroundSelectionColor(arg0: java.awt.Color): void
                public getBackgroundSelectionColor(): java.awt.Color
                public setBackgroundNonSelectionColor(arg0: java.awt.Color): void
                public getBackgroundNonSelectionColor(): java.awt.Color
                public setBorderSelectionColor(arg0: java.awt.Color): void
                public getBorderSelectionColor(): java.awt.Color
                public setFont(arg0: java.awt.Font): void
                public getFont(): java.awt.Font
                public setBackground(arg0: java.awt.Color): void
                public getTreeCellRendererComponent(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int, arg6: boolean): java.awt.Component
                public paint(arg0: java.awt.Graphics): void
                public getPreferredSize(): java.awt.Dimension
                public validate(): void
                public invalidate(): void
                public revalidate(): void
                public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
                public repaint(arg0: java.awt.Rectangle): void
                public repaint(): void
                protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: byte, arg2: byte): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: char, arg2: char): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: short, arg2: short): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: int, arg2: int): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: long, arg2: long): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: float, arg2: float): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: double, arg2: double): void
                public firePropertyChange(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
                public static class: java.lang.Class<any>
            }
            class DefaultTreeCellRenderer$$Lambda extends javax.swing.JLabel implements javax.swing.tree.TreeCellRenderer {
                protected selected: boolean
            }
            class DefaultTreeModel implements java.io.Serializable , javax.swing.tree.TreeModel {
                protected root: javax.swing.tree.TreeNode
                protected listenerList: javax.swing.event.EventListenerList
                protected asksAllowsChildren: boolean
                public constructor(arg0: javax.swing.tree.TreeNode)
                public constructor(arg0: javax.swing.tree.TreeNode, arg1: boolean)
                public setAsksAllowsChildren(arg0: boolean): void
                public asksAllowsChildren(): boolean
                public setRoot(arg0: javax.swing.tree.TreeNode): void
                public getRoot(): java.lang.Object
                public getIndexOfChild(arg0: java.lang.Object, arg1: java.lang.Object): int
                public getChild(arg0: java.lang.Object, arg1: int): java.lang.Object
                public getChildCount(arg0: java.lang.Object): int
                public isLeaf(arg0: java.lang.Object): boolean
                public reload(): void
                public valueForPathChanged(arg0: javax.swing.tree.TreePath, arg1: java.lang.Object): void
                public insertNodeInto(arg0: javax.swing.tree.MutableTreeNode, arg1: javax.swing.tree.MutableTreeNode, arg2: int): void
                public removeNodeFromParent(arg0: javax.swing.tree.MutableTreeNode): void
                public nodeChanged(arg0: javax.swing.tree.TreeNode): void
                public reload(arg0: javax.swing.tree.TreeNode): void
                public nodesWereInserted(arg0: javax.swing.tree.TreeNode, arg1: int[]): void
                public nodesWereRemoved(arg0: javax.swing.tree.TreeNode, arg1: int[], arg2: java.lang.Object[]): void
                public nodesChanged(arg0: javax.swing.tree.TreeNode, arg1: int[]): void
                public nodeStructureChanged(arg0: javax.swing.tree.TreeNode): void
                public getPathToRoot(arg0: javax.swing.tree.TreeNode): javax.swing.tree.TreeNode[]
                protected getPathToRoot(arg0: javax.swing.tree.TreeNode, arg1: int): javax.swing.tree.TreeNode[]
                public addTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                public removeTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                public getTreeModelListeners(): javax.swing.event.TreeModelListener[]
                protected fireTreeNodesChanged(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                protected fireTreeNodesInserted(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                protected fireTreeNodesRemoved(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                protected fireTreeStructureChanged(arg0: java.lang.Object, arg1: java.lang.Object[], arg2: int[], arg3: java.lang.Object[]): void
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public static class: java.lang.Class<any>
            }
            class DefaultTreeSelectionModel implements java.lang.Cloneable , java.io.Serializable , javax.swing.tree.TreeSelectionModel {
                public static SELECTION_MODE_PROPERTY: string
                protected changeSupport: javax.swing.event.SwingPropertyChangeSupport
                protected selection: javax.swing.tree.TreePath[]
                protected listenerList: javax.swing.event.EventListenerList
                protected rowMapper: javax.swing.tree.RowMapper
                protected listSelectionModel: javax.swing.DefaultListSelectionModel
                protected selectionMode: int
                protected leadPath: javax.swing.tree.TreePath
                protected leadIndex: int
                protected leadRow: int
                public constructor()
                public setRowMapper(arg0: javax.swing.tree.RowMapper | javax.swing.tree.RowMapper$$Lambda): void
                public getRowMapper(): javax.swing.tree.RowMapper
                public setSelectionMode(arg0: int): void
                public getSelectionMode(): int
                public setSelectionPath(arg0: javax.swing.tree.TreePath): void
                public setSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
                public addSelectionPath(arg0: javax.swing.tree.TreePath): void
                public addSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
                public removeSelectionPath(arg0: javax.swing.tree.TreePath): void
                public removeSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
                public getSelectionPath(): javax.swing.tree.TreePath
                public getSelectionPaths(): javax.swing.tree.TreePath[]
                public getSelectionCount(): int
                public isPathSelected(arg0: javax.swing.tree.TreePath): boolean
                public isSelectionEmpty(): boolean
                public clearSelection(): void
                public addTreeSelectionListener(arg0: javax.swing.event.TreeSelectionListener): void
                public removeTreeSelectionListener(arg0: javax.swing.event.TreeSelectionListener): void
                public getTreeSelectionListeners(): javax.swing.event.TreeSelectionListener[]
                protected fireValueChanged(arg0: javax.swing.event.TreeSelectionEvent): void
                public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
                public getSelectionRows<T extends java.util.EventListener>(): int[]
                public getMinSelectionRow<T extends java.util.EventListener>(): int
                public getMaxSelectionRow<T extends java.util.EventListener>(): int
                public isRowSelected<T extends java.util.EventListener>(arg0: int): boolean
                public resetRowSelection<T extends java.util.EventListener>(): void
                public getLeadSelectionRow<T extends java.util.EventListener>(): int
                public getLeadSelectionPath<T extends java.util.EventListener>(): javax.swing.tree.TreePath
                public addPropertyChangeListener<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeListener): void
                public removePropertyChangeListener<T extends java.util.EventListener>(arg0: java.beans.PropertyChangeListener): void
                public getPropertyChangeListeners<T extends java.util.EventListener>(): java.beans.PropertyChangeListener[]
                protected insureRowContinuity<T extends java.util.EventListener>(): void
                protected arePathsContiguous<T extends java.util.EventListener>(arg0: javax.swing.tree.TreePath[]): boolean
                protected canPathsBeAdded<T extends java.util.EventListener>(arg0: javax.swing.tree.TreePath[]): boolean
                protected canPathsBeRemoved<T extends java.util.EventListener>(arg0: javax.swing.tree.TreePath[]): boolean
                protected notifyPathChange<T extends java.util.EventListener>(arg0: java.util.Vector<any>, arg1: javax.swing.tree.TreePath): void
                protected updateLeadIndex<T extends java.util.EventListener>(): void
                protected insureUniqueness<T extends java.util.EventListener>(): void
                public toString<T extends java.util.EventListener>(): string
                public clone<T extends java.util.EventListener>(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class ExpandVetoException extends java.lang.Exception {
                protected event: javax.swing.event.TreeExpansionEvent
                public constructor(arg0: javax.swing.event.TreeExpansionEvent)
                public constructor(arg0: javax.swing.event.TreeExpansionEvent, arg1: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class FixedHeightLayoutCache extends javax.swing.tree.AbstractLayoutCache {
                public constructor()
                public setModel(arg0: javax.swing.tree.TreeModel): void
                public setRootVisible(arg0: boolean): void
                public setRowHeight(arg0: int): void
                public getRowCount(): int
                public invalidatePathBounds(arg0: javax.swing.tree.TreePath): void
                public invalidateSizes(): void
                public isExpanded(arg0: javax.swing.tree.TreePath): boolean
                public getBounds(arg0: javax.swing.tree.TreePath, arg1: java.awt.Rectangle): java.awt.Rectangle
                public getPathForRow(arg0: int): javax.swing.tree.TreePath
                public getRowForPath(arg0: javax.swing.tree.TreePath): int
                public getPathClosestTo(arg0: int, arg1: int): javax.swing.tree.TreePath
                public getVisibleChildCount(arg0: javax.swing.tree.TreePath): int
                public getVisiblePathsFrom(arg0: javax.swing.tree.TreePath): java.util.Enumeration<javax.swing.tree.TreePath>
                public setExpandedState(arg0: javax.swing.tree.TreePath, arg1: boolean): void
                public getExpandedState(arg0: javax.swing.tree.TreePath): boolean
                public treeNodesChanged(arg0: javax.swing.event.TreeModelEvent): void
                public treeNodesInserted(arg0: javax.swing.event.TreeModelEvent): void
                public treeNodesRemoved(arg0: javax.swing.event.TreeModelEvent): void
                public treeStructureChanged(arg0: javax.swing.event.TreeModelEvent): void
                public static class: java.lang.Class<any>
            }
            interface MutableTreeNode extends javax.swing.tree.TreeNode {
                insert(arg0: javax.swing.tree.MutableTreeNode, arg1: int): void
                remove(arg0: int): void
                remove(arg0: javax.swing.tree.MutableTreeNode): void
                setUserObject(arg0: java.lang.Object): void
                removeFromParent(): void
                setParent(arg0: javax.swing.tree.MutableTreeNode): void
            }
            interface RowMapper {
                getRowsForPaths(arg0: javax.swing.tree.TreePath[]): int[]
            }
            interface RowMapper$$Lambda {
                (arg0: javax.swing.tree.TreePath[]): int[]
            }
            interface TreeCellEditor extends javax.swing.CellEditor {
                getTreeCellEditorComponent(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int): java.awt.Component
            }
            interface TreeCellRenderer {
                getTreeCellRendererComponent(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int, arg6: boolean): java.awt.Component
            }
            interface TreeCellRenderer$$Lambda {
                (arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int, arg6: boolean): java.awt.Component
            }
            interface TreeModel {
                getRoot(): java.lang.Object
                getChild(arg0: java.lang.Object, arg1: int): java.lang.Object
                getChildCount(arg0: java.lang.Object): int
                isLeaf(arg0: java.lang.Object): boolean
                valueForPathChanged(arg0: javax.swing.tree.TreePath, arg1: java.lang.Object): void
                getIndexOfChild(arg0: java.lang.Object, arg1: java.lang.Object): int
                addTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
                removeTreeModelListener(arg0: javax.swing.event.TreeModelListener): void
            }
            interface TreeNode {
                getChildAt(arg0: int): javax.swing.tree.TreeNode
                getChildCount(): int
                getParent(): javax.swing.tree.TreeNode
                getIndex(arg0: javax.swing.tree.TreeNode): int
                getAllowsChildren(): boolean
                isLeaf(): boolean
                children(): java.util.Enumeration
            }
            class TreePath implements java.io.Serializable {
                public constructor(arg0: java.lang.Object[])
                public constructor(arg0: java.lang.Object)
                protected constructor(arg0: javax.swing.tree.TreePath, arg1: java.lang.Object)
                protected constructor(arg0: java.lang.Object[], arg1: int)
                protected constructor()
                public getPath(): java.lang.Object[]
                public getLastPathComponent(): java.lang.Object
                public getPathCount(): int
                public getPathComponent(arg0: int): java.lang.Object
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public isDescendant(arg0: javax.swing.tree.TreePath): boolean
                public pathByAddingChild(arg0: java.lang.Object): javax.swing.tree.TreePath
                public getParentPath(): javax.swing.tree.TreePath
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface TreeSelectionModel {
                SINGLE_TREE_SELECTION: int
                CONTIGUOUS_TREE_SELECTION: int
                DISCONTIGUOUS_TREE_SELECTION: int
                setSelectionMode(arg0: int): void
                getSelectionMode(): int
                setSelectionPath(arg0: javax.swing.tree.TreePath): void
                setSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
                addSelectionPath(arg0: javax.swing.tree.TreePath): void
                addSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
                removeSelectionPath(arg0: javax.swing.tree.TreePath): void
                removeSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
                getSelectionPath(): javax.swing.tree.TreePath
                getSelectionPaths(): javax.swing.tree.TreePath[]
                getSelectionCount(): int
                isPathSelected(arg0: javax.swing.tree.TreePath): boolean
                isSelectionEmpty(): boolean
                clearSelection(): void
                setRowMapper(arg0: javax.swing.tree.RowMapper | javax.swing.tree.RowMapper$$Lambda): void
                getRowMapper(): javax.swing.tree.RowMapper
                getSelectionRows(): int[]
                getMinSelectionRow(): int
                getMaxSelectionRow(): int
                isRowSelected(arg0: int): boolean
                resetRowSelection(): void
                getLeadSelectionRow(): int
                getLeadSelectionPath(): javax.swing.tree.TreePath
                addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
                addTreeSelectionListener(arg0: javax.swing.event.TreeSelectionListener): void
                removeTreeSelectionListener(arg0: javax.swing.event.TreeSelectionListener): void
            }
            class VariableHeightLayoutCache extends javax.swing.tree.AbstractLayoutCache {
                public constructor()
                public setModel(arg0: javax.swing.tree.TreeModel): void
                public setRootVisible(arg0: boolean): void
                public setRowHeight(arg0: int): void
                public setNodeDimensions(arg0: javax.swing.tree.AbstractLayoutCache$NodeDimensions): void
                public setExpandedState(arg0: javax.swing.tree.TreePath, arg1: boolean): void
                public getExpandedState(arg0: javax.swing.tree.TreePath): boolean
                public getBounds(arg0: javax.swing.tree.TreePath, arg1: java.awt.Rectangle): java.awt.Rectangle
                public getPathForRow(arg0: int): javax.swing.tree.TreePath
                public getRowForPath(arg0: javax.swing.tree.TreePath): int
                public getRowCount(): int
                public invalidatePathBounds(arg0: javax.swing.tree.TreePath): void
                public getPreferredHeight(): int
                public getPreferredWidth(arg0: java.awt.Rectangle): int
                public getPathClosestTo(arg0: int, arg1: int): javax.swing.tree.TreePath
                public getVisiblePathsFrom(arg0: javax.swing.tree.TreePath): java.util.Enumeration<javax.swing.tree.TreePath>
                public getVisibleChildCount(arg0: javax.swing.tree.TreePath): int
                public invalidateSizes(): void
                public isExpanded(arg0: javax.swing.tree.TreePath): boolean
                public treeNodesChanged(arg0: javax.swing.event.TreeModelEvent): void
                public treeNodesInserted(arg0: javax.swing.event.TreeModelEvent): void
                public treeNodesRemoved(arg0: javax.swing.event.TreeModelEvent): void
                public treeStructureChanged(arg0: javax.swing.event.TreeModelEvent): void
                public static class: java.lang.Class<any>
            }
        }
        namespace undo {
            class AbstractUndoableEdit implements javax.swing.undo.UndoableEdit , java.io.Serializable {
                protected static UndoName: string
                protected static RedoName: string
                public constructor()
                public die(): void
                public undo(): void
                public canUndo(): boolean
                public redo(): void
                public canRedo(): boolean
                public addEdit(arg0: javax.swing.undo.UndoableEdit): boolean
                public replaceEdit(arg0: javax.swing.undo.UndoableEdit): boolean
                public isSignificant(): boolean
                public getPresentationName(): string
                public getUndoPresentationName(): string
                public getRedoPresentationName(): string
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class CannotRedoException extends java.lang.RuntimeException {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class CannotUndoException extends java.lang.RuntimeException {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class CompoundEdit extends javax.swing.undo.AbstractUndoableEdit {
                protected edits: java.util.Vector<javax.swing.undo.UndoableEdit>
                public constructor()
                public undo(): void
                public redo(): void
                protected lastEdit(): javax.swing.undo.UndoableEdit
                public die(): void
                public addEdit(arg0: javax.swing.undo.UndoableEdit): boolean
                public end(): void
                public canUndo(): boolean
                public canRedo(): boolean
                public isInProgress(): boolean
                public isSignificant(): boolean
                public getPresentationName(): string
                public getUndoPresentationName(): string
                public getRedoPresentationName(): string
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class StateEdit extends javax.swing.undo.AbstractUndoableEdit {
                protected static RCSID: string
                protected object: javax.swing.undo.StateEditable
                protected preState: java.util.Hashtable<java.lang.Object, java.lang.Object>
                protected postState: java.util.Hashtable<java.lang.Object, java.lang.Object>
                protected undoRedoName: string
                public constructor(arg0: javax.swing.undo.StateEditable)
                public constructor(arg0: javax.swing.undo.StateEditable, arg1: java.lang.String | string)
                protected init(arg0: javax.swing.undo.StateEditable, arg1: java.lang.String | string): void
                public end(): void
                public undo(): void
                public redo(): void
                public getPresentationName(): string
                protected removeRedundantState(): void
                public static class: java.lang.Class<any>
            }
            interface StateEditable {
                RCSID: string
                storeState(arg0: java.util.Hashtable<java.lang.Object, java.lang.Object>): void
                restoreState(arg0: java.util.Hashtable<any, any>): void
            }
            class UndoManager extends javax.swing.undo.CompoundEdit implements javax.swing.event.UndoableEditListener {
                public constructor()
                public getLimit(): int
                public discardAllEdits(): void
                protected trimForLimit(): void
                protected trimEdits(arg0: int, arg1: int): void
                public setLimit(arg0: int): void
                protected editToBeUndone(): javax.swing.undo.UndoableEdit
                protected editToBeRedone(): javax.swing.undo.UndoableEdit
                protected undoTo(arg0: javax.swing.undo.UndoableEdit): void
                protected redoTo(arg0: javax.swing.undo.UndoableEdit): void
                public undoOrRedo(): void
                public canUndoOrRedo(): boolean
                public undo(): void
                public canUndo(): boolean
                public redo(): void
                public canRedo(): boolean
                public addEdit(arg0: javax.swing.undo.UndoableEdit): boolean
                public end(): void
                public getUndoOrRedoPresentationName(): string
                public getUndoPresentationName(): string
                public getRedoPresentationName(): string
                public undoableEditHappened(arg0: javax.swing.event.UndoableEditEvent): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
            interface UndoableEdit {
                undo(): void
                canUndo(): boolean
                redo(): void
                canRedo(): boolean
                die(): void
                addEdit(arg0: javax.swing.undo.UndoableEdit): boolean
                replaceEdit(arg0: javax.swing.undo.UndoableEdit): boolean
                isSignificant(): boolean
                getPresentationName(): string
                getUndoPresentationName(): string
                getRedoPresentationName(): string
            }
            class UndoableEditSupport {
                protected updateLevel: int
                protected compoundEdit: javax.swing.undo.CompoundEdit
                protected listeners: java.util.Vector<javax.swing.event.UndoableEditListener>
                protected realSource: java.lang.Object
                public constructor()
                public constructor(arg0: java.lang.Object)
                public addUndoableEditListener(arg0: javax.swing.event.UndoableEditListener): void
                public removeUndoableEditListener(arg0: javax.swing.event.UndoableEditListener): void
                public getUndoableEditListeners(): javax.swing.event.UndoableEditListener[]
                protected _postEdit(arg0: javax.swing.undo.UndoableEdit): void
                public postEdit(arg0: javax.swing.undo.UndoableEdit): void
                public getUpdateLevel(): int
                public beginUpdate(): void
                protected createCompoundEdit(): javax.swing.undo.CompoundEdit
                public endUpdate(): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
        }
        abstract class AbstractAction implements javax.swing.Action , java.lang.Cloneable , java.io.Serializable {
            protected enabled: boolean
            protected changeSupport: javax.swing.event.SwingPropertyChangeSupport
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public getValue(arg0: java.lang.String | string): java.lang.Object
            public putValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
            public isEnabled(): boolean
            public setEnabled(arg0: boolean): void
            public getKeys(): java.lang.Object[]
            protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
            protected clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        abstract class AbstractButton extends javax.swing.JComponent implements java.awt.ItemSelectable , javax.swing.SwingConstants {
            public static MODEL_CHANGED_PROPERTY: string
            public static TEXT_CHANGED_PROPERTY: string
            public static MNEMONIC_CHANGED_PROPERTY: string
            public static MARGIN_CHANGED_PROPERTY: string
            public static VERTICAL_ALIGNMENT_CHANGED_PROPERTY: string
            public static HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY: string
            public static VERTICAL_TEXT_POSITION_CHANGED_PROPERTY: string
            public static HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY: string
            public static BORDER_PAINTED_CHANGED_PROPERTY: string
            public static FOCUS_PAINTED_CHANGED_PROPERTY: string
            public static ROLLOVER_ENABLED_CHANGED_PROPERTY: string
            public static CONTENT_AREA_FILLED_CHANGED_PROPERTY: string
            public static ICON_CHANGED_PROPERTY: string
            public static PRESSED_ICON_CHANGED_PROPERTY: string
            public static SELECTED_ICON_CHANGED_PROPERTY: string
            public static ROLLOVER_ICON_CHANGED_PROPERTY: string
            public static ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY: string
            public static DISABLED_ICON_CHANGED_PROPERTY: string
            public static DISABLED_SELECTED_ICON_CHANGED_PROPERTY: string
            protected model: javax.swing.ButtonModel
            protected changeListener: javax.swing.event.ChangeListener
            protected actionListener: java.awt.event.ActionListener
            protected itemListener: java.awt.event.ItemListener
            protected changeEvent: javax.swing.event.ChangeEvent
            public constructor()
            public setHideActionText(arg0: boolean): void
            public getHideActionText(): boolean
            public getText(): string
            public setText(arg0: java.lang.String | string): void
            public isSelected(): boolean
            public setSelected(arg0: boolean): void
            public doClick(): void
            public doClick(arg0: int): void
            public setMargin(arg0: java.awt.Insets): void
            public getMargin(): java.awt.Insets
            public getIcon(): javax.swing.Icon
            public setIcon(arg0: javax.swing.Icon): void
            public getPressedIcon(): javax.swing.Icon
            public setPressedIcon(arg0: javax.swing.Icon): void
            public getSelectedIcon(): javax.swing.Icon
            public setSelectedIcon(arg0: javax.swing.Icon): void
            public getRolloverIcon(): javax.swing.Icon
            public setRolloverIcon(arg0: javax.swing.Icon): void
            public getRolloverSelectedIcon(): javax.swing.Icon
            public setRolloverSelectedIcon(arg0: javax.swing.Icon): void
            public getDisabledIcon(): javax.swing.Icon
            public setDisabledIcon(arg0: javax.swing.Icon): void
            public getDisabledSelectedIcon(): javax.swing.Icon
            public setDisabledSelectedIcon(arg0: javax.swing.Icon): void
            public getVerticalAlignment(): int
            public setVerticalAlignment(arg0: int): void
            public getHorizontalAlignment(): int
            public setHorizontalAlignment(arg0: int): void
            public getVerticalTextPosition(): int
            public setVerticalTextPosition(arg0: int): void
            public getHorizontalTextPosition(): int
            public setHorizontalTextPosition(arg0: int): void
            public getIconTextGap(): int
            public setIconTextGap(arg0: int): void
            protected checkHorizontalKey(arg0: int, arg1: java.lang.String | string): int
            protected checkVerticalKey(arg0: int, arg1: java.lang.String | string): int
            public removeNotify(): void
            public setActionCommand(arg0: java.lang.String | string): void
            public getActionCommand(): string
            public setAction(arg0: javax.swing.Action): void
            public getAction(): javax.swing.Action
            protected configurePropertiesFromAction(arg0: javax.swing.Action): void
            protected actionPropertyChanged(arg0: javax.swing.Action, arg1: java.lang.String | string): void
            protected createActionPropertyChangeListener(arg0: javax.swing.Action): java.beans.PropertyChangeListener
            public isBorderPainted(): boolean
            public setBorderPainted(arg0: boolean): void
            protected paintBorder(arg0: java.awt.Graphics): void
            public isFocusPainted(): boolean
            public setFocusPainted(arg0: boolean): void
            public isContentAreaFilled(): boolean
            public setContentAreaFilled(arg0: boolean): void
            public isRolloverEnabled(): boolean
            public setRolloverEnabled(arg0: boolean): void
            public getMnemonic(): int
            public setMnemonic(arg0: int): void
            public setMnemonic(arg0: char): void
            public setDisplayedMnemonicIndex(arg0: int): void
            public getDisplayedMnemonicIndex(): int
            public setMultiClickThreshhold(arg0: long): void
            public getMultiClickThreshhold(): long
            public getModel(): javax.swing.ButtonModel
            public setModel(arg0: javax.swing.ButtonModel): void
            public getUI(): javax.swing.plaf.ButtonUI
            public setUI(arg0: javax.swing.plaf.ButtonUI): void
            public updateUI(): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public setLayout(arg0: java.awt.LayoutManager): void
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            protected createChangeListener(): javax.swing.event.ChangeListener
            protected fireActionPerformed(arg0: java.awt.event.ActionEvent): void
            protected fireItemStateChanged(arg0: java.awt.event.ItemEvent): void
            protected createActionListener(): java.awt.event.ActionListener
            protected createItemListener(): java.awt.event.ItemListener
            public setEnabled(arg0: boolean): void
            public getLabel(): string
            public setLabel(arg0: java.lang.String | string): void
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            public getSelectedObjects(): java.lang.Object[]
            protected init(arg0: java.lang.String | string, arg1: javax.swing.Icon): void
            public imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            protected paramString(): string
            public static class: java.lang.Class<any>
        }
        abstract class AbstractCellEditor implements javax.swing.CellEditor , java.io.Serializable {
            protected listenerList: javax.swing.event.EventListenerList
            protected changeEvent: javax.swing.event.ChangeEvent
            public constructor()
            public isCellEditable(arg0: java.util.EventObject): boolean
            public shouldSelectCell(arg0: java.util.EventObject): boolean
            public stopCellEditing(): boolean
            public cancelCellEditing(): void
            public addCellEditorListener(arg0: javax.swing.event.CellEditorListener): void
            public removeCellEditorListener(arg0: javax.swing.event.CellEditorListener): void
            public getCellEditorListeners(): javax.swing.event.CellEditorListener[]
            protected fireEditingStopped(): void
            protected fireEditingCanceled(): void
            public static class: java.lang.Class<any>
        }
        abstract class AbstractListModel<E> implements javax.swing.ListModel<E> , java.io.Serializable {
            protected listenerList: javax.swing.event.EventListenerList
            public constructor()
            public addListDataListener(arg0: javax.swing.event.ListDataListener): void
            public removeListDataListener(arg0: javax.swing.event.ListDataListener): void
            public getListDataListeners(): javax.swing.event.ListDataListener[]
            protected fireContentsChanged(arg0: java.lang.Object, arg1: int, arg2: int): void
            protected fireIntervalAdded(arg0: java.lang.Object, arg1: int, arg2: int): void
            protected fireIntervalRemoved(arg0: java.lang.Object, arg1: int, arg2: int): void
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public static class: java.lang.Class<any>
        }
        abstract class AbstractSpinnerModel implements javax.swing.SpinnerModel , java.io.Serializable {
            protected listenerList: javax.swing.event.EventListenerList
            public constructor()
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public static class: java.lang.Class<any>
        }
        interface Action extends java.awt.event.ActionListener {
            DEFAULT: string
            NAME: string
            SHORT_DESCRIPTION: string
            LONG_DESCRIPTION: string
            SMALL_ICON: string
            ACTION_COMMAND_KEY: string
            ACCELERATOR_KEY: string
            MNEMONIC_KEY: string
            SELECTED_KEY: string
            DISPLAYED_MNEMONIC_INDEX_KEY: string
            LARGE_ICON_KEY: string
            getValue(arg0: java.lang.String | string): java.lang.Object
            putValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
            setEnabled(arg0: boolean): void
            isEnabled(): boolean
            addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
        }
        class ActionMap implements java.io.Serializable {
            public constructor()
            public setParent(arg0: javax.swing.ActionMap): void
            public getParent(): javax.swing.ActionMap
            public put(arg0: java.lang.Object, arg1: javax.swing.Action): void
            public get(arg0: java.lang.Object): javax.swing.Action
            public remove(arg0: java.lang.Object): void
            public clear(): void
            public keys(): java.lang.Object[]
            public size(): int
            public allKeys(): java.lang.Object[]
            public static class: java.lang.Class<any>
        }
        abstract class ActionPropertyChangeListener<T extends javax.swing.JComponent> implements java.beans.PropertyChangeListener , java.io.Serializable {
            public constructor(arg0: T, arg1: javax.swing.Action)
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            protected actionPropertyChanged(arg0: T, arg1: javax.swing.Action, arg2: java.beans.PropertyChangeEvent): void
            public getTarget(): T
            public getAction(): javax.swing.Action
            public static class: java.lang.Class<any>
        }
        class AncestorNotifier implements java.awt.event.ComponentListener , java.beans.PropertyChangeListener , java.io.Serializable {
            protected fireAncestorAdded(arg0: javax.swing.JComponent, arg1: int, arg2: java.awt.Container, arg3: java.awt.Container): void
            protected fireAncestorRemoved(arg0: javax.swing.JComponent, arg1: int, arg2: java.awt.Container, arg3: java.awt.Container): void
            protected fireAncestorMoved(arg0: javax.swing.JComponent, arg1: int, arg2: java.awt.Container, arg3: java.awt.Container): void
            public componentResized(arg0: java.awt.event.ComponentEvent): void
            public componentMoved(arg0: java.awt.event.ComponentEvent): void
            public componentShown(arg0: java.awt.event.ComponentEvent): void
            public componentHidden(arg0: java.awt.event.ComponentEvent): void
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            public static class: java.lang.Class<any>
        }
        class ArrayTable implements java.lang.Cloneable {
            public put(arg0: java.lang.Object, arg1: java.lang.Object): void
            public get(arg0: java.lang.Object): java.lang.Object
            public size(): int
            public containsKey(arg0: java.lang.Object): boolean
            public remove(arg0: java.lang.Object): java.lang.Object
            public clear(): void
            public clone(): java.lang.Object
            public getKeys(arg0: java.lang.Object[]): java.lang.Object[]
            public static class: java.lang.Class<any>
        }
        class Autoscroller implements java.awt.event.ActionListener {
            public static stop(arg0: javax.swing.JComponent): void
            public static isRunning(arg0: javax.swing.JComponent): boolean
            public static processMouseDragged(arg0: java.awt.event.MouseEvent): void
            public actionPerformed(arg0: java.awt.event.ActionEvent): void
            public static class: java.lang.Class<any>
        }
        class BorderFactory {
            public static createLineBorder(arg0: java.awt.Color): javax.swing.border.Border
            public static createLineBorder(arg0: java.awt.Color, arg1: int): javax.swing.border.Border
            public static createLineBorder(arg0: java.awt.Color, arg1: int, arg2: boolean): javax.swing.border.Border
            public static createRaisedBevelBorder(): javax.swing.border.Border
            public static createLoweredBevelBorder(): javax.swing.border.Border
            public static createBevelBorder(arg0: int): javax.swing.border.Border
            public static createBevelBorder(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color): javax.swing.border.Border
            public static createBevelBorder(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color, arg3: java.awt.Color, arg4: java.awt.Color): javax.swing.border.Border
            public static createRaisedSoftBevelBorder(): javax.swing.border.Border
            public static createLoweredSoftBevelBorder(): javax.swing.border.Border
            public static createSoftBevelBorder(arg0: int): javax.swing.border.Border
            public static createSoftBevelBorder(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color): javax.swing.border.Border
            public static createSoftBevelBorder(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color, arg3: java.awt.Color, arg4: java.awt.Color): javax.swing.border.Border
            public static createEtchedBorder(): javax.swing.border.Border
            public static createEtchedBorder(arg0: java.awt.Color, arg1: java.awt.Color): javax.swing.border.Border
            public static createEtchedBorder(arg0: int): javax.swing.border.Border
            public static createEtchedBorder(arg0: int, arg1: java.awt.Color, arg2: java.awt.Color): javax.swing.border.Border
            public static createTitledBorder(arg0: java.lang.String | string): javax.swing.border.TitledBorder
            public static createTitledBorder(arg0: javax.swing.border.Border): javax.swing.border.TitledBorder
            public static createTitledBorder(arg0: javax.swing.border.Border, arg1: java.lang.String | string): javax.swing.border.TitledBorder
            public static createTitledBorder(arg0: javax.swing.border.Border, arg1: java.lang.String | string, arg2: int, arg3: int): javax.swing.border.TitledBorder
            public static createTitledBorder(arg0: javax.swing.border.Border, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: java.awt.Font): javax.swing.border.TitledBorder
            public static createTitledBorder(arg0: javax.swing.border.Border, arg1: java.lang.String | string, arg2: int, arg3: int, arg4: java.awt.Font, arg5: java.awt.Color): javax.swing.border.TitledBorder
            public static createEmptyBorder(): javax.swing.border.Border
            public static createEmptyBorder(arg0: int, arg1: int, arg2: int, arg3: int): javax.swing.border.Border
            public static createCompoundBorder(): javax.swing.border.CompoundBorder
            public static createCompoundBorder(arg0: javax.swing.border.Border, arg1: javax.swing.border.Border): javax.swing.border.CompoundBorder
            public static createMatteBorder(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): javax.swing.border.MatteBorder
            public static createMatteBorder(arg0: int, arg1: int, arg2: int, arg3: int, arg4: javax.swing.Icon): javax.swing.border.MatteBorder
            public static createStrokeBorder(arg0: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda): javax.swing.border.Border
            public static createStrokeBorder(arg0: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda, arg1: java.awt.Paint): javax.swing.border.Border
            public static createDashedBorder(arg0: java.awt.Paint): javax.swing.border.Border
            public static createDashedBorder(arg0: java.awt.Paint, arg1: float, arg2: float): javax.swing.border.Border
            public static createDashedBorder(arg0: java.awt.Paint, arg1: float, arg2: float, arg3: float, arg4: boolean): javax.swing.border.Border
            public static class: java.lang.Class<any>
        }
        interface BoundedRangeModel {
            getMinimum(): int
            setMinimum(arg0: int): void
            getMaximum(): int
            setMaximum(arg0: int): void
            getValue(): int
            setValue(arg0: int): void
            setValueIsAdjusting(arg0: boolean): void
            getValueIsAdjusting(): boolean
            getExtent(): int
            setExtent(arg0: int): void
            setRangeProperties(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            addChangeListener(arg0: javax.swing.event.ChangeListener): void
            removeChangeListener(arg0: javax.swing.event.ChangeListener): void
        }
        class Box extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor(arg0: int)
            public static createHorizontalBox(): javax.swing.Box
            public static createVerticalBox(): javax.swing.Box
            public static createRigidArea(arg0: java.awt.Dimension): java.awt.Component
            public static createHorizontalStrut(arg0: int): java.awt.Component
            public static createVerticalStrut(arg0: int): java.awt.Component
            public static createGlue(): java.awt.Component
            public static createHorizontalGlue(): java.awt.Component
            public static createVerticalGlue(): java.awt.Component
            public setLayout(arg0: java.awt.LayoutManager): void
            protected paintComponent(arg0: java.awt.Graphics): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class Box$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor(arg0: int)
        }
        class BoxLayout implements java.awt.LayoutManager2 , java.io.Serializable {
            public static X_AXIS: int
            public static Y_AXIS: int
            public static LINE_AXIS: int
            public static PAGE_AXIS: int
            public constructor(arg0: java.awt.Container, arg1: int)
            public getTarget(): java.awt.Container
            public getAxis(): int
            public invalidateLayout(arg0: java.awt.Container): void
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public layoutContainer(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        class BufferStrategyPaintManager extends javax.swing.RepaintManager$PaintManager {
            protected dispose(): void
            public show(arg0: java.awt.Container, arg1: int, arg2: int, arg3: int, arg4: int): boolean
            public paint(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent, arg2: java.awt.Graphics, arg3: int, arg4: int, arg5: int, arg6: int): boolean
            public copyArea(arg0: javax.swing.JComponent, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: boolean): void
            public beginPaint(): void
            public endPaint(): void
            public doubleBufferingChanged(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
            public static class: java.lang.Class<any>
        }
        class ButtonGroup implements java.io.Serializable {
            protected buttons: java.util.Vector<javax.swing.AbstractButton>
            public constructor()
            public add(arg0: javax.swing.AbstractButton): void
            public remove(arg0: javax.swing.AbstractButton): void
            public clearSelection(): void
            public getElements(): java.util.Enumeration<javax.swing.AbstractButton>
            public getSelection(): javax.swing.ButtonModel
            public setSelected(arg0: javax.swing.ButtonModel, arg1: boolean): void
            public isSelected(arg0: javax.swing.ButtonModel): boolean
            public getButtonCount(): int
            public static class: java.lang.Class<any>
        }
        interface ButtonModel extends java.awt.ItemSelectable {
            isArmed(): boolean
            isSelected(): boolean
            isEnabled(): boolean
            isPressed(): boolean
            isRollover(): boolean
            setArmed(arg0: boolean): void
            setSelected(arg0: boolean): void
            setEnabled(arg0: boolean): void
            setPressed(arg0: boolean): void
            setRollover(arg0: boolean): void
            setMnemonic(arg0: int): void
            getMnemonic(): int
            setActionCommand(arg0: java.lang.String | string): void
            getActionCommand(): string
            setGroup(arg0: javax.swing.ButtonGroup): void
            addActionListener(arg0: java.awt.event.ActionListener): void
            removeActionListener(arg0: java.awt.event.ActionListener): void
            addItemListener(arg0: java.awt.event.ItemListener): void
            removeItemListener(arg0: java.awt.event.ItemListener): void
            addChangeListener(arg0: javax.swing.event.ChangeListener): void
            removeChangeListener(arg0: javax.swing.event.ChangeListener): void
        }
        interface CellEditor {
            getCellEditorValue(): java.lang.Object
            isCellEditable(arg0: java.util.EventObject): boolean
            shouldSelectCell(arg0: java.util.EventObject): boolean
            stopCellEditing(): boolean
            cancelCellEditing(): void
            addCellEditorListener(arg0: javax.swing.event.CellEditorListener): void
            removeCellEditorListener(arg0: javax.swing.event.CellEditorListener): void
        }
        class CellRendererPane extends java.awt.Container implements javax.accessibility.Accessible {
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor()
            public invalidate(): void
            public paint(arg0: java.awt.Graphics): void
            public update(arg0: java.awt.Graphics): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public paintComponent(arg0: java.awt.Graphics, arg1: java.awt.Component, arg2: java.awt.Container, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): void
            public paintComponent(arg0: java.awt.Graphics, arg1: java.awt.Component, arg2: java.awt.Container, arg3: int, arg4: int, arg5: int, arg6: int): void
            public paintComponent(arg0: java.awt.Graphics, arg1: java.awt.Component, arg2: java.awt.Container, arg3: java.awt.Rectangle): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class CellRendererPane$$Lambda extends java.awt.Container implements javax.accessibility.Accessible {
            protected accessibleContext: javax.accessibility.AccessibleContext
        }
        class ClientPropertyKey extends java.lang.Enum<javax.swing.ClientPropertyKey> {
            public static JComponent_INPUT_VERIFIER: javax.swing.ClientPropertyKey
            public static JComponent_TRANSFER_HANDLER: javax.swing.ClientPropertyKey
            public static JComponent_ANCESTOR_NOTIFIER: javax.swing.ClientPropertyKey
            public static PopupFactory_FORCE_HEAVYWEIGHT_POPUP: javax.swing.ClientPropertyKey
            public static values(): javax.swing.ClientPropertyKey[]
            public static valueOf(arg0: java.lang.String | string): javax.swing.ClientPropertyKey
            public getReportValueNotSerializable(): boolean
            public static class: java.lang.Class<any>
        }
        interface ComboBoxEditor {
            getEditorComponent(): java.awt.Component
            setItem(arg0: java.lang.Object): void
            getItem(): java.lang.Object
            selectAll(): void
            addActionListener(arg0: java.awt.event.ActionListener): void
            removeActionListener(arg0: java.awt.event.ActionListener): void
        }
        interface ComboBoxModel<E> extends javax.swing.ListModel<E> {
            setSelectedItem(arg0: java.lang.Object): void
            getSelectedItem(): java.lang.Object
        }
        class ComponentInputMap extends javax.swing.InputMap {
            public constructor(arg0: javax.swing.JComponent)
            public setParent(arg0: javax.swing.InputMap): void
            public getComponent(): javax.swing.JComponent
            public put(arg0: javax.swing.KeyStroke, arg1: java.lang.Object): void
            public remove(arg0: javax.swing.KeyStroke): void
            public clear(): void
            public static class: java.lang.Class<any>
        }
        class DebugGraphics extends java.awt.Graphics {
            public static LOG_OPTION: int
            public static FLASH_OPTION: int
            public static BUFFERED_OPTION: int
            public static NONE_OPTION: int
            public constructor()
            public constructor(arg0: java.awt.Graphics, arg1: javax.swing.JComponent)
            public constructor(arg0: java.awt.Graphics)
            public create(): java.awt.Graphics
            public create(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.Graphics
            public static setFlashColor(arg0: java.awt.Color): void
            public static flashColor(): java.awt.Color
            public static setFlashTime(arg0: int): void
            public static flashTime(): int
            public static setFlashCount(arg0: int): void
            public static flashCount(): int
            public static setLogStream(arg0: java.io.PrintStream): void
            public static logStream(): java.io.PrintStream
            public setFont(arg0: java.awt.Font): void
            public getFont(): java.awt.Font
            public setColor(arg0: java.awt.Color): void
            public getColor(): java.awt.Color
            public getFontMetrics(): java.awt.FontMetrics
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public translate(arg0: int, arg1: int): void
            public setPaintMode(): void
            public setXORMode(arg0: java.awt.Color): void
            public getClipBounds(): java.awt.Rectangle
            public clipRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getClip(): java.awt.Shape
            public setClip(arg0: java.awt.Shape): void
            public drawRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public draw3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public fill3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawBytes(arg0: byte[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawChars(arg0: char[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public copyArea(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public dispose(): void
            public isDrawingBuffer(): boolean
            public setDebugOptions(arg0: int): void
            public getDebugOptions(): int
            public static class: java.lang.Class<any>
        }
        class DebugGraphicsFilter extends java.awt.image.RGBImageFilter {
            public filterRGB(arg0: int, arg1: int, arg2: int): int
            public static class: java.lang.Class<any>
        }
        class DebugGraphicsInfo {
            public static class: java.lang.Class<any>
        }
        class DebugGraphicsObserver implements java.awt.image.ImageObserver {
            public imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            public static class: java.lang.Class<any>
        }
        class DefaultBoundedRangeModel implements javax.swing.BoundedRangeModel , java.io.Serializable {
            protected changeEvent: javax.swing.event.ChangeEvent
            protected listenerList: javax.swing.event.EventListenerList
            public constructor()
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public getValue(): int
            public getExtent(): int
            public getMinimum(): int
            public getMaximum(): int
            public setValue(arg0: int): void
            public setExtent(arg0: int): void
            public setMinimum(arg0: int): void
            public setMaximum(arg0: int): void
            public setValueIsAdjusting(arg0: boolean): void
            public getValueIsAdjusting(): boolean
            public setRangeProperties(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public toString(): string
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public static class: java.lang.Class<any>
        }
        class DefaultButtonModel implements javax.swing.ButtonModel , java.io.Serializable {
            protected stateMask: int
            protected actionCommand: string
            protected group: javax.swing.ButtonGroup
            protected mnemonic: int
            protected changeEvent: javax.swing.event.ChangeEvent
            protected listenerList: javax.swing.event.EventListenerList
            public static ARMED: int
            public static SELECTED: int
            public static PRESSED: int
            public static ENABLED: int
            public static ROLLOVER: int
            public constructor()
            public setActionCommand(arg0: java.lang.String | string): void
            public getActionCommand(): string
            public isArmed(): boolean
            public isSelected(): boolean
            public isEnabled(): boolean
            public isPressed(): boolean
            public isRollover(): boolean
            public setArmed(arg0: boolean): void
            public setEnabled(arg0: boolean): void
            public setSelected(arg0: boolean): void
            public setPressed(arg0: boolean): void
            public setRollover(arg0: boolean): void
            public setMnemonic(arg0: int): void
            public getMnemonic(): int
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            protected fireActionPerformed(arg0: java.awt.event.ActionEvent): void
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            protected fireItemStateChanged(arg0: java.awt.event.ItemEvent): void
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public getSelectedObjects<T extends java.util.EventListener>(): java.lang.Object[]
            public setGroup<T extends java.util.EventListener>(arg0: javax.swing.ButtonGroup): void
            public getGroup<T extends java.util.EventListener>(): javax.swing.ButtonGroup
            public static class: java.lang.Class<any>
        }
        class DefaultCellEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor , javax.swing.tree.TreeCellEditor {
            protected editorComponent: javax.swing.JComponent
            protected delegate: javax.swing.DefaultCellEditor$EditorDelegate
            protected clickCountToStart: int
            public constructor(arg0: javax.swing.JTextField)
            public constructor(arg0: javax.swing.JCheckBox | javax.swing.JCheckBox$$Lambda)
            public constructor(arg0: javax.swing.JComboBox | javax.swing.JComboBox$$Lambda)
            public getComponent(): java.awt.Component
            public setClickCountToStart(arg0: int): void
            public getClickCountToStart(): int
            public getCellEditorValue(): java.lang.Object
            public isCellEditable(arg0: java.util.EventObject): boolean
            public shouldSelectCell(arg0: java.util.EventObject): boolean
            public stopCellEditing(): boolean
            public cancelCellEditing(): void
            public getTreeCellEditorComponent(arg0: javax.swing.JTree | javax.swing.JTree$$Lambda, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int): java.awt.Component
            public getTableCellEditorComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: int, arg4: int): java.awt.Component
            public static class: java.lang.Class<any>
        }
        class DefaultComboBoxModel<E> extends javax.swing.AbstractListModel<E> implements javax.swing.MutableComboBoxModel<E> , java.io.Serializable {
            public constructor()
            public constructor(arg0: E[])
            public constructor(arg0: java.util.Vector<E>)
            public setSelectedItem(arg0: java.lang.Object): void
            public getSelectedItem(): java.lang.Object
            public getSize(): int
            public getElementAt(arg0: int): E
            public getIndexOf(arg0: java.lang.Object): int
            public addElement(arg0: E): void
            public insertElementAt(arg0: E, arg1: int): void
            public removeElementAt(arg0: int): void
            public removeElement(arg0: java.lang.Object): void
            public removeAllElements(): void
            public static class: java.lang.Class<any>
        }
        class DefaultDesktopManager implements javax.swing.DesktopManager , java.io.Serializable {
            public constructor()
            public openFrame(arg0: javax.swing.JInternalFrame): void
            public closeFrame(arg0: javax.swing.JInternalFrame): void
            public maximizeFrame(arg0: javax.swing.JInternalFrame): void
            public minimizeFrame(arg0: javax.swing.JInternalFrame): void
            public iconifyFrame(arg0: javax.swing.JInternalFrame): void
            public deiconifyFrame(arg0: javax.swing.JInternalFrame): void
            public activateFrame(arg0: javax.swing.JInternalFrame): void
            public deactivateFrame(arg0: javax.swing.JInternalFrame): void
            public beginDraggingFrame(arg0: javax.swing.JComponent): void
            public dragFrame(arg0: javax.swing.JComponent, arg1: int, arg2: int): void
            public endDraggingFrame(arg0: javax.swing.JComponent): void
            public beginResizingFrame(arg0: javax.swing.JComponent, arg1: int): void
            public resizeFrame(arg0: javax.swing.JComponent, arg1: int, arg2: int, arg3: int, arg4: int): void
            public endResizingFrame(arg0: javax.swing.JComponent): void
            public setBoundsForFrame(arg0: javax.swing.JComponent, arg1: int, arg2: int, arg3: int, arg4: int): void
            protected removeIconFor(arg0: javax.swing.JInternalFrame): void
            protected getBoundsForIconOf(arg0: javax.swing.JInternalFrame): java.awt.Rectangle
            protected setPreviousBounds(arg0: javax.swing.JInternalFrame, arg1: java.awt.Rectangle): void
            protected getPreviousBounds(arg0: javax.swing.JInternalFrame): java.awt.Rectangle
            protected setWasIcon(arg0: javax.swing.JInternalFrame, arg1: java.lang.Boolean | boolean): void
            protected wasIcon(arg0: javax.swing.JInternalFrame): boolean
            public static class: java.lang.Class<any>
        }
        class DefaultFocusManager extends javax.swing.FocusManager {
            public constructor()
            public getComponentAfter(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getComponentBefore(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getFirstComponent(arg0: java.awt.Container): java.awt.Component
            public getLastComponent(arg0: java.awt.Container): java.awt.Component
            public compareTabOrder(arg0: java.awt.Component, arg1: java.awt.Component): boolean
            public static class: java.lang.Class<any>
        }
        class DefaultListCellRenderer extends javax.swing.JLabel implements javax.swing.ListCellRenderer<java.lang.Object> , java.io.Serializable {
            protected static noFocusBorder: javax.swing.border.Border
            public constructor()
            public getListCellRendererComponent(arg0: javax.swing.JList<any> | javax.swing.JList$$Lambda<any>, arg1: java.lang.Object, arg2: int, arg3: boolean, arg4: boolean): java.awt.Component
            public isOpaque(): boolean
            public validate(): void
            public invalidate(): void
            public repaint(): void
            public revalidate(): void
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            public repaint(arg0: java.awt.Rectangle): void
            protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: byte, arg2: byte): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: char, arg2: char): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: short, arg2: short): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: long, arg2: long): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: float, arg2: float): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: double, arg2: double): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
            public static class: java.lang.Class<any>
        }
        class DefaultListModel<E> extends javax.swing.AbstractListModel<E> {
            public constructor()
            public getSize(): int
            public getElementAt(arg0: int): E
            public copyInto(arg0: java.lang.Object[]): void
            public trimToSize(): void
            public ensureCapacity(arg0: int): void
            public setSize(arg0: int): void
            public capacity(): int
            public size(): int
            public isEmpty(): boolean
            public elements(): java.util.Enumeration<E>
            public contains(arg0: java.lang.Object): boolean
            public indexOf(arg0: java.lang.Object): int
            public indexOf(arg0: java.lang.Object, arg1: int): int
            public lastIndexOf(arg0: java.lang.Object): int
            public lastIndexOf(arg0: java.lang.Object, arg1: int): int
            public elementAt(arg0: int): E
            public firstElement(): E
            public lastElement(): E
            public setElementAt(arg0: E, arg1: int): void
            public removeElementAt(arg0: int): void
            public insertElementAt(arg0: E, arg1: int): void
            public addElement(arg0: E): void
            public removeElement(arg0: java.lang.Object): boolean
            public removeAllElements(): void
            public toString(): string
            public toArray(): java.lang.Object[]
            public get(arg0: int): E
            public set(arg0: int, arg1: E): E
            public add(arg0: int, arg1: E): void
            public remove(arg0: int): E
            public clear(): void
            public removeRange(arg0: int, arg1: int): void
            public static class: java.lang.Class<any>
        }
        class DefaultListSelectionModel implements javax.swing.ListSelectionModel , java.lang.Cloneable , java.io.Serializable {
            protected listenerList: javax.swing.event.EventListenerList
            protected leadAnchorNotificationEnabled: boolean
            public constructor()
            public getMinSelectionIndex(): int
            public getMaxSelectionIndex(): int
            public getValueIsAdjusting(): boolean
            public getSelectionMode(): int
            public setSelectionMode(arg0: int): void
            public isSelectedIndex(arg0: int): boolean
            public isSelectionEmpty(): boolean
            public addListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
            public removeListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
            public getListSelectionListeners(): javax.swing.event.ListSelectionListener[]
            protected fireValueChanged(arg0: boolean): void
            protected fireValueChanged(arg0: int, arg1: int): void
            protected fireValueChanged(arg0: int, arg1: int, arg2: boolean): void
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public setLeadAnchorNotificationEnabled<T extends java.util.EventListener>(arg0: boolean): void
            public isLeadAnchorNotificationEnabled<T extends java.util.EventListener>(): boolean
            public clearSelection<T extends java.util.EventListener>(): void
            public setSelectionInterval<T extends java.util.EventListener>(arg0: int, arg1: int): void
            public addSelectionInterval<T extends java.util.EventListener>(arg0: int, arg1: int): void
            public removeSelectionInterval<T extends java.util.EventListener>(arg0: int, arg1: int): void
            public insertIndexInterval<T extends java.util.EventListener>(arg0: int, arg1: int, arg2: boolean): void
            public removeIndexInterval<T extends java.util.EventListener>(arg0: int, arg1: int): void
            public setValueIsAdjusting<T extends java.util.EventListener>(arg0: boolean): void
            public toString<T extends java.util.EventListener>(): string
            public clone<T extends java.util.EventListener>(): java.lang.Object
            public getAnchorSelectionIndex<T extends java.util.EventListener>(): int
            public getLeadSelectionIndex<T extends java.util.EventListener>(): int
            public setAnchorSelectionIndex<T extends java.util.EventListener>(arg0: int): void
            public moveLeadSelectionIndex<T extends java.util.EventListener>(arg0: int): void
            public setLeadSelectionIndex<T extends java.util.EventListener>(arg0: int): void
            public static class: java.lang.Class<any>
        }
        abstract class DefaultRowSorter<M, I> extends javax.swing.RowSorter<M> {
            public constructor()
            protected setModelWrapper(arg0: javax.swing.DefaultRowSorter$ModelWrapper<M, I>): void
            protected getModelWrapper(): javax.swing.DefaultRowSorter$ModelWrapper<M, I>
            public getModel(): M
            public setSortable(arg0: int, arg1: boolean): void
            public isSortable(arg0: int): boolean
            public setSortKeys(arg0: java.util.List<javax.swing.RowSorter$SortKey>): void
            public getSortKeys(): java.util.List<javax.swing.RowSorter$SortKey>
            public setMaxSortKeys(arg0: int): void
            public getMaxSortKeys(): int
            public setSortsOnUpdates(arg0: boolean): void
            public getSortsOnUpdates(): boolean
            public setRowFilter(arg0: javax.swing.RowFilter<M, I>): void
            public getRowFilter(): javax.swing.RowFilter<M, I>
            public toggleSortOrder(arg0: int): void
            public convertRowIndexToView(arg0: int): int
            public convertRowIndexToModel(arg0: int): int
            public sort(): void
            protected useToString(arg0: int): boolean
            public setComparator(arg0: int, arg1: java.util.Comparator<any>): void
            public getComparator(arg0: int): java.util.Comparator<any>
            public getViewRowCount(): int
            public getModelRowCount(): int
            public modelStructureChanged(): void
            public allRowsChanged(): void
            public rowsInserted(arg0: int, arg1: int): void
            public rowsDeleted(arg0: int, arg1: int): void
            public rowsUpdated(arg0: int, arg1: int): void
            public rowsUpdated(arg0: int, arg1: int, arg2: int): void
            public static class: java.lang.Class<any>
        }
        class DefaultSingleSelectionModel implements javax.swing.SingleSelectionModel , java.io.Serializable {
            protected changeEvent: javax.swing.event.ChangeEvent
            protected listenerList: javax.swing.event.EventListenerList
            public constructor()
            public getSelectedIndex(): int
            public setSelectedIndex(arg0: int): void
            public clearSelection(): void
            public isSelected(): boolean
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public static class: java.lang.Class<any>
        }
        class DelegatingDefaultFocusManager extends javax.swing.DefaultFocusManager {
            public processKeyEvent(arg0: java.awt.Component, arg1: java.awt.event.KeyEvent): void
            public focusNextComponent(arg0: java.awt.Component): void
            public focusPreviousComponent(arg0: java.awt.Component): void
            public getFocusOwner(): java.awt.Component
            public clearGlobalFocusOwner(): void
            public getPermanentFocusOwner(): java.awt.Component
            public getFocusedWindow(): java.awt.Window
            public getActiveWindow(): java.awt.Window
            public getDefaultFocusTraversalPolicy(): java.awt.FocusTraversalPolicy
            public setDefaultFocusTraversalPolicy(arg0: java.awt.FocusTraversalPolicy): void
            public setDefaultFocusTraversalKeys(arg0: int, arg1: java.util.Set<java.awt.AWTKeyStroke>): void
            public getDefaultFocusTraversalKeys(arg0: int): java.util.Set<java.awt.AWTKeyStroke>
            public getCurrentFocusCycleRoot(): java.awt.Container
            public setGlobalCurrentFocusCycleRoot(arg0: java.awt.Container): void
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public addVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public addVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.lang.String | string, arg1: java.beans.VetoableChangeListener): void
            public addKeyEventDispatcher(arg0: java.awt.KeyEventDispatcher | java.awt.KeyEventDispatcher$$Lambda): void
            public removeKeyEventDispatcher(arg0: java.awt.KeyEventDispatcher | java.awt.KeyEventDispatcher$$Lambda): void
            public dispatchEvent(arg0: java.awt.AWTEvent): boolean
            public dispatchKeyEvent(arg0: java.awt.event.KeyEvent): boolean
            public upFocusCycle(arg0: java.awt.Component): void
            public downFocusCycle(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        interface DesktopManager {
            openFrame(arg0: javax.swing.JInternalFrame): void
            closeFrame(arg0: javax.swing.JInternalFrame): void
            maximizeFrame(arg0: javax.swing.JInternalFrame): void
            minimizeFrame(arg0: javax.swing.JInternalFrame): void
            iconifyFrame(arg0: javax.swing.JInternalFrame): void
            deiconifyFrame(arg0: javax.swing.JInternalFrame): void
            activateFrame(arg0: javax.swing.JInternalFrame): void
            deactivateFrame(arg0: javax.swing.JInternalFrame): void
            beginDraggingFrame(arg0: javax.swing.JComponent): void
            dragFrame(arg0: javax.swing.JComponent, arg1: int, arg2: int): void
            endDraggingFrame(arg0: javax.swing.JComponent): void
            beginResizingFrame(arg0: javax.swing.JComponent, arg1: int): void
            resizeFrame(arg0: javax.swing.JComponent, arg1: int, arg2: int, arg3: int, arg4: int): void
            endResizingFrame(arg0: javax.swing.JComponent): void
            setBoundsForFrame(arg0: javax.swing.JComponent, arg1: int, arg2: int, arg3: int, arg4: int): void
        }
        class DropMode extends java.lang.Enum<javax.swing.DropMode> {
            public static USE_SELECTION: javax.swing.DropMode
            public static ON: javax.swing.DropMode
            public static INSERT: javax.swing.DropMode
            public static INSERT_ROWS: javax.swing.DropMode
            public static INSERT_COLS: javax.swing.DropMode
            public static ON_OR_INSERT: javax.swing.DropMode
            public static ON_OR_INSERT_ROWS: javax.swing.DropMode
            public static ON_OR_INSERT_COLS: javax.swing.DropMode
            public static values(): javax.swing.DropMode[]
            public static valueOf(arg0: java.lang.String | string): javax.swing.DropMode
            public static class: java.lang.Class<any>
        }
        abstract class FocusManager extends java.awt.DefaultKeyboardFocusManager {
            public static FOCUS_MANAGER_CLASS_PROPERTY: string
            public constructor()
            public static getCurrentManager(): javax.swing.FocusManager
            public static setCurrentManager(arg0: javax.swing.FocusManager): void
            public static disableSwingFocusManager(): void
            public static isFocusManagerEnabled(): boolean
            public static class: java.lang.Class<any>
        }
        interface GraphicsWrapper {
            subGraphics(): java.awt.Graphics
            isClipIntersecting(arg0: java.awt.Rectangle): boolean
            getClipX(): int
            getClipY(): int
            getClipWidth(): int
            getClipHeight(): int
        }
        class GrayFilter extends java.awt.image.RGBImageFilter {
            public static createDisabledImage(arg0: java.awt.Image): java.awt.Image
            public constructor(arg0: boolean, arg1: int)
            public filterRGB(arg0: int, arg1: int, arg2: int): int
            public static class: java.lang.Class<any>
        }
        class GroupLayout implements java.awt.LayoutManager2 {
            public static DEFAULT_SIZE: int
            public static PREFERRED_SIZE: int
            public constructor(arg0: java.awt.Container)
            public setHonorsVisibility(arg0: boolean): void
            public getHonorsVisibility(): boolean
            public setHonorsVisibility(arg0: java.awt.Component, arg1: java.lang.Boolean | boolean): void
            public setAutoCreateGaps(arg0: boolean): void
            public getAutoCreateGaps(): boolean
            public setAutoCreateContainerGaps(arg0: boolean): void
            public getAutoCreateContainerGaps(): boolean
            public setHorizontalGroup(arg0: javax.swing.GroupLayout$Group): void
            public setVerticalGroup(arg0: javax.swing.GroupLayout$Group): void
            public createSequentialGroup(): javax.swing.GroupLayout$SequentialGroup
            public createParallelGroup(): javax.swing.GroupLayout$ParallelGroup
            public createParallelGroup(arg0: javax.swing.GroupLayout$Alignment): javax.swing.GroupLayout$ParallelGroup
            public createParallelGroup(arg0: javax.swing.GroupLayout$Alignment, arg1: boolean): javax.swing.GroupLayout$ParallelGroup
            public createBaselineGroup(arg0: boolean, arg1: boolean): javax.swing.GroupLayout$ParallelGroup
            public linkSize(...arg0: java.awt.Component[]): void
            public linkSize(arg0: int, ...arg1: java.awt.Component[]): void
            public replace(arg0: java.awt.Component, arg1: java.awt.Component): void
            public setLayoutStyle(arg0: javax.swing.LayoutStyle): void
            public getLayoutStyle(): javax.swing.LayoutStyle
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public layoutContainer(arg0: java.awt.Container): void
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public invalidateLayout(arg0: java.awt.Container): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface Icon {
            paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
            getIconWidth(): int
            getIconHeight(): int
        }
        class ImageIcon implements javax.swing.Icon , java.io.Serializable , javax.accessibility.Accessible {
            protected static component: java.awt.Component
            protected static tracker: java.awt.MediaTracker
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.net.URL, arg1: java.lang.String | string)
            public constructor(arg0: java.net.URL)
            public constructor(arg0: java.awt.Image, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Image)
            public constructor(arg0: byte[], arg1: java.lang.String | string)
            public constructor(arg0: byte[])
            public constructor()
            protected loadImage(arg0: java.awt.Image): void
            public getImageLoadStatus(): int
            public getImage(): java.awt.Image
            public setImage(arg0: java.awt.Image): void
            public getDescription(): string
            public setDescription(arg0: java.lang.String | string): void
            public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
            public getIconWidth(): int
            public getIconHeight(): int
            public setImageObserver(arg0: java.awt.image.ImageObserver): void
            public getImageObserver(): java.awt.image.ImageObserver
            public toString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class ImageIcon$$Lambda implements javax.swing.Icon , java.io.Serializable , javax.accessibility.Accessible {
            protected static component: java.awt.Component
        }
        class InputMap implements java.io.Serializable {
            public constructor()
            public setParent(arg0: javax.swing.InputMap): void
            public getParent(): javax.swing.InputMap
            public put(arg0: javax.swing.KeyStroke, arg1: java.lang.Object): void
            public get(arg0: javax.swing.KeyStroke): java.lang.Object
            public remove(arg0: javax.swing.KeyStroke): void
            public clear(): void
            public keys(): javax.swing.KeyStroke[]
            public size(): int
            public allKeys(): javax.swing.KeyStroke[]
            public static class: java.lang.Class<any>
        }
        abstract class InputVerifier {
            public constructor()
            public verify(arg0: javax.swing.JComponent): boolean
            public shouldYieldFocus(arg0: javax.swing.JComponent): boolean
            public static class: java.lang.Class<any>
        }
        abstract class InternalFrameFocusTraversalPolicy extends java.awt.FocusTraversalPolicy {
            public constructor()
            public getInitialComponent(arg0: javax.swing.JInternalFrame): java.awt.Component
            public static class: java.lang.Class<any>
        }
        class JApplet extends java.applet.Applet implements javax.accessibility.Accessible , javax.swing.RootPaneContainer , javax.swing.TransferHandler$HasGetTransferHandler {
            protected rootPane: javax.swing.JRootPane
            protected rootPaneCheckingEnabled: boolean
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor()
            protected createRootPane(): javax.swing.JRootPane
            public setTransferHandler(arg0: javax.swing.TransferHandler): void
            public getTransferHandler(): javax.swing.TransferHandler
            public update(arg0: java.awt.Graphics): void
            public setJMenuBar(arg0: javax.swing.JMenuBar): void
            public getJMenuBar(): javax.swing.JMenuBar
            protected isRootPaneCheckingEnabled(): boolean
            protected setRootPaneCheckingEnabled(arg0: boolean): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public setLayout(arg0: java.awt.LayoutManager): void
            public getRootPane(): javax.swing.JRootPane
            protected setRootPane(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
            public getContentPane(): java.awt.Container
            public setContentPane(arg0: java.awt.Container): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getGlassPane(): java.awt.Component
            public setGlassPane(arg0: java.awt.Component): void
            public getGraphics(): java.awt.Graphics
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JButton extends javax.swing.AbstractButton implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public updateUI(): void
            public getUIClassID(): string
            public isDefaultButton(): boolean
            public isDefaultCapable(): boolean
            public setDefaultCapable(arg0: boolean): void
            public removeNotify(): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JButton$$Lambda extends javax.swing.AbstractButton implements javax.accessibility.Accessible {
            public constructor()
        }
        class JCheckBox extends javax.swing.JToggleButton implements javax.accessibility.Accessible {
            public static BORDER_PAINTED_FLAT_CHANGED_PROPERTY: string
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: javax.swing.Icon, arg1: boolean)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: boolean)
            public setBorderPaintedFlat(arg0: boolean): void
            public isBorderPaintedFlat(): boolean
            public updateUI(): void
            public getUIClassID(): string
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JCheckBox$$Lambda extends javax.swing.JToggleButton implements javax.accessibility.Accessible {
            public static BORDER_PAINTED_FLAT_CHANGED_PROPERTY: string
        }
        class JCheckBoxMenuItem extends javax.swing.JMenuItem implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: boolean)
            public getUIClassID(): string
            public getState(): boolean
            public setState(arg0: boolean): void
            public getSelectedObjects(): java.lang.Object[]
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JCheckBoxMenuItem$$Lambda extends javax.swing.JMenuItem implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            public constructor()
        }
        class JColorChooser extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static SELECTION_MODEL_PROPERTY: string
            public static PREVIEW_PANEL_PROPERTY: string
            public static CHOOSER_PANELS_PROPERTY: string
            protected accessibleContext: javax.accessibility.AccessibleContext
            public static showDialog(arg0: java.awt.Component, arg1: java.lang.String | string, arg2: java.awt.Color): java.awt.Color
            public static createDialog(arg0: java.awt.Component, arg1: java.lang.String | string, arg2: boolean, arg3: javax.swing.JColorChooser | javax.swing.JColorChooser$$Lambda, arg4: java.awt.event.ActionListener, arg5: java.awt.event.ActionListener): javax.swing.JDialog
            public constructor()
            public constructor(arg0: java.awt.Color)
            public constructor(arg0: javax.swing.colorchooser.ColorSelectionModel)
            public getUI(): javax.swing.plaf.ColorChooserUI
            public setUI(arg0: javax.swing.plaf.ColorChooserUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getColor(): java.awt.Color
            public setColor(arg0: java.awt.Color): void
            public setColor(arg0: int, arg1: int, arg2: int): void
            public setColor(arg0: int): void
            public setDragEnabled(arg0: boolean): void
            public getDragEnabled(): boolean
            public setPreviewPanel(arg0: javax.swing.JComponent): void
            public getPreviewPanel(): javax.swing.JComponent
            public addChooserPanel(arg0: javax.swing.colorchooser.AbstractColorChooserPanel): void
            public removeChooserPanel(arg0: javax.swing.colorchooser.AbstractColorChooserPanel): javax.swing.colorchooser.AbstractColorChooserPanel
            public setChooserPanels(arg0: javax.swing.colorchooser.AbstractColorChooserPanel[]): void
            public getChooserPanels(): javax.swing.colorchooser.AbstractColorChooserPanel[]
            public getSelectionModel(): javax.swing.colorchooser.ColorSelectionModel
            public setSelectionModel(arg0: javax.swing.colorchooser.ColorSelectionModel): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JColorChooser$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static SELECTION_MODEL_PROPERTY: string
        }
        class JComboBox<E> extends javax.swing.JComponent implements java.awt.ItemSelectable , javax.swing.event.ListDataListener , java.awt.event.ActionListener , javax.accessibility.Accessible {
            protected dataModel: javax.swing.ComboBoxModel<E>
            protected renderer: javax.swing.ListCellRenderer<E>
            protected editor: javax.swing.ComboBoxEditor
            protected maximumRowCount: int
            protected isEditable: boolean
            protected keySelectionManager: javax.swing.JComboBox$KeySelectionManager
            protected actionCommand: string
            protected lightWeightPopupEnabled: boolean
            protected selectedItemReminder: java.lang.Object
            public constructor(arg0: javax.swing.ComboBoxModel<E>)
            public constructor(arg0: E[])
            public constructor(arg0: java.util.Vector<E>)
            public constructor()
            protected installAncestorListener(): void
            public setUI(arg0: javax.swing.plaf.ComboBoxUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getUI(): javax.swing.plaf.ComboBoxUI
            public setModel(arg0: javax.swing.ComboBoxModel<E>): void
            public getModel(): javax.swing.ComboBoxModel<E>
            public setLightWeightPopupEnabled(arg0: boolean): void
            public isLightWeightPopupEnabled(): boolean
            public setEditable(arg0: boolean): void
            public isEditable(): boolean
            public setMaximumRowCount(arg0: int): void
            public getMaximumRowCount(): int
            public setRenderer(arg0: javax.swing.ListCellRenderer<E> | javax.swing.ListCellRenderer$$Lambda<E>): void
            public getRenderer(): javax.swing.ListCellRenderer<E>
            public setEditor(arg0: javax.swing.ComboBoxEditor): void
            public getEditor(): javax.swing.ComboBoxEditor
            public setSelectedItem(arg0: java.lang.Object): void
            public getSelectedItem(): java.lang.Object
            public setSelectedIndex(arg0: int): void
            public getSelectedIndex(): int
            public getPrototypeDisplayValue(): E
            public setPrototypeDisplayValue(arg0: E): void
            public addItem(arg0: E): void
            public insertItemAt(arg0: E, arg1: int): void
            public removeItem(arg0: java.lang.Object): void
            public removeItemAt(arg0: int): void
            public removeAllItems(): void
            public showPopup(): void
            public hidePopup(): void
            public setPopupVisible(arg0: boolean): void
            public isPopupVisible(): boolean
            public addItemListener(arg0: java.awt.event.ItemListener): void
            public removeItemListener(arg0: java.awt.event.ItemListener): void
            public getItemListeners(): java.awt.event.ItemListener[]
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            public addPopupMenuListener(arg0: javax.swing.event.PopupMenuListener): void
            public removePopupMenuListener(arg0: javax.swing.event.PopupMenuListener): void
            public getPopupMenuListeners(): javax.swing.event.PopupMenuListener[]
            public firePopupMenuWillBecomeVisible(): void
            public firePopupMenuWillBecomeInvisible(): void
            public firePopupMenuCanceled(): void
            public setActionCommand(arg0: java.lang.String | string): void
            public getActionCommand(): string
            public setAction(arg0: javax.swing.Action): void
            public getAction(): javax.swing.Action
            protected configurePropertiesFromAction(arg0: javax.swing.Action): void
            protected createActionPropertyChangeListener(arg0: javax.swing.Action): java.beans.PropertyChangeListener
            protected actionPropertyChanged(arg0: javax.swing.Action, arg1: java.lang.String | string): void
            protected fireItemStateChanged(arg0: java.awt.event.ItemEvent): void
            protected fireActionEvent(): void
            protected selectedItemChanged(): void
            public getSelectedObjects(): java.lang.Object[]
            public actionPerformed(arg0: java.awt.event.ActionEvent): void
            public contentsChanged(arg0: javax.swing.event.ListDataEvent): void
            public intervalAdded(arg0: javax.swing.event.ListDataEvent): void
            public intervalRemoved(arg0: javax.swing.event.ListDataEvent): void
            public selectWithKeyChar(arg0: char): boolean
            public setEnabled(arg0: boolean): void
            public configureEditor(arg0: javax.swing.ComboBoxEditor, arg1: java.lang.Object): void
            public processKeyEvent(arg0: java.awt.event.KeyEvent): void
            protected processKeyBinding(arg0: javax.swing.KeyStroke, arg1: java.awt.event.KeyEvent, arg2: int, arg3: boolean): boolean
            public setKeySelectionManager(arg0: javax.swing.JComboBox$KeySelectionManager): void
            public getKeySelectionManager(): javax.swing.JComboBox$KeySelectionManager
            public getItemCount(): int
            public getItemAt(arg0: int): E
            protected createDefaultKeySelectionManager(): javax.swing.JComboBox$KeySelectionManager
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JComboBox$$Lambda<E> extends javax.swing.JComponent implements java.awt.ItemSelectable , javax.swing.event.ListDataListener , java.awt.event.ActionListener , javax.accessibility.Accessible {
            protected dataModel: javax.swing.ComboBoxModel<E>
        }
        abstract class JComponent extends java.awt.Container implements java.io.Serializable , javax.swing.TransferHandler$HasGetTransferHandler {
            protected ui: javax.swing.plaf.ComponentUI
            protected listenerList: javax.swing.event.EventListenerList
            public static WHEN_FOCUSED: int
            public static WHEN_ANCESTOR_OF_FOCUSED_COMPONENT: int
            public static WHEN_IN_FOCUSED_WINDOW: int
            public static UNDEFINED_CONDITION: int
            public static TOOL_TIP_TEXT_KEY: string
            public setInheritsPopupMenu(arg0: boolean): void
            public getInheritsPopupMenu(): boolean
            public setComponentPopupMenu(arg0: javax.swing.JPopupMenu): void
            public getComponentPopupMenu(): javax.swing.JPopupMenu
            public constructor()
            public updateUI(): void
            protected setUI(arg0: javax.swing.plaf.ComponentUI): void
            public getUIClassID(): string
            protected getComponentGraphics(arg0: java.awt.Graphics): java.awt.Graphics
            protected paintComponent(arg0: java.awt.Graphics): void
            protected paintChildren(arg0: java.awt.Graphics): void
            protected paintBorder(arg0: java.awt.Graphics): void
            public update(arg0: java.awt.Graphics): void
            public paint(arg0: java.awt.Graphics): void
            public printAll(arg0: java.awt.Graphics): void
            public print(arg0: java.awt.Graphics): void
            protected printComponent(arg0: java.awt.Graphics): void
            protected printChildren(arg0: java.awt.Graphics): void
            protected printBorder(arg0: java.awt.Graphics): void
            public isPaintingTile(): boolean
            public isPaintingForPrint(): boolean
            public isManagingFocus(): boolean
            public setNextFocusableComponent(arg0: java.awt.Component): void
            public getNextFocusableComponent(): java.awt.Component
            public setRequestFocusEnabled(arg0: boolean): void
            public isRequestFocusEnabled(): boolean
            public requestFocus(): void
            public requestFocus(arg0: boolean): boolean
            public requestFocusInWindow(): boolean
            protected requestFocusInWindow(arg0: boolean): boolean
            public grabFocus(): void
            public setVerifyInputWhenFocusTarget(arg0: boolean): void
            public getVerifyInputWhenFocusTarget(): boolean
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public setPreferredSize(arg0: java.awt.Dimension): void
            public getPreferredSize(): java.awt.Dimension
            public setMaximumSize(arg0: java.awt.Dimension): void
            public getMaximumSize(): java.awt.Dimension
            public setMinimumSize(arg0: java.awt.Dimension): void
            public getMinimumSize(): java.awt.Dimension
            public contains(arg0: int, arg1: int): boolean
            public setBorder(arg0: javax.swing.border.Border): void
            public getBorder(): javax.swing.border.Border
            public getInsets(): java.awt.Insets
            public getInsets(arg0: java.awt.Insets): java.awt.Insets
            public getAlignmentY(): float
            public setAlignmentY(arg0: float): void
            public getAlignmentX(): float
            public setAlignmentX(arg0: float): void
            public setInputVerifier(arg0: javax.swing.InputVerifier): void
            public getInputVerifier(): javax.swing.InputVerifier
            public getGraphics(): java.awt.Graphics
            public setDebugGraphicsOptions(arg0: int): void
            public getDebugGraphicsOptions(): int
            public registerKeyboardAction(arg0: java.awt.event.ActionListener, arg1: java.lang.String | string, arg2: javax.swing.KeyStroke, arg3: int): void
            public registerKeyboardAction(arg0: java.awt.event.ActionListener, arg1: javax.swing.KeyStroke, arg2: int): void
            public unregisterKeyboardAction(arg0: javax.swing.KeyStroke): void
            public getRegisteredKeyStrokes(): javax.swing.KeyStroke[]
            public getConditionForKeyStroke(arg0: javax.swing.KeyStroke): int
            public getActionForKeyStroke(arg0: javax.swing.KeyStroke): java.awt.event.ActionListener
            public resetKeyboardActions(): void
            public setInputMap(arg0: int, arg1: javax.swing.InputMap): void
            public getInputMap(arg0: int): javax.swing.InputMap
            public getInputMap(): javax.swing.InputMap
            public setActionMap(arg0: javax.swing.ActionMap): void
            public getActionMap(): javax.swing.ActionMap
            public getBaseline(arg0: int, arg1: int): int
            public getBaselineResizeBehavior(): java.awt.Component$BaselineResizeBehavior
            public requestDefaultFocus(): boolean
            public setVisible(arg0: boolean): void
            public setEnabled(arg0: boolean): void
            public setForeground(arg0: java.awt.Color): void
            public setBackground(arg0: java.awt.Color): void
            public setFont(arg0: java.awt.Font): void
            public static getDefaultLocale(): java.util.Locale
            public static setDefaultLocale(arg0: java.util.Locale): void
            protected processComponentKeyEvent(arg0: java.awt.event.KeyEvent): void
            protected processKeyEvent(arg0: java.awt.event.KeyEvent): void
            protected processKeyBinding(arg0: javax.swing.KeyStroke, arg1: java.awt.event.KeyEvent, arg2: int, arg3: boolean): boolean
            public setToolTipText(arg0: java.lang.String | string): void
            public getToolTipText(): string
            public getToolTipText(arg0: java.awt.event.MouseEvent): string
            public getToolTipLocation(arg0: java.awt.event.MouseEvent): java.awt.Point
            public getPopupLocation(arg0: java.awt.event.MouseEvent): java.awt.Point
            public createToolTip(): javax.swing.JToolTip
            public scrollRectToVisible(arg0: java.awt.Rectangle): void
            public setAutoscrolls(arg0: boolean): void
            public getAutoscrolls(): boolean
            public setTransferHandler(arg0: javax.swing.TransferHandler): void
            public getTransferHandler(): javax.swing.TransferHandler
            protected processMouseEvent(arg0: java.awt.event.MouseEvent): void
            protected processMouseMotionEvent(arg0: java.awt.event.MouseEvent): void
            public enable(): void
            public disable(): void
            public getClientProperty(arg0: java.lang.Object): java.lang.Object
            public putClientProperty(arg0: java.lang.Object, arg1: java.lang.Object): void
            public setFocusTraversalKeys(arg0: int, arg1: java.util.Set<java.awt.AWTKeyStroke>): void
            public static isLightweightComponent(arg0: java.awt.Component): boolean
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getBounds(arg0: java.awt.Rectangle): java.awt.Rectangle
            public getSize(arg0: java.awt.Dimension): java.awt.Dimension
            public getLocation(arg0: java.awt.Point): java.awt.Point
            public getX(): int
            public getY(): int
            public getWidth(): int
            public getHeight(): int
            public isOpaque(): boolean
            public setOpaque(arg0: boolean): void
            public computeVisibleRect(arg0: java.awt.Rectangle): void
            public getVisibleRect(): java.awt.Rectangle
            public firePropertyChange(arg0: java.lang.String | string, arg1: boolean, arg2: boolean): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: char, arg2: char): void
            protected fireVetoableChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public addVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public removeVetoableChangeListener(arg0: java.beans.VetoableChangeListener): void
            public getVetoableChangeListeners(): java.beans.VetoableChangeListener[]
            public getTopLevelAncestor(): java.awt.Container
            public addAncestorListener(arg0: javax.swing.event.AncestorListener): void
            public removeAncestorListener(arg0: javax.swing.event.AncestorListener): void
            public getAncestorListeners(): javax.swing.event.AncestorListener[]
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public addNotify<T extends java.util.EventListener>(): void
            public removeNotify<T extends java.util.EventListener>(): void
            public repaint<T extends java.util.EventListener>(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            public repaint<T extends java.util.EventListener>(arg0: java.awt.Rectangle): void
            public revalidate<T extends java.util.EventListener>(): void
            public isValidateRoot<T extends java.util.EventListener>(): boolean
            public isOptimizedDrawingEnabled<T extends java.util.EventListener>(): boolean
            protected isPaintingOrigin<T extends java.util.EventListener>(): boolean
            public paintImmediately<T extends java.util.EventListener>(arg0: int, arg1: int, arg2: int, arg3: int): void
            public paintImmediately<T extends java.util.EventListener>(arg0: java.awt.Rectangle): void
            public setDoubleBuffered<T extends java.util.EventListener>(arg0: boolean): void
            public isDoubleBuffered<T extends java.util.EventListener>(): boolean
            public getRootPane<T extends java.util.EventListener>(): javax.swing.JRootPane
            protected paramString<T extends java.util.EventListener>(): string
            public hide<T extends java.util.EventListener>(): void
            public static class: java.lang.Class<any>
        }
        class JDesktopPane extends javax.swing.JLayeredPane implements javax.accessibility.Accessible {
            public static LIVE_DRAG_MODE: int
            public static OUTLINE_DRAG_MODE: int
            public constructor()
            public getUI(): javax.swing.plaf.DesktopPaneUI
            public setUI(arg0: javax.swing.plaf.DesktopPaneUI): void
            public setDragMode(arg0: int): void
            public getDragMode(): int
            public getDesktopManager(): javax.swing.DesktopManager
            public setDesktopManager(arg0: javax.swing.DesktopManager): void
            public updateUI(): void
            public getUIClassID(): string
            public getAllFrames(): javax.swing.JInternalFrame[]
            public getSelectedFrame(): javax.swing.JInternalFrame
            public setSelectedFrame(arg0: javax.swing.JInternalFrame): void
            public getAllFramesInLayer(arg0: int): javax.swing.JInternalFrame[]
            public remove(arg0: java.awt.Component): void
            public selectFrame(arg0: boolean): javax.swing.JInternalFrame
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: int): void
            public removeAll(): void
            public setComponentZOrder(arg0: java.awt.Component, arg1: int): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JDesktopPane$$Lambda extends javax.swing.JLayeredPane implements javax.accessibility.Accessible {
            public static LIVE_DRAG_MODE: int
        }
        class JDialog extends java.awt.Dialog implements javax.swing.WindowConstants , javax.accessibility.Accessible , javax.swing.RootPaneContainer , javax.swing.TransferHandler$HasGetTransferHandler {
            protected rootPane: javax.swing.JRootPane
            protected rootPaneCheckingEnabled: boolean
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor()
            public constructor(arg0: java.awt.Frame)
            public constructor(arg0: java.awt.Frame, arg1: boolean)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: boolean)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: boolean, arg3: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.awt.Dialog)
            public constructor(arg0: java.awt.Dialog, arg1: boolean)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string, arg2: boolean)
            public constructor(arg0: java.awt.Dialog, arg1: java.lang.String | string, arg2: boolean, arg3: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.awt.Dialog$ModalityType)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.lang.String | string)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.lang.String | string, arg2: java.awt.Dialog$ModalityType)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.lang.String | string, arg2: java.awt.Dialog$ModalityType, arg3: java.awt.GraphicsConfiguration)
            protected dialogInit(): void
            protected createRootPane(): javax.swing.JRootPane
            protected processWindowEvent(arg0: java.awt.event.WindowEvent): void
            public setDefaultCloseOperation(arg0: int): void
            public getDefaultCloseOperation(): int
            public setTransferHandler(arg0: javax.swing.TransferHandler): void
            public getTransferHandler(): javax.swing.TransferHandler
            public update(arg0: java.awt.Graphics): void
            public setJMenuBar(arg0: javax.swing.JMenuBar): void
            public getJMenuBar(): javax.swing.JMenuBar
            protected isRootPaneCheckingEnabled(): boolean
            protected setRootPaneCheckingEnabled(arg0: boolean): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public setLayout(arg0: java.awt.LayoutManager): void
            public getRootPane(): javax.swing.JRootPane
            protected setRootPane(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
            public getContentPane(): java.awt.Container
            public setContentPane(arg0: java.awt.Container): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getGlassPane(): java.awt.Component
            public setGlassPane(arg0: java.awt.Component): void
            public getGraphics(): java.awt.Graphics
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            public static setDefaultLookAndFeelDecorated(arg0: boolean): void
            public static isDefaultLookAndFeelDecorated(): boolean
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JEditorPane extends javax.swing.text.JTextComponent {
            public static W3C_LENGTH_UNITS: string
            public static HONOR_DISPLAY_PROPERTIES: string
            public constructor()
            public constructor(arg0: java.net.URL)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
            public addHyperlinkListener(arg0: javax.swing.event.HyperlinkListener): void
            public removeHyperlinkListener(arg0: javax.swing.event.HyperlinkListener): void
            public getHyperlinkListeners(): javax.swing.event.HyperlinkListener[]
            public fireHyperlinkUpdate(arg0: javax.swing.event.HyperlinkEvent): void
            public setPage(arg0: java.net.URL): void
            public read(arg0: java.io.InputStream, arg1: java.lang.Object): void
            protected getStream(arg0: java.net.URL): java.io.InputStream
            public scrollToReference(arg0: java.lang.String | string): void
            public getPage(): java.net.URL
            public setPage(arg0: java.lang.String | string): void
            public getUIClassID(): string
            protected createDefaultEditorKit(): javax.swing.text.EditorKit
            public getEditorKit(): javax.swing.text.EditorKit
            public getContentType(): string
            public setContentType(arg0: java.lang.String | string): void
            public setEditorKit(arg0: javax.swing.text.EditorKit): void
            public getEditorKitForContentType(arg0: java.lang.String | string): javax.swing.text.EditorKit
            public setEditorKitForContentType(arg0: java.lang.String | string, arg1: javax.swing.text.EditorKit): void
            public replaceSelection(arg0: java.lang.String | string): void
            public static createEditorKitForContentType(arg0: java.lang.String | string): javax.swing.text.EditorKit
            public static registerEditorKitForContentType(arg0: java.lang.String | string, arg1: java.lang.String | string): void
            public static registerEditorKitForContentType(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.ClassLoader): void
            public static getEditorKitClassNameForContentType(arg0: java.lang.String | string): string
            public getPreferredSize(): java.awt.Dimension
            public setText(arg0: java.lang.String | string): void
            public getText(): string
            public getScrollableTracksViewportWidth(): boolean
            public getScrollableTracksViewportHeight(): boolean
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JFileChooser extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static OPEN_DIALOG: int
            public static SAVE_DIALOG: int
            public static CUSTOM_DIALOG: int
            public static CANCEL_OPTION: int
            public static APPROVE_OPTION: int
            public static ERROR_OPTION: int
            public static FILES_ONLY: int
            public static DIRECTORIES_ONLY: int
            public static FILES_AND_DIRECTORIES: int
            public static CANCEL_SELECTION: string
            public static APPROVE_SELECTION: string
            public static APPROVE_BUTTON_TEXT_CHANGED_PROPERTY: string
            public static APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY: string
            public static APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY: string
            public static CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY: string
            public static DIRECTORY_CHANGED_PROPERTY: string
            public static SELECTED_FILE_CHANGED_PROPERTY: string
            public static SELECTED_FILES_CHANGED_PROPERTY: string
            public static MULTI_SELECTION_ENABLED_CHANGED_PROPERTY: string
            public static FILE_SYSTEM_VIEW_CHANGED_PROPERTY: string
            public static FILE_VIEW_CHANGED_PROPERTY: string
            public static FILE_HIDING_CHANGED_PROPERTY: string
            public static FILE_FILTER_CHANGED_PROPERTY: string
            public static FILE_SELECTION_MODE_CHANGED_PROPERTY: string
            public static ACCESSORY_CHANGED_PROPERTY: string
            public static ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY: string
            public static DIALOG_TITLE_CHANGED_PROPERTY: string
            public static DIALOG_TYPE_CHANGED_PROPERTY: string
            public static CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY: string
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.io.File)
            public constructor(arg0: javax.swing.filechooser.FileSystemView)
            public constructor(arg0: java.io.File, arg1: javax.swing.filechooser.FileSystemView)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.filechooser.FileSystemView)
            protected setup(arg0: javax.swing.filechooser.FileSystemView): void
            public setDragEnabled(arg0: boolean): void
            public getDragEnabled(): boolean
            public getSelectedFile(): java.io.File
            public setSelectedFile(arg0: java.io.File): void
            public getSelectedFiles(): java.io.File[]
            public setSelectedFiles(arg0: java.io.File[]): void
            public getCurrentDirectory(): java.io.File
            public setCurrentDirectory(arg0: java.io.File): void
            public changeToParentDirectory(): void
            public rescanCurrentDirectory(): void
            public ensureFileIsVisible(arg0: java.io.File): void
            public showOpenDialog(arg0: java.awt.Component): int
            public showSaveDialog(arg0: java.awt.Component): int
            public showDialog(arg0: java.awt.Component, arg1: java.lang.String | string): int
            protected createDialog(arg0: java.awt.Component): javax.swing.JDialog
            public getControlButtonsAreShown(): boolean
            public setControlButtonsAreShown(arg0: boolean): void
            public getDialogType(): int
            public setDialogType(arg0: int): void
            public setDialogTitle(arg0: java.lang.String | string): void
            public getDialogTitle(): string
            public setApproveButtonToolTipText(arg0: java.lang.String | string): void
            public getApproveButtonToolTipText(): string
            public getApproveButtonMnemonic(): int
            public setApproveButtonMnemonic(arg0: int): void
            public setApproveButtonMnemonic(arg0: char): void
            public setApproveButtonText(arg0: java.lang.String | string): void
            public getApproveButtonText(): string
            public getChoosableFileFilters(): javax.swing.filechooser.FileFilter[]
            public addChoosableFileFilter(arg0: javax.swing.filechooser.FileFilter): void
            public removeChoosableFileFilter(arg0: javax.swing.filechooser.FileFilter): boolean
            public resetChoosableFileFilters(): void
            public getAcceptAllFileFilter(): javax.swing.filechooser.FileFilter
            public isAcceptAllFileFilterUsed(): boolean
            public setAcceptAllFileFilterUsed(arg0: boolean): void
            public getAccessory(): javax.swing.JComponent
            public setAccessory(arg0: javax.swing.JComponent): void
            public setFileSelectionMode(arg0: int): void
            public getFileSelectionMode(): int
            public isFileSelectionEnabled(): boolean
            public isDirectorySelectionEnabled(): boolean
            public setMultiSelectionEnabled(arg0: boolean): void
            public isMultiSelectionEnabled(): boolean
            public isFileHidingEnabled(): boolean
            public setFileHidingEnabled(arg0: boolean): void
            public setFileFilter(arg0: javax.swing.filechooser.FileFilter): void
            public getFileFilter(): javax.swing.filechooser.FileFilter
            public setFileView(arg0: javax.swing.filechooser.FileView): void
            public getFileView(): javax.swing.filechooser.FileView
            public getName(arg0: java.io.File): string
            public getDescription(arg0: java.io.File): string
            public getTypeDescription(arg0: java.io.File): string
            public getIcon(arg0: java.io.File): javax.swing.Icon
            public isTraversable(arg0: java.io.File): boolean
            public accept(arg0: java.io.File): boolean
            public setFileSystemView(arg0: javax.swing.filechooser.FileSystemView): void
            public getFileSystemView(): javax.swing.filechooser.FileSystemView
            public approveSelection(): void
            public cancelSelection(): void
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            protected fireActionPerformed(arg0: java.lang.String | string): void
            public updateUI(): void
            public getUIClassID(): string
            public getUI(): javax.swing.plaf.FileChooserUI
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JFileChooser$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static OPEN_DIALOG: int
        }
        class JFormattedTextField extends javax.swing.JTextField {
            public static COMMIT: int
            public static COMMIT_OR_REVERT: int
            public static REVERT: int
            public static PERSIST: int
            public constructor()
            public constructor(arg0: java.lang.Object)
            public constructor(arg0: java.text.Format)
            public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatter)
            public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatterFactory)
            public constructor(arg0: javax.swing.JFormattedTextField$AbstractFormatterFactory, arg1: java.lang.Object)
            public setFocusLostBehavior(arg0: int): void
            public getFocusLostBehavior(): int
            public setFormatterFactory(arg0: javax.swing.JFormattedTextField$AbstractFormatterFactory): void
            public getFormatterFactory(): javax.swing.JFormattedTextField$AbstractFormatterFactory
            protected setFormatter(arg0: javax.swing.JFormattedTextField$AbstractFormatter): void
            public getFormatter(): javax.swing.JFormattedTextField$AbstractFormatter
            public setValue(arg0: java.lang.Object): void
            public getValue(): java.lang.Object
            public commitEdit(): void
            public isEditValid(): boolean
            protected invalidEdit(): void
            protected processInputMethodEvent(arg0: java.awt.event.InputMethodEvent): void
            protected processFocusEvent(arg0: java.awt.event.FocusEvent): void
            public getActions(): javax.swing.Action[]
            public getUIClassID(): string
            public setDocument(arg0: javax.swing.text.Document): void
            public static class: java.lang.Class<any>
        }
        class JFrame extends java.awt.Frame implements javax.swing.WindowConstants , javax.accessibility.Accessible , javax.swing.RootPaneContainer , javax.swing.TransferHandler$HasGetTransferHandler {
            public static EXIT_ON_CLOSE: int
            protected rootPane: javax.swing.JRootPane
            protected rootPaneCheckingEnabled: boolean
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor()
            public constructor(arg0: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.awt.GraphicsConfiguration)
            protected frameInit(): void
            protected createRootPane(): javax.swing.JRootPane
            protected processWindowEvent(arg0: java.awt.event.WindowEvent): void
            public setDefaultCloseOperation(arg0: int): void
            public getDefaultCloseOperation(): int
            public setTransferHandler(arg0: javax.swing.TransferHandler): void
            public getTransferHandler(): javax.swing.TransferHandler
            public update(arg0: java.awt.Graphics): void
            public setJMenuBar(arg0: javax.swing.JMenuBar): void
            public getJMenuBar(): javax.swing.JMenuBar
            protected isRootPaneCheckingEnabled(): boolean
            protected setRootPaneCheckingEnabled(arg0: boolean): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public setLayout(arg0: java.awt.LayoutManager): void
            public getRootPane(): javax.swing.JRootPane
            protected setRootPane(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
            public setIconImage(arg0: java.awt.Image): void
            public getContentPane(): java.awt.Container
            public setContentPane(arg0: java.awt.Container): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getGlassPane(): java.awt.Component
            public setGlassPane(arg0: java.awt.Component): void
            public getGraphics(): java.awt.Graphics
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            public static setDefaultLookAndFeelDecorated(arg0: boolean): void
            public static isDefaultLookAndFeelDecorated(): boolean
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JInternalFrame extends javax.swing.JComponent implements javax.accessibility.Accessible , javax.swing.WindowConstants , javax.swing.RootPaneContainer {
            protected rootPane: javax.swing.JRootPane
            protected rootPaneCheckingEnabled: boolean
            protected closable: boolean
            protected isClosed: boolean
            protected maximizable: boolean
            protected isMaximum: boolean
            protected iconable: boolean
            protected isIcon: boolean
            protected resizable: boolean
            protected isSelected: boolean
            protected frameIcon: javax.swing.Icon
            protected title: string
            protected desktopIcon: javax.swing.JInternalFrame$JDesktopIcon
            public static CONTENT_PANE_PROPERTY: string
            public static MENU_BAR_PROPERTY: string
            public static TITLE_PROPERTY: string
            public static LAYERED_PANE_PROPERTY: string
            public static ROOT_PANE_PROPERTY: string
            public static GLASS_PANE_PROPERTY: string
            public static FRAME_ICON_PROPERTY: string
            public static IS_SELECTED_PROPERTY: string
            public static IS_CLOSED_PROPERTY: string
            public static IS_MAXIMUM_PROPERTY: string
            public static IS_ICON_PROPERTY: string
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: java.lang.String | string, arg1: boolean, arg2: boolean)
            public constructor(arg0: java.lang.String | string, arg1: boolean, arg2: boolean, arg3: boolean)
            public constructor(arg0: java.lang.String | string, arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean)
            protected createRootPane(): javax.swing.JRootPane
            public getUI(): javax.swing.plaf.InternalFrameUI
            public setUI(arg0: javax.swing.plaf.InternalFrameUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected isRootPaneCheckingEnabled(): boolean
            protected setRootPaneCheckingEnabled(arg0: boolean): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public setLayout(arg0: java.awt.LayoutManager): void
            public getMenuBar(): javax.swing.JMenuBar
            public getJMenuBar(): javax.swing.JMenuBar
            public setMenuBar(arg0: javax.swing.JMenuBar): void
            public setJMenuBar(arg0: javax.swing.JMenuBar): void
            public getContentPane(): java.awt.Container
            public setContentPane(arg0: java.awt.Container): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getGlassPane(): java.awt.Component
            public setGlassPane(arg0: java.awt.Component): void
            public getRootPane(): javax.swing.JRootPane
            protected setRootPane(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
            public setClosable(arg0: boolean): void
            public isClosable(): boolean
            public isClosed(): boolean
            public setClosed(arg0: boolean): void
            public setResizable(arg0: boolean): void
            public isResizable(): boolean
            public setIconifiable(arg0: boolean): void
            public isIconifiable(): boolean
            public isIcon(): boolean
            public setIcon(arg0: boolean): void
            public setMaximizable(arg0: boolean): void
            public isMaximizable(): boolean
            public isMaximum(): boolean
            public setMaximum(arg0: boolean): void
            public getTitle(): string
            public setTitle(arg0: java.lang.String | string): void
            public setSelected(arg0: boolean): void
            public isSelected(): boolean
            public setFrameIcon(arg0: javax.swing.Icon): void
            public getFrameIcon(): javax.swing.Icon
            public moveToFront(): void
            public moveToBack(): void
            public getLastCursor(): java.awt.Cursor
            public setCursor(arg0: java.awt.Cursor): void
            public setLayer(arg0: java.lang.Integer): void
            public setLayer(arg0: int): void
            public getLayer(): int
            public getDesktopPane(): javax.swing.JDesktopPane
            public setDesktopIcon(arg0: javax.swing.JInternalFrame$JDesktopIcon): void
            public getDesktopIcon(): javax.swing.JInternalFrame$JDesktopIcon
            public getNormalBounds(): java.awt.Rectangle
            public setNormalBounds(arg0: java.awt.Rectangle): void
            public getFocusOwner(): java.awt.Component
            public getMostRecentFocusOwner(): java.awt.Component
            public restoreSubcomponentFocus(): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public addInternalFrameListener(arg0: javax.swing.event.InternalFrameListener): void
            public removeInternalFrameListener(arg0: javax.swing.event.InternalFrameListener): void
            public getInternalFrameListeners(): javax.swing.event.InternalFrameListener[]
            protected fireInternalFrameEvent(arg0: int): void
            public doDefaultCloseAction(): void
            public setDefaultCloseOperation(arg0: int): void
            public getDefaultCloseOperation(): int
            public pack(): void
            public show(): void
            public hide(): void
            public dispose(): void
            public toFront(): void
            public toBack(): void
            public setFocusCycleRoot(arg0: boolean): void
            public isFocusCycleRoot(): boolean
            public getFocusCycleRootAncestor(): java.awt.Container
            public getWarningString(): string
            protected paramString(): string
            protected paintComponent(arg0: java.awt.Graphics): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JLabel extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            protected labelFor: java.awt.Component
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: int)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Icon, arg1: int)
            public constructor(arg0: javax.swing.Icon)
            public constructor()
            public getUI(): javax.swing.plaf.LabelUI
            public setUI(arg0: javax.swing.plaf.LabelUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getText(): string
            public setText(arg0: java.lang.String | string): void
            public getIcon(): javax.swing.Icon
            public setIcon(arg0: javax.swing.Icon): void
            public getDisabledIcon(): javax.swing.Icon
            public setDisabledIcon(arg0: javax.swing.Icon): void
            public setDisplayedMnemonic(arg0: int): void
            public setDisplayedMnemonic(arg0: char): void
            public getDisplayedMnemonic(): int
            public setDisplayedMnemonicIndex(arg0: int): void
            public getDisplayedMnemonicIndex(): int
            protected checkHorizontalKey(arg0: int, arg1: java.lang.String | string): int
            protected checkVerticalKey(arg0: int, arg1: java.lang.String | string): int
            public getIconTextGap(): int
            public setIconTextGap(arg0: int): void
            public getVerticalAlignment(): int
            public setVerticalAlignment(arg0: int): void
            public getHorizontalAlignment(): int
            public setHorizontalAlignment(arg0: int): void
            public getVerticalTextPosition(): int
            public setVerticalTextPosition(arg0: int): void
            public getHorizontalTextPosition(): int
            public setHorizontalTextPosition(arg0: int): void
            public imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            protected paramString(): string
            public getLabelFor(): java.awt.Component
            public setLabelFor(arg0: java.awt.Component): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JLabel$$Lambda extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            protected labelFor: java.awt.Component
        }
        class JLayer<V extends java.awt.Component> extends javax.swing.JComponent implements javax.swing.Scrollable , java.beans.PropertyChangeListener , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: V)
            public constructor(arg0: V, arg1: javax.swing.plaf.LayerUI<V>)
            public getView(): V
            public setView(arg0: V): void
            public setUI(arg0: javax.swing.plaf.LayerUI<V>): void
            public getUI(): javax.swing.plaf.LayerUI<V>
            public getGlassPane(): javax.swing.JPanel
            public setGlassPane(arg0: javax.swing.JPanel | javax.swing.JPanel$$Lambda): void
            public createGlassPane(): javax.swing.JPanel
            public setLayout(arg0: java.awt.LayoutManager): void
            public setBorder(arg0: javax.swing.border.Border): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public removeAll(): void
            protected isPaintingOrigin(): boolean
            public paintImmediately(arg0: int, arg1: int, arg2: int, arg3: int): void
            public paint(arg0: java.awt.Graphics): void
            protected paintComponent(arg0: java.awt.Graphics): void
            public isOptimizedDrawingEnabled(): boolean
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            public setLayerEventMask(arg0: long): void
            public getLayerEventMask(): long
            public updateUI(): void
            public getPreferredScrollableViewportSize(): java.awt.Dimension
            public getScrollableBlockIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableTracksViewportHeight(): boolean
            public getScrollableTracksViewportWidth(): boolean
            public getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public addNotify(): void
            public removeNotify(): void
            public doLayout(): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JLayer$$Lambda<V extends java.awt.Component> extends javax.swing.JComponent implements javax.swing.Scrollable , java.beans.PropertyChangeListener , javax.accessibility.Accessible {
            public constructor()
        }
        class JLayeredPane extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static DEFAULT_LAYER: java.lang.Integer
            public static PALETTE_LAYER: java.lang.Integer
            public static MODAL_LAYER: java.lang.Integer
            public static POPUP_LAYER: java.lang.Integer
            public static DRAG_LAYER: java.lang.Integer
            public static FRAME_CONTENT_LAYER: java.lang.Integer
            public static LAYER_PROPERTY: string
            public constructor()
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: int): void
            public removeAll(): void
            public isOptimizedDrawingEnabled(): boolean
            public static putLayer(arg0: javax.swing.JComponent, arg1: int): void
            public static getLayer(arg0: javax.swing.JComponent): int
            public static getLayeredPaneAbove(arg0: java.awt.Component): javax.swing.JLayeredPane
            public setLayer(arg0: java.awt.Component, arg1: int): void
            public setLayer(arg0: java.awt.Component, arg1: int, arg2: int): void
            public getLayer(arg0: java.awt.Component): int
            public getIndexOf(arg0: java.awt.Component): int
            public moveToFront(arg0: java.awt.Component): void
            public moveToBack(arg0: java.awt.Component): void
            public setPosition(arg0: java.awt.Component, arg1: int): void
            public getPosition(arg0: java.awt.Component): int
            public highestLayer(): int
            public lowestLayer(): int
            public getComponentCountInLayer(arg0: int): int
            public getComponentsInLayer(arg0: int): java.awt.Component[]
            public paint(arg0: java.awt.Graphics): void
            protected getComponentToLayer(): java.util.Hashtable<java.awt.Component, java.lang.Integer>
            protected getObjectForLayer(arg0: int): java.lang.Integer
            protected insertIndexForLayer(arg0: int, arg1: int): int
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JLayeredPane$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static DEFAULT_LAYER: java.lang.Integer
        }
        class JList<E> extends javax.swing.JComponent implements javax.swing.Scrollable , javax.accessibility.Accessible {
            public static VERTICAL: int
            public static VERTICAL_WRAP: int
            public static HORIZONTAL_WRAP: int
            public constructor(arg0: javax.swing.ListModel<E>)
            public constructor(arg0: E[])
            public constructor(arg0: java.util.Vector<E>)
            public constructor()
            public getUI(): javax.swing.plaf.ListUI
            public setUI(arg0: javax.swing.plaf.ListUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getPrototypeCellValue(): E
            public setPrototypeCellValue(arg0: E): void
            public getFixedCellWidth(): int
            public setFixedCellWidth(arg0: int): void
            public getFixedCellHeight(): int
            public setFixedCellHeight(arg0: int): void
            public getCellRenderer(): javax.swing.ListCellRenderer<E>
            public setCellRenderer(arg0: javax.swing.ListCellRenderer<E> | javax.swing.ListCellRenderer$$Lambda<E>): void
            public getSelectionForeground(): java.awt.Color
            public setSelectionForeground(arg0: java.awt.Color): void
            public getSelectionBackground(): java.awt.Color
            public setSelectionBackground(arg0: java.awt.Color): void
            public getVisibleRowCount(): int
            public setVisibleRowCount(arg0: int): void
            public getLayoutOrientation(): int
            public setLayoutOrientation(arg0: int): void
            public getFirstVisibleIndex(): int
            public getLastVisibleIndex(): int
            public ensureIndexIsVisible(arg0: int): void
            public setDragEnabled(arg0: boolean): void
            public getDragEnabled(): boolean
            public setDropMode(arg0: javax.swing.DropMode): void
            public getDropMode(): javax.swing.DropMode
            public getDropLocation(): javax.swing.JList$DropLocation
            public getNextMatch(arg0: java.lang.String | string, arg1: int, arg2: javax.swing.text.Position$Bias): int
            public getToolTipText(arg0: java.awt.event.MouseEvent): string
            public locationToIndex(arg0: java.awt.Point): int
            public indexToLocation(arg0: int): java.awt.Point
            public getCellBounds(arg0: int, arg1: int): java.awt.Rectangle
            public getModel(): javax.swing.ListModel<E>
            public setModel(arg0: javax.swing.ListModel<E>): void
            public setListData(arg0: E[]): void
            public setListData(arg0: java.util.Vector<E>): void
            protected createSelectionModel(): javax.swing.ListSelectionModel
            public getSelectionModel(): javax.swing.ListSelectionModel
            protected fireSelectionValueChanged(arg0: int, arg1: int, arg2: boolean): void
            public addListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
            public removeListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
            public getListSelectionListeners(): javax.swing.event.ListSelectionListener[]
            public setSelectionModel(arg0: javax.swing.ListSelectionModel): void
            public setSelectionMode(arg0: int): void
            public getSelectionMode(): int
            public getAnchorSelectionIndex(): int
            public getLeadSelectionIndex(): int
            public getMinSelectionIndex(): int
            public getMaxSelectionIndex(): int
            public isSelectedIndex(arg0: int): boolean
            public isSelectionEmpty(): boolean
            public clearSelection(): void
            public setSelectionInterval(arg0: int, arg1: int): void
            public addSelectionInterval(arg0: int, arg1: int): void
            public removeSelectionInterval(arg0: int, arg1: int): void
            public setValueIsAdjusting(arg0: boolean): void
            public getValueIsAdjusting(): boolean
            public getSelectedIndices(): int[]
            public setSelectedIndex(arg0: int): void
            public setSelectedIndices(arg0: int[]): void
            public getSelectedValues(): java.lang.Object[]
            public getSelectedValuesList(): java.util.List<E>
            public getSelectedIndex(): int
            public getSelectedValue(): E
            public setSelectedValue(arg0: java.lang.Object, arg1: boolean): void
            public getPreferredScrollableViewportSize(): java.awt.Dimension
            public getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableBlockIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableTracksViewportWidth(): boolean
            public getScrollableTracksViewportHeight(): boolean
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JList$$Lambda<E> extends javax.swing.JComponent implements javax.swing.Scrollable , javax.accessibility.Accessible {
            public static VERTICAL: int
        }
        class JMenu extends javax.swing.JMenuItem implements javax.accessibility.Accessible , javax.swing.MenuElement {
            protected popupListener: javax.swing.JMenu$WinListener
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public updateUI(): void
            public getUIClassID(): string
            public setModel(arg0: javax.swing.ButtonModel): void
            public isSelected(): boolean
            public setSelected(arg0: boolean): void
            public isPopupMenuVisible(): boolean
            public setPopupMenuVisible(arg0: boolean): void
            protected getPopupMenuOrigin(): java.awt.Point
            public getDelay(): int
            public setDelay(arg0: int): void
            public setMenuLocation(arg0: int, arg1: int): void
            public add(arg0: javax.swing.JMenuItem): javax.swing.JMenuItem
            public add(arg0: java.awt.Component): java.awt.Component
            public add(arg0: java.awt.Component, arg1: int): java.awt.Component
            public add(arg0: java.lang.String | string): javax.swing.JMenuItem
            public add(arg0: javax.swing.Action): javax.swing.JMenuItem
            protected createActionComponent(arg0: javax.swing.Action): javax.swing.JMenuItem
            protected createActionChangeListener(arg0: javax.swing.JMenuItem): java.beans.PropertyChangeListener
            public addSeparator(): void
            public insert(arg0: java.lang.String | string, arg1: int): void
            public insert(arg0: javax.swing.JMenuItem, arg1: int): javax.swing.JMenuItem
            public insert(arg0: javax.swing.Action, arg1: int): javax.swing.JMenuItem
            public insertSeparator(arg0: int): void
            public getItem(arg0: int): javax.swing.JMenuItem
            public getItemCount(): int
            public isTearOff(): boolean
            public remove(arg0: javax.swing.JMenuItem): void
            public remove(arg0: int): void
            public remove(arg0: java.awt.Component): void
            public removeAll(): void
            public getMenuComponentCount(): int
            public getMenuComponent(arg0: int): java.awt.Component
            public getMenuComponents(): java.awt.Component[]
            public isTopLevelMenu(): boolean
            public isMenuComponent(arg0: java.awt.Component): boolean
            public getPopupMenu(): javax.swing.JPopupMenu
            public addMenuListener(arg0: javax.swing.event.MenuListener): void
            public removeMenuListener(arg0: javax.swing.event.MenuListener): void
            public getMenuListeners(): javax.swing.event.MenuListener[]
            protected fireMenuSelected(): void
            protected fireMenuDeselected(): void
            protected fireMenuCanceled(): void
            protected createWinListener(arg0: javax.swing.JPopupMenu): javax.swing.JMenu$WinListener
            public menuSelectionChanged(arg0: boolean): void
            public getSubElements(): javax.swing.MenuElement[]
            public getComponent(): java.awt.Component
            public applyComponentOrientation(arg0: java.awt.ComponentOrientation): void
            public setComponentOrientation(arg0: java.awt.ComponentOrientation): void
            public setAccelerator(arg0: javax.swing.KeyStroke): void
            protected processKeyEvent(arg0: java.awt.event.KeyEvent): void
            public doClick(arg0: int): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JMenuBar extends javax.swing.JComponent implements javax.accessibility.Accessible , javax.swing.MenuElement {
            public constructor()
            public getUI(): javax.swing.plaf.MenuBarUI
            public setUI(arg0: javax.swing.plaf.MenuBarUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getSelectionModel(): javax.swing.SingleSelectionModel
            public setSelectionModel(arg0: javax.swing.SingleSelectionModel): void
            public add(arg0: javax.swing.JMenu): javax.swing.JMenu
            public getMenu(arg0: int): javax.swing.JMenu
            public getMenuCount(): int
            public setHelpMenu(arg0: javax.swing.JMenu): void
            public getHelpMenu(): javax.swing.JMenu
            public getComponentAtIndex(arg0: int): java.awt.Component
            public getComponentIndex(arg0: java.awt.Component): int
            public setSelected(arg0: java.awt.Component): void
            public isSelected(): boolean
            public isBorderPainted(): boolean
            public setBorderPainted(arg0: boolean): void
            protected paintBorder(arg0: java.awt.Graphics): void
            public setMargin(arg0: java.awt.Insets): void
            public getMargin(): java.awt.Insets
            public processMouseEvent(arg0: java.awt.event.MouseEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            public processKeyEvent(arg0: java.awt.event.KeyEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            public menuSelectionChanged(arg0: boolean): void
            public getSubElements(): javax.swing.MenuElement[]
            public getComponent(): java.awt.Component
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            protected processKeyBinding(arg0: javax.swing.KeyStroke, arg1: java.awt.event.KeyEvent, arg2: int, arg3: boolean): boolean
            public addNotify(): void
            public removeNotify(): void
            public static class: java.lang.Class<any>
        }
        class JMenuItem extends javax.swing.AbstractButton implements javax.accessibility.Accessible , javax.swing.MenuElement {
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public setModel(arg0: javax.swing.ButtonModel): void
            protected init(arg0: java.lang.String | string, arg1: javax.swing.Icon): void
            public setUI(arg0: javax.swing.plaf.MenuItemUI): void
            public updateUI(): void
            public getUIClassID(): string
            public setArmed(arg0: boolean): void
            public isArmed(): boolean
            public setEnabled(arg0: boolean): void
            public setAccelerator(arg0: javax.swing.KeyStroke): void
            public getAccelerator(): javax.swing.KeyStroke
            protected configurePropertiesFromAction(arg0: javax.swing.Action): void
            protected actionPropertyChanged(arg0: javax.swing.Action, arg1: java.lang.String | string): void
            public processMouseEvent(arg0: java.awt.event.MouseEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            public processKeyEvent(arg0: java.awt.event.KeyEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            public processMenuDragMouseEvent(arg0: javax.swing.event.MenuDragMouseEvent): void
            public processMenuKeyEvent(arg0: javax.swing.event.MenuKeyEvent): void
            protected fireMenuDragMouseEntered(arg0: javax.swing.event.MenuDragMouseEvent): void
            protected fireMenuDragMouseExited(arg0: javax.swing.event.MenuDragMouseEvent): void
            protected fireMenuDragMouseDragged(arg0: javax.swing.event.MenuDragMouseEvent): void
            protected fireMenuDragMouseReleased(arg0: javax.swing.event.MenuDragMouseEvent): void
            protected fireMenuKeyPressed(arg0: javax.swing.event.MenuKeyEvent): void
            protected fireMenuKeyReleased(arg0: javax.swing.event.MenuKeyEvent): void
            protected fireMenuKeyTyped(arg0: javax.swing.event.MenuKeyEvent): void
            public menuSelectionChanged(arg0: boolean): void
            public getSubElements(): javax.swing.MenuElement[]
            public getComponent(): java.awt.Component
            public addMenuDragMouseListener(arg0: javax.swing.event.MenuDragMouseListener): void
            public removeMenuDragMouseListener(arg0: javax.swing.event.MenuDragMouseListener): void
            public getMenuDragMouseListeners(): javax.swing.event.MenuDragMouseListener[]
            public addMenuKeyListener(arg0: javax.swing.event.MenuKeyListener): void
            public removeMenuKeyListener(arg0: javax.swing.event.MenuKeyListener): void
            public getMenuKeyListeners(): javax.swing.event.MenuKeyListener[]
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JOptionPane extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static UNINITIALIZED_VALUE: java.lang.Object
            public static DEFAULT_OPTION: int
            public static YES_NO_OPTION: int
            public static YES_NO_CANCEL_OPTION: int
            public static OK_CANCEL_OPTION: int
            public static YES_OPTION: int
            public static NO_OPTION: int
            public static CANCEL_OPTION: int
            public static OK_OPTION: int
            public static CLOSED_OPTION: int
            public static ERROR_MESSAGE: int
            public static INFORMATION_MESSAGE: int
            public static WARNING_MESSAGE: int
            public static QUESTION_MESSAGE: int
            public static PLAIN_MESSAGE: int
            public static ICON_PROPERTY: string
            public static MESSAGE_PROPERTY: string
            public static VALUE_PROPERTY: string
            public static OPTIONS_PROPERTY: string
            public static INITIAL_VALUE_PROPERTY: string
            public static MESSAGE_TYPE_PROPERTY: string
            public static OPTION_TYPE_PROPERTY: string
            public static SELECTION_VALUES_PROPERTY: string
            public static INITIAL_SELECTION_VALUE_PROPERTY: string
            public static INPUT_VALUE_PROPERTY: string
            public static WANTS_INPUT_PROPERTY: string
            protected icon: javax.swing.Icon
            protected message: java.lang.Object
            protected options: java.lang.Object[]
            protected initialValue: java.lang.Object
            protected messageType: int
            protected optionType: int
            protected value: java.lang.Object
            protected selectionValues: java.lang.Object[]
            protected inputValue: java.lang.Object
            protected initialSelectionValue: java.lang.Object
            protected wantsInput: boolean
            public static showInputDialog(arg0: java.lang.Object): string
            public static showInputDialog(arg0: java.lang.Object, arg1: java.lang.Object): string
            public static showInputDialog(arg0: java.awt.Component, arg1: java.lang.Object): string
            public static showInputDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.Object): string
            public static showInputDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int): string
            public static showInputDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: javax.swing.Icon, arg5: java.lang.Object[], arg6: java.lang.Object): java.lang.Object
            public static showMessageDialog(arg0: java.awt.Component, arg1: java.lang.Object): void
            public static showMessageDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int): void
            public static showMessageDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: javax.swing.Icon): void
            public static showConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object): int
            public static showConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int): int
            public static showConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int): int
            public static showConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: javax.swing.Icon): int
            public static showOptionDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: javax.swing.Icon, arg6: java.lang.Object[], arg7: java.lang.Object): int
            public createDialog(arg0: java.awt.Component, arg1: java.lang.String | string): javax.swing.JDialog
            public createDialog(arg0: java.lang.String | string): javax.swing.JDialog
            public static showInternalMessageDialog(arg0: java.awt.Component, arg1: java.lang.Object): void
            public static showInternalMessageDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int): void
            public static showInternalMessageDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: javax.swing.Icon): void
            public static showInternalConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object): int
            public static showInternalConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int): int
            public static showInternalConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int): int
            public static showInternalConfirmDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: javax.swing.Icon): int
            public static showInternalOptionDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: javax.swing.Icon, arg6: java.lang.Object[], arg7: java.lang.Object): int
            public static showInternalInputDialog(arg0: java.awt.Component, arg1: java.lang.Object): string
            public static showInternalInputDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int): string
            public static showInternalInputDialog(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: javax.swing.Icon, arg5: java.lang.Object[], arg6: java.lang.Object): java.lang.Object
            public createInternalFrame(arg0: java.awt.Component, arg1: java.lang.String | string): javax.swing.JInternalFrame
            public static getFrameForComponent(arg0: java.awt.Component): java.awt.Frame
            public static getDesktopPaneForComponent(arg0: java.awt.Component): javax.swing.JDesktopPane
            public static setRootFrame(arg0: java.awt.Frame): void
            public static getRootFrame(): java.awt.Frame
            public constructor()
            public constructor(arg0: java.lang.Object)
            public constructor(arg0: java.lang.Object, arg1: int)
            public constructor(arg0: java.lang.Object, arg1: int, arg2: int)
            public constructor(arg0: java.lang.Object, arg1: int, arg2: int, arg3: javax.swing.Icon)
            public constructor(arg0: java.lang.Object, arg1: int, arg2: int, arg3: javax.swing.Icon, arg4: java.lang.Object[])
            public constructor(arg0: java.lang.Object, arg1: int, arg2: int, arg3: javax.swing.Icon, arg4: java.lang.Object[], arg5: java.lang.Object)
            public setUI(arg0: javax.swing.plaf.OptionPaneUI): void
            public getUI(): javax.swing.plaf.OptionPaneUI
            public updateUI(): void
            public getUIClassID(): string
            public setMessage(arg0: java.lang.Object): void
            public getMessage(): java.lang.Object
            public setIcon(arg0: javax.swing.Icon): void
            public getIcon(): javax.swing.Icon
            public setValue(arg0: java.lang.Object): void
            public getValue(): java.lang.Object
            public setOptions(arg0: java.lang.Object[]): void
            public getOptions(): java.lang.Object[]
            public setInitialValue(arg0: java.lang.Object): void
            public getInitialValue(): java.lang.Object
            public setMessageType(arg0: int): void
            public getMessageType(): int
            public setOptionType(arg0: int): void
            public getOptionType(): int
            public setSelectionValues(arg0: java.lang.Object[]): void
            public getSelectionValues(): java.lang.Object[]
            public setInitialSelectionValue(arg0: java.lang.Object): void
            public getInitialSelectionValue(): java.lang.Object
            public setInputValue(arg0: java.lang.Object): void
            public getInputValue(): java.lang.Object
            public getMaxCharactersPerLineCount(): int
            public setWantsInput(arg0: boolean): void
            public getWantsInput(): boolean
            public selectInitialValue(): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JOptionPane$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static UNINITIALIZED_VALUE: java.lang.Object
        }
        class JPanel extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor(arg0: java.awt.LayoutManager, arg1: boolean)
            public constructor(arg0: java.awt.LayoutManager)
            public constructor(arg0: boolean)
            public constructor()
            public updateUI(): void
            public getUI(): javax.swing.plaf.PanelUI
            public setUI(arg0: javax.swing.plaf.PanelUI): void
            public getUIClassID(): string
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JPanel$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor(arg0: java.awt.LayoutManager, arg1: boolean)
        }
        class JPasswordField extends javax.swing.JTextField {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: int)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public constructor(arg0: javax.swing.text.Document, arg1: java.lang.String | string, arg2: int)
            public getUIClassID(): string
            public updateUI(): void
            public getEchoChar(): char
            public setEchoChar(arg0: char): void
            public echoCharIsSet(): boolean
            public cut(): void
            public copy(): void
            public getText(): string
            public getText(arg0: int, arg1: int): string
            public getPassword(): char[]
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JPopupMenu extends javax.swing.JComponent implements javax.accessibility.Accessible , javax.swing.MenuElement {
            public static setDefaultLightWeightPopupEnabled(arg0: boolean): void
            public static getDefaultLightWeightPopupEnabled(): boolean
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public getUI(): javax.swing.plaf.PopupMenuUI
            public setUI(arg0: javax.swing.plaf.PopupMenuUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected processFocusEvent(arg0: java.awt.event.FocusEvent): void
            protected processKeyEvent(arg0: java.awt.event.KeyEvent): void
            public getSelectionModel(): javax.swing.SingleSelectionModel
            public setSelectionModel(arg0: javax.swing.SingleSelectionModel): void
            public add(arg0: javax.swing.JMenuItem): javax.swing.JMenuItem
            public add(arg0: java.lang.String | string): javax.swing.JMenuItem
            public add(arg0: javax.swing.Action): javax.swing.JMenuItem
            protected createActionComponent(arg0: javax.swing.Action): javax.swing.JMenuItem
            protected createActionChangeListener(arg0: javax.swing.JMenuItem): java.beans.PropertyChangeListener
            public remove(arg0: int): void
            public setLightWeightPopupEnabled(arg0: boolean): void
            public isLightWeightPopupEnabled(): boolean
            public getLabel(): string
            public setLabel(arg0: java.lang.String | string): void
            public addSeparator(): void
            public insert(arg0: javax.swing.Action, arg1: int): void
            public insert(arg0: java.awt.Component, arg1: int): void
            public addPopupMenuListener(arg0: javax.swing.event.PopupMenuListener): void
            public removePopupMenuListener(arg0: javax.swing.event.PopupMenuListener): void
            public getPopupMenuListeners(): javax.swing.event.PopupMenuListener[]
            public addMenuKeyListener(arg0: javax.swing.event.MenuKeyListener): void
            public removeMenuKeyListener(arg0: javax.swing.event.MenuKeyListener): void
            public getMenuKeyListeners(): javax.swing.event.MenuKeyListener[]
            protected firePopupMenuWillBecomeVisible(): void
            protected firePopupMenuWillBecomeInvisible(): void
            protected firePopupMenuCanceled(): void
            public pack(): void
            public setVisible(arg0: boolean): void
            public isVisible(): boolean
            public setLocation(arg0: int, arg1: int): void
            public getInvoker(): java.awt.Component
            public setInvoker(arg0: java.awt.Component): void
            public show(arg0: java.awt.Component, arg1: int, arg2: int): void
            public getComponentAtIndex(arg0: int): java.awt.Component
            public getComponentIndex(arg0: java.awt.Component): int
            public setPopupSize(arg0: java.awt.Dimension): void
            public setPopupSize(arg0: int, arg1: int): void
            public setSelected(arg0: java.awt.Component): void
            public isBorderPainted(): boolean
            public setBorderPainted(arg0: boolean): void
            protected paintBorder(arg0: java.awt.Graphics): void
            public getMargin(): java.awt.Insets
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public processMouseEvent(arg0: java.awt.event.MouseEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            public processKeyEvent(arg0: java.awt.event.KeyEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            public menuSelectionChanged(arg0: boolean): void
            public getSubElements(): javax.swing.MenuElement[]
            public getComponent(): java.awt.Component
            public isPopupTrigger(arg0: java.awt.event.MouseEvent): boolean
            public static class: java.lang.Class<any>
        }
        class JProgressBar extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            protected orientation: int
            protected paintBorder: boolean
            protected model: javax.swing.BoundedRangeModel
            protected progressString: string
            protected paintString: boolean
            protected changeEvent: javax.swing.event.ChangeEvent
            protected changeListener: javax.swing.event.ChangeListener
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: int, arg1: int, arg2: int)
            public constructor(arg0: javax.swing.BoundedRangeModel)
            public getOrientation(): int
            public setOrientation(arg0: int): void
            public isStringPainted(): boolean
            public setStringPainted(arg0: boolean): void
            public getString(): string
            public setString(arg0: java.lang.String | string): void
            public getPercentComplete(): double
            public isBorderPainted(): boolean
            public setBorderPainted(arg0: boolean): void
            protected paintBorder(arg0: java.awt.Graphics): void
            public getUI(): javax.swing.plaf.ProgressBarUI
            public setUI(arg0: javax.swing.plaf.ProgressBarUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected createChangeListener(): javax.swing.event.ChangeListener
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public getModel(): javax.swing.BoundedRangeModel
            public setModel(arg0: javax.swing.BoundedRangeModel): void
            public getValue(): int
            public getMinimum(): int
            public getMaximum(): int
            public setValue(arg0: int): void
            public setMinimum(arg0: int): void
            public setMaximum(arg0: int): void
            public setIndeterminate(arg0: boolean): void
            public isIndeterminate(): boolean
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JProgressBar$$Lambda extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            protected orientation: int
        }
        class JRadioButton extends javax.swing.JToggleButton implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: javax.swing.Icon, arg1: boolean)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: boolean)
            public updateUI(): void
            public getUIClassID(): string
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JRadioButton$$Lambda extends javax.swing.JToggleButton implements javax.accessibility.Accessible {
            public constructor()
        }
        class JRadioButtonMenuItem extends javax.swing.JMenuItem implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: javax.swing.Icon, arg1: boolean)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: boolean)
            public getUIClassID(): string
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JRadioButtonMenuItem$$Lambda extends javax.swing.JMenuItem implements javax.accessibility.Accessible {
            public constructor()
        }
        class JRootPane extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static NONE: int
            public static FRAME: int
            public static PLAIN_DIALOG: int
            public static INFORMATION_DIALOG: int
            public static ERROR_DIALOG: int
            public static COLOR_CHOOSER_DIALOG: int
            public static FILE_CHOOSER_DIALOG: int
            public static QUESTION_DIALOG: int
            public static WARNING_DIALOG: int
            protected menuBar: javax.swing.JMenuBar
            protected contentPane: java.awt.Container
            protected layeredPane: javax.swing.JLayeredPane
            protected glassPane: java.awt.Component
            protected defaultButton: javax.swing.JButton
            protected defaultPressAction: javax.swing.JRootPane$DefaultAction
            protected defaultReleaseAction: javax.swing.JRootPane$DefaultAction
            public constructor()
            public setDoubleBuffered(arg0: boolean): void
            public getWindowDecorationStyle(): int
            public setWindowDecorationStyle(arg0: int): void
            public getUI(): javax.swing.plaf.RootPaneUI
            public setUI(arg0: javax.swing.plaf.RootPaneUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected createLayeredPane(): javax.swing.JLayeredPane
            protected createContentPane(): java.awt.Container
            protected createGlassPane(): java.awt.Component
            protected createRootLayout(): java.awt.LayoutManager
            public setJMenuBar(arg0: javax.swing.JMenuBar): void
            public setMenuBar(arg0: javax.swing.JMenuBar): void
            public getJMenuBar(): javax.swing.JMenuBar
            public getMenuBar(): javax.swing.JMenuBar
            public setContentPane(arg0: java.awt.Container): void
            public getContentPane(): java.awt.Container
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setGlassPane(arg0: java.awt.Component): void
            public getGlassPane(): java.awt.Component
            public isValidateRoot(): boolean
            public isOptimizedDrawingEnabled(): boolean
            public addNotify(): void
            public removeNotify(): void
            public setDefaultButton(arg0: javax.swing.JButton | javax.swing.JButton$$Lambda): void
            public getDefaultButton(): javax.swing.JButton
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JRootPane$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static NONE: int
        }
        class JScrollBar extends javax.swing.JComponent implements java.awt.Adjustable , javax.accessibility.Accessible {
            protected model: javax.swing.BoundedRangeModel
            protected orientation: int
            protected unitIncrement: int
            protected blockIncrement: int
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int)
            public constructor(arg0: int)
            public constructor()
            public setUI(arg0: javax.swing.plaf.ScrollBarUI): void
            public getUI(): javax.swing.plaf.ScrollBarUI
            public updateUI(): void
            public getUIClassID(): string
            public getOrientation(): int
            public setOrientation(arg0: int): void
            public getModel(): javax.swing.BoundedRangeModel
            public setModel(arg0: javax.swing.BoundedRangeModel): void
            public getUnitIncrement(arg0: int): int
            public setUnitIncrement(arg0: int): void
            public getBlockIncrement(arg0: int): int
            public setBlockIncrement(arg0: int): void
            public getUnitIncrement(): int
            public getBlockIncrement(): int
            public getValue(): int
            public setValue(arg0: int): void
            public getVisibleAmount(): int
            public setVisibleAmount(arg0: int): void
            public getMinimum(): int
            public setMinimum(arg0: int): void
            public getMaximum(): int
            public setMaximum(arg0: int): void
            public getValueIsAdjusting(): boolean
            public setValueIsAdjusting(arg0: boolean): void
            public setValues(arg0: int, arg1: int, arg2: int, arg3: int): void
            public addAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            public removeAdjustmentListener(arg0: java.awt.event.AdjustmentListener): void
            public getAdjustmentListeners(): java.awt.event.AdjustmentListener[]
            protected fireAdjustmentValueChanged(arg0: int, arg1: int, arg2: int): void
            public getMinimumSize(): java.awt.Dimension
            public getMaximumSize(): java.awt.Dimension
            public setEnabled(arg0: boolean): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JScrollBar$$Lambda extends javax.swing.JComponent implements java.awt.Adjustable , javax.accessibility.Accessible {
            protected model: javax.swing.BoundedRangeModel
        }
        class JScrollPane extends javax.swing.JComponent implements javax.swing.ScrollPaneConstants , javax.accessibility.Accessible {
            protected verticalScrollBarPolicy: int
            protected horizontalScrollBarPolicy: int
            protected viewport: javax.swing.JViewport
            protected verticalScrollBar: javax.swing.JScrollBar
            protected horizontalScrollBar: javax.swing.JScrollBar
            protected rowHeader: javax.swing.JViewport
            protected columnHeader: javax.swing.JViewport
            protected lowerLeft: java.awt.Component
            protected lowerRight: java.awt.Component
            protected upperLeft: java.awt.Component
            protected upperRight: java.awt.Component
            public constructor(arg0: java.awt.Component, arg1: int, arg2: int)
            public constructor(arg0: java.awt.Component)
            public constructor(arg0: int, arg1: int)
            public constructor()
            public getUI(): javax.swing.plaf.ScrollPaneUI
            public setUI(arg0: javax.swing.plaf.ScrollPaneUI): void
            public updateUI(): void
            public getUIClassID(): string
            public setLayout(arg0: java.awt.LayoutManager): void
            public isValidateRoot(): boolean
            public getVerticalScrollBarPolicy(): int
            public setVerticalScrollBarPolicy(arg0: int): void
            public getHorizontalScrollBarPolicy(): int
            public setHorizontalScrollBarPolicy(arg0: int): void
            public getViewportBorder(): javax.swing.border.Border
            public setViewportBorder(arg0: javax.swing.border.Border): void
            public getViewportBorderBounds(): java.awt.Rectangle
            public createHorizontalScrollBar(): javax.swing.JScrollBar
            public getHorizontalScrollBar(): javax.swing.JScrollBar
            public setHorizontalScrollBar(arg0: javax.swing.JScrollBar | javax.swing.JScrollBar$$Lambda): void
            public createVerticalScrollBar(): javax.swing.JScrollBar
            public getVerticalScrollBar(): javax.swing.JScrollBar
            public setVerticalScrollBar(arg0: javax.swing.JScrollBar | javax.swing.JScrollBar$$Lambda): void
            protected createViewport(): javax.swing.JViewport
            public getViewport(): javax.swing.JViewport
            public setViewport(arg0: javax.swing.JViewport | javax.swing.JViewport$$Lambda): void
            public setViewportView(arg0: java.awt.Component): void
            public getRowHeader(): javax.swing.JViewport
            public setRowHeader(arg0: javax.swing.JViewport | javax.swing.JViewport$$Lambda): void
            public setRowHeaderView(arg0: java.awt.Component): void
            public getColumnHeader(): javax.swing.JViewport
            public setColumnHeader(arg0: javax.swing.JViewport | javax.swing.JViewport$$Lambda): void
            public setColumnHeaderView(arg0: java.awt.Component): void
            public getCorner(arg0: java.lang.String | string): java.awt.Component
            public setCorner(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public setComponentOrientation(arg0: java.awt.ComponentOrientation): void
            public isWheelScrollingEnabled(): boolean
            public setWheelScrollingEnabled(arg0: boolean): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JScrollPane$$Lambda extends javax.swing.JComponent implements javax.swing.ScrollPaneConstants , javax.accessibility.Accessible {
            protected verticalScrollBarPolicy: int
        }
        class JSeparator extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: int)
            public getUI(): javax.swing.plaf.SeparatorUI
            public setUI(arg0: javax.swing.plaf.SeparatorUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getOrientation(): int
            public setOrientation(arg0: int): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JSeparator$$Lambda extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            public constructor()
        }
        class JSlider extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            protected sliderModel: javax.swing.BoundedRangeModel
            protected majorTickSpacing: int
            protected minorTickSpacing: int
            protected snapToTicks: boolean
            protected orientation: int
            protected changeListener: javax.swing.event.ChangeListener
            protected changeEvent: javax.swing.event.ChangeEvent
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: int, arg1: int, arg2: int)
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public constructor(arg0: javax.swing.BoundedRangeModel)
            public getUI(): javax.swing.plaf.SliderUI
            public setUI(arg0: javax.swing.plaf.SliderUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected createChangeListener(): javax.swing.event.ChangeListener
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public getModel(): javax.swing.BoundedRangeModel
            public setModel(arg0: javax.swing.BoundedRangeModel): void
            public getValue(): int
            public setValue(arg0: int): void
            public getMinimum(): int
            public setMinimum(arg0: int): void
            public getMaximum(): int
            public setMaximum(arg0: int): void
            public getValueIsAdjusting(): boolean
            public setValueIsAdjusting(arg0: boolean): void
            public getExtent(): int
            public setExtent(arg0: int): void
            public getOrientation(): int
            public setOrientation(arg0: int): void
            public setFont(arg0: java.awt.Font): void
            public imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            public getLabelTable(): java.util.Dictionary
            public setLabelTable(arg0: java.util.Dictionary): void
            protected updateLabelUIs(): void
            public createStandardLabels(arg0: int): java.util.Hashtable
            public createStandardLabels(arg0: int, arg1: int): java.util.Hashtable
            public getInverted(): boolean
            public setInverted(arg0: boolean): void
            public getMajorTickSpacing(): int
            public setMajorTickSpacing(arg0: int): void
            public getMinorTickSpacing(): int
            public setMinorTickSpacing(arg0: int): void
            public getSnapToTicks(): boolean
            public setSnapToTicks(arg0: boolean): void
            public getPaintTicks(): boolean
            public setPaintTicks(arg0: boolean): void
            public getPaintTrack(): boolean
            public setPaintTrack(arg0: boolean): void
            public getPaintLabels(): boolean
            public setPaintLabels(arg0: boolean): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JSlider$$Lambda extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            protected sliderModel: javax.swing.BoundedRangeModel
        }
        class JSpinner extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor(arg0: javax.swing.SpinnerModel)
            public constructor()
            public getUI(): javax.swing.plaf.SpinnerUI
            public setUI(arg0: javax.swing.plaf.SpinnerUI): void
            public getUIClassID(): string
            public updateUI(): void
            protected createEditor(arg0: javax.swing.SpinnerModel): javax.swing.JComponent
            public setModel(arg0: javax.swing.SpinnerModel): void
            public getModel(): javax.swing.SpinnerModel
            public getValue(): java.lang.Object
            public setValue(arg0: java.lang.Object): void
            public getNextValue(): java.lang.Object
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public getPreviousValue(): java.lang.Object
            public setEditor(arg0: javax.swing.JComponent): void
            public getEditor(): javax.swing.JComponent
            public commitEdit(): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JSpinner$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor(arg0: javax.swing.SpinnerModel)
        }
        class JSplitPane extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static VERTICAL_SPLIT: int
            public static HORIZONTAL_SPLIT: int
            public static LEFT: string
            public static RIGHT: string
            public static TOP: string
            public static BOTTOM: string
            public static DIVIDER: string
            public static ORIENTATION_PROPERTY: string
            public static CONTINUOUS_LAYOUT_PROPERTY: string
            public static DIVIDER_SIZE_PROPERTY: string
            public static ONE_TOUCH_EXPANDABLE_PROPERTY: string
            public static LAST_DIVIDER_LOCATION_PROPERTY: string
            public static DIVIDER_LOCATION_PROPERTY: string
            public static RESIZE_WEIGHT_PROPERTY: string
            protected orientation: int
            protected continuousLayout: boolean
            protected leftComponent: java.awt.Component
            protected rightComponent: java.awt.Component
            protected dividerSize: int
            protected oneTouchExpandable: boolean
            protected lastDividerLocation: int
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: boolean)
            public constructor(arg0: int, arg1: java.awt.Component, arg2: java.awt.Component)
            public constructor(arg0: int, arg1: boolean, arg2: java.awt.Component, arg3: java.awt.Component)
            public setUI(arg0: javax.swing.plaf.SplitPaneUI): void
            public getUI(): javax.swing.plaf.SplitPaneUI
            public updateUI(): void
            public getUIClassID(): string
            public setDividerSize(arg0: int): void
            public getDividerSize(): int
            public setLeftComponent(arg0: java.awt.Component): void
            public getLeftComponent(): java.awt.Component
            public setTopComponent(arg0: java.awt.Component): void
            public getTopComponent(): java.awt.Component
            public setRightComponent(arg0: java.awt.Component): void
            public getRightComponent(): java.awt.Component
            public setBottomComponent(arg0: java.awt.Component): void
            public getBottomComponent(): java.awt.Component
            public setOneTouchExpandable(arg0: boolean): void
            public isOneTouchExpandable(): boolean
            public setLastDividerLocation(arg0: int): void
            public getLastDividerLocation(): int
            public setOrientation(arg0: int): void
            public getOrientation(): int
            public setContinuousLayout(arg0: boolean): void
            public isContinuousLayout(): boolean
            public setResizeWeight(arg0: double): void
            public getResizeWeight(): double
            public resetToPreferredSizes(): void
            public setDividerLocation(arg0: double): void
            public setDividerLocation(arg0: int): void
            public getDividerLocation(): int
            public getMinimumDividerLocation(): int
            public getMaximumDividerLocation(): int
            public remove(arg0: java.awt.Component): void
            public remove(arg0: int): void
            public removeAll(): void
            public isValidateRoot(): boolean
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            protected paintChildren(arg0: java.awt.Graphics): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JSplitPane$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public static VERTICAL_SPLIT: int
        }
        class JTabbedPane extends javax.swing.JComponent implements java.io.Serializable , javax.accessibility.Accessible , javax.swing.SwingConstants {
            public static WRAP_TAB_LAYOUT: int
            public static SCROLL_TAB_LAYOUT: int
            protected tabPlacement: int
            protected model: javax.swing.SingleSelectionModel
            protected changeListener: javax.swing.event.ChangeListener
            protected changeEvent: javax.swing.event.ChangeEvent
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: int)
            public getUI(): javax.swing.plaf.TabbedPaneUI
            public setUI(arg0: javax.swing.plaf.TabbedPaneUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected createChangeListener(): javax.swing.event.ChangeListener
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public getModel(): javax.swing.SingleSelectionModel
            public setModel(arg0: javax.swing.SingleSelectionModel): void
            public getTabPlacement(): int
            public setTabPlacement(arg0: int): void
            public getTabLayoutPolicy(): int
            public setTabLayoutPolicy(arg0: int): void
            public getSelectedIndex(): int
            public setSelectedIndex(arg0: int): void
            public getSelectedComponent(): java.awt.Component
            public setSelectedComponent(arg0: java.awt.Component): void
            public insertTab(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: java.awt.Component, arg3: java.lang.String | string, arg4: int): void
            public addTab(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: java.awt.Component, arg3: java.lang.String | string): void
            public addTab(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: java.awt.Component): void
            public addTab(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public add(arg0: java.awt.Component): java.awt.Component
            public add(arg0: java.lang.String | string, arg1: java.awt.Component): java.awt.Component
            public add(arg0: java.awt.Component, arg1: int): java.awt.Component
            public add(arg0: java.awt.Component, arg1: java.lang.Object): void
            public add(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public removeTabAt(arg0: int): void
            public remove(arg0: java.awt.Component): void
            public remove(arg0: int): void
            public removeAll(): void
            public getTabCount(): int
            public getTabRunCount(): int
            public getTitleAt(arg0: int): string
            public getIconAt(arg0: int): javax.swing.Icon
            public getDisabledIconAt(arg0: int): javax.swing.Icon
            public getToolTipTextAt(arg0: int): string
            public getBackgroundAt(arg0: int): java.awt.Color
            public getForegroundAt(arg0: int): java.awt.Color
            public isEnabledAt(arg0: int): boolean
            public getComponentAt(arg0: int): java.awt.Component
            public getMnemonicAt(arg0: int): int
            public getDisplayedMnemonicIndexAt(arg0: int): int
            public getBoundsAt(arg0: int): java.awt.Rectangle
            public setTitleAt(arg0: int, arg1: java.lang.String | string): void
            public setIconAt(arg0: int, arg1: javax.swing.Icon): void
            public setDisabledIconAt(arg0: int, arg1: javax.swing.Icon): void
            public setToolTipTextAt(arg0: int, arg1: java.lang.String | string): void
            public setBackgroundAt(arg0: int, arg1: java.awt.Color): void
            public setForegroundAt(arg0: int, arg1: java.awt.Color): void
            public setEnabledAt(arg0: int, arg1: boolean): void
            public setComponentAt(arg0: int, arg1: java.awt.Component): void
            public setDisplayedMnemonicIndexAt(arg0: int, arg1: int): void
            public setMnemonicAt(arg0: int, arg1: int): void
            public indexOfTab(arg0: java.lang.String | string): int
            public indexOfTab(arg0: javax.swing.Icon): int
            public indexOfComponent(arg0: java.awt.Component): int
            public indexAtLocation(arg0: int, arg1: int): int
            public getToolTipText(arg0: java.awt.event.MouseEvent): string
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public setTabComponentAt(arg0: int, arg1: java.awt.Component): void
            public getTabComponentAt(arg0: int): java.awt.Component
            public indexOfTabComponent(arg0: java.awt.Component): int
            public static class: java.lang.Class<any>
        }
        class JTable extends javax.swing.JComponent implements javax.swing.event.TableModelListener , javax.swing.Scrollable , javax.swing.event.TableColumnModelListener , javax.swing.event.ListSelectionListener , javax.swing.event.CellEditorListener , javax.accessibility.Accessible , javax.swing.event.RowSorterListener {
            public static AUTO_RESIZE_OFF: int
            public static AUTO_RESIZE_NEXT_COLUMN: int
            public static AUTO_RESIZE_SUBSEQUENT_COLUMNS: int
            public static AUTO_RESIZE_LAST_COLUMN: int
            public static AUTO_RESIZE_ALL_COLUMNS: int
            protected dataModel: javax.swing.table.TableModel
            protected columnModel: javax.swing.table.TableColumnModel
            protected selectionModel: javax.swing.ListSelectionModel
            protected tableHeader: javax.swing.table.JTableHeader
            protected rowHeight: int
            protected rowMargin: int
            protected gridColor: java.awt.Color
            protected showHorizontalLines: boolean
            protected showVerticalLines: boolean
            protected autoResizeMode: int
            protected autoCreateColumnsFromModel: boolean
            protected preferredViewportSize: java.awt.Dimension
            protected rowSelectionAllowed: boolean
            protected cellSelectionEnabled: boolean
            protected editorComp: java.awt.Component
            protected cellEditor: javax.swing.table.TableCellEditor
            protected editingColumn: int
            protected editingRow: int
            protected defaultRenderersByColumnClass: java.util.Hashtable
            protected defaultEditorsByColumnClass: java.util.Hashtable
            protected selectionForeground: java.awt.Color
            protected selectionBackground: java.awt.Color
            public constructor()
            public constructor(arg0: javax.swing.table.TableModel)
            public constructor(arg0: javax.swing.table.TableModel, arg1: javax.swing.table.TableColumnModel)
            public constructor(arg0: javax.swing.table.TableModel, arg1: javax.swing.table.TableColumnModel, arg2: javax.swing.ListSelectionModel)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: java.util.Vector, arg1: java.util.Vector)
            public constructor(arg0: java.lang.Object[][], arg1: java.lang.Object[])
            public addNotify(): void
            protected configureEnclosingScrollPane(): void
            public removeNotify(): void
            protected unconfigureEnclosingScrollPane(): void
            public static createScrollPaneForTable(arg0: javax.swing.JTable): javax.swing.JScrollPane
            public setTableHeader(arg0: javax.swing.table.JTableHeader | javax.swing.table.JTableHeader$$Lambda): void
            public getTableHeader(): javax.swing.table.JTableHeader
            public setRowHeight(arg0: int): void
            public getRowHeight(): int
            public setRowHeight(arg0: int, arg1: int): void
            public getRowHeight(arg0: int): int
            public setRowMargin(arg0: int): void
            public getRowMargin(): int
            public setIntercellSpacing(arg0: java.awt.Dimension): void
            public getIntercellSpacing(): java.awt.Dimension
            public setGridColor(arg0: java.awt.Color): void
            public getGridColor(): java.awt.Color
            public setShowGrid(arg0: boolean): void
            public setShowHorizontalLines(arg0: boolean): void
            public setShowVerticalLines(arg0: boolean): void
            public getShowHorizontalLines(): boolean
            public getShowVerticalLines(): boolean
            public setAutoResizeMode(arg0: int): void
            public getAutoResizeMode(): int
            public setAutoCreateColumnsFromModel(arg0: boolean): void
            public getAutoCreateColumnsFromModel(): boolean
            public createDefaultColumnsFromModel(): void
            public setDefaultRenderer(arg0: java.lang.Class<any>, arg1: javax.swing.table.TableCellRenderer | javax.swing.table.TableCellRenderer$$Lambda): void
            public getDefaultRenderer(arg0: java.lang.Class<any>): javax.swing.table.TableCellRenderer
            public setDefaultEditor(arg0: java.lang.Class<any>, arg1: javax.swing.table.TableCellEditor): void
            public getDefaultEditor(arg0: java.lang.Class<any>): javax.swing.table.TableCellEditor
            public setDragEnabled(arg0: boolean): void
            public getDragEnabled(): boolean
            public setDropMode(arg0: javax.swing.DropMode): void
            public getDropMode(): javax.swing.DropMode
            public getDropLocation(): javax.swing.JTable$DropLocation
            public setAutoCreateRowSorter(arg0: boolean): void
            public getAutoCreateRowSorter(): boolean
            public setUpdateSelectionOnSort(arg0: boolean): void
            public getUpdateSelectionOnSort(): boolean
            public setRowSorter(arg0: javax.swing.RowSorter<javax.swing.table.TableModel>): void
            public getRowSorter(): javax.swing.RowSorter<javax.swing.table.TableModel>
            public setSelectionMode(arg0: int): void
            public setRowSelectionAllowed(arg0: boolean): void
            public getRowSelectionAllowed(): boolean
            public setColumnSelectionAllowed(arg0: boolean): void
            public getColumnSelectionAllowed(): boolean
            public setCellSelectionEnabled(arg0: boolean): void
            public getCellSelectionEnabled(): boolean
            public selectAll(): void
            public clearSelection(): void
            public setRowSelectionInterval(arg0: int, arg1: int): void
            public setColumnSelectionInterval(arg0: int, arg1: int): void
            public addRowSelectionInterval(arg0: int, arg1: int): void
            public addColumnSelectionInterval(arg0: int, arg1: int): void
            public removeRowSelectionInterval(arg0: int, arg1: int): void
            public removeColumnSelectionInterval(arg0: int, arg1: int): void
            public getSelectedRow(): int
            public getSelectedColumn(): int
            public getSelectedRows(): int[]
            public getSelectedColumns(): int[]
            public getSelectedRowCount(): int
            public getSelectedColumnCount(): int
            public isRowSelected(arg0: int): boolean
            public isColumnSelected(arg0: int): boolean
            public isCellSelected(arg0: int, arg1: int): boolean
            public changeSelection(arg0: int, arg1: int, arg2: boolean, arg3: boolean): void
            public getSelectionForeground(): java.awt.Color
            public setSelectionForeground(arg0: java.awt.Color): void
            public getSelectionBackground(): java.awt.Color
            public setSelectionBackground(arg0: java.awt.Color): void
            public getColumn(arg0: java.lang.Object): javax.swing.table.TableColumn
            public convertColumnIndexToModel(arg0: int): int
            public convertColumnIndexToView(arg0: int): int
            public convertRowIndexToView(arg0: int): int
            public convertRowIndexToModel(arg0: int): int
            public getRowCount(): int
            public getColumnCount(): int
            public getColumnName(arg0: int): string
            public getColumnClass(arg0: int): java.lang.Class<any>
            public getValueAt(arg0: int, arg1: int): java.lang.Object
            public setValueAt(arg0: java.lang.Object, arg1: int, arg2: int): void
            public isCellEditable(arg0: int, arg1: int): boolean
            public addColumn(arg0: javax.swing.table.TableColumn): void
            public removeColumn(arg0: javax.swing.table.TableColumn): void
            public moveColumn(arg0: int, arg1: int): void
            public columnAtPoint(arg0: java.awt.Point): int
            public rowAtPoint(arg0: java.awt.Point): int
            public getCellRect(arg0: int, arg1: int, arg2: boolean): java.awt.Rectangle
            public doLayout(): void
            public sizeColumnsToFit(arg0: boolean): void
            public sizeColumnsToFit(arg0: int): void
            public getToolTipText(arg0: java.awt.event.MouseEvent): string
            public setSurrendersFocusOnKeystroke(arg0: boolean): void
            public getSurrendersFocusOnKeystroke(): boolean
            public editCellAt(arg0: int, arg1: int): boolean
            public editCellAt(arg0: int, arg1: int, arg2: java.util.EventObject): boolean
            public isEditing(): boolean
            public getEditorComponent(): java.awt.Component
            public getEditingColumn(): int
            public getEditingRow(): int
            public getUI(): javax.swing.plaf.TableUI
            public setUI(arg0: javax.swing.plaf.TableUI): void
            public updateUI(): void
            public getUIClassID(): string
            public setModel(arg0: javax.swing.table.TableModel): void
            public getModel(): javax.swing.table.TableModel
            public setColumnModel(arg0: javax.swing.table.TableColumnModel): void
            public getColumnModel(): javax.swing.table.TableColumnModel
            public setSelectionModel(arg0: javax.swing.ListSelectionModel): void
            public getSelectionModel(): javax.swing.ListSelectionModel
            public sorterChanged(arg0: javax.swing.event.RowSorterEvent): void
            public tableChanged(arg0: javax.swing.event.TableModelEvent): void
            public columnAdded(arg0: javax.swing.event.TableColumnModelEvent): void
            public columnRemoved(arg0: javax.swing.event.TableColumnModelEvent): void
            public columnMoved(arg0: javax.swing.event.TableColumnModelEvent): void
            public columnMarginChanged(arg0: javax.swing.event.ChangeEvent): void
            public columnSelectionChanged(arg0: javax.swing.event.ListSelectionEvent): void
            public valueChanged(arg0: javax.swing.event.ListSelectionEvent): void
            public editingStopped(arg0: javax.swing.event.ChangeEvent): void
            public editingCanceled(arg0: javax.swing.event.ChangeEvent): void
            public setPreferredScrollableViewportSize(arg0: java.awt.Dimension): void
            public getPreferredScrollableViewportSize(): java.awt.Dimension
            public getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableBlockIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableTracksViewportWidth(): boolean
            public getScrollableTracksViewportHeight(): boolean
            public setFillsViewportHeight(arg0: boolean): void
            public getFillsViewportHeight(): boolean
            protected processKeyBinding(arg0: javax.swing.KeyStroke, arg1: java.awt.event.KeyEvent, arg2: int, arg3: boolean): boolean
            protected createDefaultRenderers(): void
            protected createDefaultEditors(): void
            protected initializeLocalVars(): void
            protected createDefaultDataModel(): javax.swing.table.TableModel
            protected createDefaultColumnModel(): javax.swing.table.TableColumnModel
            protected createDefaultSelectionModel(): javax.swing.ListSelectionModel
            protected createDefaultTableHeader(): javax.swing.table.JTableHeader
            protected resizeAndRepaint(): void
            public getCellEditor(): javax.swing.table.TableCellEditor
            public setCellEditor(arg0: javax.swing.table.TableCellEditor): void
            public setEditingColumn(arg0: int): void
            public setEditingRow(arg0: int): void
            public getCellRenderer(arg0: int, arg1: int): javax.swing.table.TableCellRenderer
            public prepareRenderer(arg0: javax.swing.table.TableCellRenderer | javax.swing.table.TableCellRenderer$$Lambda, arg1: int, arg2: int): java.awt.Component
            public getCellEditor(arg0: int, arg1: int): javax.swing.table.TableCellEditor
            public prepareEditor(arg0: javax.swing.table.TableCellEditor, arg1: int, arg2: int): java.awt.Component
            public removeEditor(): void
            protected paramString(): string
            public print(): boolean
            public print(arg0: javax.swing.JTable$PrintMode): boolean
            public print(arg0: javax.swing.JTable$PrintMode, arg1: java.text.MessageFormat, arg2: java.text.MessageFormat): boolean
            public print(arg0: javax.swing.JTable$PrintMode, arg1: java.text.MessageFormat, arg2: java.text.MessageFormat, arg3: boolean, arg4: javax.print.attribute.PrintRequestAttributeSet, arg5: boolean): boolean
            public print(arg0: javax.swing.JTable$PrintMode, arg1: java.text.MessageFormat, arg2: java.text.MessageFormat, arg3: boolean, arg4: javax.print.attribute.PrintRequestAttributeSet, arg5: boolean, arg6: javax.print.PrintService): boolean
            public getPrintable(arg0: javax.swing.JTable$PrintMode, arg1: java.text.MessageFormat, arg2: java.text.MessageFormat): java.awt.print.Printable
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JTextArea extends javax.swing.text.JTextComponent {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: java.lang.String | string, arg1: int, arg2: int)
            public constructor(arg0: javax.swing.text.Document)
            public constructor(arg0: javax.swing.text.Document, arg1: java.lang.String | string, arg2: int, arg3: int)
            public getUIClassID(): string
            protected createDefaultModel(): javax.swing.text.Document
            public setTabSize(arg0: int): void
            public getTabSize(): int
            public setLineWrap(arg0: boolean): void
            public getLineWrap(): boolean
            public setWrapStyleWord(arg0: boolean): void
            public getWrapStyleWord(): boolean
            public getLineOfOffset(arg0: int): int
            public getLineCount(): int
            public getLineStartOffset(arg0: int): int
            public getLineEndOffset(arg0: int): int
            public insert(arg0: java.lang.String | string, arg1: int): void
            public append(arg0: java.lang.String | string): void
            public replaceRange(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public getRows(): int
            public setRows(arg0: int): void
            protected getRowHeight(): int
            public getColumns(): int
            public setColumns(arg0: int): void
            protected getColumnWidth(): int
            public getPreferredSize(): java.awt.Dimension
            public setFont(arg0: java.awt.Font): void
            protected paramString(): string
            public getScrollableTracksViewportWidth(): boolean
            public getPreferredScrollableViewportSize(): java.awt.Dimension
            public getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JTextField extends javax.swing.text.JTextComponent implements javax.swing.SwingConstants {
            public static notifyAction: string
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: int)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public constructor(arg0: javax.swing.text.Document, arg1: java.lang.String | string, arg2: int)
            public getUIClassID(): string
            public setDocument(arg0: javax.swing.text.Document): void
            public isValidateRoot(): boolean
            public getHorizontalAlignment(): int
            public setHorizontalAlignment(arg0: int): void
            protected createDefaultModel(): javax.swing.text.Document
            public getColumns(): int
            public setColumns(arg0: int): void
            protected getColumnWidth(): int
            public getPreferredSize(): java.awt.Dimension
            public setFont(arg0: java.awt.Font): void
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            protected fireActionPerformed(): void
            public setActionCommand(arg0: java.lang.String | string): void
            public setAction(arg0: javax.swing.Action): void
            public getAction(): javax.swing.Action
            protected configurePropertiesFromAction(arg0: javax.swing.Action): void
            protected actionPropertyChanged(arg0: javax.swing.Action, arg1: java.lang.String | string): void
            protected createActionPropertyChangeListener(arg0: javax.swing.Action): java.beans.PropertyChangeListener
            public getActions(): javax.swing.Action[]
            public postActionEvent(): void
            public getHorizontalVisibility(): javax.swing.BoundedRangeModel
            public getScrollOffset(): int
            public setScrollOffset(arg0: int): void
            public scrollRectToVisible(arg0: java.awt.Rectangle): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JTextPane extends javax.swing.JEditorPane {
            public constructor()
            public constructor(arg0: javax.swing.text.StyledDocument)
            public getUIClassID(): string
            public setDocument(arg0: javax.swing.text.Document): void
            public setStyledDocument(arg0: javax.swing.text.StyledDocument): void
            public getStyledDocument(): javax.swing.text.StyledDocument
            public replaceSelection(arg0: java.lang.String | string): void
            public insertComponent(arg0: java.awt.Component): void
            public insertIcon(arg0: javax.swing.Icon): void
            public addStyle(arg0: java.lang.String | string, arg1: javax.swing.text.Style): javax.swing.text.Style
            public removeStyle(arg0: java.lang.String | string): void
            public getStyle(arg0: java.lang.String | string): javax.swing.text.Style
            public setLogicalStyle(arg0: javax.swing.text.Style): void
            public getLogicalStyle(): javax.swing.text.Style
            public getCharacterAttributes(): javax.swing.text.AttributeSet
            public setCharacterAttributes(arg0: javax.swing.text.AttributeSet, arg1: boolean): void
            public getParagraphAttributes(): javax.swing.text.AttributeSet
            public setParagraphAttributes(arg0: javax.swing.text.AttributeSet, arg1: boolean): void
            public getInputAttributes(): javax.swing.text.MutableAttributeSet
            protected getStyledEditorKit(): javax.swing.text.StyledEditorKit
            protected createDefaultEditorKit(): javax.swing.text.EditorKit
            public setEditorKit(arg0: javax.swing.text.EditorKit): void
            protected paramString(): string
            public static class: java.lang.Class<any>
        }
        class JToggleButton extends javax.swing.AbstractButton implements javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: javax.swing.Icon)
            public constructor(arg0: javax.swing.Icon, arg1: boolean)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: boolean)
            public constructor(arg0: javax.swing.Action)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon)
            public constructor(arg0: java.lang.String | string, arg1: javax.swing.Icon, arg2: boolean)
            public updateUI(): void
            public getUIClassID(): string
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JToggleButton$$Lambda extends javax.swing.AbstractButton implements javax.accessibility.Accessible {
            public constructor()
        }
        class JToolBar extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: int)
            public getUI(): javax.swing.plaf.ToolBarUI
            public setUI(arg0: javax.swing.plaf.ToolBarUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getComponentIndex(arg0: java.awt.Component): int
            public getComponentAtIndex(arg0: int): java.awt.Component
            public setMargin(arg0: java.awt.Insets): void
            public getMargin(): java.awt.Insets
            public isBorderPainted(): boolean
            public setBorderPainted(arg0: boolean): void
            protected paintBorder(arg0: java.awt.Graphics): void
            public isFloatable(): boolean
            public setFloatable(arg0: boolean): void
            public getOrientation(): int
            public setOrientation(arg0: int): void
            public setRollover(arg0: boolean): void
            public isRollover(): boolean
            public addSeparator(): void
            public addSeparator(arg0: java.awt.Dimension): void
            public add(arg0: javax.swing.Action): javax.swing.JButton
            protected createActionComponent(arg0: javax.swing.Action): javax.swing.JButton
            protected createActionChangeListener(arg0: javax.swing.JButton | javax.swing.JButton$$Lambda): java.beans.PropertyChangeListener
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            protected paramString(): string
            public setLayout(arg0: java.awt.LayoutManager): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JToolBar$$Lambda extends javax.swing.JComponent implements javax.swing.SwingConstants , javax.accessibility.Accessible {
            public constructor()
        }
        class JToolTip extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor()
            public getUI(): javax.swing.plaf.ToolTipUI
            public updateUI(): void
            public getUIClassID(): string
            public setTipText(arg0: java.lang.String | string): void
            public getTipText(): string
            public setComponent(arg0: javax.swing.JComponent): void
            public getComponent(): javax.swing.JComponent
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JToolTip$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            public constructor()
        }
        class JTree extends javax.swing.JComponent implements javax.swing.Scrollable , javax.accessibility.Accessible {
            protected treeModel: javax.swing.tree.TreeModel
            protected selectionModel: javax.swing.tree.TreeSelectionModel
            protected rootVisible: boolean
            protected cellRenderer: javax.swing.tree.TreeCellRenderer
            protected rowHeight: int
            protected showsRootHandles: boolean
            protected selectionRedirector: javax.swing.JTree$TreeSelectionRedirector
            protected cellEditor: javax.swing.tree.TreeCellEditor
            protected editable: boolean
            protected largeModel: boolean
            protected visibleRowCount: int
            protected invokesStopCellEditing: boolean
            protected scrollsOnExpand: boolean
            protected toggleClickCount: int
            protected treeModelListener: javax.swing.event.TreeModelListener
            public static CELL_RENDERER_PROPERTY: string
            public static TREE_MODEL_PROPERTY: string
            public static ROOT_VISIBLE_PROPERTY: string
            public static SHOWS_ROOT_HANDLES_PROPERTY: string
            public static ROW_HEIGHT_PROPERTY: string
            public static CELL_EDITOR_PROPERTY: string
            public static EDITABLE_PROPERTY: string
            public static LARGE_MODEL_PROPERTY: string
            public static SELECTION_MODEL_PROPERTY: string
            public static VISIBLE_ROW_COUNT_PROPERTY: string
            public static INVOKES_STOP_CELL_EDITING_PROPERTY: string
            public static SCROLLS_ON_EXPAND_PROPERTY: string
            public static TOGGLE_CLICK_COUNT_PROPERTY: string
            public static LEAD_SELECTION_PATH_PROPERTY: string
            public static ANCHOR_SELECTION_PATH_PROPERTY: string
            public static EXPANDS_SELECTED_PATHS_PROPERTY: string
            protected static getDefaultTreeModel(): javax.swing.tree.TreeModel
            protected static createTreeModel(arg0: java.lang.Object): javax.swing.tree.TreeModel
            public constructor()
            public constructor(arg0: java.lang.Object[])
            public constructor(arg0: java.util.Vector<any>)
            public constructor(arg0: java.util.Hashtable<any, any>)
            public constructor(arg0: javax.swing.tree.TreeNode)
            public constructor(arg0: javax.swing.tree.TreeNode, arg1: boolean)
            public constructor(arg0: javax.swing.tree.TreeModel)
            public getUI(): javax.swing.plaf.TreeUI
            public setUI(arg0: javax.swing.plaf.TreeUI): void
            public updateUI(): void
            public getUIClassID(): string
            public getCellRenderer(): javax.swing.tree.TreeCellRenderer
            public setCellRenderer(arg0: javax.swing.tree.TreeCellRenderer | javax.swing.tree.TreeCellRenderer$$Lambda): void
            public setEditable(arg0: boolean): void
            public isEditable(): boolean
            public setCellEditor(arg0: javax.swing.tree.TreeCellEditor): void
            public getCellEditor(): javax.swing.tree.TreeCellEditor
            public getModel(): javax.swing.tree.TreeModel
            public setModel(arg0: javax.swing.tree.TreeModel): void
            public isRootVisible(): boolean
            public setRootVisible(arg0: boolean): void
            public setShowsRootHandles(arg0: boolean): void
            public getShowsRootHandles(): boolean
            public setRowHeight(arg0: int): void
            public getRowHeight(): int
            public isFixedRowHeight(): boolean
            public setLargeModel(arg0: boolean): void
            public isLargeModel(): boolean
            public setInvokesStopCellEditing(arg0: boolean): void
            public getInvokesStopCellEditing(): boolean
            public setScrollsOnExpand(arg0: boolean): void
            public getScrollsOnExpand(): boolean
            public setToggleClickCount(arg0: int): void
            public getToggleClickCount(): int
            public setExpandsSelectedPaths(arg0: boolean): void
            public getExpandsSelectedPaths(): boolean
            public setDragEnabled(arg0: boolean): void
            public getDragEnabled(): boolean
            public setDropMode(arg0: javax.swing.DropMode): void
            public getDropMode(): javax.swing.DropMode
            public getDropLocation(): javax.swing.JTree$DropLocation
            public isPathEditable(arg0: javax.swing.tree.TreePath): boolean
            public getToolTipText(arg0: java.awt.event.MouseEvent): string
            public convertValueToText(arg0: java.lang.Object, arg1: boolean, arg2: boolean, arg3: boolean, arg4: int, arg5: boolean): string
            public getRowCount(): int
            public setSelectionPath(arg0: javax.swing.tree.TreePath): void
            public setSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
            public setLeadSelectionPath(arg0: javax.swing.tree.TreePath): void
            public setAnchorSelectionPath(arg0: javax.swing.tree.TreePath): void
            public setSelectionRow(arg0: int): void
            public setSelectionRows(arg0: int[]): void
            public addSelectionPath(arg0: javax.swing.tree.TreePath): void
            public addSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
            public addSelectionRow(arg0: int): void
            public addSelectionRows(arg0: int[]): void
            public getLastSelectedPathComponent(): java.lang.Object
            public getLeadSelectionPath(): javax.swing.tree.TreePath
            public getAnchorSelectionPath(): javax.swing.tree.TreePath
            public getSelectionPath(): javax.swing.tree.TreePath
            public getSelectionPaths(): javax.swing.tree.TreePath[]
            public getSelectionRows(): int[]
            public getSelectionCount(): int
            public getMinSelectionRow(): int
            public getMaxSelectionRow(): int
            public getLeadSelectionRow(): int
            public isPathSelected(arg0: javax.swing.tree.TreePath): boolean
            public isRowSelected(arg0: int): boolean
            public getExpandedDescendants(arg0: javax.swing.tree.TreePath): java.util.Enumeration<javax.swing.tree.TreePath>
            public hasBeenExpanded(arg0: javax.swing.tree.TreePath): boolean
            public isExpanded(arg0: javax.swing.tree.TreePath): boolean
            public isExpanded(arg0: int): boolean
            public isCollapsed(arg0: javax.swing.tree.TreePath): boolean
            public isCollapsed(arg0: int): boolean
            public makeVisible(arg0: javax.swing.tree.TreePath): void
            public isVisible(arg0: javax.swing.tree.TreePath): boolean
            public getPathBounds(arg0: javax.swing.tree.TreePath): java.awt.Rectangle
            public getRowBounds(arg0: int): java.awt.Rectangle
            public scrollPathToVisible(arg0: javax.swing.tree.TreePath): void
            public scrollRowToVisible(arg0: int): void
            public getPathForRow(arg0: int): javax.swing.tree.TreePath
            public getRowForPath(arg0: javax.swing.tree.TreePath): int
            public expandPath(arg0: javax.swing.tree.TreePath): void
            public expandRow(arg0: int): void
            public collapsePath(arg0: javax.swing.tree.TreePath): void
            public collapseRow(arg0: int): void
            public getPathForLocation(arg0: int, arg1: int): javax.swing.tree.TreePath
            public getRowForLocation(arg0: int, arg1: int): int
            public getClosestPathForLocation(arg0: int, arg1: int): javax.swing.tree.TreePath
            public getClosestRowForLocation(arg0: int, arg1: int): int
            public isEditing(): boolean
            public stopEditing(): boolean
            public cancelEditing(): void
            public startEditingAtPath(arg0: javax.swing.tree.TreePath): void
            public getEditingPath(): javax.swing.tree.TreePath
            public setSelectionModel(arg0: javax.swing.tree.TreeSelectionModel): void
            public getSelectionModel(): javax.swing.tree.TreeSelectionModel
            protected getPathBetweenRows(arg0: int, arg1: int): javax.swing.tree.TreePath[]
            public setSelectionInterval(arg0: int, arg1: int): void
            public addSelectionInterval(arg0: int, arg1: int): void
            public removeSelectionInterval(arg0: int, arg1: int): void
            public removeSelectionPath(arg0: javax.swing.tree.TreePath): void
            public removeSelectionPaths(arg0: javax.swing.tree.TreePath[]): void
            public removeSelectionRow(arg0: int): void
            public removeSelectionRows(arg0: int[]): void
            public clearSelection(): void
            public isSelectionEmpty(): boolean
            public addTreeExpansionListener(arg0: javax.swing.event.TreeExpansionListener): void
            public removeTreeExpansionListener(arg0: javax.swing.event.TreeExpansionListener): void
            public getTreeExpansionListeners(): javax.swing.event.TreeExpansionListener[]
            public addTreeWillExpandListener(arg0: javax.swing.event.TreeWillExpandListener): void
            public removeTreeWillExpandListener(arg0: javax.swing.event.TreeWillExpandListener): void
            public getTreeWillExpandListeners(): javax.swing.event.TreeWillExpandListener[]
            public fireTreeExpanded(arg0: javax.swing.tree.TreePath): void
            public fireTreeCollapsed(arg0: javax.swing.tree.TreePath): void
            public fireTreeWillExpand(arg0: javax.swing.tree.TreePath): void
            public fireTreeWillCollapse(arg0: javax.swing.tree.TreePath): void
            public addTreeSelectionListener(arg0: javax.swing.event.TreeSelectionListener): void
            public removeTreeSelectionListener(arg0: javax.swing.event.TreeSelectionListener): void
            public getTreeSelectionListeners(): javax.swing.event.TreeSelectionListener[]
            protected fireValueChanged(arg0: javax.swing.event.TreeSelectionEvent): void
            public treeDidChange(): void
            public setVisibleRowCount(arg0: int): void
            public getVisibleRowCount(): int
            public getNextMatch(arg0: java.lang.String | string, arg1: int, arg2: javax.swing.text.Position$Bias): javax.swing.tree.TreePath
            public getPreferredScrollableViewportSize(): java.awt.Dimension
            public getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableBlockIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            public getScrollableTracksViewportWidth(): boolean
            public getScrollableTracksViewportHeight(): boolean
            protected setExpandedState(arg0: javax.swing.tree.TreePath, arg1: boolean): void
            protected getDescendantToggledPaths(arg0: javax.swing.tree.TreePath): java.util.Enumeration<javax.swing.tree.TreePath>
            protected removeDescendantToggledPaths(arg0: java.util.Enumeration<javax.swing.tree.TreePath>): void
            protected clearToggledPaths(): void
            protected createTreeModelListener(): javax.swing.event.TreeModelListener
            protected removeDescendantSelectedPaths(arg0: javax.swing.tree.TreePath, arg1: boolean): boolean
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JTree$$Lambda extends javax.swing.JComponent implements javax.swing.Scrollable , javax.accessibility.Accessible {
            protected treeModel: javax.swing.tree.TreeModel
        }
        class JViewport extends javax.swing.JComponent implements javax.accessibility.Accessible {
            protected isViewSizeSet: boolean
            protected lastPaintPosition: java.awt.Point
            protected backingStore: boolean
            protected backingStoreImage: java.awt.Image
            protected scrollUnderway: boolean
            public static BLIT_SCROLL_MODE: int
            public static BACKINGSTORE_SCROLL_MODE: int
            public static SIMPLE_SCROLL_MODE: int
            public constructor()
            public getUI(): javax.swing.plaf.ViewportUI
            public setUI(arg0: javax.swing.plaf.ViewportUI): void
            public updateUI(): void
            public getUIClassID(): string
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public scrollRectToVisible(arg0: java.awt.Rectangle): void
            public setBorder(arg0: javax.swing.border.Border): void
            public getInsets(): java.awt.Insets
            public getInsets(arg0: java.awt.Insets): java.awt.Insets
            public isOptimizedDrawingEnabled(): boolean
            protected isPaintingOrigin(): boolean
            public paint(arg0: java.awt.Graphics): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setScrollMode(arg0: int): void
            public getScrollMode(): int
            public isBackingStoreEnabled(): boolean
            public setBackingStoreEnabled(arg0: boolean): void
            public getView(): java.awt.Component
            public setView(arg0: java.awt.Component): void
            public getViewSize(): java.awt.Dimension
            public setViewSize(arg0: java.awt.Dimension): void
            public getViewPosition(): java.awt.Point
            public setViewPosition(arg0: java.awt.Point): void
            public getViewRect(): java.awt.Rectangle
            protected computeBlit(arg0: int, arg1: int, arg2: java.awt.Point, arg3: java.awt.Point, arg4: java.awt.Dimension, arg5: java.awt.Rectangle): boolean
            public getExtentSize(): java.awt.Dimension
            public toViewCoordinates(arg0: java.awt.Dimension): java.awt.Dimension
            public toViewCoordinates(arg0: java.awt.Point): java.awt.Point
            public setExtentSize(arg0: java.awt.Dimension): void
            protected createViewListener(): javax.swing.JViewport$ViewListener
            protected createLayoutManager(): java.awt.LayoutManager
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            protected paramString(): string
            protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class JViewport$$Lambda extends javax.swing.JComponent implements javax.accessibility.Accessible {
            protected isViewSizeSet: boolean
        }
        class JWindow extends java.awt.Window implements javax.accessibility.Accessible , javax.swing.RootPaneContainer , javax.swing.TransferHandler$HasGetTransferHandler {
            protected rootPane: javax.swing.JRootPane
            protected rootPaneCheckingEnabled: boolean
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor()
            public constructor(arg0: java.awt.GraphicsConfiguration)
            public constructor(arg0: java.awt.Frame)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: java.awt.GraphicsConfiguration)
            protected windowInit(): void
            protected createRootPane(): javax.swing.JRootPane
            protected isRootPaneCheckingEnabled(): boolean
            public setTransferHandler(arg0: javax.swing.TransferHandler): void
            public getTransferHandler(): javax.swing.TransferHandler
            public update(arg0: java.awt.Graphics): void
            protected setRootPaneCheckingEnabled(arg0: boolean): void
            protected addImpl(arg0: java.awt.Component, arg1: java.lang.Object, arg2: int): void
            public remove(arg0: java.awt.Component): void
            public setLayout(arg0: java.awt.LayoutManager): void
            public getRootPane(): javax.swing.JRootPane
            protected setRootPane(arg0: javax.swing.JRootPane | javax.swing.JRootPane$$Lambda): void
            public getContentPane(): java.awt.Container
            public setContentPane(arg0: java.awt.Container): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getGlassPane(): java.awt.Component
            public setGlassPane(arg0: java.awt.Component): void
            public getGraphics(): java.awt.Graphics
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            protected paramString(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class KeyStroke extends java.awt.AWTKeyStroke {
            public static getKeyStroke(arg0: char): javax.swing.KeyStroke
            public static getKeyStroke(arg0: char, arg1: boolean): javax.swing.KeyStroke
            public static getKeyStroke(arg0: java.lang.Character, arg1: int): javax.swing.KeyStroke
            public static getKeyStroke(arg0: int, arg1: int, arg2: boolean): javax.swing.KeyStroke
            public static getKeyStroke(arg0: int, arg1: int): javax.swing.KeyStroke
            public static getKeyStrokeForEvent(arg0: java.awt.event.KeyEvent): javax.swing.KeyStroke
            public static getKeyStroke(arg0: java.lang.String | string): javax.swing.KeyStroke
            public static class: java.lang.Class<any>
        }
        class KeyboardManager {
            public static getCurrentManager(): javax.swing.KeyboardManager
            public static setCurrentManager(arg0: javax.swing.KeyboardManager): void
            public registerKeyStroke(arg0: javax.swing.KeyStroke, arg1: javax.swing.JComponent): void
            public unregisterKeyStroke(arg0: javax.swing.KeyStroke, arg1: javax.swing.JComponent): void
            public fireKeyboardAction(arg0: java.awt.event.KeyEvent, arg1: boolean, arg2: java.awt.Container): boolean
            public registerMenuBar(arg0: javax.swing.JMenuBar): void
            public unregisterMenuBar(arg0: javax.swing.JMenuBar): void
            protected registerNewTopContainer(arg0: java.awt.Container): java.util.Hashtable
            public static class: java.lang.Class<any>
        }
        class LayoutComparator implements java.util.Comparator<java.awt.Component> , java.io.Serializable {
            public compare(arg0: java.awt.Component, arg1: java.awt.Component): int
            public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            public static class: java.lang.Class<any>
        }
        class LayoutFocusTraversalPolicy extends javax.swing.SortingFocusTraversalPolicy implements java.io.Serializable {
            public constructor()
            public getComponentAfter(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getComponentBefore(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getFirstComponent(arg0: java.awt.Container): java.awt.Component
            public getLastComponent(arg0: java.awt.Container): java.awt.Component
            protected accept(arg0: java.awt.Component): boolean
            public static class: java.lang.Class<any>
        }
        abstract class LayoutStyle {
            public static setInstance(arg0: javax.swing.LayoutStyle): void
            public static getInstance(): javax.swing.LayoutStyle
            public constructor()
            public getPreferredGap(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent, arg2: javax.swing.LayoutStyle$ComponentPlacement, arg3: int, arg4: java.awt.Container): int
            public getContainerGap(arg0: javax.swing.JComponent, arg1: int, arg2: java.awt.Container): int
            public static class: java.lang.Class<any>
        }
        class LegacyGlueFocusTraversalPolicy extends java.awt.FocusTraversalPolicy implements java.io.Serializable {
            public getComponentAfter(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getComponentBefore(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getFirstComponent(arg0: java.awt.Container): java.awt.Component
            public getLastComponent(arg0: java.awt.Container): java.awt.Component
            public getDefaultComponent(arg0: java.awt.Container): java.awt.Component
            public static class: java.lang.Class<any>
        }
        interface ListCellRenderer<E> {
            getListCellRendererComponent(arg0: javax.swing.JList<E> | javax.swing.JList$$Lambda<E>, arg1: E, arg2: int, arg3: boolean, arg4: boolean): java.awt.Component
        }
        interface ListCellRenderer$$Lambda<E> {
            (arg0: javax.swing.JList<E> | javax.swing.JList$$Lambda<E>, arg1: E, arg2: int, arg3: boolean, arg4: boolean): java.awt.Component
        }
        interface ListModel<E> {
            getSize(): int
            getElementAt(arg0: int): E
            addListDataListener(arg0: javax.swing.event.ListDataListener): void
            removeListDataListener(arg0: javax.swing.event.ListDataListener): void
        }
        interface ListSelectionModel {
            SINGLE_SELECTION: int
            SINGLE_INTERVAL_SELECTION: int
            MULTIPLE_INTERVAL_SELECTION: int
            setSelectionInterval(arg0: int, arg1: int): void
            addSelectionInterval(arg0: int, arg1: int): void
            removeSelectionInterval(arg0: int, arg1: int): void
            getMinSelectionIndex(): int
            getMaxSelectionIndex(): int
            isSelectedIndex(arg0: int): boolean
            getAnchorSelectionIndex(): int
            setAnchorSelectionIndex(arg0: int): void
            getLeadSelectionIndex(): int
            setLeadSelectionIndex(arg0: int): void
            clearSelection(): void
            isSelectionEmpty(): boolean
            insertIndexInterval(arg0: int, arg1: int, arg2: boolean): void
            removeIndexInterval(arg0: int, arg1: int): void
            setValueIsAdjusting(arg0: boolean): void
            getValueIsAdjusting(): boolean
            setSelectionMode(arg0: int): void
            getSelectionMode(): int
            addListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
            removeListSelectionListener(arg0: javax.swing.event.ListSelectionListener): void
        }
        abstract class LookAndFeel {
            public constructor()
            public static installColors(arg0: javax.swing.JComponent, arg1: java.lang.String | string, arg2: java.lang.String | string): void
            public static installColorsAndFont(arg0: javax.swing.JComponent, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String | string): void
            public static installBorder(arg0: javax.swing.JComponent, arg1: java.lang.String | string): void
            public static uninstallBorder(arg0: javax.swing.JComponent): void
            public static installProperty(arg0: javax.swing.JComponent, arg1: java.lang.String | string, arg2: java.lang.Object): void
            public static makeKeyBindings(arg0: java.lang.Object[]): javax.swing.text.JTextComponent$KeyBinding[]
            public static makeInputMap(arg0: java.lang.Object[]): javax.swing.InputMap
            public static makeComponentInputMap(arg0: javax.swing.JComponent, arg1: java.lang.Object[]): javax.swing.ComponentInputMap
            public static loadKeyBindings(arg0: javax.swing.InputMap, arg1: java.lang.Object[]): void
            public static makeIcon(arg0: java.lang.Class<any>, arg1: java.lang.String | string): java.lang.Object
            public getLayoutStyle(): javax.swing.LayoutStyle
            public provideErrorFeedback(arg0: java.awt.Component): void
            public static getDesktopPropertyValue(arg0: java.lang.String | string, arg1: java.lang.Object): java.lang.Object
            public getDisabledIcon(arg0: javax.swing.JComponent, arg1: javax.swing.Icon): javax.swing.Icon
            public getDisabledSelectedIcon(arg0: javax.swing.JComponent, arg1: javax.swing.Icon): javax.swing.Icon
            public getName(): string
            public getID(): string
            public getDescription(): string
            public getSupportsWindowDecorations(): boolean
            public isNativeLookAndFeel(): boolean
            public isSupportedLookAndFeel(): boolean
            public initialize(): void
            public uninitialize(): void
            public getDefaults(): javax.swing.UIDefaults
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface MenuElement {
            processMouseEvent(arg0: java.awt.event.MouseEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            processKeyEvent(arg0: java.awt.event.KeyEvent, arg1: javax.swing.MenuElement[], arg2: javax.swing.MenuSelectionManager): void
            menuSelectionChanged(arg0: boolean): void
            getSubElements(): javax.swing.MenuElement[]
            getComponent(): java.awt.Component
        }
        class MenuSelectionManager {
            protected changeEvent: javax.swing.event.ChangeEvent
            protected listenerList: javax.swing.event.EventListenerList
            public constructor()
            public static defaultManager(): javax.swing.MenuSelectionManager
            public setSelectedPath(arg0: javax.swing.MenuElement[]): void
            public getSelectedPath(): javax.swing.MenuElement[]
            public clearSelectedPath(): void
            public addChangeListener(arg0: javax.swing.event.ChangeListener): void
            public removeChangeListener(arg0: javax.swing.event.ChangeListener): void
            public getChangeListeners(): javax.swing.event.ChangeListener[]
            protected fireStateChanged(): void
            public processMouseEvent(arg0: java.awt.event.MouseEvent): void
            public componentForPoint(arg0: java.awt.Component, arg1: java.awt.Point): java.awt.Component
            public processKeyEvent(arg0: java.awt.event.KeyEvent): void
            public isComponentPartOfCurrentMenu(arg0: java.awt.Component): boolean
            public static class: java.lang.Class<any>
        }
        class MultiUIDefaults extends javax.swing.UIDefaults {
            public constructor(arg0: javax.swing.UIDefaults[])
            public constructor()
            public get(arg0: java.lang.Object): java.lang.Object
            public get(arg0: java.lang.Object, arg1: java.util.Locale): java.lang.Object
            public size(): int
            public isEmpty(): boolean
            public keys(): java.util.Enumeration<java.lang.Object>
            public elements(): java.util.Enumeration<java.lang.Object>
            public entrySet(): java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>>
            protected getUIError(arg0: java.lang.String | string): void
            public remove(arg0: java.lang.Object): java.lang.Object
            public clear(): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface MutableComboBoxModel<E> extends javax.swing.ComboBoxModel<E> {
            addElement(arg0: E): void
            removeElement(arg0: java.lang.Object): void
            insertElementAt(arg0: E, arg1: int): void
            removeElementAt(arg0: int): void
        }
        class OverlayLayout implements java.awt.LayoutManager2 , java.io.Serializable {
            public constructor(arg0: java.awt.Container)
            public getTarget(): java.awt.Container
            public invalidateLayout(arg0: java.awt.Container): void
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public layoutContainer(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        interface Painter<T> {
            paint(arg0: java.awt.Graphics2D, arg1: T, arg2: int, arg3: int): void
        }
        interface Painter$$Lambda<T> {
            (arg0: java.awt.Graphics2D, arg1: T, arg2: int, arg3: int): void
        }
        class Popup {
            protected constructor(arg0: java.awt.Component, arg1: java.awt.Component, arg2: int, arg3: int)
            protected constructor()
            public show(): void
            public hide(): void
            public static class: java.lang.Class<any>
        }
        class PopupFactory {
            public constructor()
            public static setSharedInstance(arg0: javax.swing.PopupFactory): void
            public static getSharedInstance(): javax.swing.PopupFactory
            public getPopup(arg0: java.awt.Component, arg1: java.awt.Component, arg2: int, arg3: int): javax.swing.Popup
            public static class: java.lang.Class<any>
        }
        class ProgressMonitor implements javax.accessibility.Accessible {
            protected accessibleContext: javax.accessibility.AccessibleContext
            public constructor(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.lang.String | string, arg3: int, arg4: int)
            public setProgress(arg0: int): void
            public close(): void
            public getMinimum(): int
            public setMinimum(arg0: int): void
            public getMaximum(): int
            public setMaximum(arg0: int): void
            public isCanceled(): boolean
            public setMillisToDecideToPopup(arg0: int): void
            public getMillisToDecideToPopup(): int
            public setMillisToPopup(arg0: int): void
            public getMillisToPopup(): int
            public setNote(arg0: java.lang.String | string): void
            public getNote(): string
            public getAccessibleContext(): javax.accessibility.AccessibleContext
            public static class: java.lang.Class<any>
        }
        class ProgressMonitor$$Lambda implements javax.accessibility.Accessible {
            protected accessibleContext: javax.accessibility.AccessibleContext
        }
        class ProgressMonitorInputStream extends java.io.FilterInputStream {
            public constructor(arg0: java.awt.Component, arg1: java.lang.Object, arg2: java.io.InputStream)
            public getProgressMonitor(): javax.swing.ProgressMonitor
            public read(): int
            public read(arg0: byte[]): int
            public read(arg0: byte[], arg1: int, arg2: int): int
            public skip(arg0: long): long
            public close(): void
            public reset(): void
            public static class: java.lang.Class<any>
        }
        interface Renderer {
            setValue(arg0: java.lang.Object, arg1: boolean): void
            getComponent(): java.awt.Component
        }
        class RepaintManager {
            public static currentManager(arg0: java.awt.Component): javax.swing.RepaintManager
            public static currentManager(arg0: javax.swing.JComponent): javax.swing.RepaintManager
            public static setCurrentManager(arg0: javax.swing.RepaintManager): void
            public constructor()
            public addInvalidComponent(arg0: javax.swing.JComponent): void
            public removeInvalidComponent(arg0: javax.swing.JComponent): void
            public addDirtyRegion(arg0: javax.swing.JComponent, arg1: int, arg2: int, arg3: int, arg4: int): void
            public addDirtyRegion(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
            public addDirtyRegion(arg0: java.applet.Applet, arg1: int, arg2: int, arg3: int, arg4: int): void
            public getDirtyRegion(arg0: javax.swing.JComponent): java.awt.Rectangle
            public markCompletelyDirty(arg0: javax.swing.JComponent): void
            public markCompletelyClean(arg0: javax.swing.JComponent): void
            public isCompletelyDirty(arg0: javax.swing.JComponent): boolean
            public validateInvalidComponents(): void
            public paintDirtyRegions(): void
            public toString(): string
            public getOffscreenBuffer(arg0: java.awt.Component, arg1: int, arg2: int): java.awt.Image
            public getVolatileOffscreenBuffer(arg0: java.awt.Component, arg1: int, arg2: int): java.awt.Image
            public setDoubleBufferMaximumSize(arg0: java.awt.Dimension): void
            public getDoubleBufferMaximumSize(): java.awt.Dimension
            public setDoubleBufferingEnabled(arg0: boolean): void
            public isDoubleBufferingEnabled(): boolean
            public static class: java.lang.Class<any>
        }
        interface RootPaneContainer {
            getRootPane(): javax.swing.JRootPane
            setContentPane(arg0: java.awt.Container): void
            getContentPane(): java.awt.Container
            setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            getLayeredPane(): javax.swing.JLayeredPane
            setGlassPane(arg0: java.awt.Component): void
            getGlassPane(): java.awt.Component
        }
        abstract class RowFilter<M, I> {
            public constructor()
            public static regexFilter<M, I>(arg0: java.lang.String | string, ...arg1: int[]): javax.swing.RowFilter<M, I>
            public static dateFilter<M, I>(arg0: javax.swing.RowFilter$ComparisonType, arg1: java.util.Date, ...arg2: int[]): javax.swing.RowFilter<M, I>
            public static numberFilter<M, I>(arg0: javax.swing.RowFilter$ComparisonType, arg1: java.lang.Number, ...arg2: int[]): javax.swing.RowFilter<M, I>
            public static orFilter<M, I>(arg0: java.lang.Iterable<javax.swing.RowFilter<M, I>>): javax.swing.RowFilter<M, I>
            public static andFilter<M, I>(arg0: java.lang.Iterable<javax.swing.RowFilter<M, I>>): javax.swing.RowFilter<M, I>
            public static notFilter<M, I>(arg0: javax.swing.RowFilter<M, I>): javax.swing.RowFilter<M, I>
            public include(arg0: javax.swing.RowFilter$Entry<M, I>): boolean
            public static class: java.lang.Class<any>
        }
        abstract class RowSorter<M> {
            public constructor()
            public getModel(): M
            public toggleSortOrder(arg0: int): void
            public convertRowIndexToModel(arg0: int): int
            public convertRowIndexToView(arg0: int): int
            public setSortKeys(arg0: java.util.List<javax.swing.RowSorter$SortKey>): void
            public getSortKeys(): java.util.List<javax.swing.RowSorter$SortKey>
            public getViewRowCount(): int
            public getModelRowCount(): int
            public modelStructureChanged(): void
            public allRowsChanged(): void
            public rowsInserted(arg0: int, arg1: int): void
            public rowsDeleted(arg0: int, arg1: int): void
            public rowsUpdated(arg0: int, arg1: int): void
            public rowsUpdated(arg0: int, arg1: int, arg2: int): void
            public addRowSorterListener(arg0: javax.swing.event.RowSorterListener): void
            public removeRowSorterListener(arg0: javax.swing.event.RowSorterListener): void
            protected fireSortOrderChanged(): void
            protected fireRowSorterChanged(arg0: int[]): void
            public static class: java.lang.Class<any>
        }
        interface ScrollPaneConstants {
            VIEWPORT: string
            VERTICAL_SCROLLBAR: string
            HORIZONTAL_SCROLLBAR: string
            ROW_HEADER: string
            COLUMN_HEADER: string
            LOWER_LEFT_CORNER: string
            LOWER_RIGHT_CORNER: string
            UPPER_LEFT_CORNER: string
            UPPER_RIGHT_CORNER: string
            LOWER_LEADING_CORNER: string
            LOWER_TRAILING_CORNER: string
            UPPER_LEADING_CORNER: string
            UPPER_TRAILING_CORNER: string
            VERTICAL_SCROLLBAR_POLICY: string
            HORIZONTAL_SCROLLBAR_POLICY: string
            VERTICAL_SCROLLBAR_AS_NEEDED: int
            VERTICAL_SCROLLBAR_NEVER: int
            VERTICAL_SCROLLBAR_ALWAYS: int
            HORIZONTAL_SCROLLBAR_AS_NEEDED: int
            HORIZONTAL_SCROLLBAR_NEVER: int
            HORIZONTAL_SCROLLBAR_ALWAYS: int
        }
        class ScrollPaneLayout implements java.awt.LayoutManager , javax.swing.ScrollPaneConstants , java.io.Serializable {
            protected viewport: javax.swing.JViewport
            protected vsb: javax.swing.JScrollBar
            protected hsb: javax.swing.JScrollBar
            protected rowHead: javax.swing.JViewport
            protected colHead: javax.swing.JViewport
            protected lowerLeft: java.awt.Component
            protected lowerRight: java.awt.Component
            protected upperLeft: java.awt.Component
            protected upperRight: java.awt.Component
            protected vsbPolicy: int
            protected hsbPolicy: int
            public constructor()
            public syncWithScrollPane(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): void
            protected addSingletonComponent(arg0: java.awt.Component, arg1: java.awt.Component): java.awt.Component
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public getVerticalScrollBarPolicy(): int
            public setVerticalScrollBarPolicy(arg0: int): void
            public getHorizontalScrollBarPolicy(): int
            public setHorizontalScrollBarPolicy(arg0: int): void
            public getViewport(): javax.swing.JViewport
            public getHorizontalScrollBar(): javax.swing.JScrollBar
            public getVerticalScrollBar(): javax.swing.JScrollBar
            public getRowHeader(): javax.swing.JViewport
            public getColumnHeader(): javax.swing.JViewport
            public getCorner(arg0: java.lang.String | string): java.awt.Component
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public layoutContainer(arg0: java.awt.Container): void
            public getViewportBorderBounds(arg0: javax.swing.JScrollPane | javax.swing.JScrollPane$$Lambda): java.awt.Rectangle
            public static class: java.lang.Class<any>
        }
        interface Scrollable {
            getPreferredScrollableViewportSize(): java.awt.Dimension
            getScrollableUnitIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            getScrollableBlockIncrement(arg0: java.awt.Rectangle, arg1: int, arg2: int): int
            getScrollableTracksViewportWidth(): boolean
            getScrollableTracksViewportHeight(): boolean
        }
        interface SingleSelectionModel {
            getSelectedIndex(): int
            setSelectedIndex(arg0: int): void
            clearSelection(): void
            isSelected(): boolean
            addChangeListener(arg0: javax.swing.event.ChangeListener): void
            removeChangeListener(arg0: javax.swing.event.ChangeListener): void
        }
        class SizeRequirements implements java.io.Serializable {
            public minimum: int
            public preferred: int
            public maximum: int
            public alignment: float
            public constructor()
            public constructor(arg0: int, arg1: int, arg2: int, arg3: float)
            public toString(): string
            public static getTiledSizeRequirements(arg0: javax.swing.SizeRequirements[]): javax.swing.SizeRequirements
            public static getAlignedSizeRequirements(arg0: javax.swing.SizeRequirements[]): javax.swing.SizeRequirements
            public static calculateTiledPositions(arg0: int, arg1: javax.swing.SizeRequirements, arg2: javax.swing.SizeRequirements[], arg3: int[], arg4: int[]): void
            public static calculateTiledPositions(arg0: int, arg1: javax.swing.SizeRequirements, arg2: javax.swing.SizeRequirements[], arg3: int[], arg4: int[], arg5: boolean): void
            public static calculateAlignedPositions(arg0: int, arg1: javax.swing.SizeRequirements, arg2: javax.swing.SizeRequirements[], arg3: int[], arg4: int[]): void
            public static calculateAlignedPositions(arg0: int, arg1: javax.swing.SizeRequirements, arg2: javax.swing.SizeRequirements[], arg3: int[], arg4: int[], arg5: boolean): void
            public static adjustSizes(arg0: int, arg1: javax.swing.SizeRequirements[]): int[]
            public static class: java.lang.Class<any>
        }
        class SizeSequence {
            public constructor()
            public constructor(arg0: int)
            public constructor(arg0: int, arg1: int)
            public constructor(arg0: int[])
            public setSizes(arg0: int[]): void
            public getSizes(): int[]
            public getPosition(arg0: int): int
            public getIndex(arg0: int): int
            public getSize(arg0: int): int
            public setSize(arg0: int, arg1: int): void
            public insertEntries(arg0: int, arg1: int, arg2: int): void
            public removeEntries(arg0: int, arg1: int): void
            public static class: java.lang.Class<any>
        }
        class SortOrder extends java.lang.Enum<javax.swing.SortOrder> {
            public static ASCENDING: javax.swing.SortOrder
            public static DESCENDING: javax.swing.SortOrder
            public static UNSORTED: javax.swing.SortOrder
            public static values(): javax.swing.SortOrder[]
            public static valueOf(arg0: java.lang.String | string): javax.swing.SortOrder
            public static class: java.lang.Class<any>
        }
        class SortingFocusTraversalPolicy extends javax.swing.InternalFrameFocusTraversalPolicy {
            protected constructor()
            public constructor(arg0: java.util.Comparator<java.awt.Component>)
            public getComponentAfter(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getComponentBefore(arg0: java.awt.Container, arg1: java.awt.Component): java.awt.Component
            public getFirstComponent(arg0: java.awt.Container): java.awt.Component
            public getLastComponent(arg0: java.awt.Container): java.awt.Component
            public getDefaultComponent(arg0: java.awt.Container): java.awt.Component
            public setImplicitDownCycleTraversal(arg0: boolean): void
            public getImplicitDownCycleTraversal(): boolean
            protected setComparator(arg0: java.util.Comparator<java.awt.Component>): void
            protected getComparator(): java.util.Comparator<java.awt.Component>
            protected accept(arg0: java.awt.Component): boolean
            public static class: java.lang.Class<any>
        }
        class SpinnerDateModel extends javax.swing.AbstractSpinnerModel implements java.io.Serializable {
            public constructor(arg0: java.util.Date, arg1: java.lang.Comparable | java.lang.Comparable$$Lambda, arg2: java.lang.Comparable | java.lang.Comparable$$Lambda, arg3: int)
            public constructor()
            public setStart(arg0: java.lang.Comparable | java.lang.Comparable$$Lambda): void
            public getStart(): java.lang.Comparable
            public setEnd(arg0: java.lang.Comparable | java.lang.Comparable$$Lambda): void
            public getEnd(): java.lang.Comparable
            public setCalendarField(arg0: int): void
            public getCalendarField(): int
            public getNextValue(): java.lang.Object
            public getPreviousValue(): java.lang.Object
            public getDate(): java.util.Date
            public getValue(): java.lang.Object
            public setValue(arg0: java.lang.Object): void
            public static class: java.lang.Class<any>
        }
        class SpinnerListModel extends javax.swing.AbstractSpinnerModel implements java.io.Serializable {
            public constructor(arg0: java.util.List<any>)
            public constructor(arg0: java.lang.Object[])
            public constructor()
            public getList(): java.util.List<any>
            public setList(arg0: java.util.List<any>): void
            public getValue(): java.lang.Object
            public setValue(arg0: java.lang.Object): void
            public getNextValue(): java.lang.Object
            public getPreviousValue(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        interface SpinnerModel {
            getValue(): java.lang.Object
            setValue(arg0: java.lang.Object): void
            getNextValue(): java.lang.Object
            getPreviousValue(): java.lang.Object
            addChangeListener(arg0: javax.swing.event.ChangeListener): void
            removeChangeListener(arg0: javax.swing.event.ChangeListener): void
        }
        class SpinnerNumberModel extends javax.swing.AbstractSpinnerModel implements java.io.Serializable {
            public constructor(arg0: java.lang.Number, arg1: java.lang.Comparable | java.lang.Comparable$$Lambda, arg2: java.lang.Comparable | java.lang.Comparable$$Lambda, arg3: java.lang.Number)
            public constructor(arg0: int, arg1: int, arg2: int, arg3: int)
            public constructor(arg0: double, arg1: double, arg2: double, arg3: double)
            public constructor()
            public setMinimum(arg0: java.lang.Comparable | java.lang.Comparable$$Lambda): void
            public getMinimum(): java.lang.Comparable
            public setMaximum(arg0: java.lang.Comparable | java.lang.Comparable$$Lambda): void
            public getMaximum(): java.lang.Comparable
            public setStepSize(arg0: java.lang.Number): void
            public getStepSize(): java.lang.Number
            public getNextValue(): java.lang.Object
            public getPreviousValue(): java.lang.Object
            public getNumber(): java.lang.Number
            public getValue(): java.lang.Object
            public setValue(arg0: java.lang.Object): void
            public static class: java.lang.Class<any>
        }
        abstract class Spring {
            public static UNSET: int
            protected constructor()
            public getMinimumValue(): int
            public getPreferredValue(): int
            public getMaximumValue(): int
            public getValue(): int
            public setValue(arg0: int): void
            public static constant(arg0: int): javax.swing.Spring
            public static constant(arg0: int, arg1: int, arg2: int): javax.swing.Spring
            public static minus(arg0: javax.swing.Spring): javax.swing.Spring
            public static sum(arg0: javax.swing.Spring, arg1: javax.swing.Spring): javax.swing.Spring
            public static max(arg0: javax.swing.Spring, arg1: javax.swing.Spring): javax.swing.Spring
            public static scale(arg0: javax.swing.Spring, arg1: float): javax.swing.Spring
            public static width(arg0: java.awt.Component): javax.swing.Spring
            public static height(arg0: java.awt.Component): javax.swing.Spring
            public static class: java.lang.Class<any>
        }
        class SpringLayout implements java.awt.LayoutManager2 {
            public static NORTH: string
            public static SOUTH: string
            public static EAST: string
            public static WEST: string
            public static HORIZONTAL_CENTER: string
            public static VERTICAL_CENTER: string
            public static BASELINE: string
            public static WIDTH: string
            public static HEIGHT: string
            public constructor()
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public maximumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public addLayoutComponent(arg0: java.awt.Component, arg1: java.lang.Object): void
            public getLayoutAlignmentX(arg0: java.awt.Container): float
            public getLayoutAlignmentY(arg0: java.awt.Container): float
            public invalidateLayout(arg0: java.awt.Container): void
            public putConstraint(arg0: java.lang.String | string, arg1: java.awt.Component, arg2: int, arg3: java.lang.String | string, arg4: java.awt.Component): void
            public putConstraint(arg0: java.lang.String | string, arg1: java.awt.Component, arg2: javax.swing.Spring, arg3: java.lang.String | string, arg4: java.awt.Component): void
            public getConstraints(arg0: java.awt.Component): javax.swing.SpringLayout$Constraints
            public getConstraint(arg0: java.lang.String | string, arg1: java.awt.Component): javax.swing.Spring
            public layoutContainer(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        interface SwingConstants {
            CENTER: int
            TOP: int
            LEFT: int
            BOTTOM: int
            RIGHT: int
            NORTH: int
            NORTH_EAST: int
            EAST: int
            SOUTH_EAST: int
            SOUTH: int
            SOUTH_WEST: int
            WEST: int
            NORTH_WEST: int
            HORIZONTAL: int
            VERTICAL: int
            LEADING: int
            TRAILING: int
            NEXT: int
            PREVIOUS: int
        }
        interface SwingHeavyWeight {
        }
        class SwingPaintEventDispatcher extends sun.awt.PaintEventDispatcher {
            public createPaintEvent(arg0: java.awt.Component, arg1: int, arg2: int, arg3: int, arg4: int): java.awt.event.PaintEvent
            public shouldDoNativeBackgroundErase(arg0: java.awt.Component): boolean
            public queueSurfaceDataReplacing(arg0: java.awt.Component, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): boolean
            public static class: java.lang.Class<any>
        }
        class SwingUtilities implements javax.swing.SwingConstants {
            public static isRectangleContainingRectangle(arg0: java.awt.Rectangle, arg1: java.awt.Rectangle): boolean
            public static getLocalBounds(arg0: java.awt.Component): java.awt.Rectangle
            public static getWindowAncestor(arg0: java.awt.Component): java.awt.Window
            public static convertPoint(arg0: java.awt.Component, arg1: java.awt.Point, arg2: java.awt.Component): java.awt.Point
            public static convertPoint(arg0: java.awt.Component, arg1: int, arg2: int, arg3: java.awt.Component): java.awt.Point
            public static convertRectangle(arg0: java.awt.Component, arg1: java.awt.Rectangle, arg2: java.awt.Component): java.awt.Rectangle
            public static getAncestorOfClass(arg0: java.lang.Class<any>, arg1: java.awt.Component): java.awt.Container
            public static getAncestorNamed(arg0: java.lang.String | string, arg1: java.awt.Component): java.awt.Container
            public static getDeepestComponentAt(arg0: java.awt.Component, arg1: int, arg2: int): java.awt.Component
            public static convertMouseEvent(arg0: java.awt.Component, arg1: java.awt.event.MouseEvent, arg2: java.awt.Component): java.awt.event.MouseEvent
            public static convertPointToScreen(arg0: java.awt.Point, arg1: java.awt.Component): void
            public static convertPointFromScreen(arg0: java.awt.Point, arg1: java.awt.Component): void
            public static windowForComponent(arg0: java.awt.Component): java.awt.Window
            public static isDescendingFrom(arg0: java.awt.Component, arg1: java.awt.Component): boolean
            public static computeIntersection(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Rectangle): java.awt.Rectangle
            public static computeUnion(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Rectangle): java.awt.Rectangle
            public static computeDifference(arg0: java.awt.Rectangle, arg1: java.awt.Rectangle): java.awt.Rectangle[]
            public static isLeftMouseButton(arg0: java.awt.event.MouseEvent): boolean
            public static isMiddleMouseButton(arg0: java.awt.event.MouseEvent): boolean
            public static isRightMouseButton(arg0: java.awt.event.MouseEvent): boolean
            public static computeStringWidth(arg0: java.awt.FontMetrics, arg1: java.lang.String | string): int
            public static layoutCompoundLabel(arg0: javax.swing.JComponent, arg1: java.awt.FontMetrics, arg2: java.lang.String | string, arg3: javax.swing.Icon, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Rectangle, arg9: java.awt.Rectangle, arg10: java.awt.Rectangle, arg11: int): string
            public static layoutCompoundLabel(arg0: java.awt.FontMetrics, arg1: java.lang.String | string, arg2: javax.swing.Icon, arg3: int, arg4: int, arg5: int, arg6: int, arg7: java.awt.Rectangle, arg8: java.awt.Rectangle, arg9: java.awt.Rectangle, arg10: int): string
            public static paintComponent(arg0: java.awt.Graphics, arg1: java.awt.Component, arg2: java.awt.Container, arg3: int, arg4: int, arg5: int, arg6: int): void
            public static paintComponent(arg0: java.awt.Graphics, arg1: java.awt.Component, arg2: java.awt.Container, arg3: java.awt.Rectangle): void
            public static updateComponentTreeUI(arg0: java.awt.Component): void
            public static invokeLater(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static invokeAndWait(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static isEventDispatchThread(): boolean
            public static getAccessibleIndexInParent(arg0: java.awt.Component): int
            public static getAccessibleAt(arg0: java.awt.Component, arg1: java.awt.Point): javax.accessibility.Accessible
            public static getAccessibleStateSet(arg0: java.awt.Component): javax.accessibility.AccessibleStateSet
            public static getAccessibleChildrenCount(arg0: java.awt.Component): int
            public static getAccessibleChild(arg0: java.awt.Component, arg1: int): javax.accessibility.Accessible
            public static findFocusOwner(arg0: java.awt.Component): java.awt.Component
            public static getRootPane(arg0: java.awt.Component): javax.swing.JRootPane
            public static getRoot(arg0: java.awt.Component): java.awt.Component
            public static processKeyBindings(arg0: java.awt.event.KeyEvent): boolean
            public static notifyAction(arg0: javax.swing.Action, arg1: javax.swing.KeyStroke, arg2: java.awt.event.KeyEvent, arg3: java.lang.Object, arg4: int): boolean
            public static replaceUIInputMap(arg0: javax.swing.JComponent, arg1: int, arg2: javax.swing.InputMap): void
            public static replaceUIActionMap(arg0: javax.swing.JComponent, arg1: javax.swing.ActionMap): void
            public static getUIInputMap(arg0: javax.swing.JComponent, arg1: int): javax.swing.InputMap
            public static getUIActionMap(arg0: javax.swing.JComponent): javax.swing.ActionMap
            public static calculateInnerArea(arg0: javax.swing.JComponent, arg1: java.awt.Rectangle): java.awt.Rectangle
            public static getUnwrappedParent(arg0: java.awt.Component): java.awt.Container
            public static getUnwrappedView(arg0: javax.swing.JViewport | javax.swing.JViewport$$Lambda): java.awt.Component
            public static class: java.lang.Class<any>
        }
        abstract class SwingWorker<T, V> implements java.util.concurrent.RunnableFuture<T> {
            public constructor()
            protected doInBackground(): T
            public run(): void
            protected publish(...arg0: V[]): void
            protected process(arg0: java.util.List<V>): void
            protected done(): void
            protected setProgress(arg0: int): void
            public getProgress(): int
            public execute(): void
            public cancel(arg0: boolean): boolean
            public isCancelled(): boolean
            public isDone(): boolean
            public get(): T
            public get(arg0: long, arg1: java.util.concurrent.TimeUnit): T
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public getPropertyChangeSupport(): java.beans.PropertyChangeSupport
            public getState(): javax.swing.SwingWorker$StateValue
            public static class: java.lang.Class<any>
        }
        class TablePrintable implements java.awt.print.Printable {
            public constructor(arg0: javax.swing.JTable, arg1: javax.swing.JTable$PrintMode, arg2: java.text.MessageFormat, arg3: java.text.MessageFormat)
            public print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
            public static class: java.lang.Class<any>
        }
        class Timer implements java.io.Serializable {
            protected listenerList: javax.swing.event.EventListenerList
            public constructor(arg0: int, arg1: java.awt.event.ActionListener)
            public addActionListener(arg0: java.awt.event.ActionListener): void
            public removeActionListener(arg0: java.awt.event.ActionListener): void
            public getActionListeners(): java.awt.event.ActionListener[]
            protected fireActionPerformed(arg0: java.awt.event.ActionEvent): void
            public getListeners<T extends java.util.EventListener>(arg0: java.lang.Class<T>): T[]
            public static setLogTimers<T extends java.util.EventListener>(arg0: boolean): void
            public static getLogTimers<T extends java.util.EventListener>(): boolean
            public setDelay<T extends java.util.EventListener>(arg0: int): void
            public getDelay<T extends java.util.EventListener>(): int
            public setInitialDelay<T extends java.util.EventListener>(arg0: int): void
            public getInitialDelay<T extends java.util.EventListener>(): int
            public setRepeats<T extends java.util.EventListener>(arg0: boolean): void
            public isRepeats<T extends java.util.EventListener>(): boolean
            public setCoalesce<T extends java.util.EventListener>(arg0: boolean): void
            public isCoalesce<T extends java.util.EventListener>(): boolean
            public setActionCommand<T extends java.util.EventListener>(arg0: java.lang.String | string): void
            public getActionCommand<T extends java.util.EventListener>(): string
            public start<T extends java.util.EventListener>(): void
            public isRunning<T extends java.util.EventListener>(): boolean
            public stop<T extends java.util.EventListener>(): void
            public restart<T extends java.util.EventListener>(): void
            public static class: java.lang.Class<any>
        }
        class TimerQueue implements java.lang.Runnable {
            public constructor()
            public static sharedInstance(): javax.swing.TimerQueue
            public run(): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class TimerQueue$$Lambda implements java.lang.Runnable {
            public constructor()
        }
        class ToolTipManager extends java.awt.event.MouseAdapter implements java.awt.event.MouseMotionListener {
            protected lightWeightPopupEnabled: boolean
            protected heavyWeightPopupEnabled: boolean
            public setEnabled(arg0: boolean): void
            public isEnabled(): boolean
            public setLightWeightPopupEnabled(arg0: boolean): void
            public isLightWeightPopupEnabled(): boolean
            public setInitialDelay(arg0: int): void
            public getInitialDelay(): int
            public setDismissDelay(arg0: int): void
            public getDismissDelay(): int
            public setReshowDelay(arg0: int): void
            public getReshowDelay(): int
            public static sharedInstance(): javax.swing.ToolTipManager
            public registerComponent(arg0: javax.swing.JComponent): void
            public unregisterComponent(arg0: javax.swing.JComponent): void
            public mouseEntered(arg0: java.awt.event.MouseEvent): void
            public mouseExited(arg0: java.awt.event.MouseEvent): void
            public mousePressed(arg0: java.awt.event.MouseEvent): void
            public mouseDragged(arg0: java.awt.event.MouseEvent): void
            public mouseMoved(arg0: java.awt.event.MouseEvent): void
            public static class: java.lang.Class<any>
        }
        class TransferHandler implements java.io.Serializable {
            public static NONE: int
            public static COPY: int
            public static MOVE: int
            public static COPY_OR_MOVE: int
            public static LINK: int
            public static getCutAction(): javax.swing.Action
            public static getCopyAction(): javax.swing.Action
            public static getPasteAction(): javax.swing.Action
            public constructor(arg0: java.lang.String | string)
            protected constructor()
            public setDragImage(arg0: java.awt.Image): void
            public getDragImage(): java.awt.Image
            public setDragImageOffset(arg0: java.awt.Point): void
            public getDragImageOffset(): java.awt.Point
            public exportAsDrag(arg0: javax.swing.JComponent, arg1: java.awt.event.InputEvent, arg2: int): void
            public exportToClipboard(arg0: javax.swing.JComponent, arg1: java.awt.datatransfer.Clipboard, arg2: int): void
            public importData(arg0: javax.swing.TransferHandler$TransferSupport): boolean
            public importData(arg0: javax.swing.JComponent, arg1: java.awt.datatransfer.Transferable): boolean
            public canImport(arg0: javax.swing.TransferHandler$TransferSupport): boolean
            public canImport(arg0: javax.swing.JComponent, arg1: java.awt.datatransfer.DataFlavor[]): boolean
            public getSourceActions(arg0: javax.swing.JComponent): int
            public getVisualRepresentation(arg0: java.awt.datatransfer.Transferable): javax.swing.Icon
            protected createTransferable(arg0: javax.swing.JComponent): java.awt.datatransfer.Transferable
            protected exportDone(arg0: javax.swing.JComponent, arg1: java.awt.datatransfer.Transferable, arg2: int): void
            public static class: java.lang.Class<any>
        }
        class UIDefaults extends java.util.Hashtable<java.lang.Object, java.lang.Object> {
            public constructor()
            public constructor(arg0: int, arg1: float)
            public constructor(arg0: java.lang.Object[])
            public get(arg0: java.lang.Object): java.lang.Object
            public get(arg0: java.lang.Object, arg1: java.util.Locale): java.lang.Object
            public put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
            public putDefaults(arg0: java.lang.Object[]): void
            public getFont(arg0: java.lang.Object): java.awt.Font
            public getFont(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Font
            public getColor(arg0: java.lang.Object): java.awt.Color
            public getColor(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Color
            public getIcon(arg0: java.lang.Object): javax.swing.Icon
            public getIcon(arg0: java.lang.Object, arg1: java.util.Locale): javax.swing.Icon
            public getBorder(arg0: java.lang.Object): javax.swing.border.Border
            public getBorder(arg0: java.lang.Object, arg1: java.util.Locale): javax.swing.border.Border
            public getString(arg0: java.lang.Object): string
            public getString(arg0: java.lang.Object, arg1: java.util.Locale): string
            public getInt(arg0: java.lang.Object): int
            public getInt(arg0: java.lang.Object, arg1: java.util.Locale): int
            public getBoolean(arg0: java.lang.Object): boolean
            public getBoolean(arg0: java.lang.Object, arg1: java.util.Locale): boolean
            public getInsets(arg0: java.lang.Object): java.awt.Insets
            public getInsets(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Insets
            public getDimension(arg0: java.lang.Object): java.awt.Dimension
            public getDimension(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Dimension
            public getUIClass(arg0: java.lang.String | string, arg1: java.lang.ClassLoader): java.lang.Class<javax.swing.plaf.ComponentUI>
            public getUIClass(arg0: java.lang.String | string): java.lang.Class<javax.swing.plaf.ComponentUI>
            protected getUIError(arg0: java.lang.String | string): void
            public getUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
            protected firePropertyChange(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: java.lang.Object): void
            public addResourceBundle(arg0: java.lang.String | string): void
            public removeResourceBundle(arg0: java.lang.String | string): void
            public setDefaultLocale(arg0: java.util.Locale): void
            public getDefaultLocale(): java.util.Locale
            public static class: java.lang.Class<any>
        }
        class UIManager implements java.io.Serializable {
            public constructor()
            public static getInstalledLookAndFeels(): javax.swing.UIManager$LookAndFeelInfo[]
            public static setInstalledLookAndFeels(arg0: javax.swing.UIManager$LookAndFeelInfo[]): void
            public static installLookAndFeel(arg0: javax.swing.UIManager$LookAndFeelInfo): void
            public static installLookAndFeel(arg0: java.lang.String | string, arg1: java.lang.String | string): void
            public static getLookAndFeel(): javax.swing.LookAndFeel
            public static setLookAndFeel(arg0: javax.swing.LookAndFeel): void
            public static setLookAndFeel(arg0: java.lang.String | string): void
            public static getSystemLookAndFeelClassName(): string
            public static getCrossPlatformLookAndFeelClassName(): string
            public static getDefaults(): javax.swing.UIDefaults
            public static getFont(arg0: java.lang.Object): java.awt.Font
            public static getFont(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Font
            public static getColor(arg0: java.lang.Object): java.awt.Color
            public static getColor(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Color
            public static getIcon(arg0: java.lang.Object): javax.swing.Icon
            public static getIcon(arg0: java.lang.Object, arg1: java.util.Locale): javax.swing.Icon
            public static getBorder(arg0: java.lang.Object): javax.swing.border.Border
            public static getBorder(arg0: java.lang.Object, arg1: java.util.Locale): javax.swing.border.Border
            public static getString(arg0: java.lang.Object): string
            public static getString(arg0: java.lang.Object, arg1: java.util.Locale): string
            public static getInt(arg0: java.lang.Object): int
            public static getInt(arg0: java.lang.Object, arg1: java.util.Locale): int
            public static getBoolean(arg0: java.lang.Object): boolean
            public static getBoolean(arg0: java.lang.Object, arg1: java.util.Locale): boolean
            public static getInsets(arg0: java.lang.Object): java.awt.Insets
            public static getInsets(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Insets
            public static getDimension(arg0: java.lang.Object): java.awt.Dimension
            public static getDimension(arg0: java.lang.Object, arg1: java.util.Locale): java.awt.Dimension
            public static get(arg0: java.lang.Object): java.lang.Object
            public static get(arg0: java.lang.Object, arg1: java.util.Locale): java.lang.Object
            public static put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
            public static getUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
            public static getLookAndFeelDefaults(): javax.swing.UIDefaults
            public static addAuxiliaryLookAndFeel(arg0: javax.swing.LookAndFeel): void
            public static removeAuxiliaryLookAndFeel(arg0: javax.swing.LookAndFeel): boolean
            public static getAuxiliaryLookAndFeels(): javax.swing.LookAndFeel[]
            public static addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public static removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public static getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
            public static class: java.lang.Class<any>
        }
        class UnsupportedLookAndFeelException extends java.lang.Exception {
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        class ViewportLayout implements java.awt.LayoutManager , java.io.Serializable {
            public constructor()
            public addLayoutComponent(arg0: java.lang.String | string, arg1: java.awt.Component): void
            public removeLayoutComponent(arg0: java.awt.Component): void
            public preferredLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public minimumLayoutSize(arg0: java.awt.Container): java.awt.Dimension
            public layoutContainer(arg0: java.awt.Container): void
            public static class: java.lang.Class<any>
        }
        interface WindowConstants {
            DO_NOTHING_ON_CLOSE: int
            HIDE_ON_CLOSE: int
            DISPOSE_ON_CLOSE: int
            EXIT_ON_CLOSE: int
        }
    }
}
declare namespace sun {
    namespace applet {
        class AppletClassLoader extends java.net.URLClassLoader {
            protected constructor(arg0: java.net.URL)
            public disableRecursiveDirectoryRead(): void
            public getURLs(): java.net.URL[]
            protected addJar(arg0: java.lang.String | string): void
            public loadClass(arg0: java.lang.String | string, arg1: boolean): java.lang.Class
            protected findClass(arg0: java.lang.String | string): java.lang.Class
            protected getPermissions(arg0: java.security.CodeSource): java.security.PermissionCollection
            public getResourceAsStream(arg0: java.lang.String | string): java.io.InputStream
            public getResourceAsStreamFromJar(arg0: java.lang.String | string): java.io.InputStream
            public findResource(arg0: java.lang.String | string): java.net.URL
            public findResources(arg0: java.lang.String | string): java.util.Enumeration
            public getThreadGroup(): java.lang.ThreadGroup
            public getAppContext(): sun.awt.AppContext
            public grab(): void
            protected setExceptionStatus(): void
            public getExceptionStatus(): boolean
            protected release(): void
            protected resetAppContext(): sun.awt.AppContext
            public static class: java.lang.Class<any>
        }
        class AppletSecurity extends sun.awt.AWTSecurityManager {
            public constructor()
            public reset(): void
            protected inThreadGroup(arg0: java.lang.ThreadGroup): boolean
            protected inThreadGroup(arg0: java.lang.Thread | java.lang.Thread$$Lambda): boolean
            public checkAccess(arg0: java.lang.Thread | java.lang.Thread$$Lambda): void
            public checkAccess(arg0: java.lang.ThreadGroup): void
            public checkPackageAccess(arg0: java.lang.String | string): void
            public checkAwtEventQueueAccess(): void
            public getThreadGroup(): java.lang.ThreadGroup
            public getAppContext(): sun.awt.AppContext
            public static class: java.lang.Class<any>
        }
        class AppletThreadGroup extends java.lang.ThreadGroup {
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.ThreadGroup, arg1: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
    }
    namespace awt {
        namespace datatransfer {
            class ClipboardTransferable implements java.awt.datatransfer.Transferable {
                public constructor(arg0: sun.awt.datatransfer.SunClipboard)
                public getTransferDataFlavors(): java.awt.datatransfer.DataFlavor[]
                public isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                public getTransferData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
                public static class: java.lang.Class<any>
            }
            abstract class DataTransferer {
                public static plainTextStringFlavor: java.awt.datatransfer.DataFlavor
                public static javaTextEncodingFlavor: java.awt.datatransfer.DataFlavor
                public constructor()
                public static getInstance(): sun.awt.datatransfer.DataTransferer
                public static canonicalName(arg0: java.lang.String | string): string
                public static getTextCharset(arg0: java.awt.datatransfer.DataFlavor): string
                public static getDefaultTextCharset(): string
                public static doesSubtypeSupportCharset(arg0: java.awt.datatransfer.DataFlavor): boolean
                public static doesSubtypeSupportCharset(arg0: java.lang.String | string, arg1: java.lang.String | string): boolean
                public static isFlavorCharsetTextType(arg0: java.awt.datatransfer.DataFlavor): boolean
                public static isFlavorNoncharsetTextType(arg0: java.awt.datatransfer.DataFlavor): boolean
                public static isEncodingSupported(arg0: java.lang.String | string): boolean
                public static isRemote(arg0: java.lang.Class<any>): boolean
                public static standardEncodings(): java.util.Set<java.lang.String>
                public static adaptFlavorMap(arg0: java.awt.datatransfer.FlavorMap): java.awt.datatransfer.FlavorTable
                public getDefaultUnicodeEncoding(): string
                public registerTextFlavorProperties(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: java.lang.String | string): void
                protected isTextFormat(arg0: long): boolean
                protected getCharsetForTextFormat(arg0: java.lang.Long): string
                public isLocaleDependentTextFormat(arg0: long): boolean
                public isFileFormat(arg0: long): boolean
                public isImageFormat(arg0: long): boolean
                protected isURIListFormat(arg0: long): boolean
                public getFormatsForTransferable(arg0: java.awt.datatransfer.Transferable, arg1: java.awt.datatransfer.FlavorTable): java.util.SortedMap<java.lang.Long, java.awt.datatransfer.DataFlavor>
                public getFormatsForFlavor(arg0: java.awt.datatransfer.DataFlavor, arg1: java.awt.datatransfer.FlavorTable): java.util.SortedMap
                public getFormatsForFlavors(arg0: java.awt.datatransfer.DataFlavor[], arg1: java.awt.datatransfer.FlavorTable): java.util.SortedMap<java.lang.Long, java.awt.datatransfer.DataFlavor>
                public getFormatsForTransferableAsArray(arg0: java.awt.datatransfer.Transferable, arg1: java.awt.datatransfer.FlavorTable): long[]
                public getFormatsForFlavorAsArray(arg0: java.awt.datatransfer.DataFlavor, arg1: java.awt.datatransfer.FlavorTable): long[]
                public getFormatsForFlavorsAsArray(arg0: java.awt.datatransfer.DataFlavor[], arg1: java.awt.datatransfer.FlavorTable): long[]
                public getFlavorsForFormat(arg0: long, arg1: java.awt.datatransfer.FlavorTable): java.util.Map
                public getFlavorsForFormats(arg0: long[], arg1: java.awt.datatransfer.FlavorTable): java.util.Map
                public getFlavorsForFormatsAsSet(arg0: long[], arg1: java.awt.datatransfer.FlavorTable): java.util.Set
                public getFlavorsForFormatAsArray(arg0: long, arg1: java.awt.datatransfer.FlavorTable): java.awt.datatransfer.DataFlavor[]
                public getFlavorsForFormatsAsArray(arg0: long[], arg1: java.awt.datatransfer.FlavorTable): java.awt.datatransfer.DataFlavor[]
                protected getFormatForNativeAsLong(arg0: java.lang.String | string): java.lang.Long
                protected getNativeForFormat(arg0: long): string
                public translateTransferable(arg0: java.awt.datatransfer.Transferable, arg1: java.awt.datatransfer.DataFlavor, arg2: long): byte[]
                protected convertFileListToBytes(arg0: java.util.ArrayList<java.lang.String>): java.io.ByteArrayOutputStream
                public translateBytes(arg0: byte[], arg1: java.awt.datatransfer.DataFlavor, arg2: long, arg3: java.awt.datatransfer.Transferable): java.lang.Object
                public translateStream(arg0: java.io.InputStream, arg1: java.awt.datatransfer.DataFlavor, arg2: long, arg3: java.awt.datatransfer.Transferable): java.lang.Object
                protected dragQueryFile(arg0: byte[]): java.lang.String[]
                protected dragQueryURIs(arg0: java.io.InputStream, arg1: long, arg2: java.awt.datatransfer.Transferable): java.net.URI[]
                protected platformImageBytesToImage(arg0: byte[], arg1: long): java.awt.Image
                protected standardImageBytesToImage(arg0: byte[], arg1: java.lang.String | string): java.awt.Image
                protected imageToPlatformBytes(arg0: java.awt.Image, arg1: long): byte[]
                protected imageToStandardBytes(arg0: java.awt.Image, arg1: java.lang.String | string): byte[]
                protected imageToStandardBytesImpl(arg0: java.awt.image.RenderedImage, arg1: java.lang.String | string): byte[]
                public convertData(arg0: java.lang.Object, arg1: java.awt.datatransfer.Transferable, arg2: long, arg3: java.util.Map, arg4: boolean): byte[]
                public processDataConversionRequests(): void
                public getToolkitThreadBlockedHandler(): sun.awt.datatransfer.ToolkitThreadBlockedHandler
                public static keysToLongArray(arg0: java.util.SortedMap): long[]
                public static setToSortedDataFlavorArray(arg0: java.util.Set): java.awt.datatransfer.DataFlavor[]
                protected static inputStreamToByteArray(arg0: java.io.InputStream): byte[]
                public getPlatformMappingsForNative(arg0: java.lang.String | string): java.util.LinkedHashSet<java.awt.datatransfer.DataFlavor>
                public getPlatformMappingsForFlavor(arg0: java.awt.datatransfer.DataFlavor): java.util.LinkedHashSet<java.lang.String>
                public static class: java.lang.Class<any>
            }
            abstract class SunClipboard extends java.awt.datatransfer.Clipboard implements java.beans.PropertyChangeListener {
                public constructor(arg0: java.lang.String | string)
                public setContents(arg0: java.awt.datatransfer.Transferable, arg1: java.awt.datatransfer.ClipboardOwner | java.awt.datatransfer.ClipboardOwner$$Lambda): void
                public getContents(arg0: java.lang.Object): java.awt.datatransfer.Transferable
                protected getContextContents(): java.awt.datatransfer.Transferable
                public getAvailableDataFlavors(): java.awt.datatransfer.DataFlavor[]
                public isDataFlavorAvailable(arg0: java.awt.datatransfer.DataFlavor): boolean
                public getData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
                protected createLocaleTransferable(arg0: long[]): java.awt.datatransfer.Transferable
                public openClipboard(arg0: sun.awt.datatransfer.SunClipboard): void
                public closeClipboard(): void
                public getID(): long
                public propertyChange(arg0: java.beans.PropertyChangeEvent): void
                protected lostOwnershipImpl(): void
                protected lostOwnershipLater(arg0: sun.awt.AppContext): void
                protected lostOwnershipNow(arg0: sun.awt.AppContext): void
                protected clearNativeContext(): void
                protected setContentsNative(arg0: java.awt.datatransfer.Transferable): void
                protected getClipboardFormatsOpenClose(): long[]
                protected getClipboardFormats(): long[]
                protected getClipboardData(arg0: long): byte[]
                public addFlavorListener(arg0: java.awt.datatransfer.FlavorListener): void
                public removeFlavorListener(arg0: java.awt.datatransfer.FlavorListener): void
                public getFlavorListeners(): java.awt.datatransfer.FlavorListener[]
                public areFlavorListenersRegistered(): boolean
                protected registerClipboardViewerChecked(): void
                protected unregisterClipboardViewerChecked(): void
                protected checkChange(arg0: long[]): void
                public static getDefaultFlavorTable(): java.awt.datatransfer.FlavorTable
                public static class: java.lang.Class<any>
            }
            interface ToolkitThreadBlockedHandler {
                lock(): void
                unlock(): void
                enter(): void
                exit(): void
            }
            class TransferableProxy implements java.awt.datatransfer.Transferable {
                protected transferable: java.awt.datatransfer.Transferable
                protected isLocal: boolean
                public constructor(arg0: java.awt.datatransfer.Transferable, arg1: boolean)
                public getTransferDataFlavors(): java.awt.datatransfer.DataFlavor[]
                public isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                public getTransferData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
                public static class: java.lang.Class<any>
            }
        }
        namespace dnd {
            abstract class SunDragSourceContextPeer implements java.awt.dnd.peer.DragSourceContextPeer {
                protected static DISPATCH_ENTER: int
                protected static DISPATCH_MOTION: int
                protected static DISPATCH_CHANGED: int
                protected static DISPATCH_EXIT: int
                protected static DISPATCH_FINISH: int
                protected static DISPATCH_MOUSE_MOVED: int
                public constructor(arg0: java.awt.dnd.DragGestureEvent)
                public startSecondaryEventLoop(): void
                public quitSecondaryEventLoop(): void
                public startDrag(arg0: java.awt.dnd.DragSourceContext, arg1: java.awt.Cursor, arg2: java.awt.Image, arg3: java.awt.Point): void
                protected startDrag(arg0: java.awt.datatransfer.Transferable, arg1: long[], arg2: java.util.Map): void
                public setCursor(arg0: java.awt.Cursor): void
                public getCursor(): java.awt.Cursor
                public getDragImage(): java.awt.Image
                public getDragImageOffset(): java.awt.Point
                protected setNativeCursor(arg0: long, arg1: java.awt.Cursor, arg2: int): void
                protected setTrigger(arg0: java.awt.dnd.DragGestureEvent): void
                protected getTrigger(): java.awt.dnd.DragGestureEvent
                protected getComponent(): java.awt.Component
                protected setNativeContext(arg0: long): void
                protected getNativeContext(): long
                protected getDragSourceContext(): java.awt.dnd.DragSourceContext
                public transferablesFlavorsChanged(): void
                protected postDragSourceDragEvent(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): void
                protected dragEnter(arg0: int, arg1: int, arg2: int, arg3: int): void
                protected dragExit(arg0: int, arg1: int): void
                protected dragDropFinished(arg0: boolean, arg1: int, arg2: int, arg3: int): void
                public static setDragDropInProgress(arg0: boolean): void
                public static checkEvent(arg0: java.awt.AWTEvent): boolean
                public static checkDragDropInProgress(): void
                public static convertModifiersToDropAction(arg0: int, arg1: int): int
                public static class: java.lang.Class<any>
            }
            abstract class SunDropTargetContextPeer implements java.awt.dnd.peer.DropTargetContextPeer , java.awt.datatransfer.Transferable {
                public static DISPATCH_SYNC: boolean
                protected dropStatus: int
                protected dropComplete: boolean
                protected static _globalLock: java.lang.Object
                protected static currentJVMLocalSourceTransferable: java.awt.datatransfer.Transferable
                protected static STATUS_NONE: int
                protected static STATUS_WAIT: int
                protected static STATUS_ACCEPT: int
                protected static STATUS_REJECT: int
                public static setCurrentJVMLocalSourceTransferable(arg0: java.awt.datatransfer.Transferable): void
                public constructor()
                public getDropTarget(): java.awt.dnd.DropTarget
                public setTargetActions(arg0: int): void
                public getTargetActions(): int
                public getTransferable(): java.awt.datatransfer.Transferable
                public getTransferDataFlavors(): java.awt.datatransfer.DataFlavor[]
                public isDataFlavorSupported(arg0: java.awt.datatransfer.DataFlavor): boolean
                public getTransferData(arg0: java.awt.datatransfer.DataFlavor): java.lang.Object
                protected getNativeData(arg0: long): java.lang.Object
                public isTransferableJVMLocal(): boolean
                protected processEnterMessage(arg0: sun.awt.dnd.SunDropTargetEvent): void
                protected processExitMessage(arg0: sun.awt.dnd.SunDropTargetEvent): void
                protected processMotionMessage(arg0: sun.awt.dnd.SunDropTargetEvent, arg1: boolean): void
                protected processDropMessage(arg0: sun.awt.dnd.SunDropTargetEvent): void
                protected postDropTargetEvent(arg0: java.awt.Component, arg1: int, arg2: int, arg3: int, arg4: int, arg5: long[], arg6: long, arg7: int, arg8: boolean): int
                public acceptDrag(arg0: int): void
                public rejectDrag(): void
                public acceptDrop(arg0: int): void
                public rejectDrop(): void
                public dropComplete(arg0: boolean): void
                protected doDropDone(arg0: boolean, arg1: int, arg2: boolean): void
                protected getNativeDragContext(): long
                protected eventPosted(arg0: sun.awt.dnd.SunDropTargetEvent): void
                protected eventProcessed(arg0: sun.awt.dnd.SunDropTargetEvent, arg1: int, arg2: boolean): void
                public static class: java.lang.Class<any>
            }
            class SunDropTargetEvent extends java.awt.event.MouseEvent {
                public static MOUSE_DROPPED: int
                public constructor(arg0: java.awt.Component, arg1: int, arg2: int, arg3: int, arg4: sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher)
                public dispatch(): void
                public consume(): void
                public getDispatcher(): sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher
                public paramString(): string
                public static class: java.lang.Class<any>
            }
        }
        namespace event {
            class IgnorePaintEvent extends java.awt.event.PaintEvent {
                public constructor(arg0: java.awt.Component, arg1: int, arg2: java.awt.Rectangle)
                public static class: java.lang.Class<any>
            }
        }
        namespace geom {
            abstract class AreaOp {
                public static CTAG_LEFT: int
                public static CTAG_RIGHT: int
                public static ETAG_IGNORE: int
                public static ETAG_ENTER: int
                public static ETAG_EXIT: int
                public static RSTAG_INSIDE: int
                public static RSTAG_OUTSIDE: int
                public newRow(): void
                public classify(arg0: sun.awt.geom.Edge): int
                public getState(): int
                public calculate(arg0: java.util.Vector, arg1: java.util.Vector): java.util.Vector
                public static finalizeSubCurves(arg0: java.util.Vector, arg1: java.util.Vector): void
                public static resolveLinks(arg0: java.util.Vector, arg1: java.util.Vector, arg2: java.util.Vector): void
                public static obstructs(arg0: double, arg1: double, arg2: int): boolean
                public static class: java.lang.Class<any>
            }
            class ChainEnd {
                public constructor(arg0: sun.awt.geom.CurveLink, arg1: sun.awt.geom.ChainEnd)
                public getChain(): sun.awt.geom.CurveLink
                public setOtherEnd(arg0: sun.awt.geom.ChainEnd): void
                public getPartner(): sun.awt.geom.ChainEnd
                public linkTo(arg0: sun.awt.geom.ChainEnd): sun.awt.geom.CurveLink
                public addLink(arg0: sun.awt.geom.CurveLink): void
                public getX(): double
                public static class: java.lang.Class<any>
            }
            abstract class Crossings {
                public static debug: boolean
                public constructor(arg0: double, arg1: double, arg2: double, arg3: double)
                public getXLo(): double
                public getYLo(): double
                public getXHi(): double
                public getYHi(): double
                public record(arg0: double, arg1: double, arg2: int): void
                public print(): void
                public isEmpty(): boolean
                public covers(arg0: double, arg1: double): boolean
                public static findCrossings(arg0: java.util.Vector, arg1: double, arg2: double, arg3: double, arg4: double): sun.awt.geom.Crossings
                public static findCrossings(arg0: java.awt.geom.PathIterator, arg1: double, arg2: double, arg3: double, arg4: double): sun.awt.geom.Crossings
                public accumulateLine(arg0: double, arg1: double, arg2: double, arg3: double): boolean
                public accumulateLine(arg0: double, arg1: double, arg2: double, arg3: double, arg4: int): boolean
                public accumulateQuad(arg0: double, arg1: double, arg2: double[]): boolean
                public accumulateCubic(arg0: double, arg1: double, arg2: double[]): boolean
                public static class: java.lang.Class<any>
            }
            abstract class Curve {
                public static INCREASING: int
                public static DECREASING: int
                protected direction: int
                public static RECT_INTERSECTS: int
                public static TMIN: double
                public static insertMove(arg0: java.util.Vector, arg1: double, arg2: double): void
                public static insertLine(arg0: java.util.Vector, arg1: double, arg2: double, arg3: double, arg4: double): void
                public static insertQuad(arg0: java.util.Vector, arg1: double, arg2: double, arg3: double[]): void
                public static insertCubic(arg0: java.util.Vector, arg1: double, arg2: double, arg3: double[]): void
                public static pointCrossingsForPath(arg0: java.awt.geom.PathIterator, arg1: double, arg2: double): int
                public static pointCrossingsForLine(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): int
                public static pointCrossingsForQuad(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: int): int
                public static pointCrossingsForCubic(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: int): int
                public static rectCrossingsForPath(arg0: java.awt.geom.PathIterator, arg1: double, arg2: double, arg3: double, arg4: double): int
                public static rectCrossingsForLine(arg0: int, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double): int
                public static rectCrossingsForQuad(arg0: int, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: int): int
                public static rectCrossingsForCubic(arg0: int, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double, arg13: int): int
                public constructor(arg0: int)
                public getDirection(): int
                public getWithDirection(arg0: int): sun.awt.geom.Curve
                public static round(arg0: double): double
                public static orderof(arg0: double, arg1: double): int
                public static signeddiffbits(arg0: double, arg1: double): long
                public static diffbits(arg0: double, arg1: double): long
                public static prev(arg0: double): double
                public static next(arg0: double): double
                public toString(): string
                public controlPointString(): string
                public getOrder(): int
                public getXTop(): double
                public getYTop(): double
                public getXBot(): double
                public getYBot(): double
                public getXMin(): double
                public getXMax(): double
                public getX0(): double
                public getY0(): double
                public getX1(): double
                public getY1(): double
                public XforY(arg0: double): double
                public TforY(arg0: double): double
                public XforT(arg0: double): double
                public YforT(arg0: double): double
                public dXforT(arg0: double, arg1: int): double
                public dYforT(arg0: double, arg1: int): double
                public nextVertical(arg0: double, arg1: double): double
                public crossingsFor(arg0: double, arg1: double): int
                public accumulateCrossings(arg0: sun.awt.geom.Crossings): boolean
                public enlarge(arg0: java.awt.geom.Rectangle2D): void
                public getSubCurve(arg0: double, arg1: double): sun.awt.geom.Curve
                public getReversedCurve(): sun.awt.geom.Curve
                public getSubCurve(arg0: double, arg1: double, arg2: int): sun.awt.geom.Curve
                public compareTo(arg0: sun.awt.geom.Curve, arg1: double[]): int
                public findIntersect(arg0: sun.awt.geom.Curve, arg1: double[], arg2: double, arg3: int, arg4: int, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double, arg13: double, arg14: double, arg15: double, arg16: double): boolean
                public refineTforY(arg0: double, arg1: double, arg2: double): double
                public fairlyClose(arg0: double, arg1: double): boolean
                public getSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class CurveLink {
                public constructor(arg0: sun.awt.geom.Curve, arg1: double, arg2: double, arg3: int)
                public absorb(arg0: sun.awt.geom.CurveLink): boolean
                public absorb(arg0: sun.awt.geom.Curve, arg1: double, arg2: double, arg3: int): boolean
                public isEmpty(): boolean
                public getCurve(): sun.awt.geom.Curve
                public getSubCurve(): sun.awt.geom.Curve
                public getMoveto(): sun.awt.geom.Curve
                public getXTop(): double
                public getYTop(): double
                public getXBot(): double
                public getYBot(): double
                public getX(): double
                public getEdgeTag(): int
                public setNext(arg0: sun.awt.geom.CurveLink): void
                public getNext(): sun.awt.geom.CurveLink
                public static class: java.lang.Class<any>
            }
            class Edge {
                public constructor(arg0: sun.awt.geom.Curve, arg1: int)
                public constructor(arg0: sun.awt.geom.Curve, arg1: int, arg2: int)
                public getCurve(): sun.awt.geom.Curve
                public getCurveTag(): int
                public getEdgeTag(): int
                public setEdgeTag(arg0: int): void
                public getEquivalence(): int
                public setEquivalence(arg0: int): void
                public compareTo(arg0: sun.awt.geom.Edge, arg1: double[]): int
                public record(arg0: double, arg1: int): void
                public isActiveFor(arg0: double, arg1: int): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class Order0 extends sun.awt.geom.Curve {
                public constructor(arg0: double, arg1: double)
                public getOrder(): int
                public getXTop(): double
                public getYTop(): double
                public getXBot(): double
                public getYBot(): double
                public getXMin(): double
                public getXMax(): double
                public getX0(): double
                public getY0(): double
                public getX1(): double
                public getY1(): double
                public XforY(arg0: double): double
                public TforY(arg0: double): double
                public XforT(arg0: double): double
                public YforT(arg0: double): double
                public dXforT(arg0: double, arg1: int): double
                public dYforT(arg0: double, arg1: int): double
                public nextVertical(arg0: double, arg1: double): double
                public crossingsFor(arg0: double, arg1: double): int
                public accumulateCrossings(arg0: sun.awt.geom.Crossings): boolean
                public enlarge(arg0: java.awt.geom.Rectangle2D): void
                public getSubCurve(arg0: double, arg1: double, arg2: int): sun.awt.geom.Curve
                public getReversedCurve(): sun.awt.geom.Curve
                public getSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class Order1 extends sun.awt.geom.Curve {
                public constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: int)
                public getOrder(): int
                public getXTop(): double
                public getYTop(): double
                public getXBot(): double
                public getYBot(): double
                public getXMin(): double
                public getXMax(): double
                public getX0(): double
                public getY0(): double
                public getX1(): double
                public getY1(): double
                public XforY(arg0: double): double
                public TforY(arg0: double): double
                public XforT(arg0: double): double
                public YforT(arg0: double): double
                public dXforT(arg0: double, arg1: int): double
                public dYforT(arg0: double, arg1: int): double
                public nextVertical(arg0: double, arg1: double): double
                public accumulateCrossings(arg0: sun.awt.geom.Crossings): boolean
                public enlarge(arg0: java.awt.geom.Rectangle2D): void
                public getSubCurve(arg0: double, arg1: double, arg2: int): sun.awt.geom.Curve
                public getReversedCurve(): sun.awt.geom.Curve
                public compareTo(arg0: sun.awt.geom.Curve, arg1: double[]): int
                public getSegment(arg0: double[]): int
                public static class: java.lang.Class<any>
            }
            class Order2 extends sun.awt.geom.Curve {
                public static insert(arg0: java.util.Vector, arg1: double[], arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: int): void
                public static addInstance(arg0: java.util.Vector, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: int): void
                public static getHorizontalParams(arg0: double, arg1: double, arg2: double, arg3: double[]): int
                public static split(arg0: double[], arg1: int, arg2: double): void
                public constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: int)
                public getOrder(): int
                public getXTop(): double
                public getYTop(): double
                public getXBot(): double
                public getYBot(): double
                public getXMin(): double
                public getXMax(): double
                public getX0(): double
                public getY0(): double
                public getCX0(): double
                public getCY0(): double
                public getX1(): double
                public getY1(): double
                public XforY(arg0: double): double
                public TforY(arg0: double): double
                public static TforY(arg0: double, arg1: double, arg2: double, arg3: double): double
                public XforT(arg0: double): double
                public YforT(arg0: double): double
                public dXforT(arg0: double, arg1: int): double
                public dYforT(arg0: double, arg1: int): double
                public nextVertical(arg0: double, arg1: double): double
                public enlarge(arg0: java.awt.geom.Rectangle2D): void
                public getSubCurve(arg0: double, arg1: double, arg2: int): sun.awt.geom.Curve
                public getReversedCurve(): sun.awt.geom.Curve
                public getSegment(arg0: double[]): int
                public controlPointString(): string
                public static class: java.lang.Class<any>
            }
            class Order3 extends sun.awt.geom.Curve {
                public static insert(arg0: java.util.Vector, arg1: double[], arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: int): void
                public static addInstance(arg0: java.util.Vector, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: int): void
                public static getHorizontalParams(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double[]): int
                public static split(arg0: double[], arg1: int, arg2: double): void
                public constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: int)
                public getOrder(): int
                public getXTop(): double
                public getYTop(): double
                public getXBot(): double
                public getYBot(): double
                public getXMin(): double
                public getXMax(): double
                public getX0(): double
                public getY0(): double
                public getCX0(): double
                public getCY0(): double
                public getCX1(): double
                public getCY1(): double
                public getX1(): double
                public getY1(): double
                public TforY(arg0: double): double
                public refine(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double): double
                public XforY(arg0: double): double
                public XforT(arg0: double): double
                public YforT(arg0: double): double
                public dXforT(arg0: double, arg1: int): double
                public dYforT(arg0: double, arg1: int): double
                public nextVertical(arg0: double, arg1: double): double
                public enlarge(arg0: java.awt.geom.Rectangle2D): void
                public getSubCurve(arg0: double, arg1: double, arg2: int): sun.awt.geom.Curve
                public getReversedCurve(): sun.awt.geom.Curve
                public getSegment(arg0: double[]): int
                public controlPointString(): string
                public static class: java.lang.Class<any>
            }
            interface PathConsumer2D {
                moveTo(arg0: float, arg1: float): void
                lineTo(arg0: float, arg1: float): void
                quadTo(arg0: float, arg1: float, arg2: float, arg3: float): void
                curveTo(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
                closePath(): void
                pathDone(): void
                getNativeConsumer(): long
            }
        }
        namespace im {
            class CompositionArea extends javax.swing.JPanel implements java.awt.event.InputMethodListener {
                public getInputMethodRequests(): java.awt.im.InputMethodRequests
                public paint(arg0: java.awt.Graphics): void
                public inputMethodTextChanged(arg0: java.awt.event.InputMethodEvent): void
                public caretPositionChanged(arg0: java.awt.event.InputMethodEvent): void
                public static class: java.lang.Class<any>
            }
            class CompositionAreaHandler implements java.awt.event.InputMethodListener , java.awt.im.InputMethodRequests {
                public inputMethodTextChanged(arg0: java.awt.event.InputMethodEvent): void
                public caretPositionChanged(arg0: java.awt.event.InputMethodEvent): void
                public getTextLocation(arg0: java.awt.font.TextHitInfo): java.awt.Rectangle
                public getLocationOffset(arg0: int, arg1: int): java.awt.font.TextHitInfo
                public getInsertPositionOffset(): int
                public getCommittedText(arg0: int, arg1: int, arg2: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                public getCommittedTextLength(): int
                public cancelLatestCommittedText(arg0: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                public getSelectedText(arg0: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                public static class: java.lang.Class<any>
            }
            class ExecutableInputMethodManager extends sun.awt.im.InputMethodManager implements java.lang.Runnable {
                public run(): void
                public notifyChangeRequest(arg0: java.awt.Component): void
                public notifyChangeRequestByHotKey(arg0: java.awt.Component): void
                public getTriggerMenuString(): string
                public static class: java.lang.Class<any>
            }
            class ExecutableInputMethodManager$$Lambda extends sun.awt.im.InputMethodManager implements java.lang.Runnable {
                public (): void
            }
            class InputContext extends java.awt.im.InputContext implements java.awt.event.ComponentListener , java.awt.event.WindowListener {
                protected constructor()
                public selectInputMethod(arg0: java.util.Locale): boolean
                public getLocale(): java.util.Locale
                public setCharacterSubsets(arg0: java.lang.Character$Subset[]): void
                public reconvert(): void
                public dispatchEvent(arg0: java.awt.AWTEvent): void
                public removeNotify(arg0: java.awt.Component): void
                public dispose(): void
                public getInputMethodControlObject(): java.lang.Object
                public setCompositionEnabled(arg0: boolean): void
                public isCompositionEnabled(): boolean
                public getInputMethodInfo(): string
                public disableNativeIM(): void
                public endComposition(): void
                public componentResized(arg0: java.awt.event.ComponentEvent): void
                public componentMoved(arg0: java.awt.event.ComponentEvent): void
                public componentShown(arg0: java.awt.event.ComponentEvent): void
                public componentHidden(arg0: java.awt.event.ComponentEvent): void
                public windowOpened(arg0: java.awt.event.WindowEvent): void
                public windowClosing(arg0: java.awt.event.WindowEvent): void
                public windowClosed(arg0: java.awt.event.WindowEvent): void
                public windowIconified(arg0: java.awt.event.WindowEvent): void
                public windowDeiconified(arg0: java.awt.event.WindowEvent): void
                public windowActivated(arg0: java.awt.event.WindowEvent): void
                public windowDeactivated(arg0: java.awt.event.WindowEvent): void
                public static class: java.lang.Class<any>
            }
            abstract class InputMethodAdapter implements java.awt.im.spi.InputMethod {
                public constructor()
                protected getClientComponent(): java.awt.Component
                protected haveActiveClient(): boolean
                protected setAWTFocussedComponent(arg0: java.awt.Component): void
                protected supportsBelowTheSpot(): boolean
                protected stopListening(): void
                public notifyClientWindowChange(arg0: java.awt.Rectangle): void
                public reconvert(): void
                public disableInputMethod(): void
                public getNativeInputMethodInfo(): string
                public static class: java.lang.Class<any>
            }
            class InputMethodContext extends sun.awt.im.InputContext implements java.awt.im.spi.InputMethodContext {
                public constructor()
                public dispatchInputMethodEvent(arg0: int, arg1: java.text.AttributedCharacterIterator, arg2: int, arg3: java.awt.font.TextHitInfo, arg4: java.awt.font.TextHitInfo): void
                public dispatchEvent(arg0: java.awt.AWTEvent): void
                public getTextLocation(arg0: java.awt.font.TextHitInfo): java.awt.Rectangle
                public getLocationOffset(arg0: int, arg1: int): java.awt.font.TextHitInfo
                public getInsertPositionOffset(): int
                public getCommittedText(arg0: int, arg1: int, arg2: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                public getCommittedTextLength(): int
                public cancelLatestCommittedText(arg0: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                public getSelectedText(arg0: java.text.AttributedCharacterIterator$Attribute[]): java.text.AttributedCharacterIterator
                public createInputMethodWindow(arg0: java.lang.String | string, arg1: boolean): java.awt.Window
                public createInputMethodJFrame(arg0: java.lang.String | string, arg1: boolean): javax.swing.JFrame
                public enableClientWindowNotification(arg0: java.awt.im.spi.InputMethod, arg1: boolean): void
                public static class: java.lang.Class<any>
            }
            class InputMethodJFrame extends javax.swing.JFrame implements sun.awt.im.InputMethodWindow {
                public constructor(arg0: java.lang.String | string, arg1: sun.awt.im.InputContext)
                public setInputContext(arg0: sun.awt.im.InputContext): void
                public getInputContext(): java.awt.im.InputContext
                public static class: java.lang.Class<any>
            }
            class InputMethodJFrame$$Lambda extends javax.swing.JFrame implements sun.awt.im.InputMethodWindow {
                public constructor(arg0: java.lang.String | string, arg1: sun.awt.im.InputContext)
            }
            class InputMethodLocator {
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public static class: java.lang.Class<any>
            }
            abstract class InputMethodManager {
                public constructor()
                public static getInstance(): sun.awt.im.InputMethodManager
                public getTriggerMenuString(): string
                public notifyChangeRequest(arg0: java.awt.Component): void
                public notifyChangeRequestByHotKey(arg0: java.awt.Component): void
                public static class: java.lang.Class<any>
            }
            abstract class InputMethodPopupMenu implements java.awt.event.ActionListener {
                public actionPerformed(arg0: java.awt.event.ActionEvent): void
                public static class: java.lang.Class<any>
            }
            interface InputMethodWindow {
                setInputContext(arg0: sun.awt.im.InputContext): void
            }
            interface InputMethodWindow$$Lambda {
                (arg0: sun.awt.im.InputContext): void
            }
            class SimpleInputMethodWindow extends java.awt.Frame implements sun.awt.im.InputMethodWindow {
                public constructor(arg0: java.lang.String | string, arg1: sun.awt.im.InputContext)
                public setInputContext(arg0: sun.awt.im.InputContext): void
                public getInputContext(): java.awt.im.InputContext
                public static class: java.lang.Class<any>
            }
            class SimpleInputMethodWindow$$Lambda extends java.awt.Frame implements sun.awt.im.InputMethodWindow {
                public constructor(arg0: java.lang.String | string, arg1: sun.awt.im.InputContext)
            }
        }
        namespace image {
            class BadDepthException extends java.lang.Exception {
                public constructor()
                public static class: java.lang.Class<any>
            }
            class BufImgSurfaceData extends sun.java2d.SurfaceData {
                public static createData(arg0: java.awt.image.BufferedImage): sun.java2d.SurfaceData
                public static createData(arg0: java.awt.image.Raster, arg1: java.awt.image.ColorModel): sun.java2d.SurfaceData
                public static createDataIC(arg0: java.awt.image.BufferedImage, arg1: sun.java2d.loops.SurfaceType): sun.java2d.SurfaceData
                public static createDataSC(arg0: java.awt.image.BufferedImage, arg1: sun.java2d.loops.SurfaceType, arg2: java.awt.image.IndexColorModel): sun.java2d.SurfaceData
                public static createDataBC(arg0: java.awt.image.BufferedImage, arg1: sun.java2d.loops.SurfaceType, arg2: int): sun.java2d.SurfaceData
                public static createDataBP(arg0: java.awt.image.BufferedImage, arg1: sun.java2d.loops.SurfaceType): sun.java2d.SurfaceData
                public getRenderLoops(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): sun.java2d.loops.RenderLoops
                public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
                protected initRaster(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: java.awt.image.IndexColorModel): void
                public constructor(arg0: java.awt.image.DataBuffer, arg1: java.awt.image.BufferedImage, arg2: sun.java2d.loops.SurfaceType)
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: java.awt.image.ColorModel)
                public initSolidLoops(): void
                public static getSolidLoops(arg0: sun.java2d.loops.SurfaceType): sun.java2d.loops.RenderLoops
                public getReplacement(): sun.java2d.SurfaceData
                public getDeviceConfiguration(): java.awt.GraphicsConfiguration
                public getBounds(): java.awt.Rectangle
                protected checkCustomComposite(): void
                public getDestination(): java.lang.Object
                public static class: java.lang.Class<any>
            }
            class BufImgSurfaceManager extends sun.awt.image.SurfaceManager {
                protected bImg: java.awt.image.BufferedImage
                protected sdDefault: sun.java2d.SurfaceData
                public constructor(arg0: java.awt.image.BufferedImage)
                public getPrimarySurfaceData(): sun.java2d.SurfaceData
                public restoreContents(): sun.java2d.SurfaceData
                public static class: java.lang.Class<any>
            }
            class BufImgVolatileSurfaceManager extends sun.awt.image.VolatileSurfaceManager {
                public constructor(arg0: sun.awt.image.SunVolatileImage | sun.awt.image.SunVolatileImage$$Lambda, arg1: java.lang.Object)
                protected isAccelerationEnabled(): boolean
                protected initAcceleratedSurface(): sun.java2d.SurfaceData
                public static class: java.lang.Class<any>
            }
            class BufferedImageDevice extends java.awt.GraphicsDevice {
                public constructor(arg0: sun.awt.image.BufferedImageGraphicsConfig)
                public getType(): int
                public getIDstring(): string
                public getConfigurations(): java.awt.GraphicsConfiguration[]
                public getDefaultConfiguration(): java.awt.GraphicsConfiguration
                public static class: java.lang.Class<any>
            }
            class BufferedImageGraphicsConfig extends java.awt.GraphicsConfiguration {
                public static getConfig(arg0: java.awt.image.BufferedImage): sun.awt.image.BufferedImageGraphicsConfig
                public constructor(arg0: java.awt.image.BufferedImage, arg1: java.awt.Component)
                public getDevice(): java.awt.GraphicsDevice
                public createCompatibleImage(arg0: int, arg1: int): java.awt.image.BufferedImage
                public getColorModel(): java.awt.image.ColorModel
                public getColorModel(arg0: int): java.awt.image.ColorModel
                public getDefaultTransform(): java.awt.geom.AffineTransform
                public getNormalizingTransform(): java.awt.geom.AffineTransform
                public getBounds(): java.awt.Rectangle
                public static class: java.lang.Class<any>
            }
            class ByteArrayImageSource extends sun.awt.image.InputStreamImageSource {
                public constructor(arg0: byte[])
                public constructor(arg0: byte[], arg1: int, arg2: int)
                protected getDecoder(): sun.awt.image.ImageDecoder
                public static class: java.lang.Class<any>
            }
            class ByteBandedRaster extends sun.awt.image.SunWritableRaster {
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.ByteBandedRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): byte[][]
                public getDataStorage(arg0: int): byte[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): byte[]
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): byte[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): void
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class ByteComponentRaster extends sun.awt.image.SunWritableRaster {
                protected bandOffset: int
                protected dataOffsets: int[]
                protected scanlineStride: int
                protected pixelStride: int
                protected data: byte[]
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.ByteComponentRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): byte[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): byte[]
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): byte[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): void
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                protected verify(): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class ByteInterleavedRaster extends sun.awt.image.ByteComponentRaster {
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.ByteInterleavedRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): byte[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): byte[]
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): byte[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): void
                public getSample(arg0: int, arg1: int, arg2: int): int
                public setSample(arg0: int, arg1: int, arg2: int, arg3: int): void
                public getSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[]): int[]
                public setSamples(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int[]): void
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[]): int[]
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[]): void
                public setRect(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class BytePackedRaster extends sun.awt.image.SunWritableRaster {
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.BytePackedRaster)
                public getDataBitOffset(): int
                public getScanlineStride(): int
                public getPixelBitStride(): int
                public getDataStorage(): byte[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getPixelData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): byte[]
                public getByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): byte[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setRect(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: byte[]): void
                public putByteData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: byte[]): void
                public getPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[]): int[]
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int[]): void
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class DataBufferNative extends java.awt.image.DataBuffer {
                protected surfaceData: sun.java2d.SurfaceData
                protected width: int
                public constructor(arg0: sun.java2d.SurfaceData, arg1: int, arg2: int, arg3: int)
                protected getElem(arg0: int, arg1: int, arg2: sun.java2d.SurfaceData): int
                public getElem(arg0: int, arg1: int): int
                protected setElem(arg0: int, arg1: int, arg2: int, arg3: sun.java2d.SurfaceData): void
                public setElem(arg0: int, arg1: int, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class FileImageSource extends sun.awt.image.InputStreamImageSource {
                public constructor(arg0: java.lang.String | string)
                protected getDecoder(): sun.awt.image.ImageDecoder
                public static class: java.lang.Class<any>
            }
            class GifImageDecoder extends sun.awt.image.ImageDecoder {
                public constructor(arg0: sun.awt.image.InputStreamImageSource | sun.awt.image.InputStreamImageSource$$Lambda, arg1: java.io.InputStream)
                public produceImage(): void
                public static grow_colormap(arg0: byte[], arg1: int): byte[]
                public static class: java.lang.Class<any>
            }
            class ImageAccessException extends java.lang.Exception {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class ImageCache {
                public static getInstance(): sun.awt.image.ImageCache
                public flush(): void
                public getImage(arg0: sun.awt.image.ImageCache$PixelsKey): java.awt.Image
                public setImage(arg0: sun.awt.image.ImageCache$PixelsKey, arg1: java.awt.Image): void
                public static class: java.lang.Class<any>
            }
            class ImageConsumerQueue {
                public toString(): string
                public static class: java.lang.Class<any>
            }
            abstract class ImageDecoder {
                protected aborted: boolean
                protected finished: boolean
                public constructor(arg0: sun.awt.image.InputStreamImageSource | sun.awt.image.InputStreamImageSource$$Lambda, arg1: java.io.InputStream)
                public isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                public removeConsumer(arg0: java.awt.image.ImageConsumer): void
                protected nextConsumer(arg0: sun.awt.image.ImageConsumerQueue): sun.awt.image.ImageConsumerQueue
                protected setDimensions(arg0: int, arg1: int): int
                protected setProperties(arg0: java.util.Hashtable): int
                protected setColorModel(arg0: java.awt.image.ColorModel): int
                protected setHints(arg0: int): int
                protected headerComplete(): void
                protected setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): int
                protected setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): int
                protected imageComplete(arg0: int, arg1: boolean): int
                public produceImage(): void
                public abort(): void
                public close(): void
                public static class: java.lang.Class<any>
            }
            interface ImageFetchable {
                doFetch(): void
            }
            interface ImageFetchable$$Lambda {
                (): void
            }
            class ImageFetcher extends java.lang.Thread {
                public static add(arg0: sun.awt.image.ImageFetchable | sun.awt.image.ImageFetchable$$Lambda): boolean
                public static remove(arg0: sun.awt.image.ImageFetchable | sun.awt.image.ImageFetchable$$Lambda): void
                public static isFetcher(arg0: java.lang.Thread | java.lang.Thread$$Lambda): boolean
                public static amFetcher(): boolean
                public run(): void
                public static class: java.lang.Class<any>
            }
            class ImageFormatException extends java.lang.Exception {
                public constructor(arg0: java.lang.String | string)
                public static class: java.lang.Class<any>
            }
            class ImageRepresentation extends sun.awt.image.ImageWatched implements java.awt.image.ImageConsumer {
                protected cmodel: java.awt.image.ColorModel
                public constructor(arg0: sun.awt.image.ToolkitImage, arg1: java.awt.image.ColorModel, arg2: boolean)
                public reconstruct(arg0: int): void
                public setDimensions(arg0: int, arg1: int): void
                public getWidth(): int
                public getHeight(): int
                protected createImage(arg0: java.awt.image.ColorModel, arg1: java.awt.image.WritableRaster, arg2: boolean, arg3: java.util.Hashtable): java.awt.image.BufferedImage
                public setProperties(arg0: java.util.Hashtable<any, any>): void
                public setColorModel(arg0: java.awt.image.ColorModel): void
                public setHints(arg0: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: byte[], arg6: int, arg7: int): void
                public setPixels(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.image.ColorModel, arg5: int[], arg6: int, arg7: int): void
                public getOpaqueRGBImage(): java.awt.image.BufferedImage
                public imageComplete(arg0: int): void
                public notifyWatcherListEmpty(): void
                public prepare(arg0: java.awt.image.ImageObserver): boolean
                public check(arg0: java.awt.image.ImageObserver): int
                public drawToBufImage(arg0: java.awt.Graphics, arg1: sun.awt.image.ToolkitImage, arg2: int, arg3: int, arg4: java.awt.Color, arg5: java.awt.image.ImageObserver): boolean
                public drawToBufImage(arg0: java.awt.Graphics, arg1: sun.awt.image.ToolkitImage, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color, arg7: java.awt.image.ImageObserver): boolean
                public drawToBufImage(arg0: java.awt.Graphics, arg1: sun.awt.image.ToolkitImage, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: java.awt.Color, arg11: java.awt.image.ImageObserver): boolean
                public drawToBufImage(arg0: java.awt.Graphics, arg1: sun.awt.image.ToolkitImage, arg2: java.awt.geom.AffineTransform, arg3: java.awt.image.ImageObserver): boolean
                public setAccelerationPriority(arg0: float): void
                public static class: java.lang.Class<any>
            }
            abstract class ImageWatched {
                public static endlink: sun.awt.image.ImageWatched$Link
                public watcherList: sun.awt.image.ImageWatched$Link
                public constructor()
                public addWatcher(arg0: java.awt.image.ImageObserver): void
                public isWatcher(arg0: java.awt.image.ImageObserver): boolean
                public removeWatcher(arg0: java.awt.image.ImageObserver): void
                public isWatcherListEmpty(): boolean
                public newInfo(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
                protected notifyWatcherListEmpty(): void
                public static class: java.lang.Class<any>
            }
            class ImagingLib {
                public constructor()
                public static transformBI(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage, arg2: double[], arg3: int): int
                public static transformRaster(arg0: java.awt.image.Raster, arg1: java.awt.image.Raster, arg2: double[], arg3: int): int
                public static convolveBI(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.Kernel, arg3: int): int
                public static convolveRaster(arg0: java.awt.image.Raster, arg1: java.awt.image.Raster, arg2: java.awt.image.Kernel, arg3: int): int
                public static lookupByteBI(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage, arg2: byte[][]): int
                public static lookupByteRaster(arg0: java.awt.image.Raster, arg1: java.awt.image.Raster, arg2: byte[][]): int
                public static filter(arg0: java.awt.image.RasterOp, arg1: java.awt.image.Raster, arg2: java.awt.image.WritableRaster): java.awt.image.WritableRaster
                public static filter(arg0: java.awt.image.BufferedImageOp, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.BufferedImage): java.awt.image.BufferedImage
                public static class: java.lang.Class<any>
            }
            abstract class InputStreamImageSource implements java.awt.image.ImageProducer , sun.awt.image.ImageFetchable {
                public constructor()
                public addConsumer(arg0: java.awt.image.ImageConsumer): void
                public isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                public removeConsumer(arg0: java.awt.image.ImageConsumer): void
                public startProduction(arg0: java.awt.image.ImageConsumer): void
                public requestTopDownLeftRightResend(arg0: java.awt.image.ImageConsumer): void
                protected getDecoder(): sun.awt.image.ImageDecoder
                protected decoderForType(arg0: java.io.InputStream, arg1: java.lang.String | string): sun.awt.image.ImageDecoder
                protected getDecoder(arg0: java.io.InputStream): sun.awt.image.ImageDecoder
                public doFetch(): void
                public static class: java.lang.Class<any>
            }
            abstract class InputStreamImageSource$$Lambda implements java.awt.image.ImageProducer , sun.awt.image.ImageFetchable {
                public constructor()
            }
            class IntegerComponentRaster extends sun.awt.image.SunWritableRaster {
                protected bandOffset: int
                protected dataOffsets: int[]
                protected scanlineStride: int
                protected pixelStride: int
                protected data: int[]
                protected numDataElems: int
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.IntegerComponentRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): int[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                protected verify(): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class IntegerInterleavedRaster extends sun.awt.image.IntegerComponentRaster {
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.IntegerInterleavedRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): int[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class JPEGImageDecoder extends sun.awt.image.ImageDecoder {
                public constructor(arg0: sun.awt.image.InputStreamImageSource | sun.awt.image.InputStreamImageSource$$Lambda, arg1: java.io.InputStream)
                public sendHeaderInfo(arg0: int, arg1: int, arg2: boolean, arg3: boolean, arg4: boolean): boolean
                public sendPixels(arg0: int[], arg1: int): boolean
                public sendPixels(arg0: byte[], arg1: int): boolean
                public produceImage(): void
                public static class: java.lang.Class<any>
            }
            class MultiResolutionCachedImage extends sun.awt.image.AbstractMultiResolutionImage {
                public constructor(arg0: int, arg1: int, arg2: java.util.function$.BiFunction<java.lang.Integer, java.lang.Integer, java.awt.Image>)
                public constructor(arg0: int, arg1: int, arg2: java.awt.geom.Dimension2D[], arg3: java.util.function$.BiFunction<java.lang.Integer, java.lang.Integer, java.awt.Image>)
                public getResolutionVariant(arg0: int, arg1: int): java.awt.Image
                public getResolutionVariants(): java.util.List<java.awt.Image>
                public map(arg0: java.util.function$.Function<java.awt.Image, java.awt.Image>): sun.awt.image.MultiResolutionCachedImage
                public getWidth(arg0: java.awt.image.ImageObserver): int
                public getHeight(arg0: java.awt.image.ImageObserver): int
                public getProperty(arg0: java.lang.String | string, arg1: java.awt.image.ImageObserver): java.lang.Object
                protected getBaseImage(): java.awt.Image
                public static class: java.lang.Class<any>
            }
            class MultiResolutionToolkitImage extends sun.awt.image.ToolkitImage implements sun.awt.image.MultiResolutionImage {
                public constructor(arg0: java.awt.Image, arg1: java.awt.Image)
                public getResolutionVariant(arg0: int, arg1: int): java.awt.Image
                public getResolutionVariant(): java.awt.Image
                public getResolutionVariants(): java.util.List<java.awt.Image>
                public static getResolutionVariantObserver(arg0: java.awt.Image, arg1: java.awt.image.ImageObserver, arg2: int, arg3: int, arg4: int, arg5: int): java.awt.image.ImageObserver
                public static getResolutionVariantObserver(arg0: java.awt.Image, arg1: java.awt.image.ImageObserver, arg2: int, arg3: int, arg4: int, arg5: int, arg6: boolean): java.awt.image.ImageObserver
                public static class: java.lang.Class<any>
            }
            class NativeLibLoader {
                public static class: java.lang.Class<any>
            }
            class OffScreenImage extends java.awt.image.BufferedImage {
                protected c: java.awt.Component
                public constructor(arg0: java.awt.Component, arg1: java.awt.image.ColorModel, arg2: java.awt.image.WritableRaster, arg3: boolean)
                public getGraphics(): java.awt.Graphics
                public createGraphics(): java.awt.Graphics2D
                public getSource(): java.awt.image.ImageProducer
                public static class: java.lang.Class<any>
            }
            class OffScreenImageSource implements java.awt.image.ImageProducer {
                public constructor(arg0: java.awt.image.BufferedImage, arg1: java.util.Hashtable)
                public constructor(arg0: java.awt.image.BufferedImage)
                public addConsumer(arg0: java.awt.image.ImageConsumer): void
                public isConsumer(arg0: java.awt.image.ImageConsumer): boolean
                public removeConsumer(arg0: java.awt.image.ImageConsumer): void
                public startProduction(arg0: java.awt.image.ImageConsumer): void
                public requestTopDownLeftRightResend(arg0: java.awt.image.ImageConsumer): void
                public static class: java.lang.Class<any>
            }
            class PNGImageDecoder extends sun.awt.image.ImageDecoder {
                protected handleChunk(arg0: int, arg1: byte[], arg2: int, arg3: int): boolean
                public produceImage(): void
                public constructor(arg0: sun.awt.image.InputStreamImageSource | sun.awt.image.InputStreamImageSource$$Lambda, arg1: java.io.InputStream)
                public static getCheckCRC(): boolean
                public static setCheckCRC(arg0: boolean): void
                protected wrc(arg0: int): void
                protected wrk(arg0: int): void
                public print(): void
                public static class: java.lang.Class<any>
            }
            class PixelConverter {
                public static instance: sun.awt.image.PixelConverter
                protected alphaMask: int
                protected constructor()
                public rgbToPixel(arg0: int, arg1: java.awt.image.ColorModel): int
                public pixelToRgb(arg0: int, arg1: java.awt.image.ColorModel): int
                public getAlphaMask(): int
                public static class: java.lang.Class<any>
            }
            class ShortBandedRaster extends sun.awt.image.SunWritableRaster {
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.ShortBandedRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): short[][]
                public getDataStorage(arg0: int): short[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: short[]): short[]
                public getShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: short[]): short[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: short[]): void
                public putShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: short[]): void
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class ShortComponentRaster extends sun.awt.image.SunWritableRaster {
                protected bandOffset: int
                protected dataOffsets: int[]
                protected scanlineStride: int
                protected pixelStride: int
                protected data: short[]
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.ShortComponentRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): short[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: short[]): short[]
                public getShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: short[]): short[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: short[]): void
                public putShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: short[]): void
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                protected verify(): void
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class ShortInterleavedRaster extends sun.awt.image.ShortComponentRaster {
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: sun.awt.image.ShortInterleavedRaster)
                public getDataOffsets(): int[]
                public getDataOffset(arg0: int): int
                public getScanlineStride(): int
                public getPixelStride(): int
                public getDataStorage(): short[]
                public getDataElements(arg0: int, arg1: int, arg2: java.lang.Object): java.lang.Object
                public getDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): java.lang.Object
                public getShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: short[]): short[]
                public getShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: short[]): short[]
                public setDataElements(arg0: int, arg1: int, arg2: java.lang.Object): void
                public setDataElements(arg0: int, arg1: int, arg2: java.awt.image.Raster): void
                public setDataElements(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.lang.Object): void
                public putShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: short[]): void
                public putShortData(arg0: int, arg1: int, arg2: int, arg3: int, arg4: short[]): void
                public createChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.Raster
                public createWritableChild(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int[]): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(arg0: int, arg1: int): java.awt.image.WritableRaster
                public createCompatibleWritableRaster(): java.awt.image.WritableRaster
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class SunVolatileImage extends java.awt.image.VolatileImage implements sun.java2d.DestSurfaceProvider {
                protected volSurfaceManager: sun.awt.image.VolatileSurfaceManager
                protected comp: java.awt.Component
                protected constructor(arg0: java.awt.Component, arg1: java.awt.GraphicsConfiguration, arg2: int, arg3: int, arg4: java.lang.Object, arg5: int, arg6: java.awt.ImageCapabilities, arg7: int)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: int)
                public constructor(arg0: java.awt.Component, arg1: int, arg2: int, arg3: java.lang.Object)
                public constructor(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: int, arg4: java.awt.ImageCapabilities)
                public getWidth(): int
                public getHeight(): int
                public getGraphicsConfig(): java.awt.GraphicsConfiguration
                public updateGraphicsConfig(): void
                public getComponent(): java.awt.Component
                public getForcedAccelSurfaceType(): int
                protected createSurfaceManager(arg0: java.lang.Object, arg1: java.awt.ImageCapabilities): sun.awt.image.VolatileSurfaceManager
                public createGraphics(): java.awt.Graphics2D
                public getProperty(arg0: java.lang.String | string, arg1: java.awt.image.ImageObserver): java.lang.Object
                public getWidth(arg0: java.awt.image.ImageObserver): int
                public getHeight(arg0: java.awt.image.ImageObserver): int
                public getBackupImage(): java.awt.image.BufferedImage
                public getSnapshot(): java.awt.image.BufferedImage
                public validate(arg0: java.awt.GraphicsConfiguration): int
                public contentsLost(): boolean
                public getCapabilities(): java.awt.ImageCapabilities
                public getDestSurface(): sun.java2d.Surface
                public static class: java.lang.Class<any>
            }
            class SunVolatileImage$$Lambda extends java.awt.image.VolatileImage implements sun.java2d.DestSurfaceProvider {
                protected volSurfaceManager: sun.awt.image.VolatileSurfaceManager
            }
            class SunWritableRaster extends java.awt.image.WritableRaster {
                public static setDataStealer(arg0: sun.awt.image.SunWritableRaster$DataStealer): void
                public static stealData(arg0: java.awt.image.DataBufferByte, arg1: int): byte[]
                public static stealData(arg0: java.awt.image.DataBufferUShort, arg1: int): short[]
                public static stealData(arg0: java.awt.image.DataBufferInt, arg1: int): int[]
                public static stealTrackable(arg0: java.awt.image.DataBuffer): sun.java2d.StateTrackableDelegate
                public static setTrackable(arg0: java.awt.image.DataBuffer, arg1: sun.java2d.StateTrackableDelegate): void
                public static makeTrackable(arg0: java.awt.image.DataBuffer): void
                public static markDirty(arg0: java.awt.image.DataBuffer): void
                public static markDirty(arg0: java.awt.image.WritableRaster): void
                public static markDirty(arg0: java.awt.Image): void
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Point)
                public constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer, arg2: java.awt.Rectangle, arg3: java.awt.Point, arg4: java.awt.image.WritableRaster)
                public markDirty(): void
                public static class: java.lang.Class<any>
            }
            abstract class SurfaceManager {
                public constructor()
                public static setImageAccessor(arg0: sun.awt.image.SurfaceManager$ImageAccessor): void
                public static getManager(arg0: java.awt.Image): sun.awt.image.SurfaceManager
                public static setManager(arg0: java.awt.Image, arg1: sun.awt.image.SurfaceManager): void
                public getCacheData(arg0: java.lang.Object): java.lang.Object
                public setCacheData(arg0: java.lang.Object, arg1: java.lang.Object): void
                public getPrimarySurfaceData(): sun.java2d.SurfaceData
                public restoreContents(): sun.java2d.SurfaceData
                public acceleratedSurfaceLost(): void
                public getCapabilities(arg0: java.awt.GraphicsConfiguration): java.awt.ImageCapabilities
                public flush(): void
                public setAccelerationPriority(arg0: float): void
                public static getImageScale(arg0: java.awt.Image): int
                public static class: java.lang.Class<any>
            }
            class ToolkitImage extends java.awt.Image {
                protected constructor()
                public constructor(arg0: java.awt.image.ImageProducer)
                public getSource(): java.awt.image.ImageProducer
                public getWidth(): int
                public getWidth(arg0: java.awt.image.ImageObserver): int
                public getHeight(): int
                public getHeight(arg0: java.awt.image.ImageObserver): int
                public getProperty(arg0: java.lang.String | string, arg1: java.awt.image.ImageObserver): java.lang.Object
                public hasError(): boolean
                public check(arg0: java.awt.image.ImageObserver): int
                public preload(arg0: java.awt.image.ImageObserver): void
                public flush(): void
                protected makeImageRep(): sun.awt.image.ImageRepresentation
                public getImageRep(): sun.awt.image.ImageRepresentation
                public getGraphics(): java.awt.Graphics
                public getColorModel(): java.awt.image.ColorModel
                public getBufferedImage(): java.awt.image.BufferedImage
                public setAccelerationPriority(arg0: float): void
                public static class: java.lang.Class<any>
            }
            class URLImageSource extends sun.awt.image.InputStreamImageSource {
                public constructor(arg0: java.net.URL)
                public constructor(arg0: java.lang.String | string)
                public constructor(arg0: java.net.URL, arg1: java.net.URLConnection)
                public constructor(arg0: java.net.URLConnection)
                protected getDecoder(): sun.awt.image.ImageDecoder
                public static class: java.lang.Class<any>
            }
            abstract class VSyncedBSManager {
                public constructor()
                public static vsyncAllowed(arg0: java.awt.image.BufferStrategy): boolean
                public static releaseVsync(arg0: java.awt.image.BufferStrategy): void
                public static class: java.lang.Class<any>
            }
            abstract class VolatileSurfaceManager extends sun.awt.image.SurfaceManager implements sun.awt.DisplayChangedListener {
                protected vImg: sun.awt.image.SunVolatileImage
                protected sdAccel: sun.java2d.SurfaceData
                protected sdBackup: sun.java2d.SurfaceData
                protected sdCurrent: sun.java2d.SurfaceData
                protected sdPrevious: sun.java2d.SurfaceData
                protected lostSurface: boolean
                protected context: java.lang.Object
                protected constructor(arg0: sun.awt.image.SunVolatileImage | sun.awt.image.SunVolatileImage$$Lambda, arg1: java.lang.Object)
                public initialize(): void
                public getPrimarySurfaceData(): sun.java2d.SurfaceData
                protected isAccelerationEnabled(): boolean
                public validate(arg0: java.awt.GraphicsConfiguration): int
                public contentsLost(): boolean
                protected initAcceleratedSurface(): sun.java2d.SurfaceData
                protected getBackupSurface(): sun.java2d.SurfaceData
                public initContents(): void
                public restoreContents(): sun.java2d.SurfaceData
                public acceleratedSurfaceLost(): void
                protected restoreAcceleratedSurface(): void
                public displayChanged(): void
                public paletteChanged(): void
                protected isConfigValid(arg0: java.awt.GraphicsConfiguration): boolean
                public getCapabilities(arg0: java.awt.GraphicsConfiguration): java.awt.ImageCapabilities
                public flush(): void
                public static class: java.lang.Class<any>
            }
            class WritableRasterNative extends java.awt.image.WritableRaster {
                public static createNativeRaster(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer): sun.awt.image.WritableRasterNative
                protected constructor(arg0: java.awt.image.SampleModel, arg1: java.awt.image.DataBuffer)
                public static createNativeRaster(arg0: java.awt.image.ColorModel, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int): sun.awt.image.WritableRasterNative
                public static class: java.lang.Class<any>
            }
            class XbmImageDecoder extends sun.awt.image.ImageDecoder {
                public constructor(arg0: sun.awt.image.InputStreamImageSource | sun.awt.image.InputStreamImageSource$$Lambda, arg1: java.io.InputStream)
                public produceImage(): void
                public static class: java.lang.Class<any>
            }
        }
        namespace shell {
            class DefaultShellFolder extends sun.awt.shell.ShellFolder {
                protected writeReplace(): java.lang.Object
                public listFiles(): java.io.File[]
                public isLink(): boolean
                public isHidden(): boolean
                public getLinkLocation(): sun.awt.shell.ShellFolder
                public getDisplayName(): string
                public getFolderType(): string
                public getExecutableType(): string
                public static class: java.lang.Class<any>
            }
            abstract class ShellFolder extends java.io.File {
                protected parent: sun.awt.shell.ShellFolder
                public isFileSystem(): boolean
                protected writeReplace(): java.lang.Object
                public getParent(): string
                public getParentFile(): java.io.File
                public listFiles(): java.io.File[]
                public listFiles(arg0: boolean): java.io.File[]
                public isLink(): boolean
                public getLinkLocation(): sun.awt.shell.ShellFolder
                public getDisplayName(): string
                public getFolderType(): string
                public getExecutableType(): string
                public compareTo(arg0: java.io.File): int
                public getIcon(arg0: boolean): java.awt.Image
                public static getShellFolder(arg0: java.io.File): sun.awt.shell.ShellFolder
                public static get(arg0: java.lang.String | string): java.lang.Object
                public static isComputerNode(arg0: java.io.File): boolean
                public static isFileSystemRoot(arg0: java.io.File): boolean
                public static getNormalizedFile(arg0: java.io.File): java.io.File
                public static sort(arg0: java.util.List<java.io.File>): void
                public sortChildren(arg0: java.util.List<java.io.File>): void
                public isAbsolute(): boolean
                public getAbsoluteFile(): java.io.File
                public canRead(): boolean
                public canWrite(): boolean
                public exists(): boolean
                public isDirectory(): boolean
                public isFile(): boolean
                public lastModified(): long
                public length(): long
                public createNewFile(): boolean
                public delete(): boolean
                public deleteOnExit(): void
                public mkdir(): boolean
                public mkdirs(): boolean
                public renameTo(arg0: java.io.File): boolean
                public setLastModified(arg0: long): boolean
                public setReadOnly(): boolean
                public toString(): string
                public static getFolderColumns(arg0: java.io.File): sun.awt.shell.ShellFolderColumnInfo[]
                public getFolderColumns(): sun.awt.shell.ShellFolderColumnInfo[]
                public static getFolderColumnValue(arg0: java.io.File, arg1: int): java.lang.Object
                public getFolderColumnValue(arg0: int): java.lang.Object
                public static invoke<T>(arg0: java.util.concurrent.Callable<T> | java.util.concurrent.Callable$$Lambda<T>): T
                public static invoke<T, E extends java.lang.Throwable>(arg0: java.util.concurrent.Callable<T> | java.util.concurrent.Callable$$Lambda<T>, arg1: java.lang.Class<E>): T
                public compareTo(arg0: java.lang.Object): int
                public static class: java.lang.Class<any>
            }
            class ShellFolderColumnInfo {
                public constructor(arg0: java.lang.String | string, arg1: java.lang.Integer, arg2: java.lang.Integer, arg3: boolean, arg4: javax.swing.SortOrder, arg5: java.util.Comparator, arg6: boolean)
                public constructor(arg0: java.lang.String | string, arg1: java.lang.Integer, arg2: java.lang.Integer, arg3: boolean, arg4: javax.swing.SortOrder, arg5: java.util.Comparator)
                public constructor(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: boolean)
                public getTitle(): string
                public setTitle(arg0: java.lang.String | string): void
                public getWidth(): java.lang.Integer
                public setWidth(arg0: java.lang.Integer): void
                public getAlignment(): java.lang.Integer
                public setAlignment(arg0: java.lang.Integer): void
                public isVisible(): boolean
                public setVisible(arg0: boolean): void
                public getSortOrder(): javax.swing.SortOrder
                public setSortOrder(arg0: javax.swing.SortOrder): void
                public getComparator(): java.util.Comparator
                public setComparator(arg0: java.util.Comparator): void
                public isCompareByColumn(): boolean
                public setCompareByColumn(arg0: boolean): void
                public static class: java.lang.Class<any>
            }
            class ShellFolderManager {
                public createShellFolder(arg0: java.io.File): sun.awt.shell.ShellFolder
                public get(arg0: java.lang.String | string): java.lang.Object
                public isComputerNode(arg0: java.io.File): boolean
                public isFileSystemRoot(arg0: java.io.File): boolean
                protected createInvoker(): sun.awt.shell.ShellFolder$Invoker
                public static class: java.lang.Class<any>
            }
        }
        namespace util {
            class IdentityArrayList<E> extends java.util.AbstractList<E> implements java.util.List<E> , java.util.RandomAccess {
                public constructor(arg0: int)
                public constructor()
                public constructor(arg0: java.util.Collection<E>)
                public trimToSize(): void
                public ensureCapacity(arg0: int): void
                public size(): int
                public isEmpty(): boolean
                public contains(arg0: java.lang.Object): boolean
                public indexOf(arg0: java.lang.Object): int
                public lastIndexOf(arg0: java.lang.Object): int
                public toArray(): java.lang.Object[]
                public toArray<T>(arg0: T[]): T[]
                public get<T>(arg0: int): E
                public set<T>(arg0: int, arg1: E): E
                public add<T>(arg0: E): boolean
                public add<T>(arg0: int, arg1: E): void
                public remove<T>(arg0: int): E
                public remove<T>(arg0: java.lang.Object): boolean
                public clear<T>(): void
                public addAll<T>(arg0: java.util.Collection<E>): boolean
                public addAll<T>(arg0: int, arg1: java.util.Collection<E>): boolean
                protected removeRange<T>(arg0: int, arg1: int): void
                public static class: java.lang.Class<any>
            }
            class IdentityLinkedList<E> extends java.util.AbstractSequentialList<E> implements java.util.List<E> , java.util.Deque<E> {
                public constructor()
                public constructor(arg0: java.util.Collection<E>)
                public getFirst(): E
                public getLast(): E
                public removeFirst(): E
                public removeLast(): E
                public addFirst(arg0: E): void
                public addLast(arg0: E): void
                public contains(arg0: java.lang.Object): boolean
                public size(): int
                public add(arg0: E): boolean
                public remove(arg0: java.lang.Object): boolean
                public addAll(arg0: java.util.Collection<E>): boolean
                public addAll(arg0: int, arg1: java.util.Collection<E>): boolean
                public clear(): void
                public get(arg0: int): E
                public set(arg0: int, arg1: E): E
                public add(arg0: int, arg1: E): void
                public remove(arg0: int): E
                public indexOf(arg0: java.lang.Object): int
                public lastIndexOf(arg0: java.lang.Object): int
                public peek(): E
                public element(): E
                public poll(): E
                public remove(): E
                public offer(arg0: E): boolean
                public offerFirst(arg0: E): boolean
                public offerLast(arg0: E): boolean
                public peekFirst(): E
                public peekLast(): E
                public pollFirst(): E
                public pollLast(): E
                public push(arg0: E): void
                public pop(): E
                public removeFirstOccurrence(arg0: java.lang.Object): boolean
                public removeLastOccurrence(arg0: java.lang.Object): boolean
                public listIterator(arg0: int): java.util.ListIterator<E>
                public descendingIterator(): java.util.Iterator<E>
                public toArray(): java.lang.Object[]
                public toArray<T>(arg0: T[]): T[]
                public static class: java.lang.Class<any>
            }
        }
        class AWTAccessor {
            public static setComponentAccessor(arg0: sun.awt.AWTAccessor$ComponentAccessor): void
            public static getComponentAccessor(): sun.awt.AWTAccessor$ComponentAccessor
            public static setContainerAccessor(arg0: sun.awt.AWTAccessor$ContainerAccessor): void
            public static getContainerAccessor(): sun.awt.AWTAccessor$ContainerAccessor
            public static setWindowAccessor(arg0: sun.awt.AWTAccessor$WindowAccessor): void
            public static getWindowAccessor(): sun.awt.AWTAccessor$WindowAccessor
            public static setAWTEventAccessor(arg0: sun.awt.AWTAccessor$AWTEventAccessor): void
            public static getAWTEventAccessor(): sun.awt.AWTAccessor$AWTEventAccessor
            public static setInputEventAccessor(arg0: sun.awt.AWTAccessor$InputEventAccessor): void
            public static getInputEventAccessor(): sun.awt.AWTAccessor$InputEventAccessor
            public static setFrameAccessor(arg0: sun.awt.AWTAccessor$FrameAccessor): void
            public static getFrameAccessor(): sun.awt.AWTAccessor$FrameAccessor
            public static setKeyboardFocusManagerAccessor(arg0: sun.awt.AWTAccessor$KeyboardFocusManagerAccessor): void
            public static getKeyboardFocusManagerAccessor(): sun.awt.AWTAccessor$KeyboardFocusManagerAccessor
            public static setMenuComponentAccessor(arg0: sun.awt.AWTAccessor$MenuComponentAccessor): void
            public static getMenuComponentAccessor(): sun.awt.AWTAccessor$MenuComponentAccessor
            public static setEventQueueAccessor(arg0: sun.awt.AWTAccessor$EventQueueAccessor): void
            public static getEventQueueAccessor(): sun.awt.AWTAccessor$EventQueueAccessor
            public static setPopupMenuAccessor(arg0: sun.awt.AWTAccessor$PopupMenuAccessor): void
            public static getPopupMenuAccessor(): sun.awt.AWTAccessor$PopupMenuAccessor
            public static setFileDialogAccessor(arg0: sun.awt.AWTAccessor$FileDialogAccessor): void
            public static getFileDialogAccessor(): sun.awt.AWTAccessor$FileDialogAccessor
            public static setScrollPaneAdjustableAccessor(arg0: sun.awt.AWTAccessor$ScrollPaneAdjustableAccessor): void
            public static getScrollPaneAdjustableAccessor(): sun.awt.AWTAccessor$ScrollPaneAdjustableAccessor
            public static setCheckboxMenuItemAccessor(arg0: sun.awt.AWTAccessor$CheckboxMenuItemAccessor): void
            public static getCheckboxMenuItemAccessor(): sun.awt.AWTAccessor$CheckboxMenuItemAccessor
            public static setCursorAccessor(arg0: sun.awt.AWTAccessor$CursorAccessor): void
            public static getCursorAccessor(): sun.awt.AWTAccessor$CursorAccessor
            public static setMenuBarAccessor(arg0: sun.awt.AWTAccessor$MenuBarAccessor): void
            public static getMenuBarAccessor(): sun.awt.AWTAccessor$MenuBarAccessor
            public static setMenuItemAccessor(arg0: sun.awt.AWTAccessor$MenuItemAccessor): void
            public static getMenuItemAccessor(): sun.awt.AWTAccessor$MenuItemAccessor
            public static setMenuAccessor(arg0: sun.awt.AWTAccessor$MenuAccessor): void
            public static getMenuAccessor(): sun.awt.AWTAccessor$MenuAccessor
            public static setKeyEventAccessor(arg0: sun.awt.AWTAccessor$KeyEventAccessor): void
            public static getKeyEventAccessor(): sun.awt.AWTAccessor$KeyEventAccessor
            public static setClientPropertyKeyAccessor(arg0: sun.awt.AWTAccessor$ClientPropertyKeyAccessor): void
            public static getClientPropertyKeyAccessor(): sun.awt.AWTAccessor$ClientPropertyKeyAccessor
            public static setSystemTrayAccessor(arg0: sun.awt.AWTAccessor$SystemTrayAccessor): void
            public static getSystemTrayAccessor(): sun.awt.AWTAccessor$SystemTrayAccessor
            public static setTrayIconAccessor(arg0: sun.awt.AWTAccessor$TrayIconAccessor): void
            public static getTrayIconAccessor(): sun.awt.AWTAccessor$TrayIconAccessor
            public static setDefaultKeyboardFocusManagerAccessor(arg0: sun.awt.AWTAccessor$DefaultKeyboardFocusManagerAccessor): void
            public static getDefaultKeyboardFocusManagerAccessor(): sun.awt.AWTAccessor$DefaultKeyboardFocusManagerAccessor
            public static setSequencedEventAccessor(arg0: sun.awt.AWTAccessor$SequencedEventAccessor): void
            public static getSequencedEventAccessor(): sun.awt.AWTAccessor$SequencedEventAccessor
            public static setToolkitAccessor(arg0: sun.awt.AWTAccessor$ToolkitAccessor): void
            public static getToolkitAccessor(): sun.awt.AWTAccessor$ToolkitAccessor
            public static setInvocationEventAccessor(arg0: sun.awt.AWTAccessor$InvocationEventAccessor): void
            public static getInvocationEventAccessor(): sun.awt.AWTAccessor$InvocationEventAccessor
            public static getSystemColorAccessor(): sun.awt.AWTAccessor$SystemColorAccessor
            public static setSystemColorAccessor(arg0: sun.awt.AWTAccessor$SystemColorAccessor): void
            public static getAccessibleContextAccessor(): sun.awt.AWTAccessor$AccessibleContextAccessor
            public static setAccessibleContextAccessor(arg0: sun.awt.AWTAccessor$AccessibleContextAccessor): void
            public static class: java.lang.Class<any>
        }
        class AWTAutoShutdown implements java.lang.Runnable {
            public static getInstance(): sun.awt.AWTAutoShutdown
            public static notifyToolkitThreadBusy(): void
            public static notifyToolkitThreadFree(): void
            public notifyThreadBusy(arg0: java.lang.Thread | java.lang.Thread$$Lambda): void
            public notifyThreadFree(arg0: java.lang.Thread | java.lang.Thread$$Lambda): void
            public run(): void
            public static class: java.lang.Class<any>
        }
        class AWTAutoShutdown$$Lambda implements java.lang.Runnable {
            public static (): sun.awt.AWTAutoShutdown
        }
        class AWTSecurityManager extends java.lang.SecurityManager {
            public constructor()
            public getAppContext(): sun.awt.AppContext
            public static class: java.lang.Class<any>
        }
        class AppContext {
            public static EVENT_QUEUE_KEY: java.lang.Object
            public static EVENT_QUEUE_LOCK_KEY: java.lang.Object
            public static EVENT_QUEUE_COND_KEY: java.lang.Object
            public static DISPOSED_PROPERTY_NAME: string
            public static GUI_DISPOSED: string
            public static getAppContexts(): java.util.Set<sun.awt.AppContext>
            public isDisposed(): boolean
            public static getAppContext(): sun.awt.AppContext
            public static isMainContext(arg0: sun.awt.AppContext): boolean
            public dispose(): void
            public get(arg0: java.lang.Object): java.lang.Object
            public put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
            public remove(arg0: java.lang.Object): java.lang.Object
            public getThreadGroup(): java.lang.ThreadGroup
            public getContextClassLoader(): java.lang.ClassLoader
            public toString(): string
            public getPropertyChangeListeners(): java.beans.PropertyChangeListener[]
            public addPropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public getPropertyChangeListeners(arg0: java.lang.String | string): java.beans.PropertyChangeListener[]
            public static getSoftReferenceValue<T>(arg0: java.lang.Object, arg1: java.util.function$.Supplier<T> | java.util.function$.Supplier$$Lambda<T>): T
            public static class: java.lang.Class<any>
        }
        class CausedFocusEvent extends java.awt.event.FocusEvent {
            public getCause(): sun.awt.CausedFocusEvent$Cause
            public toString(): string
            public constructor(arg0: java.awt.Component, arg1: int, arg2: boolean, arg3: java.awt.Component, arg4: sun.awt.CausedFocusEvent$Cause)
            public static retarget(arg0: java.awt.event.FocusEvent, arg1: java.awt.Component): java.awt.event.FocusEvent
            public static class: java.lang.Class<any>
        }
        class CharsetString {
            public charsetChars: char[]
            public offset: int
            public length: int
            public fontDescriptor: sun.awt.FontDescriptor
            public constructor(arg0: char[], arg1: int, arg2: int, arg3: sun.awt.FontDescriptor)
            public static class: java.lang.Class<any>
        }
        interface ComponentFactory {
            createCanvas(arg0: java.awt.Canvas | java.awt.Canvas$$Lambda): java.awt.peer.CanvasPeer
            createPanel(arg0: java.awt.Panel | java.awt.Panel$$Lambda): java.awt.peer.PanelPeer
            createWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.peer.WindowPeer
            createFrame(arg0: java.awt.Frame): java.awt.peer.FramePeer
            createDialog(arg0: java.awt.Dialog): java.awt.peer.DialogPeer
            createButton(arg0: java.awt.Button | java.awt.Button$$Lambda): java.awt.peer.ButtonPeer
            createTextField(arg0: java.awt.TextField): java.awt.peer.TextFieldPeer
            createChoice(arg0: java.awt.Choice | java.awt.Choice$$Lambda): java.awt.peer.ChoicePeer
            createLabel(arg0: java.awt.Label | java.awt.Label$$Lambda): java.awt.peer.LabelPeer
            createList(arg0: java.awt.List | java.awt.List$$Lambda): java.awt.peer.ListPeer
            createCheckbox(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): java.awt.peer.CheckboxPeer
            createScrollbar(arg0: java.awt.Scrollbar | java.awt.Scrollbar$$Lambda): java.awt.peer.ScrollbarPeer
            createScrollPane(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda): java.awt.peer.ScrollPanePeer
            createTextArea(arg0: java.awt.TextArea): java.awt.peer.TextAreaPeer
            createFileDialog(arg0: java.awt.FileDialog): java.awt.peer.FileDialogPeer
            createMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): java.awt.peer.MenuBarPeer
            createMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): java.awt.peer.MenuPeer
            createPopupMenu(arg0: java.awt.PopupMenu): java.awt.peer.PopupMenuPeer
            createMenuItem(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): java.awt.peer.MenuItemPeer
            createCheckboxMenuItem(arg0: java.awt.CheckboxMenuItem | java.awt.CheckboxMenuItem$$Lambda): java.awt.peer.CheckboxMenuItemPeer
            createDragSourceContextPeer(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            getFontPeer(arg0: java.lang.String | string, arg1: int): java.awt.peer.FontPeer
            createRobot(arg0: java.awt.Robot, arg1: java.awt.GraphicsDevice): java.awt.peer.RobotPeer
            getDataTransferer(): sun.awt.datatransfer.DataTransferer
        }
        interface ConstrainableGraphics {
            constrain(arg0: int, arg1: int, arg2: int, arg3: int): void
        }
        interface ConstrainableGraphics$$Lambda {
            (arg0: int, arg1: int, arg2: int, arg3: int): void
        }
        abstract class CustomCursor extends java.awt.Cursor {
            protected image: java.awt.Image
            public constructor(arg0: java.awt.Image, arg1: java.awt.Point, arg2: java.lang.String | string)
            protected createNativeCursor(arg0: java.awt.Image, arg1: int[], arg2: int, arg3: int, arg4: int, arg5: int): void
            public static class: java.lang.Class<any>
        }
        class DebugSettings {
            public toString(): string
            public getBoolean(arg0: java.lang.String | string, arg1: boolean): boolean
            public getInt(arg0: java.lang.String | string, arg1: int): int
            public getString(arg0: java.lang.String | string, arg1: java.lang.String | string): string
            public static class: java.lang.Class<any>
        }
        interface DisplayChangedListener extends java.util.EventListener {
            displayChanged(): void
            paletteChanged(): void
        }
        abstract class EmbeddedFrame extends java.awt.Frame implements java.awt.KeyEventDispatcher , java.beans.PropertyChangeListener {
            protected static FORWARD: boolean
            protected static BACKWARD: boolean
            public supportsXEmbed(): boolean
            protected constructor(arg0: boolean)
            protected constructor()
            protected constructor(arg0: int)
            protected constructor(arg0: long)
            protected constructor(arg0: long, arg1: boolean)
            public getParent(): java.awt.Container
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            public registerListeners(): void
            public show(): void
            public hide(): void
            public dispatchKeyEvent(arg0: java.awt.event.KeyEvent): boolean
            public traverseIn(arg0: boolean): boolean
            protected traverseOut(arg0: boolean): boolean
            public setTitle(arg0: java.lang.String | string): void
            public setIconImage(arg0: java.awt.Image): void
            public setIconImages(arg0: java.util.List<java.awt.Image>): void
            public setMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): void
            public setResizable(arg0: boolean): void
            public remove(arg0: java.awt.MenuComponent): void
            public isResizable(): boolean
            public addNotify(): void
            public setCursorAllowed(arg0: boolean): void
            public isCursorAllowed(): boolean
            public getCursor(): java.awt.Cursor
            protected setPeer(arg0: java.awt.peer.ComponentPeer): void
            public synthesizeWindowActivation(arg0: boolean): void
            protected setLocationPrivate(arg0: int, arg1: int): void
            protected getLocationPrivate(): java.awt.Point
            protected setBoundsPrivate(arg0: int, arg1: int, arg2: int, arg3: int): void
            protected getBoundsPrivate(): java.awt.Rectangle
            public toFront(): void
            public toBack(): void
            public registerAccelerator(arg0: java.awt.AWTKeyStroke): void
            public unregisterAccelerator(arg0: java.awt.AWTKeyStroke): void
            public static getAppletIfAncestorOf(arg0: java.awt.Component): java.applet.Applet
            public notifyModalBlocked(arg0: java.awt.Dialog, arg1: boolean): void
            public static class: java.lang.Class<any>
        }
        class EventQueueItem {
            public event: java.awt.AWTEvent
            public next: sun.awt.EventQueueItem
            public constructor(arg0: java.awt.AWTEvent)
            public static class: java.lang.Class<any>
        }
        class ExtendedKeyCodes {
            public constructor()
            public static getExtendedKeyCodeForChar(arg0: int): int
            public static class: java.lang.Class<any>
        }
        abstract class FontConfiguration {
            protected static osVersion: string
            protected static osName: string
            protected static encoding: string
            protected static startupLocale: java.util.Locale
            protected static localeMap: java.util.Hashtable
            protected static isProperties: boolean
            protected fontManager: sun.font.SunFontManager
            protected preferLocaleFonts: boolean
            protected preferPropFonts: boolean
            public static verbose: boolean
            protected static NUM_FONTS: int
            protected static NUM_STYLES: int
            protected static fontNames: java.lang.String[]
            protected static publicFontNames: java.lang.String[]
            protected static styleNames: java.lang.String[]
            protected static installedFallbackFontFiles: java.lang.String[]
            protected reorderMap: java.util.HashMap
            protected static table_awtfontpaths: short[]
            public constructor(arg0: sun.font.SunFontManager)
            public init(): boolean
            public constructor(arg0: sun.font.SunFontManager, arg1: boolean, arg2: boolean)
            protected setOsNameAndVersion(): void
            public foundOsSpecificFile(): boolean
            public fontFilesArePresent(): boolean
            protected getInstalledFallbackFonts(arg0: java.lang.String | string): void
            public static loadBinary(arg0: java.io.InputStream): void
            public static saveBinary(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): void
            public static loadProperties(arg0: java.io.InputStream): void
            public static hasMonoToPropMap(): boolean
            public static isLogicalFontFamilyName(arg0: java.lang.String | string): boolean
            public static isLogicalFontFamilyNameLC(arg0: java.lang.String | string): boolean
            public static isLogicalFontFaceName(arg0: java.lang.String | string): boolean
            public static isLogicalFontFaceNameLC(arg0: java.lang.String | string): boolean
            protected static getFontIndex(arg0: java.lang.String | string): int
            protected static getStyleIndex(arg0: java.lang.String | string): int
            protected static getStyleIndex(arg0: int): int
            protected static getFontName(arg0: int): string
            protected static getStyleName(arg0: int): string
            public static getLogicalFontFaceName(arg0: java.lang.String | string, arg1: int): string
            public static getStyleString(arg0: int): string
            public getFallbackFamilyName(arg0: java.lang.String | string, arg1: java.lang.String | string): string
            protected getCompatibilityFamilyName(arg0: java.lang.String | string): string
            protected mapFileName(arg0: java.lang.String | string): string
            protected initReorderMap(): void
            public static willReorderForStartupLocale(): boolean
            protected split(arg0: java.lang.String | string): java.lang.String[]
            public getFontDescriptors(arg0: java.lang.String | string, arg1: int): sun.awt.FontDescriptor[]
            protected buildFontDescriptors(arg0: int, arg1: int): sun.awt.FontDescriptor[]
            protected makeAWTFontName(arg0: java.lang.String | string, arg1: java.lang.String | string): string
            protected getEncoding(arg0: java.lang.String | string, arg1: java.lang.String | string): string
            protected getDefaultFontCharset(arg0: java.lang.String | string): java.nio.charset.Charset
            public getAWTFontPathSet(): java.util.HashSet<java.lang.String>
            public get2DCompositeFontInfo(): sun.font.CompositeFontDescriptor[]
            protected getFaceNameFromComponentFontName(arg0: java.lang.String | string): string
            protected getFileNameFromComponentFontName(arg0: java.lang.String | string): string
            public needToSearchForFile(arg0: java.lang.String | string): boolean
            public getNumberCoreFonts(): int
            public getPlatformFontNames(): java.lang.String[]
            public getFileNameFromPlatformName(arg0: java.lang.String | string): string
            public getExtraFontPath(): string
            public getVersion(): string
            protected static getFontConfiguration(): sun.awt.FontConfiguration
            protected setFontConfiguration(): void
            protected static getComponentFontID(arg0: short, arg1: int, arg2: int): short
            protected static getComponentFontIDMotif(arg0: short, arg1: int, arg2: int): short
            protected static getComponentFontName(arg0: short): string
            protected getCoreScripts(arg0: int): short[]
            protected static getString(arg0: short): string
            public static class: java.lang.Class<any>
        }
        class FontDescriptor implements java.lang.Cloneable {
            public encoder: java.nio.charset.CharsetEncoder
            public unicodeEncoder: java.nio.charset.CharsetEncoder
            public constructor(arg0: java.lang.String | string, arg1: java.nio.charset.CharsetEncoder, arg2: int[])
            public getNativeName(): string
            public getFontCharsetEncoder(): java.nio.charset.CharsetEncoder
            public getFontCharsetName(): string
            public getExclusionRanges(): int[]
            public isExcluded(arg0: char): boolean
            public toString(): string
            public useUnicode(): boolean
            public static class: java.lang.Class<any>
        }
        interface FwDispatcher {
            isDispatchThread(): boolean
            scheduleDispatch(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            createSecondaryLoop(): java.awt.SecondaryLoop
        }
        abstract class GlobalCursorManager {
            public updateCursorImmediately(): void
            public updateCursorImmediately(arg0: java.awt.event.InputEvent): void
            public updateCursorLater(arg0: java.awt.Component): void
            protected constructor()
            protected setCursor(arg0: java.awt.Component, arg1: java.awt.Cursor, arg2: boolean): void
            protected getCursorPos(arg0: java.awt.Point): void
            protected getLocationOnScreen(arg0: java.awt.Component): java.awt.Point
            protected findHeavyweightUnderCursor(arg0: boolean): java.awt.Component
            protected updateCursorOutOfJava(): void
            public static class: java.lang.Class<any>
        }
        interface Graphics2Delegate {
            setBackground(arg0: java.awt.Color): void
        }
        interface Graphics2Delegate$$Lambda {
            (arg0: java.awt.Color): void
        }
        class HKSCS extends sun.nio.cs.ext.MS950_HKSCS_XP {
            public constructor()
            public contains(arg0: java.nio.charset.Charset): boolean
            public static class: java.lang.Class<any>
        }
        class HToolkit extends sun.awt.SunToolkit implements sun.awt.ComponentFactory {
            public constructor()
            public createWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.peer.WindowPeer
            public createLightweightFrame(arg0: sun.awt.LightweightFrame): java.awt.peer.FramePeer
            public createFrame(arg0: java.awt.Frame): java.awt.peer.FramePeer
            public createDialog(arg0: java.awt.Dialog): java.awt.peer.DialogPeer
            public createButton(arg0: java.awt.Button | java.awt.Button$$Lambda): java.awt.peer.ButtonPeer
            public createTextField(arg0: java.awt.TextField): java.awt.peer.TextFieldPeer
            public createChoice(arg0: java.awt.Choice | java.awt.Choice$$Lambda): java.awt.peer.ChoicePeer
            public createLabel(arg0: java.awt.Label | java.awt.Label$$Lambda): java.awt.peer.LabelPeer
            public createList(arg0: java.awt.List | java.awt.List$$Lambda): java.awt.peer.ListPeer
            public createCheckbox(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): java.awt.peer.CheckboxPeer
            public createScrollbar(arg0: java.awt.Scrollbar | java.awt.Scrollbar$$Lambda): java.awt.peer.ScrollbarPeer
            public createScrollPane(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda): java.awt.peer.ScrollPanePeer
            public createTextArea(arg0: java.awt.TextArea): java.awt.peer.TextAreaPeer
            public createFileDialog(arg0: java.awt.FileDialog): java.awt.peer.FileDialogPeer
            public createMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): java.awt.peer.MenuBarPeer
            public createMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): java.awt.peer.MenuPeer
            public createPopupMenu(arg0: java.awt.PopupMenu): java.awt.peer.PopupMenuPeer
            public createMenuItem(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): java.awt.peer.MenuItemPeer
            public createCheckboxMenuItem(arg0: java.awt.CheckboxMenuItem | java.awt.CheckboxMenuItem$$Lambda): java.awt.peer.CheckboxMenuItemPeer
            public createDragSourceContextPeer(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            public createRobot(arg0: java.awt.Robot, arg1: java.awt.GraphicsDevice): java.awt.peer.RobotPeer
            public getKeyboardFocusManagerPeer(): java.awt.peer.KeyboardFocusManagerPeer
            public createTrayIcon(arg0: java.awt.TrayIcon): java.awt.peer.TrayIconPeer
            public createSystemTray(arg0: java.awt.SystemTray): java.awt.peer.SystemTrayPeer
            public isTraySupported(): boolean
            public getDataTransferer(): sun.awt.datatransfer.DataTransferer
            public getGlobalCursorManager(): sun.awt.GlobalCursorManager
            protected loadSystemColors(arg0: int[]): void
            public getColorModel(): java.awt.image.ColorModel
            public getScreenResolution(): int
            public mapInputMethodHighlight(arg0: java.awt.im.InputMethodHighlight): java.util.Map
            public getMenuShortcutKeyMask(): int
            public getLockingKeyState(arg0: int): boolean
            public setLockingKeyState(arg0: int, arg1: boolean): void
            public createCustomCursor(arg0: java.awt.Image, arg1: java.awt.Point, arg2: java.lang.String | string): java.awt.Cursor
            public getBestCursorSize(arg0: int, arg1: int): java.awt.Dimension
            public getMaximumCursorColors(): int
            public createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.dnd.DragSource, arg2: java.awt.Component, arg3: int, arg4: java.awt.dnd.DragGestureListener): T
            public getScreenHeight<T extends java.awt.dnd.DragGestureRecognizer>(): int
            public getScreenWidth<T extends java.awt.dnd.DragGestureRecognizer>(): int
            public getScreenSize<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.Dimension
            public getScreenInsets<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.GraphicsConfiguration): java.awt.Insets
            public setDynamicLayout<T extends java.awt.dnd.DragGestureRecognizer>(arg0: boolean): void
            protected isDynamicLayoutSet<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public isDynamicLayoutActive<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public getSystemClipboard<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.datatransfer.Clipboard
            public getPrintJob<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.awt.JobAttributes, arg3: java.awt.PageAttributes): java.awt.PrintJob
            public getPrintJob<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.util.Properties): java.awt.PrintJob
            public sync<T extends java.awt.dnd.DragGestureRecognizer>(): void
            protected syncNativeQueue<T extends java.awt.dnd.DragGestureRecognizer>(arg0: long): boolean
            public beep<T extends java.awt.dnd.DragGestureRecognizer>(): void
            public getFontPeer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: int): java.awt.peer.FontPeer
            public isModalityTypeSupported<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Dialog$ModalityType): boolean
            public isModalExclusionTypeSupported<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Dialog$ModalExclusionType): boolean
            public isDesktopSupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public createDesktopPeer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Desktop): java.awt.peer.DesktopPeer
            public isWindowOpacityControlSupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public isWindowShapingSupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public isWindowTranslucencySupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public grab<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public ungrab<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            protected syncNativeQueue<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public getInputMethodAdapterDescriptor<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.im.spi.InputMethodDescriptor
            public static class: java.lang.Class<any>
        }
        class HeadlessToolkit extends java.awt.Toolkit implements sun.awt.ComponentFactory , sun.awt.KeyboardFocusManagerPeerProvider {
            public constructor(arg0: java.awt.Toolkit)
            public getUnderlyingToolkit(): java.awt.Toolkit
            public createCanvas(arg0: java.awt.Canvas | java.awt.Canvas$$Lambda): java.awt.peer.CanvasPeer
            public createPanel(arg0: java.awt.Panel | java.awt.Panel$$Lambda): java.awt.peer.PanelPeer
            public createWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.peer.WindowPeer
            public createFrame(arg0: java.awt.Frame): java.awt.peer.FramePeer
            public createDialog(arg0: java.awt.Dialog): java.awt.peer.DialogPeer
            public createButton(arg0: java.awt.Button | java.awt.Button$$Lambda): java.awt.peer.ButtonPeer
            public createTextField(arg0: java.awt.TextField): java.awt.peer.TextFieldPeer
            public createChoice(arg0: java.awt.Choice | java.awt.Choice$$Lambda): java.awt.peer.ChoicePeer
            public createLabel(arg0: java.awt.Label | java.awt.Label$$Lambda): java.awt.peer.LabelPeer
            public createList(arg0: java.awt.List | java.awt.List$$Lambda): java.awt.peer.ListPeer
            public createCheckbox(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): java.awt.peer.CheckboxPeer
            public createScrollbar(arg0: java.awt.Scrollbar | java.awt.Scrollbar$$Lambda): java.awt.peer.ScrollbarPeer
            public createScrollPane(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda): java.awt.peer.ScrollPanePeer
            public createTextArea(arg0: java.awt.TextArea): java.awt.peer.TextAreaPeer
            public createFileDialog(arg0: java.awt.FileDialog): java.awt.peer.FileDialogPeer
            public createMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): java.awt.peer.MenuBarPeer
            public createMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): java.awt.peer.MenuPeer
            public createPopupMenu(arg0: java.awt.PopupMenu): java.awt.peer.PopupMenuPeer
            public createMenuItem(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): java.awt.peer.MenuItemPeer
            public createCheckboxMenuItem(arg0: java.awt.CheckboxMenuItem | java.awt.CheckboxMenuItem$$Lambda): java.awt.peer.CheckboxMenuItemPeer
            public createDragSourceContextPeer(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            public createRobot(arg0: java.awt.Robot, arg1: java.awt.GraphicsDevice): java.awt.peer.RobotPeer
            public getKeyboardFocusManagerPeer(): java.awt.peer.KeyboardFocusManagerPeer
            public createTrayIcon(arg0: java.awt.TrayIcon): java.awt.peer.TrayIconPeer
            public createSystemTray(arg0: java.awt.SystemTray): java.awt.peer.SystemTrayPeer
            public isTraySupported(): boolean
            public getGlobalCursorManager(): sun.awt.GlobalCursorManager
            protected loadSystemColors(arg0: int[]): void
            public getColorModel(): java.awt.image.ColorModel
            public getScreenResolution(): int
            public mapInputMethodHighlight(arg0: java.awt.im.InputMethodHighlight): java.util.Map
            public getMenuShortcutKeyMask(): int
            public getLockingKeyState(arg0: int): boolean
            public setLockingKeyState(arg0: int, arg1: boolean): void
            public createCustomCursor(arg0: java.awt.Image, arg1: java.awt.Point, arg2: java.lang.String | string): java.awt.Cursor
            public getBestCursorSize(arg0: int, arg1: int): java.awt.Dimension
            public getMaximumCursorColors(): int
            public createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.dnd.DragSource, arg2: java.awt.Component, arg3: int, arg4: java.awt.dnd.DragGestureListener): T
            public getScreenHeight<T extends java.awt.dnd.DragGestureRecognizer>(): int
            public getScreenWidth<T extends java.awt.dnd.DragGestureRecognizer>(): int
            public getScreenSize<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.Dimension
            public getScreenInsets<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.GraphicsConfiguration): java.awt.Insets
            public setDynamicLayout<T extends java.awt.dnd.DragGestureRecognizer>(arg0: boolean): void
            protected isDynamicLayoutSet<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public isDynamicLayoutActive<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public getSystemClipboard<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.datatransfer.Clipboard
            public getPrintJob<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.awt.JobAttributes, arg3: java.awt.PageAttributes): java.awt.PrintJob
            public getPrintJob<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.util.Properties): java.awt.PrintJob
            public sync<T extends java.awt.dnd.DragGestureRecognizer>(): void
            public beep<T extends java.awt.dnd.DragGestureRecognizer>(): void
            public getSystemEventQueueImpl<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.EventQueue
            public checkImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): int
            public prepareImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public getImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string): java.awt.Image
            public getImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.net.URL): java.awt.Image
            public createImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string): java.awt.Image
            public createImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.net.URL): java.awt.Image
            public createImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: byte[], arg1: int, arg2: int): java.awt.Image
            public createImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.image.ImageProducer): java.awt.Image
            public createImage<T extends java.awt.dnd.DragGestureRecognizer>(arg0: byte[]): java.awt.Image
            public getFontPeer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: int): java.awt.peer.FontPeer
            public getDataTransferer<T extends java.awt.dnd.DragGestureRecognizer>(): sun.awt.datatransfer.DataTransferer
            public getFontMetrics<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Font): java.awt.FontMetrics
            public getFontList<T extends java.awt.dnd.DragGestureRecognizer>(): java.lang.String[]
            public addPropertyChangeListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.String | string, arg1: java.beans.PropertyChangeListener): void
            public isModalityTypeSupported<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Dialog$ModalityType): boolean
            public isModalExclusionTypeSupported<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Dialog$ModalExclusionType): boolean
            public isAlwaysOnTopSupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public addAWTEventListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.event.AWTEventListener, arg1: long): void
            public removeAWTEventListener<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.event.AWTEventListener): void
            public getAWTEventListeners<T extends java.awt.dnd.DragGestureRecognizer>(): java.awt.event.AWTEventListener[]
            public getAWTEventListeners<T extends java.awt.dnd.DragGestureRecognizer>(arg0: long): java.awt.event.AWTEventListener[]
            public isDesktopSupported<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public createDesktopPeer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.Desktop): java.awt.peer.DesktopPeer
            public areExtraMouseButtonsEnabled<T extends java.awt.dnd.DragGestureRecognizer>(): boolean
            public static class: java.lang.Class<any>
        }
        class HeadlessToolkit$$Lambda extends java.awt.Toolkit implements sun.awt.ComponentFactory , sun.awt.KeyboardFocusManagerPeerProvider {
            public constructor(arg0: java.awt.Toolkit)
        }
        class IconInfo {
            public constructor(arg0: int[])
            public constructor(arg0: long[])
            public constructor(arg0: java.awt.Image)
            public setScaledSize(arg0: int, arg1: int): void
            public isValid(): boolean
            public getWidth(): int
            public getHeight(): int
            public toString(): string
            public getRawLength(): int
            public getIntData(): int[]
            public getLongData(): long[]
            public getImage(): java.awt.Image
            public static class: java.lang.Class<any>
        }
        interface InputMethodSupport {
            getInputMethodAdapterDescriptor(): java.awt.im.spi.InputMethodDescriptor
            createInputMethodWindow(arg0: java.lang.String | string, arg1: sun.awt.im.InputContext): java.awt.Window
            enableInputMethodsForTextComponent(): boolean
            getDefaultKeyboardLocale(): java.util.Locale
        }
        abstract class KeyboardFocusManagerPeerImpl implements java.awt.peer.KeyboardFocusManagerPeer {
            public static SNFH_FAILURE: int
            public static SNFH_SUCCESS_HANDLED: int
            public static SNFH_SUCCESS_PROCEED: int
            public constructor()
            public clearGlobalFocusOwner(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public static shouldFocusOnClick(arg0: java.awt.Component): boolean
            public static deliverFocus(arg0: java.awt.Component, arg1: java.awt.Component, arg2: boolean, arg3: boolean, arg4: long, arg5: sun.awt.CausedFocusEvent$Cause, arg6: java.awt.Component): boolean
            public static requestFocusFor(arg0: java.awt.Component, arg1: sun.awt.CausedFocusEvent$Cause): boolean
            public static shouldNativelyFocusHeavyweight(arg0: java.awt.Component, arg1: java.awt.Component, arg2: boolean, arg3: boolean, arg4: long, arg5: sun.awt.CausedFocusEvent$Cause): int
            public static removeLastFocusRequest(arg0: java.awt.Component): void
            public static processSynchronousLightweightTransfer(arg0: java.awt.Component, arg1: java.awt.Component, arg2: boolean, arg3: boolean, arg4: long): boolean
            public static class: java.lang.Class<any>
        }
        interface KeyboardFocusManagerPeerProvider {
            getKeyboardFocusManagerPeer(): java.awt.peer.KeyboardFocusManagerPeer
        }
        interface KeyboardFocusManagerPeerProvider$$Lambda {
            (): java.awt.peer.KeyboardFocusManagerPeer
        }
        abstract class LightweightFrame extends java.awt.Frame {
            public constructor()
            public getParent(): java.awt.Container
            public getGraphics(): java.awt.Graphics
            public isResizable(): boolean
            public setTitle(arg0: java.lang.String | string): void
            public setIconImage(arg0: java.awt.Image): void
            public setIconImages(arg0: java.util.List<java.awt.Image>): void
            public setMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): void
            public setResizable(arg0: boolean): void
            public remove(arg0: java.awt.MenuComponent): void
            public toFront(): void
            public toBack(): void
            public addNotify(): void
            public emulateActivation(arg0: boolean): void
            public grabFocus(): void
            public ungrabFocus(): void
            public getScaleFactor(): int
            public notifyDisplayChanged(arg0: int): void
            public getHostBounds(): java.awt.Rectangle
            public setHostBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
            public createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.dnd.DragSource, arg2: java.awt.Component, arg3: int, arg4: java.awt.dnd.DragGestureListener): T
            public createDragSourceContextPeer(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            public addDropTarget(arg0: java.awt.dnd.DropTarget): void
            public removeDropTarget(arg0: java.awt.dnd.DropTarget): void
            public static class: java.lang.Class<any>
        }
        interface ModalExclude {
        }
        class ModalityEvent extends java.awt.AWTEvent implements java.awt.ActiveEvent {
            public static MODALITY_PUSHED: int
            public static MODALITY_POPPED: int
            public constructor(arg0: java.lang.Object, arg1: sun.awt.ModalityListener, arg2: int)
            public dispatch(): void
            public static class: java.lang.Class<any>
        }
        class ModalityEvent$$Lambda extends java.awt.AWTEvent implements java.awt.ActiveEvent {
            public static MODALITY_PUSHED: int
        }
        interface ModalityListener {
            modalityPushed(arg0: sun.awt.ModalityEvent | sun.awt.ModalityEvent$$Lambda): void
            modalityPopped(arg0: sun.awt.ModalityEvent | sun.awt.ModalityEvent$$Lambda): void
        }
        class Mutex {
            public constructor()
            public lock(): void
            public unlock(): void
            protected isOwned(): boolean
            public static class: java.lang.Class<any>
        }
        class NativeLibLoader {
            public static class: java.lang.Class<any>
        }
        class NullComponentPeer implements java.awt.peer.LightweightPeer , java.awt.peer.CanvasPeer , java.awt.peer.PanelPeer {
            public constructor()
            public isObscured(): boolean
            public canDetermineObscurity(): boolean
            public isFocusable(): boolean
            public setVisible(arg0: boolean): void
            public show(): void
            public hide(): void
            public setEnabled(arg0: boolean): void
            public enable(): void
            public disable(): void
            public paint(arg0: java.awt.Graphics): void
            public repaint(arg0: long, arg1: int, arg2: int, arg3: int, arg4: int): void
            public print(arg0: java.awt.Graphics): void
            public setBounds(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public coalescePaintEvent(arg0: java.awt.event.PaintEvent): void
            public handleEvent(arg0: java.awt.Event): boolean
            public handleEvent(arg0: java.awt.AWTEvent): void
            public getPreferredSize(): java.awt.Dimension
            public getMinimumSize(): java.awt.Dimension
            public getColorModel(): java.awt.image.ColorModel
            public getGraphics(): java.awt.Graphics
            public getGraphicsConfiguration(): java.awt.GraphicsConfiguration
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public dispose(): void
            public setForeground(arg0: java.awt.Color): void
            public setBackground(arg0: java.awt.Color): void
            public setFont(arg0: java.awt.Font): void
            public updateCursorImmediately(): void
            public setCursor(arg0: java.awt.Cursor): void
            public requestFocus(arg0: java.awt.Component, arg1: boolean, arg2: boolean, arg3: long, arg4: sun.awt.CausedFocusEvent$Cause): boolean
            public createImage(arg0: java.awt.image.ImageProducer): java.awt.Image
            public createImage(arg0: int, arg1: int): java.awt.Image
            public prepareImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public checkImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): int
            public preferredSize(): java.awt.Dimension
            public minimumSize(): java.awt.Dimension
            public getLocationOnScreen(): java.awt.Point
            public getInsets(): java.awt.Insets
            public beginValidate(): void
            public endValidate(): void
            public insets(): java.awt.Insets
            public isPaintPending(): boolean
            public handlesWheelScrolling(): boolean
            public createVolatileImage(arg0: int, arg1: int): java.awt.image.VolatileImage
            public beginLayout(): void
            public endLayout(): void
            public createBuffers(arg0: int, arg1: java.awt.BufferCapabilities): void
            public getBackBuffer(): java.awt.Image
            public flip(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.BufferCapabilities$FlipContents): void
            public destroyBuffers(): void
            public isReparentSupported(): boolean
            public reparent(arg0: java.awt.peer.ContainerPeer): void
            public layout(): void
            public getBounds(): java.awt.Rectangle
            public applyShape(arg0: sun.java2d.pipe.Region): void
            public setZOrder(arg0: java.awt.peer.ComponentPeer): void
            public updateGraphicsData(arg0: java.awt.GraphicsConfiguration): boolean
            public getAppropriateGraphicsConfiguration(arg0: java.awt.GraphicsConfiguration): java.awt.GraphicsConfiguration
            public static class: java.lang.Class<any>
        }
        class OSInfo {
            public static WINDOWS_UNKNOWN: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_95: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_98: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_ME: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_2000: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_XP: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_2003: sun.awt.OSInfo$WindowsVersion
            public static WINDOWS_VISTA: sun.awt.OSInfo$WindowsVersion
            public static getOSType(): sun.awt.OSInfo$OSType
            public static getOSTypeAction(): java.security.PrivilegedAction<sun.awt.OSInfo$OSType>
            public static getWindowsVersion(): sun.awt.OSInfo$WindowsVersion
            public static class: java.lang.Class<any>
        }
        class PaintEventDispatcher {
            public constructor()
            public static setPaintEventDispatcher(arg0: sun.awt.PaintEventDispatcher): void
            public static getPaintEventDispatcher(): sun.awt.PaintEventDispatcher
            public createPaintEvent(arg0: java.awt.Component, arg1: int, arg2: int, arg3: int, arg4: int): java.awt.event.PaintEvent
            public shouldDoNativeBackgroundErase(arg0: java.awt.Component): boolean
            public queueSurfaceDataReplacing(arg0: java.awt.Component, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): boolean
            public static class: java.lang.Class<any>
        }
        class PeerEvent extends java.awt.event.InvocationEvent {
            public static PRIORITY_EVENT: long
            public static ULTIMATE_PRIORITY_EVENT: long
            public static LOW_PRIORITY_EVENT: long
            public constructor(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda, arg2: long)
            public constructor(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda, arg2: java.lang.Object, arg3: boolean, arg4: long)
            public getFlags(): long
            public coalesceEvents(arg0: sun.awt.PeerEvent): sun.awt.PeerEvent
            public static class: java.lang.Class<any>
        }
        abstract class PlatformFont implements java.awt.peer.FontPeer {
            protected componentFonts: sun.awt.FontDescriptor[]
            protected defaultChar: char
            protected fontConfig: sun.awt.FontConfiguration
            protected defaultFont: sun.awt.FontDescriptor
            protected familyName: string
            protected static FONTCACHESIZE: int
            protected static FONTCACHEMASK: int
            protected static osVersion: string
            public constructor(arg0: java.lang.String | string, arg1: int)
            protected getMissingGlyphCharacter(): char
            public makeMultiCharsetString(arg0: java.lang.String | string): sun.awt.CharsetString[]
            public makeMultiCharsetString(arg0: java.lang.String | string, arg1: boolean): sun.awt.CharsetString[]
            public makeMultiCharsetString(arg0: char[], arg1: int, arg2: int): sun.awt.CharsetString[]
            public makeMultiCharsetString(arg0: char[], arg1: int, arg2: int, arg3: boolean): sun.awt.CharsetString[]
            public mightHaveMultiFontMetrics(): boolean
            public makeConvertedMultiFontString(arg0: java.lang.String | string): java.lang.Object[]
            public makeConvertedMultiFontChars(arg0: char[], arg1: int, arg2: int): java.lang.Object[]
            protected getFontCache(): java.lang.Object[]
            public static class: java.lang.Class<any>
        }
        class RepaintArea {
            public constructor()
            public add(arg0: java.awt.Rectangle, arg1: int): void
            public isEmpty(): boolean
            public constrain(arg0: int, arg1: int, arg2: int, arg3: int): void
            public subtract(arg0: int, arg1: int, arg2: int, arg3: int): void
            public paint(arg0: java.lang.Object, arg1: boolean): void
            protected updateComponent(arg0: java.awt.Component, arg1: java.awt.Graphics): void
            protected paintComponent(arg0: java.awt.Component, arg1: java.awt.Graphics): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface RequestFocusController {
            acceptRequestFocus(arg0: java.awt.Component, arg1: java.awt.Component, arg2: boolean, arg3: boolean, arg4: sun.awt.CausedFocusEvent$Cause): boolean
        }
        interface RequestFocusController$$Lambda {
            (arg0: java.awt.Component, arg1: java.awt.Component, arg2: boolean, arg3: boolean, arg4: sun.awt.CausedFocusEvent$Cause): boolean
        }
        abstract class ScrollPaneWheelScroller {
            public static handleWheelScrolling(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda, arg1: java.awt.event.MouseWheelEvent): void
            public static getAdjustableToScroll(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda): java.awt.Adjustable
            public static getIncrementFromAdjustable(arg0: java.awt.Adjustable, arg1: java.awt.event.MouseWheelEvent): int
            public static scrollAdjustable(arg0: java.awt.Adjustable, arg1: int): void
            public static class: java.lang.Class<any>
        }
        interface SubRegionShowable {
            show(arg0: int, arg1: int, arg2: int, arg3: int): void
            showIfNotLost(arg0: int, arg1: int, arg2: int, arg3: int): boolean
        }
        class SunDisplayChanger {
            public constructor()
            public add(arg0: sun.awt.DisplayChangedListener): void
            public remove(arg0: sun.awt.DisplayChangedListener): void
            public notifyListeners(): void
            public notifyPaletteChanged(): void
            public static class: java.lang.Class<any>
        }
        abstract class SunGraphicsCallback {
            public static HEAVYWEIGHTS: int
            public static LIGHTWEIGHTS: int
            public static TWO_PASSES: int
            public constructor()
            public run(arg0: java.awt.Component, arg1: java.awt.Graphics): void
            protected constrainGraphics(arg0: java.awt.Graphics, arg1: java.awt.Rectangle): void
            public runOneComponent(arg0: java.awt.Component, arg1: java.awt.Rectangle, arg2: java.awt.Graphics, arg3: java.awt.Shape, arg4: int): void
            public runComponents(arg0: java.awt.Component[], arg1: java.awt.Graphics, arg2: int): void
            public static class: java.lang.Class<any>
        }
        class SunHints {
            public static INTKEY_RENDERING: int
            public static INTVAL_RENDER_DEFAULT: int
            public static INTVAL_RENDER_SPEED: int
            public static INTVAL_RENDER_QUALITY: int
            public static INTKEY_ANTIALIASING: int
            public static INTVAL_ANTIALIAS_DEFAULT: int
            public static INTVAL_ANTIALIAS_OFF: int
            public static INTVAL_ANTIALIAS_ON: int
            public static INTKEY_TEXT_ANTIALIASING: int
            public static INTVAL_TEXT_ANTIALIAS_DEFAULT: int
            public static INTVAL_TEXT_ANTIALIAS_OFF: int
            public static INTVAL_TEXT_ANTIALIAS_ON: int
            public static INTVAL_TEXT_ANTIALIAS_GASP: int
            public static INTVAL_TEXT_ANTIALIAS_LCD_HRGB: int
            public static INTVAL_TEXT_ANTIALIAS_LCD_HBGR: int
            public static INTVAL_TEXT_ANTIALIAS_LCD_VRGB: int
            public static INTVAL_TEXT_ANTIALIAS_LCD_VBGR: int
            public static INTKEY_FRACTIONALMETRICS: int
            public static INTVAL_FRACTIONALMETRICS_DEFAULT: int
            public static INTVAL_FRACTIONALMETRICS_OFF: int
            public static INTVAL_FRACTIONALMETRICS_ON: int
            public static INTKEY_DITHERING: int
            public static INTVAL_DITHER_DEFAULT: int
            public static INTVAL_DITHER_DISABLE: int
            public static INTVAL_DITHER_ENABLE: int
            public static INTKEY_INTERPOLATION: int
            public static INTVAL_INTERPOLATION_NEAREST_NEIGHBOR: int
            public static INTVAL_INTERPOLATION_BILINEAR: int
            public static INTVAL_INTERPOLATION_BICUBIC: int
            public static INTKEY_ALPHA_INTERPOLATION: int
            public static INTVAL_ALPHA_INTERPOLATION_DEFAULT: int
            public static INTVAL_ALPHA_INTERPOLATION_SPEED: int
            public static INTVAL_ALPHA_INTERPOLATION_QUALITY: int
            public static INTKEY_COLOR_RENDERING: int
            public static INTVAL_COLOR_RENDER_DEFAULT: int
            public static INTVAL_COLOR_RENDER_SPEED: int
            public static INTVAL_COLOR_RENDER_QUALITY: int
            public static INTKEY_STROKE_CONTROL: int
            public static INTVAL_STROKE_DEFAULT: int
            public static INTVAL_STROKE_NORMALIZE: int
            public static INTVAL_STROKE_PURE: int
            public static INTKEY_RESOLUTION_VARIANT: int
            public static INTVAL_RESOLUTION_VARIANT_DEFAULT: int
            public static INTVAL_RESOLUTION_VARIANT_OFF: int
            public static INTVAL_RESOLUTION_VARIANT_ON: int
            public static INTKEY_AATEXT_LCD_CONTRAST: int
            public static KEY_RENDERING: sun.awt.SunHints$Key
            public static VALUE_RENDER_SPEED: java.lang.Object
            public static VALUE_RENDER_QUALITY: java.lang.Object
            public static VALUE_RENDER_DEFAULT: java.lang.Object
            public static KEY_ANTIALIASING: sun.awt.SunHints$Key
            public static VALUE_ANTIALIAS_ON: java.lang.Object
            public static VALUE_ANTIALIAS_OFF: java.lang.Object
            public static VALUE_ANTIALIAS_DEFAULT: java.lang.Object
            public static KEY_TEXT_ANTIALIASING: sun.awt.SunHints$Key
            public static VALUE_TEXT_ANTIALIAS_ON: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_OFF: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_DEFAULT: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_GASP: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_HRGB: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_HBGR: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_VRGB: java.lang.Object
            public static VALUE_TEXT_ANTIALIAS_LCD_VBGR: java.lang.Object
            public static KEY_FRACTIONALMETRICS: sun.awt.SunHints$Key
            public static VALUE_FRACTIONALMETRICS_ON: java.lang.Object
            public static VALUE_FRACTIONALMETRICS_OFF: java.lang.Object
            public static VALUE_FRACTIONALMETRICS_DEFAULT: java.lang.Object
            public static KEY_DITHERING: sun.awt.SunHints$Key
            public static VALUE_DITHER_ENABLE: java.lang.Object
            public static VALUE_DITHER_DISABLE: java.lang.Object
            public static VALUE_DITHER_DEFAULT: java.lang.Object
            public static KEY_INTERPOLATION: sun.awt.SunHints$Key
            public static VALUE_INTERPOLATION_NEAREST_NEIGHBOR: java.lang.Object
            public static VALUE_INTERPOLATION_BILINEAR: java.lang.Object
            public static VALUE_INTERPOLATION_BICUBIC: java.lang.Object
            public static KEY_ALPHA_INTERPOLATION: sun.awt.SunHints$Key
            public static VALUE_ALPHA_INTERPOLATION_SPEED: java.lang.Object
            public static VALUE_ALPHA_INTERPOLATION_QUALITY: java.lang.Object
            public static VALUE_ALPHA_INTERPOLATION_DEFAULT: java.lang.Object
            public static KEY_COLOR_RENDERING: sun.awt.SunHints$Key
            public static VALUE_COLOR_RENDER_SPEED: java.lang.Object
            public static VALUE_COLOR_RENDER_QUALITY: java.lang.Object
            public static VALUE_COLOR_RENDER_DEFAULT: java.lang.Object
            public static KEY_STROKE_CONTROL: sun.awt.SunHints$Key
            public static VALUE_STROKE_DEFAULT: java.lang.Object
            public static VALUE_STROKE_NORMALIZE: java.lang.Object
            public static VALUE_STROKE_PURE: java.lang.Object
            public static KEY_RESOLUTION_VARIANT: sun.awt.SunHints$Key
            public static VALUE_RESOLUTION_VARIANT_DEFAULT: java.lang.Object
            public static VALUE_RESOLUTION_VARIANT_OFF: java.lang.Object
            public static VALUE_RESOLUTION_VARIANT_ON: java.lang.Object
            public static KEY_TEXT_ANTIALIAS_LCD_CONTRAST: java.awt.RenderingHints$Key
            public constructor()
            public static class: java.lang.Class<any>
        }
        abstract class SunToolkit extends java.awt.Toolkit implements sun.awt.WindowClosingSupport , sun.awt.WindowClosingListener , sun.awt.ComponentFactory , sun.awt.InputMethodSupport , sun.awt.KeyboardFocusManagerPeerProvider {
            public static GRAB_EVENT_MASK: int
            protected static numberOfButtons: int
            public static MAX_BUTTONS_SUPPORTED: int
            public static DEFAULT_WAIT_TIME: int
            public static DESKTOPFONTHINTS: string
            public constructor()
            public useBufferPerWindow(): boolean
            public createWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): java.awt.peer.WindowPeer
            public createFrame(arg0: java.awt.Frame): java.awt.peer.FramePeer
            public createLightweightFrame(arg0: sun.awt.LightweightFrame): java.awt.peer.FramePeer
            public createDialog(arg0: java.awt.Dialog): java.awt.peer.DialogPeer
            public createButton(arg0: java.awt.Button | java.awt.Button$$Lambda): java.awt.peer.ButtonPeer
            public createTextField(arg0: java.awt.TextField): java.awt.peer.TextFieldPeer
            public createChoice(arg0: java.awt.Choice | java.awt.Choice$$Lambda): java.awt.peer.ChoicePeer
            public createLabel(arg0: java.awt.Label | java.awt.Label$$Lambda): java.awt.peer.LabelPeer
            public createList(arg0: java.awt.List | java.awt.List$$Lambda): java.awt.peer.ListPeer
            public createCheckbox(arg0: java.awt.Checkbox | java.awt.Checkbox$$Lambda): java.awt.peer.CheckboxPeer
            public createScrollbar(arg0: java.awt.Scrollbar | java.awt.Scrollbar$$Lambda): java.awt.peer.ScrollbarPeer
            public createScrollPane(arg0: java.awt.ScrollPane | java.awt.ScrollPane$$Lambda): java.awt.peer.ScrollPanePeer
            public createTextArea(arg0: java.awt.TextArea): java.awt.peer.TextAreaPeer
            public createFileDialog(arg0: java.awt.FileDialog): java.awt.peer.FileDialogPeer
            public createMenuBar(arg0: java.awt.MenuBar | java.awt.MenuBar$$Lambda): java.awt.peer.MenuBarPeer
            public createMenu(arg0: java.awt.Menu | java.awt.Menu$$Lambda): java.awt.peer.MenuPeer
            public createPopupMenu(arg0: java.awt.PopupMenu): java.awt.peer.PopupMenuPeer
            public createMenuItem(arg0: java.awt.MenuItem | java.awt.MenuItem$$Lambda): java.awt.peer.MenuItemPeer
            public createCheckboxMenuItem(arg0: java.awt.CheckboxMenuItem | java.awt.CheckboxMenuItem$$Lambda): java.awt.peer.CheckboxMenuItemPeer
            public createDragSourceContextPeer(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            public createTrayIcon(arg0: java.awt.TrayIcon): java.awt.peer.TrayIconPeer
            public createSystemTray(arg0: java.awt.SystemTray): java.awt.peer.SystemTrayPeer
            public isTraySupported(): boolean
            public getFontPeer(arg0: java.lang.String | string, arg1: int): java.awt.peer.FontPeer
            public createRobot(arg0: java.awt.Robot, arg1: java.awt.GraphicsDevice): java.awt.peer.RobotPeer
            public getKeyboardFocusManagerPeer(): java.awt.peer.KeyboardFocusManagerPeer
            public static awtLock(): void
            public static awtTryLock(): boolean
            public static awtUnlock(): void
            public static awtLockWait(): void
            public static awtLockWait(arg0: long): void
            public static awtLockNotify(): void
            public static awtLockNotifyAll(): void
            public static isAWTLockHeldByCurrentThread(): boolean
            public static createNewAppContext(): sun.awt.AppContext
            protected static targetToPeer(arg0: java.lang.Object): java.lang.Object
            protected static targetCreatedPeer(arg0: java.lang.Object, arg1: java.lang.Object): void
            protected static targetDisposedPeer(arg0: java.lang.Object, arg1: java.lang.Object): void
            public static targetToAppContext(arg0: java.lang.Object): sun.awt.AppContext
            public static setLWRequestStatus(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: boolean): void
            public static checkAndSetPolicy(arg0: java.awt.Container): void
            public static insertTargetMapping(arg0: java.lang.Object, arg1: sun.awt.AppContext): void
            public static postEvent(arg0: sun.awt.AppContext, arg1: java.awt.AWTEvent): void
            public static postPriorityEvent(arg0: java.awt.AWTEvent): void
            public static flushPendingEvents(): void
            public static flushPendingEvents(arg0: sun.awt.AppContext): void
            public static executeOnEventHandlerThread(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static executeOnEventHandlerThread(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda, arg2: long): void
            public static executeOnEventHandlerThread(arg0: sun.awt.PeerEvent): void
            public static invokeLaterOnAppContext(arg0: sun.awt.AppContext, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static executeOnEDTAndWait(arg0: java.lang.Object, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): void
            public static isDispatchThreadForAppContext(arg0: java.lang.Object): boolean
            public getScreenSize(): java.awt.Dimension
            protected getScreenWidth(): int
            protected getScreenHeight(): int
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public getFontList(): java.lang.String[]
            public createPanel(arg0: java.awt.Panel | java.awt.Panel$$Lambda): java.awt.peer.PanelPeer
            public createCanvas(arg0: java.awt.Canvas | java.awt.Canvas$$Lambda): java.awt.peer.CanvasPeer
            public disableBackgroundErase(arg0: java.awt.Canvas | java.awt.Canvas$$Lambda): void
            public disableBackgroundErase(arg0: java.awt.Component): void
            public static getSunAwtNoerasebackground(): boolean
            public static getSunAwtErasebackgroundonresize(): boolean
            public getImage(arg0: java.lang.String | string): java.awt.Image
            public getImage(arg0: java.net.URL): java.awt.Image
            protected getImageWithResolutionVariant(arg0: java.lang.String | string, arg1: java.lang.String | string): java.awt.Image
            protected getImageWithResolutionVariant(arg0: java.net.URL, arg1: java.net.URL): java.awt.Image
            public createImage(arg0: java.lang.String | string): java.awt.Image
            public createImage(arg0: java.net.URL): java.awt.Image
            public createImage(arg0: byte[], arg1: int, arg2: int): java.awt.Image
            public createImage(arg0: java.awt.image.ImageProducer): java.awt.Image
            public static createImageWithResolutionVariant(arg0: java.awt.Image, arg1: java.awt.Image): java.awt.Image
            public checkImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): int
            public prepareImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            protected static imageCached(arg0: java.lang.String | string): boolean
            protected static imageCached(arg0: java.net.URL): boolean
            protected static imageExists(arg0: java.lang.String | string): boolean
            protected static imageExists(arg0: java.net.URL): boolean
            public static getScaledIconImage(arg0: java.util.List<java.awt.Image>, arg1: int, arg2: int): java.awt.image.BufferedImage
            public static getScaledIconData(arg0: java.util.List<java.awt.Image>, arg1: int, arg2: int): java.awt.image.DataBufferInt
            protected getSystemEventQueueImpl(): java.awt.EventQueue
            public static getSystemEventQueueImplPP(arg0: sun.awt.AppContext): java.awt.EventQueue
            public static getNativeContainer(arg0: java.awt.Component): java.awt.Container
            public static getHeavyweightComponent(arg0: java.awt.Component): java.awt.Component
            public getFocusAcceleratorKeyMask(): int
            public isPrintableCharacterModifiersMask(arg0: int): boolean
            public canPopupOverlapTaskBar(): boolean
            public createInputMethodWindow(arg0: java.lang.String | string, arg1: sun.awt.im.InputContext): java.awt.Window
            public enableInputMethodsForTextComponent(): boolean
            public static getStartupLocale(): java.util.Locale
            public getDefaultKeyboardLocale(): java.util.Locale
            public getWindowClosingListener(): sun.awt.WindowClosingListener
            public setWindowClosingListener(arg0: sun.awt.WindowClosingListener): void
            public windowClosingNotify(arg0: java.awt.event.WindowEvent): java.lang.RuntimeException
            public windowClosingDelivered(arg0: java.awt.event.WindowEvent): java.lang.RuntimeException
            protected getMouseInfoPeer(): java.awt.peer.MouseInfoPeer
            public static needsXEmbed(): boolean
            protected needsXEmbedImpl(): boolean
            protected isXEmbedServerRequested(): boolean
            public static isModalExcludedSupported(): boolean
            protected isModalExcludedSupportedImpl(): boolean
            public static setModalExcluded(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public static isModalExcluded(arg0: java.awt.Window | java.awt.Window$$Lambda): boolean
            public isModalityTypeSupported(arg0: java.awt.Dialog$ModalityType): boolean
            public isModalExclusionTypeSupported(arg0: java.awt.Dialog$ModalExclusionType): boolean
            public addModalityListener(arg0: sun.awt.ModalityListener): void
            public removeModalityListener(arg0: sun.awt.ModalityListener): void
            public notifyModalityPushed(arg0: java.awt.Dialog): void
            public notifyModalityPopped(arg0: java.awt.Dialog): void
            public static isLightweightOrUnknown(arg0: java.awt.Component): boolean
            public realSync(): void
            public realSync(arg0: long): void
            protected syncNativeQueue(arg0: long): boolean
            protected waitForIdle(arg0: long): boolean
            public grab(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public ungrab(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public static closeSplashScreen(): void
            public static setAAFontSettingsCondition(arg0: boolean): void
            protected getDesktopAAHints(): java.awt.RenderingHints
            public static getDesktopFontHints(): java.awt.RenderingHints
            public isDesktopSupported(): boolean
            public static consumeNextKeyTyped(arg0: java.awt.event.KeyEvent): void
            protected static dumpPeers(arg0: sun.util.logging.PlatformLogger): void
            public static getContainingWindow(arg0: java.awt.Component): java.awt.Window
            public static getSunAwtDisableMixing(): boolean
            public isNativeGTKAvailable(): boolean
            public setWindowDeactivationTime(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: long): void
            public getWindowDeactivationTime(arg0: java.awt.Window | java.awt.Window$$Lambda): long
            public isWindowOpacitySupported(): boolean
            public isWindowShapingSupported(): boolean
            public isWindowTranslucencySupported(): boolean
            public isTranslucencyCapable(arg0: java.awt.GraphicsConfiguration): boolean
            public isSwingBackbufferTranslucencySupported(): boolean
            public static isContainingTopLevelOpaque(arg0: java.awt.Component): boolean
            public static isContainingTopLevelTranslucent(arg0: java.awt.Component): boolean
            public needUpdateWindow(): boolean
            public getNumberOfButtons(): int
            public static isInstanceOf(arg0: java.lang.Object, arg1: java.lang.String | string): boolean
            protected static getLightweightFrame(arg0: java.awt.Component): sun.awt.LightweightFrame
            public static setSystemGenerated(arg0: java.awt.AWTEvent): void
            public static isSystemGenerated(arg0: java.awt.AWTEvent): boolean
            public static class: java.lang.Class<any>
        }
        abstract class SunToolkit$$Lambda extends java.awt.Toolkit implements sun.awt.WindowClosingSupport , sun.awt.WindowClosingListener , sun.awt.ComponentFactory , sun.awt.InputMethodSupport , sun.awt.KeyboardFocusManagerPeerProvider {
            public static GRAB_EVENT_MASK: int
        }
        class Symbol extends java.nio.charset.Charset {
            public constructor()
            public newEncoder(): java.nio.charset.CharsetEncoder
            public newDecoder(): java.nio.charset.CharsetDecoder
            public contains(arg0: java.nio.charset.Charset): boolean
            public static class: java.lang.Class<any>
        }
        class TimedWindowEvent extends java.awt.event.WindowEvent {
            public getWhen(): long
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int, arg2: java.awt.Window | java.awt.Window$$Lambda, arg3: long)
            public constructor(arg0: java.awt.Window | java.awt.Window$$Lambda, arg1: int, arg2: java.awt.Window | java.awt.Window$$Lambda, arg3: int, arg4: int, arg5: long)
            public static class: java.lang.Class<any>
        }
        class TracedEventQueue extends java.awt.EventQueue {
            public constructor()
            public postEvent(arg0: java.awt.AWTEvent): void
            public static class: java.lang.Class<any>
        }
        class UngrabEvent extends java.awt.AWTEvent {
            public constructor(arg0: java.awt.Component)
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface WindowIDProvider {
            getWindow(): long
        }
        interface WindowIDProvider$$Lambda {
            (): long
        }
    }
    namespace font {
        class AttributeMap extends java.util.AbstractMap<java.awt.font.TextAttribute, java.lang.Object> {
            public constructor(arg0: sun.font.AttributeValues)
            public entrySet(): java.util.Set<java.util.Map$Entry<java.awt.font.TextAttribute, java.lang.Object>>
            public put(arg0: java.awt.font.TextAttribute, arg1: java.lang.Object): java.lang.Object
            public getValues(): sun.font.AttributeValues
            public toString(): string
            public put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class AttributeValues implements java.lang.Cloneable {
            public static MASK_ALL: int
            public constructor()
            public getFamily(): string
            public setFamily(arg0: java.lang.String | string): void
            public getWeight(): float
            public setWeight(arg0: float): void
            public getWidth(): float
            public setWidth(arg0: float): void
            public getPosture(): float
            public setPosture(arg0: float): void
            public getSize(): float
            public setSize(arg0: float): void
            public getTransform(): java.awt.geom.AffineTransform
            public setTransform(arg0: java.awt.geom.AffineTransform): void
            public setTransform(arg0: java.awt.font.TransformAttribute): void
            public getSuperscript(): int
            public setSuperscript(arg0: int): void
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public getCharReplacement(): java.awt.font.GraphicAttribute
            public setCharReplacement(arg0: java.awt.font.GraphicAttribute): void
            public getForeground(): java.awt.Paint
            public setForeground(arg0: java.awt.Paint): void
            public getBackground(): java.awt.Paint
            public setBackground(arg0: java.awt.Paint): void
            public getUnderline(): int
            public setUnderline(arg0: int): void
            public getStrikethrough(): boolean
            public setStrikethrough(arg0: boolean): void
            public getRunDirection(): int
            public setRunDirection(arg0: int): void
            public getBidiEmbedding(): int
            public setBidiEmbedding(arg0: int): void
            public getJustification(): float
            public setJustification(arg0: float): void
            public getInputMethodHighlight(): java.lang.Object
            public setInputMethodHighlight(arg0: java.text.Annotation): void
            public setInputMethodHighlight(arg0: java.awt.im.InputMethodHighlight): void
            public getInputMethodUnderline(): int
            public setInputMethodUnderline(arg0: int): void
            public getSwapColors(): boolean
            public setSwapColors(arg0: boolean): void
            public getNumericShaping(): java.awt.font.NumericShaper
            public setNumericShaping(arg0: java.awt.font.NumericShaper): void
            public getKerning(): int
            public setKerning(arg0: int): void
            public getTracking(): float
            public setTracking(arg0: float): void
            public getLigatures(): int
            public setLigatures(arg0: int): void
            public getBaselineTransform(): java.awt.geom.AffineTransform
            public getCharTransform(): java.awt.geom.AffineTransform
            public static getMask(arg0: sun.font.EAttribute): int
            public static getMask(...arg0: sun.font.EAttribute[]): int
            public unsetDefault(): void
            public defineAll(arg0: int): void
            public allDefined(arg0: int): boolean
            public anyDefined(arg0: int): boolean
            public anyNonDefault(arg0: int): boolean
            public isDefined(arg0: sun.font.EAttribute): boolean
            public isNonDefault(arg0: sun.font.EAttribute): boolean
            public setDefault(arg0: sun.font.EAttribute): void
            public unset(arg0: sun.font.EAttribute): void
            public set(arg0: sun.font.EAttribute, arg1: sun.font.AttributeValues): void
            public set(arg0: sun.font.EAttribute, arg1: java.lang.Object): void
            public get(arg0: sun.font.EAttribute): java.lang.Object
            public merge(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>): sun.font.AttributeValues
            public merge(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>, arg1: int): sun.font.AttributeValues
            public merge(arg0: sun.font.AttributeValues): sun.font.AttributeValues
            public merge(arg0: sun.font.AttributeValues, arg1: int): sun.font.AttributeValues
            public static fromMap(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>): sun.font.AttributeValues
            public static fromMap(arg0: java.util.Map<java.text.AttributedCharacterIterator$Attribute, any>, arg1: int): sun.font.AttributeValues
            public toMap(arg0: java.util.Map<java.awt.font.TextAttribute, java.lang.Object>): java.util.Map<java.awt.font.TextAttribute, java.lang.Object>
            public static is16Hashtable(arg0: java.util.Hashtable<java.lang.Object, java.lang.Object>): boolean
            public static fromSerializableHashtable(arg0: java.util.Hashtable<java.lang.Object, java.lang.Object>): sun.font.AttributeValues
            public toSerializableHashtable(): java.util.Hashtable<java.lang.Object, java.lang.Object>
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public equals(arg0: sun.font.AttributeValues): boolean
            public clone(): sun.font.AttributeValues
            public toString(): string
            public static getJustification(arg0: java.util.Map<any, any>): float
            public static getNumericShaping(arg0: java.util.Map<any, any>): java.awt.font.NumericShaper
            public applyIMHighlight(): sun.font.AttributeValues
            public static getBaselineTransform(arg0: java.util.Map<any, any>): java.awt.geom.AffineTransform
            public static getCharTransform(arg0: java.util.Map<any, any>): java.awt.geom.AffineTransform
            public updateDerivedTransforms(): void
            public static extractXRotation(arg0: java.awt.geom.AffineTransform, arg1: boolean): java.awt.geom.AffineTransform
            public static extractYRotation(arg0: java.awt.geom.AffineTransform, arg1: boolean): java.awt.geom.AffineTransform
            public clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class BidiUtils {
            public constructor()
            public static getLevels(arg0: java.text.Bidi, arg1: byte[], arg2: int): void
            public static getLevels(arg0: java.text.Bidi): byte[]
            public static createVisualToLogicalMap(arg0: byte[]): int[]
            public static createInverseMap(arg0: int[]): int[]
            public static createContiguousOrder(arg0: int[]): int[]
            public static createNormalizedMap(arg0: int[], arg1: byte[], arg2: int, arg3: int): int[]
            public static reorderVisually(arg0: byte[], arg1: java.lang.Object[]): void
            public static class: java.lang.Class<any>
        }
        abstract class CMap {
            public static theNullCmap: sun.font.CMap$NullCMapClass
            public static class: java.lang.Class<any>
        }
        abstract class CharToGlyphMapper {
            public static HI_SURROGATE_START: int
            public static HI_SURROGATE_END: int
            public static LO_SURROGATE_START: int
            public static LO_SURROGATE_END: int
            public static UNINITIALIZED_GLYPH: int
            public static INVISIBLE_GLYPH_ID: int
            public static INVISIBLE_GLYPHS: int
            protected missingGlyph: int
            public constructor()
            public getMissingGlyphCode(): int
            public canDisplay(arg0: char): boolean
            public canDisplay(arg0: int): boolean
            public charToGlyph(arg0: char): int
            public charToGlyph(arg0: int): int
            public getNumGlyphs(): int
            public charsToGlyphs(arg0: int, arg1: char[], arg2: int[]): void
            public charsToGlyphsNS(arg0: int, arg1: char[], arg2: int[]): boolean
            public charsToGlyphs(arg0: int, arg1: int[], arg2: int[]): void
            public static class: java.lang.Class<any>
        }
        class CompositeFont extends sun.font.Font2D {
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String[], arg2: java.lang.String[], arg3: int, arg4: int[], arg5: int[], arg6: boolean, arg7: sun.font.SunFontManager)
            public isExcludedChar(arg0: int, arg1: int): boolean
            public getStyleMetrics(arg0: float, arg1: float[], arg2: int): void
            public getNumSlots(): int
            public getSlotFont(arg0: int): sun.font.PhysicalFont
            public isStdComposite(): boolean
            protected getValidatedGlyphCode(arg0: int): int
            public getMapper(): sun.font.CharToGlyphMapper
            public hasSupplementaryChars(): boolean
            public getNumGlyphs(): int
            public getMissingGlyphCode(): int
            public canDisplay(arg0: char): boolean
            public useAAForPtSize(arg0: int): boolean
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class CompositeFontDescriptor {
            public constructor(arg0: java.lang.String | string, arg1: int, arg2: java.lang.String[], arg3: java.lang.String[], arg4: int[], arg5: int[])
            public getFaceName(): string
            public getCoreComponentCount(): int
            public getComponentFaceNames(): java.lang.String[]
            public getComponentFileNames(): java.lang.String[]
            public getExclusionRanges(): int[]
            public getExclusionRangeLimits(): int[]
            public static class: java.lang.Class<any>
        }
        class CompositeGlyphMapper extends sun.font.CharToGlyphMapper {
            public static SLOTMASK: int
            public static GLYPHMASK: int
            public static NBLOCKS: int
            public static BLOCKSZ: int
            public static MAXUNICODE: int
            public constructor(arg0: sun.font.CompositeFont)
            public compositeGlyphCode(arg0: int, arg1: int): int
            public getNumGlyphs(): int
            public charToGlyph(arg0: int): int
            public charToGlyph(arg0: int, arg1: int): int
            public charToGlyph(arg0: char): int
            public charsToGlyphsNS(arg0: int, arg1: char[], arg2: int[]): boolean
            public charsToGlyphs(arg0: int, arg1: char[], arg2: int[]): void
            public charsToGlyphs(arg0: int, arg1: int[], arg2: int[]): void
            public static class: java.lang.Class<any>
        }
        class CompositeStrike extends sun.font.FontStrike {
            public getNumGlyphs(): int
            public static class: java.lang.Class<any>
        }
        class CoreMetrics {
            public ascent: float
            public descent: float
            public leading: float
            public height: float
            public baselineIndex: int
            public baselineOffsets: float[]
            public strikethroughOffset: float
            public strikethroughThickness: float
            public underlineOffset: float
            public underlineThickness: float
            public ssOffset: float
            public italicAngle: float
            public constructor(arg0: float, arg1: float, arg2: float, arg3: float, arg4: int, arg5: float[], arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float)
            public static get(arg0: java.awt.font.LineMetrics): sun.font.CoreMetrics
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public equals(arg0: sun.font.CoreMetrics): boolean
            public effectiveBaselineOffset(arg0: float[]): float
            public static class: java.lang.Class<any>
        }
        class CreatedFontTracker {
            public static MAX_FILE_SIZE: int
            public static MAX_TOTAL_BYTES: int
            public static getTracker(): sun.font.CreatedFontTracker
            public getNumBytes(): int
            public addBytes(arg0: int): void
            public subBytes(arg0: int): void
            public acquirePermit(): boolean
            public releasePermit(): void
            public add(arg0: java.io.File): void
            public set(arg0: java.io.File, arg1: java.io.OutputStream | java.io.OutputStream$$Lambda): void
            public remove(arg0: java.io.File): void
            public static class: java.lang.Class<any>
        }
        class Decoration {
            public static getPlainDecoration(): sun.font.Decoration
            public static getDecoration(arg0: sun.font.AttributeValues): sun.font.Decoration
            public static getDecoration(arg0: java.util.Map): sun.font.Decoration
            public drawTextAndDecorations(arg0: sun.font.Decoration$Label, arg1: java.awt.Graphics2D, arg2: float, arg3: float): void
            public getVisualBounds(arg0: sun.font.Decoration$Label): java.awt.geom.Rectangle2D
            public getCharVisualBounds(arg0: sun.font.Decoration$Label, arg1: int): java.awt.geom.Rectangle2D
            public static class: java.lang.Class<any>
        }
        class DelegatingShape implements java.awt.Shape {
            public constructor(arg0: java.awt.Shape)
            public getBounds(): java.awt.Rectangle
            public getBounds2D(): java.awt.geom.Rectangle2D
            public contains(arg0: double, arg1: double): boolean
            public contains(arg0: java.awt.geom.Point2D): boolean
            public intersects(arg0: double, arg1: double, arg2: double, arg3: double): boolean
            public intersects(arg0: java.awt.geom.Rectangle2D): boolean
            public contains(arg0: double, arg1: double, arg2: double, arg3: double): boolean
            public contains(arg0: java.awt.geom.Rectangle2D): boolean
            public getPathIterator(arg0: java.awt.geom.AffineTransform): java.awt.geom.PathIterator
            public getPathIterator(arg0: java.awt.geom.AffineTransform, arg1: double): java.awt.geom.PathIterator
            public static class: java.lang.Class<any>
        }
        class EAttribute extends java.lang.Enum<sun.font.EAttribute> {
            public static EFAMILY: sun.font.EAttribute
            public static EWEIGHT: sun.font.EAttribute
            public static EWIDTH: sun.font.EAttribute
            public static EPOSTURE: sun.font.EAttribute
            public static ESIZE: sun.font.EAttribute
            public static ETRANSFORM: sun.font.EAttribute
            public static ESUPERSCRIPT: sun.font.EAttribute
            public static EFONT: sun.font.EAttribute
            public static ECHAR_REPLACEMENT: sun.font.EAttribute
            public static EFOREGROUND: sun.font.EAttribute
            public static EBACKGROUND: sun.font.EAttribute
            public static EUNDERLINE: sun.font.EAttribute
            public static ESTRIKETHROUGH: sun.font.EAttribute
            public static ERUN_DIRECTION: sun.font.EAttribute
            public static EBIDI_EMBEDDING: sun.font.EAttribute
            public static EJUSTIFICATION: sun.font.EAttribute
            public static EINPUT_METHOD_HIGHLIGHT: sun.font.EAttribute
            public static EINPUT_METHOD_UNDERLINE: sun.font.EAttribute
            public static ESWAP_COLORS: sun.font.EAttribute
            public static ENUMERIC_SHAPING: sun.font.EAttribute
            public static EKERNING: sun.font.EAttribute
            public static ELIGATURES: sun.font.EAttribute
            public static ETRACKING: sun.font.EAttribute
            public static EBASELINE_TRANSFORM: sun.font.EAttribute
            public static values(): sun.font.EAttribute[]
            public static valueOf(arg0: java.lang.String | string): sun.font.EAttribute
            public static forAttribute(arg0: java.text.AttributedCharacterIterator$Attribute): sun.font.EAttribute
            public toString(): string
            public static class: java.lang.Class<any>
        }
        abstract class ExtendedTextLabel extends sun.font.TextLabel implements sun.font.TextLineComponent {
            public constructor()
            public getNumCharacters(): int
            public getCoreMetrics(): sun.font.CoreMetrics
            public getCharX(arg0: int): float
            public getCharY(arg0: int): float
            public getCharAdvance(arg0: int): float
            public getCharVisualBounds(arg0: int, arg1: float, arg2: float): java.awt.geom.Rectangle2D
            public logicalToVisual(arg0: int): int
            public visualToLogical(arg0: int): int
            public getLineBreakIndex(arg0: int, arg1: float): int
            public getAdvanceBetween(arg0: int, arg1: int): float
            public caretAtOffsetIsValid(arg0: int): boolean
            public getCharVisualBounds(arg0: int): java.awt.geom.Rectangle2D
            public getSubset(arg0: int, arg1: int, arg2: int): sun.font.TextLineComponent
            public getNumJustificationInfos(): int
            public getJustificationInfos(arg0: java.awt.font.GlyphJustificationInfo[], arg1: int, arg2: int, arg3: int): void
            public applyJustificationDeltas(arg0: float[], arg1: int, arg2: boolean[]): sun.font.TextLineComponent
            public static class: java.lang.Class<any>
        }
        class ExtendedTextSourceLabel extends sun.font.ExtendedTextLabel implements sun.font.Decoration$Label {
            public constructor(arg0: sun.font.TextSource, arg1: sun.font.Decoration)
            public constructor(arg0: sun.font.TextSource, arg1: sun.font.ExtendedTextSourceLabel, arg2: int)
            public getLogicalBounds(): java.awt.geom.Rectangle2D
            public getLogicalBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getAdvance(): float
            public getVisualBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getAlignBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getItalicBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
            public isSimple(): boolean
            public getBaselineTransform(): java.awt.geom.AffineTransform
            public handleGetOutline(arg0: float, arg1: float): java.awt.Shape
            public getOutline(arg0: float, arg1: float): java.awt.Shape
            public handleDraw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            protected createLogicalBounds(): java.awt.geom.Rectangle2D
            public handleGetVisualBounds(): java.awt.geom.Rectangle2D
            protected createAlignBounds(): java.awt.geom.Rectangle2D
            public createItalicBounds(): java.awt.geom.Rectangle2D
            protected createGV(): sun.font.StandardGlyphVector
            public getNumCharacters(): int
            public getCoreMetrics(): sun.font.CoreMetrics
            public getCharX(arg0: int): float
            public getCharY(arg0: int): float
            public getCharAdvance(arg0: int): float
            public handleGetCharVisualBounds(arg0: int): java.awt.geom.Rectangle2D
            public getCharVisualBounds(arg0: int, arg1: float, arg2: float): java.awt.geom.Rectangle2D
            public logicalToVisual(arg0: int): int
            public visualToLogical(arg0: int): int
            public getLineBreakIndex(arg0: int, arg1: float): int
            public getAdvanceBetween(arg0: int, arg1: int): float
            public caretAtOffsetIsValid(arg0: int): boolean
            protected createCharinfo(): float[]
            protected l2v(arg0: int): int
            protected v2l(arg0: int): int
            public getSubset(arg0: int, arg1: int, arg2: int): sun.font.TextLineComponent
            public toString(): string
            public getNumJustificationInfos(): int
            public getJustificationInfos(arg0: java.awt.font.GlyphJustificationInfo[], arg1: int, arg2: int, arg3: int): void
            public applyJustificationDeltas(arg0: float[], arg1: int, arg2: boolean[]): sun.font.TextLineComponent
            public static class: java.lang.Class<any>
        }
        abstract class FileFont extends sun.font.PhysicalFont {
            protected useJavaRasterizer: boolean
            protected fileSize: int
            protected scaler: sun.font.FontScaler
            protected checkedNatives: boolean
            protected useNatives: boolean
            protected nativeFonts: sun.font.NativeFont[]
            protected glyphToCharMap: char[]
            protected checkUseNatives(): boolean
            protected close(): void
            public canDoStyle(arg0: int): boolean
            protected getScaler(): sun.font.FontScaler
            protected getUnitsPerEm(): long
            protected getPublicFileName(): string
            public static class: java.lang.Class<any>
        }
        class FileFontStrike extends sun.font.PhysicalStrike {
            public getNumGlyphs(): int
            public getOutlineBounds(arg0: int): java.awt.geom.Rectangle2D
            protected adjustPoint(arg0: java.awt.geom.Point2D$Float): void
            public static class: java.lang.Class<any>
        }
        abstract class Font2D {
            public static FONT_CONFIG_RANK: int
            public static JRE_RANK: int
            public static TTF_RANK: int
            public static TYPE1_RANK: int
            public static NATIVE_RANK: int
            public static UNKNOWN_RANK: int
            public static DEFAULT_RANK: int
            public handle: sun.font.Font2DHandle
            protected familyName: string
            protected fullName: string
            protected style: int
            protected family: sun.font.FontFamily
            protected fontRank: int
            protected mapper: sun.font.CharToGlyphMapper
            protected strikeCache: java.util.concurrent.ConcurrentHashMap<sun.font.FontStrikeDesc, java.lang.ref.Reference>
            protected lastFontStrike: java.lang.ref.Reference
            public static FWIDTH_NORMAL: int
            public static FWEIGHT_NORMAL: int
            public static FWEIGHT_BOLD: int
            public constructor()
            public getStyle(): int
            protected setStyle(): void
            public getWidth(): int
            public getWeight(): int
            protected getValidatedGlyphCode(arg0: int): int
            public getStrike(arg0: java.awt.Font): sun.font.FontStrike
            public getStrike(arg0: java.awt.Font, arg1: java.awt.geom.AffineTransform, arg2: int, arg3: int): sun.font.FontStrike
            public getStrike(arg0: java.awt.Font, arg1: java.awt.geom.AffineTransform, arg2: java.awt.geom.AffineTransform, arg3: int, arg4: int): sun.font.FontStrike
            public getStrike(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext): sun.font.FontStrike
            public getFontMetrics(arg0: java.awt.Font, arg1: java.awt.geom.AffineTransform, arg2: java.lang.Object, arg3: java.lang.Object, arg4: float[]): void
            public getStyleMetrics(arg0: float, arg1: float[], arg2: int): void
            public getFontMetrics(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext, arg2: float[]): void
            protected getTableBytes(arg0: int): byte[]
            protected getLayoutTableCache(): long
            protected getUnitsPerEm(): long
            public canDoStyle(arg0: int): boolean
            public useAAForPtSize(arg0: int): boolean
            public hasSupplementaryChars(): boolean
            public getPostscriptName(): string
            public getFontName(arg0: java.util.Locale): string
            public getFamilyName(arg0: java.util.Locale): string
            public getNumGlyphs(): int
            public charToGlyph(arg0: int): int
            public getMissingGlyphCode(): int
            public canDisplay(arg0: char): boolean
            public canDisplay(arg0: int): boolean
            public getBaselineFor(arg0: char): byte
            public getItalicAngle(arg0: java.awt.Font, arg1: java.awt.geom.AffineTransform, arg2: java.lang.Object, arg3: java.lang.Object): float
            public static class: java.lang.Class<any>
        }
        class Font2DHandle {
            public font2D: sun.font.Font2D
            public constructor(arg0: sun.font.Font2D)
            public static class: java.lang.Class<any>
        }
        abstract class FontAccess {
            public constructor()
            public static setFontAccess(arg0: sun.font.FontAccess): void
            public static getFontAccess(): sun.font.FontAccess
            public getFont2D(arg0: java.awt.Font): sun.font.Font2D
            public setFont2D(arg0: java.awt.Font, arg1: sun.font.Font2DHandle): void
            public setCreatedFont(arg0: java.awt.Font): void
            public isCreatedFont(arg0: java.awt.Font): boolean
            public static class: java.lang.Class<any>
        }
        class FontDesignMetrics extends java.awt.FontMetrics {
            public static getMetrics(arg0: java.awt.Font): sun.font.FontDesignMetrics
            public static getMetrics(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext): sun.font.FontDesignMetrics
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public charWidth(arg0: char): int
            public charWidth(arg0: int): int
            public stringWidth(arg0: java.lang.String | string): int
            public charsWidth(arg0: char[], arg1: int, arg2: int): int
            public getWidths(): int[]
            public getMaxAdvance(): int
            public getAscent(): int
            public getDescent(): int
            public getLeading(): int
            public getHeight(): int
            public static class: java.lang.Class<any>
        }
        class FontFamily {
            protected familyName: string
            protected plain: sun.font.Font2D
            protected bold: sun.font.Font2D
            protected italic: sun.font.Font2D
            protected bolditalic: sun.font.Font2D
            protected logicalFont: boolean
            protected familyRank: int
            public static getFamily(arg0: java.lang.String | string): sun.font.FontFamily
            public static getAllFamilyNames(): java.lang.String[]
            public constructor(arg0: java.lang.String | string, arg1: boolean, arg2: int)
            public getFamilyName(): string
            public getRank(): int
            public setFont(arg0: sun.font.Font2D, arg1: int): void
            public getFontWithExactStyleMatch(arg0: int): sun.font.Font2D
            public getFont(arg0: int): sun.font.Font2D
            public static getLocaleFamily(arg0: java.lang.String | string): sun.font.FontFamily
            public static getAllFontFamilies(): sun.font.FontFamily[]
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class FontLineMetrics extends java.awt.font.LineMetrics implements java.lang.Cloneable {
            public numchars: int
            public cm: sun.font.CoreMetrics
            public frc: java.awt.font.FontRenderContext
            public constructor(arg0: int, arg1: sun.font.CoreMetrics, arg2: java.awt.font.FontRenderContext)
            public getNumChars(): int
            public getAscent(): float
            public getDescent(): float
            public getLeading(): float
            public getHeight(): float
            public getBaselineIndex(): int
            public getBaselineOffsets(): float[]
            public getStrikethroughOffset(): float
            public getStrikethroughThickness(): float
            public getUnderlineOffset(): float
            public getUnderlineThickness(): float
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public clone(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        interface FontManager {
            NO_FALLBACK: int
            PHYSICAL_FALLBACK: int
            LOGICAL_FALLBACK: int
            registerFont(arg0: java.awt.Font): boolean
            deRegisterBadFont(arg0: sun.font.Font2D): void
            findFont2D(arg0: java.lang.String | string, arg1: int, arg2: int): sun.font.Font2D
            createFont2D(arg0: java.io.File, arg1: int, arg2: boolean, arg3: sun.font.CreatedFontTracker): sun.font.Font2D
            usingPerAppContextComposites(): boolean
            getNewComposite(arg0: java.lang.String | string, arg1: int, arg2: sun.font.Font2DHandle): sun.font.Font2DHandle
            preferLocaleFonts(): void
            preferProportionalFonts(): void
        }
        class FontManagerFactory {
            public constructor()
            public static getInstance(): sun.font.FontManager
            public static class: java.lang.Class<any>
        }
        interface FontManagerForSGE extends sun.font.FontManager {
            getCreatedFonts(): java.awt.Font[]
            getCreatedFontFamilyNames(): java.util.TreeMap<java.lang.String, java.lang.String>
            getAllInstalledFonts(): java.awt.Font[]
            getInstalledFontFamilyNames(arg0: java.util.Locale): java.lang.String[]
            useAlternateFontforJALocales(): void
        }
        class FontManagerNativeLibrary {
            public constructor()
            public static load(): void
            public static class: java.lang.Class<any>
        }
        class FontResolver {
            public getFontIndex(arg0: char): int
            public getFontIndex(arg0: int): int
            public nextFontRunIndex(arg0: sun.text.CodePointIterator): int
            public getFont(arg0: int, arg1: java.util.Map): java.awt.Font
            public static getInstance(): sun.font.FontResolver
            public static class: java.lang.Class<any>
        }
        class FontRunIterator {
            public constructor()
            public init(arg0: sun.font.CompositeFont, arg1: char[], arg2: int, arg3: int): void
            public getFont(): sun.font.PhysicalFont
            public getGlyphMask(): int
            public getPos(): int
            public next(arg0: int, arg1: int): boolean
            public next(): boolean
            public static class: java.lang.Class<any>
        }
        abstract class FontScaler implements sun.java2d.DisposerRecord {
            protected font: java.lang.ref.WeakReference<sun.font.Font2D>
            protected nativeScaler: long
            protected disposed: boolean
            public constructor()
            public static getScaler(arg0: sun.font.Font2D, arg1: int, arg2: boolean, arg3: int): sun.font.FontScaler
            public static getNullScaler(): sun.font.FontScaler
            public dispose(): void
            public static class: java.lang.Class<any>
        }
        abstract class FontScaler$$Lambda implements sun.java2d.DisposerRecord {
            protected font: java.lang.ref.WeakReference<sun.font.Font2D>
        }
        class FontScalerException extends java.lang.Exception {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        abstract class FontStrike {
            protected disposer: sun.font.FontStrikeDisposer
            protected desc: sun.font.FontStrikeDesc
            protected strikeMetrics: sun.font.StrikeMetrics
            protected algoStyle: boolean
            protected boldness: float
            protected italic: float
            public constructor()
            public getNumGlyphs(): int
            public static class: java.lang.Class<any>
        }
        class FontStrikeDesc {
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public static getAAHintIntVal(arg0: java.lang.Object, arg1: sun.font.Font2D, arg2: int): int
            public static getAAHintIntVal(arg0: sun.font.Font2D, arg1: java.awt.Font, arg2: java.awt.font.FontRenderContext): int
            public static getFMHintIntVal(arg0: java.lang.Object): int
            public constructor(arg0: java.awt.geom.AffineTransform, arg1: java.awt.geom.AffineTransform, arg2: int, arg3: int, arg4: int)
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class FontStrikeDisposer implements sun.java2d.DisposerRecord , sun.java2d.Disposer$PollDisposable {
            public constructor(arg0: sun.font.Font2D, arg1: sun.font.FontStrikeDesc, arg2: long, arg3: int[])
            public constructor(arg0: sun.font.Font2D, arg1: sun.font.FontStrikeDesc, arg2: long, arg3: long[])
            public constructor(arg0: sun.font.Font2D, arg1: sun.font.FontStrikeDesc, arg2: long)
            public constructor(arg0: sun.font.Font2D, arg1: sun.font.FontStrikeDesc)
            public dispose(): void
            public static class: java.lang.Class<any>
        }
        interface FontSubstitution {
            getCompositeFont2D(): sun.font.CompositeFont
        }
        interface FontSubstitution$$Lambda {
            (): sun.font.CompositeFont
        }
        class FontUtilities {
            public static isSolaris: boolean
            public static isLinux: boolean
            public static isMacOSX: boolean
            public static isSolaris8: boolean
            public static isSolaris9: boolean
            public static isOpenSolaris: boolean
            public static useT2K: boolean
            public static isWindows: boolean
            public static isOpenJDK: boolean
            public static MIN_LAYOUT_CHARCODE: int
            public static MAX_LAYOUT_CHARCODE: int
            public constructor()
            public static getFont2D(arg0: java.awt.Font): sun.font.Font2D
            public static isComplexText(arg0: char[], arg1: int, arg2: int): boolean
            public static isNonSimpleChar(arg0: char): boolean
            public static isComplexCharCode(arg0: int): boolean
            public static getLogger(): sun.util.logging.PlatformLogger
            public static isLogging(): boolean
            public static debugFonts(): boolean
            public static fontSupportsDefaultEncoding(arg0: java.awt.Font): boolean
            public static getCompositeFontUIResource(arg0: java.awt.Font): javax.swing.plaf.FontUIResource
            public static mapFcName(arg0: java.lang.String | string): string
            public static getFontConfigFUIR(arg0: java.lang.String | string, arg1: int, arg2: int): javax.swing.plaf.FontUIResource
            public static textLayoutIsCompatible(arg0: java.awt.Font): boolean
            public static class: java.lang.Class<any>
        }
        class FreetypeFontScaler extends sun.font.FontScaler {
            public constructor(arg0: sun.font.Font2D, arg1: int, arg2: boolean, arg3: int)
            public dispose(): void
            public static class: java.lang.Class<any>
        }
        interface GlyphDisposedListener {
            glyphDisposed(arg0: java.util.ArrayList<java.lang.Long>): void
        }
        interface GlyphDisposedListener$$Lambda {
            (arg0: java.util.ArrayList<java.lang.Long>): void
        }
        class GlyphLayout {
            public static get(arg0: sun.font.GlyphLayout$LayoutEngineFactory): sun.font.GlyphLayout
            public static done(arg0: sun.font.GlyphLayout): void
            public layout(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext, arg2: char[], arg3: int, arg4: int, arg5: int, arg6: sun.font.StandardGlyphVector): sun.font.StandardGlyphVector
            public static class: java.lang.Class<any>
        }
        class GlyphList {
            public static getInstance(): sun.font.GlyphList
            public setFromString(arg0: sun.java2d.loops.FontInfo, arg1: java.lang.String | string, arg2: float, arg3: float): boolean
            public setFromChars(arg0: sun.java2d.loops.FontInfo, arg1: char[], arg2: int, arg3: int, arg4: float, arg5: float): boolean
            public setFromGlyphVector(arg0: sun.java2d.loops.FontInfo, arg1: java.awt.font.GlyphVector, arg2: float, arg3: float): void
            public getBounds(): int[]
            public setGlyphIndex(arg0: int): void
            public getMetrics(): int[]
            public getGrayBits(): byte[]
            public getImages(): long[]
            public usePositions(): boolean
            public getPositions(): float[]
            public getX(): float
            public getY(): float
            public getStrike(): java.lang.Object
            public isSubPixPos(): boolean
            public isRGBOrder(): boolean
            public dispose(): void
            public getNumGlyphs(): int
            public static class: java.lang.Class<any>
        }
        class GraphicComponent implements sun.font.TextLineComponent , sun.font.Decoration$Label {
            public static GRAPHIC_LEADING: float
            public constructor(arg0: java.awt.font.GraphicAttribute, arg1: sun.font.Decoration, arg2: int[], arg3: byte[], arg4: int, arg5: int, arg6: java.awt.geom.AffineTransform)
            public isSimple(): boolean
            public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
            public handleGetVisualBounds(): java.awt.geom.Rectangle2D
            public getCoreMetrics(): sun.font.CoreMetrics
            public static createCoreMetrics(arg0: java.awt.font.GraphicAttribute): sun.font.CoreMetrics
            public getItalicAngle(): float
            public getVisualBounds(): java.awt.geom.Rectangle2D
            public handleGetOutline(arg0: float, arg1: float): java.awt.Shape
            public getBaselineTransform(): java.awt.geom.AffineTransform
            public getOutline(arg0: float, arg1: float): java.awt.Shape
            public handleDraw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            public getCharVisualBounds(arg0: int): java.awt.geom.Rectangle2D
            public getNumCharacters(): int
            public getCharX(arg0: int): float
            public getCharY(arg0: int): float
            public getCharAdvance(arg0: int): float
            public caretAtOffsetIsValid(arg0: int): boolean
            public handleGetCharVisualBounds(arg0: int): java.awt.geom.Rectangle2D
            public getLineBreakIndex(arg0: int, arg1: float): int
            public getAdvanceBetween(arg0: int, arg1: int): float
            public getLogicalBounds(): java.awt.geom.Rectangle2D
            public getAdvance(): float
            public getItalicBounds(): java.awt.geom.Rectangle2D
            public getSubset(arg0: int, arg1: int, arg2: int): sun.font.TextLineComponent
            public toString(): string
            public getNumJustificationInfos(): int
            public getJustificationInfos(arg0: java.awt.font.GlyphJustificationInfo[], arg1: int, arg2: int, arg3: int): void
            public applyJustificationDeltas(arg0: float[], arg1: int, arg2: boolean[]): sun.font.TextLineComponent
            public static class: java.lang.Class<any>
        }
        abstract class LayoutPathImpl extends java.awt.font.LayoutPath {
            public constructor()
            public pointToPath(arg0: double, arg1: double): java.awt.geom.Point2D
            public pathToPoint(arg0: double, arg1: double, arg2: boolean): java.awt.geom.Point2D
            public pointToPath(arg0: double, arg1: double, arg2: java.awt.geom.Point2D): void
            public pathToPoint(arg0: double, arg1: double, arg2: boolean, arg3: java.awt.geom.Point2D): void
            public start(): double
            public end(): double
            public length(): double
            public mapShape(arg0: java.awt.Shape): java.awt.Shape
            public static getPath(arg0: sun.font.LayoutPathImpl$EndType, ...arg1: double[]): sun.font.LayoutPathImpl
            public static class: java.lang.Class<any>
        }
        class NullFontScaler extends sun.font.FontScaler {
            public constructor(arg0: sun.font.Font2D, arg1: int, arg2: boolean, arg3: int)
            public static class: java.lang.Class<any>
        }
        abstract class PhysicalFont extends sun.font.Font2D {
            protected platName: string
            protected nativeNames: java.lang.Object
            public equals(arg0: java.lang.Object): boolean
            public hashCode(): int
            protected constructor()
            public static class: java.lang.Class<any>
        }
        abstract class PhysicalStrike extends sun.font.FontStrike {
            protected mapper: sun.font.CharToGlyphMapper
            protected pScalerContext: long
            protected longGlyphImages: long[]
            protected intGlyphImages: int[]
            protected getImageWithAdvance: boolean
            protected static complexTX: int
            protected constructor()
            public getNumGlyphs(): int
            protected adjustPoint(arg0: java.awt.geom.Point2D$Float): void
            public static class: java.lang.Class<any>
        }
        class Script {
            public static INVALID_CODE: int
            public static COMMON: int
            public static INHERITED: int
            public static ARABIC: int
            public static ARMENIAN: int
            public static BENGALI: int
            public static BOPOMOFO: int
            public static CHEROKEE: int
            public static COPTIC: int
            public static CYRILLIC: int
            public static DESERET: int
            public static DEVANAGARI: int
            public static ETHIOPIC: int
            public static GEORGIAN: int
            public static GOTHIC: int
            public static GREEK: int
            public static GUJARATI: int
            public static GURMUKHI: int
            public static HAN: int
            public static HANGUL: int
            public static HEBREW: int
            public static HIRAGANA: int
            public static KANNADA: int
            public static KATAKANA: int
            public static KHMER: int
            public static LAO: int
            public static LATIN: int
            public static MALAYALAM: int
            public static MONGOLIAN: int
            public static MYANMAR: int
            public static OGHAM: int
            public static OLD_ITALIC: int
            public static ORIYA: int
            public static RUNIC: int
            public static SINHALA: int
            public static SYRIAC: int
            public static TAMIL: int
            public static TELUGU: int
            public static THAANA: int
            public static THAI: int
            public static TIBETAN: int
            public static CANADIAN_ABORIGINAL: int
            public static UCAS: int
            public static YI: int
            public static TAGALOG: int
            public static HANUNOO: int
            public static BUHID: int
            public static TAGBANWA: int
            public static CODE_LIMIT: int
            public constructor()
            public static class: java.lang.Class<any>
        }
        class ScriptRun {
            public constructor()
            public constructor(arg0: char[], arg1: int, arg2: int)
            public init(arg0: char[], arg1: int, arg2: int): void
            public getScriptStart(): int
            public getScriptLimit(): int
            public getScriptCode(): int
            public next(): boolean
            public static class: java.lang.Class<any>
        }
        class ScriptRunData {
            public static getScript(arg0: int): int
            public static class: java.lang.Class<any>
        }
        class StandardGlyphVector extends java.awt.font.GlyphVector {
            public static FLAG_USES_VERTICAL_BASELINE: int
            public static FLAG_USES_VERTICAL_METRICS: int
            public static FLAG_USES_ALTERNATE_ORIENTATION: int
            public constructor(arg0: java.awt.Font, arg1: java.lang.String | string, arg2: java.awt.font.FontRenderContext)
            public constructor(arg0: java.awt.Font, arg1: char[], arg2: java.awt.font.FontRenderContext)
            public constructor(arg0: java.awt.Font, arg1: char[], arg2: int, arg3: int, arg4: java.awt.font.FontRenderContext)
            public constructor(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext, arg2: int[], arg3: float[], arg4: int[], arg5: int)
            public initGlyphVector(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext, arg2: int[], arg3: float[], arg4: int[], arg5: int): void
            public constructor(arg0: java.awt.Font, arg1: java.text.CharacterIterator, arg2: java.awt.font.FontRenderContext)
            public constructor(arg0: java.awt.Font, arg1: int[], arg2: java.awt.font.FontRenderContext)
            public static getStandardGV(arg0: java.awt.font.GlyphVector, arg1: sun.java2d.loops.FontInfo): sun.font.StandardGlyphVector
            public getFont(): java.awt.Font
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public performDefaultLayout(): void
            public getNumGlyphs(): int
            public getGlyphCode(arg0: int): int
            public getGlyphCodes(arg0: int, arg1: int, arg2: int[]): int[]
            public getGlyphCharIndex(arg0: int): int
            public getGlyphCharIndices(arg0: int, arg1: int, arg2: int[]): int[]
            public getLogicalBounds(): java.awt.geom.Rectangle2D
            public getVisualBounds(): java.awt.geom.Rectangle2D
            public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
            public getOutline(): java.awt.Shape
            public getOutline(arg0: float, arg1: float): java.awt.Shape
            public getGlyphOutline(arg0: int): java.awt.Shape
            public getGlyphOutline(arg0: int, arg1: float, arg2: float): java.awt.Shape
            public getGlyphPosition(arg0: int): java.awt.geom.Point2D
            public setGlyphPosition(arg0: int, arg1: java.awt.geom.Point2D): void
            public getGlyphTransform(arg0: int): java.awt.geom.AffineTransform
            public setGlyphTransform(arg0: int, arg1: java.awt.geom.AffineTransform): void
            public getLayoutFlags(): int
            public getGlyphPositions(arg0: int, arg1: int, arg2: float[]): float[]
            public getGlyphLogicalBounds(arg0: int): java.awt.Shape
            public getGlyphVisualBounds(arg0: int): java.awt.Shape
            public getGlyphPixelBounds(arg0: int, arg1: java.awt.font.FontRenderContext, arg2: float, arg3: float): java.awt.Rectangle
            public getGlyphMetrics(arg0: int): java.awt.font.GlyphMetrics
            public getGlyphJustificationInfo(arg0: int): java.awt.font.GlyphJustificationInfo
            public equals(arg0: java.awt.font.GlyphVector): boolean
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public copy(): sun.font.StandardGlyphVector
            public clone(): java.lang.Object
            public setGlyphPositions(arg0: float[], arg1: int, arg2: int, arg3: int): void
            public setGlyphPositions(arg0: float[]): void
            public getGlyphPositions(arg0: float[]): float[]
            public getGlyphTransforms(arg0: int, arg1: int, arg2: java.awt.geom.AffineTransform[]): java.awt.geom.AffineTransform[]
            public getGlyphTransforms(): java.awt.geom.AffineTransform[]
            public setGlyphTransforms(arg0: java.awt.geom.AffineTransform[], arg1: int, arg2: int, arg3: int): void
            public setGlyphTransforms(arg0: java.awt.geom.AffineTransform[]): void
            public getGlyphInfo(): float[]
            public pixellate(arg0: java.awt.font.FontRenderContext, arg1: java.awt.geom.Point2D, arg2: java.awt.Point): void
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class StandardTextSource extends sun.font.TextSource {
            public getChars(): char[]
            public getStart(): int
            public getLength(): int
            public getContextStart(): int
            public getContextLength(): int
            public getLayoutFlags(): int
            public getBidiLevel(): int
            public getFont(): java.awt.Font
            public getFRC(): java.awt.font.FontRenderContext
            public getCoreMetrics(): sun.font.CoreMetrics
            public getSubSource(arg0: int, arg1: int, arg2: int): sun.font.TextSource
            public toString(): string
            public toString(arg0: boolean): string
            public static class: java.lang.Class<any>
        }
        class StrikeCache {
            public constructor()
            public static addGlyphDisposedListener(arg0: sun.font.GlyphDisposedListener | sun.font.GlyphDisposedListener$$Lambda): void
            public static getStrikeRef(arg0: sun.font.FontStrike): java.lang.ref.Reference
            public static getStrikeRef(arg0: sun.font.FontStrike, arg1: boolean): java.lang.ref.Reference
            public static class: java.lang.Class<any>
        }
        class StrikeMetrics {
            public ascentX: float
            public ascentY: float
            public descentX: float
            public descentY: float
            public baselineX: float
            public baselineY: float
            public leadingX: float
            public leadingY: float
            public maxAdvanceX: float
            public maxAdvanceY: float
            public getAscent(): float
            public getDescent(): float
            public getLeading(): float
            public getMaxAdvance(): float
            public toString(): string
            public static class: java.lang.Class<any>
        }
        abstract class SunFontManager implements sun.java2d.FontSupport , sun.font.FontManagerForSGE {
            public static FONTFORMAT_NONE: int
            public static FONTFORMAT_TRUETYPE: int
            public static FONTFORMAT_TYPE1: int
            public static FONTFORMAT_T2K: int
            public static FONTFORMAT_TTC: int
            public static FONTFORMAT_COMPOSITE: int
            public static FONTFORMAT_NATIVE: int
            protected static CHANNELPOOLSIZE: int
            protected fontFileCache: sun.font.FileFont[]
            protected fullNameToFont: java.util.concurrent.ConcurrentHashMap<java.lang.String, sun.font.Font2D>
            public static lucidaFontName: string
            public static jreLibDirName: string
            public static jreFontDirName: string
            protected registeredFontFiles: java.util.HashSet
            protected fontPath: string
            public static noType1Font: boolean
            protected fileCloser: java.lang.Thread
            public static getInstance(): sun.font.SunFontManager
            public getTrueTypeFilter(): java.io.FilenameFilter
            public getType1Filter(): java.io.FilenameFilter
            public usingPerAppContextComposites(): boolean
            public getEUDCFont(): sun.font.TrueTypeFont
            protected constructor()
            public getNewComposite(arg0: java.lang.String | string, arg1: int, arg2: sun.font.Font2DHandle): sun.font.Font2DHandle
            protected registerCompositeFont(arg0: java.lang.String | string, arg1: java.lang.String[], arg2: java.lang.String[], arg3: int, arg4: int[], arg5: int[], arg6: boolean): void
            protected static registerCompositeFont(arg0: java.lang.String | string, arg1: java.lang.String[], arg2: java.lang.String[], arg3: int, arg4: int[], arg5: int[], arg6: boolean, arg7: java.util.concurrent.ConcurrentHashMap<java.lang.String, sun.font.Font2D>): void
            protected addToFontList(arg0: sun.font.PhysicalFont, arg1: int): sun.font.PhysicalFont
            public getRegisteredFonts(): sun.font.Font2D[]
            protected getPhysicalFonts(): sun.font.PhysicalFont[]
            protected initialiseDeferredFonts(): void
            protected registerDeferredJREFonts(arg0: java.lang.String | string): void
            public isDeferredFont(arg0: java.lang.String | string): boolean
            public findJREDeferredFont(arg0: java.lang.String | string, arg1: int): sun.font.PhysicalFont
            public registerDeferredFont(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: java.lang.String[], arg3: int, arg4: boolean, arg5: int): void
            public initialiseDeferredFont(arg0: java.lang.String | string): sun.font.PhysicalFont
            public isRegisteredFontFile(arg0: java.lang.String | string): boolean
            public getRegisteredFontFile(arg0: java.lang.String | string): sun.font.PhysicalFont
            public registerFontFile(arg0: java.lang.String | string, arg1: java.lang.String[], arg2: int, arg3: boolean, arg4: int): sun.font.PhysicalFont
            public registerFonts(arg0: java.lang.String[], arg1: java.lang.String[][], arg2: int, arg3: int, arg4: boolean, arg5: int, arg6: boolean): void
            public getDefaultPhysicalFont(): sun.font.PhysicalFont
            public getDefaultLogicalFont(arg0: int): sun.font.Font2D
            protected populateFontFileNameMap(arg0: java.util.HashMap<java.lang.String, java.lang.String>, arg1: java.util.HashMap<java.lang.String, java.lang.String>, arg2: java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>, arg3: java.util.Locale): void
            public populateHardcodedFileNameMap(): java.util.HashMap<java.lang.String, sun.font.SunFontManager$FamilyDescription>
            protected getFontNamesFromPlatform(): java.lang.String[]
            public gotFontsFromPlatform(): boolean
            public getFileNameForFontName(arg0: java.lang.String | string): string
            protected registerOtherFontFiles(arg0: java.util.HashSet): void
            public getFamilyNamesFromPlatform(arg0: java.util.TreeMap<java.lang.String, java.lang.String>, arg1: java.util.Locale): boolean
            public findFont2D(arg0: java.lang.String | string, arg1: int, arg2: int): sun.font.Font2D
            public usePlatformFontMetrics(): boolean
            public getNumFonts(): int
            protected getFontPath(arg0: boolean): string
            public createFont2D(arg0: java.io.File, arg1: int, arg2: boolean, arg3: sun.font.CreatedFontTracker): sun.font.Font2D
            public getFullNameByFileName(arg0: java.lang.String | string): string
            public deRegisterBadFont(arg0: sun.font.Font2D): void
            public replaceFont(arg0: sun.font.PhysicalFont, arg1: sun.font.PhysicalFont): void
            public maybeUsingAlternateCompositeFonts(): boolean
            public usingAlternateCompositeFonts(): boolean
            public useAlternateFontforJALocales(): void
            public usingAlternateFontforJALocales(): boolean
            public preferLocaleFonts(): void
            public preferProportionalFonts(): void
            public registerFont(arg0: java.awt.Font): boolean
            public getCreatedFontFamilyNames(): java.util.TreeMap<java.lang.String, java.lang.String>
            public getCreatedFonts(): java.awt.Font[]
            protected getPlatformFontDirs(arg0: boolean): java.lang.String[]
            protected getDefaultPlatformFont(): java.lang.String[]
            protected getNativeNames(arg0: java.lang.String | string, arg1: java.lang.String | string): java.lang.String[]
            protected getFileNameFromPlatformName(arg0: java.lang.String | string): string
            public getFontConfiguration(): sun.awt.FontConfiguration
            public getPlatformFontPath(arg0: boolean): string
            public static isOpenJDK(): boolean
            protected loadFonts(): void
            protected registerFontDirs(arg0: java.lang.String | string): void
            public registerFontsInDir(arg0: java.lang.String | string): void
            protected registerFontsInDir(arg0: java.lang.String | string, arg1: boolean, arg2: int, arg3: boolean, arg4: boolean): void
            protected registerFontDir(arg0: java.lang.String | string): void
            public getDefaultFontFile(): string
            protected useAbsoluteFontFileNames(): boolean
            protected createFontConfiguration(): sun.awt.FontConfiguration
            public createFontConfiguration(arg0: boolean, arg1: boolean): sun.awt.FontConfiguration
            public getDefaultFontFaceName(): string
            public loadFontFiles(): void
            protected addFontToPlatformFontPath(arg0: java.lang.String | string): void
            protected registerFontFile(arg0: java.lang.String | string, arg1: java.lang.String[], arg2: int, arg3: boolean): void
            protected registerPlatformFontsUsedByFontConfiguration(): void
            protected addToMissingFontFileList(arg0: java.lang.String | string): void
            public createCompositeFonts(arg0: java.util.concurrent.ConcurrentHashMap<java.lang.String, sun.font.Font2D>, arg1: boolean, arg2: boolean): void
            public getAllInstalledFonts(): java.awt.Font[]
            public getInstalledFontFamilyNames(arg0: java.util.Locale): java.lang.String[]
            protected addNativeFontFamilyNames(arg0: java.util.TreeMap<java.lang.String, java.lang.String>, arg1: java.util.Locale): void
            public register1dot0Fonts(): void
            protected getJREFontFamilyNames(arg0: java.util.TreeMap<java.lang.String, java.lang.String>, arg1: java.util.Locale): void
            protected getFontConfigFUIR(arg0: java.lang.String | string, arg1: int, arg2: int): javax.swing.plaf.FontUIResource
            public static class: java.lang.Class<any>
        }
        class SunLayoutEngine implements sun.font.GlyphLayout$LayoutEngine , sun.font.GlyphLayout$LayoutEngineFactory {
            public static instance(): sun.font.GlyphLayout$LayoutEngineFactory
            public getEngine(arg0: sun.font.Font2D, arg1: int, arg2: int): sun.font.GlyphLayout$LayoutEngine
            public getEngine(arg0: sun.font.GlyphLayout$LayoutEngineKey): sun.font.GlyphLayout$LayoutEngine
            public layout(arg0: sun.font.FontStrikeDesc, arg1: float[], arg2: int, arg3: int, arg4: sun.font.TextRecord, arg5: int, arg6: java.awt.geom.Point2D$Float, arg7: sun.font.GlyphLayout$GVData): void
            public static class: java.lang.Class<any>
        }
        abstract class TextLabel {
            public constructor()
            public getVisualBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getLogicalBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getAlignBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getItalicBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getOutline(arg0: float, arg1: float): java.awt.Shape
            public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            public getVisualBounds(): java.awt.geom.Rectangle2D
            public getLogicalBounds(): java.awt.geom.Rectangle2D
            public getAlignBounds(): java.awt.geom.Rectangle2D
            public getItalicBounds(): java.awt.geom.Rectangle2D
            public getOutline(): java.awt.Shape
            public draw(arg0: java.awt.Graphics2D): void
            public static class: java.lang.Class<any>
        }
        class TextLabelFactory {
            public constructor(arg0: java.awt.font.FontRenderContext, arg1: char[], arg2: java.text.Bidi, arg3: int)
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public getLineBidi(): java.text.Bidi
            public setLineContext(arg0: int, arg1: int): void
            public createExtended(arg0: java.awt.Font, arg1: sun.font.CoreMetrics, arg2: sun.font.Decoration, arg3: int, arg4: int): sun.font.ExtendedTextLabel
            public createSimple(arg0: java.awt.Font, arg1: sun.font.CoreMetrics, arg2: int, arg3: int): sun.font.TextLabel
            public static class: java.lang.Class<any>
        }
        interface TextLineComponent {
            LEFT_TO_RIGHT: int
            RIGHT_TO_LEFT: int
            UNCHANGED: int
            getCoreMetrics(): sun.font.CoreMetrics
            draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            getCharVisualBounds(arg0: int): java.awt.geom.Rectangle2D
            getVisualBounds(): java.awt.geom.Rectangle2D
            getAdvance(): float
            getOutline(arg0: float, arg1: float): java.awt.Shape
            getNumCharacters(): int
            getCharX(arg0: int): float
            getCharY(arg0: int): float
            getCharAdvance(arg0: int): float
            caretAtOffsetIsValid(arg0: int): boolean
            getLineBreakIndex(arg0: int, arg1: float): int
            getAdvanceBetween(arg0: int, arg1: int): float
            getLogicalBounds(): java.awt.geom.Rectangle2D
            getItalicBounds(): java.awt.geom.Rectangle2D
            getBaselineTransform(): java.awt.geom.AffineTransform
            isSimple(): boolean
            getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
            getSubset(arg0: int, arg1: int, arg2: int): sun.font.TextLineComponent
            getNumJustificationInfos(): int
            getJustificationInfos(arg0: java.awt.font.GlyphJustificationInfo[], arg1: int, arg2: int, arg3: int): void
            applyJustificationDeltas(arg0: float[], arg1: int, arg2: boolean[]): sun.font.TextLineComponent
        }
        class TextRecord {
            public text: char[]
            public start: int
            public limit: int
            public min: int
            public max: int
            public constructor()
            public init(arg0: char[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public static class: java.lang.Class<any>
        }
        abstract class TextSource {
            public static WITHOUT_CONTEXT: boolean
            public static WITH_CONTEXT: boolean
            public constructor()
            public getChars(): char[]
            public getStart(): int
            public getLength(): int
            public getContextStart(): int
            public getContextLength(): int
            public getLayoutFlags(): int
            public getBidiLevel(): int
            public getFont(): java.awt.Font
            public getFRC(): java.awt.font.FontRenderContext
            public getCoreMetrics(): sun.font.CoreMetrics
            public getSubSource(arg0: int, arg1: int, arg2: int): sun.font.TextSource
            public toString(arg0: boolean): string
            public static class: java.lang.Class<any>
        }
        class TextSourceLabel extends sun.font.TextLabel {
            public constructor(arg0: sun.font.TextSource)
            public constructor(arg0: sun.font.TextSource, arg1: java.awt.geom.Rectangle2D, arg2: java.awt.geom.Rectangle2D, arg3: java.awt.font.GlyphVector)
            public getSource(): sun.font.TextSource
            public getLogicalBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getVisualBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getAlignBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getItalicBounds(arg0: float, arg1: float): java.awt.geom.Rectangle2D
            public getPixelBounds(arg0: java.awt.font.FontRenderContext, arg1: float, arg2: float): java.awt.Rectangle
            public getBaselineTransform(): java.awt.geom.AffineTransform
            public getOutline(arg0: float, arg1: float): java.awt.Shape
            public draw(arg0: java.awt.Graphics2D, arg1: float, arg2: float): void
            protected createLogicalBounds(): java.awt.geom.Rectangle2D
            protected createVisualBounds(): java.awt.geom.Rectangle2D
            protected createItalicBounds(): java.awt.geom.Rectangle2D
            protected createAlignBounds(): java.awt.geom.Rectangle2D
            protected createGV(): java.awt.font.GlyphVector
            public static class: java.lang.Class<any>
        }
        class TrueTypeFont extends sun.font.FileFont {
            public static cmapTag: int
            public static glyfTag: int
            public static headTag: int
            public static hheaTag: int
            public static hmtxTag: int
            public static locaTag: int
            public static maxpTag: int
            public static nameTag: int
            public static postTag: int
            public static os_2Tag: int
            public static GDEFTag: int
            public static GPOSTag: int
            public static GSUBTag: int
            public static mortTag: int
            public static fdscTag: int
            public static fvarTag: int
            public static featTag: int
            public static EBLCTag: int
            public static gaspTag: int
            public static ttcfTag: int
            public static v1ttTag: int
            public static trueTag: int
            public static ottoTag: int
            public static MS_PLATFORM_ID: int
            public static ENGLISH_LOCALE_ID: short
            public static FAMILY_NAME_ID: int
            public static FULL_NAME_ID: int
            public static POSTSCRIPT_NAME_ID: int
            public static reserved_bits1: int
            public static reserved_bits2: int
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: int, arg3: boolean)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: int, arg3: boolean, arg4: boolean)
            protected checkUseNatives(): boolean
            protected close(): void
            protected init(arg0: int): void
            protected getLayoutTableCache(): long
            protected getTableBytes(arg0: int): byte[]
            public getFullName(): string
            protected setStyle(): void
            public getWidth(): int
            public getWeight(): int
            public getStyleMetrics(arg0: float, arg1: float[], arg2: int): void
            protected initNames(): void
            protected lookupName(arg0: short, arg1: int): string
            public getFontCount(): int
            protected getScaler(): sun.font.FontScaler
            public getPostscriptName(): string
            public getFontName(arg0: java.util.Locale): string
            public getFamilyName(arg0: java.util.Locale): string
            public getMapper(): sun.font.CharToGlyphMapper
            protected initAllNames(arg0: int, arg1: java.util.HashSet): void
            public useAAForPtSize(arg0: int): boolean
            public hasSupplementaryChars(): boolean
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class TrueTypeGlyphMapper extends sun.font.CharToGlyphMapper {
            public constructor(arg0: sun.font.TrueTypeFont)
            public getNumGlyphs(): int
            public charToGlyph(arg0: char): int
            public charToGlyph(arg0: int): int
            public charsToGlyphs(arg0: int, arg1: int[], arg2: int[]): void
            public charsToGlyphs(arg0: int, arg1: char[], arg2: int[]): void
            public charsToGlyphsNS(arg0: int, arg1: char[], arg2: int[]): boolean
            public static class: java.lang.Class<any>
        }
        class Type1Font extends sun.font.FileFont {
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Object)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.Object, arg2: boolean)
            protected close(): void
            public readBlock(arg0: int, arg1: int): java.nio.ByteBuffer
            public getFileSize(): int
            public getPostscriptName(): string
            protected getScaler(): sun.font.FontScaler
            public getNumGlyphs(): int
            public getMissingGlyphCode(): int
            public getGlyphCode(arg0: char): int
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class Type1GlyphMapper extends sun.font.CharToGlyphMapper {
            public constructor(arg0: sun.font.Type1Font)
            public getNumGlyphs(): int
            public getMissingGlyphCode(): int
            public canDisplay(arg0: char): boolean
            public charToGlyph(arg0: char): int
            public charToGlyph(arg0: int): int
            public charsToGlyphs(arg0: int, arg1: char[], arg2: int[]): void
            public charsToGlyphs(arg0: int, arg1: int[], arg2: int[]): void
            public charsToGlyphsNS(arg0: int, arg1: char[], arg2: int[]): boolean
            public static class: java.lang.Class<any>
        }
        abstract class Underline {
            public static class: java.lang.Class<any>
        }
    }
    namespace java2d {
        namespace cmm {
            namespace lcms {
                class LCMS implements sun.java2d.cmm.PCMM {
                    public loadProfile(arg0: byte[]): sun.java2d.cmm.Profile
                    public freeProfile(arg0: sun.java2d.cmm.Profile): void
                    public getProfileSize(arg0: sun.java2d.cmm.Profile): int
                    public getProfileData(arg0: sun.java2d.cmm.Profile, arg1: byte[]): void
                    public getTagSize(arg0: sun.java2d.cmm.Profile, arg1: int): int
                    public getTagData(arg0: sun.java2d.cmm.Profile, arg1: int, arg2: byte[]): void
                    public setTagData(arg0: sun.java2d.cmm.Profile, arg1: int, arg2: byte[]): void
                    public static getProfileID(arg0: java.awt.color.ICC_Profile): sun.java2d.cmm.lcms.LCMSProfile
                    public createTransform(arg0: java.awt.color.ICC_Profile, arg1: int, arg2: int): sun.java2d.cmm.ColorTransform
                    public createTransform(arg0: sun.java2d.cmm.ColorTransform[]): sun.java2d.cmm.ColorTransform
                    public static colorConvert(arg0: sun.java2d.cmm.lcms.LCMSTransform, arg1: sun.java2d.cmm.lcms.LCMSImageLayout, arg2: sun.java2d.cmm.lcms.LCMSImageLayout): void
                    public static freeTransform(arg0: long): void
                    public static initLCMS(arg0: java.lang.Class, arg1: java.lang.Class, arg2: java.lang.Class): void
                    public static class: java.lang.Class<any>
                }
                class LCMSImageLayout {
                    public static SWAPFIRST: int
                    public static DOSWAP: int
                    public static PT_RGB_8: int
                    public static PT_GRAY_8: int
                    public static PT_GRAY_16: int
                    public static PT_RGBA_8: int
                    public static PT_ARGB_8: int
                    public static PT_BGR_8: int
                    public static PT_ABGR_8: int
                    public static PT_BGRA_8: int
                    public static DT_BYTE: int
                    public static DT_SHORT: int
                    public static DT_INT: int
                    public static DT_DOUBLE: int
                    public static BYTES_SH(arg0: int): int
                    public static EXTRA_SH(arg0: int): int
                    public static CHANNELS_SH(arg0: int): int
                    public constructor(arg0: byte[], arg1: int, arg2: int, arg3: int)
                    public constructor(arg0: short[], arg1: int, arg2: int, arg3: int)
                    public constructor(arg0: int[], arg1: int, arg2: int, arg3: int)
                    public constructor(arg0: double[], arg1: int, arg2: int, arg3: int)
                    public static createImageLayout(arg0: java.awt.image.BufferedImage): sun.java2d.cmm.lcms.LCMSImageLayout
                    public static createImageLayout(arg0: java.awt.image.Raster): sun.java2d.cmm.lcms.LCMSImageLayout
                    public static class: java.lang.Class<any>
                }
                class LCMSProfile extends sun.java2d.cmm.Profile {
                    public static class: java.lang.Class<any>
                }
                class LCMSTransform implements sun.java2d.cmm.ColorTransform {
                    public constructor(arg0: java.awt.color.ICC_Profile, arg1: int, arg2: int)
                    public constructor(arg0: sun.java2d.cmm.ColorTransform[])
                    public getNumInComponents(): int
                    public getNumOutComponents(): int
                    public colorConvert(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): void
                    public colorConvert(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster, arg2: float[], arg3: float[], arg4: float[], arg5: float[]): void
                    public colorConvert(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): void
                    public colorConvert(arg0: short[], arg1: short[]): short[]
                    public colorConvert(arg0: byte[], arg1: byte[]): byte[]
                    public static class: java.lang.Class<any>
                }
                class LcmsServiceProvider extends sun.java2d.cmm.CMMServiceProvider {
                    public constructor()
                    protected getModule(): sun.java2d.cmm.PCMM
                    public static class: java.lang.Class<any>
                }
            }
            abstract class CMMServiceProvider {
                public constructor()
                public getColorManagementModule(): sun.java2d.cmm.PCMM
                protected getModule(): sun.java2d.cmm.PCMM
                public static class: java.lang.Class<any>
            }
            class CMSManager {
                public static GRAYspace: java.awt.color.ColorSpace
                public static LINEAR_RGBspace: java.awt.color.ColorSpace
                public constructor()
                public static getModule(): sun.java2d.cmm.PCMM
                public static class: java.lang.Class<any>
            }
            interface ColorTransform {
                Any: int
                In: int
                Out: int
                Gamut: int
                Simulation: int
                getNumInComponents(): int
                getNumOutComponents(): int
                colorConvert(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImage): void
                colorConvert(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster, arg2: float[], arg3: float[], arg4: float[], arg5: float[]): void
                colorConvert(arg0: java.awt.image.Raster, arg1: java.awt.image.WritableRaster): void
                colorConvert(arg0: short[], arg1: short[]): short[]
                colorConvert(arg0: byte[], arg1: byte[]): byte[]
            }
            interface PCMM {
                loadProfile(arg0: byte[]): sun.java2d.cmm.Profile
                freeProfile(arg0: sun.java2d.cmm.Profile): void
                getProfileSize(arg0: sun.java2d.cmm.Profile): int
                getProfileData(arg0: sun.java2d.cmm.Profile, arg1: byte[]): void
                getTagData(arg0: sun.java2d.cmm.Profile, arg1: int, arg2: byte[]): void
                getTagSize(arg0: sun.java2d.cmm.Profile, arg1: int): int
                setTagData(arg0: sun.java2d.cmm.Profile, arg1: int, arg2: byte[]): void
                createTransform(arg0: java.awt.color.ICC_Profile, arg1: int, arg2: int): sun.java2d.cmm.ColorTransform
                createTransform(arg0: sun.java2d.cmm.ColorTransform[]): sun.java2d.cmm.ColorTransform
            }
            class Profile {
                protected constructor(arg0: long)
                protected getNativePtr(): long
                public static class: java.lang.Class<any>
            }
            interface ProfileActivator {
                activate(): void
            }
            interface ProfileActivator$$Lambda {
                (): void
            }
            class ProfileDataVerifier {
                public constructor()
                public static verify(arg0: byte[]): void
                public static class: java.lang.Class<any>
            }
            class ProfileDeferralInfo extends java.io.InputStream {
                public colorSpaceType: int
                public numComponents: int
                public profileClass: int
                public filename: string
                public constructor(arg0: java.lang.String | string, arg1: int, arg2: int, arg3: int)
                public read(): int
                public static class: java.lang.Class<any>
            }
            class ProfileDeferralMgr {
                public static deferring: boolean
                public constructor()
                public static registerDeferral(arg0: sun.java2d.cmm.ProfileActivator | sun.java2d.cmm.ProfileActivator$$Lambda): void
                public static unregisterDeferral(arg0: sun.java2d.cmm.ProfileActivator | sun.java2d.cmm.ProfileActivator$$Lambda): void
                public static activateProfiles(): void
                public static class: java.lang.Class<any>
            }
        }
        namespace loops {
            class Blit extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.Blit
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.Blit
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public Blit(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: sun.java2d.pipe.Region, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class BlitBg extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.BlitBg
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.BlitBg
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public BlitBg(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: sun.java2d.pipe.Region, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class CompositeType {
                public static DESC_ANY: string
                public static DESC_XOR: string
                public static DESC_CLEAR: string
                public static DESC_SRC: string
                public static DESC_DST: string
                public static DESC_SRC_OVER: string
                public static DESC_DST_OVER: string
                public static DESC_SRC_IN: string
                public static DESC_DST_IN: string
                public static DESC_SRC_OUT: string
                public static DESC_DST_OUT: string
                public static DESC_SRC_ATOP: string
                public static DESC_DST_ATOP: string
                public static DESC_ALPHA_XOR: string
                public static DESC_SRC_NO_EA: string
                public static DESC_SRC_OVER_NO_EA: string
                public static DESC_ANY_ALPHA: string
                public static Any: sun.java2d.loops.CompositeType
                public static General: sun.java2d.loops.CompositeType
                public static AnyAlpha: sun.java2d.loops.CompositeType
                public static Xor: sun.java2d.loops.CompositeType
                public static Clear: sun.java2d.loops.CompositeType
                public static Src: sun.java2d.loops.CompositeType
                public static Dst: sun.java2d.loops.CompositeType
                public static SrcOver: sun.java2d.loops.CompositeType
                public static DstOver: sun.java2d.loops.CompositeType
                public static SrcIn: sun.java2d.loops.CompositeType
                public static DstIn: sun.java2d.loops.CompositeType
                public static SrcOut: sun.java2d.loops.CompositeType
                public static DstOut: sun.java2d.loops.CompositeType
                public static SrcAtop: sun.java2d.loops.CompositeType
                public static DstAtop: sun.java2d.loops.CompositeType
                public static AlphaXor: sun.java2d.loops.CompositeType
                public static SrcNoEa: sun.java2d.loops.CompositeType
                public static SrcOverNoEa: sun.java2d.loops.CompositeType
                public static OpaqueSrcOverNoEa: sun.java2d.loops.CompositeType
                public deriveSubType(arg0: java.lang.String | string): sun.java2d.loops.CompositeType
                public static forAlphaComposite(arg0: java.awt.AlphaComposite | java.awt.AlphaComposite$$Lambda): sun.java2d.loops.CompositeType
                public static makeUniqueID(arg0: java.lang.String | string): int
                public getUniqueID(): int
                public getDescriptor(): string
                public getSuperType(): sun.java2d.loops.CompositeType
                public hashCode(): int
                public isDerivedFrom(arg0: sun.java2d.loops.CompositeType): boolean
                public equals(arg0: java.lang.Object): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class CustomComponent {
                public constructor()
                public static register(): void
                public static getRegionOfInterest(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: sun.java2d.pipe.Region, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int): sun.java2d.pipe.Region
                public static class: java.lang.Class<any>
            }
            class DrawGlyphList extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawGlyphList
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: sun.font.GlyphList): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawGlyphListAA extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawGlyphListAA
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawGlyphListAA(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: sun.font.GlyphList): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawGlyphListLCD extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawGlyphListLCD
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawGlyphListLCD(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: sun.font.GlyphList): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawLine extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawLine
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: int, arg5: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawParallelogram extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawParallelogram
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawPath extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawPath
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawPath(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: java.awt.geom.Path2D$Float): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawPolygons extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawPolygons
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawPolygons(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: int[], arg3: int[], arg4: int[], arg5: int, arg6: int, arg7: int, arg8: boolean): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class DrawRect extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.DrawRect
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public DrawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: int, arg5: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class FillParallelogram extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.FillParallelogram
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public FillParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class FillPath extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.FillPath
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public FillPath(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: java.awt.geom.Path2D$Float): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class FillRect extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.FillRect
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public FillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: int, arg5: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class FillSpans extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.FillSpans
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public FillSpans(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: sun.java2d.pipe.SpanIterator): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class FontInfo implements java.lang.Cloneable {
                public font: java.awt.Font
                public font2D: sun.font.Font2D
                public fontStrike: sun.font.FontStrike
                public devTx: double[]
                public glyphTx: double[]
                public pixelHeight: int
                public originX: float
                public originY: float
                public aaHint: int
                public lcdRGBOrder: boolean
                public lcdSubPixPos: boolean
                public constructor()
                public mtx(arg0: double[]): string
                public clone(): java.lang.Object
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class GeneralRenderer {
                public constructor()
                public static register(): void
                public static doDrawRect(arg0: sun.java2d.loops.PixelWriter, arg1: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg2: sun.java2d.SurfaceData, arg3: int, arg4: int, arg5: int, arg6: int): void
                public static adjustLine(arg0: int[], arg1: int, arg2: int, arg3: int, arg4: int): boolean
                public static class: java.lang.Class<any>
            }
            abstract class GraphicsPrimitive {
                public static traceflags: int
                public static tracefile: string
                public static traceout: java.io.PrintStream
                public static TRACELOG: int
                public static TRACETIMESTAMP: int
                public static TRACECOUNTS: int
                public static makePrimTypeID(): int
                public static makeUniqueID(arg0: int, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType): int
                protected constructor(arg0: java.lang.String | string, arg1: int, arg2: sun.java2d.loops.SurfaceType, arg3: sun.java2d.loops.CompositeType, arg4: sun.java2d.loops.SurfaceType)
                protected constructor(arg0: long, arg1: java.lang.String | string, arg2: int, arg3: sun.java2d.loops.SurfaceType, arg4: sun.java2d.loops.CompositeType, arg5: sun.java2d.loops.SurfaceType)
                public getUniqueID(): int
                public getSignature(): string
                public getPrimTypeID(): int
                public getNativePrim(): long
                public getSourceType(): sun.java2d.loops.SurfaceType
                public getCompositeType(): sun.java2d.loops.CompositeType
                public getDestType(): sun.java2d.loops.SurfaceType
                public satisfies(arg0: java.lang.String | string, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType): boolean
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static tracingEnabled(): boolean
                public static tracePrimitive(arg0: java.lang.Object): void
                protected setupGeneralBinaryOp(arg0: sun.java2d.loops.GraphicsPrimitive$GeneralBinaryOp): void
                protected setupGeneralUnaryOp(arg0: sun.java2d.loops.GraphicsPrimitive$GeneralUnaryOp): void
                protected static createConverter(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.SurfaceType): sun.java2d.loops.Blit
                protected static convertFrom(arg0: sun.java2d.loops.Blit, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: int, arg5: int, arg6: sun.java2d.SurfaceData): sun.java2d.SurfaceData
                protected static convertFrom(arg0: sun.java2d.loops.Blit, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: int, arg5: int, arg6: sun.java2d.SurfaceData, arg7: int): sun.java2d.SurfaceData
                protected static convertTo(arg0: sun.java2d.loops.Blit, arg1: sun.java2d.SurfaceData, arg2: sun.java2d.SurfaceData, arg3: sun.java2d.pipe.Region, arg4: int, arg5: int, arg6: int, arg7: int): void
                protected static getGeneralOp(arg0: int, arg1: sun.java2d.loops.CompositeType): sun.java2d.loops.GraphicsPrimitive
                public static simplename(arg0: java.lang.reflect.Field[], arg1: java.lang.Object): string
                public static simplename(arg0: sun.java2d.loops.SurfaceType): string
                public static simplename(arg0: sun.java2d.loops.CompositeType): string
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class GraphicsPrimitiveMgr {
                public static register(arg0: sun.java2d.loops.GraphicsPrimitive[]): void
                public static registerGeneral(arg0: sun.java2d.loops.GraphicsPrimitive): void
                public static locate(arg0: int, arg1: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public static locate(arg0: int, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public static locatePrim(arg0: int, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public static testPrimitiveInstantiation(): void
                public static testPrimitiveInstantiation(arg0: boolean): void
                public static main(arg0: java.lang.String[]): void
                public static class: java.lang.Class<any>
            }
            class GraphicsPrimitiveProxy extends sun.java2d.loops.GraphicsPrimitive {
                public constructor(arg0: java.lang.Class, arg1: java.lang.String | string, arg2: java.lang.String | string, arg3: int, arg4: sun.java2d.loops.SurfaceType, arg5: sun.java2d.loops.CompositeType, arg6: sun.java2d.loops.SurfaceType)
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class MaskBlit extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.MaskBlit
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.MaskBlit
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public MaskBlit(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: sun.java2d.pipe.Region, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: byte[], arg11: int, arg12: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class MaskFill extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static fillPgramSignature: string
                public static drawPgramSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.MaskFill
                public static locatePrim(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.MaskFill
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.MaskFill
                protected constructor(arg0: java.lang.String | string, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public MaskFill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: int, arg4: int, arg5: int, arg6: int, arg7: byte[], arg8: int, arg9: int): void
                public FillAAPgram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double): void
                public DrawAAPgram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double): void
                public canDoParallelograms(): boolean
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class ProcessPath {
                public static PH_MODE_DRAW_CLIP: int
                public static PH_MODE_FILL_CLIP: int
                public static noopEndSubPathHandler: sun.java2d.loops.ProcessPath$EndSubPathHandler
                public static EPSFX: int
                public static EPSF: float
                public constructor()
                public static fillPath(arg0: sun.java2d.loops.ProcessPath$DrawHandler, arg1: java.awt.geom.Path2D$Float, arg2: int, arg3: int): boolean
                public static drawPath(arg0: sun.java2d.loops.ProcessPath$DrawHandler, arg1: sun.java2d.loops.ProcessPath$EndSubPathHandler, arg2: java.awt.geom.Path2D$Float, arg3: int, arg4: int): boolean
                public static drawPath(arg0: sun.java2d.loops.ProcessPath$DrawHandler, arg1: java.awt.geom.Path2D$Float, arg2: int, arg3: int): boolean
                public static class: java.lang.Class<any>
            }
            class RenderCache {
                public constructor(arg0: int)
                public get(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): java.lang.Object
                public put(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType, arg3: java.lang.Object): void
                public static class: java.lang.Class<any>
            }
            class RenderLoops {
                public static primTypeID: int
                public drawLineLoop: sun.java2d.loops.DrawLine
                public fillRectLoop: sun.java2d.loops.FillRect
                public drawRectLoop: sun.java2d.loops.DrawRect
                public drawPolygonsLoop: sun.java2d.loops.DrawPolygons
                public drawPathLoop: sun.java2d.loops.DrawPath
                public fillPathLoop: sun.java2d.loops.FillPath
                public fillSpansLoop: sun.java2d.loops.FillSpans
                public fillParallelogramLoop: sun.java2d.loops.FillParallelogram
                public drawParallelogramLoop: sun.java2d.loops.DrawParallelogram
                public drawGlyphListLoop: sun.java2d.loops.DrawGlyphList
                public drawGlyphListAALoop: sun.java2d.loops.DrawGlyphListAA
                public drawGlyphListLCDLoop: sun.java2d.loops.DrawGlyphListLCD
                public constructor()
                public static class: java.lang.Class<any>
            }
            class ScaledBlit extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.ScaledBlit
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.ScaledBlit
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public Scale(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: sun.java2d.pipe.Region, arg4: int, arg5: int, arg6: int, arg7: int, arg8: double, arg9: double, arg10: double, arg11: double): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class SurfaceType {
                public static DESC_ANY: string
                public static DESC_INT_RGB: string
                public static DESC_INT_ARGB: string
                public static DESC_INT_ARGB_PRE: string
                public static DESC_INT_BGR: string
                public static DESC_3BYTE_BGR: string
                public static DESC_4BYTE_ABGR: string
                public static DESC_4BYTE_ABGR_PRE: string
                public static DESC_USHORT_565_RGB: string
                public static DESC_USHORT_555_RGB: string
                public static DESC_USHORT_555_RGBx: string
                public static DESC_USHORT_4444_ARGB: string
                public static DESC_BYTE_GRAY: string
                public static DESC_USHORT_INDEXED: string
                public static DESC_USHORT_GRAY: string
                public static DESC_BYTE_BINARY: string
                public static DESC_BYTE_INDEXED: string
                public static DESC_ANY_INT: string
                public static DESC_ANY_SHORT: string
                public static DESC_ANY_BYTE: string
                public static DESC_ANY_3BYTE: string
                public static DESC_ANY_4BYTE: string
                public static DESC_ANY_INT_DCM: string
                public static DESC_INT_RGBx: string
                public static DESC_INT_BGRx: string
                public static DESC_3BYTE_RGB: string
                public static DESC_INT_ARGB_BM: string
                public static DESC_BYTE_INDEXED_BM: string
                public static DESC_BYTE_INDEXED_OPAQUE: string
                public static DESC_INDEX8_GRAY: string
                public static DESC_INDEX12_GRAY: string
                public static DESC_BYTE_BINARY_1BIT: string
                public static DESC_BYTE_BINARY_2BIT: string
                public static DESC_BYTE_BINARY_4BIT: string
                public static DESC_ANY_PAINT: string
                public static DESC_ANY_COLOR: string
                public static DESC_OPAQUE_COLOR: string
                public static DESC_GRADIENT_PAINT: string
                public static DESC_OPAQUE_GRADIENT_PAINT: string
                public static DESC_TEXTURE_PAINT: string
                public static DESC_OPAQUE_TEXTURE_PAINT: string
                public static DESC_LINEAR_GRADIENT_PAINT: string
                public static DESC_OPAQUE_LINEAR_GRADIENT_PAINT: string
                public static DESC_RADIAL_GRADIENT_PAINT: string
                public static DESC_OPAQUE_RADIAL_GRADIENT_PAINT: string
                public static Any: sun.java2d.loops.SurfaceType
                public static AnyInt: sun.java2d.loops.SurfaceType
                public static AnyShort: sun.java2d.loops.SurfaceType
                public static AnyByte: sun.java2d.loops.SurfaceType
                public static AnyByteBinary: sun.java2d.loops.SurfaceType
                public static Any3Byte: sun.java2d.loops.SurfaceType
                public static Any4Byte: sun.java2d.loops.SurfaceType
                public static AnyDcm: sun.java2d.loops.SurfaceType
                public static Custom: sun.java2d.loops.SurfaceType
                public static IntRgb: sun.java2d.loops.SurfaceType
                public static IntArgb: sun.java2d.loops.SurfaceType
                public static IntArgbPre: sun.java2d.loops.SurfaceType
                public static IntBgr: sun.java2d.loops.SurfaceType
                public static ThreeByteBgr: sun.java2d.loops.SurfaceType
                public static FourByteAbgr: sun.java2d.loops.SurfaceType
                public static FourByteAbgrPre: sun.java2d.loops.SurfaceType
                public static Ushort565Rgb: sun.java2d.loops.SurfaceType
                public static Ushort555Rgb: sun.java2d.loops.SurfaceType
                public static Ushort555Rgbx: sun.java2d.loops.SurfaceType
                public static Ushort4444Argb: sun.java2d.loops.SurfaceType
                public static UshortIndexed: sun.java2d.loops.SurfaceType
                public static ByteGray: sun.java2d.loops.SurfaceType
                public static UshortGray: sun.java2d.loops.SurfaceType
                public static ByteBinary1Bit: sun.java2d.loops.SurfaceType
                public static ByteBinary2Bit: sun.java2d.loops.SurfaceType
                public static ByteBinary4Bit: sun.java2d.loops.SurfaceType
                public static ByteIndexed: sun.java2d.loops.SurfaceType
                public static IntRgbx: sun.java2d.loops.SurfaceType
                public static IntBgrx: sun.java2d.loops.SurfaceType
                public static ThreeByteRgb: sun.java2d.loops.SurfaceType
                public static IntArgbBm: sun.java2d.loops.SurfaceType
                public static ByteIndexedBm: sun.java2d.loops.SurfaceType
                public static ByteIndexedOpaque: sun.java2d.loops.SurfaceType
                public static Index8Gray: sun.java2d.loops.SurfaceType
                public static Index12Gray: sun.java2d.loops.SurfaceType
                public static AnyPaint: sun.java2d.loops.SurfaceType
                public static AnyColor: sun.java2d.loops.SurfaceType
                public static OpaqueColor: sun.java2d.loops.SurfaceType
                public static GradientPaint: sun.java2d.loops.SurfaceType
                public static OpaqueGradientPaint: sun.java2d.loops.SurfaceType
                public static LinearGradientPaint: sun.java2d.loops.SurfaceType
                public static OpaqueLinearGradientPaint: sun.java2d.loops.SurfaceType
                public static RadialGradientPaint: sun.java2d.loops.SurfaceType
                public static OpaqueRadialGradientPaint: sun.java2d.loops.SurfaceType
                public static TexturePaint: sun.java2d.loops.SurfaceType
                public static OpaqueTexturePaint: sun.java2d.loops.SurfaceType
                protected pixelConverter: sun.awt.image.PixelConverter
                public deriveSubType(arg0: java.lang.String | string): sun.java2d.loops.SurfaceType
                public deriveSubType(arg0: java.lang.String | string, arg1: sun.awt.image.PixelConverter): sun.java2d.loops.SurfaceType
                public static makeUniqueID(arg0: java.lang.String | string): int
                public getUniqueID(): int
                public getDescriptor(): string
                public getSuperType(): sun.java2d.loops.SurfaceType
                public getPixelConverter(): sun.awt.image.PixelConverter
                public pixelFor(arg0: int, arg1: java.awt.image.ColorModel): int
                public rgbFor(arg0: int, arg1: java.awt.image.ColorModel): int
                public getAlphaMask(): int
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public toString(): string
                public static class: java.lang.Class<any>
            }
            class TransformBlit extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.TransformBlit
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.TransformBlit
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public Transform(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: sun.java2d.pipe.Region, arg4: java.awt.geom.AffineTransform, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class TransformHelper extends sun.java2d.loops.GraphicsPrimitive {
                public static methodSignature: string
                public static primTypeID: int
                public static locate(arg0: sun.java2d.loops.SurfaceType): sun.java2d.loops.TransformHelper
                public static getFromCache(arg0: sun.java2d.loops.SurfaceType): sun.java2d.loops.TransformHelper
                protected constructor(arg0: sun.java2d.loops.SurfaceType)
                public constructor(arg0: long, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public Transform(arg0: sun.java2d.loops.MaskBlit, arg1: sun.java2d.SurfaceData, arg2: sun.java2d.SurfaceData, arg3: java.awt.Composite | java.awt.Composite$$Lambda, arg4: sun.java2d.pipe.Region, arg5: java.awt.geom.AffineTransform, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int[], arg16: int, arg17: int): void
                public makePrimitive(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.GraphicsPrimitive
                public traceWrap(): sun.java2d.loops.GraphicsPrimitive
                public static class: java.lang.Class<any>
            }
            class XORComposite implements java.awt.Composite {
                public constructor(arg0: java.awt.Color, arg1: sun.java2d.SurfaceData)
                public getXorColor(): java.awt.Color
                public getXorPixel(): int
                public getAlphaMask(): int
                public createContext(arg0: java.awt.image.ColorModel, arg1: java.awt.image.ColorModel, arg2: java.awt.RenderingHints): java.awt.CompositeContext
                public static class: java.lang.Class<any>
            }
            class XORComposite$$Lambda implements java.awt.Composite {
                public constructor(arg0: java.awt.Color, arg1: sun.java2d.SurfaceData)
            }
        }
        namespace opengl {
            class OGLBlitLoops {
                public static class: java.lang.Class<any>
            }
            class OGLBufImgOps extends sun.java2d.pipe.BufferedBufImgOps {
                public static class: java.lang.Class<any>
            }
            class OGLContext extends sun.java2d.pipe.BufferedContext {
                public getRenderQueue(): sun.java2d.pipe.RenderQueue
                public saveState(): void
                public restoreState(): void
                public static class: java.lang.Class<any>
            }
            class OGLDrawImage extends sun.java2d.pipe.DrawImage {
                public constructor()
                protected renderImageXform(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color): void
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.BufferedImageOp, arg3: int, arg4: int): void
                public static class: java.lang.Class<any>
            }
            interface OGLGraphicsConfig extends sun.java2d.pipe.hw.AccelGraphicsConfig , sun.awt.image.SurfaceManager$ProxiedGraphicsConfig {
                getContext(): sun.java2d.opengl.OGLContext
                getNativeConfigInfo(): long
                isCapPresent(arg0: int): boolean
                createManagedSurface(arg0: int, arg1: int, arg2: int): sun.java2d.SurfaceData
                getContext(): sun.java2d.pipe.BufferedContext
            }
            class OGLMaskBlit extends sun.java2d.pipe.BufferedMaskBlit {
                protected validateContext(arg0: sun.java2d.SurfaceData, arg1: java.awt.Composite | java.awt.Composite$$Lambda, arg2: sun.java2d.pipe.Region): void
                public static class: java.lang.Class<any>
            }
            class OGLMaskFill extends sun.java2d.pipe.BufferedMaskFill {
                protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType)
                protected maskFill(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: byte[]): void
                protected validateContext(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Composite | java.awt.Composite$$Lambda, arg2: int): void
                public static class: java.lang.Class<any>
            }
            abstract class OGLPaints {
                public static class: java.lang.Class<any>
            }
            class OGLRenderQueue extends sun.java2d.pipe.RenderQueue {
                public static getInstance(): sun.java2d.opengl.OGLRenderQueue
                public static sync(): void
                public static disposeGraphicsConfig(arg0: long): void
                public static isQueueFlusherThread(): boolean
                public flushNow(): void
                public flushAndInvokeNow(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
                public static class: java.lang.Class<any>
            }
            class OGLRenderer extends sun.java2d.pipe.BufferedRenderPipe {
                protected validateContext(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
                protected validateContextAA(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
                protected drawPoly(arg0: int[], arg1: int[], arg2: int, arg3: boolean, arg4: int, arg5: int): void
                public static class: java.lang.Class<any>
            }
            abstract class OGLSurfaceData extends sun.java2d.SurfaceData implements sun.java2d.pipe.hw.AccelSurface {
                public static PBUFFER: int
                public static FBOBJECT: int
                public static PF_INT_ARGB: int
                public static PF_INT_ARGB_PRE: int
                public static PF_INT_RGB: int
                public static PF_INT_RGBX: int
                public static PF_INT_BGR: int
                public static PF_INT_BGRX: int
                public static PF_USHORT_565_RGB: int
                public static PF_USHORT_555_RGB: int
                public static PF_USHORT_555_RGBX: int
                public static PF_BYTE_GRAY: int
                public static PF_USHORT_GRAY: int
                public static PF_3BYTE_BGR: int
                protected type: int
                protected static oglRenderPipe: sun.java2d.opengl.OGLRenderer
                protected static oglTxRenderPipe: sun.java2d.pipe.PixelToParallelogramConverter
                protected static oglAAPgramPipe: sun.java2d.pipe.ParallelogramPipe
                protected static oglTextPipe: sun.java2d.opengl.OGLTextRenderer
                protected static oglImagePipe: sun.java2d.opengl.OGLDrawImage
                protected initTexture(arg0: long, arg1: boolean, arg2: boolean, arg3: boolean, arg4: int, arg5: int): boolean
                protected initFBObject(arg0: long, arg1: boolean, arg2: boolean, arg3: boolean, arg4: int, arg5: int): boolean
                protected initFlipBackbuffer(arg0: long): boolean
                protected initPbuffer(arg0: long, arg1: long, arg2: boolean, arg3: int, arg4: int): boolean
                protected constructor(arg0: sun.java2d.opengl.OGLGraphicsConfig, arg1: java.awt.image.ColorModel, arg2: int)
                public makeProxyFor(arg0: sun.java2d.SurfaceData): sun.java2d.SurfaceDataProxy
                protected initSurface(arg0: int, arg1: int): void
                public getContext(): sun.java2d.opengl.OGLContext
                public getType(): int
                public getTextureTarget(): int
                public getTextureID(): int
                public getNativeResource(arg0: int): long
                public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
                public canRenderLCDText(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): boolean
                public validatePipe(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
                protected getMaskFill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): sun.java2d.loops.MaskFill
                public copyArea(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): boolean
                public flush(): void
                public getNativeBounds(): java.awt.Rectangle
                public getContext(): sun.java2d.pipe.BufferedContext
                public static class: java.lang.Class<any>
            }
            class OGLSurfaceDataProxy extends sun.java2d.SurfaceDataProxy {
                public static createProxy(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.opengl.OGLGraphicsConfig): sun.java2d.SurfaceDataProxy
                public constructor(arg0: sun.java2d.opengl.OGLGraphicsConfig, arg1: int)
                public validateSurfaceData(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int): sun.java2d.SurfaceData
                public isSupportedOperation(arg0: sun.java2d.SurfaceData, arg1: int, arg2: sun.java2d.loops.CompositeType, arg3: java.awt.Color): boolean
                public static class: java.lang.Class<any>
            }
            class OGLTextRenderer extends sun.java2d.pipe.BufferedTextPipe {
                protected drawGlyphList(arg0: int, arg1: boolean, arg2: boolean, arg3: boolean, arg4: int, arg5: float, arg6: float, arg7: long[], arg8: float[]): void
                protected validateContext(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Composite | java.awt.Composite$$Lambda): void
                public static class: java.lang.Class<any>
            }
            class OGLUtilities {
                public static UNDEFINED: int
                public static WINDOW: int
                public static PBUFFER: int
                public static TEXTURE: int
                public static FLIP_BACKBUFFER: int
                public static FBOBJECT: int
                public static isQueueFlusherThread(): boolean
                public static invokeWithOGLContextCurrent(arg0: java.awt.Graphics, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): boolean
                public static invokeWithOGLSharedContextCurrent(arg0: java.awt.GraphicsConfiguration, arg1: java.lang.Runnable | java.lang.Runnable$$Lambda): boolean
                public static getOGLViewport(arg0: java.awt.Graphics, arg1: int, arg2: int): java.awt.Rectangle
                public static getOGLScissorBox(arg0: java.awt.Graphics): java.awt.Rectangle
                public static getOGLSurfaceIdentifier(arg0: java.awt.Graphics): java.lang.Object
                public static getOGLSurfaceType(arg0: java.awt.Graphics): int
                public static getOGLTextureType(arg0: java.awt.Graphics): int
                public static class: java.lang.Class<any>
            }
        }
        namespace pipe {
            namespace hw {
                interface AccelGraphicsConfig extends sun.java2d.pipe.hw.BufferedContextProvider {
                    createCompatibleVolatileImage(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.VolatileImage
                    getContextCapabilities(): sun.java2d.pipe.hw.ContextCapabilities
                    addDeviceEventListener(arg0: sun.java2d.pipe.hw.AccelDeviceEventListener): void
                    removeDeviceEventListener(arg0: sun.java2d.pipe.hw.AccelDeviceEventListener): void
                }
                interface AccelSurface extends sun.java2d.pipe.hw.BufferedContextProvider , sun.java2d.Surface {
                    UNDEFINED: int
                    WINDOW: int
                    RT_PLAIN: int
                    TEXTURE: int
                    FLIP_BACKBUFFER: int
                    RT_TEXTURE: int
                    getType(): int
                    getNativeOps(): long
                    getNativeResource(arg0: int): long
                    markDirty(): void
                    isValid(): boolean
                    isSurfaceLost(): boolean
                    getBounds(): java.awt.Rectangle
                    getNativeBounds(): java.awt.Rectangle
                }
                class AccelTypedVolatileImage extends sun.awt.image.SunVolatileImage {
                    public constructor(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: int, arg4: int)
                    public createGraphics(): java.awt.Graphics2D
                    public static class: java.lang.Class<any>
                }
                interface BufferedContextProvider {
                    getContext(): sun.java2d.pipe.BufferedContext
                }
                interface BufferedContextProvider$$Lambda {
                    (): sun.java2d.pipe.BufferedContext
                }
                class ContextCapabilities {
                    public static CAPS_EMPTY: int
                    public static CAPS_RT_PLAIN_ALPHA: int
                    public static CAPS_RT_TEXTURE_ALPHA: int
                    public static CAPS_RT_TEXTURE_OPAQUE: int
                    public static CAPS_MULTITEXTURE: int
                    public static CAPS_TEXNONPOW2: int
                    public static CAPS_TEXNONSQUARE: int
                    public static CAPS_PS20: int
                    public static CAPS_PS30: int
                    protected static FIRST_PRIVATE_CAP: int
                    protected caps: int
                    protected adapterId: string
                    protected constructor(arg0: int, arg1: java.lang.String | string)
                    public getAdapterId(): string
                    public getCaps(): int
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class ExtendedBufferCapabilities extends java.awt.BufferCapabilities {
                    public constructor(arg0: java.awt.BufferCapabilities)
                    public constructor(arg0: java.awt.ImageCapabilities, arg1: java.awt.ImageCapabilities, arg2: java.awt.BufferCapabilities$FlipContents)
                    public constructor(arg0: java.awt.ImageCapabilities, arg1: java.awt.ImageCapabilities, arg2: java.awt.BufferCapabilities$FlipContents, arg3: sun.java2d.pipe.hw.ExtendedBufferCapabilities$VSyncType)
                    public constructor(arg0: java.awt.BufferCapabilities, arg1: sun.java2d.pipe.hw.ExtendedBufferCapabilities$VSyncType)
                    public derive(arg0: sun.java2d.pipe.hw.ExtendedBufferCapabilities$VSyncType): sun.java2d.pipe.hw.ExtendedBufferCapabilities
                    public getVSync(): sun.java2d.pipe.hw.ExtendedBufferCapabilities$VSyncType
                    public isPageFlipping(): boolean
                    public static class: java.lang.Class<any>
                }
            }
            class AAShapePipe implements sun.java2d.pipe.ShapeDrawPipe , sun.java2d.pipe.ParallelogramPipe {
                public constructor(arg0: sun.java2d.pipe.CompositePipe)
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fillParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double): void
                public drawParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double): void
                public renderPath(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda): void
                public renderTiles(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: sun.java2d.pipe.AATileGenerator, arg3: int[]): void
                public static class: java.lang.Class<any>
            }
            class AATextRenderer extends sun.java2d.pipe.GlyphListLoopPipe implements sun.java2d.pipe.LoopBasedPipe {
                public constructor()
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList): void
                public static class: java.lang.Class<any>
            }
            interface AATileGenerator {
                getTileWidth(): int
                getTileHeight(): int
                getTypicalAlpha(): int
                nextTile(): void
                getAlpha(arg0: byte[], arg1: int, arg2: int): void
                dispose(): void
            }
            class AlphaColorPipe implements sun.java2d.pipe.CompositePipe , sun.java2d.pipe.ParallelogramPipe {
                public constructor()
                public startSequence(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.Rectangle, arg3: int[]): java.lang.Object
                public needTile(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int): boolean
                public renderPathTile(arg0: java.lang.Object, arg1: byte[], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                public skipTile(arg0: java.lang.Object, arg1: int, arg2: int): void
                public endSequence(arg0: java.lang.Object): void
                public fillParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double): void
                public drawParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double): void
                public static class: java.lang.Class<any>
            }
            class AlphaPaintPipe implements sun.java2d.pipe.CompositePipe {
                public constructor()
                public startSequence(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.Rectangle, arg3: int[]): java.lang.Object
                public needTile(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int): boolean
                public renderPathTile(arg0: java.lang.Object, arg1: byte[], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                public skipTile(arg0: java.lang.Object, arg1: int, arg2: int): void
                public endSequence(arg0: java.lang.Object): void
                public static class: java.lang.Class<any>
            }
            class BufferedBufImgOps {
                public constructor()
                public static enableBufImgOp(arg0: sun.java2d.pipe.RenderQueue, arg1: sun.java2d.SurfaceData, arg2: java.awt.image.BufferedImage, arg3: java.awt.image.BufferedImageOp): void
                public static disableBufImgOp(arg0: sun.java2d.pipe.RenderQueue, arg1: java.awt.image.BufferedImageOp): void
                public static isConvolveOpValid(arg0: java.awt.image.ConvolveOp): boolean
                public static isRescaleOpValid(arg0: java.awt.image.RescaleOp, arg1: java.awt.image.BufferedImage): boolean
                public static isLookupOpValid(arg0: java.awt.image.LookupOp, arg1: java.awt.image.BufferedImage): boolean
                public static class: java.lang.Class<any>
            }
            abstract class BufferedContext {
                public static NO_CONTEXT_FLAGS: int
                public static SRC_IS_OPAQUE: int
                public static USE_MASK: int
                protected rq: sun.java2d.pipe.RenderQueue
                protected buf: sun.java2d.pipe.RenderBuffer
                protected static currentContext: sun.java2d.pipe.BufferedContext
                protected constructor(arg0: sun.java2d.pipe.RenderQueue)
                public static validateContext(arg0: sun.java2d.pipe.hw.AccelSurface, arg1: sun.java2d.pipe.hw.AccelSurface, arg2: sun.java2d.pipe.Region, arg3: java.awt.Composite | java.awt.Composite$$Lambda, arg4: java.awt.geom.AffineTransform, arg5: java.awt.Paint, arg6: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg7: int): void
                public static validateContext(arg0: sun.java2d.pipe.hw.AccelSurface): void
                public validate(arg0: sun.java2d.pipe.hw.AccelSurface, arg1: sun.java2d.pipe.hw.AccelSurface, arg2: sun.java2d.pipe.Region, arg3: java.awt.Composite | java.awt.Composite$$Lambda, arg4: java.awt.geom.AffineTransform, arg5: java.awt.Paint, arg6: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg7: int): void
                public invalidateContext(): void
                public getRenderQueue(): sun.java2d.pipe.RenderQueue
                public saveState(): void
                public restoreState(): void
                public static class: java.lang.Class<any>
            }
            abstract class BufferedMaskBlit extends sun.java2d.loops.MaskBlit {
                protected constructor(arg0: sun.java2d.pipe.RenderQueue, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public MaskBlit(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: sun.java2d.pipe.Region, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: byte[], arg11: int, arg12: int): void
                protected validateContext(arg0: sun.java2d.SurfaceData, arg1: java.awt.Composite | java.awt.Composite$$Lambda, arg2: sun.java2d.pipe.Region): void
                public static class: java.lang.Class<any>
            }
            abstract class BufferedMaskFill extends sun.java2d.loops.MaskFill {
                protected rq: sun.java2d.pipe.RenderQueue
                protected constructor(arg0: sun.java2d.pipe.RenderQueue, arg1: sun.java2d.loops.SurfaceType, arg2: sun.java2d.loops.CompositeType, arg3: sun.java2d.loops.SurfaceType)
                public MaskFill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.SurfaceData, arg2: java.awt.Composite | java.awt.Composite$$Lambda, arg3: int, arg4: int, arg5: int, arg6: int, arg7: byte[], arg8: int, arg9: int): void
                protected maskFill(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: byte[]): void
                protected validateContext(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Composite | java.awt.Composite$$Lambda, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class BufferedOpCodes {
                public static DRAW_LINE: int
                public static DRAW_RECT: int
                public static DRAW_POLY: int
                public static DRAW_PIXEL: int
                public static DRAW_SCANLINES: int
                public static DRAW_PARALLELOGRAM: int
                public static DRAW_AAPARALLELOGRAM: int
                public static FILL_RECT: int
                public static FILL_SPANS: int
                public static FILL_PARALLELOGRAM: int
                public static FILL_AAPARALLELOGRAM: int
                public static COPY_AREA: int
                public static BLIT: int
                public static MASK_FILL: int
                public static MASK_BLIT: int
                public static SURFACE_TO_SW_BLIT: int
                public static DRAW_GLYPH_LIST: int
                public static SET_RECT_CLIP: int
                public static BEGIN_SHAPE_CLIP: int
                public static SET_SHAPE_CLIP_SPANS: int
                public static END_SHAPE_CLIP: int
                public static RESET_CLIP: int
                public static SET_ALPHA_COMPOSITE: int
                public static SET_XOR_COMPOSITE: int
                public static RESET_COMPOSITE: int
                public static SET_TRANSFORM: int
                public static RESET_TRANSFORM: int
                public static SET_SURFACES: int
                public static SET_SCRATCH_SURFACE: int
                public static FLUSH_SURFACE: int
                public static DISPOSE_SURFACE: int
                public static DISPOSE_CONFIG: int
                public static INVALIDATE_CONTEXT: int
                public static SYNC: int
                public static RESTORE_DEVICES: int
                public static SAVE_STATE: int
                public static RESTORE_STATE: int
                public static SWAP_BUFFERS: int
                public static NOOP: int
                public static RESET_PAINT: int
                public static SET_COLOR: int
                public static SET_GRADIENT_PAINT: int
                public static SET_LINEAR_GRADIENT_PAINT: int
                public static SET_RADIAL_GRADIENT_PAINT: int
                public static SET_TEXTURE_PAINT: int
                public static ENABLE_CONVOLVE_OP: int
                public static DISABLE_CONVOLVE_OP: int
                public static ENABLE_RESCALE_OP: int
                public static DISABLE_RESCALE_OP: int
                public static ENABLE_LOOKUP_OP: int
                public static DISABLE_LOOKUP_OP: int
                public constructor()
                public static class: java.lang.Class<any>
            }
            class BufferedPaints {
                public static MULTI_MAX_FRACTIONS: int
                public constructor()
                public static convertSRGBtoLinearRGB(arg0: int): int
                public static class: java.lang.Class<any>
            }
            abstract class BufferedRenderPipe implements sun.java2d.pipe.PixelDrawPipe , sun.java2d.pipe.PixelFillPipe , sun.java2d.pipe.ShapeDrawPipe , sun.java2d.pipe.ParallelogramPipe {
                protected rq: sun.java2d.pipe.RenderQueue
                protected buf: sun.java2d.pipe.RenderBuffer
                public constructor(arg0: sun.java2d.pipe.RenderQueue)
                public getAAParallelogramPipe(): sun.java2d.pipe.ParallelogramPipe
                protected validateContext(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
                protected validateContextAA(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
                public drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                protected drawPoly(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int, arg4: boolean): void
                protected drawPoly(arg0: int[], arg1: int[], arg2: int, arg3: boolean, arg4: int, arg5: int): void
                public drawPolyline(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public drawPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public fillPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                protected drawPath(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.geom.Path2D$Float, arg2: int, arg3: int): void
                protected fillPath(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.geom.Path2D$Float, arg2: int, arg3: int): void
                protected fillSpans(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.pipe.SpanIterator, arg2: int, arg3: int): void
                public fillParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double): void
                public drawParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double): void
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public static class: java.lang.Class<any>
            }
            abstract class BufferedTextPipe extends sun.java2d.pipe.GlyphListPipe {
                protected rq: sun.java2d.pipe.RenderQueue
                protected constructor(arg0: sun.java2d.pipe.RenderQueue)
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList): void
                protected drawGlyphList(arg0: int, arg1: boolean, arg2: boolean, arg3: boolean, arg4: int, arg5: float, arg6: float, arg7: long[], arg8: float[]): void
                protected validateContext(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Composite | java.awt.Composite$$Lambda): void
                public static class: java.lang.Class<any>
            }
            interface CompositePipe {
                startSequence(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.Rectangle, arg3: int[]): java.lang.Object
                needTile(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int): boolean
                renderPathTile(arg0: java.lang.Object, arg1: byte[], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                skipTile(arg0: java.lang.Object, arg1: int, arg2: int): void
                endSequence(arg0: java.lang.Object): void
            }
            class DrawImage implements sun.java2d.pipe.DrawImagePipe {
                public constructor()
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: java.awt.Color): boolean
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color): boolean
                protected transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: java.awt.geom.AffineTransform, arg5: int): void
                protected transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color): void
                protected tryCopyOrScale(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color, arg7: int, arg8: double[]): boolean
                protected renderImageXform(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color): void
                protected renderImageCopy(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.Color, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int): boolean
                protected renderImageScale(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.Color, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: double, arg9: double, arg10: double, arg11: double): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: java.awt.Color): boolean
                public static closeToInteger(arg0: int, arg1: double): boolean
                public static isSimpleTranslate(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): boolean
                protected static isBgOperation(arg0: sun.java2d.SurfaceData, arg1: java.awt.Color): boolean
                protected getBufferedImage(arg0: java.awt.Image): java.awt.image.BufferedImage
                protected blitSurfaceData(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.pipe.Region, arg2: sun.java2d.SurfaceData, arg3: sun.java2d.SurfaceData, arg4: sun.java2d.loops.SurfaceType, arg5: sun.java2d.loops.SurfaceType, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: java.awt.Color): void
                protected scaleSurfaceData(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.pipe.Region, arg2: sun.java2d.SurfaceData, arg3: sun.java2d.SurfaceData, arg4: sun.java2d.loops.SurfaceType, arg5: sun.java2d.loops.SurfaceType, arg6: int, arg7: int, arg8: int, arg9: int, arg10: double, arg11: double, arg12: double, arg13: double): boolean
                protected static imageReady(arg0: sun.awt.image.ToolkitImage, arg1: java.awt.image.ImageObserver): boolean
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: java.awt.Color, arg5: java.awt.image.ImageObserver): boolean
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color, arg9: java.awt.image.ImageObserver): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color, arg7: java.awt.image.ImageObserver): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: java.awt.Color, arg11: java.awt.image.ImageObserver): boolean
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: java.awt.image.ImageObserver): boolean
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.BufferedImageOp, arg3: int, arg4: int): void
                public static class: java.lang.Class<any>
            }
            interface DrawImagePipe {
                copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: java.awt.Color, arg5: java.awt.image.ImageObserver): boolean
                copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color, arg9: java.awt.image.ImageObserver): boolean
                scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color, arg7: java.awt.image.ImageObserver): boolean
                scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: java.awt.Color, arg11: java.awt.image.ImageObserver): boolean
                transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: java.awt.image.ImageObserver): boolean
                transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.BufferedImageOp, arg3: int, arg4: int): void
            }
            class GeneralCompositePipe implements sun.java2d.pipe.CompositePipe {
                public constructor()
                public startSequence(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.Rectangle, arg3: int[]): java.lang.Object
                public needTile(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int): boolean
                public renderPathTile(arg0: java.lang.Object, arg1: byte[], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                public skipTile(arg0: java.lang.Object, arg1: int, arg2: int): void
                public endSequence(arg0: java.lang.Object): void
                public static class: java.lang.Class<any>
            }
            abstract class GlyphListLoopPipe extends sun.java2d.pipe.GlyphListPipe implements sun.java2d.pipe.LoopBasedPipe {
                public constructor()
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList, arg2: int): void
                public static class: java.lang.Class<any>
            }
            abstract class GlyphListPipe implements sun.java2d.pipe.TextPipe {
                public constructor()
                public drawString(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.lang.String | string, arg2: double, arg3: double): void
                public drawChars(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: char[], arg2: int, arg3: int, arg4: int, arg5: int): void
                public drawGlyphVector(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.font.GlyphVector, arg2: float, arg3: float): void
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList): void
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList, arg2: int): void
                public static class: java.lang.Class<any>
            }
            class LCDTextRenderer extends sun.java2d.pipe.GlyphListLoopPipe {
                public constructor()
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList): void
                public static class: java.lang.Class<any>
            }
            interface LoopBasedPipe {
            }
            class LoopPipe implements sun.java2d.pipe.PixelDrawPipe , sun.java2d.pipe.PixelFillPipe , sun.java2d.pipe.ParallelogramPipe , sun.java2d.pipe.ShapeDrawPipe , sun.java2d.pipe.LoopBasedPipe {
                public constructor()
                public drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawPolyline(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public drawPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public static getFillSSI(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): sun.java2d.pipe.ShapeSpanIterator
                public static getStrokeSpans(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): sun.java2d.pipe.ShapeSpanIterator
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fillParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double): void
                public drawParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double): void
                public static class: java.lang.Class<any>
            }
            class NullPipe implements sun.java2d.pipe.PixelDrawPipe , sun.java2d.pipe.PixelFillPipe , sun.java2d.pipe.ShapeDrawPipe , sun.java2d.pipe.TextPipe , sun.java2d.pipe.DrawImagePipe {
                public constructor()
                public drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawPolyline(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public drawPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public fillPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public drawString(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.lang.String | string, arg2: double, arg3: double): void
                public drawGlyphVector(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.font.GlyphVector, arg2: float, arg3: float): void
                public drawChars(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: char[], arg2: int, arg3: int, arg4: int, arg5: int): void
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: java.awt.Color, arg5: java.awt.image.ImageObserver): boolean
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color, arg9: java.awt.image.ImageObserver): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color, arg7: java.awt.image.ImageObserver): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: java.awt.Color, arg11: java.awt.image.ImageObserver): boolean
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: java.awt.image.ImageObserver): boolean
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.BufferedImageOp, arg3: int, arg4: int): void
                public static class: java.lang.Class<any>
            }
            class OutlineTextRenderer implements sun.java2d.pipe.TextPipe {
                public static THRESHHOLD: int
                public constructor()
                public drawChars(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: char[], arg2: int, arg3: int, arg4: int, arg5: int): void
                public drawString(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.lang.String | string, arg2: double, arg3: double): void
                public drawGlyphVector(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.font.GlyphVector, arg2: float, arg3: float): void
                public static class: java.lang.Class<any>
            }
            interface ParallelogramPipe {
                fillParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double): void
                drawParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double): void
            }
            interface PixelDrawPipe {
                drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                drawRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                drawOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                drawArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                drawPolyline(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                drawPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
            }
            interface PixelFillPipe {
                fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                fillRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                fillOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                fillArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                fillPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
            }
            class PixelToParallelogramConverter extends sun.java2d.pipe.PixelToShapeConverter implements sun.java2d.pipe.ShapeDrawPipe {
                public constructor(arg0: sun.java2d.pipe.ShapeDrawPipe, arg1: sun.java2d.pipe.ParallelogramPipe, arg2: double, arg3: double, arg4: boolean)
                public drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public drawGeneralLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double): boolean
                public fillRectangle(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double): void
                public drawRectangle(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): void
                public fillOuterParallelogram(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: double, arg9: double, arg10: double, arg11: double, arg12: double, arg13: double, arg14: double): void
                public static class: java.lang.Class<any>
            }
            class PixelToShapeConverter implements sun.java2d.pipe.PixelDrawPipe , sun.java2d.pipe.PixelFillPipe {
                public constructor(arg0: sun.java2d.pipe.ShapeDrawPipe)
                public drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawPolyline(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public drawPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public fillPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public static class: java.lang.Class<any>
            }
            class Region {
                public static EMPTY_REGION: sun.java2d.pipe.Region
                public static WHOLE_REGION: sun.java2d.pipe.Region
                public static dimAdd(arg0: int, arg1: int): int
                public static clipAdd(arg0: int, arg1: int): int
                public static clipScale(arg0: int, arg1: double): int
                protected constructor(arg0: int, arg1: int, arg2: int, arg3: int)
                public static getInstance(arg0: java.awt.Shape, arg1: java.awt.geom.AffineTransform): sun.java2d.pipe.Region
                public static getInstance(arg0: sun.java2d.pipe.Region, arg1: java.awt.Shape, arg2: java.awt.geom.AffineTransform): sun.java2d.pipe.Region
                public static getInstance(arg0: sun.java2d.pipe.Region, arg1: boolean, arg2: java.awt.Shape, arg3: java.awt.geom.AffineTransform): sun.java2d.pipe.Region
                public static getInstance(arg0: java.awt.Rectangle): sun.java2d.pipe.Region
                public static getInstanceXYWH(arg0: int, arg1: int, arg2: int, arg3: int): sun.java2d.pipe.Region
                public static getInstance(arg0: int[]): sun.java2d.pipe.Region
                public static getInstanceXYXY(arg0: int, arg1: int, arg2: int, arg3: int): sun.java2d.pipe.Region
                public setOutputArea(arg0: java.awt.Rectangle): void
                public setOutputAreaXYWH(arg0: int, arg1: int, arg2: int, arg3: int): void
                public setOutputArea(arg0: int[]): void
                public setOutputAreaXYXY(arg0: int, arg1: int, arg2: int, arg3: int): void
                public appendSpans(arg0: sun.java2d.pipe.SpanIterator): void
                public getScaledRegion(arg0: double, arg1: double): sun.java2d.pipe.Region
                public getTranslatedRegion(arg0: int, arg1: int): sun.java2d.pipe.Region
                public getIntersection(arg0: java.awt.Rectangle): sun.java2d.pipe.Region
                public getIntersectionXYWH(arg0: int, arg1: int, arg2: int, arg3: int): sun.java2d.pipe.Region
                public getIntersectionXYXY(arg0: int, arg1: int, arg2: int, arg3: int): sun.java2d.pipe.Region
                public getIntersection(arg0: sun.java2d.pipe.Region): sun.java2d.pipe.Region
                public getUnion(arg0: sun.java2d.pipe.Region): sun.java2d.pipe.Region
                public getDifference(arg0: sun.java2d.pipe.Region): sun.java2d.pipe.Region
                public getExclusiveOr(arg0: sun.java2d.pipe.Region): sun.java2d.pipe.Region
                public getBoundsIntersection(arg0: java.awt.Rectangle): sun.java2d.pipe.Region
                public getBoundsIntersectionXYWH(arg0: int, arg1: int, arg2: int, arg3: int): sun.java2d.pipe.Region
                public getBoundsIntersectionXYXY(arg0: int, arg1: int, arg2: int, arg3: int): sun.java2d.pipe.Region
                public getBoundsIntersection(arg0: sun.java2d.pipe.Region): sun.java2d.pipe.Region
                public getLoX(): int
                public getLoY(): int
                public getHiX(): int
                public getHiY(): int
                public getWidth(): int
                public getHeight(): int
                public isEmpty(): boolean
                public isRectangular(): boolean
                public contains(arg0: int, arg1: int): boolean
                public isInsideXYWH(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                public isInsideXYXY(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                public isInsideQuickCheck(arg0: sun.java2d.pipe.Region): boolean
                public intersectsQuickCheckXYXY(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                public intersectsQuickCheck(arg0: sun.java2d.pipe.Region): boolean
                public encompasses(arg0: sun.java2d.pipe.Region): boolean
                public encompassesXYWH(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                public encompassesXYXY(arg0: int, arg1: int, arg2: int, arg3: int): boolean
                public getBounds(arg0: int[]): void
                public clipBoxToBounds(arg0: int[]): void
                public getIterator(): sun.java2d.pipe.RegionIterator
                public getSpanIterator(): sun.java2d.pipe.SpanIterator
                public getSpanIterator(arg0: int[]): sun.java2d.pipe.SpanIterator
                public filter(arg0: sun.java2d.pipe.SpanIterator): sun.java2d.pipe.SpanIterator
                public toString(): string
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public static class: java.lang.Class<any>
            }
            class RegionClipSpanIterator implements sun.java2d.pipe.SpanIterator {
                public constructor(arg0: sun.java2d.pipe.Region, arg1: sun.java2d.pipe.SpanIterator)
                public getPathBox(arg0: int[]): void
                public intersectClipBox(arg0: int, arg1: int, arg2: int, arg3: int): void
                public nextSpan(arg0: int[]): boolean
                public skipDownTo(arg0: int): void
                public getNativeIterator(): long
                protected finalize(): void
                public static class: java.lang.Class<any>
            }
            class RegionIterator {
                public createCopy(): sun.java2d.pipe.RegionIterator
                public copyStateFrom(arg0: sun.java2d.pipe.RegionIterator): void
                public nextYRange(arg0: int[]): boolean
                public nextXBand(arg0: int[]): boolean
                public static class: java.lang.Class<any>
            }
            class RegionSpanIterator implements sun.java2d.pipe.SpanIterator {
                public constructor(arg0: sun.java2d.pipe.Region)
                public getPathBox(arg0: int[]): void
                public intersectClipBox(arg0: int, arg1: int, arg2: int, arg3: int): void
                public nextSpan(arg0: int[]): boolean
                public skipDownTo(arg0: int): void
                public getNativeIterator(): long
                public static class: java.lang.Class<any>
            }
            class RenderBuffer {
                protected static SIZEOF_BYTE: long
                protected static SIZEOF_SHORT: long
                protected static SIZEOF_INT: long
                protected static SIZEOF_FLOAT: long
                protected static SIZEOF_LONG: long
                protected static SIZEOF_DOUBLE: long
                protected unsafe: sun.misc.Unsafe
                protected baseAddress: long
                protected endAddress: long
                protected curAddress: long
                protected capacity: int
                protected constructor(arg0: int)
                public static allocate(arg0: int): sun.java2d.pipe.RenderBuffer
                public getAddress(): long
                public capacity(): int
                public remaining(): int
                public position(): int
                public position(arg0: long): void
                public clear(): void
                public skip(arg0: long): sun.java2d.pipe.RenderBuffer
                public putByte(arg0: byte): sun.java2d.pipe.RenderBuffer
                public put(arg0: byte[]): sun.java2d.pipe.RenderBuffer
                public put(arg0: byte[], arg1: int, arg2: int): sun.java2d.pipe.RenderBuffer
                public putShort(arg0: short): sun.java2d.pipe.RenderBuffer
                public put(arg0: short[]): sun.java2d.pipe.RenderBuffer
                public put(arg0: short[], arg1: int, arg2: int): sun.java2d.pipe.RenderBuffer
                public putInt(arg0: int, arg1: int): sun.java2d.pipe.RenderBuffer
                public putInt(arg0: int): sun.java2d.pipe.RenderBuffer
                public put(arg0: int[]): sun.java2d.pipe.RenderBuffer
                public put(arg0: int[], arg1: int, arg2: int): sun.java2d.pipe.RenderBuffer
                public putFloat(arg0: float): sun.java2d.pipe.RenderBuffer
                public put(arg0: float[]): sun.java2d.pipe.RenderBuffer
                public put(arg0: float[], arg1: int, arg2: int): sun.java2d.pipe.RenderBuffer
                public putLong(arg0: long): sun.java2d.pipe.RenderBuffer
                public put(arg0: long[]): sun.java2d.pipe.RenderBuffer
                public put(arg0: long[], arg1: int, arg2: int): sun.java2d.pipe.RenderBuffer
                public putDouble(arg0: double): sun.java2d.pipe.RenderBuffer
                public static class: java.lang.Class<any>
            }
            abstract class RenderQueue {
                protected buf: sun.java2d.pipe.RenderBuffer
                protected refSet: java.util.Set
                protected constructor()
                public lock(): void
                public tryLock(): boolean
                public unlock(): void
                public addReference(arg0: java.lang.Object): void
                public getBuffer(): sun.java2d.pipe.RenderBuffer
                public ensureCapacity(arg0: int): void
                public ensureCapacityAndAlignment(arg0: int, arg1: int): void
                public ensureAlignment(arg0: int): void
                public flushNow(): void
                public flushAndInvokeNow(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda): void
                public flushNow(arg0: int): void
                public static class: java.lang.Class<any>
            }
            abstract class RenderingEngine {
                public constructor()
                public static getInstance(): sun.java2d.pipe.RenderingEngine
                public createStrokedShape(arg0: java.awt.Shape, arg1: float, arg2: int, arg3: int, arg4: float, arg5: float[], arg6: float): java.awt.Shape
                public strokeTo(arg0: java.awt.Shape, arg1: java.awt.geom.AffineTransform, arg2: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda, arg3: boolean, arg4: boolean, arg5: boolean, arg6: sun.awt.geom.PathConsumer2D): void
                public getAATileGenerator(arg0: java.awt.Shape, arg1: java.awt.geom.AffineTransform, arg2: sun.java2d.pipe.Region, arg3: java.awt.BasicStroke | java.awt.BasicStroke$$Lambda, arg4: boolean, arg5: boolean, arg6: int[]): sun.java2d.pipe.AATileGenerator
                public getAATileGenerator(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double, arg8: sun.java2d.pipe.Region, arg9: int[]): sun.java2d.pipe.AATileGenerator
                public getMinimumAAPenSize(): float
                public static feedConsumer(arg0: java.awt.geom.PathIterator, arg1: sun.awt.geom.PathConsumer2D): void
                public static class: java.lang.Class<any>
            }
            interface ShapeDrawPipe {
                draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
            }
            class ShapeSpanIterator implements sun.java2d.pipe.SpanIterator , sun.awt.geom.PathConsumer2D {
                public static initIDs(): void
                public constructor(arg0: boolean)
                public appendPath(arg0: java.awt.geom.PathIterator): void
                public appendPoly(arg0: int[], arg1: int[], arg2: int, arg3: int, arg4: int): void
                public setOutputAreaXYWH(arg0: int, arg1: int, arg2: int, arg3: int): void
                public setOutputAreaXYXY(arg0: int, arg1: int, arg2: int, arg3: int): void
                public setOutputArea(arg0: java.awt.Rectangle): void
                public setOutputArea(arg0: sun.java2d.pipe.Region): void
                public setRule(arg0: int): void
                public addSegment(arg0: int, arg1: float[]): void
                public getPathBox(arg0: int[]): void
                public intersectClipBox(arg0: int, arg1: int, arg2: int, arg3: int): void
                public nextSpan(arg0: int[]): boolean
                public skipDownTo(arg0: int): void
                public getNativeIterator(): long
                public dispose(): void
                public moveTo(arg0: float, arg1: float): void
                public lineTo(arg0: float, arg1: float): void
                public quadTo(arg0: float, arg1: float, arg2: float, arg3: float): void
                public curveTo(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
                public closePath(): void
                public pathDone(): void
                public getNativeConsumer(): long
                public static class: java.lang.Class<any>
            }
            class SolidTextRenderer extends sun.java2d.pipe.GlyphListLoopPipe implements sun.java2d.pipe.LoopBasedPipe {
                public constructor()
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList): void
                public static class: java.lang.Class<any>
            }
            class SpanClipRenderer implements sun.java2d.pipe.CompositePipe {
                public constructor(arg0: sun.java2d.pipe.CompositePipe)
                public startSequence(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.Rectangle, arg3: int[]): java.lang.Object
                public needTile(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int): boolean
                public renderPathTile(arg0: java.lang.Object, arg1: byte[], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: sun.java2d.pipe.ShapeSpanIterator): void
                public renderPathTile(arg0: java.lang.Object, arg1: byte[], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): void
                public fillTile(arg0: sun.java2d.pipe.RegionIterator, arg1: byte[], arg2: int, arg3: int, arg4: int[]): void
                public eraseTile(arg0: sun.java2d.pipe.RegionIterator, arg1: byte[], arg2: int, arg3: int, arg4: int[]): void
                public skipTile(arg0: java.lang.Object, arg1: int, arg2: int): void
                public endSequence(arg0: java.lang.Object): void
                public static class: java.lang.Class<any>
            }
            interface SpanIterator {
                getPathBox(arg0: int[]): void
                intersectClipBox(arg0: int, arg1: int, arg2: int, arg3: int): void
                nextSpan(arg0: int[]): boolean
                skipDownTo(arg0: int): void
                getNativeIterator(): long
            }
            abstract class SpanShapeRenderer implements sun.java2d.pipe.ShapeDrawPipe {
                public static NON_RECTILINEAR_TRANSFORM_MASK: int
                public constructor()
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public startSequence(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape, arg2: java.awt.Rectangle, arg3: int[]): java.lang.Object
                public renderBox(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int, arg4: int): void
                public endSequence(arg0: java.lang.Object): void
                public renderRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.geom.Rectangle2D): void
                public renderSpans(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.java2d.pipe.Region, arg2: java.awt.Shape, arg3: sun.java2d.pipe.ShapeSpanIterator): void
                public spanClipLoop(arg0: java.lang.Object, arg1: sun.java2d.pipe.SpanIterator, arg2: sun.java2d.pipe.Region, arg3: int[]): void
                public static class: java.lang.Class<any>
            }
            interface TextPipe {
                drawString(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.lang.String | string, arg2: double, arg3: double): void
                drawGlyphVector(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.font.GlyphVector, arg2: float, arg3: float): void
                drawChars(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: char[], arg2: int, arg3: int, arg4: int, arg5: int): void
            }
            class TextRenderer extends sun.java2d.pipe.GlyphListPipe {
                public constructor(arg0: sun.java2d.pipe.CompositePipe)
                protected drawGlyphList(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: sun.font.GlyphList): void
                public static class: java.lang.Class<any>
            }
            class ValidatePipe implements sun.java2d.pipe.PixelDrawPipe , sun.java2d.pipe.PixelFillPipe , sun.java2d.pipe.ShapeDrawPipe , sun.java2d.pipe.TextPipe , sun.java2d.pipe.DrawImagePipe {
                public constructor()
                public validate(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): boolean
                public drawLine(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillRoundRect(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public fillOval(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int): void
                public drawArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public fillArc(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
                public drawPolyline(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public drawPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public fillPolygon(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int[], arg2: int[], arg3: int): void
                public draw(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public fill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Shape): void
                public drawString(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.lang.String | string, arg2: double, arg3: double): void
                public drawGlyphVector(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.font.GlyphVector, arg2: float, arg3: float): void
                public drawChars(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: char[], arg2: int, arg3: int, arg4: int, arg5: int): void
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: java.awt.Color, arg5: java.awt.image.ImageObserver): boolean
                public copyImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: java.awt.Color, arg9: java.awt.image.ImageObserver): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Color, arg7: java.awt.image.ImageObserver): boolean
                public scaleImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: java.awt.Color, arg11: java.awt.image.ImageObserver): boolean
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.Image, arg2: java.awt.geom.AffineTransform, arg3: java.awt.image.ImageObserver): boolean
                public transformImage(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: java.awt.image.BufferedImage, arg2: java.awt.image.BufferedImageOp, arg3: int, arg4: int): void
                public static class: java.lang.Class<any>
            }
        }
        class DefaultDisposerRecord implements sun.java2d.DisposerRecord {
            public constructor(arg0: long, arg1: long)
            public dispose(): void
            public getDataPointer(): long
            public getDisposerMethodPointer(): long
            public static invokeNativeDispose(arg0: long, arg1: long): void
            public static class: java.lang.Class<any>
        }
        class DefaultDisposerRecord$$Lambda implements sun.java2d.DisposerRecord {
            public constructor(arg0: long, arg1: long)
        }
        interface DestSurfaceProvider {
            getDestSurface(): sun.java2d.Surface
        }
        interface DestSurfaceProvider$$Lambda {
            (): sun.java2d.Surface
        }
        class Disposer implements java.lang.Runnable {
            public static WEAK: int
            public static PHANTOM: int
            public static refType: int
            public static pollingQueue: boolean
            public constructor()
            public static addRecord(arg0: java.lang.Object, arg1: long, arg2: long): void
            public static addRecord(arg0: java.lang.Object, arg1: sun.java2d.DisposerRecord | sun.java2d.DisposerRecord$$Lambda): void
            public run(): void
            public static pollRemove(): void
            public static addReference(arg0: java.lang.ref.Reference, arg1: sun.java2d.DisposerRecord | sun.java2d.DisposerRecord$$Lambda): void
            public static addObjectRecord(arg0: java.lang.Object, arg1: sun.java2d.DisposerRecord | sun.java2d.DisposerRecord$$Lambda): void
            public static getQueue(): java.lang.ref.ReferenceQueue
            public static class: java.lang.Class<any>
        }
        class Disposer$$Lambda implements java.lang.Runnable {
            public static WEAK: int
        }
        interface DisposerRecord {
            dispose(): void
        }
        interface DisposerRecord$$Lambda {
            (): void
        }
        interface DisposerTarget {
            getDisposerReferent(): java.lang.Object
        }
        interface DisposerTarget$$Lambda {
            (): java.lang.Object
        }
        interface FontSupport {
            getFontConfiguration(): sun.awt.FontConfiguration
        }
        interface FontSupport$$Lambda {
            (): sun.awt.FontConfiguration
        }
        class HeadlessGraphicsEnvironment extends java.awt.GraphicsEnvironment {
            public constructor(arg0: java.awt.GraphicsEnvironment)
            public getScreenDevices(): java.awt.GraphicsDevice[]
            public getDefaultScreenDevice(): java.awt.GraphicsDevice
            public getCenterPoint(): java.awt.Point
            public getMaximumWindowBounds(): java.awt.Rectangle
            public createGraphics(arg0: java.awt.image.BufferedImage): java.awt.Graphics2D
            public getAllFonts(): java.awt.Font[]
            public getAvailableFontFamilyNames(): java.lang.String[]
            public getAvailableFontFamilyNames(arg0: java.util.Locale): java.lang.String[]
            public getSunGraphicsEnvironment(): java.awt.GraphicsEnvironment
            public static class: java.lang.Class<any>
        }
        class InvalidPipeException extends java.lang.IllegalStateException {
            public constructor()
            public constructor(arg0: java.lang.String | string)
            public static class: java.lang.Class<any>
        }
        class NullSurfaceData extends sun.java2d.SurfaceData {
            public static theInstance: sun.java2d.SurfaceData
            public invalidate(): void
            public getReplacement(): sun.java2d.SurfaceData
            public validatePipe(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
            public getDeviceConfiguration(): java.awt.GraphicsConfiguration
            public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
            public useTightBBoxes(): boolean
            public pixelFor(arg0: int): int
            public rgbFor(arg0: int): int
            public getBounds(): java.awt.Rectangle
            protected checkCustomComposite(): void
            public copyArea(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): boolean
            public getDestination(): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class Spans {
            public constructor()
            public add(arg0: float, arg1: float): void
            public addInfinite(): void
            public intersects(arg0: float, arg1: float): boolean
            public static class: java.lang.Class<any>
        }
        interface StateTrackable {
            getState(): sun.java2d.StateTrackable$State
            getStateTracker(): sun.java2d.StateTracker
        }
        class StateTrackableDelegate implements sun.java2d.StateTrackable {
            public static UNTRACKABLE_DELEGATE: sun.java2d.StateTrackableDelegate
            public static IMMUTABLE_DELEGATE: sun.java2d.StateTrackableDelegate
            public static createInstance(arg0: sun.java2d.StateTrackable$State): sun.java2d.StateTrackableDelegate
            public getState(): sun.java2d.StateTrackable$State
            public getStateTracker(): sun.java2d.StateTracker
            public setImmutable(): void
            public setUntrackable(): void
            public addDynamicAgent(): void
            protected removeDynamicAgent(): void
            public markDirty(): void
            public static class: java.lang.Class<any>
        }
        interface StateTracker {
            ALWAYS_CURRENT: sun.java2d.StateTracker
            NEVER_CURRENT: sun.java2d.StateTracker
            isCurrent(): boolean
        }
        class SunCompositeContext implements java.awt.CompositeContext {
            public constructor(arg0: java.awt.AlphaComposite | java.awt.AlphaComposite$$Lambda, arg1: java.awt.image.ColorModel, arg2: java.awt.image.ColorModel)
            public constructor(arg0: sun.java2d.loops.XORComposite | sun.java2d.loops.XORComposite$$Lambda, arg1: java.awt.image.ColorModel, arg2: java.awt.image.ColorModel)
            public dispose(): void
            public compose(arg0: java.awt.image.Raster, arg1: java.awt.image.Raster, arg2: java.awt.image.WritableRaster): void
            public static class: java.lang.Class<any>
        }
        class SunGraphics2D extends java.awt.Graphics2D implements sun.awt.ConstrainableGraphics , java.lang.Cloneable , sun.java2d.DestSurfaceProvider {
            public static PAINT_CUSTOM: int
            public static PAINT_TEXTURE: int
            public static PAINT_RAD_GRADIENT: int
            public static PAINT_LIN_GRADIENT: int
            public static PAINT_GRADIENT: int
            public static PAINT_ALPHACOLOR: int
            public static PAINT_OPAQUECOLOR: int
            public static COMP_CUSTOM: int
            public static COMP_XOR: int
            public static COMP_ALPHA: int
            public static COMP_ISCOPY: int
            public static STROKE_CUSTOM: int
            public static STROKE_WIDE: int
            public static STROKE_THINDASHED: int
            public static STROKE_THIN: int
            public static TRANSFORM_GENERIC: int
            public static TRANSFORM_TRANSLATESCALE: int
            public static TRANSFORM_ANY_TRANSLATE: int
            public static TRANSFORM_INT_TRANSLATE: int
            public static TRANSFORM_ISIDENT: int
            public static CLIP_SHAPE: int
            public static CLIP_RECTANGULAR: int
            public static CLIP_DEVICE: int
            public eargb: int
            public pixel: int
            public surfaceData: sun.java2d.SurfaceData
            public drawpipe: sun.java2d.pipe.PixelDrawPipe
            public fillpipe: sun.java2d.pipe.PixelFillPipe
            public imagepipe: sun.java2d.pipe.DrawImagePipe
            public shapepipe: sun.java2d.pipe.ShapeDrawPipe
            public textpipe: sun.java2d.pipe.TextPipe
            public alphafill: sun.java2d.loops.MaskFill
            public loops: sun.java2d.loops.RenderLoops
            public imageComp: sun.java2d.loops.CompositeType
            public paintState: int
            public compositeState: int
            public strokeState: int
            public transformState: int
            public clipState: int
            public foregroundColor: java.awt.Color
            public backgroundColor: java.awt.Color
            public transform: java.awt.geom.AffineTransform
            public transX: int
            public transY: int
            protected static defaultStroke: java.awt.Stroke
            protected static defaultComposite: java.awt.Composite
            public paint: java.awt.Paint
            public stroke: java.awt.Stroke
            public composite: java.awt.Composite
            protected font: java.awt.Font
            protected fontMetrics: java.awt.FontMetrics
            public renderHint: int
            public antialiasHint: int
            public textAntialiasHint: int
            protected fractionalMetricsHint: int
            public lcdTextContrast: int
            public strokeHint: int
            public interpolationType: int
            public hints: java.awt.RenderingHints
            public constrainClip: sun.java2d.pipe.Region
            public constrainX: int
            public constrainY: int
            public clipRegion: sun.java2d.pipe.Region
            public usrClip: java.awt.Shape
            protected devClip: sun.java2d.pipe.Region
            protected static invalidpipe: sun.java2d.pipe.ValidatePipe
            public static MinPenSizeAA: double
            public static MinPenSizeAASquared: double
            public static MinPenSizeSquared: double
            public constructor(arg0: sun.java2d.SurfaceData, arg1: java.awt.Color, arg2: java.awt.Color, arg3: java.awt.Font)
            protected clone(): java.lang.Object
            public create(): java.awt.Graphics
            public setDevClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setDevClip(arg0: java.awt.Rectangle): void
            public constrain(arg0: int, arg1: int, arg2: int, arg3: int, arg4: sun.java2d.pipe.Region): void
            public constrain(arg0: int, arg1: int, arg2: int, arg3: int): void
            protected invalidatePipe(): void
            public validatePipe(): void
            protected static cloneShape(arg0: java.awt.Shape): java.awt.Shape
            public getCompClip(): sun.java2d.pipe.Region
            public getFont(): java.awt.Font
            public checkFontInfo(arg0: sun.java2d.loops.FontInfo, arg1: java.awt.Font, arg2: java.awt.font.FontRenderContext): sun.java2d.loops.FontInfo
            public static isRotated(arg0: double[]): boolean
            public setFont(arg0: java.awt.Font): void
            public getFontInfo(): sun.java2d.loops.FontInfo
            public getGVFontInfo(arg0: java.awt.Font, arg1: java.awt.font.FontRenderContext): sun.java2d.loops.FontInfo
            public getFontMetrics(): java.awt.FontMetrics
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public hit(arg0: java.awt.Rectangle, arg1: java.awt.Shape, arg2: boolean): boolean
            public getDeviceColorModel(): java.awt.image.ColorModel
            public getDeviceConfiguration(): java.awt.GraphicsConfiguration
            public getSurfaceData(): sun.java2d.SurfaceData
            public setComposite(arg0: java.awt.Composite | java.awt.Composite$$Lambda): void
            public setPaint(arg0: java.awt.Paint): void
            public setStroke(arg0: java.awt.Stroke | java.awt.Stroke$$Lambda): void
            public setRenderingHint(arg0: java.awt.RenderingHints$Key, arg1: java.lang.Object): void
            public getRenderingHint(arg0: java.awt.RenderingHints$Key): java.lang.Object
            public setRenderingHints(arg0: java.util.Map<any, any>): void
            public addRenderingHints(arg0: java.util.Map<any, any>): void
            public getRenderingHints(): java.awt.RenderingHints
            public translate(arg0: double, arg1: double): void
            public rotate(arg0: double): void
            public rotate(arg0: double, arg1: double, arg2: double): void
            public scale(arg0: double, arg1: double): void
            public shear(arg0: double, arg1: double): void
            public transform(arg0: java.awt.geom.AffineTransform): void
            public translate(arg0: int, arg1: int): void
            public setTransform(arg0: java.awt.geom.AffineTransform): void
            protected invalidateTransform(): void
            public getTransform(): java.awt.geom.AffineTransform
            public cloneTransform(): java.awt.geom.AffineTransform
            public getPaint(): java.awt.Paint
            public getComposite(): java.awt.Composite
            public getColor(): java.awt.Color
            public setColor(arg0: java.awt.Color): void
            public setBackground(arg0: java.awt.Color): void
            public getBackground(): java.awt.Color
            public getStroke(): java.awt.Stroke
            public getClipBounds(): java.awt.Rectangle
            public getClipBounds(arg0: java.awt.Rectangle): java.awt.Rectangle
            public hitClip(arg0: int, arg1: int, arg2: int, arg3: int): boolean
            protected validateCompClip(): void
            protected transformShape(arg0: java.awt.Shape): java.awt.Shape
            public untransformShape(arg0: java.awt.Shape): java.awt.Shape
            protected static transformShape(arg0: int, arg1: int, arg2: java.awt.Shape): java.awt.Shape
            protected static transformShape(arg0: java.awt.geom.AffineTransform, arg1: java.awt.Shape): java.awt.Shape
            public clipRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getClip(): java.awt.Shape
            public setClip(arg0: java.awt.Shape): void
            public clip(arg0: java.awt.Shape): void
            public setPaintMode(): void
            public setXORMode(arg0: java.awt.Color): void
            public copyArea(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public draw(arg0: java.awt.Shape): void
            public fill(arg0: java.awt.Shape): void
            public drawRenderedImage(arg0: java.awt.image.RenderedImage, arg1: java.awt.geom.AffineTransform): void
            public drawRenderableImage(arg0: java.awt.image.renderable.RenderableImage, arg1: java.awt.geom.AffineTransform): void
            protected transformBounds(arg0: java.awt.Rectangle, arg1: java.awt.geom.AffineTransform): java.awt.Rectangle
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: float, arg2: float): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: float, arg2: float): void
            public drawGlyphVector(arg0: java.awt.font.GlyphVector, arg1: float, arg2: float): void
            public drawChars(arg0: char[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawBytes(arg0: byte[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public copyImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: java.awt.Color, arg8: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImageOp, arg2: int, arg3: int): void
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public dispose(): void
            public finalize(): void
            public getDestination(): java.lang.Object
            public getDestSurface(): sun.java2d.Surface
            public static class: java.lang.Class<any>
        }
        class SunGraphics2D$$Lambda extends java.awt.Graphics2D implements sun.awt.ConstrainableGraphics , java.lang.Cloneable , sun.java2d.DestSurfaceProvider {
            public static PAINT_CUSTOM: int
        }
        abstract class SunGraphicsEnvironment extends java.awt.GraphicsEnvironment implements sun.awt.DisplayChangedListener {
            public static isOpenSolaris: boolean
            protected screens: java.awt.GraphicsDevice[]
            protected displayChanger: sun.awt.SunDisplayChanger
            public constructor()
            public getScreenDevices(): java.awt.GraphicsDevice[]
            protected getNumScreens(): int
            protected makeScreenDevice(arg0: int): java.awt.GraphicsDevice
            public getDefaultScreenDevice(): java.awt.GraphicsDevice
            public createGraphics(arg0: java.awt.image.BufferedImage): java.awt.Graphics2D
            public static getFontManagerForSGE(): sun.font.FontManagerForSGE
            public static useAlternateFontforJALocales(): void
            public getAllFonts(): java.awt.Font[]
            public getAvailableFontFamilyNames(arg0: java.util.Locale): java.lang.String[]
            public getAvailableFontFamilyNames(): java.lang.String[]
            public static getUsableBounds(arg0: java.awt.GraphicsDevice): java.awt.Rectangle
            public displayChanged(): void
            public paletteChanged(): void
            public isDisplayLocal(): boolean
            public addDisplayChangedListener(arg0: sun.awt.DisplayChangedListener): void
            public removeDisplayChangedListener(arg0: sun.awt.DisplayChangedListener): void
            public isFlipStrategyPreferred(arg0: java.awt.peer.ComponentPeer): boolean
            public static class: java.lang.Class<any>
        }
        interface Surface {
        }
        abstract class SurfaceData implements java.awt.Transparency , sun.java2d.DisposerTarget , sun.java2d.StateTrackable , sun.java2d.Surface {
            protected static colorPrimitives: sun.java2d.pipe.LoopPipe
            public static outlineTextRenderer: sun.java2d.pipe.TextPipe
            public static solidTextRenderer: sun.java2d.pipe.TextPipe
            public static aaTextRenderer: sun.java2d.pipe.TextPipe
            public static lcdTextRenderer: sun.java2d.pipe.TextPipe
            protected static colorPipe: sun.java2d.pipe.AlphaColorPipe
            protected static colorViaShape: sun.java2d.pipe.PixelToShapeConverter
            protected static colorViaPgram: sun.java2d.pipe.PixelToParallelogramConverter
            protected static colorText: sun.java2d.pipe.TextPipe
            protected static clipColorPipe: sun.java2d.pipe.CompositePipe
            protected static clipColorText: sun.java2d.pipe.TextPipe
            protected static AAColorShape: sun.java2d.pipe.AAShapePipe
            protected static AAColorViaShape: sun.java2d.pipe.PixelToParallelogramConverter
            protected static AAColorViaPgram: sun.java2d.pipe.PixelToParallelogramConverter
            protected static AAClipColorShape: sun.java2d.pipe.AAShapePipe
            protected static AAClipColorViaShape: sun.java2d.pipe.PixelToParallelogramConverter
            protected static paintPipe: sun.java2d.pipe.CompositePipe
            protected static paintShape: sun.java2d.pipe.SpanShapeRenderer
            protected static paintViaShape: sun.java2d.pipe.PixelToShapeConverter
            protected static paintText: sun.java2d.pipe.TextPipe
            protected static clipPaintPipe: sun.java2d.pipe.CompositePipe
            protected static clipPaintText: sun.java2d.pipe.TextPipe
            protected static AAPaintShape: sun.java2d.pipe.AAShapePipe
            protected static AAPaintViaShape: sun.java2d.pipe.PixelToParallelogramConverter
            protected static AAClipPaintShape: sun.java2d.pipe.AAShapePipe
            protected static AAClipPaintViaShape: sun.java2d.pipe.PixelToParallelogramConverter
            protected static compPipe: sun.java2d.pipe.CompositePipe
            protected static compShape: sun.java2d.pipe.SpanShapeRenderer
            protected static compViaShape: sun.java2d.pipe.PixelToShapeConverter
            protected static compText: sun.java2d.pipe.TextPipe
            protected static clipCompPipe: sun.java2d.pipe.CompositePipe
            protected static clipCompText: sun.java2d.pipe.TextPipe
            protected static AACompShape: sun.java2d.pipe.AAShapePipe
            protected static AACompViaShape: sun.java2d.pipe.PixelToParallelogramConverter
            protected static AAClipCompShape: sun.java2d.pipe.AAShapePipe
            protected static AAClipCompViaShape: sun.java2d.pipe.PixelToParallelogramConverter
            protected static imagepipe: sun.java2d.pipe.DrawImagePipe
            protected constructor(arg0: sun.java2d.loops.SurfaceType, arg1: java.awt.image.ColorModel)
            protected constructor(arg0: sun.java2d.StateTrackable$State, arg1: sun.java2d.loops.SurfaceType, arg2: java.awt.image.ColorModel)
            protected constructor(arg0: sun.java2d.StateTrackableDelegate, arg1: sun.java2d.loops.SurfaceType, arg2: java.awt.image.ColorModel)
            protected constructor(arg0: sun.java2d.StateTrackable$State)
            protected setBlitProxyKey(arg0: java.lang.Object): void
            public getSourceSurfaceData(arg0: java.awt.Image, arg1: int, arg2: sun.java2d.loops.CompositeType, arg3: java.awt.Color): sun.java2d.SurfaceData
            public makeProxyFor(arg0: sun.java2d.SurfaceData): sun.java2d.SurfaceDataProxy
            public static getPrimarySurfaceData(arg0: java.awt.Image): sun.java2d.SurfaceData
            public static restoreContents(arg0: java.awt.Image): sun.java2d.SurfaceData
            public getState(): sun.java2d.StateTrackable$State
            public getStateTracker(): sun.java2d.StateTracker
            public markDirty(): void
            public setSurfaceLost(arg0: boolean): void
            public isSurfaceLost(): boolean
            public isValid(): boolean
            public getDisposerReferent(): java.lang.Object
            public getNativeOps(): long
            public invalidate(): void
            public getReplacement(): sun.java2d.SurfaceData
            public canRenderLCDText(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): boolean
            public canRenderParallelograms(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): boolean
            public validatePipe(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): void
            protected getMaskFill(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): sun.java2d.loops.MaskFill
            public getRenderLoops(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda): sun.java2d.loops.RenderLoops
            public static makeRenderLoops(arg0: sun.java2d.loops.SurfaceType, arg1: sun.java2d.loops.CompositeType, arg2: sun.java2d.loops.SurfaceType): sun.java2d.loops.RenderLoops
            public getDeviceConfiguration(): java.awt.GraphicsConfiguration
            public getSurfaceType(): sun.java2d.loops.SurfaceType
            public getColorModel(): java.awt.image.ColorModel
            public getTransparency(): int
            public getRaster(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.image.Raster
            public useTightBBoxes(): boolean
            public pixelFor(arg0: int): int
            public pixelFor(arg0: java.awt.Color): int
            public rgbFor(arg0: int): int
            public getBounds(): java.awt.Rectangle
            protected checkCustomComposite(): void
            protected static isOpaqueGray(arg0: java.awt.image.IndexColorModel): boolean
            public static isNull(arg0: sun.java2d.SurfaceData): boolean
            public copyArea(arg0: sun.java2d.SunGraphics2D | sun.java2d.SunGraphics2D$$Lambda, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): boolean
            public flush(): void
            public getDestination(): java.lang.Object
            public getDefaultScale(): int
            public static class: java.lang.Class<any>
        }
        abstract class SurfaceDataProxy implements sun.awt.DisplayChangedListener , sun.awt.image.SurfaceManager$FlushableCacheData {
            public static UNCACHED: sun.java2d.SurfaceDataProxy
            public static isCachingAllowed(): boolean
            public isSupportedOperation(arg0: sun.java2d.SurfaceData, arg1: int, arg2: sun.java2d.loops.CompositeType, arg3: java.awt.Color): boolean
            public validateSurfaceData(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int): sun.java2d.SurfaceData
            public getRetryTracker(arg0: sun.java2d.SurfaceData): sun.java2d.StateTracker
            public constructor()
            public constructor(arg0: int)
            public isValid(): boolean
            public invalidate(): void
            public flush(arg0: boolean): boolean
            public flush(): void
            public isAccelerated(): boolean
            protected activateDisplayListener(): void
            public displayChanged(): void
            public paletteChanged(): void
            public replaceData(arg0: sun.java2d.SurfaceData, arg1: int, arg2: sun.java2d.loops.CompositeType, arg3: java.awt.Color): sun.java2d.SurfaceData
            public updateSurfaceData(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int): void
            public updateSurfaceDataBg(arg0: sun.java2d.SurfaceData, arg1: sun.java2d.SurfaceData, arg2: int, arg3: int, arg4: java.awt.Color): void
            public static class: java.lang.Class<any>
        }
        abstract class SurfaceManagerFactory {
            public constructor()
            public static getInstance(): sun.java2d.SurfaceManagerFactory
            public static setInstance(arg0: sun.java2d.SurfaceManagerFactory): void
            public createVolatileManager(arg0: sun.awt.image.SunVolatileImage | sun.awt.image.SunVolatileImage$$Lambda, arg1: java.lang.Object): sun.awt.image.VolatileSurfaceManager
            public static class: java.lang.Class<any>
        }
    }
    namespace print {
        interface AttributeUpdater {
            getUpdatedAttributes(): javax.print.attribute.PrintServiceAttributeSet
        }
        interface AttributeUpdater$$Lambda {
            (): javax.print.attribute.PrintServiceAttributeSet
        }
        interface BackgroundLookupListener {
            notifyServices(arg0: javax.print.PrintService[]): void
        }
        interface BackgroundLookupListener$$Lambda {
            (arg0: javax.print.PrintService[]): void
        }
        interface BackgroundServiceLookup {
            getServicesInbackground(arg0: sun.print.BackgroundLookupListener | sun.print.BackgroundLookupListener$$Lambda): void
        }
        interface BackgroundServiceLookup$$Lambda {
            (arg0: sun.print.BackgroundLookupListener | sun.print.BackgroundLookupListener$$Lambda): void
        }
        class CustomMediaSizeName extends javax.print.attribute.standard.MediaSizeName {
            public constructor(arg0: java.lang.String | string)
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string, arg2: float, arg3: float)
            public getChoiceName(): string
            public getStandardMedia(): javax.print.attribute.standard.MediaSizeName
            public static findMedia(arg0: javax.print.attribute.standard.Media[], arg1: float, arg2: float, arg3: int): javax.print.attribute.standard.MediaSizeName
            public getSuperEnumTable(): javax.print.attribute.standard.Media[]
            protected getStringTable(): java.lang.String[]
            protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
            public static class: java.lang.Class<any>
        }
        class CustomMediaTray extends javax.print.attribute.standard.MediaTray {
            public constructor(arg0: java.lang.String | string, arg1: java.lang.String | string)
            public getChoiceName(): string
            public getSuperEnumTable(): javax.print.attribute.standard.Media[]
            protected getStringTable(): java.lang.String[]
            protected getEnumValueTable(): javax.print.attribute.EnumSyntax[]
            public static class: java.lang.Class<any>
        }
        abstract class DocumentPropertiesUI {
            public static DOCUMENTPROPERTIES_ROLE: int
            public static DOCPROPERTIESCLASSNAME: string
            public constructor()
            public showDocumentProperties(arg0: java.awt.print.PrinterJob, arg1: java.awt.Window | java.awt.Window$$Lambda, arg2: javax.print.PrintService, arg3: javax.print.attribute.PrintRequestAttributeSet): javax.print.attribute.PrintRequestAttributeSet
            public static class: java.lang.Class<any>
        }
        class ImagePrinter implements java.awt.print.Printable {
            public print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
            public static class: java.lang.Class<any>
        }
        class OpenBook implements java.awt.print.Pageable {
            public getNumberOfPages(): int
            public getPageFormat(arg0: int): java.awt.print.PageFormat
            public getPrintable(arg0: int): java.awt.print.Printable
            public static class: java.lang.Class<any>
        }
        class PSPathGraphics extends sun.print.PathGraphics {
            public create(): java.awt.Graphics
            public fill(arg0: java.awt.Shape, arg1: java.awt.Color): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: float, arg2: float): void
            protected canDrawStringToWidth(): boolean
            protected platformFontCount(arg0: java.awt.Font, arg1: java.lang.String | string): int
            protected drawString(arg0: java.lang.String | string, arg1: float, arg2: float, arg3: java.awt.Font, arg4: java.awt.font.FontRenderContext, arg5: float): void
            protected drawImageToPlatform(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.Color, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): boolean
            public redrawRegion(arg0: java.awt.geom.Rectangle2D, arg1: double, arg2: double, arg3: java.awt.Shape, arg4: java.awt.geom.AffineTransform): void
            protected deviceFill(arg0: java.awt.geom.PathIterator, arg1: java.awt.Color): void
            protected deviceFrameRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): void
            protected deviceDrawLine(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): void
            protected deviceFillRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): void
            protected deviceClip(arg0: java.awt.geom.PathIterator): void
            public static class: java.lang.Class<any>
        }
        class PSPrinterJob extends sun.print.RasterPrinterJob {
            protected static FILL_EVEN_ODD: int
            protected static FILL_WINDING: int
            public constructor()
            public printDialog(): boolean
            protected startDoc(): void
            protected abortDoc(): void
            protected endDoc(): void
            protected startPage(arg0: java.awt.print.PageFormat, arg1: java.awt.print.Printable, arg2: int, arg3: boolean): void
            protected endPage(arg0: java.awt.print.PageFormat, arg1: java.awt.print.Printable, arg2: int): void
            protected drawImageBGR(arg0: byte[], arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: int, arg10: int): void
            protected printBand(arg0: byte[], arg1: int, arg2: int, arg3: int, arg4: int): void
            protected createPathGraphics(arg0: sun.print.PeekGraphics, arg1: java.awt.print.PrinterJob, arg2: java.awt.print.Printable, arg3: java.awt.print.PageFormat, arg4: int): java.awt.Graphics2D
            protected selectClipPath(): void
            protected setClip(arg0: java.awt.Shape): void
            protected setTransform(arg0: java.awt.geom.AffineTransform): void
            protected setFont(arg0: java.awt.Font): boolean
            protected platformFontCount(arg0: java.awt.Font, arg1: java.lang.String | string): int
            protected textOut(arg0: java.awt.Graphics, arg1: java.lang.String | string, arg2: float, arg3: float, arg4: java.awt.Font, arg5: java.awt.font.FontRenderContext, arg6: float): boolean
            protected setFillMode(arg0: int): void
            protected setColor(arg0: java.awt.Color): void
            protected fillPath(): void
            protected beginPath(): void
            protected closeSubpath(): void
            protected moveTo(arg0: float, arg1: float): void
            protected lineTo(arg0: float, arg1: float): void
            protected bezierTo(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
            protected getPenX(): float
            protected getPenY(): float
            protected getXRes(): double
            protected getYRes(): double
            protected getPhysicalPrintableX(arg0: java.awt.print.Paper): double
            protected getPhysicalPrintableY(arg0: java.awt.print.Paper): double
            protected getPhysicalPrintableWidth(arg0: java.awt.print.Paper): double
            protected getPhysicalPrintableHeight(arg0: java.awt.print.Paper): double
            protected getPhysicalPageWidth(arg0: java.awt.print.Paper): double
            protected getPhysicalPageHeight(arg0: java.awt.print.Paper): double
            protected getNoncollatedCopies(): int
            protected getCollatedCopies(): int
            protected deviceFill(arg0: java.awt.geom.PathIterator, arg1: java.awt.Color, arg2: java.awt.geom.AffineTransform, arg3: java.awt.Shape): void
            public static class: java.lang.Class<any>
        }
        class PSStreamPrintJob implements javax.print.CancelablePrintJob {
            public getPrintService(): javax.print.PrintService
            public getAttributes(): javax.print.attribute.PrintJobAttributeSet
            public addPrintJobListener(arg0: javax.print.event.PrintJobListener): void
            public removePrintJobListener(arg0: javax.print.event.PrintJobListener): void
            public addPrintJobAttributeListener(arg0: javax.print.event.PrintJobAttributeListener | javax.print.event.PrintJobAttributeListener$$Lambda, arg1: javax.print.attribute.PrintJobAttributeSet): void
            public removePrintJobAttributeListener(arg0: javax.print.event.PrintJobAttributeListener | javax.print.event.PrintJobAttributeListener$$Lambda): void
            public print(arg0: javax.print.Doc, arg1: javax.print.attribute.PrintRequestAttributeSet): void
            public printableJob(arg0: java.awt.print.Printable, arg1: javax.print.attribute.PrintRequestAttributeSet): void
            public pageableJob(arg0: java.awt.print.Pageable, arg1: javax.print.attribute.PrintRequestAttributeSet): void
            public cancel(): void
            public static class: java.lang.Class<any>
        }
        class PSStreamPrintService extends javax.print.StreamPrintService implements sun.print.SunPrinterJobService {
            public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
            public getOutputFormat(): string
            public getSupportedDocFlavors(): javax.print.DocFlavor[]
            public createPrintJob(): javax.print.DocPrintJob
            public usesClass(arg0: java.lang.Class): boolean
            public getName(): string
            public addPrintServiceAttributeListener(arg0: javax.print.event.PrintServiceAttributeListener | javax.print.event.PrintServiceAttributeListener$$Lambda): void
            public removePrintServiceAttributeListener(arg0: javax.print.event.PrintServiceAttributeListener | javax.print.event.PrintServiceAttributeListener$$Lambda): void
            public getAttribute<T extends javax.print.attribute.PrintServiceAttribute>(arg0: java.lang.Class<T>): T
            public getAttributes<T extends javax.print.attribute.PrintServiceAttribute>(): javax.print.attribute.PrintServiceAttributeSet
            public isDocFlavorSupported<T extends javax.print.attribute.PrintServiceAttribute>(arg0: javax.print.DocFlavor): boolean
            public getSupportedAttributeCategories<T extends javax.print.attribute.PrintServiceAttribute>(): java.lang.Class<any>[]
            public isAttributeCategorySupported<T extends javax.print.attribute.PrintServiceAttribute>(arg0: java.lang.Class<javax.print.attribute.Attribute>): boolean
            public getDefaultAttributeValue<T extends javax.print.attribute.PrintServiceAttribute>(arg0: java.lang.Class<javax.print.attribute.Attribute>): java.lang.Object
            public getSupportedAttributeValues<T extends javax.print.attribute.PrintServiceAttribute>(arg0: java.lang.Class<javax.print.attribute.Attribute>, arg1: javax.print.DocFlavor, arg2: javax.print.attribute.AttributeSet): java.lang.Object
            public isAttributeValueSupported<T extends javax.print.attribute.PrintServiceAttribute>(arg0: javax.print.attribute.Attribute, arg1: javax.print.DocFlavor, arg2: javax.print.attribute.AttributeSet): boolean
            public getUnsupportedAttributes<T extends javax.print.attribute.PrintServiceAttribute>(arg0: javax.print.DocFlavor, arg1: javax.print.attribute.AttributeSet): javax.print.attribute.AttributeSet
            public getServiceUIFactory<T extends javax.print.attribute.PrintServiceAttribute>(): javax.print.ServiceUIFactory
            public toString<T extends javax.print.attribute.PrintServiceAttribute>(): string
            public equals<T extends javax.print.attribute.PrintServiceAttribute>(arg0: java.lang.Object): boolean
            public hashCode<T extends javax.print.attribute.PrintServiceAttribute>(): int
            public static class: java.lang.Class<any>
        }
        class PSStreamPrintService$$Lambda extends javax.print.StreamPrintService implements sun.print.SunPrinterJobService {
            public constructor(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda)
        }
        class PSStreamPrinterFactory extends javax.print.StreamPrintServiceFactory {
            public constructor()
            public getOutputFormat(): string
            public getSupportedDocFlavors(): javax.print.DocFlavor[]
            public getPrintService(arg0: java.io.OutputStream | java.io.OutputStream$$Lambda): javax.print.StreamPrintService
            public static class: java.lang.Class<any>
        }
        class PageableDoc implements javax.print.Doc {
            public constructor(arg0: java.awt.print.Pageable)
            public getDocFlavor(): javax.print.DocFlavor
            public getAttributes(): javax.print.attribute.DocAttributeSet
            public getPrintData(): java.lang.Object
            public getReaderForText(): java.io.Reader
            public getStreamForBytes(): java.io.InputStream
            public static class: java.lang.Class<any>
        }
        abstract class PathGraphics extends sun.print.ProxyGraphics2D {
            protected printingGlyphVector: boolean
            protected static fontMapRef: java.lang.ref.SoftReference<java.util.Hashtable<sun.font.Font2DHandle, java.lang.Object>>
            protected constructor(arg0: java.awt.Graphics2D, arg1: java.awt.print.PrinterJob, arg2: java.awt.print.Printable, arg3: java.awt.print.PageFormat, arg4: int, arg5: boolean)
            protected getPrintable(): java.awt.print.Printable
            protected getPageFormat(): java.awt.print.PageFormat
            protected getPageIndex(): int
            public canDoRedraws(): boolean
            public redrawRegion(arg0: java.awt.geom.Rectangle2D, arg1: double, arg2: double, arg3: java.awt.Shape, arg4: java.awt.geom.AffineTransform): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: java.awt.Polygon): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: java.awt.Polygon): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: float, arg2: float): void
            protected drawString(arg0: java.lang.String | string, arg1: float, arg2: float, arg3: java.awt.Font, arg4: java.awt.font.FontRenderContext, arg5: float): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: float, arg2: float): void
            public drawGlyphVector(arg0: java.awt.font.GlyphVector, arg1: float, arg2: float): void
            protected platformFontCount(arg0: java.awt.Font, arg1: java.lang.String | string): int
            protected printGlyphVector(arg0: java.awt.font.GlyphVector, arg1: float, arg2: float): boolean
            protected canDrawStringToWidth(): boolean
            public draw(arg0: java.awt.Shape): void
            public fill(arg0: java.awt.Shape): void
            public fill(arg0: java.awt.Shape, arg1: java.awt.Color): void
            protected deviceFill(arg0: java.awt.geom.PathIterator, arg1: java.awt.Color): void
            protected deviceClip(arg0: java.awt.geom.PathIterator): void
            protected deviceFrameRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): void
            protected deviceDrawLine(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): void
            protected deviceFillRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.awt.Color): void
            protected getBufferedImage(arg0: java.awt.Image): java.awt.image.BufferedImage
            protected hasTransparentPixels(arg0: java.awt.image.BufferedImage): boolean
            protected isBitmaskTransparency(arg0: java.awt.image.BufferedImage): boolean
            protected drawBitmaskImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.geom.AffineTransform, arg2: java.awt.Color, arg3: int, arg4: int, arg5: int, arg6: int): boolean
            protected drawImageToPlatform(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.Color, arg3: int, arg4: int, arg5: int, arg6: int, arg7: boolean): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImageOp, arg2: int, arg3: int): void
            public drawRenderedImage(arg0: java.awt.image.RenderedImage, arg1: java.awt.geom.AffineTransform): void
            public static class: java.lang.Class<any>
        }
        class PeekGraphics extends java.awt.Graphics2D implements java.awt.print.PrinterGraphics , java.awt.image.ImageObserver , java.lang.Cloneable {
            public constructor(arg0: java.awt.Graphics2D, arg1: java.awt.print.PrinterJob)
            public getDelegate(): java.awt.Graphics2D
            public setDelegate(arg0: java.awt.Graphics2D): void
            public getPrinterJob(): java.awt.print.PrinterJob
            public setAWTDrawingOnly(): void
            public getAWTDrawingOnly(): boolean
            public getDrawingArea(): sun.java2d.Spans
            public getDeviceConfiguration(): java.awt.GraphicsConfiguration
            public create(): java.awt.Graphics
            public translate(arg0: int, arg1: int): void
            public translate(arg0: double, arg1: double): void
            public rotate(arg0: double): void
            public rotate(arg0: double, arg1: double, arg2: double): void
            public scale(arg0: double, arg1: double): void
            public shear(arg0: double, arg1: double): void
            public getColor(): java.awt.Color
            public setColor(arg0: java.awt.Color): void
            public setPaintMode(): void
            public setXORMode(arg0: java.awt.Color): void
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public getClipBounds(): java.awt.Rectangle
            public clipRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getClip(): java.awt.Shape
            public setClip(arg0: java.awt.Shape): void
            public copyArea(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: float, arg2: float): void
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public drawRenderedImage(arg0: java.awt.image.RenderedImage, arg1: java.awt.geom.AffineTransform): void
            public drawRenderableImage(arg0: java.awt.image.renderable.RenderableImage, arg1: java.awt.geom.AffineTransform): void
            public dispose(): void
            public finalize(): void
            public draw(arg0: java.awt.Shape): void
            public drawImage(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImageOp, arg2: int, arg3: int): void
            public drawString(arg0: java.lang.String | string, arg1: float, arg2: float): void
            public drawGlyphVector(arg0: java.awt.font.GlyphVector, arg1: float, arg2: float): void
            public fill(arg0: java.awt.Shape): void
            public hit(arg0: java.awt.Rectangle, arg1: java.awt.Shape, arg2: boolean): boolean
            public setComposite(arg0: java.awt.Composite | java.awt.Composite$$Lambda): void
            public setPaint(arg0: java.awt.Paint): void
            public setStroke(arg0: java.awt.Stroke | java.awt.Stroke$$Lambda): void
            public setRenderingHint(arg0: java.awt.RenderingHints$Key, arg1: java.lang.Object): void
            public getRenderingHint(arg0: java.awt.RenderingHints$Key): java.lang.Object
            public setRenderingHints(arg0: java.util.Map<any, any>): void
            public addRenderingHints(arg0: java.util.Map<any, any>): void
            public getRenderingHints(): java.awt.RenderingHints
            public transform(arg0: java.awt.geom.AffineTransform): void
            public setTransform(arg0: java.awt.geom.AffineTransform): void
            public getTransform(): java.awt.geom.AffineTransform
            public getPaint(): java.awt.Paint
            public getComposite(): java.awt.Composite
            public setBackground(arg0: java.awt.Color): void
            public getBackground(): java.awt.Color
            public getStroke(): java.awt.Stroke
            public clip(arg0: java.awt.Shape): void
            public hitsDrawingArea(arg0: java.awt.Rectangle): boolean
            public getMetrics(): sun.print.PeekMetrics
            public imageUpdate(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): boolean
            public static class: java.lang.Class<any>
        }
        class PeekMetrics {
            public constructor()
            public hasNonSolidColors(): boolean
            public hasCompositing(): boolean
            public hasText(): boolean
            public hasImages(): boolean
            public fill(arg0: java.awt.Graphics2D): void
            public draw(arg0: java.awt.Graphics2D): void
            public clear(arg0: java.awt.Graphics2D): void
            public drawText(arg0: java.awt.Graphics2D): void
            public drawText(arg0: java.awt.Graphics2D, arg1: java.awt.font.TextLayout): void
            public drawImage(arg0: java.awt.Graphics2D, arg1: java.awt.Image): void
            public drawImage(arg0: java.awt.Graphics2D, arg1: java.awt.image.RenderedImage): void
            public drawImage(arg0: java.awt.Graphics2D, arg1: java.awt.image.renderable.RenderableImage): void
            public static class: java.lang.Class<any>
        }
        class PrintJob2D extends java.awt.PrintJob implements java.awt.print.Printable , java.lang.Runnable {
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.util.Properties)
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.awt.JobAttributes, arg3: java.awt.PageAttributes)
            public printDialog(): boolean
            public getGraphics(): java.awt.Graphics
            public getPageDimension(): java.awt.Dimension
            public getPageResolution(): int
            public lastPageFirst(): boolean
            public end(): void
            public finalize(): void
            public print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
            public run(): void
            public static mapMedia(arg0: java.awt.PageAttributes$MediaType): javax.print.attribute.standard.MediaSizeName
            public static unMapMedia(arg0: javax.print.attribute.standard.MediaSizeName): java.awt.PageAttributes$MediaType
            public static class: java.lang.Class<any>
        }
        class PrintJob2D$$Lambda extends java.awt.PrintJob implements java.awt.print.Printable , java.lang.Runnable {
            public constructor(arg0: java.awt.Frame, arg1: java.lang.String | string, arg2: java.util.Properties)
        }
        class PrintJobAttributeException extends javax.print.PrintException implements javax.print.AttributeException {
            public getUnsupportedAttributes(): java.lang.Class[]
            public getUnsupportedValues(): javax.print.attribute.Attribute[]
            public static class: java.lang.Class<any>
        }
        class PrintJobFlavorException extends javax.print.PrintException implements javax.print.FlavorException {
            public getUnsupportedFlavors(): javax.print.DocFlavor[]
            public static class: java.lang.Class<any>
        }
        class PrintJobFlavorException$$Lambda extends javax.print.PrintException implements javax.print.FlavorException {
            public (): javax.print.DocFlavor[]
        }
        class PrinterGraphicsConfig extends java.awt.GraphicsConfiguration {
            public constructor(arg0: java.lang.String | string, arg1: java.awt.geom.AffineTransform, arg2: int, arg3: int)
            public getDevice(): java.awt.GraphicsDevice
            public getColorModel(): java.awt.image.ColorModel
            public getColorModel(arg0: int): java.awt.image.ColorModel
            public getDefaultTransform(): java.awt.geom.AffineTransform
            public getNormalizingTransform(): java.awt.geom.AffineTransform
            public getBounds(): java.awt.Rectangle
            public static class: java.lang.Class<any>
        }
        class PrinterGraphicsDevice extends java.awt.GraphicsDevice {
            protected constructor(arg0: java.awt.GraphicsConfiguration, arg1: java.lang.String | string)
            public getType(): int
            public getIDstring(): string
            public getConfigurations(): java.awt.GraphicsConfiguration[]
            public getDefaultConfiguration(): java.awt.GraphicsConfiguration
            public setFullScreenWindow(arg0: java.awt.Window | java.awt.Window$$Lambda): void
            public getFullScreenWindow(): java.awt.Window
            public static class: java.lang.Class<any>
        }
        class PrinterJobWrapper implements javax.print.attribute.PrintRequestAttribute {
            public constructor(arg0: java.awt.print.PrinterJob)
            public getPrinterJob(): java.awt.print.PrinterJob
            public getCategory(): java.lang.Class
            public getName(): string
            public toString(): string
            public hashCode(): int
            public static class: java.lang.Class<any>
        }
        class ProxyGraphics extends java.awt.Graphics {
            public constructor(arg0: java.awt.Graphics)
            public create(): java.awt.Graphics
            public create(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.Graphics
            public translate(arg0: int, arg1: int): void
            public getColor(): java.awt.Color
            public setColor(arg0: java.awt.Color): void
            public setPaintMode(): void
            public setXORMode(arg0: java.awt.Color): void
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public getFontMetrics(): java.awt.FontMetrics
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public getClipBounds(): java.awt.Rectangle
            public clipRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getClip(): java.awt.Shape
            public setClip(arg0: java.awt.Shape): void
            public copyArea(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public draw3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public fill3DRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: boolean): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: java.awt.Polygon): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: java.awt.Polygon): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawChars(arg0: char[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawBytes(arg0: byte[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public dispose(): void
            public finalize(): void
            public toString(): string
            public getClipRect(): java.awt.Rectangle
            public hitClip(arg0: int, arg1: int, arg2: int, arg3: int): boolean
            public getClipBounds(arg0: java.awt.Rectangle): java.awt.Rectangle
            public static class: java.lang.Class<any>
        }
        class ProxyGraphics2D extends java.awt.Graphics2D implements java.awt.print.PrinterGraphics {
            public constructor(arg0: java.awt.Graphics2D, arg1: java.awt.print.PrinterJob)
            public getDelegate(): java.awt.Graphics2D
            public setDelegate(arg0: java.awt.Graphics2D): void
            public getPrinterJob(): java.awt.print.PrinterJob
            public getDeviceConfiguration(): java.awt.GraphicsConfiguration
            public create(): java.awt.Graphics
            public translate(arg0: int, arg1: int): void
            public translate(arg0: double, arg1: double): void
            public rotate(arg0: double): void
            public rotate(arg0: double, arg1: double, arg2: double): void
            public scale(arg0: double, arg1: double): void
            public shear(arg0: double, arg1: double): void
            public getColor(): java.awt.Color
            public setColor(arg0: java.awt.Color): void
            public setPaintMode(): void
            public setXORMode(arg0: java.awt.Color): void
            public getFont(): java.awt.Font
            public setFont(arg0: java.awt.Font): void
            public getFontMetrics(arg0: java.awt.Font): java.awt.FontMetrics
            public getFontRenderContext(): java.awt.font.FontRenderContext
            public getClipBounds(): java.awt.Rectangle
            public clipRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public setClip(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getClip(): java.awt.Shape
            public setClip(arg0: java.awt.Shape): void
            public copyArea(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawLine(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public clearRect(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillRoundRect(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public fillOval(arg0: int, arg1: int, arg2: int, arg3: int): void
            public drawArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public fillArc(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            public drawPolyline(arg0: int[], arg1: int[], arg2: int): void
            public drawPolygon(arg0: int[], arg1: int[], arg2: int): void
            public fillPolygon(arg0: int[], arg1: int[], arg2: int): void
            public drawString(arg0: java.lang.String | string, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: int, arg2: int): void
            public drawString(arg0: java.text.AttributedCharacterIterator, arg1: float, arg2: float): void
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: java.awt.Color, arg4: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Color, arg6: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: java.awt.Color, arg10: java.awt.image.ImageObserver): boolean
            public drawRenderedImage(arg0: java.awt.image.RenderedImage, arg1: java.awt.geom.AffineTransform): void
            public drawRenderableImage(arg0: java.awt.image.renderable.RenderableImage, arg1: java.awt.geom.AffineTransform): void
            public dispose(): void
            public finalize(): void
            public draw(arg0: java.awt.Shape): void
            public drawImage(arg0: java.awt.Image, arg1: java.awt.geom.AffineTransform, arg2: java.awt.image.ImageObserver): boolean
            public drawImage(arg0: java.awt.image.BufferedImage, arg1: java.awt.image.BufferedImageOp, arg2: int, arg3: int): void
            public drawString(arg0: java.lang.String | string, arg1: float, arg2: float): void
            public drawGlyphVector(arg0: java.awt.font.GlyphVector, arg1: float, arg2: float): void
            public fill(arg0: java.awt.Shape): void
            public hit(arg0: java.awt.Rectangle, arg1: java.awt.Shape, arg2: boolean): boolean
            public setComposite(arg0: java.awt.Composite | java.awt.Composite$$Lambda): void
            public setPaint(arg0: java.awt.Paint): void
            public setStroke(arg0: java.awt.Stroke | java.awt.Stroke$$Lambda): void
            public setRenderingHint(arg0: java.awt.RenderingHints$Key, arg1: java.lang.Object): void
            public getRenderingHint(arg0: java.awt.RenderingHints$Key): java.lang.Object
            public setRenderingHints(arg0: java.util.Map<any, any>): void
            public addRenderingHints(arg0: java.util.Map<any, any>): void
            public getRenderingHints(): java.awt.RenderingHints
            public transform(arg0: java.awt.geom.AffineTransform): void
            public setTransform(arg0: java.awt.geom.AffineTransform): void
            public getTransform(): java.awt.geom.AffineTransform
            public getPaint(): java.awt.Paint
            public getComposite(): java.awt.Composite
            public setBackground(arg0: java.awt.Color): void
            public getBackground(): java.awt.Color
            public getStroke(): java.awt.Stroke
            public clip(arg0: java.awt.Shape): void
            public static class: java.lang.Class<any>
        }
        class ProxyGraphics2D$$Lambda extends java.awt.Graphics2D implements java.awt.print.PrinterGraphics {
            public constructor(arg0: java.awt.Graphics2D, arg1: java.awt.print.PrinterJob)
        }
        class ProxyPrintGraphics extends sun.print.ProxyGraphics implements java.awt.PrintGraphics {
            public constructor(arg0: java.awt.Graphics, arg1: java.awt.PrintJob)
            public getPrintJob(): java.awt.PrintJob
            public create(): java.awt.Graphics
            public create(arg0: int, arg1: int, arg2: int, arg3: int): java.awt.Graphics
            public getGraphics(): java.awt.Graphics
            public dispose(): void
            public static class: java.lang.Class<any>
        }
        class ProxyPrintGraphics$$Lambda extends sun.print.ProxyGraphics implements java.awt.PrintGraphics {
            public constructor(arg0: java.awt.Graphics, arg1: java.awt.PrintJob)
        }
        abstract class RasterPrinterJob extends java.awt.print.PrinterJob {
            protected static PRINTER: int
            protected static FILE: int
            protected static STREAM: int
            protected static MAX_UNKNOWN_PAGES: int
            protected static PD_ALLPAGES: int
            protected static PD_SELECTION: int
            protected static PD_PAGENUMS: int
            protected static PD_NOSELECTION: int
            public static forcePDL: boolean
            public static forceRaster: boolean
            public static shapeTextProp: boolean
            protected mDocument: java.awt.print.Pageable
            protected performingPrinting: boolean
            protected userCancelled: boolean
            protected sidesAttr: javax.print.attribute.standard.Sides
            protected destinationAttr: string
            protected noJobSheet: boolean
            protected mDestType: int
            protected mDestination: string
            protected collateAttReq: boolean
            protected landscapeRotates270: boolean
            protected attributes: javax.print.attribute.PrintRequestAttributeSet
            protected myService: javax.print.PrintService
            public static debugPrint: boolean
            public constructor()
            protected getXRes(): double
            protected getYRes(): double
            protected getPhysicalPrintableX(arg0: java.awt.print.Paper): double
            protected getPhysicalPrintableY(arg0: java.awt.print.Paper): double
            protected getPhysicalPrintableWidth(arg0: java.awt.print.Paper): double
            protected getPhysicalPrintableHeight(arg0: java.awt.print.Paper): double
            protected getPhysicalPageWidth(arg0: java.awt.print.Paper): double
            protected getPhysicalPageHeight(arg0: java.awt.print.Paper): double
            protected startPage(arg0: java.awt.print.PageFormat, arg1: java.awt.print.Printable, arg2: int, arg3: boolean): void
            protected endPage(arg0: java.awt.print.PageFormat, arg1: java.awt.print.Printable, arg2: int): void
            protected printBand(arg0: byte[], arg1: int, arg2: int, arg3: int, arg4: int): void
            public saveState(arg0: java.awt.geom.AffineTransform, arg1: java.awt.Shape, arg2: java.awt.geom.Rectangle2D, arg3: double, arg4: double): void
            protected static lookupDefaultPrintService(): javax.print.PrintService
            public getPrintService(): javax.print.PrintService
            public setPrintService(arg0: javax.print.PrintService): void
            protected getMediaSize(arg0: javax.print.attribute.standard.Media, arg1: javax.print.PrintService, arg2: java.awt.print.PageFormat): javax.print.attribute.standard.MediaSize
            protected getDefaultPrintableArea(arg0: java.awt.print.PageFormat, arg1: double, arg2: double): javax.print.attribute.standard.MediaPrintableArea
            protected updatePageAttributes(arg0: javax.print.PrintService, arg1: java.awt.print.PageFormat): void
            protected updateAttributesWithPageFormat(arg0: javax.print.PrintService, arg1: java.awt.print.PageFormat, arg2: javax.print.attribute.PrintRequestAttributeSet): void
            public pageDialog(arg0: java.awt.print.PageFormat): java.awt.print.PageFormat
            public pageDialog(arg0: javax.print.attribute.PrintRequestAttributeSet): java.awt.print.PageFormat
            protected getPageFormatFromAttributes(): java.awt.print.PageFormat
            public printDialog(arg0: javax.print.attribute.PrintRequestAttributeSet): boolean
            public printDialog(): boolean
            public setPrintable(arg0: java.awt.print.Printable): void
            public setPrintable(arg0: java.awt.print.Printable, arg1: java.awt.print.PageFormat): void
            public setPageable(arg0: java.awt.print.Pageable): void
            protected initPrinter(): void
            protected isSupportedValue(arg0: javax.print.attribute.Attribute, arg1: javax.print.attribute.PrintRequestAttributeSet): boolean
            protected setAttributes(arg0: javax.print.attribute.PrintRequestAttributeSet): void
            protected spoolToService(arg0: javax.print.PrintService, arg1: javax.print.attribute.PrintRequestAttributeSet): void
            public print(): void
            protected debug_println(arg0: java.lang.String | string): void
            public print(arg0: javax.print.attribute.PrintRequestAttributeSet): void
            protected validateDestination(arg0: java.lang.String | string): void
            protected validatePaper(arg0: java.awt.print.Paper, arg1: java.awt.print.Paper): void
            public defaultPage(arg0: java.awt.print.PageFormat): java.awt.print.PageFormat
            public validatePage(arg0: java.awt.print.PageFormat): java.awt.print.PageFormat
            public setCopies(arg0: int): void
            public getCopies(): int
            protected getCopiesInt(): int
            public getUserName(): string
            protected getUserNameInt(): string
            public setJobName(arg0: java.lang.String | string): void
            public getJobName(): string
            protected getJobNameInt(): string
            protected setPageRange(arg0: int, arg1: int): void
            protected getFirstPage(): int
            protected getLastPage(): int
            protected setCollated(arg0: boolean): void
            protected isCollated(): boolean
            protected getSelectAttrib(): int
            protected getFromPageAttrib(): int
            protected getToPageAttrib(): int
            protected getMinPageAttrib(): int
            protected getMaxPageAttrib(): int
            protected startDoc(): void
            protected endDoc(): void
            protected abortDoc(): void
            protected cancelDoc(): void
            protected getCollatedCopies(): int
            protected getNoncollatedCopies(): int
            protected printPage(arg0: java.awt.print.Pageable, arg1: int): int
            public cancel(): void
            public isCancelled(): boolean
            protected getPageable(): java.awt.print.Pageable
            protected createPathGraphics(arg0: sun.print.PeekGraphics, arg1: java.awt.print.PrinterJob, arg2: java.awt.print.Printable, arg3: java.awt.print.PageFormat, arg4: int): java.awt.Graphics2D
            protected createPeekGraphics(arg0: java.awt.Graphics2D, arg1: java.awt.print.PrinterJob): sun.print.PeekGraphics
            protected initPrinterGraphics(arg0: java.awt.Graphics2D, arg1: java.awt.geom.Rectangle2D): void
            public checkAllowedToPrintToFile(): boolean
            protected removeControlChars(arg0: java.lang.String | string): string
            public static class: java.lang.Class<any>
        }
        class ServiceDialog extends javax.swing.JDialog implements java.awt.event.ActionListener {
            public static WAITING: int
            public static APPROVE: int
            public static CANCEL: int
            public constructor(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: javax.print.PrintService[], arg4: int, arg5: javax.print.DocFlavor, arg6: javax.print.attribute.PrintRequestAttributeSet, arg7: java.awt.Dialog)
            public constructor(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: javax.print.PrintService[], arg4: int, arg5: javax.print.DocFlavor, arg6: javax.print.attribute.PrintRequestAttributeSet, arg7: java.awt.Frame)
            public constructor(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: javax.print.PrintService, arg4: javax.print.DocFlavor, arg5: javax.print.attribute.PrintRequestAttributeSet, arg6: java.awt.Dialog)
            public constructor(arg0: java.awt.GraphicsConfiguration, arg1: int, arg2: int, arg3: javax.print.PrintService, arg4: javax.print.DocFlavor, arg5: javax.print.attribute.PrintRequestAttributeSet, arg6: java.awt.Frame)
            public getStatus(): int
            public getAttributes(): javax.print.attribute.PrintRequestAttributeSet
            public getPrintService(): javax.print.PrintService
            public dispose(arg0: int): void
            public actionPerformed(arg0: java.awt.event.ActionEvent): void
            public static initResource(): void
            public static getMsg(arg0: java.lang.String | string): string
            public static showNoPrintService(arg0: java.awt.GraphicsConfiguration): void
            public static class: java.lang.Class<any>
        }
        class ServiceNotifier extends java.lang.Thread {
            public run(): void
            public static class: java.lang.Class<any>
        }
        class SunAlternateMedia implements javax.print.attribute.PrintRequestAttribute {
            public constructor(arg0: javax.print.attribute.standard.Media)
            public getMedia(): javax.print.attribute.standard.Media
            public getCategory(): java.lang.Class
            public getName(): string
            public toString(): string
            public hashCode(): int
            public static class: java.lang.Class<any>
        }
        class SunMinMaxPage implements javax.print.attribute.PrintRequestAttribute {
            public constructor(arg0: int, arg1: int)
            public getCategory(): java.lang.Class
            public getMin(): int
            public getMax(): int
            public getName(): string
            public static class: java.lang.Class<any>
        }
        class SunPageSelection implements javax.print.attribute.PrintRequestAttribute {
            public static ALL: sun.print.SunPageSelection
            public static RANGE: sun.print.SunPageSelection
            public static SELECTION: sun.print.SunPageSelection
            public constructor(arg0: int)
            public getCategory(): java.lang.Class
            public getName(): string
            public toString(): string
            public static class: java.lang.Class<any>
        }
        interface SunPrinterJobService {
            usesClass(arg0: java.lang.Class): boolean
        }
        interface SunPrinterJobService$$Lambda {
            (arg0: java.lang.Class): boolean
        }
    }
    namespace swing {
        namespace icon {
            class SortArrowIcon implements javax.swing.Icon , javax.swing.plaf.UIResource , java.io.Serializable {
                public constructor(arg0: boolean, arg1: java.awt.Color)
                public constructor(arg0: boolean, arg1: java.lang.String | string)
                public paintIcon(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int): void
                public getIconWidth(): int
                public getIconHeight(): int
                public static class: java.lang.Class<any>
            }
        }
        namespace plaf {
            namespace synth {
                class DefaultSynthStyle extends javax.swing.plaf.synth.SynthStyle implements java.lang.Cloneable {
                    public constructor()
                    public constructor(arg0: sun.swing.plaf.synth.DefaultSynthStyle)
                    public constructor(arg0: java.awt.Insets, arg1: boolean, arg2: sun.swing.plaf.synth.DefaultSynthStyle$StateInfo[], arg3: java.util.Map)
                    public getColor(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                    public getColor(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region, arg2: int, arg3: javax.swing.plaf.synth.ColorType): java.awt.Color
                    protected getColorForState(arg0: javax.swing.plaf.synth.SynthContext, arg1: javax.swing.plaf.synth.ColorType): java.awt.Color
                    protected getColorForState(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region, arg2: int, arg3: javax.swing.plaf.synth.ColorType): java.awt.Color
                    public setFont(arg0: java.awt.Font): void
                    public getFont(arg0: javax.swing.plaf.synth.SynthContext): java.awt.Font
                    public getFont(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region, arg2: int): java.awt.Font
                    protected getFontForState(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.synth.Region, arg2: int): java.awt.Font
                    protected getFontForState(arg0: javax.swing.plaf.synth.SynthContext): java.awt.Font
                    public setGraphicsUtils(arg0: javax.swing.plaf.synth.SynthGraphicsUtils): void
                    public getGraphicsUtils(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthGraphicsUtils
                    public setInsets(arg0: java.awt.Insets): void
                    public getInsets(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Insets): java.awt.Insets
                    public setPainter(arg0: javax.swing.plaf.synth.SynthPainter): void
                    public getPainter(arg0: javax.swing.plaf.synth.SynthContext): javax.swing.plaf.synth.SynthPainter
                    public setOpaque(arg0: boolean): void
                    public isOpaque(arg0: javax.swing.plaf.synth.SynthContext): boolean
                    public setData(arg0: java.util.Map): void
                    public getData(): java.util.Map
                    public get(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object): java.lang.Object
                    public getDefaultValue(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.lang.Object): java.lang.Object
                    public clone(): java.lang.Object
                    public addTo(arg0: sun.swing.plaf.synth.DefaultSynthStyle): sun.swing.plaf.synth.DefaultSynthStyle
                    public setStateInfo(arg0: sun.swing.plaf.synth.DefaultSynthStyle$StateInfo[]): void
                    public getStateInfo(): sun.swing.plaf.synth.DefaultSynthStyle$StateInfo[]
                    public getStateInfo(arg0: int): sun.swing.plaf.synth.DefaultSynthStyle$StateInfo
                    public toString(): string
                    public static class: java.lang.Class<any>
                }
                class Paint9Painter extends sun.swing.CachedPainter {
                    public static PAINT_TOP_LEFT: int
                    public static PAINT_TOP: int
                    public static PAINT_TOP_RIGHT: int
                    public static PAINT_LEFT: int
                    public static PAINT_CENTER: int
                    public static PAINT_RIGHT: int
                    public static PAINT_BOTTOM_RIGHT: int
                    public static PAINT_BOTTOM: int
                    public static PAINT_BOTTOM_LEFT: int
                    public static PAINT_ALL: int
                    public static validImage(arg0: java.awt.Image): boolean
                    public constructor(arg0: int)
                    public paint(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Image, arg7: java.awt.Insets, arg8: java.awt.Insets, arg9: sun.swing.plaf.synth.Paint9Painter$PaintType, arg10: int): void
                    protected paintToImage(arg0: java.awt.Component, arg1: java.awt.Image, arg2: java.awt.Graphics, arg3: int, arg4: int, arg5: java.lang.Object[]): void
                    protected paint9(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int, arg5: java.awt.Image, arg6: java.awt.Insets, arg7: java.awt.Insets, arg8: sun.swing.plaf.synth.Paint9Painter$PaintType, arg9: int): void
                    protected createImage(arg0: java.awt.Component, arg1: int, arg2: int, arg3: java.awt.GraphicsConfiguration, arg4: java.lang.Object[]): java.awt.Image
                    public static class: java.lang.Class<any>
                }
                class StyleAssociation {
                    public static createStyleAssociation(arg0: java.lang.String | string, arg1: javax.swing.plaf.synth.SynthStyle): sun.swing.plaf.synth.StyleAssociation
                    public static createStyleAssociation(arg0: java.lang.String | string, arg1: javax.swing.plaf.synth.SynthStyle, arg2: int): sun.swing.plaf.synth.StyleAssociation
                    public getID(): int
                    public matches(arg0: java.lang.CharSequence): boolean
                    public getText(): string
                    public getStyle(): javax.swing.plaf.synth.SynthStyle
                    public static class: java.lang.Class<any>
                }
                abstract class SynthFileChooserUI extends javax.swing.plaf.basic.BasicFileChooserUI implements javax.swing.plaf.synth.SynthUI {
                    public static createUI(arg0: javax.swing.JComponent): javax.swing.plaf.ComponentUI
                    public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                    public getContext(arg0: javax.swing.JComponent): javax.swing.plaf.synth.SynthContext
                    protected getContext(arg0: javax.swing.JComponent, arg1: int): javax.swing.plaf.synth.SynthContext
                    public installUI(arg0: javax.swing.JComponent): void
                    public installComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public uninstallComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected createActionMap(): javax.swing.ActionMap
                    protected installDefaults(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected uninstallDefaults(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installIcons(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public update(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    public paintBorder(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int): void
                    public paint(arg0: java.awt.Graphics, arg1: javax.swing.JComponent): void
                    protected paint(arg0: javax.swing.plaf.synth.SynthContext, arg1: java.awt.Graphics): void
                    public setFileName(arg0: java.lang.String | string): void
                    public getFileName(): string
                    protected doSelectedFileChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doSelectedFilesChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doDirectoryChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doAccessoryChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doFileSelectionModeChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doMultiSelectionChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doControlButtonsChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doAncestorChanged(arg0: java.beans.PropertyChangeEvent): void
                    public createPropertyChangeListener(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): java.beans.PropertyChangeListener
                    public getFileNameCompletionAction(): javax.swing.Action
                    protected getApproveButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                    protected getCancelButton(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): javax.swing.JButton
                    public clearIconCache(): void
                    public static class: java.lang.Class<any>
                }
                class SynthFileChooserUIImpl extends sun.swing.plaf.synth.SynthFileChooserUI {
                    public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda)
                    protected installDefaults(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public installComponents(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected installListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected uninstallListeners(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public uninstallUI(arg0: javax.swing.JComponent): void
                    protected installStrings(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    public getFileName(): string
                    public setFileName(arg0: java.lang.String | string): void
                    public rescanCurrentDirectory(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): void
                    protected doSelectedFileChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doSelectedFilesChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doDirectoryChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doFileSelectionModeChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doAccessoryChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected doControlButtonsChanged(arg0: java.beans.PropertyChangeEvent): void
                    protected addControlButtons(): void
                    protected removeControlButtons(): void
                    protected createActionMap(): javax.swing.ActionMap
                    protected getDirectoryComboBox(): javax.swing.JComponent
                    protected getDirectoryComboBoxAction(): javax.swing.Action
                    protected createDirectoryComboBoxRenderer(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): sun.swing.plaf.synth.SynthFileChooserUIImpl$DirectoryComboBoxRenderer
                    protected createDirectoryComboBoxModel(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): sun.swing.plaf.synth.SynthFileChooserUIImpl$DirectoryComboBoxModel
                    protected createFilterComboBoxRenderer(): sun.swing.plaf.synth.SynthFileChooserUIImpl$FilterComboBoxRenderer
                    protected createFilterComboBoxModel(): sun.swing.plaf.synth.SynthFileChooserUIImpl$FilterComboBoxModel
                    public static class: java.lang.Class<any>
                }
            }
            class GTKKeybindings {
                public constructor()
                public static installKeybindings(arg0: javax.swing.UIDefaults): void
                public static class: java.lang.Class<any>
            }
            class WindowsKeybindings {
                public constructor()
                public static installKeybindings(arg0: javax.swing.UIDefaults): void
                public static class: java.lang.Class<any>
            }
        }
        namespace table {
            class DefaultTableCellHeaderRenderer extends javax.swing.table.DefaultTableCellRenderer implements javax.swing.plaf.UIResource {
                public constructor()
                public setHorizontalTextPosition(arg0: int): void
                public getTableCellRendererComponent(arg0: javax.swing.JTable, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: int, arg5: int): java.awt.Component
                public static getColumnSortOrder(arg0: javax.swing.JTable, arg1: int): javax.swing.SortOrder
                public paintComponent(arg0: java.awt.Graphics): void
                public static class: java.lang.Class<any>
            }
        }
        namespace text {
            namespace html {
                interface FrameEditorPaneTag {
                }
            }
            class CompoundPrintable implements sun.swing.text.CountingPrintable {
                public constructor(arg0: java.util.List<sun.swing.text.CountingPrintable>)
                public print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
                public getNumberOfPages(): int
                public static class: java.lang.Class<any>
            }
            interface CountingPrintable extends java.awt.print.Printable {
                getNumberOfPages(): int
            }
            class TextComponentPrintable implements sun.swing.text.CountingPrintable {
                public static getPrintable(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.text.MessageFormat, arg2: java.text.MessageFormat): java.awt.print.Printable
                public getNumberOfPages(): int
                public print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
                public static class: java.lang.Class<any>
            }
        }
        abstract class AccumulativeRunnable<T> implements java.lang.Runnable {
            public constructor()
            protected run(arg0: java.util.List<T>): void
            public run(): void
            public add(...arg0: T[]): void
            protected submit(): void
            public static class: java.lang.Class<any>
        }
        abstract class AccumulativeRunnable$$Lambda<T> implements java.lang.Runnable {
            public constructor()
        }
        class BakedArrayList extends java.util.ArrayList {
            public constructor(arg0: int)
            public constructor(arg0: java.util.List)
            public cacheHashCode(): void
            public hashCode(): int
            public equals(arg0: java.lang.Object): boolean
            public static class: java.lang.Class<any>
        }
        abstract class CachedPainter {
            public constructor(arg0: int)
            public paint(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, ...arg6: java.lang.Object[]): void
            protected paintToImage(arg0: java.awt.Component, arg1: java.awt.Image, arg2: java.awt.Graphics, arg3: int, arg4: int, arg5: java.lang.Object[]): void
            protected paintImage(arg0: java.awt.Component, arg1: java.awt.Graphics, arg2: int, arg3: int, arg4: int, arg5: int, arg6: java.awt.Image, arg7: java.lang.Object[]): void
            protected createImage(arg0: java.awt.Component, arg1: int, arg2: int, arg3: java.awt.GraphicsConfiguration, arg4: java.lang.Object[]): java.awt.Image
            protected flush(): void
            public static class: java.lang.Class<any>
        }
        class DefaultLayoutStyle extends javax.swing.LayoutStyle {
            public constructor()
            public static getInstance(): javax.swing.LayoutStyle
            public getPreferredGap(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent, arg2: javax.swing.LayoutStyle$ComponentPlacement, arg3: int, arg4: java.awt.Container): int
            public getContainerGap(arg0: javax.swing.JComponent, arg1: int, arg2: java.awt.Container): int
            protected isLabelAndNonlabel(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent, arg2: int): boolean
            protected getButtonGap(arg0: javax.swing.JComponent, arg1: javax.swing.JComponent, arg2: int, arg3: int): int
            protected getButtonGap(arg0: javax.swing.JComponent, arg1: int, arg2: int): int
            public getButtonGap(arg0: javax.swing.JComponent, arg1: int): int
            protected flipDirection(arg0: int): int
            protected getIndent(arg0: javax.swing.JComponent, arg1: int): int
            public static class: java.lang.Class<any>
        }
        class DefaultLookup {
            public constructor()
            public static setDefaultLookup(arg0: sun.swing.DefaultLookup): void
            public static get(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): java.lang.Object
            public static getInt(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string, arg3: int): int
            public static getInt(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): int
            public static getInsets(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string, arg3: java.awt.Insets): java.awt.Insets
            public static getInsets(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): java.awt.Insets
            public static getBoolean(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string, arg3: boolean): boolean
            public static getBoolean(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): boolean
            public static getColor(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string, arg3: java.awt.Color): java.awt.Color
            public static getColor(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): java.awt.Color
            public static getIcon(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string, arg3: javax.swing.Icon): javax.swing.Icon
            public static getIcon(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): javax.swing.Icon
            public static getBorder(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string, arg3: javax.swing.border.Border): javax.swing.border.Border
            public static getBorder(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): javax.swing.border.Border
            public getDefault(arg0: javax.swing.JComponent, arg1: javax.swing.plaf.ComponentUI, arg2: java.lang.String | string): java.lang.Object
            public static class: java.lang.Class<any>
        }
        class FilePane extends javax.swing.JPanel implements java.beans.PropertyChangeListener {
            public static ACTION_APPROVE_SELECTION: string
            public static ACTION_CANCEL: string
            public static ACTION_EDIT_FILE_NAME: string
            public static ACTION_REFRESH: string
            public static ACTION_CHANGE_TO_PARENT_DIRECTORY: string
            public static ACTION_NEW_FOLDER: string
            public static ACTION_VIEW_LIST: string
            public static ACTION_VIEW_DETAILS: string
            public static VIEWTYPE_LIST: int
            public static VIEWTYPE_DETAILS: int
            protected newFolderAction: javax.swing.Action
            public constructor(arg0: sun.swing.FilePane$FileChooserUIAccessor)
            public uninstallUI(): void
            protected getFileChooser(): javax.swing.JFileChooser
            protected getModel(): javax.swing.plaf.basic.BasicDirectoryModel
            public getViewType(): int
            public setViewType(arg0: int): void
            public getViewTypeAction(arg0: int): javax.swing.Action
            protected installDefaults(): void
            public getActions(): javax.swing.Action[]
            protected createActionMap(): void
            public static addActionsToMap(arg0: javax.swing.ActionMap, arg1: javax.swing.Action[]): void
            public createList(): javax.swing.JPanel
            public createDetailsView(): javax.swing.JPanel
            public createListSelectionListener(): javax.swing.event.ListSelectionListener
            public getNewFolderAction(): javax.swing.Action
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            public ensureFileIsVisible(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: java.io.File): void
            public rescanCurrentDirectory(): void
            public clearSelection(): void
            public getViewMenu(): javax.swing.JMenu
            public getComponentPopupMenu(): javax.swing.JPopupMenu
            protected getMouseHandler(): sun.swing.FilePane$Handler
            protected isDirectorySelected(): boolean
            protected getDirectory(): java.io.File
            public canWrite(arg0: java.io.File): boolean
            public static usesShellFolder(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda): boolean
            public static class: java.lang.Class<any>
        }
        class ImageCache {
            public constructor(arg0: int)
            public flush(): void
            public getImage(arg0: java.lang.Object, arg1: java.awt.GraphicsConfiguration, arg2: int, arg3: int, arg4: java.lang.Object[]): java.awt.Image
            public setImage(arg0: java.lang.Object, arg1: java.awt.GraphicsConfiguration, arg2: int, arg3: int, arg4: java.lang.Object[], arg5: java.awt.Image): void
            public static class: java.lang.Class<any>
        }
        class ImageIconUIResource extends javax.swing.ImageIcon implements javax.swing.plaf.UIResource {
            public constructor(arg0: byte[])
            public constructor(arg0: java.awt.Image)
            public static class: java.lang.Class<any>
        }
        class JLightweightFrame extends sun.awt.LightweightFrame implements javax.swing.RootPaneContainer {
            public constructor()
            public dispose(): void
            public setContent(arg0: sun.swing.LightweightContent): void
            public getGraphics(): java.awt.Graphics
            public grabFocus(): void
            public ungrabFocus(): void
            public getScaleFactor(): int
            public notifyDisplayChanged(arg0: int): void
            public addNotify(): void
            public reshape(arg0: int, arg1: int, arg2: int, arg3: int): void
            public getRootPane(): javax.swing.JRootPane
            public setContentPane(arg0: java.awt.Container): void
            public getContentPane(): java.awt.Container
            public setLayeredPane(arg0: javax.swing.JLayeredPane | javax.swing.JLayeredPane$$Lambda): void
            public getLayeredPane(): javax.swing.JLayeredPane
            public setGlassPane(arg0: java.awt.Component): void
            public getGlassPane(): java.awt.Component
            public createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.dnd.DragSource, arg2: java.awt.Component, arg3: int, arg4: java.awt.dnd.DragGestureListener): T
            public createDragSourceContextPeer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            public addDropTarget<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DropTarget): void
            public removeDropTarget<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DropTarget): void
            public static class: java.lang.Class<any>
        }
        interface LightweightContent {
            getComponent(): javax.swing.JComponent
            paintLock(): void
            paintUnlock(): void
            imageBufferReset(arg0: int[], arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): void
            imageBufferReset(arg0: int[], arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
            imageReshaped(arg0: int, arg1: int, arg2: int, arg3: int): void
            imageUpdated(arg0: int, arg1: int, arg2: int, arg3: int): void
            focusGrabbed(): void
            focusUngrabbed(): void
            preferredSizeChanged(arg0: int, arg1: int): void
            maximumSizeChanged(arg0: int, arg1: int): void
            minimumSizeChanged(arg0: int, arg1: int): void
            setCursor(arg0: java.awt.Cursor): void
            createDragGestureRecognizer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.lang.Class<T>, arg1: java.awt.dnd.DragSource, arg2: java.awt.Component, arg3: int, arg4: java.awt.dnd.DragGestureListener): T
            createDragSourceContextPeer<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DragGestureEvent): java.awt.dnd.peer.DragSourceContextPeer
            addDropTarget<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DropTarget): void
            removeDropTarget<T extends java.awt.dnd.DragGestureRecognizer>(arg0: java.awt.dnd.DropTarget): void
        }
        interface MenuItemCheckIconFactory {
            getIcon(arg0: javax.swing.JMenuItem): javax.swing.Icon
            isCompatible(arg0: java.lang.Object, arg1: java.lang.String | string): boolean
        }
        class MenuItemLayoutHelper {
            public static MAX_ARROW_WIDTH: sun.swing.StringUIClientPropertyKey
            public static MAX_CHECK_WIDTH: sun.swing.StringUIClientPropertyKey
            public static MAX_ICON_WIDTH: sun.swing.StringUIClientPropertyKey
            public static MAX_TEXT_WIDTH: sun.swing.StringUIClientPropertyKey
            public static MAX_ACC_WIDTH: sun.swing.StringUIClientPropertyKey
            public static MAX_LABEL_WIDTH: sun.swing.StringUIClientPropertyKey
            protected constructor()
            public constructor(arg0: javax.swing.JMenuItem, arg1: javax.swing.Icon, arg2: javax.swing.Icon, arg3: java.awt.Rectangle, arg4: int, arg5: java.lang.String | string, arg6: boolean, arg7: java.awt.Font, arg8: java.awt.Font, arg9: boolean, arg10: java.lang.String | string)
            protected reset(arg0: javax.swing.JMenuItem, arg1: javax.swing.Icon, arg2: javax.swing.Icon, arg3: java.awt.Rectangle, arg4: int, arg5: java.lang.String | string, arg6: boolean, arg7: java.awt.Font, arg8: java.awt.Font, arg9: boolean, arg10: java.lang.String | string): void
            protected calcWidthsAndHeights(): void
            protected calcMaxWidths(): void
            protected calcMaxWidth(arg0: sun.swing.MenuItemLayoutHelper$RectSize, arg1: java.lang.Object): void
            protected calcMaxValue(arg0: java.lang.Object, arg1: int): int
            protected getParentIntProperty(arg0: java.lang.Object): int
            public static isColumnLayout(arg0: boolean, arg1: javax.swing.JMenuItem): boolean
            public static isColumnLayout(arg0: boolean, arg1: int, arg2: int, arg3: int): boolean
            public layoutMenuItem(): sun.swing.MenuItemLayoutHelper$LayoutResult
            public getLTRColumnAlignment(): sun.swing.MenuItemLayoutHelper$ColumnAlignment
            public getRTLColumnAlignment(): sun.swing.MenuItemLayoutHelper$ColumnAlignment
            protected prepareForLayout(arg0: sun.swing.MenuItemLayoutHelper$LayoutResult): void
            protected layoutIconAndTextInLabelRect(arg0: sun.swing.MenuItemLayoutHelper$LayoutResult): void
            public static getMenuItemParent(arg0: javax.swing.JMenuItem): javax.swing.JComponent
            public static clearUsedParentClientProperties(arg0: javax.swing.JMenuItem): void
            public static clearUsedClientProperties(arg0: javax.swing.JComponent): void
            public static max(...arg0: int[]): int
            public static createMaxRect(): java.awt.Rectangle
            public static addMaxWidth(arg0: sun.swing.MenuItemLayoutHelper$RectSize, arg1: int, arg2: java.awt.Dimension): void
            public static addWidth(arg0: int, arg1: int, arg2: java.awt.Dimension): void
            public getMenuItem(): javax.swing.JMenuItem
            public getMenuItemParent(): javax.swing.JComponent
            public getFont(): java.awt.Font
            public getAccFont(): java.awt.Font
            public getFontMetrics(): java.awt.FontMetrics
            public getAccFontMetrics(): java.awt.FontMetrics
            public getIcon(): javax.swing.Icon
            public getCheckIcon(): javax.swing.Icon
            public getArrowIcon(): javax.swing.Icon
            public getText(): string
            public getAccText(): string
            public isColumnLayout(): boolean
            public useCheckAndArrow(): boolean
            public isLeftToRight(): boolean
            public isTopLevelMenu(): boolean
            public getHtmlView(): javax.swing.text.View
            public getVerticalAlignment(): int
            public getHorizontalAlignment(): int
            public getVerticalTextPosition(): int
            public getHorizontalTextPosition(): int
            public getGap(): int
            public getLeadingGap(): int
            public getAfterCheckIconGap(): int
            public getMinTextOffset(): int
            public getViewRect(): java.awt.Rectangle
            public getIconSize(): sun.swing.MenuItemLayoutHelper$RectSize
            public getTextSize(): sun.swing.MenuItemLayoutHelper$RectSize
            public getAccSize(): sun.swing.MenuItemLayoutHelper$RectSize
            public getCheckSize(): sun.swing.MenuItemLayoutHelper$RectSize
            public getArrowSize(): sun.swing.MenuItemLayoutHelper$RectSize
            public getLabelSize(): sun.swing.MenuItemLayoutHelper$RectSize
            protected setMenuItem(arg0: javax.swing.JMenuItem): void
            protected setMenuItemParent(arg0: javax.swing.JComponent): void
            protected setFont(arg0: java.awt.Font): void
            protected setAccFont(arg0: java.awt.Font): void
            protected setFontMetrics(arg0: java.awt.FontMetrics): void
            protected setAccFontMetrics(arg0: java.awt.FontMetrics): void
            protected setIcon(arg0: javax.swing.Icon): void
            protected setCheckIcon(arg0: javax.swing.Icon): void
            protected setArrowIcon(arg0: javax.swing.Icon): void
            protected setText(arg0: java.lang.String | string): void
            protected setAccText(arg0: java.lang.String | string): void
            protected setColumnLayout(arg0: boolean): void
            protected setUseCheckAndArrow(arg0: boolean): void
            protected setLeftToRight(arg0: boolean): void
            protected setTopLevelMenu(arg0: boolean): void
            protected setHtmlView(arg0: javax.swing.text.View): void
            protected setVerticalAlignment(arg0: int): void
            protected setHorizontalAlignment(arg0: int): void
            protected setVerticalTextPosition(arg0: int): void
            protected setHorizontalTextPosition(arg0: int): void
            protected setGap(arg0: int): void
            protected setLeadingGap(arg0: int): void
            protected setAfterCheckIconGap(arg0: int): void
            protected setMinTextOffset(arg0: int): void
            protected setViewRect(arg0: java.awt.Rectangle): void
            protected setIconSize(arg0: sun.swing.MenuItemLayoutHelper$RectSize): void
            protected setTextSize(arg0: sun.swing.MenuItemLayoutHelper$RectSize): void
            protected setAccSize(arg0: sun.swing.MenuItemLayoutHelper$RectSize): void
            protected setCheckSize(arg0: sun.swing.MenuItemLayoutHelper$RectSize): void
            protected setArrowSize(arg0: sun.swing.MenuItemLayoutHelper$RectSize): void
            protected setLabelSize(arg0: sun.swing.MenuItemLayoutHelper$RectSize): void
            public getLeftTextExtraWidth(): int
            public static useCheckAndArrow(arg0: javax.swing.JMenuItem): boolean
            public static class: java.lang.Class<any>
        }
        class PrintColorUIResource extends javax.swing.plaf.ColorUIResource {
            public constructor(arg0: int, arg1: java.awt.Color)
            public getPrintColor(): java.awt.Color
            public static class: java.lang.Class<any>
        }
        class PrintingStatus {
            public static createPrintingStatus(arg0: java.awt.Component, arg1: java.awt.print.PrinterJob): sun.swing.PrintingStatus
            protected constructor(arg0: java.awt.Component, arg1: java.awt.print.PrinterJob)
            public showModal(arg0: boolean): void
            public dispose(): void
            public isAborted(): boolean
            public createNotificationPrintable(arg0: java.awt.print.Printable): java.awt.print.Printable
            public static class: java.lang.Class<any>
        }
        class StringUIClientPropertyKey implements sun.swing.UIClientPropertyKey {
            public constructor(arg0: java.lang.String | string)
            public toString(): string
            public static class: java.lang.Class<any>
        }
        class SwingAccessor {
            public static setJTextComponentAccessor(arg0: sun.swing.SwingAccessor$JTextComponentAccessor): void
            public static getJTextComponentAccessor(): sun.swing.SwingAccessor$JTextComponentAccessor
            public static setJLightweightFrameAccessor(arg0: sun.swing.SwingAccessor$JLightweightFrameAccessor): void
            public static getJLightweightFrameAccessor(): sun.swing.SwingAccessor$JLightweightFrameAccessor
            public static setRepaintManagerAccessor(arg0: sun.swing.SwingAccessor$RepaintManagerAccessor): void
            public static getRepaintManagerAccessor(): sun.swing.SwingAccessor$RepaintManagerAccessor
            public static class: java.lang.Class<any>
        }
        class SwingUtilities2 {
            public static LAF_STATE_KEY: java.lang.Object
            public static MENU_SELECTION_MANAGER_LISTENER_KEY: java.lang.Object
            public static DEFAULT_FRC: java.awt.font.FontRenderContext
            public static AA_TEXT_PROPERTY_KEY: java.lang.Object
            public static IMPLIED_CR: string
            public static COMPONENT_UI_PROPERTY_KEY: java.lang.Object
            public static BASICMENUITEMUI_MAX_TEXT_OFFSET: sun.swing.StringUIClientPropertyKey
            public constructor()
            public static isComplexLayout(arg0: char[], arg1: int, arg2: int): boolean
            public static drawTextAntialiased(arg0: javax.swing.JComponent): sun.swing.SwingUtilities2$AATextInfo
            public static getLeftSideBearing(arg0: javax.swing.JComponent, arg1: java.awt.FontMetrics, arg2: java.lang.String | string): int
            public static getLeftSideBearing(arg0: javax.swing.JComponent, arg1: java.awt.FontMetrics, arg2: char): int
            public static getFontMetrics(arg0: javax.swing.JComponent, arg1: java.awt.Graphics): java.awt.FontMetrics
            public static getFontMetrics(arg0: javax.swing.JComponent, arg1: java.awt.Graphics, arg2: java.awt.Font): java.awt.FontMetrics
            public static stringWidth(arg0: javax.swing.JComponent, arg1: java.awt.FontMetrics, arg2: java.lang.String | string): int
            public static clipStringIfNecessary(arg0: javax.swing.JComponent, arg1: java.awt.FontMetrics, arg2: java.lang.String | string, arg3: int): string
            public static clipString(arg0: javax.swing.JComponent, arg1: java.awt.FontMetrics, arg2: java.lang.String | string, arg3: int): string
            public static drawString(arg0: javax.swing.JComponent, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int): void
            public static drawStringUnderlineCharAt(arg0: javax.swing.JComponent, arg1: java.awt.Graphics, arg2: java.lang.String | string, arg3: int, arg4: int, arg5: int): void
            public static loc2IndexFileList(arg0: javax.swing.JList | javax.swing.JList$$Lambda, arg1: java.awt.Point): int
            public static pointOutsidePrefSize(arg0: javax.swing.JTable, arg1: int, arg2: int, arg3: java.awt.Point): boolean
            public static setLeadAnchorWithoutSelection(arg0: javax.swing.ListSelectionModel, arg1: int, arg2: int): void
            public static shouldIgnore(arg0: java.awt.event.MouseEvent, arg1: javax.swing.JComponent): boolean
            public static adjustFocus(arg0: javax.swing.JComponent): void
            public static drawChars(arg0: javax.swing.JComponent, arg1: java.awt.Graphics, arg2: char[], arg3: int, arg4: int, arg5: int, arg6: int): int
            public static drawString(arg0: javax.swing.JComponent, arg1: java.awt.Graphics, arg2: java.text.AttributedCharacterIterator, arg3: int, arg4: int): float
            public static drawVLine(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int): void
            public static drawHLine(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int): void
            public static drawRect(arg0: java.awt.Graphics, arg1: int, arg2: int, arg3: int, arg4: int): void
            public static getGraphics2D(arg0: java.awt.Graphics): java.awt.Graphics2D
            public static getFontRenderContext(arg0: java.awt.Component): java.awt.font.FontRenderContext
            public static getFontMetrics(arg0: javax.swing.JComponent, arg1: java.awt.Font): java.awt.FontMetrics
            public static useSelectedTextColor(arg0: javax.swing.text.Highlighter$Highlight, arg1: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda): boolean
            public static canAccessSystemClipboard(): boolean
            public static canCurrentEventAccessSystemClipboard(): boolean
            public static canEventAccessSystemClipboard(arg0: java.awt.AWTEvent): boolean
            public static checkAccess(arg0: int): void
            public static displayPropertiesToCSS(arg0: java.awt.Font, arg1: java.awt.Color): string
            public static makeIcon(arg0: java.lang.Class<any>, arg1: java.lang.Class<any>, arg2: java.lang.String | string): java.lang.Object
            public static isLocalDisplay(): boolean
            public static getUIDefaultsInt(arg0: java.lang.Object): int
            public static getUIDefaultsInt(arg0: java.lang.Object, arg1: java.util.Locale): int
            public static getUIDefaultsInt(arg0: java.lang.Object, arg1: int): int
            public static getUIDefaultsInt(arg0: java.lang.Object, arg1: java.util.Locale, arg2: int): int
            public static compositeRequestFocus(arg0: java.awt.Component): java.awt.Component
            public static tabbedPaneChangeFocusTo(arg0: java.awt.Component): boolean
            public static submit<V>(arg0: java.util.concurrent.Callable<V> | java.util.concurrent.Callable$$Lambda<V>): java.util.concurrent.Future<V>
            public static submit<V>(arg0: java.lang.Runnable | java.lang.Runnable$$Lambda, arg1: V): java.util.concurrent.Future<V>
            public static setSkipClickCount(arg0: java.awt.Component, arg1: int): void
            public static getAdjustedClickCount(arg0: javax.swing.text.JTextComponent | javax.swing.text.JTextComponent$$Lambda, arg1: java.awt.event.MouseEvent): int
            public static liesInHorizontal(arg0: java.awt.Rectangle, arg1: java.awt.Point, arg2: boolean, arg3: boolean): sun.swing.SwingUtilities2$Section
            public static liesInVertical(arg0: java.awt.Rectangle, arg1: java.awt.Point, arg2: boolean): sun.swing.SwingUtilities2$Section
            public static convertColumnIndexToModel(arg0: javax.swing.table.TableColumnModel, arg1: int): int
            public static convertColumnIndexToView(arg0: javax.swing.table.TableColumnModel, arg1: int): int
            public static getSystemMnemonicKeyMask(): int
            public static getTreePath(arg0: javax.swing.event.TreeModelEvent, arg1: javax.swing.tree.TreeModel): javax.swing.tree.TreePath
            public static class: java.lang.Class<any>
        }
        abstract class UIAction implements javax.swing.Action {
            public constructor(arg0: java.lang.String | string)
            public getName(): string
            public getValue(arg0: java.lang.String | string): java.lang.Object
            public putValue(arg0: java.lang.String | string, arg1: java.lang.Object): void
            public setEnabled(arg0: boolean): void
            public isEnabled(): boolean
            public isEnabled(arg0: java.lang.Object): boolean
            public addPropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public removePropertyChangeListener(arg0: java.beans.PropertyChangeListener): void
            public static class: java.lang.Class<any>
        }
        class WindowsPlacesBar extends javax.swing.JToolBar implements java.awt.event.ActionListener , java.beans.PropertyChangeListener {
            public constructor(arg0: javax.swing.JFileChooser | javax.swing.JFileChooser$$Lambda, arg1: boolean)
            protected doDirectoryChanged(arg0: java.io.File): void
            public propertyChange(arg0: java.beans.PropertyChangeEvent): void
            public actionPerformed(arg0: java.awt.event.ActionEvent): void
            public getPreferredSize(): java.awt.Dimension
            public static class: java.lang.Class<any>
        }
    }
}
