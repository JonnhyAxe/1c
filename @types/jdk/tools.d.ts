declare namespace com {
   namespace sun {
      namespace jarsigner {
         interface ContentSignerParameters {
             public getCommandLine(): java.lang.String[]
             public getTimestampingAuthority(): java.net.URI
             public getTimestampingAuthorityCertificate(): java.security.cert.X509Certificate
             public getTSAPolicyID(): java.lang.String
             public getSignature(): byte[]
             public getSignatureAlgorithm(): java.lang.String
             public getSignerCertificateChain(): java.security.cert.X509Certificate[]
             public getContent(): byte[]
             public getSource(): java.util.zip.ZipFile
         }
         abstract class ContentSigner {
             public constructor()
             public generateSignedData(arg0: com.sun.jarsigner.ContentSignerParameters, arg1: boolean, arg2: boolean): byte[]
         }

      }
      namespace jdi {
         class Bootstrap {
             public constructor()
             public static virtualMachineManager(): com.sun.jdi.VirtualMachineManager
         }
         class ClassNotPreparedException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class InconsistentDebugInfoException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class InternalException extends java.lang.RuntimeException {
             constructor(...args: any[])
             public errorCode(): int
         }
         class InvalidCodeIndexException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class InvalidLineNumberException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class InvalidStackFrameException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class JDIPermission extends java.security.BasicPermission {
             constructor(...args: any[])
         }
         class NativeMethodException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class ObjectCollectedException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class VMCannotBeModifiedException extends java.lang.UnsupportedOperationException {
             constructor(...args: any[])
         }
         class VMDisconnectedException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class VMMismatchException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         class VMOutOfMemoryException extends java.lang.RuntimeException {
             constructor(...args: any[])
         }
         interface LocalVariable extends com.sun.jdi.Mirror , java.lang.Comparable<com.sun.jdi.LocalVariable> {
             public name(): java.lang.String
             public typeName(): java.lang.String
             public type(): com.sun.jdi.Type
             public signature(): java.lang.String
             public genericSignature(): java.lang.String
             public isVisible(arg0: com.sun.jdi.StackFrame): boolean
             public isArgument(): boolean
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         class InvocationException extends java.lang.Exception {
             exception<T>(...args: any[]): any
             public constructor(arg0: com.sun.jdi.ObjectReference)
         }
         interface MonitorInfo extends com.sun.jdi.Mirror {
             public monitor(): com.sun.jdi.ObjectReference
             public stackDepth(): int
             public thread(): com.sun.jdi.ThreadReference
         }
         interface StackFrame extends com.sun.jdi.Mirror , com.sun.jdi.Locatable {
             public location(): com.sun.jdi.Location
             public thread(): com.sun.jdi.ThreadReference
             public thisObject(): com.sun.jdi.ObjectReference
             public visibleVariables(): java.util.List<com.sun.jdi.LocalVariable>
             public visibleVariableByName(arg0: java.lang.String): com.sun.jdi.LocalVariable
             public getValue(arg0: com.sun.jdi.LocalVariable): com.sun.jdi.Value
             public getValues(arg0: java.util.List<com.sun.jdi.LocalVariable>): java.util.Map<com.sun.jdi.LocalVariable, com.sun.jdi.Value>
             public setValue(arg0: com.sun.jdi.LocalVariable, arg1: com.sun.jdi.Value): void
             public getArgumentValues(): java.util.List<com.sun.jdi.Value>
         }
         class IncompatibleThreadStateException extends java.lang.Exception {
             constructor(...args: any[])
         }
         interface Location extends com.sun.jdi.Mirror , java.lang.Comparable<com.sun.jdi.Location> {
             public declaringType(): com.sun.jdi.ReferenceType
             public method(): com.sun.jdi.Method
             public codeIndex(): long
             sourceName<T>(...args: any[]): any
             sourcePath<T>(...args: any[]): any
             lineNumber<T>(...args: any[]): any
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface Locatable {
             public location(): com.sun.jdi.Location
         }
         interface Method extends com.sun.jdi.TypeComponent , com.sun.jdi.Locatable , java.lang.Comparable<com.sun.jdi.Method> {
             public returnTypeName(): java.lang.String
             public returnType(): com.sun.jdi.Type
             public argumentTypeNames(): java.util.List<java.lang.String>
             public argumentTypes(): java.util.List<com.sun.jdi.Type>
             public isAbstract(): boolean
             public isDefault(): boolean
             public isSynchronized(): boolean
             public isNative(): boolean
             public isVarArgs(): boolean
             public isBridge(): boolean
             public isConstructor(): boolean
             public isStaticInitializer(): boolean
             public isObsolete(): boolean
             allLineLocations<T>(...args: any[]): any
             locationsOfLine<T>(...args: any[]): any
             public locationOfCodeIndex(arg0: long): com.sun.jdi.Location
             public variables(): java.util.List<com.sun.jdi.LocalVariable>
             public variablesByName(arg0: java.lang.String): java.util.List<com.sun.jdi.LocalVariable>
             public arguments(): java.util.List<com.sun.jdi.LocalVariable>
             public bytecodes(): byte[]
             public location(): com.sun.jdi.Location
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface TypeComponent extends com.sun.jdi.Mirror , com.sun.jdi.Accessible {
             public name(): java.lang.String
             public signature(): java.lang.String
             public genericSignature(): java.lang.String
             public declaringType(): com.sun.jdi.ReferenceType
             public isStatic(): boolean
             public isFinal(): boolean
             public isSynthetic(): boolean
         }
         interface Field extends com.sun.jdi.TypeComponent , java.lang.Comparable<com.sun.jdi.Field> {
             public typeName(): java.lang.String
             public type(): com.sun.jdi.Type
             public isTransient(): boolean
             public isVolatile(): boolean
             public isEnumConstant(): boolean
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         class AbsentInformationException extends java.lang.Exception {
             constructor(...args: any[])
         }
         interface ClassObjectReference extends com.sun.jdi.ObjectReference {
             public reflectedType(): com.sun.jdi.ReferenceType
         }
         interface ClassLoaderReference extends com.sun.jdi.ObjectReference {
             public definedClasses(): java.util.List<com.sun.jdi.ReferenceType>
             public visibleClasses(): java.util.List<com.sun.jdi.ReferenceType>
         }
         interface ArrayReference extends com.sun.jdi.ObjectReference {
             public length(): int
             public getValue(arg0: int): com.sun.jdi.Value
             getValues<T>(...args: any[]): any
             public setValue(arg0: int, arg1: com.sun.jdi.Value): void
             setValues<T>(...args: any[]): any
         }
         interface ArrayType extends com.sun.jdi.ReferenceType {
             public newInstance(arg0: int): com.sun.jdi.ArrayReference
             public componentSignature(): java.lang.String
             public componentTypeName(): java.lang.String
             public componentType(): com.sun.jdi.Type
         }
         interface InterfaceType extends com.sun.jdi.ReferenceType {
             public superinterfaces(): java.util.List<com.sun.jdi.InterfaceType>
             public subinterfaces(): java.util.List<com.sun.jdi.InterfaceType>
             public implementors(): java.util.List<com.sun.jdi.ClassType>
             public invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.Value
         }
         interface ClassType extends com.sun.jdi.ReferenceType {
             public static INVOKE_SINGLE_THREADED: int
             public superclass(): com.sun.jdi.ClassType
             public interfaces(): java.util.List<com.sun.jdi.InterfaceType>
             public allInterfaces(): java.util.List<com.sun.jdi.InterfaceType>
             public subclasses(): java.util.List<com.sun.jdi.ClassType>
             public isEnum(): boolean
             public setValue(arg0: com.sun.jdi.Field, arg1: com.sun.jdi.Value): void
             public invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.Value
             public newInstance(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.ObjectReference
             public concreteMethodByName(arg0: java.lang.String, arg1: java.lang.String): com.sun.jdi.Method
         }
         interface VoidType extends com.sun.jdi.Type {
         }
         interface DoubleType extends com.sun.jdi.PrimitiveType {
         }
         interface FloatType extends com.sun.jdi.PrimitiveType {
         }
         interface LongType extends com.sun.jdi.PrimitiveType {
         }
         interface IntegerType extends com.sun.jdi.PrimitiveType {
         }
         interface ShortType extends com.sun.jdi.PrimitiveType {
         }
         interface CharType extends com.sun.jdi.PrimitiveType {
         }
         interface ByteType extends com.sun.jdi.PrimitiveType {
         }
         interface PrimitiveType extends com.sun.jdi.Type {
         }
         interface BooleanType extends com.sun.jdi.PrimitiveType {
         }
         interface VirtualMachineManager {
             public defaultConnector(): com.sun.jdi.connect.LaunchingConnector
             public launchingConnectors(): java.util.List<com.sun.jdi.connect.LaunchingConnector>
             public attachingConnectors(): java.util.List<com.sun.jdi.connect.AttachingConnector>
             public listeningConnectors(): java.util.List<com.sun.jdi.connect.ListeningConnector>
             public allConnectors(): java.util.List<com.sun.jdi.connect.Connector>
             public connectedVirtualMachines(): java.util.List<com.sun.jdi.VirtualMachine>
             public majorInterfaceVersion(): int
             public minorInterfaceVersion(): int
             createVirtualMachine<T>(...args: any[]): any
         }
         interface StringReference extends com.sun.jdi.ObjectReference {
             public value(): java.lang.String
         }
         interface DoubleValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.DoubleValue> {
             public value(): double
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface FloatValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.FloatValue> {
             public value(): float
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface LongValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.LongValue> {
             public value(): long
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface IntegerValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.IntegerValue> {
             public value(): int
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface ShortValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.ShortValue> {
             public value(): short
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface CharValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.CharValue> {
             public value(): char
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface ByteValue extends com.sun.jdi.PrimitiveValue , java.lang.Comparable<com.sun.jdi.ByteValue> {
             public value(): byte
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface PrimitiveValue extends com.sun.jdi.Value {
             public booleanValue(): boolean
             public byteValue(): byte
             public charValue(): char
             public shortValue(): short
             public intValue(): int
             public longValue(): long
             public floatValue(): float
             public doubleValue(): double
         }
         interface BooleanValue extends com.sun.jdi.PrimitiveValue {
             public value(): boolean
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface ThreadGroupReference extends com.sun.jdi.ObjectReference {
             public name(): java.lang.String
             public parent(): com.sun.jdi.ThreadGroupReference
             public suspend(): void
             public resume(): void
             public threads(): java.util.List<com.sun.jdi.ThreadReference>
             public threadGroups(): java.util.List<com.sun.jdi.ThreadGroupReference>
         }
         interface ObjectReference extends com.sun.jdi.Value {
             public static INVOKE_SINGLE_THREADED: int
             public static INVOKE_NONVIRTUAL: int
             public referenceType(): com.sun.jdi.ReferenceType
             public getValue(arg0: com.sun.jdi.Field): com.sun.jdi.Value
             public getValues(arg0: java.util.List<com.sun.jdi.Field>): java.util.Map<com.sun.jdi.Field, com.sun.jdi.Value>
             public setValue(arg0: com.sun.jdi.Field, arg1: com.sun.jdi.Value): void
             public invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.Value
             public disableCollection(): void
             public enableCollection(): void
             public isCollected(): boolean
             public uniqueID(): long
             public waitingThreads(): java.util.List<com.sun.jdi.ThreadReference>
             public owningThread(): com.sun.jdi.ThreadReference
             public entryCount(): int
             public referringObjects(arg0: long): java.util.List<com.sun.jdi.ObjectReference>
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface ThreadReference extends com.sun.jdi.ObjectReference {
             public static THREAD_STATUS_UNKNOWN: int
             public static THREAD_STATUS_ZOMBIE: int
             public static THREAD_STATUS_RUNNING: int
             public static THREAD_STATUS_SLEEPING: int
             public static THREAD_STATUS_MONITOR: int
             public static THREAD_STATUS_WAIT: int
             public static THREAD_STATUS_NOT_STARTED: int
             public name(): java.lang.String
             public suspend(): void
             public resume(): void
             public suspendCount(): int
             public stop(arg0: com.sun.jdi.ObjectReference): void
             public interrupt(): void
             public status(): int
             public isSuspended(): boolean
             public isAtBreakpoint(): boolean
             public threadGroup(): com.sun.jdi.ThreadGroupReference
             public frameCount(): int
             frames<T>(...args: any[]): any
             public frame(arg0: int): com.sun.jdi.StackFrame
             public ownedMonitors(): java.util.List<com.sun.jdi.ObjectReference>
             public ownedMonitorsAndFrames(): java.util.List<com.sun.jdi.MonitorInfo>
             public currentContendedMonitor(): com.sun.jdi.ObjectReference
             public popFrames(arg0: com.sun.jdi.StackFrame): void
             public forceEarlyReturn(arg0: com.sun.jdi.Value): void
         }
         interface Accessible {
             public modifiers(): int
             public isPrivate(): boolean
             public isPackagePrivate(): boolean
             public isProtected(): boolean
             public isPublic(): boolean
         }
         interface ReferenceType extends com.sun.jdi.Type , java.lang.Comparable<com.sun.jdi.ReferenceType> , com.sun.jdi.Accessible {
             public name(): java.lang.String
             public genericSignature(): java.lang.String
             public classLoader(): com.sun.jdi.ClassLoaderReference
             public sourceName(): java.lang.String
             public sourceNames(arg0: java.lang.String): java.util.List<java.lang.String>
             public sourcePaths(arg0: java.lang.String): java.util.List<java.lang.String>
             public sourceDebugExtension(): java.lang.String
             public isStatic(): boolean
             public isAbstract(): boolean
             public isFinal(): boolean
             public isPrepared(): boolean
             public isVerified(): boolean
             public isInitialized(): boolean
             public failedToInitialize(): boolean
             public fields(): java.util.List<com.sun.jdi.Field>
             public visibleFields(): java.util.List<com.sun.jdi.Field>
             public allFields(): java.util.List<com.sun.jdi.Field>
             public fieldByName(arg0: java.lang.String): com.sun.jdi.Field
             public methods(): java.util.List<com.sun.jdi.Method>
             public visibleMethods(): java.util.List<com.sun.jdi.Method>
             public allMethods(): java.util.List<com.sun.jdi.Method>
             methodsByName<T>(...args: any[]): any
             public nestedTypes(): java.util.List<com.sun.jdi.ReferenceType>
             public getValue(arg0: com.sun.jdi.Field): com.sun.jdi.Value
             public getValues(arg0: java.util.List<com.sun.jdi.Field>): java.util.Map<com.sun.jdi.Field, com.sun.jdi.Value>
             public classObject(): com.sun.jdi.ClassObjectReference
             allLineLocations<T>(...args: any[]): any
             locationsOfLine<T>(...args: any[]): any
             public availableStrata(): java.util.List<java.lang.String>
             public defaultStratum(): java.lang.String
             public instances(arg0: long): java.util.List<com.sun.jdi.ObjectReference>
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
             public majorVersion(): int
             public minorVersion(): int
             public constantPoolCount(): int
             public constantPool(): byte[]
         }
         interface PathSearchingVirtualMachine extends com.sun.jdi.VirtualMachine {
             public classPath(): java.util.List<java.lang.String>
             public bootClassPath(): java.util.List<java.lang.String>
             public baseDirectory(): java.lang.String
         }
         class ClassNotLoadedException extends java.lang.Exception {
             constructor(...args: any[])
             public className(): java.lang.String
         }
         class InvalidTypeException extends java.lang.Exception {
             constructor(...args: any[])
         }
         interface Type extends com.sun.jdi.Mirror {
             public signature(): java.lang.String
             public name(): java.lang.String
         }
         interface VirtualMachine extends com.sun.jdi.Mirror {
             public static TRACE_NONE: int
             public static TRACE_SENDS: int
             public static TRACE_RECEIVES: int
             public static TRACE_EVENTS: int
             public static TRACE_REFTYPES: int
             public static TRACE_OBJREFS: int
             public static TRACE_ALL: int
             public classesByName(arg0: java.lang.String): java.util.List<com.sun.jdi.ReferenceType>
             public allClasses(): java.util.List<com.sun.jdi.ReferenceType>
             public redefineClasses(arg0: java.util.Map<T extends com.sun.jdi.ReferenceType, byte[]>): void
             public allThreads(): java.util.List<com.sun.jdi.ThreadReference>
             public suspend(): void
             public resume(): void
             public topLevelThreadGroups(): java.util.List<com.sun.jdi.ThreadGroupReference>
             public eventQueue(): com.sun.jdi.event.EventQueue
             public eventRequestManager(): com.sun.jdi.request.EventRequestManager
             mirrorOf<T>(...args: any[]): any
             public mirrorOfVoid(): com.sun.jdi.VoidValue
             public process(): java.lang.Process
             public dispose(): void
             public exit(arg0: int): void
             public canWatchFieldModification(): boolean
             public canWatchFieldAccess(): boolean
             public canGetBytecodes(): boolean
             public canGetSyntheticAttribute(): boolean
             public canGetOwnedMonitorInfo(): boolean
             public canGetCurrentContendedMonitor(): boolean
             public canGetMonitorInfo(): boolean
             public canUseInstanceFilters(): boolean
             public canRedefineClasses(): boolean
             public canAddMethod(): boolean
             public canUnrestrictedlyRedefineClasses(): boolean
             public canPopFrames(): boolean
             public canGetSourceDebugExtension(): boolean
             public canRequestVMDeathEvent(): boolean
             public canGetMethodReturnValues(): boolean
             public canGetInstanceInfo(): boolean
             public canUseSourceNameFilters(): boolean
             public canForceEarlyReturn(): boolean
             public canBeModified(): boolean
             public canRequestMonitorEvents(): boolean
             public canGetMonitorFrameInfo(): boolean
             public canGetClassFileVersion(): boolean
             public canGetConstantPool(): boolean
             public setDefaultStratum(arg0: java.lang.String): void
             public getDefaultStratum(): java.lang.String
             public instanceCounts(arg0: java.util.List<com.sun.jdi.ReferenceType>): long[]
             public description(): java.lang.String
             public version(): java.lang.String
             public name(): java.lang.String
             public setDebugTraceMode(arg0: int): void
         }
         interface VoidValue extends com.sun.jdi.Value {
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
         }
         interface Value extends com.sun.jdi.Mirror {
             public type(): com.sun.jdi.Type
         }
         interface Mirror {
             public virtualMachine(): com.sun.jdi.VirtualMachine
             toString<T>(...args: any[]): any
         }
         namespace connect {
            class TransportTimeoutException extends java.io.IOException {
                constructor(...args: any[])
            }
            class VMStartException extends java.lang.Exception {
                process<T>(...args: any[]): any
                constructor(...args: any[])
            }
            class IllegalConnectorArgumentsException extends java.lang.Exception {
                names: java.util.List<java.lang.String>
                constructor(...args: any[])
                public argumentNames(): java.util.List<java.lang.String>
            }
            interface Transport {
                public name(): java.lang.String
            }
            interface ListeningConnector extends com.sun.jdi.connect.Connector {
                public supportsMultipleConnections(): boolean
                public startListening(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): java.lang.String
                public stopListening(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): void
                public accept(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
            }
            interface AttachingConnector extends com.sun.jdi.connect.Connector {
                public attach(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
            }
            interface LaunchingConnector extends com.sun.jdi.connect.Connector {
                public launch(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
            }
            interface Connector {
                public name(): java.lang.String
                public description(): java.lang.String
                public transport(): com.sun.jdi.connect.Transport
                public defaultArguments(): java.util.Map<java.lang.String, com.sun.jdi.connect.Connector$Argument>
            }
            interface Connector$SelectedArgument extends com.sun.jdi.connect.Connector$Argument {
                public choices(): java.util.List<java.lang.String>
                public isValid(arg0: java.lang.String): boolean
            }
            interface Connector$StringArgument extends com.sun.jdi.connect.Connector$Argument {
                public isValid(arg0: java.lang.String): boolean
            }
            interface Connector$IntegerArgument extends com.sun.jdi.connect.Connector$Argument {
                public setValue(arg0: int): void
                isValid<T>(...args: any[]): any
                public stringValueOf(arg0: int): java.lang.String
                public intValue(): int
                public max(): int
                public min(): int
            }
            interface Connector$BooleanArgument extends com.sun.jdi.connect.Connector$Argument {
                public setValue(arg0: boolean): void
                public isValid(arg0: java.lang.String): boolean
                public stringValueOf(arg0: boolean): java.lang.String
                public booleanValue(): boolean
            }
            interface Connector$Argument extends java.io.Serializable {
                public name(): java.lang.String
                public label(): java.lang.String
                public description(): java.lang.String
                public value(): java.lang.String
                public setValue(arg0: java.lang.String): void
                public isValid(arg0: java.lang.String): boolean
                public mustSpecify(): boolean
            }
            namespace spi {
               class ClosedConnectionException extends java.io.IOException {
                   constructor(...args: any[])
               }
               abstract class TransportService {
                   public constructor()
                   public name(): java.lang.String
                   public description(): java.lang.String
                   public capabilities(): com.sun.jdi.connect.spi.TransportService$Capabilities
                   public attach(arg0: java.lang.String, arg1: long, arg2: long): com.sun.jdi.connect.spi.Connection
                   startListening<T>(...args: any[]): any
                   public stopListening(arg0: com.sun.jdi.connect.spi.TransportService$ListenKey): void
                   public accept(arg0: com.sun.jdi.connect.spi.TransportService$ListenKey, arg1: long, arg2: long): com.sun.jdi.connect.spi.Connection
               }
               abstract class TransportService$ListenKey {
                   public constructor()
                   public address(): java.lang.String
               }
               abstract class TransportService$Capabilities {
                   public constructor()
                   public supportsMultipleConnections(): boolean
                   public supportsAttachTimeout(): boolean
                   public supportsAcceptTimeout(): boolean
                   public supportsHandshakeTimeout(): boolean
               }
               abstract class Connection {
                   public constructor()
                   public readPacket(): byte[]
                   public writePacket(arg0: byte[]): void
                   public close(): void
                   public isOpen(): boolean
               }

            }

         }
         namespace event {
            interface ModificationWatchpointEvent extends com.sun.jdi.event.WatchpointEvent {
                public valueToBe(): com.sun.jdi.Value
            }
            interface AccessWatchpointEvent extends com.sun.jdi.event.WatchpointEvent {
            }
            interface WatchpointEvent extends com.sun.jdi.event.LocatableEvent {
                public field(): com.sun.jdi.Field
                public object(): com.sun.jdi.ObjectReference
                public valueCurrent(): com.sun.jdi.Value
            }
            interface VMDisconnectEvent extends com.sun.jdi.event.Event {
            }
            interface VMDeathEvent extends com.sun.jdi.event.Event {
            }
            interface VMStartEvent extends com.sun.jdi.event.Event {
                public thread(): com.sun.jdi.ThreadReference
            }
            interface ThreadStartEvent extends com.sun.jdi.event.Event {
                public thread(): com.sun.jdi.ThreadReference
            }
            interface ThreadDeathEvent extends com.sun.jdi.event.Event {
                public thread(): com.sun.jdi.ThreadReference
            }
            interface ExceptionEvent extends com.sun.jdi.event.LocatableEvent {
                public exception(): com.sun.jdi.ObjectReference
                public catchLocation(): com.sun.jdi.Location
            }
            interface ClassUnloadEvent extends com.sun.jdi.event.Event {
                public className(): java.lang.String
                public classSignature(): java.lang.String
            }
            interface ClassPrepareEvent extends com.sun.jdi.event.Event {
                public thread(): com.sun.jdi.ThreadReference
                public referenceType(): com.sun.jdi.ReferenceType
            }
            interface MonitorWaitedEvent extends com.sun.jdi.event.LocatableEvent {
                public thread(): com.sun.jdi.ThreadReference
                public monitor(): com.sun.jdi.ObjectReference
                public timedout(): boolean
            }
            interface MonitorWaitEvent extends com.sun.jdi.event.LocatableEvent {
                public thread(): com.sun.jdi.ThreadReference
                public monitor(): com.sun.jdi.ObjectReference
                public timeout(): long
            }
            interface MonitorContendedEnteredEvent extends com.sun.jdi.event.LocatableEvent {
                public thread(): com.sun.jdi.ThreadReference
                public monitor(): com.sun.jdi.ObjectReference
            }
            interface MonitorContendedEnterEvent extends com.sun.jdi.event.LocatableEvent {
                public thread(): com.sun.jdi.ThreadReference
                public monitor(): com.sun.jdi.ObjectReference
            }
            interface MethodExitEvent extends com.sun.jdi.event.LocatableEvent {
                public method(): com.sun.jdi.Method
                public returnValue(): com.sun.jdi.Value
            }
            interface MethodEntryEvent extends com.sun.jdi.event.LocatableEvent {
                public method(): com.sun.jdi.Method
            }
            interface StepEvent extends com.sun.jdi.event.LocatableEvent {
            }
            interface LocatableEvent extends com.sun.jdi.event.Event , com.sun.jdi.Locatable {
                public thread(): com.sun.jdi.ThreadReference
            }
            interface BreakpointEvent extends com.sun.jdi.event.LocatableEvent {
            }
            interface EventIterator extends java.util.Iterator<com.sun.jdi.event.Event> {
                public nextEvent(): com.sun.jdi.event.Event
            }
            interface Event extends com.sun.jdi.Mirror {
                public request(): com.sun.jdi.request.EventRequest
            }
            interface EventSet extends com.sun.jdi.Mirror , java.util.Set<com.sun.jdi.event.Event> {
                public suspendPolicy(): int
                public eventIterator(): com.sun.jdi.event.EventIterator
                public resume(): void
            }
            interface EventQueue extends com.sun.jdi.Mirror {
                remove<T>(...args: any[]): any
            }

         }
         namespace request {
            class DuplicateRequestException extends java.lang.RuntimeException {
                constructor(...args: any[])
            }
            class InvalidRequestStateException extends java.lang.RuntimeException {
                constructor(...args: any[])
            }
            interface VMDeathRequest extends com.sun.jdi.request.EventRequest {
            }
            interface ModificationWatchpointRequest extends com.sun.jdi.request.WatchpointRequest {
            }
            interface WatchpointRequest extends com.sun.jdi.request.EventRequest {
                public field(): com.sun.jdi.Field
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface AccessWatchpointRequest extends com.sun.jdi.request.WatchpointRequest {
            }
            interface BreakpointRequest extends com.sun.jdi.request.EventRequest , com.sun.jdi.Locatable {
                public location(): com.sun.jdi.Location
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface StepRequest extends com.sun.jdi.request.EventRequest {
                public static STEP_INTO: int
                public static STEP_OVER: int
                public static STEP_OUT: int
                public static STEP_MIN: int
                public static STEP_LINE: int
                public thread(): com.sun.jdi.ThreadReference
                public size(): int
                public depth(): int
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface MonitorWaitedRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface MonitorWaitRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface MonitorContendedEnteredRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface MonitorContendedEnterRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface MethodExitRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface MethodEntryRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface ExceptionRequest extends com.sun.jdi.request.EventRequest {
                public exception(): com.sun.jdi.ReferenceType
                public notifyCaught(): boolean
                public notifyUncaught(): boolean
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            interface ThreadDeathRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
            }
            interface ThreadStartRequest extends com.sun.jdi.request.EventRequest {
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
            }
            interface ClassUnloadRequest extends com.sun.jdi.request.EventRequest {
                public addClassFilter(arg0: java.lang.String): void
                public addClassExclusionFilter(arg0: java.lang.String): void
            }
            interface EventRequest extends com.sun.jdi.Mirror {
                public static SUSPEND_NONE: int
                public static SUSPEND_EVENT_THREAD: int
                public static SUSPEND_ALL: int
                public isEnabled(): boolean
                public setEnabled(arg0: boolean): void
                public enable(): void
                public disable(): void
                public addCountFilter(arg0: int): void
                public setSuspendPolicy(arg0: int): void
                public suspendPolicy(): int
                public putProperty(arg0: java.lang.Object, arg1: java.lang.Object): void
                public getProperty(arg0: java.lang.Object): java.lang.Object
            }
            interface ClassPrepareRequest extends com.sun.jdi.request.EventRequest {
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addSourceNameFilter(arg0: java.lang.String): void
            }
            interface EventRequestManager extends com.sun.jdi.Mirror {
                public createClassPrepareRequest(): com.sun.jdi.request.ClassPrepareRequest
                public createClassUnloadRequest(): com.sun.jdi.request.ClassUnloadRequest
                public createThreadStartRequest(): com.sun.jdi.request.ThreadStartRequest
                public createThreadDeathRequest(): com.sun.jdi.request.ThreadDeathRequest
                public createExceptionRequest(arg0: com.sun.jdi.ReferenceType, arg1: boolean, arg2: boolean): com.sun.jdi.request.ExceptionRequest
                public createMethodEntryRequest(): com.sun.jdi.request.MethodEntryRequest
                public createMethodExitRequest(): com.sun.jdi.request.MethodExitRequest
                public createMonitorContendedEnterRequest(): com.sun.jdi.request.MonitorContendedEnterRequest
                public createMonitorContendedEnteredRequest(): com.sun.jdi.request.MonitorContendedEnteredRequest
                public createMonitorWaitRequest(): com.sun.jdi.request.MonitorWaitRequest
                public createMonitorWaitedRequest(): com.sun.jdi.request.MonitorWaitedRequest
                public createStepRequest(arg0: com.sun.jdi.ThreadReference, arg1: int, arg2: int): com.sun.jdi.request.StepRequest
                public createBreakpointRequest(arg0: com.sun.jdi.Location): com.sun.jdi.request.BreakpointRequest
                public createAccessWatchpointRequest(arg0: com.sun.jdi.Field): com.sun.jdi.request.AccessWatchpointRequest
                public createModificationWatchpointRequest(arg0: com.sun.jdi.Field): com.sun.jdi.request.ModificationWatchpointRequest
                public createVMDeathRequest(): com.sun.jdi.request.VMDeathRequest
                public deleteEventRequest(arg0: com.sun.jdi.request.EventRequest): void
                public deleteEventRequests(arg0: java.util.List<com.sun.jdi.request.EventRequest>): void
                public deleteAllBreakpoints(): void
                public stepRequests(): java.util.List<com.sun.jdi.request.StepRequest>
                public classPrepareRequests(): java.util.List<com.sun.jdi.request.ClassPrepareRequest>
                public classUnloadRequests(): java.util.List<com.sun.jdi.request.ClassUnloadRequest>
                public threadStartRequests(): java.util.List<com.sun.jdi.request.ThreadStartRequest>
                public threadDeathRequests(): java.util.List<com.sun.jdi.request.ThreadDeathRequest>
                public exceptionRequests(): java.util.List<com.sun.jdi.request.ExceptionRequest>
                public breakpointRequests(): java.util.List<com.sun.jdi.request.BreakpointRequest>
                public accessWatchpointRequests(): java.util.List<com.sun.jdi.request.AccessWatchpointRequest>
                public modificationWatchpointRequests(): java.util.List<com.sun.jdi.request.ModificationWatchpointRequest>
                public methodEntryRequests(): java.util.List<com.sun.jdi.request.MethodEntryRequest>
                public methodExitRequests(): java.util.List<com.sun.jdi.request.MethodExitRequest>
                public monitorContendedEnterRequests(): java.util.List<com.sun.jdi.request.MonitorContendedEnterRequest>
                public monitorContendedEnteredRequests(): java.util.List<com.sun.jdi.request.MonitorContendedEnteredRequest>
                public monitorWaitRequests(): java.util.List<com.sun.jdi.request.MonitorWaitRequest>
                public monitorWaitedRequests(): java.util.List<com.sun.jdi.request.MonitorWaitedRequest>
                public vmDeathRequests(): java.util.List<com.sun.jdi.request.VMDeathRequest>
            }

         }

      }
      namespace source {
         namespace util {
            abstract class JavacTask implements javax.tools.JavaCompiler$CompilationTask {
                public constructor()
                public static instance(arg0: javax.annotation.processing.ProcessingEnvironment): com.sun.source.util.JavacTask
                public parse(): java.lang.Iterable<com.sun.source.tree.CompilationUnitTree>
                public analyze(): java.lang.Iterable<javax.lang.model.element.Element>
                public generate(): java.lang.Iterable<javax.tools.JavaFileObject>
                public setTaskListener(arg0: com.sun.source.util.TaskListener): void
                public addTaskListener(arg0: com.sun.source.util.TaskListener): void
                public removeTaskListener(arg0: com.sun.source.util.TaskListener): void
                public getTypeMirror(arg0: java.lang.Iterable<com.sun.source.tree.Tree>): javax.lang.model.type.TypeMirror
                public getElements(): javax.lang.model.util.Elements
                public getTypes(): javax.lang.model.util.Types
            }
            interface TaskListener {
                public started(arg0: com.sun.source.util.TaskEvent): void
                public finished(arg0: com.sun.source.util.TaskEvent): void
            }
            class TaskEvent$Kind extends java.lang.Enum<com.sun.source.util.TaskEvent$Kind> {
                public static PARSE: com.sun.source.util.TaskEvent$Kind
                public static ENTER: com.sun.source.util.TaskEvent$Kind
                public static ANALYZE: com.sun.source.util.TaskEvent$Kind
                public static GENERATE: com.sun.source.util.TaskEvent$Kind
                public static ANNOTATION_PROCESSING: com.sun.source.util.TaskEvent$Kind
                public static ANNOTATION_PROCESSING_ROUND: com.sun.source.util.TaskEvent$Kind
                public static values(): com.sun.source.util.TaskEvent$Kind[]
                valueOf<T>(...args: any[]): any
            }
            class TaskEvent {
                constructor(...args: any[])
                public getKind(): com.sun.source.util.TaskEvent$Kind
                public getSourceFile(): javax.tools.JavaFileObject
                public getCompilationUnit(): com.sun.source.tree.CompilationUnitTree
                public getTypeElement(): javax.lang.model.element.TypeElement
                toString<T>(...args: any[]): any
            }
            interface Plugin {
                public getName(): java.lang.String
                public init(arg0: com.sun.source.util.JavacTask, ...arg1: java.lang.String[]): void
            }
            class TreePath$1Result extends java.lang.Error {
                static serialVersionUID: long
                path: com.sun.source.util.TreePath
                constructor(arg0: com.sun.source.util.TreePath)
            }
            class TreePath$1PathFinder extends com.sun.source.util.TreePathScanner<com.sun.source.util.TreePath, com.sun.source.tree.Tree> {
                constructor()
                scan<T>(...args: any[]): any
            }
            class TreePath$1 implements java.util.Iterator<com.sun.source.tree.Tree> {
                this$0: com.sun.source.util.TreePath
                constructor(arg0: com.sun.source.util.TreePath)
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class TreePath implements java.lang.Iterable<com.sun.source.tree.Tree> {
                getPath<T>(...args: any[]): any
                constructor(...args: any[])
                public getCompilationUnit(): com.sun.source.tree.CompilationUnitTree
                public getLeaf(): com.sun.source.tree.Tree
                public getParentPath(): com.sun.source.util.TreePath
                public iterator(): java.util.Iterator<com.sun.source.tree.Tree>
                static access$000(arg0: com.sun.source.util.TreePath): com.sun.source.tree.Tree
                static access$100(arg0: com.sun.source.util.TreePath): com.sun.source.util.TreePath
            }
            class DocTreePathScanner<R, P> extends com.sun.source.util.DocTreeScanner<R, P> {
                public constructor()
                scan<T>(...args: any[]): any
                public getCurrentPath(): com.sun.source.util.DocTreePath
            }
            class DocTreeScanner<R, P> implements com.sun.source.doctree.DocTreeVisitor<R, P> {
                public constructor()
                scan<T>(...args: any[]): any
                public reduce(arg0: R, arg1: R): R
                public visitAttribute(arg0: com.sun.source.doctree.AttributeTree, arg1: P): R
                public visitAuthor(arg0: com.sun.source.doctree.AuthorTree, arg1: P): R
                public visitComment(arg0: com.sun.source.doctree.CommentTree, arg1: P): R
                public visitDeprecated(arg0: com.sun.source.doctree.DeprecatedTree, arg1: P): R
                public visitDocComment(arg0: com.sun.source.doctree.DocCommentTree, arg1: P): R
                public visitDocRoot(arg0: com.sun.source.doctree.DocRootTree, arg1: P): R
                public visitEndElement(arg0: com.sun.source.doctree.EndElementTree, arg1: P): R
                public visitEntity(arg0: com.sun.source.doctree.EntityTree, arg1: P): R
                public visitErroneous(arg0: com.sun.source.doctree.ErroneousTree, arg1: P): R
                public visitIdentifier(arg0: com.sun.source.doctree.IdentifierTree, arg1: P): R
                public visitInheritDoc(arg0: com.sun.source.doctree.InheritDocTree, arg1: P): R
                public visitLink(arg0: com.sun.source.doctree.LinkTree, arg1: P): R
                public visitLiteral(arg0: com.sun.source.doctree.LiteralTree, arg1: P): R
                public visitParam(arg0: com.sun.source.doctree.ParamTree, arg1: P): R
                public visitReference(arg0: com.sun.source.doctree.ReferenceTree, arg1: P): R
                public visitReturn(arg0: com.sun.source.doctree.ReturnTree, arg1: P): R
                public visitSee(arg0: com.sun.source.doctree.SeeTree, arg1: P): R
                public visitSerial(arg0: com.sun.source.doctree.SerialTree, arg1: P): R
                public visitSerialData(arg0: com.sun.source.doctree.SerialDataTree, arg1: P): R
                public visitSerialField(arg0: com.sun.source.doctree.SerialFieldTree, arg1: P): R
                public visitSince(arg0: com.sun.source.doctree.SinceTree, arg1: P): R
                public visitStartElement(arg0: com.sun.source.doctree.StartElementTree, arg1: P): R
                public visitText(arg0: com.sun.source.doctree.TextTree, arg1: P): R
                public visitThrows(arg0: com.sun.source.doctree.ThrowsTree, arg1: P): R
                public visitUnknownBlockTag(arg0: com.sun.source.doctree.UnknownBlockTagTree, arg1: P): R
                public visitUnknownInlineTag(arg0: com.sun.source.doctree.UnknownInlineTagTree, arg1: P): R
                public visitValue(arg0: com.sun.source.doctree.ValueTree, arg1: P): R
                public visitVersion(arg0: com.sun.source.doctree.VersionTree, arg1: P): R
                public visitOther(arg0: com.sun.source.doctree.DocTree, arg1: P): R
            }
            abstract class DocTrees extends com.sun.source.util.Trees {
                public constructor()
                instance<T>(...args: any[]): any
                public getDocCommentTree(arg0: com.sun.source.util.TreePath): com.sun.source.doctree.DocCommentTree
                public getElement(arg0: com.sun.source.util.DocTreePath): javax.lang.model.element.Element
                getSourcePositions<T>(...args: any[]): any
                public printMessage(arg0: javax.tools.Diagnostic$Kind, arg1: java.lang.CharSequence, arg2: com.sun.source.doctree.DocTree, arg3: com.sun.source.doctree.DocCommentTree, arg4: com.sun.source.tree.CompilationUnitTree): void
            }
            abstract class Trees {
                public constructor()
                instance<T>(...args: any[]): any
                static getJavacTrees(arg0: java.lang.Class<any>, arg1: java.lang.Object): com.sun.source.util.Trees
                public getSourcePositions(): com.sun.source.util.SourcePositions
                getTree<T>(...args: any[]): any
                getPath<T>(...args: any[]): any
                public getElement(arg0: com.sun.source.util.TreePath): javax.lang.model.element.Element
                public getTypeMirror(arg0: com.sun.source.util.TreePath): javax.lang.model.type.TypeMirror
                public getScope(arg0: com.sun.source.util.TreePath): com.sun.source.tree.Scope
                public getDocComment(arg0: com.sun.source.util.TreePath): java.lang.String
                isAccessible<T>(...args: any[]): any
                public getOriginalType(arg0: javax.lang.model.type.ErrorType): javax.lang.model.type.TypeMirror
                public printMessage(arg0: javax.tools.Diagnostic$Kind, arg1: java.lang.CharSequence, arg2: com.sun.source.tree.Tree, arg3: com.sun.source.tree.CompilationUnitTree): void
                public getLub(arg0: com.sun.source.tree.CatchTree): javax.lang.model.type.TypeMirror
            }
            class DocTreePath$1Result extends java.lang.Error {
                static serialVersionUID: long
                path: com.sun.source.util.DocTreePath
                constructor(arg0: com.sun.source.util.DocTreePath)
            }
            class DocTreePath$1PathFinder extends com.sun.source.util.DocTreePathScanner<com.sun.source.util.DocTreePath, com.sun.source.doctree.DocTree> {
                constructor()
                scan<T>(...args: any[]): any
            }
            class DocTreePath$1 implements java.util.Iterator<com.sun.source.doctree.DocTree> {
                this$0: com.sun.source.util.DocTreePath
                constructor(arg0: com.sun.source.util.DocTreePath)
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class DocTreePath implements java.lang.Iterable<com.sun.source.doctree.DocTree> {
                getPath<T>(...args: any[]): any
                constructor(...args: any[])
                public getTreePath(): com.sun.source.util.TreePath
                public getDocComment(): com.sun.source.doctree.DocCommentTree
                public getLeaf(): com.sun.source.doctree.DocTree
                public getParentPath(): com.sun.source.util.DocTreePath
                public iterator(): java.util.Iterator<com.sun.source.doctree.DocTree>
                static access$000(arg0: com.sun.source.util.DocTreePath): com.sun.source.doctree.DocTree
                static access$100(arg0: com.sun.source.util.DocTreePath): com.sun.source.util.DocTreePath
            }
            interface DocSourcePositions extends com.sun.source.util.SourcePositions {
                public getStartPosition(arg0: com.sun.source.tree.CompilationUnitTree, arg1: com.sun.source.doctree.DocCommentTree, arg2: com.sun.source.doctree.DocTree): long
                public getEndPosition(arg0: com.sun.source.tree.CompilationUnitTree, arg1: com.sun.source.doctree.DocCommentTree, arg2: com.sun.source.doctree.DocTree): long
            }
            interface SourcePositions {
                public getStartPosition(arg0: com.sun.source.tree.CompilationUnitTree, arg1: com.sun.source.tree.Tree): long
                public getEndPosition(arg0: com.sun.source.tree.CompilationUnitTree, arg1: com.sun.source.tree.Tree): long
            }
            class SimpleTreeVisitor<R, P> implements com.sun.source.tree.TreeVisitor<R, P> {
                protected DEFAULT_VALUE: R
                constructor(...args: any[])
                protected defaultAction(arg0: com.sun.source.tree.Tree, arg1: P): R
                visit<T>(...args: any[]): any
                public visitCompilationUnit(arg0: com.sun.source.tree.CompilationUnitTree, arg1: P): R
                public visitImport(arg0: com.sun.source.tree.ImportTree, arg1: P): R
                public visitClass(arg0: com.sun.source.tree.ClassTree, arg1: P): R
                public visitMethod(arg0: com.sun.source.tree.MethodTree, arg1: P): R
                public visitVariable(arg0: com.sun.source.tree.VariableTree, arg1: P): R
                public visitEmptyStatement(arg0: com.sun.source.tree.EmptyStatementTree, arg1: P): R
                public visitBlock(arg0: com.sun.source.tree.BlockTree, arg1: P): R
                public visitDoWhileLoop(arg0: com.sun.source.tree.DoWhileLoopTree, arg1: P): R
                public visitWhileLoop(arg0: com.sun.source.tree.WhileLoopTree, arg1: P): R
                public visitForLoop(arg0: com.sun.source.tree.ForLoopTree, arg1: P): R
                public visitEnhancedForLoop(arg0: com.sun.source.tree.EnhancedForLoopTree, arg1: P): R
                public visitLabeledStatement(arg0: com.sun.source.tree.LabeledStatementTree, arg1: P): R
                public visitSwitch(arg0: com.sun.source.tree.SwitchTree, arg1: P): R
                public visitCase(arg0: com.sun.source.tree.CaseTree, arg1: P): R
                public visitSynchronized(arg0: com.sun.source.tree.SynchronizedTree, arg1: P): R
                public visitTry(arg0: com.sun.source.tree.TryTree, arg1: P): R
                public visitCatch(arg0: com.sun.source.tree.CatchTree, arg1: P): R
                public visitConditionalExpression(arg0: com.sun.source.tree.ConditionalExpressionTree, arg1: P): R
                public visitIf(arg0: com.sun.source.tree.IfTree, arg1: P): R
                public visitExpressionStatement(arg0: com.sun.source.tree.ExpressionStatementTree, arg1: P): R
                public visitBreak(arg0: com.sun.source.tree.BreakTree, arg1: P): R
                public visitContinue(arg0: com.sun.source.tree.ContinueTree, arg1: P): R
                public visitReturn(arg0: com.sun.source.tree.ReturnTree, arg1: P): R
                public visitThrow(arg0: com.sun.source.tree.ThrowTree, arg1: P): R
                public visitAssert(arg0: com.sun.source.tree.AssertTree, arg1: P): R
                public visitMethodInvocation(arg0: com.sun.source.tree.MethodInvocationTree, arg1: P): R
                public visitNewClass(arg0: com.sun.source.tree.NewClassTree, arg1: P): R
                public visitNewArray(arg0: com.sun.source.tree.NewArrayTree, arg1: P): R
                public visitLambdaExpression(arg0: com.sun.source.tree.LambdaExpressionTree, arg1: P): R
                public visitParenthesized(arg0: com.sun.source.tree.ParenthesizedTree, arg1: P): R
                public visitAssignment(arg0: com.sun.source.tree.AssignmentTree, arg1: P): R
                public visitCompoundAssignment(arg0: com.sun.source.tree.CompoundAssignmentTree, arg1: P): R
                public visitUnary(arg0: com.sun.source.tree.UnaryTree, arg1: P): R
                public visitBinary(arg0: com.sun.source.tree.BinaryTree, arg1: P): R
                public visitTypeCast(arg0: com.sun.source.tree.TypeCastTree, arg1: P): R
                public visitInstanceOf(arg0: com.sun.source.tree.InstanceOfTree, arg1: P): R
                public visitArrayAccess(arg0: com.sun.source.tree.ArrayAccessTree, arg1: P): R
                public visitMemberSelect(arg0: com.sun.source.tree.MemberSelectTree, arg1: P): R
                public visitMemberReference(arg0: com.sun.source.tree.MemberReferenceTree, arg1: P): R
                public visitIdentifier(arg0: com.sun.source.tree.IdentifierTree, arg1: P): R
                public visitLiteral(arg0: com.sun.source.tree.LiteralTree, arg1: P): R
                public visitPrimitiveType(arg0: com.sun.source.tree.PrimitiveTypeTree, arg1: P): R
                public visitArrayType(arg0: com.sun.source.tree.ArrayTypeTree, arg1: P): R
                public visitParameterizedType(arg0: com.sun.source.tree.ParameterizedTypeTree, arg1: P): R
                public visitUnionType(arg0: com.sun.source.tree.UnionTypeTree, arg1: P): R
                public visitIntersectionType(arg0: com.sun.source.tree.IntersectionTypeTree, arg1: P): R
                public visitTypeParameter(arg0: com.sun.source.tree.TypeParameterTree, arg1: P): R
                public visitWildcard(arg0: com.sun.source.tree.WildcardTree, arg1: P): R
                public visitModifiers(arg0: com.sun.source.tree.ModifiersTree, arg1: P): R
                public visitAnnotation(arg0: com.sun.source.tree.AnnotationTree, arg1: P): R
                public visitAnnotatedType(arg0: com.sun.source.tree.AnnotatedTypeTree, arg1: P): R
                public visitErroneous(arg0: com.sun.source.tree.ErroneousTree, arg1: P): R
                public visitOther(arg0: com.sun.source.tree.Tree, arg1: P): R
            }
            class TreePathScanner<R, P> extends com.sun.source.util.TreeScanner<R, P> {
                public constructor()
                scan<T>(...args: any[]): any
                public getCurrentPath(): com.sun.source.util.TreePath
            }
            class TreeScanner<R, P> implements com.sun.source.tree.TreeVisitor<R, P> {
                public constructor()
                scan<T>(...args: any[]): any
                public reduce(arg0: R, arg1: R): R
                public visitCompilationUnit(arg0: com.sun.source.tree.CompilationUnitTree, arg1: P): R
                public visitImport(arg0: com.sun.source.tree.ImportTree, arg1: P): R
                public visitClass(arg0: com.sun.source.tree.ClassTree, arg1: P): R
                public visitMethod(arg0: com.sun.source.tree.MethodTree, arg1: P): R
                public visitVariable(arg0: com.sun.source.tree.VariableTree, arg1: P): R
                public visitEmptyStatement(arg0: com.sun.source.tree.EmptyStatementTree, arg1: P): R
                public visitBlock(arg0: com.sun.source.tree.BlockTree, arg1: P): R
                public visitDoWhileLoop(arg0: com.sun.source.tree.DoWhileLoopTree, arg1: P): R
                public visitWhileLoop(arg0: com.sun.source.tree.WhileLoopTree, arg1: P): R
                public visitForLoop(arg0: com.sun.source.tree.ForLoopTree, arg1: P): R
                public visitEnhancedForLoop(arg0: com.sun.source.tree.EnhancedForLoopTree, arg1: P): R
                public visitLabeledStatement(arg0: com.sun.source.tree.LabeledStatementTree, arg1: P): R
                public visitSwitch(arg0: com.sun.source.tree.SwitchTree, arg1: P): R
                public visitCase(arg0: com.sun.source.tree.CaseTree, arg1: P): R
                public visitSynchronized(arg0: com.sun.source.tree.SynchronizedTree, arg1: P): R
                public visitTry(arg0: com.sun.source.tree.TryTree, arg1: P): R
                public visitCatch(arg0: com.sun.source.tree.CatchTree, arg1: P): R
                public visitConditionalExpression(arg0: com.sun.source.tree.ConditionalExpressionTree, arg1: P): R
                public visitIf(arg0: com.sun.source.tree.IfTree, arg1: P): R
                public visitExpressionStatement(arg0: com.sun.source.tree.ExpressionStatementTree, arg1: P): R
                public visitBreak(arg0: com.sun.source.tree.BreakTree, arg1: P): R
                public visitContinue(arg0: com.sun.source.tree.ContinueTree, arg1: P): R
                public visitReturn(arg0: com.sun.source.tree.ReturnTree, arg1: P): R
                public visitThrow(arg0: com.sun.source.tree.ThrowTree, arg1: P): R
                public visitAssert(arg0: com.sun.source.tree.AssertTree, arg1: P): R
                public visitMethodInvocation(arg0: com.sun.source.tree.MethodInvocationTree, arg1: P): R
                public visitNewClass(arg0: com.sun.source.tree.NewClassTree, arg1: P): R
                public visitNewArray(arg0: com.sun.source.tree.NewArrayTree, arg1: P): R
                public visitLambdaExpression(arg0: com.sun.source.tree.LambdaExpressionTree, arg1: P): R
                public visitParenthesized(arg0: com.sun.source.tree.ParenthesizedTree, arg1: P): R
                public visitAssignment(arg0: com.sun.source.tree.AssignmentTree, arg1: P): R
                public visitCompoundAssignment(arg0: com.sun.source.tree.CompoundAssignmentTree, arg1: P): R
                public visitUnary(arg0: com.sun.source.tree.UnaryTree, arg1: P): R
                public visitBinary(arg0: com.sun.source.tree.BinaryTree, arg1: P): R
                public visitTypeCast(arg0: com.sun.source.tree.TypeCastTree, arg1: P): R
                public visitInstanceOf(arg0: com.sun.source.tree.InstanceOfTree, arg1: P): R
                public visitArrayAccess(arg0: com.sun.source.tree.ArrayAccessTree, arg1: P): R
                public visitMemberSelect(arg0: com.sun.source.tree.MemberSelectTree, arg1: P): R
                public visitMemberReference(arg0: com.sun.source.tree.MemberReferenceTree, arg1: P): R
                public visitIdentifier(arg0: com.sun.source.tree.IdentifierTree, arg1: P): R
                public visitLiteral(arg0: com.sun.source.tree.LiteralTree, arg1: P): R
                public visitPrimitiveType(arg0: com.sun.source.tree.PrimitiveTypeTree, arg1: P): R
                public visitArrayType(arg0: com.sun.source.tree.ArrayTypeTree, arg1: P): R
                public visitParameterizedType(arg0: com.sun.source.tree.ParameterizedTypeTree, arg1: P): R
                public visitUnionType(arg0: com.sun.source.tree.UnionTypeTree, arg1: P): R
                public visitIntersectionType(arg0: com.sun.source.tree.IntersectionTypeTree, arg1: P): R
                public visitTypeParameter(arg0: com.sun.source.tree.TypeParameterTree, arg1: P): R
                public visitWildcard(arg0: com.sun.source.tree.WildcardTree, arg1: P): R
                public visitModifiers(arg0: com.sun.source.tree.ModifiersTree, arg1: P): R
                public visitAnnotation(arg0: com.sun.source.tree.AnnotationTree, arg1: P): R
                public visitAnnotatedType(arg0: com.sun.source.tree.AnnotatedTypeTree, arg1: P): R
                public visitOther(arg0: com.sun.source.tree.Tree, arg1: P): R
                public visitErroneous(arg0: com.sun.source.tree.ErroneousTree, arg1: P): R
            }
            class SimpleDocTreeVisitor<R, P> implements com.sun.source.doctree.DocTreeVisitor<R, P> {
                protected DEFAULT_VALUE: R
                constructor(...args: any[])
                protected defaultAction(arg0: com.sun.source.doctree.DocTree, arg1: P): R
                visit<T>(...args: any[]): any
                public visitAttribute(arg0: com.sun.source.doctree.AttributeTree, arg1: P): R
                public visitAuthor(arg0: com.sun.source.doctree.AuthorTree, arg1: P): R
                public visitComment(arg0: com.sun.source.doctree.CommentTree, arg1: P): R
                public visitDeprecated(arg0: com.sun.source.doctree.DeprecatedTree, arg1: P): R
                public visitDocComment(arg0: com.sun.source.doctree.DocCommentTree, arg1: P): R
                public visitDocRoot(arg0: com.sun.source.doctree.DocRootTree, arg1: P): R
                public visitEndElement(arg0: com.sun.source.doctree.EndElementTree, arg1: P): R
                public visitEntity(arg0: com.sun.source.doctree.EntityTree, arg1: P): R
                public visitErroneous(arg0: com.sun.source.doctree.ErroneousTree, arg1: P): R
                public visitIdentifier(arg0: com.sun.source.doctree.IdentifierTree, arg1: P): R
                public visitInheritDoc(arg0: com.sun.source.doctree.InheritDocTree, arg1: P): R
                public visitLink(arg0: com.sun.source.doctree.LinkTree, arg1: P): R
                public visitLiteral(arg0: com.sun.source.doctree.LiteralTree, arg1: P): R
                public visitParam(arg0: com.sun.source.doctree.ParamTree, arg1: P): R
                public visitReference(arg0: com.sun.source.doctree.ReferenceTree, arg1: P): R
                public visitReturn(arg0: com.sun.source.doctree.ReturnTree, arg1: P): R
                public visitSee(arg0: com.sun.source.doctree.SeeTree, arg1: P): R
                public visitSerial(arg0: com.sun.source.doctree.SerialTree, arg1: P): R
                public visitSerialData(arg0: com.sun.source.doctree.SerialDataTree, arg1: P): R
                public visitSerialField(arg0: com.sun.source.doctree.SerialFieldTree, arg1: P): R
                public visitSince(arg0: com.sun.source.doctree.SinceTree, arg1: P): R
                public visitStartElement(arg0: com.sun.source.doctree.StartElementTree, arg1: P): R
                public visitText(arg0: com.sun.source.doctree.TextTree, arg1: P): R
                public visitThrows(arg0: com.sun.source.doctree.ThrowsTree, arg1: P): R
                public visitUnknownBlockTag(arg0: com.sun.source.doctree.UnknownBlockTagTree, arg1: P): R
                public visitUnknownInlineTag(arg0: com.sun.source.doctree.UnknownInlineTagTree, arg1: P): R
                public visitValue(arg0: com.sun.source.doctree.ValueTree, arg1: P): R
                public visitVersion(arg0: com.sun.source.doctree.VersionTree, arg1: P): R
                public visitOther(arg0: com.sun.source.doctree.DocTree, arg1: P): R
            }

         }
         namespace tree {
            class Tree$Kind extends java.lang.Enum<com.sun.source.tree.Tree$Kind> {
                public static ANNOTATED_TYPE: com.sun.source.tree.Tree$Kind
                public static ANNOTATION: com.sun.source.tree.Tree$Kind
                public static TYPE_ANNOTATION: com.sun.source.tree.Tree$Kind
                public static ARRAY_ACCESS: com.sun.source.tree.Tree$Kind
                public static ARRAY_TYPE: com.sun.source.tree.Tree$Kind
                public static ASSERT: com.sun.source.tree.Tree$Kind
                public static ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static BLOCK: com.sun.source.tree.Tree$Kind
                public static BREAK: com.sun.source.tree.Tree$Kind
                public static CASE: com.sun.source.tree.Tree$Kind
                public static CATCH: com.sun.source.tree.Tree$Kind
                public static CLASS: com.sun.source.tree.Tree$Kind
                public static COMPILATION_UNIT: com.sun.source.tree.Tree$Kind
                public static CONDITIONAL_EXPRESSION: com.sun.source.tree.Tree$Kind
                public static CONTINUE: com.sun.source.tree.Tree$Kind
                public static DO_WHILE_LOOP: com.sun.source.tree.Tree$Kind
                public static ENHANCED_FOR_LOOP: com.sun.source.tree.Tree$Kind
                public static EXPRESSION_STATEMENT: com.sun.source.tree.Tree$Kind
                public static MEMBER_SELECT: com.sun.source.tree.Tree$Kind
                public static MEMBER_REFERENCE: com.sun.source.tree.Tree$Kind
                public static FOR_LOOP: com.sun.source.tree.Tree$Kind
                public static IDENTIFIER: com.sun.source.tree.Tree$Kind
                public static IF: com.sun.source.tree.Tree$Kind
                public static IMPORT: com.sun.source.tree.Tree$Kind
                public static INSTANCE_OF: com.sun.source.tree.Tree$Kind
                public static LABELED_STATEMENT: com.sun.source.tree.Tree$Kind
                public static METHOD: com.sun.source.tree.Tree$Kind
                public static METHOD_INVOCATION: com.sun.source.tree.Tree$Kind
                public static MODIFIERS: com.sun.source.tree.Tree$Kind
                public static NEW_ARRAY: com.sun.source.tree.Tree$Kind
                public static NEW_CLASS: com.sun.source.tree.Tree$Kind
                public static LAMBDA_EXPRESSION: com.sun.source.tree.Tree$Kind
                public static PARENTHESIZED: com.sun.source.tree.Tree$Kind
                public static PRIMITIVE_TYPE: com.sun.source.tree.Tree$Kind
                public static RETURN: com.sun.source.tree.Tree$Kind
                public static EMPTY_STATEMENT: com.sun.source.tree.Tree$Kind
                public static SWITCH: com.sun.source.tree.Tree$Kind
                public static SYNCHRONIZED: com.sun.source.tree.Tree$Kind
                public static THROW: com.sun.source.tree.Tree$Kind
                public static TRY: com.sun.source.tree.Tree$Kind
                public static PARAMETERIZED_TYPE: com.sun.source.tree.Tree$Kind
                public static UNION_TYPE: com.sun.source.tree.Tree$Kind
                public static INTERSECTION_TYPE: com.sun.source.tree.Tree$Kind
                public static TYPE_CAST: com.sun.source.tree.Tree$Kind
                public static TYPE_PARAMETER: com.sun.source.tree.Tree$Kind
                public static VARIABLE: com.sun.source.tree.Tree$Kind
                public static WHILE_LOOP: com.sun.source.tree.Tree$Kind
                public static POSTFIX_INCREMENT: com.sun.source.tree.Tree$Kind
                public static POSTFIX_DECREMENT: com.sun.source.tree.Tree$Kind
                public static PREFIX_INCREMENT: com.sun.source.tree.Tree$Kind
                public static PREFIX_DECREMENT: com.sun.source.tree.Tree$Kind
                public static UNARY_PLUS: com.sun.source.tree.Tree$Kind
                public static UNARY_MINUS: com.sun.source.tree.Tree$Kind
                public static BITWISE_COMPLEMENT: com.sun.source.tree.Tree$Kind
                public static LOGICAL_COMPLEMENT: com.sun.source.tree.Tree$Kind
                public static MULTIPLY: com.sun.source.tree.Tree$Kind
                public static DIVIDE: com.sun.source.tree.Tree$Kind
                public static REMAINDER: com.sun.source.tree.Tree$Kind
                public static PLUS: com.sun.source.tree.Tree$Kind
                public static MINUS: com.sun.source.tree.Tree$Kind
                public static LEFT_SHIFT: com.sun.source.tree.Tree$Kind
                public static RIGHT_SHIFT: com.sun.source.tree.Tree$Kind
                public static UNSIGNED_RIGHT_SHIFT: com.sun.source.tree.Tree$Kind
                public static LESS_THAN: com.sun.source.tree.Tree$Kind
                public static GREATER_THAN: com.sun.source.tree.Tree$Kind
                public static LESS_THAN_EQUAL: com.sun.source.tree.Tree$Kind
                public static GREATER_THAN_EQUAL: com.sun.source.tree.Tree$Kind
                public static EQUAL_TO: com.sun.source.tree.Tree$Kind
                public static NOT_EQUAL_TO: com.sun.source.tree.Tree$Kind
                public static AND: com.sun.source.tree.Tree$Kind
                public static XOR: com.sun.source.tree.Tree$Kind
                public static OR: com.sun.source.tree.Tree$Kind
                public static CONDITIONAL_AND: com.sun.source.tree.Tree$Kind
                public static CONDITIONAL_OR: com.sun.source.tree.Tree$Kind
                public static MULTIPLY_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static DIVIDE_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static REMAINDER_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static PLUS_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static MINUS_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static LEFT_SHIFT_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static RIGHT_SHIFT_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static UNSIGNED_RIGHT_SHIFT_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static AND_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static XOR_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static OR_ASSIGNMENT: com.sun.source.tree.Tree$Kind
                public static INT_LITERAL: com.sun.source.tree.Tree$Kind
                public static LONG_LITERAL: com.sun.source.tree.Tree$Kind
                public static FLOAT_LITERAL: com.sun.source.tree.Tree$Kind
                public static DOUBLE_LITERAL: com.sun.source.tree.Tree$Kind
                public static BOOLEAN_LITERAL: com.sun.source.tree.Tree$Kind
                public static CHAR_LITERAL: com.sun.source.tree.Tree$Kind
                public static STRING_LITERAL: com.sun.source.tree.Tree$Kind
                public static NULL_LITERAL: com.sun.source.tree.Tree$Kind
                public static UNBOUNDED_WILDCARD: com.sun.source.tree.Tree$Kind
                public static EXTENDS_WILDCARD: com.sun.source.tree.Tree$Kind
                public static SUPER_WILDCARD: com.sun.source.tree.Tree$Kind
                public static ERRONEOUS: com.sun.source.tree.Tree$Kind
                public static INTERFACE: com.sun.source.tree.Tree$Kind
                public static ENUM: com.sun.source.tree.Tree$Kind
                public static ANNOTATION_TYPE: com.sun.source.tree.Tree$Kind
                public static OTHER: com.sun.source.tree.Tree$Kind
                public static values(): com.sun.source.tree.Tree$Kind[]
                valueOf<T>(...args: any[]): any
                public asInterface(): java.lang.Class<com.sun.source.tree.Tree>
            }
            interface Tree {
                public getKind(): com.sun.source.tree.Tree$Kind
                public accept<R, D>(arg0: com.sun.source.tree.TreeVisitor<R, D>, arg1: D): R
            }
            class LambdaExpressionTree$BodyKind extends java.lang.Enum<com.sun.source.tree.LambdaExpressionTree$BodyKind> {
                public static EXPRESSION: com.sun.source.tree.LambdaExpressionTree$BodyKind
                public static STATEMENT: com.sun.source.tree.LambdaExpressionTree$BodyKind
                public static values(): com.sun.source.tree.LambdaExpressionTree$BodyKind[]
                valueOf<T>(...args: any[]): any
            }
            interface LambdaExpressionTree extends com.sun.source.tree.ExpressionTree {
                public getParameters(): java.util.List<com.sun.source.tree.VariableTree>
                public getBody(): com.sun.source.tree.Tree
                public getBodyKind(): com.sun.source.tree.LambdaExpressionTree$BodyKind
            }
            interface ExpressionTree extends com.sun.source.tree.Tree {
            }
            class MemberReferenceTree$ReferenceMode extends java.lang.Enum<com.sun.source.tree.MemberReferenceTree$ReferenceMode> {
                public static INVOKE: com.sun.source.tree.MemberReferenceTree$ReferenceMode
                public static NEW: com.sun.source.tree.MemberReferenceTree$ReferenceMode
                public static values(): com.sun.source.tree.MemberReferenceTree$ReferenceMode[]
                valueOf<T>(...args: any[]): any
            }
            interface MemberReferenceTree extends com.sun.source.tree.ExpressionTree {
                public getMode(): com.sun.source.tree.MemberReferenceTree$ReferenceMode
                public getQualifierExpression(): com.sun.source.tree.ExpressionTree
                public getName(): javax.lang.model.element.Name
                public getTypeArguments(): java.util.List<com.sun.source.tree.ExpressionTree>
            }
            interface TreeVisitor<R, P> {
                public visitAnnotatedType(arg0: com.sun.source.tree.AnnotatedTypeTree, arg1: P): R
                public visitAnnotation(arg0: com.sun.source.tree.AnnotationTree, arg1: P): R
                public visitMethodInvocation(arg0: com.sun.source.tree.MethodInvocationTree, arg1: P): R
                public visitAssert(arg0: com.sun.source.tree.AssertTree, arg1: P): R
                public visitAssignment(arg0: com.sun.source.tree.AssignmentTree, arg1: P): R
                public visitCompoundAssignment(arg0: com.sun.source.tree.CompoundAssignmentTree, arg1: P): R
                public visitBinary(arg0: com.sun.source.tree.BinaryTree, arg1: P): R
                public visitBlock(arg0: com.sun.source.tree.BlockTree, arg1: P): R
                public visitBreak(arg0: com.sun.source.tree.BreakTree, arg1: P): R
                public visitCase(arg0: com.sun.source.tree.CaseTree, arg1: P): R
                public visitCatch(arg0: com.sun.source.tree.CatchTree, arg1: P): R
                public visitClass(arg0: com.sun.source.tree.ClassTree, arg1: P): R
                public visitConditionalExpression(arg0: com.sun.source.tree.ConditionalExpressionTree, arg1: P): R
                public visitContinue(arg0: com.sun.source.tree.ContinueTree, arg1: P): R
                public visitDoWhileLoop(arg0: com.sun.source.tree.DoWhileLoopTree, arg1: P): R
                public visitErroneous(arg0: com.sun.source.tree.ErroneousTree, arg1: P): R
                public visitExpressionStatement(arg0: com.sun.source.tree.ExpressionStatementTree, arg1: P): R
                public visitEnhancedForLoop(arg0: com.sun.source.tree.EnhancedForLoopTree, arg1: P): R
                public visitForLoop(arg0: com.sun.source.tree.ForLoopTree, arg1: P): R
                public visitIdentifier(arg0: com.sun.source.tree.IdentifierTree, arg1: P): R
                public visitIf(arg0: com.sun.source.tree.IfTree, arg1: P): R
                public visitImport(arg0: com.sun.source.tree.ImportTree, arg1: P): R
                public visitArrayAccess(arg0: com.sun.source.tree.ArrayAccessTree, arg1: P): R
                public visitLabeledStatement(arg0: com.sun.source.tree.LabeledStatementTree, arg1: P): R
                public visitLiteral(arg0: com.sun.source.tree.LiteralTree, arg1: P): R
                public visitMethod(arg0: com.sun.source.tree.MethodTree, arg1: P): R
                public visitModifiers(arg0: com.sun.source.tree.ModifiersTree, arg1: P): R
                public visitNewArray(arg0: com.sun.source.tree.NewArrayTree, arg1: P): R
                public visitNewClass(arg0: com.sun.source.tree.NewClassTree, arg1: P): R
                public visitLambdaExpression(arg0: com.sun.source.tree.LambdaExpressionTree, arg1: P): R
                public visitParenthesized(arg0: com.sun.source.tree.ParenthesizedTree, arg1: P): R
                public visitReturn(arg0: com.sun.source.tree.ReturnTree, arg1: P): R
                public visitMemberSelect(arg0: com.sun.source.tree.MemberSelectTree, arg1: P): R
                public visitMemberReference(arg0: com.sun.source.tree.MemberReferenceTree, arg1: P): R
                public visitEmptyStatement(arg0: com.sun.source.tree.EmptyStatementTree, arg1: P): R
                public visitSwitch(arg0: com.sun.source.tree.SwitchTree, arg1: P): R
                public visitSynchronized(arg0: com.sun.source.tree.SynchronizedTree, arg1: P): R
                public visitThrow(arg0: com.sun.source.tree.ThrowTree, arg1: P): R
                public visitCompilationUnit(arg0: com.sun.source.tree.CompilationUnitTree, arg1: P): R
                public visitTry(arg0: com.sun.source.tree.TryTree, arg1: P): R
                public visitParameterizedType(arg0: com.sun.source.tree.ParameterizedTypeTree, arg1: P): R
                public visitUnionType(arg0: com.sun.source.tree.UnionTypeTree, arg1: P): R
                public visitIntersectionType(arg0: com.sun.source.tree.IntersectionTypeTree, arg1: P): R
                public visitArrayType(arg0: com.sun.source.tree.ArrayTypeTree, arg1: P): R
                public visitTypeCast(arg0: com.sun.source.tree.TypeCastTree, arg1: P): R
                public visitPrimitiveType(arg0: com.sun.source.tree.PrimitiveTypeTree, arg1: P): R
                public visitTypeParameter(arg0: com.sun.source.tree.TypeParameterTree, arg1: P): R
                public visitInstanceOf(arg0: com.sun.source.tree.InstanceOfTree, arg1: P): R
                public visitUnary(arg0: com.sun.source.tree.UnaryTree, arg1: P): R
                public visitVariable(arg0: com.sun.source.tree.VariableTree, arg1: P): R
                public visitWhileLoop(arg0: com.sun.source.tree.WhileLoopTree, arg1: P): R
                public visitWildcard(arg0: com.sun.source.tree.WildcardTree, arg1: P): R
                public visitOther(arg0: com.sun.source.tree.Tree, arg1: P): R
            }
            interface VariableTree extends com.sun.source.tree.StatementTree {
                public getModifiers(): com.sun.source.tree.ModifiersTree
                public getName(): javax.lang.model.element.Name
                public getNameExpression(): com.sun.source.tree.ExpressionTree
                public getType(): com.sun.source.tree.Tree
                public getInitializer(): com.sun.source.tree.ExpressionTree
            }
            interface StatementTree extends com.sun.source.tree.Tree {
            }
            interface CompilationUnitTree extends com.sun.source.tree.Tree {
                public getPackageAnnotations(): java.util.List<com.sun.source.tree.AnnotationTree>
                public getPackageName(): com.sun.source.tree.ExpressionTree
                public getImports(): java.util.List<com.sun.source.tree.ImportTree>
                public getTypeDecls(): java.util.List<com.sun.source.tree.Tree>
                public getSourceFile(): javax.tools.JavaFileObject
                public getLineMap(): com.sun.source.tree.LineMap
            }
            interface AnnotationTree extends com.sun.source.tree.ExpressionTree {
                public getAnnotationType(): com.sun.source.tree.Tree
                public getArguments(): java.util.List<com.sun.source.tree.ExpressionTree>
            }
            interface AnnotatedTypeTree extends com.sun.source.tree.ExpressionTree {
                public getAnnotations(): java.util.List<com.sun.source.tree.AnnotationTree>
                public getUnderlyingType(): com.sun.source.tree.ExpressionTree
            }
            interface MethodInvocationTree extends com.sun.source.tree.ExpressionTree {
                public getTypeArguments(): java.util.List<com.sun.source.tree.Tree>
                public getMethodSelect(): com.sun.source.tree.ExpressionTree
                public getArguments(): java.util.List<com.sun.source.tree.ExpressionTree>
            }
            interface AssertTree extends com.sun.source.tree.StatementTree {
                public getCondition(): com.sun.source.tree.ExpressionTree
                public getDetail(): com.sun.source.tree.ExpressionTree
            }
            interface AssignmentTree extends com.sun.source.tree.ExpressionTree {
                public getVariable(): com.sun.source.tree.ExpressionTree
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface CompoundAssignmentTree extends com.sun.source.tree.ExpressionTree {
                public getVariable(): com.sun.source.tree.ExpressionTree
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface BinaryTree extends com.sun.source.tree.ExpressionTree {
                public getLeftOperand(): com.sun.source.tree.ExpressionTree
                public getRightOperand(): com.sun.source.tree.ExpressionTree
            }
            interface BlockTree extends com.sun.source.tree.StatementTree {
                public isStatic(): boolean
                public getStatements(): java.util.List<com.sun.source.tree.StatementTree>
            }
            interface BreakTree extends com.sun.source.tree.StatementTree {
                public getLabel(): javax.lang.model.element.Name
            }
            interface CaseTree extends com.sun.source.tree.Tree {
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getStatements(): java.util.List<com.sun.source.tree.StatementTree>
            }
            interface CatchTree extends com.sun.source.tree.Tree {
                public getParameter(): com.sun.source.tree.VariableTree
                public getBlock(): com.sun.source.tree.BlockTree
            }
            interface ClassTree extends com.sun.source.tree.StatementTree {
                public getModifiers(): com.sun.source.tree.ModifiersTree
                public getSimpleName(): javax.lang.model.element.Name
                public getTypeParameters(): java.util.List<com.sun.source.tree.TypeParameterTree>
                public getExtendsClause(): com.sun.source.tree.Tree
                public getImplementsClause(): java.util.List<com.sun.source.tree.Tree>
                public getMembers(): java.util.List<com.sun.source.tree.Tree>
            }
            interface ConditionalExpressionTree extends com.sun.source.tree.ExpressionTree {
                public getCondition(): com.sun.source.tree.ExpressionTree
                public getTrueExpression(): com.sun.source.tree.ExpressionTree
                public getFalseExpression(): com.sun.source.tree.ExpressionTree
            }
            interface ContinueTree extends com.sun.source.tree.StatementTree {
                public getLabel(): javax.lang.model.element.Name
            }
            interface DoWhileLoopTree extends com.sun.source.tree.StatementTree {
                public getCondition(): com.sun.source.tree.ExpressionTree
                public getStatement(): com.sun.source.tree.StatementTree
            }
            interface ErroneousTree extends com.sun.source.tree.ExpressionTree {
                public getErrorTrees(): java.util.List<com.sun.source.tree.Tree>
            }
            interface ExpressionStatementTree extends com.sun.source.tree.StatementTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface EnhancedForLoopTree extends com.sun.source.tree.StatementTree {
                public getVariable(): com.sun.source.tree.VariableTree
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getStatement(): com.sun.source.tree.StatementTree
            }
            interface ForLoopTree extends com.sun.source.tree.StatementTree {
                public getInitializer(): java.util.List<com.sun.source.tree.StatementTree>
                public getCondition(): com.sun.source.tree.ExpressionTree
                public getUpdate(): java.util.List<com.sun.source.tree.ExpressionStatementTree>
                public getStatement(): com.sun.source.tree.StatementTree
            }
            interface IdentifierTree extends com.sun.source.tree.ExpressionTree {
                public getName(): javax.lang.model.element.Name
            }
            interface IfTree extends com.sun.source.tree.StatementTree {
                public getCondition(): com.sun.source.tree.ExpressionTree
                public getThenStatement(): com.sun.source.tree.StatementTree
                public getElseStatement(): com.sun.source.tree.StatementTree
            }
            interface ImportTree extends com.sun.source.tree.Tree {
                public isStatic(): boolean
                public getQualifiedIdentifier(): com.sun.source.tree.Tree
            }
            interface ArrayAccessTree extends com.sun.source.tree.ExpressionTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getIndex(): com.sun.source.tree.ExpressionTree
            }
            interface LabeledStatementTree extends com.sun.source.tree.StatementTree {
                public getLabel(): javax.lang.model.element.Name
                public getStatement(): com.sun.source.tree.StatementTree
            }
            interface LiteralTree extends com.sun.source.tree.ExpressionTree {
                public getValue(): java.lang.Object
            }
            interface MethodTree extends com.sun.source.tree.Tree {
                public getModifiers(): com.sun.source.tree.ModifiersTree
                public getName(): javax.lang.model.element.Name
                public getReturnType(): com.sun.source.tree.Tree
                public getTypeParameters(): java.util.List<com.sun.source.tree.TypeParameterTree>
                public getParameters(): java.util.List<com.sun.source.tree.VariableTree>
                public getReceiverParameter(): com.sun.source.tree.VariableTree
                public getThrows(): java.util.List<com.sun.source.tree.ExpressionTree>
                public getBody(): com.sun.source.tree.BlockTree
                public getDefaultValue(): com.sun.source.tree.Tree
            }
            interface ModifiersTree extends com.sun.source.tree.Tree {
                public getFlags(): java.util.Set<javax.lang.model.element.Modifier>
                public getAnnotations(): java.util.List<com.sun.source.tree.AnnotationTree>
            }
            interface NewArrayTree extends com.sun.source.tree.ExpressionTree {
                public getType(): com.sun.source.tree.Tree
                public getDimensions(): java.util.List<com.sun.source.tree.ExpressionTree>
                public getInitializers(): java.util.List<com.sun.source.tree.ExpressionTree>
                public getAnnotations(): java.util.List<com.sun.source.tree.AnnotationTree>
                public getDimAnnotations(): java.util.List<any extends java.util.List<com.sun.source.tree.AnnotationTree>>
            }
            interface NewClassTree extends com.sun.source.tree.ExpressionTree {
                public getEnclosingExpression(): com.sun.source.tree.ExpressionTree
                public getTypeArguments(): java.util.List<com.sun.source.tree.Tree>
                public getIdentifier(): com.sun.source.tree.ExpressionTree
                public getArguments(): java.util.List<com.sun.source.tree.ExpressionTree>
                public getClassBody(): com.sun.source.tree.ClassTree
            }
            interface ParenthesizedTree extends com.sun.source.tree.ExpressionTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface ReturnTree extends com.sun.source.tree.StatementTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface MemberSelectTree extends com.sun.source.tree.ExpressionTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getIdentifier(): javax.lang.model.element.Name
            }
            interface EmptyStatementTree extends com.sun.source.tree.StatementTree {
            }
            interface SwitchTree extends com.sun.source.tree.StatementTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getCases(): java.util.List<com.sun.source.tree.CaseTree>
            }
            interface SynchronizedTree extends com.sun.source.tree.StatementTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getBlock(): com.sun.source.tree.BlockTree
            }
            interface ThrowTree extends com.sun.source.tree.StatementTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface TryTree extends com.sun.source.tree.StatementTree {
                public getBlock(): com.sun.source.tree.BlockTree
                public getCatches(): java.util.List<com.sun.source.tree.CatchTree>
                public getFinallyBlock(): com.sun.source.tree.BlockTree
                public getResources(): java.util.List<com.sun.source.tree.Tree>
            }
            interface ParameterizedTypeTree extends com.sun.source.tree.Tree {
                public getType(): com.sun.source.tree.Tree
                public getTypeArguments(): java.util.List<com.sun.source.tree.Tree>
            }
            interface UnionTypeTree extends com.sun.source.tree.Tree {
                public getTypeAlternatives(): java.util.List<com.sun.source.tree.Tree>
            }
            interface IntersectionTypeTree extends com.sun.source.tree.Tree {
                public getBounds(): java.util.List<com.sun.source.tree.Tree>
            }
            interface ArrayTypeTree extends com.sun.source.tree.Tree {
                public getType(): com.sun.source.tree.Tree
            }
            interface TypeCastTree extends com.sun.source.tree.ExpressionTree {
                public getType(): com.sun.source.tree.Tree
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface PrimitiveTypeTree extends com.sun.source.tree.Tree {
                public getPrimitiveTypeKind(): javax.lang.model.type.TypeKind
            }
            interface TypeParameterTree extends com.sun.source.tree.Tree {
                public getName(): javax.lang.model.element.Name
                public getBounds(): java.util.List<com.sun.source.tree.Tree>
                public getAnnotations(): java.util.List<com.sun.source.tree.AnnotationTree>
            }
            interface InstanceOfTree extends com.sun.source.tree.ExpressionTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
                public getType(): com.sun.source.tree.Tree
            }
            interface UnaryTree extends com.sun.source.tree.ExpressionTree {
                public getExpression(): com.sun.source.tree.ExpressionTree
            }
            interface WhileLoopTree extends com.sun.source.tree.StatementTree {
                public getCondition(): com.sun.source.tree.ExpressionTree
                public getStatement(): com.sun.source.tree.StatementTree
            }
            interface WildcardTree extends com.sun.source.tree.Tree {
                public getBound(): com.sun.source.tree.Tree
            }
            interface LineMap {
                public getStartPosition(arg0: long): long
                public getPosition(arg0: long, arg1: long): long
                public getLineNumber(arg0: long): long
                public getColumnNumber(arg0: long): long
            }
            interface Scope {
                public getEnclosingScope(): com.sun.source.tree.Scope
                public getEnclosingClass(): javax.lang.model.element.TypeElement
                public getEnclosingMethod(): javax.lang.model.element.ExecutableElement
                public getLocalElements(): java.lang.Iterable<javax.lang.model.element.Element>
            }

         }
         namespace doctree {
            class DocTree$Kind extends java.lang.Enum<com.sun.source.doctree.DocTree$Kind> {
                public static ATTRIBUTE: com.sun.source.doctree.DocTree$Kind
                public static AUTHOR: com.sun.source.doctree.DocTree$Kind
                public static CODE: com.sun.source.doctree.DocTree$Kind
                public static COMMENT: com.sun.source.doctree.DocTree$Kind
                public static DEPRECATED: com.sun.source.doctree.DocTree$Kind
                public static DOC_COMMENT: com.sun.source.doctree.DocTree$Kind
                public static DOC_ROOT: com.sun.source.doctree.DocTree$Kind
                public static END_ELEMENT: com.sun.source.doctree.DocTree$Kind
                public static ENTITY: com.sun.source.doctree.DocTree$Kind
                public static ERRONEOUS: com.sun.source.doctree.DocTree$Kind
                public static EXCEPTION: com.sun.source.doctree.DocTree$Kind
                public static IDENTIFIER: com.sun.source.doctree.DocTree$Kind
                public static INHERIT_DOC: com.sun.source.doctree.DocTree$Kind
                public static LINK: com.sun.source.doctree.DocTree$Kind
                public static LINK_PLAIN: com.sun.source.doctree.DocTree$Kind
                public static LITERAL: com.sun.source.doctree.DocTree$Kind
                public static PARAM: com.sun.source.doctree.DocTree$Kind
                public static REFERENCE: com.sun.source.doctree.DocTree$Kind
                public static RETURN: com.sun.source.doctree.DocTree$Kind
                public static SEE: com.sun.source.doctree.DocTree$Kind
                public static SERIAL: com.sun.source.doctree.DocTree$Kind
                public static SERIAL_DATA: com.sun.source.doctree.DocTree$Kind
                public static SERIAL_FIELD: com.sun.source.doctree.DocTree$Kind
                public static SINCE: com.sun.source.doctree.DocTree$Kind
                public static START_ELEMENT: com.sun.source.doctree.DocTree$Kind
                public static TEXT: com.sun.source.doctree.DocTree$Kind
                public static THROWS: com.sun.source.doctree.DocTree$Kind
                public static UNKNOWN_BLOCK_TAG: com.sun.source.doctree.DocTree$Kind
                public static UNKNOWN_INLINE_TAG: com.sun.source.doctree.DocTree$Kind
                public static VALUE: com.sun.source.doctree.DocTree$Kind
                public static VERSION: com.sun.source.doctree.DocTree$Kind
                public static OTHER: com.sun.source.doctree.DocTree$Kind
                public tagName: java.lang.String
                public static values(): com.sun.source.doctree.DocTree$Kind[]
                valueOf<T>(...args: any[]): any
            }
            interface DocTree {
                public getKind(): com.sun.source.doctree.DocTree$Kind
                public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
            }
            interface DocCommentTree extends com.sun.source.doctree.DocTree {
                public getFirstSentence(): java.util.List<com.sun.source.doctree.DocTree>
                public getBody(): java.util.List<com.sun.source.doctree.DocTree>
                public getBlockTags(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface DocTreeVisitor<R, P> {
                public visitAttribute(arg0: com.sun.source.doctree.AttributeTree, arg1: P): R
                public visitAuthor(arg0: com.sun.source.doctree.AuthorTree, arg1: P): R
                public visitComment(arg0: com.sun.source.doctree.CommentTree, arg1: P): R
                public visitDeprecated(arg0: com.sun.source.doctree.DeprecatedTree, arg1: P): R
                public visitDocComment(arg0: com.sun.source.doctree.DocCommentTree, arg1: P): R
                public visitDocRoot(arg0: com.sun.source.doctree.DocRootTree, arg1: P): R
                public visitEndElement(arg0: com.sun.source.doctree.EndElementTree, arg1: P): R
                public visitEntity(arg0: com.sun.source.doctree.EntityTree, arg1: P): R
                public visitErroneous(arg0: com.sun.source.doctree.ErroneousTree, arg1: P): R
                public visitIdentifier(arg0: com.sun.source.doctree.IdentifierTree, arg1: P): R
                public visitInheritDoc(arg0: com.sun.source.doctree.InheritDocTree, arg1: P): R
                public visitLink(arg0: com.sun.source.doctree.LinkTree, arg1: P): R
                public visitLiteral(arg0: com.sun.source.doctree.LiteralTree, arg1: P): R
                public visitParam(arg0: com.sun.source.doctree.ParamTree, arg1: P): R
                public visitReference(arg0: com.sun.source.doctree.ReferenceTree, arg1: P): R
                public visitReturn(arg0: com.sun.source.doctree.ReturnTree, arg1: P): R
                public visitSee(arg0: com.sun.source.doctree.SeeTree, arg1: P): R
                public visitSerial(arg0: com.sun.source.doctree.SerialTree, arg1: P): R
                public visitSerialData(arg0: com.sun.source.doctree.SerialDataTree, arg1: P): R
                public visitSerialField(arg0: com.sun.source.doctree.SerialFieldTree, arg1: P): R
                public visitSince(arg0: com.sun.source.doctree.SinceTree, arg1: P): R
                public visitStartElement(arg0: com.sun.source.doctree.StartElementTree, arg1: P): R
                public visitText(arg0: com.sun.source.doctree.TextTree, arg1: P): R
                public visitThrows(arg0: com.sun.source.doctree.ThrowsTree, arg1: P): R
                public visitUnknownBlockTag(arg0: com.sun.source.doctree.UnknownBlockTagTree, arg1: P): R
                public visitUnknownInlineTag(arg0: com.sun.source.doctree.UnknownInlineTagTree, arg1: P): R
                public visitValue(arg0: com.sun.source.doctree.ValueTree, arg1: P): R
                public visitVersion(arg0: com.sun.source.doctree.VersionTree, arg1: P): R
                public visitOther(arg0: com.sun.source.doctree.DocTree, arg1: P): R
            }
            class AttributeTree$ValueKind extends java.lang.Enum<com.sun.source.doctree.AttributeTree$ValueKind> {
                public static EMPTY: com.sun.source.doctree.AttributeTree$ValueKind
                public static UNQUOTED: com.sun.source.doctree.AttributeTree$ValueKind
                public static SINGLE: com.sun.source.doctree.AttributeTree$ValueKind
                public static DOUBLE: com.sun.source.doctree.AttributeTree$ValueKind
                public static values(): com.sun.source.doctree.AttributeTree$ValueKind[]
                valueOf<T>(...args: any[]): any
            }
            interface AttributeTree extends com.sun.source.doctree.DocTree {
                public getName(): javax.lang.model.element.Name
                public getValueKind(): com.sun.source.doctree.AttributeTree$ValueKind
                public getValue(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface AuthorTree extends com.sun.source.doctree.BlockTagTree {
                public getName(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface BlockTagTree extends com.sun.source.doctree.DocTree {
                public getTagName(): java.lang.String
            }
            interface CommentTree extends com.sun.source.doctree.DocTree {
                public getBody(): java.lang.String
            }
            interface DeprecatedTree extends com.sun.source.doctree.BlockTagTree {
                public getBody(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface DocRootTree extends com.sun.source.doctree.InlineTagTree {
            }
            interface InlineTagTree extends com.sun.source.doctree.DocTree {
                public getTagName(): java.lang.String
            }
            interface EndElementTree extends com.sun.source.doctree.DocTree {
                public getName(): javax.lang.model.element.Name
            }
            interface EntityTree extends com.sun.source.doctree.DocTree {
                public getName(): javax.lang.model.element.Name
            }
            interface ErroneousTree extends com.sun.source.doctree.TextTree {
                public getDiagnostic(): javax.tools.Diagnostic<javax.tools.JavaFileObject>
            }
            interface TextTree extends com.sun.source.doctree.DocTree {
                public getBody(): java.lang.String
            }
            interface IdentifierTree extends com.sun.source.doctree.DocTree {
                public getName(): javax.lang.model.element.Name
            }
            interface InheritDocTree extends com.sun.source.doctree.InlineTagTree {
            }
            interface LinkTree extends com.sun.source.doctree.InlineTagTree {
                public getReference(): com.sun.source.doctree.ReferenceTree
                public getLabel(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface LiteralTree extends com.sun.source.doctree.InlineTagTree {
                public getBody(): com.sun.source.doctree.TextTree
            }
            interface ParamTree extends com.sun.source.doctree.BlockTagTree {
                public isTypeParameter(): boolean
                public getName(): com.sun.source.doctree.IdentifierTree
                public getDescription(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface ReferenceTree extends com.sun.source.doctree.DocTree {
                public getSignature(): java.lang.String
            }
            interface ReturnTree extends com.sun.source.doctree.BlockTagTree {
                public getDescription(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface SeeTree extends com.sun.source.doctree.BlockTagTree {
                public getReference(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface SerialTree extends com.sun.source.doctree.BlockTagTree {
                public getDescription(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface SerialDataTree extends com.sun.source.doctree.BlockTagTree {
                public getDescription(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface SerialFieldTree extends com.sun.source.doctree.BlockTagTree {
                public getName(): com.sun.source.doctree.IdentifierTree
                public getType(): com.sun.source.doctree.ReferenceTree
                public getDescription(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface SinceTree extends com.sun.source.doctree.BlockTagTree {
                public getBody(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface StartElementTree extends com.sun.source.doctree.DocTree {
                public getName(): javax.lang.model.element.Name
                public getAttributes(): java.util.List<com.sun.source.doctree.DocTree>
                public isSelfClosing(): boolean
            }
            interface ThrowsTree extends com.sun.source.doctree.BlockTagTree {
                public getExceptionName(): com.sun.source.doctree.ReferenceTree
                public getDescription(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface UnknownBlockTagTree extends com.sun.source.doctree.BlockTagTree {
                public getContent(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface UnknownInlineTagTree extends com.sun.source.doctree.InlineTagTree {
                public getContent(): java.util.List<com.sun.source.doctree.DocTree>
            }
            interface ValueTree extends com.sun.source.doctree.InlineTagTree {
                public getReference(): com.sun.source.doctree.ReferenceTree
            }
            interface VersionTree extends com.sun.source.doctree.BlockTagTree {
                public getBody(): java.util.List<com.sun.source.doctree.DocTree>
            }

         }

      }
      namespace javadoc {
         interface DocErrorReporter {
             printError<T>(...args: any[]): any
             printWarning<T>(...args: any[]): any
             printNotice<T>(...args: any[]): any
         }
         interface Doc extends java.lang.Comparable<java.lang.Object> {
             public commentText(): java.lang.String
             tags<T>(...args: any[]): any
             public seeTags(): com.sun.javadoc.SeeTag[]
             public inlineTags(): com.sun.javadoc.Tag[]
             public firstSentenceTags(): com.sun.javadoc.Tag[]
             public getRawCommentText(): java.lang.String
             public setRawCommentText(arg0: java.lang.String): void
             public name(): java.lang.String
             public compareTo(arg0: java.lang.Object): int
             public isField(): boolean
             public isEnumConstant(): boolean
             public isConstructor(): boolean
             public isMethod(): boolean
             public isAnnotationTypeElement(): boolean
             public isInterface(): boolean
             public isException(): boolean
             public isError(): boolean
             public isEnum(): boolean
             public isAnnotationType(): boolean
             public isOrdinaryClass(): boolean
             public isClass(): boolean
             public isIncluded(): boolean
             public position(): com.sun.javadoc.SourcePosition
         }
         interface ProgramElementDoc extends com.sun.javadoc.Doc {
             public containingClass(): com.sun.javadoc.ClassDoc
             public containingPackage(): com.sun.javadoc.PackageDoc
             public qualifiedName(): java.lang.String
             public modifierSpecifier(): int
             public modifiers(): java.lang.String
             public annotations(): com.sun.javadoc.AnnotationDesc[]
             public isPublic(): boolean
             public isProtected(): boolean
             public isPrivate(): boolean
             public isPackagePrivate(): boolean
             public isStatic(): boolean
             public isFinal(): boolean
         }
         interface ClassDoc extends com.sun.javadoc.ProgramElementDoc , com.sun.javadoc.Type {
             public isAbstract(): boolean
             public isSerializable(): boolean
             public isExternalizable(): boolean
             public serializationMethods(): com.sun.javadoc.MethodDoc[]
             public serializableFields(): com.sun.javadoc.FieldDoc[]
             public definesSerializableFields(): boolean
             public superclass(): com.sun.javadoc.ClassDoc
             public superclassType(): com.sun.javadoc.Type
             public subclassOf(arg0: com.sun.javadoc.ClassDoc): boolean
             public interfaces(): com.sun.javadoc.ClassDoc[]
             public interfaceTypes(): com.sun.javadoc.Type[]
             public typeParameters(): com.sun.javadoc.TypeVariable[]
             public typeParamTags(): com.sun.javadoc.ParamTag[]
             fields<T>(...args: any[]): any
             public enumConstants(): com.sun.javadoc.FieldDoc[]
             methods<T>(...args: any[]): any
             constructors<T>(...args: any[]): any
             innerClasses<T>(...args: any[]): any
             public findClass(arg0: java.lang.String): com.sun.javadoc.ClassDoc
             public importedClasses(): com.sun.javadoc.ClassDoc[]
             public importedPackages(): com.sun.javadoc.PackageDoc[]
         }
         interface Type {
             public typeName(): java.lang.String
             public qualifiedTypeName(): java.lang.String
             public simpleTypeName(): java.lang.String
             public dimension(): java.lang.String
             toString<T>(...args: any[]): any
             public isPrimitive(): boolean
             public asClassDoc(): com.sun.javadoc.ClassDoc
             public asParameterizedType(): com.sun.javadoc.ParameterizedType
             public asTypeVariable(): com.sun.javadoc.TypeVariable
             public asWildcardType(): com.sun.javadoc.WildcardType
             public asAnnotatedType(): com.sun.javadoc.AnnotatedType
             public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
             public getElementType(): com.sun.javadoc.Type
         }
         interface PackageDoc extends com.sun.javadoc.Doc {
             allClasses<T>(...args: any[]): any
             public ordinaryClasses(): com.sun.javadoc.ClassDoc[]
             public exceptions(): com.sun.javadoc.ClassDoc[]
             public errors(): com.sun.javadoc.ClassDoc[]
             public enums(): com.sun.javadoc.ClassDoc[]
             public interfaces(): com.sun.javadoc.ClassDoc[]
             public annotationTypes(): com.sun.javadoc.AnnotationTypeDoc[]
             public annotations(): com.sun.javadoc.AnnotationDesc[]
             public findClass(arg0: java.lang.String): com.sun.javadoc.ClassDoc
         }
         interface SourcePosition {
             public file(): java.io.File
             public line(): int
             public column(): int
             toString<T>(...args: any[]): any
         }
         interface MemberDoc extends com.sun.javadoc.ProgramElementDoc {
             public isSynthetic(): boolean
         }
         interface FieldDoc extends com.sun.javadoc.MemberDoc {
             public type(): com.sun.javadoc.Type
             public isTransient(): boolean
             public isVolatile(): boolean
             public serialFieldTags(): com.sun.javadoc.SerialFieldTag[]
             public constantValue(): java.lang.Object
             public constantValueExpression(): java.lang.String
         }
         interface ExecutableMemberDoc extends com.sun.javadoc.MemberDoc {
             public thrownExceptions(): com.sun.javadoc.ClassDoc[]
             public thrownExceptionTypes(): com.sun.javadoc.Type[]
             public isNative(): boolean
             public isSynchronized(): boolean
             public isVarArgs(): boolean
             public parameters(): com.sun.javadoc.Parameter[]
             public receiverType(): com.sun.javadoc.Type
             public throwsTags(): com.sun.javadoc.ThrowsTag[]
             public paramTags(): com.sun.javadoc.ParamTag[]
             public typeParamTags(): com.sun.javadoc.ParamTag[]
             public signature(): java.lang.String
             public flatSignature(): java.lang.String
             public typeParameters(): com.sun.javadoc.TypeVariable[]
         }
         interface MethodDoc extends com.sun.javadoc.ExecutableMemberDoc {
             public isAbstract(): boolean
             public isDefault(): boolean
             public returnType(): com.sun.javadoc.Type
             public overriddenClass(): com.sun.javadoc.ClassDoc
             public overriddenType(): com.sun.javadoc.Type
             public overriddenMethod(): com.sun.javadoc.MethodDoc
             public overrides(arg0: com.sun.javadoc.MethodDoc): boolean
         }
         interface ConstructorDoc extends com.sun.javadoc.ExecutableMemberDoc {
         }
         interface AnnotationTypeElementDoc extends com.sun.javadoc.MethodDoc {
             public defaultValue(): com.sun.javadoc.AnnotationValue
         }
         interface ParameterizedType extends com.sun.javadoc.Type {
             public asClassDoc(): com.sun.javadoc.ClassDoc
             public typeArguments(): com.sun.javadoc.Type[]
             public superclassType(): com.sun.javadoc.Type
             public interfaceTypes(): com.sun.javadoc.Type[]
             public containingType(): com.sun.javadoc.Type
         }
         interface TypeVariable extends com.sun.javadoc.Type {
             public bounds(): com.sun.javadoc.Type[]
             public owner(): com.sun.javadoc.ProgramElementDoc
             public annotations(): com.sun.javadoc.AnnotationDesc[]
         }
         interface ParamTag extends com.sun.javadoc.Tag {
             public parameterName(): java.lang.String
             public parameterComment(): java.lang.String
             public isTypeParameter(): boolean
         }
         interface Tag {
             public name(): java.lang.String
             public holder(): com.sun.javadoc.Doc
             public kind(): java.lang.String
             public text(): java.lang.String
             toString<T>(...args: any[]): any
             public inlineTags(): com.sun.javadoc.Tag[]
             public firstSentenceTags(): com.sun.javadoc.Tag[]
             public position(): com.sun.javadoc.SourcePosition
         }
         interface AnnotationTypeDoc extends com.sun.javadoc.ClassDoc {
             public elements(): com.sun.javadoc.AnnotationTypeElementDoc[]
         }
         interface WildcardType extends com.sun.javadoc.Type {
             public extendsBounds(): com.sun.javadoc.Type[]
             public superBounds(): com.sun.javadoc.Type[]
         }
         interface AnnotatedType extends com.sun.javadoc.Type {
             public annotations(): com.sun.javadoc.AnnotationDesc[]
             public underlyingType(): com.sun.javadoc.Type
         }
         interface AnnotationDesc$ElementValuePair {
             public element(): com.sun.javadoc.AnnotationTypeElementDoc
             public value(): com.sun.javadoc.AnnotationValue
         }
         interface AnnotationDesc {
             public annotationType(): com.sun.javadoc.AnnotationTypeDoc
             public elementValues(): com.sun.javadoc.AnnotationDesc$ElementValuePair[]
             public isSynthesized(): boolean
         }
         interface SeeTag extends com.sun.javadoc.Tag {
             public label(): java.lang.String
             public referencedPackage(): com.sun.javadoc.PackageDoc
             public referencedClassName(): java.lang.String
             public referencedClass(): com.sun.javadoc.ClassDoc
             public referencedMemberName(): java.lang.String
             public referencedMember(): com.sun.javadoc.MemberDoc
         }
         interface SerialFieldTag extends com.sun.javadoc.Tag , java.lang.Comparable<java.lang.Object> {
             public fieldName(): java.lang.String
             public fieldType(): java.lang.String
             public fieldTypeDoc(): com.sun.javadoc.ClassDoc
             public description(): java.lang.String
             public compareTo(arg0: java.lang.Object): int
         }
         interface ThrowsTag extends com.sun.javadoc.Tag {
             public exceptionName(): java.lang.String
             public exceptionComment(): java.lang.String
             public exception(): com.sun.javadoc.ClassDoc
             public exceptionType(): com.sun.javadoc.Type
         }
         interface Parameter {
             public type(): com.sun.javadoc.Type
             public name(): java.lang.String
             public typeName(): java.lang.String
             toString<T>(...args: any[]): any
             public annotations(): com.sun.javadoc.AnnotationDesc[]
         }
         interface AnnotationValue {
             public value(): java.lang.Object
             toString<T>(...args: any[]): any
         }
         class LanguageVersion extends java.lang.Enum<com.sun.javadoc.LanguageVersion> {
             public static JAVA_1_1: com.sun.javadoc.LanguageVersion
             public static JAVA_1_5: com.sun.javadoc.LanguageVersion
             public static values(): com.sun.javadoc.LanguageVersion[]
             valueOf<T>(...args: any[]): any
         }
         interface RootDoc extends com.sun.javadoc.Doc , com.sun.javadoc.DocErrorReporter {
             public options(): java.lang.String[][]
             public specifiedPackages(): com.sun.javadoc.PackageDoc[]
             public specifiedClasses(): com.sun.javadoc.ClassDoc[]
             public classes(): com.sun.javadoc.ClassDoc[]
             public packageNamed(arg0: java.lang.String): com.sun.javadoc.PackageDoc
             public classNamed(arg0: java.lang.String): com.sun.javadoc.ClassDoc
         }
         abstract class Doclet {
             public constructor()
             public static start(arg0: com.sun.javadoc.RootDoc): boolean
             public static optionLength(arg0: java.lang.String): int
             public static validOptions(arg0: java.lang.String[][], arg1: com.sun.javadoc.DocErrorReporter): boolean
             public static languageVersion(): com.sun.javadoc.LanguageVersion
         }

      }
      namespace istack {
         namespace internal {
            namespace tools {
               class SecureLoader$1 implements java.security.PrivilegedAction {
                   constructor()
                   public run(): java.lang.Object
               }
               class SecureLoader$2 implements java.security.PrivilegedAction {
                   val$c: java.lang.Class
                   constructor(arg0: java.lang.Class)
                   public run(): java.lang.Object
               }
               class SecureLoader$3 implements java.security.PrivilegedAction {
                   constructor()
                   public run(): java.lang.Object
               }
               class SecureLoader$4 implements java.security.PrivilegedAction {
                   val$cl: java.lang.ClassLoader
                   constructor(arg0: java.lang.ClassLoader)
                   public run(): java.lang.Object
               }
               class SecureLoader$5 implements java.security.PrivilegedAction {
                   val$cl: java.lang.ClassLoader
                   constructor(arg0: java.lang.ClassLoader)
                   public run(): java.lang.Object
               }
               class SecureLoader {
                   constructor()
                   static getContextClassLoader(): java.lang.ClassLoader
                   static getClassClassLoader(arg0: java.lang.Class): java.lang.ClassLoader
                   static getSystemClassLoader(): java.lang.ClassLoader
                   static getParentClassLoader(arg0: java.lang.ClassLoader): java.lang.ClassLoader
                   static setContextClassLoader(arg0: java.lang.ClassLoader): void
               }
               class ParallelWorldClassLoader extends java.lang.ClassLoader implements java.io.Closeable {
                   public constructor(arg0: java.lang.ClassLoader, arg1: java.lang.String)
                   protected findClass(arg0: java.lang.String): java.lang.Class
                   protected findResource(arg0: java.lang.String): java.net.URL
                   protected findResources(arg0: java.lang.String): java.util.Enumeration<java.net.URL>
                   public close(): void
                   public static toJarUrl(arg0: java.net.URL): java.net.URL
               }
               class MaskingClassLoader extends java.lang.ClassLoader {
                   constructor(...args: any[])
                   protected loadClass(arg0: java.lang.String, arg1: boolean): java.lang.Class<any>
               }
               class DefaultAuthenticator$1 implements java.security.PrivilegedAction<java.lang.Void> {
                   val$f: java.lang.reflect.Field
                   constructor(arg0: java.lang.reflect.Field)
                   run<T>(...args: any[]): any
               }
               class DefaultAuthenticator$2 implements java.security.PrivilegedAction<java.lang.Void> {
                   val$f: java.lang.reflect.Field
                   constructor(arg0: java.lang.reflect.Field)
                   run<T>(...args: any[]): any
               }
               interface DefaultAuthenticator$Receiver {
                   public onParsingError(arg0: java.lang.String, arg1: org.xml.sax.Locator): void
                   public onError(arg0: java.lang.Exception, arg1: org.xml.sax.Locator): void
               }
               class DefaultAuthenticator$DefaultRImpl implements com.sun.istack.internal.tools.DefaultAuthenticator$Receiver {
                   public onParsingError(arg0: java.lang.String, arg1: org.xml.sax.Locator): void
                   public onError(arg0: java.lang.Exception, arg1: org.xml.sax.Locator): void
                   constructor(arg0: com.sun.istack.internal.tools.DefaultAuthenticator$1)
               }
               class DefaultAuthenticator$AuthInfo {
                   public constructor(arg0: java.net.URL, arg1: java.lang.String, arg2: java.lang.String)
                   public getUser(): java.lang.String
                   public getPassword(): java.lang.String
                   public matchingHost(arg0: java.net.URL): boolean
               }
               class DefaultAuthenticator extends java.net.Authenticator {
                   constructor()
                   public static getAuthenticator(): com.sun.istack.internal.tools.DefaultAuthenticator
                   public static reset(): void
                   protected getPasswordAuthentication(): java.net.PasswordAuthentication
                   public setProxyAuth(arg0: java.lang.String): void
                   public setAuth(arg0: java.io.File, arg1: com.sun.istack.internal.tools.DefaultAuthenticator$Receiver): void
                   static getCurrentAuthenticator(): java.net.Authenticator
               }

            }

         }

      }
      namespace codemodel {
         namespace internal {
            class JDefinedClass$1 extends com.sun.codemodel.internal.JGenerifiableImpl {
                this$0: com.sun.codemodel.internal.JDefinedClass
                constructor(arg0: com.sun.codemodel.internal.JDefinedClass)
                protected owner(): com.sun.codemodel.internal.JCodeModel
            }
            class JDefinedClass extends com.sun.codemodel.internal.JClass implements com.sun.codemodel.internal.JDeclaration , com.sun.codemodel.internal.JClassContainer , com.sun.codemodel.internal.JGenerifiable , com.sun.codemodel.internal.JAnnotatable , com.sun.codemodel.internal.JDocCommentable {
                fields<T>(...args: any[]): any
                public metadata: java.lang.Object
                constructor(...args: any[])
                public isAnonymous(): boolean
                _extends<T>(...args: any[]): any
                _implements<T>(...args: any[]): any
                public name(): java.lang.String
                public enumConstant(arg0: java.lang.String): com.sun.codemodel.internal.JEnumConstant
                public fullName(): java.lang.String
                public binaryName(): java.lang.String
                public isInterface(): boolean
                public isAbstract(): boolean
                field<T>(...args: any[]): any
                public isAnnotationTypeDeclaration(): boolean
                public _annotationTypeDeclaration(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
                _enum<T>(...args: any[]): any
                public getClassType(): com.sun.codemodel.internal.ClassType
                public removeField(arg0: com.sun.codemodel.internal.JFieldVar): void
                public init(): com.sun.codemodel.internal.JBlock
                constructor<T>(...args: any[]): any
                public constructors(): java.util.Iterator<com.sun.codemodel.internal.JMethod>
                public getConstructor(arg0: com.sun.codemodel.internal.JType[]): com.sun.codemodel.internal.JMethod
                method<T>(...args: any[]): any
                public methods(): java.util.Collection<com.sun.codemodel.internal.JMethod>
                public getMethod(arg0: java.lang.String, arg1: com.sun.codemodel.internal.JType[]): com.sun.codemodel.internal.JMethod
                public isClass(): boolean
                public isPackage(): boolean
                public getPackage(): com.sun.codemodel.internal.JPackage
                _class<T>(...args: any[]): any
                _interface<T>(...args: any[]): any
                public javadoc(): com.sun.codemodel.internal.JDocComment
                public hide(): void
                public isHidden(): boolean
                public classes(): java.util.Iterator<com.sun.codemodel.internal.JDefinedClass>
                public listClasses(): com.sun.codemodel.internal.JClass[]
                public outer(): com.sun.codemodel.internal.JClass
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                protected declareBody(arg0: com.sun.codemodel.internal.JFormatter): void
                public direct(arg0: java.lang.String): void
                public _package(): com.sun.codemodel.internal.JPackage
                public parentContainer(): com.sun.codemodel.internal.JClassContainer
                generify<T>(...args: any[]): any
                public typeParams(): com.sun.codemodel.internal.JTypeVar[]
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
                public mods(): com.sun.codemodel.internal.JMods
            }
            abstract class JClass extends com.sun.codemodel.internal.JType {
                protected static EMPTY_ARRAY: com.sun.codemodel.internal.JTypeVar[]
                protected constructor(arg0: com.sun.codemodel.internal.JCodeModel)
                public name(): java.lang.String
                public _package(): com.sun.codemodel.internal.JPackage
                public outer(): com.sun.codemodel.internal.JClass
                public owner(): com.sun.codemodel.internal.JCodeModel
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public typeParams(): com.sun.codemodel.internal.JTypeVar[]
                public isInterface(): boolean
                public isAbstract(): boolean
                public getPrimitiveType(): com.sun.codemodel.internal.JPrimitiveType
                public boxify(): com.sun.codemodel.internal.JClass
                public unboxify(): com.sun.codemodel.internal.JType
                erasure<T>(...args: any[]): any
                public isAssignableFrom(arg0: com.sun.codemodel.internal.JClass): boolean
                getBaseClass<T>(...args: any[]): any
                public array(): com.sun.codemodel.internal.JClass
                narrow<T>(...args: any[]): any
                public getTypeParameters(): java.util.List<com.sun.codemodel.internal.JClass>
                public isParameterized(): boolean
                public wildcard(): com.sun.codemodel.internal.JClass
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
                toString<T>(...args: any[]): any
                public dotclass(): com.sun.codemodel.internal.JExpression
                staticInvoke<T>(...args: any[]): any
                staticRef<T>(...args: any[]): any
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                printLink(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            abstract class JType implements com.sun.codemodel.internal.JGenerable , java.lang.Comparable<com.sun.codemodel.internal.JType> {
                public constructor()
                public static parse(arg0: com.sun.codemodel.internal.JCodeModel, arg1: java.lang.String): com.sun.codemodel.internal.JPrimitiveType
                public owner(): com.sun.codemodel.internal.JCodeModel
                public fullName(): java.lang.String
                public binaryName(): java.lang.String
                public name(): java.lang.String
                public array(): com.sun.codemodel.internal.JClass
                public isArray(): boolean
                public isPrimitive(): boolean
                public boxify(): com.sun.codemodel.internal.JClass
                public unboxify(): com.sun.codemodel.internal.JType
                public erasure(): com.sun.codemodel.internal.JType
                public isReference(): boolean
                public elementType(): com.sun.codemodel.internal.JType
                toString<T>(...args: any[]): any
                compareTo<T>(...args: any[]): any
            }
            interface JGenerable {
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            interface JDeclaration {
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            interface JClassContainer {
                public isClass(): boolean
                public isPackage(): boolean
                _class<T>(...args: any[]): any
                _interface<T>(...args: any[]): any
                public classes(): java.util.Iterator<com.sun.codemodel.internal.JDefinedClass>
                public parentContainer(): com.sun.codemodel.internal.JClassContainer
                public getPackage(): com.sun.codemodel.internal.JPackage
                public owner(): com.sun.codemodel.internal.JCodeModel
                public _annotationTypeDeclaration(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
                public _enum(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
            }
            interface JGenerifiable {
                generify<T>(...args: any[]): any
                public typeParams(): com.sun.codemodel.internal.JTypeVar[]
            }
            interface JAnnotatable {
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
            }
            interface JDocCommentable {
                public javadoc(): com.sun.codemodel.internal.JDocComment
            }
            class JPackage implements com.sun.codemodel.internal.JDeclaration , com.sun.codemodel.internal.JGenerable , com.sun.codemodel.internal.JClassContainer , com.sun.codemodel.internal.JAnnotatable , java.lang.Comparable<com.sun.codemodel.internal.JPackage> , com.sun.codemodel.internal.JDocCommentable {
                constructor(arg0: java.lang.String, arg1: com.sun.codemodel.internal.JCodeModel)
                public parentContainer(): com.sun.codemodel.internal.JClassContainer
                public parent(): com.sun.codemodel.internal.JPackage
                public isClass(): boolean
                public isPackage(): boolean
                public getPackage(): com.sun.codemodel.internal.JPackage
                _class<T>(...args: any[]): any
                public _getClass(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
                compareTo<T>(...args: any[]): any
                _interface<T>(...args: any[]): any
                public _annotationTypeDeclaration(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
                public _enum(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
                public addResourceFile(arg0: com.sun.codemodel.internal.JResourceFile): com.sun.codemodel.internal.JResourceFile
                public hasResourceFile(arg0: java.lang.String): boolean
                public propertyFiles(): java.util.Iterator<com.sun.codemodel.internal.JResourceFile>
                public javadoc(): com.sun.codemodel.internal.JDocComment
                public remove(arg0: com.sun.codemodel.internal.JClass): void
                public ref(arg0: java.lang.String): com.sun.codemodel.internal.JClass
                public subPackage(arg0: java.lang.String): com.sun.codemodel.internal.JPackage
                public classes(): java.util.Iterator<com.sun.codemodel.internal.JDefinedClass>
                public isDefined(arg0: java.lang.String): boolean
                public isUnnamed(): boolean
                public name(): java.lang.String
                public owner(): com.sun.codemodel.internal.JCodeModel
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
                toPath(arg0: java.io.File): java.io.File
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                build(arg0: com.sun.codemodel.internal.CodeWriter, arg1: com.sun.codemodel.internal.CodeWriter): void
                countArtifacts(): int
            }
            class JCodeModel$TypeNameParser {
                this$0: com.sun.codemodel.internal.JCodeModel
                public constructor(arg0: com.sun.codemodel.internal.JCodeModel, arg1: java.lang.String)
                parseTypeName(): com.sun.codemodel.internal.JClass
            }
            class JCodeModel$JReferencedClass$1 implements java.util.Iterator<com.sun.codemodel.internal.JClass> {
                val$interfaces: java.lang.Class[]
                this$1: com.sun.codemodel.internal.JCodeModel$JReferencedClass
                constructor(arg0: com.sun.codemodel.internal.JCodeModel$JReferencedClass, arg1: java.lang.Class[])
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class JCodeModel$JReferencedClass extends com.sun.codemodel.internal.JClass implements com.sun.codemodel.internal.JDeclaration {
                static $assertionsDisabled: boolean
                this$0: com.sun.codemodel.internal.JCodeModel
                constructor(arg0: java.lang.Class<any>)
                public name(): java.lang.String
                public fullName(): java.lang.String
                public binaryName(): java.lang.String
                public outer(): com.sun.codemodel.internal.JClass
                public _package(): com.sun.codemodel.internal.JPackage
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public isInterface(): boolean
                public isAbstract(): boolean
                public getPrimitiveType(): com.sun.codemodel.internal.JPrimitiveType
                public isArray(): boolean
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                public typeParams(): com.sun.codemodel.internal.JTypeVar[]
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
            }
            class JCodeModel {
                public NULL: com.sun.codemodel.internal.JNullType
                public VOID: com.sun.codemodel.internal.JPrimitiveType
                public BOOLEAN: com.sun.codemodel.internal.JPrimitiveType
                public BYTE: com.sun.codemodel.internal.JPrimitiveType
                public SHORT: com.sun.codemodel.internal.JPrimitiveType
                public CHAR: com.sun.codemodel.internal.JPrimitiveType
                public INT: com.sun.codemodel.internal.JPrimitiveType
                public FLOAT: com.sun.codemodel.internal.JPrimitiveType
                public LONG: com.sun.codemodel.internal.JPrimitiveType
                public DOUBLE: com.sun.codemodel.internal.JPrimitiveType
                protected static isCaseSensitiveFileSystem: boolean
                public static primitiveToBox: java.util.Map<java.lang.Class<any>, java.lang.Class<any>>
                public static boxToPrimitive: java.util.Map<java.lang.Class<any>, java.lang.Class<any>>
                public constructor()
                public _package(arg0: java.lang.String): com.sun.codemodel.internal.JPackage
                public rootPackage(): com.sun.codemodel.internal.JPackage
                public packages(): java.util.Iterator<com.sun.codemodel.internal.JPackage>
                _class<T>(...args: any[]): any
                public directClass(arg0: java.lang.String): com.sun.codemodel.internal.JClass
                public _getClass(arg0: java.lang.String): com.sun.codemodel.internal.JDefinedClass
                public newAnonymousClass(arg0: com.sun.codemodel.internal.JClass): com.sun.codemodel.internal.JDefinedClass
                anonymousClass<T>(...args: any[]): any
                build<T>(...args: any[]): any
                public countArtifacts(): int
                ref<T>(...args: any[]): any
                public _ref(arg0: java.lang.Class<any>): com.sun.codemodel.internal.JType
                public wildcard(): com.sun.codemodel.internal.JClass
                public parseType(arg0: java.lang.String): com.sun.codemodel.internal.JType
            }
            class JMods implements com.sun.codemodel.internal.JGenerable {
                public getValue(): int
                static forVar(arg0: int): com.sun.codemodel.internal.JMods
                static forField(arg0: int): com.sun.codemodel.internal.JMods
                static forMethod(arg0: int): com.sun.codemodel.internal.JMods
                static forClass(arg0: int): com.sun.codemodel.internal.JMods
                static forInterface(arg0: int): com.sun.codemodel.internal.JMods
                public isAbstract(): boolean
                public isNative(): boolean
                public isSynchronized(): boolean
                public setSynchronized(arg0: boolean): void
                public setPrivate(): void
                public setProtected(): void
                public setPublic(): void
                public setFinal(arg0: boolean): void
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                toString<T>(...args: any[]): any
            }
            class JFieldVar extends com.sun.codemodel.internal.JVar implements com.sun.codemodel.internal.JDocCommentable {
                constructor(arg0: com.sun.codemodel.internal.JDefinedClass, arg1: com.sun.codemodel.internal.JMods, arg2: com.sun.codemodel.internal.JType, arg3: java.lang.String, arg4: com.sun.codemodel.internal.JExpression)
                public name(arg0: java.lang.String): void
                public javadoc(): com.sun.codemodel.internal.JDocComment
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JVar extends com.sun.codemodel.internal.JExpressionImpl implements com.sun.codemodel.internal.JDeclaration , com.sun.codemodel.internal.JAssignmentTarget , com.sun.codemodel.internal.JAnnotatable {
                constructor(arg0: com.sun.codemodel.internal.JMods, arg1: com.sun.codemodel.internal.JType, arg2: java.lang.String, arg3: com.sun.codemodel.internal.JExpression)
                public init(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JVar
                name<T>(...args: any[]): any
                type<T>(...args: any[]): any
                public mods(): com.sun.codemodel.internal.JMods
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
                protected isAnnotated(): boolean
                public bind(arg0: com.sun.codemodel.internal.JFormatter): void
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                public assign(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public assignPlus(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
            }
            abstract class JExpressionImpl implements com.sun.codemodel.internal.JExpression {
                public constructor()
                minus<T>(...args: any[]): any
                public not(): com.sun.codemodel.internal.JExpression
                public complement(): com.sun.codemodel.internal.JExpression
                public incr(): com.sun.codemodel.internal.JExpression
                public decr(): com.sun.codemodel.internal.JExpression
                public plus(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public mul(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public div(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public mod(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public shl(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public shr(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public shrz(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public band(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public bor(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public cand(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public cor(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public xor(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public lt(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public lte(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public gt(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public gte(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public eq(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public ne(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public _instanceof(arg0: com.sun.codemodel.internal.JType): com.sun.codemodel.internal.JExpression
                invoke<T>(...args: any[]): any
                ref<T>(...args: any[]): any
                public component(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JArrayCompRef
            }
            interface JExpression extends com.sun.codemodel.internal.JGenerable {
                minus<T>(...args: any[]): any
                public not(): com.sun.codemodel.internal.JExpression
                public complement(): com.sun.codemodel.internal.JExpression
                public incr(): com.sun.codemodel.internal.JExpression
                public decr(): com.sun.codemodel.internal.JExpression
                public plus(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public mul(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public div(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public mod(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public shl(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public shr(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public shrz(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public band(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public bor(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public cand(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public cor(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public xor(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public lt(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public lte(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public gt(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public gte(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public eq(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public ne(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public _instanceof(arg0: com.sun.codemodel.internal.JType): com.sun.codemodel.internal.JExpression
                invoke<T>(...args: any[]): any
                ref<T>(...args: any[]): any
                public component(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JArrayCompRef
            }
            interface JAssignmentTarget extends com.sun.codemodel.internal.JGenerable , com.sun.codemodel.internal.JExpression {
                public assign(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public assignPlus(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
            }
            class JBlock$1 implements com.sun.codemodel.internal.JStatement {
                val$source: java.lang.String
                this$0: com.sun.codemodel.internal.JBlock
                constructor(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String)
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JBlock implements com.sun.codemodel.internal.JGenerable , com.sun.codemodel.internal.JStatement {
                constructor(...args: any[])
                public getContents(): java.util.List<java.lang.Object>
                pos<T>(...args: any[]): any
                public isEmpty(): boolean
                decl<T>(...args: any[]): any
                public assign(arg0: com.sun.codemodel.internal.JAssignmentTarget, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JBlock
                public assignPlus(arg0: com.sun.codemodel.internal.JAssignmentTarget, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JBlock
                invoke<T>(...args: any[]): any
                public staticInvoke(arg0: com.sun.codemodel.internal.JClass, arg1: java.lang.String): com.sun.codemodel.internal.JInvocation
                public add(arg0: com.sun.codemodel.internal.JStatement): com.sun.codemodel.internal.JBlock
                public _if(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JConditional
                public _for(): com.sun.codemodel.internal.JForLoop
                public _while(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JWhileLoop
                public _switch(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JSwitch
                public _do(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JDoLoop
                public _try(): com.sun.codemodel.internal.JTryBlock
                _return<T>(...args: any[]): any
                public _throw(arg0: com.sun.codemodel.internal.JExpression): void
                _break<T>(...args: any[]): any
                public label(arg0: java.lang.String): com.sun.codemodel.internal.JLabel
                _continue<T>(...args: any[]): any
                public block(): com.sun.codemodel.internal.JBlock
                public directStatement(arg0: java.lang.String): com.sun.codemodel.internal.JStatement
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                generateBody(arg0: com.sun.codemodel.internal.JFormatter): void
                public forEach(arg0: com.sun.codemodel.internal.JType, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JForEach
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            interface JStatement {
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JDocComment extends com.sun.codemodel.internal.JCommentPart implements com.sun.codemodel.internal.JGenerable {
                public constructor(arg0: com.sun.codemodel.internal.JCodeModel)
                append<T>(...args: any[]): any
                addParam<T>(...args: any[]): any
                addThrows<T>(...args: any[]): any
                public addReturn(): com.sun.codemodel.internal.JCommentPart
                public addDeprecated(): com.sun.codemodel.internal.JCommentPart
                addXdoclet<T>(...args: any[]): any
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JCommentPart extends java.util.ArrayList<java.lang.Object> {
                public constructor()
                public append(arg0: java.lang.Object): com.sun.codemodel.internal.JCommentPart
                public add(arg0: java.lang.Object): boolean
                protected format(arg0: com.sun.codemodel.internal.JFormatter, arg1: java.lang.String): void
            }
            class JMethod extends com.sun.codemodel.internal.JGenerifiableImpl implements com.sun.codemodel.internal.JDeclaration , com.sun.codemodel.internal.JAnnotatable , com.sun.codemodel.internal.JDocCommentable {
                constructor(...args: any[])
                _throws<T>(...args: any[]): any
                public params(): java.util.List<com.sun.codemodel.internal.JVar>
                param<T>(...args: any[]): any
                varParam<T>(...args: any[]): any
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
                public hasVarArgs(): boolean
                name<T>(...args: any[]): any
                type<T>(...args: any[]): any
                public listParamTypes(): com.sun.codemodel.internal.JType[]
                public listVarParamType(): com.sun.codemodel.internal.JType
                public listParams(): com.sun.codemodel.internal.JVar[]
                public listVarParam(): com.sun.codemodel.internal.JVar
                public hasSignature(arg0: com.sun.codemodel.internal.JType[]): boolean
                public body(): com.sun.codemodel.internal.JBlock
                public declareDefaultValue(arg0: com.sun.codemodel.internal.JExpression): void
                public javadoc(): com.sun.codemodel.internal.JDocComment
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                public mods(): com.sun.codemodel.internal.JMods
                public getMods(): com.sun.codemodel.internal.JMods
                protected owner(): com.sun.codemodel.internal.JCodeModel
                public typeParams(): com.sun.codemodel.internal.JTypeVar[]
                generify<T>(...args: any[]): any
            }
            abstract class JGenerifiableImpl implements com.sun.codemodel.internal.JGenerifiable , com.sun.codemodel.internal.JDeclaration {
                constructor()
                protected owner(): com.sun.codemodel.internal.JCodeModel
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                generify<T>(...args: any[]): any
                public typeParams(): com.sun.codemodel.internal.JTypeVar[]
            }
            class ClassType {
                declarationToken: java.lang.String
                public static CLASS: com.sun.codemodel.internal.ClassType
                public static INTERFACE: com.sun.codemodel.internal.ClassType
                public static ANNOTATION_TYPE_DECL: com.sun.codemodel.internal.ClassType
                public static ENUM: com.sun.codemodel.internal.ClassType
            }
            class JEnumConstant extends com.sun.codemodel.internal.JExpressionImpl implements com.sun.codemodel.internal.JDeclaration , com.sun.codemodel.internal.JAnnotatable , com.sun.codemodel.internal.JDocCommentable {
                constructor(arg0: com.sun.codemodel.internal.JDefinedClass, arg1: java.lang.String)
                public arg(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JEnumConstant
                public getName(): java.lang.String
                public javadoc(): com.sun.codemodel.internal.JDocComment
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationUse$1 extends com.sun.codemodel.internal.JAnnotationValue {
                val$value: java.lang.Enum
                this$0: com.sun.codemodel.internal.JAnnotationUse
                constructor(arg0: com.sun.codemodel.internal.JAnnotationUse, arg1: java.lang.Enum)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationUse$2 extends com.sun.codemodel.internal.JExpressionImpl {
                val$value: java.lang.Class
                this$0: com.sun.codemodel.internal.JAnnotationUse
                constructor(arg0: com.sun.codemodel.internal.JAnnotationUse, arg1: java.lang.Class)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationUse extends com.sun.codemodel.internal.JAnnotationValue {
                constructor(arg0: com.sun.codemodel.internal.JClass)
                public getAnnotationClass(): com.sun.codemodel.internal.JClass
                public getAnnotationMembers(): java.util.Map<java.lang.String, com.sun.codemodel.internal.JAnnotationValue>
                param<T>(...args: any[]): any
                public annotationParam(arg0: java.lang.String, arg1: java.lang.Class<java.lang.annotation.Annotation>): com.sun.codemodel.internal.JAnnotationUse
                public paramArray(arg0: java.lang.String): com.sun.codemodel.internal.JAnnotationArrayMember
                public annotate(arg0: java.lang.Class<java.lang.annotation.Annotation>): com.sun.codemodel.internal.JAnnotationUse
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                static access$000(arg0: com.sun.codemodel.internal.JAnnotationUse): com.sun.codemodel.internal.JCodeModel
            }
            abstract class JAnnotationValue implements com.sun.codemodel.internal.JGenerable {
                public constructor()
            }
            class JClassAlreadyExistsException extends java.lang.Exception {
                public constructor(arg0: com.sun.codemodel.internal.JDefinedClass)
                public getExistingClass(): com.sun.codemodel.internal.JDefinedClass
            }
            class JFormatter$Mode extends java.lang.Enum<com.sun.codemodel.internal.JFormatter$Mode> {
                public static COLLECTING: com.sun.codemodel.internal.JFormatter$Mode
                public static PRINTING: com.sun.codemodel.internal.JFormatter$Mode
                public static values(): com.sun.codemodel.internal.JFormatter$Mode[]
                valueOf<T>(...args: any[]): any
            }
            class JFormatter$ReferenceList {
                this$0: com.sun.codemodel.internal.JFormatter
                constructor(arg0: com.sun.codemodel.internal.JFormatter)
                public collisions(arg0: com.sun.codemodel.internal.JDefinedClass): boolean
                public add(arg0: com.sun.codemodel.internal.JClass): void
                public getClasses(): java.util.List<com.sun.codemodel.internal.JClass>
                public setId(arg0: boolean): void
                public isId(): boolean
            }
            class JFormatter$1 {
                static $SwitchMap$com$sun$codemodel$internal$JFormatter$Mode: int[]
            }
            class JFormatter {
                static CLOSE_TYPE_ARGS: char
                static $assertionsDisabled: boolean
                constructor(...args: any[])
                public close(): void
                public isPrinting(): boolean
                public o(): com.sun.codemodel.internal.JFormatter
                public i(): com.sun.codemodel.internal.JFormatter
                p<T>(...args: any[]): any
                t<T>(...args: any[]): any
                public id(arg0: java.lang.String): com.sun.codemodel.internal.JFormatter
                public nl(): com.sun.codemodel.internal.JFormatter
                g<T>(...args: any[]): any
                public d(arg0: com.sun.codemodel.internal.JDeclaration): com.sun.codemodel.internal.JFormatter
                public s(arg0: com.sun.codemodel.internal.JStatement): com.sun.codemodel.internal.JFormatter
                public b(arg0: com.sun.codemodel.internal.JVar): com.sun.codemodel.internal.JFormatter
                write(arg0: com.sun.codemodel.internal.JDefinedClass): void
                static access$000(arg0: com.sun.codemodel.internal.JFormatter): com.sun.codemodel.internal.JPackage
            }
            class JTypeVar extends com.sun.codemodel.internal.JClass implements com.sun.codemodel.internal.JDeclaration {
                constructor(arg0: com.sun.codemodel.internal.JCodeModel, arg1: java.lang.String)
                public name(): java.lang.String
                public fullName(): java.lang.String
                public _package(): com.sun.codemodel.internal.JPackage
                public bound(arg0: com.sun.codemodel.internal.JClass): com.sun.codemodel.internal.JTypeVar
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public isInterface(): boolean
                public isAbstract(): boolean
                public declare(arg0: com.sun.codemodel.internal.JFormatter): void
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            interface Annotation> {
                public getAnnotationUse(): com.sun.codemodel.internal.JAnnotationUse
                public getAnnotationType(): java.lang.Class<A>
            }
            class JPrimitiveType extends com.sun.codemodel.internal.JType {
                constructor(arg0: com.sun.codemodel.internal.JCodeModel, arg1: java.lang.String, arg2: java.lang.Class<any>)
                public owner(): com.sun.codemodel.internal.JCodeModel
                public fullName(): java.lang.String
                public name(): java.lang.String
                public isPrimitive(): boolean
                public array(): com.sun.codemodel.internal.JClass
                public boxify(): com.sun.codemodel.internal.JClass
                public unboxify(): com.sun.codemodel.internal.JType
                public getWrapperClass(): com.sun.codemodel.internal.JClass
                public wrap(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public unwrap(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JInvocation extends com.sun.codemodel.internal.JExpressionImpl implements com.sun.codemodel.internal.JStatement {
                constructor(...args: any[])
                arg<T>(...args: any[]): any
                public listArgs(): com.sun.codemodel.internal.JExpression[]
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JFieldRef extends com.sun.codemodel.internal.JExpressionImpl implements com.sun.codemodel.internal.JAssignmentTarget {
                constructor(...args: any[])
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                public assign(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public assignPlus(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
            }
            abstract class JResourceFile {
                protected constructor(arg0: java.lang.String)
                public name(): java.lang.String
                protected isResource(): boolean
                protected build(arg0: java.io.OutputStream): void
            }
            class CodeWriter$1 extends com.sun.codemodel.internal.util.UnicodeEscapeWriter {
                val$bw: java.io.OutputStreamWriter
                this$0: com.sun.codemodel.internal.CodeWriter
                constructor(arg0: com.sun.codemodel.internal.CodeWriter, arg1: java.io.Writer, arg2: java.io.OutputStreamWriter)
                protected requireEscaping(arg0: int): boolean
            }
            abstract class CodeWriter {
                protected encoding: java.lang.String
                public constructor()
                public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
                public close(): void
            }
            class JNullType extends com.sun.codemodel.internal.JClass {
                constructor(arg0: com.sun.codemodel.internal.JCodeModel)
                public name(): java.lang.String
                public fullName(): java.lang.String
                public _package(): com.sun.codemodel.internal.JPackage
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public isInterface(): boolean
                public isAbstract(): boolean
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
            }
            class JArrayCompRef extends com.sun.codemodel.internal.JExpressionImpl implements com.sun.codemodel.internal.JAssignmentTarget {
                constructor(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                public assign(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public assignPlus(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
            }
            class JConditional implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public _then(): com.sun.codemodel.internal.JBlock
                public _else(): com.sun.codemodel.internal.JBlock
                public _elseif(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JConditional
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JForLoop implements com.sun.codemodel.internal.JStatement {
                public constructor()
                init<T>(...args: any[]): any
                public test(arg0: com.sun.codemodel.internal.JExpression): void
                public update(arg0: com.sun.codemodel.internal.JExpression): void
                public body(): com.sun.codemodel.internal.JBlock
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JWhileLoop implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public test(): com.sun.codemodel.internal.JExpression
                public body(): com.sun.codemodel.internal.JBlock
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JSwitch implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public test(): com.sun.codemodel.internal.JExpression
                public cases(): java.util.Iterator<com.sun.codemodel.internal.JCase>
                public _case(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JCase
                public _default(): com.sun.codemodel.internal.JCase
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JDoLoop implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public body(): com.sun.codemodel.internal.JBlock
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JTryBlock implements com.sun.codemodel.internal.JStatement {
                constructor()
                public body(): com.sun.codemodel.internal.JBlock
                public _catch(arg0: com.sun.codemodel.internal.JClass): com.sun.codemodel.internal.JCatchBlock
                public _finally(): com.sun.codemodel.internal.JBlock
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JLabel implements com.sun.codemodel.internal.JStatement {
                label: java.lang.String
                constructor(arg0: java.lang.String)
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JForEach implements com.sun.codemodel.internal.JStatement {
                public constructor(arg0: com.sun.codemodel.internal.JType, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression)
                public var(): com.sun.codemodel.internal.JVar
                public body(): com.sun.codemodel.internal.JBlock
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationArrayMember$1 extends com.sun.codemodel.internal.JAnnotationValue {
                val$value: java.lang.Enum
                this$0: com.sun.codemodel.internal.JAnnotationArrayMember
                constructor(arg0: com.sun.codemodel.internal.JAnnotationArrayMember, arg1: java.lang.Enum)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationArrayMember$2 extends com.sun.codemodel.internal.JExpressionImpl {
                val$value: java.lang.Class
                this$0: com.sun.codemodel.internal.JAnnotationArrayMember
                constructor(arg0: com.sun.codemodel.internal.JAnnotationArrayMember, arg1: java.lang.Class)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationArrayMember extends com.sun.codemodel.internal.JAnnotationValue implements com.sun.codemodel.internal.JAnnotatable {
                constructor(arg0: com.sun.codemodel.internal.JCodeModel)
                param<T>(...args: any[]): any
                annotate<T>(...args: any[]): any
                public annotate2<W extends com.sun.codemodel.internal.JAnnotationWriter>(arg0: java.lang.Class<W>): W
                public annotations(): java.util.Collection<com.sun.codemodel.internal.JAnnotationUse>
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                static access$000(arg0: com.sun.codemodel.internal.JAnnotationArrayMember): com.sun.codemodel.internal.JCodeModel
            }
            class JCase implements com.sun.codemodel.internal.JStatement {
                constructor(...args: any[])
                public label(): com.sun.codemodel.internal.JExpression
                public body(): com.sun.codemodel.internal.JBlock
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JCatchBlock implements com.sun.codemodel.internal.JGenerable {
                exception: com.sun.codemodel.internal.JClass
                constructor(arg0: com.sun.codemodel.internal.JClass)
                public param(arg0: java.lang.String): com.sun.codemodel.internal.JVar
                public body(): com.sun.codemodel.internal.JBlock
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            namespace writer {
               class FilterCodeWriter extends com.sun.codemodel.internal.CodeWriter {
                   protected core: com.sun.codemodel.internal.CodeWriter
                   public constructor(arg0: com.sun.codemodel.internal.CodeWriter)
                   public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                   public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
                   public close(): void
               }
               class FileCodeWriter extends com.sun.codemodel.internal.CodeWriter {
                   constructor(...args: any[])
                   public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                   protected getFile(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.File
                   public close(): void
               }
               class ZipCodeWriter$1 extends java.io.FilterOutputStream {
                   this$0: com.sun.codemodel.internal.writer.ZipCodeWriter
                   constructor(arg0: com.sun.codemodel.internal.writer.ZipCodeWriter, arg1: java.io.OutputStream)
                   public close(): void
               }
               class ZipCodeWriter extends com.sun.codemodel.internal.CodeWriter {
                   public constructor(arg0: java.io.OutputStream)
                   public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                   public close(): void
               }
               class SingleStreamCodeWriter$1 extends java.io.FilterOutputStream {
                   this$0: com.sun.codemodel.internal.writer.SingleStreamCodeWriter
                   constructor(arg0: com.sun.codemodel.internal.writer.SingleStreamCodeWriter, arg1: java.io.OutputStream)
                   public close(): void
               }
               class SingleStreamCodeWriter extends com.sun.codemodel.internal.CodeWriter {
                   public constructor(arg0: java.io.OutputStream)
                   public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                   public close(): void
               }
               class PrologCodeWriter extends com.sun.codemodel.internal.writer.FilterCodeWriter {
                   public constructor(arg0: com.sun.codemodel.internal.CodeWriter, arg1: java.lang.String)
                   public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
               }
               class ProgressCodeWriter extends com.sun.codemodel.internal.writer.FilterCodeWriter {
                   public constructor(arg0: com.sun.codemodel.internal.CodeWriter, arg1: java.io.PrintStream)
                   public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                   public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
               }

            }
            namespace util {
               class UnicodeEscapeWriter extends java.io.FilterWriter {
                   public constructor(arg0: java.io.Writer)
                   write<T>(...args: any[]): any
                   protected requireEscaping(arg0: int): boolean
               }
               class Surrogate$Parser {
                   public constructor()
                   public character(): int
                   public isPair(): boolean
                   public increment(): int
                   public error(): java.nio.charset.CoderResult
                   public unmappableResult(): java.nio.charset.CoderResult
                   parse<T>(...args: any[]): any
               }
               class Surrogate$Generator {
                   public constructor()
                   public error(): java.nio.charset.CoderResult
                   generate<T>(...args: any[]): any
               }
               class Surrogate {
                   public static MIN_HIGH: char
                   public static MAX_HIGH: char
                   public static MIN_LOW: char
                   public static MAX_LOW: char
                   public static MIN: char
                   public static MAX: char
                   public static UCS4_MIN: int
                   public static UCS4_MAX: int
                   public static isHigh(arg0: int): boolean
                   public static isLow(arg0: int): boolean
                   public static is(arg0: int): boolean
                   public static neededFor(arg0: int): boolean
                   public static high(arg0: int): char
                   public static low(arg0: int): char
                   public static toUCS4(arg0: char, arg1: char): int
               }
               abstract class SingleByteEncoder extends java.nio.charset.CharsetEncoder {
                   protected constructor(arg0: java.nio.charset.Charset, arg1: short[], arg2: java.lang.String, arg3: int, arg4: int, arg5: int)
                   public canEncode(arg0: char): boolean
                   protected encodeLoop(arg0: java.nio.CharBuffer, arg1: java.nio.ByteBuffer): java.nio.charset.CoderResult
                   public encode(arg0: char): byte
               }
               class MS1252Encoder extends com.sun.codemodel.internal.util.SingleByteEncoder {
                   public constructor(arg0: java.nio.charset.Charset)
                   public canEncode(arg0: char): boolean
                   public encode(arg0: char): byte
               }
               class JavadocEscapeWriter extends java.io.FilterWriter {
                   public constructor(arg0: java.io.Writer)
                   write<T>(...args: any[]): any
               }
               class EncoderFactory {
                   public constructor()
                   public static createEncoder(arg0: java.lang.String): java.nio.charset.CharsetEncoder
               }
               class ClassNameComparator implements java.util.Comparator<com.sun.codemodel.internal.JClass> {
                   public static theInstance: java.util.Comparator<com.sun.codemodel.internal.JClass>
                   compare<T>(...args: any[]): any
               }

            }
            namespace fmt {
               class SecureLoader$1 implements java.security.PrivilegedAction {
                   constructor()
                   public run(): java.lang.Object
               }
               class SecureLoader$2 implements java.security.PrivilegedAction {
                   val$c: java.lang.Class
                   constructor(arg0: java.lang.Class)
                   public run(): java.lang.Object
               }
               class SecureLoader$3 implements java.security.PrivilegedAction {
                   constructor()
                   public run(): java.lang.Object
               }
               class SecureLoader$4 implements java.security.PrivilegedAction {
                   val$cl: java.lang.ClassLoader
                   constructor(arg0: java.lang.ClassLoader)
                   public run(): java.lang.Object
               }
               class SecureLoader {
                   constructor()
                   static getContextClassLoader(): java.lang.ClassLoader
                   static getClassClassLoader(arg0: java.lang.Class): java.lang.ClassLoader
                   static getSystemClassLoader(): java.lang.ClassLoader
                   static setContextClassLoader(arg0: java.lang.ClassLoader): void
               }
               class JTextFile extends com.sun.codemodel.internal.JResourceFile {
                   public constructor(arg0: java.lang.String)
                   public setContents(arg0: java.lang.String): void
                   public build(arg0: java.io.OutputStream): void
               }
               class JStaticJavaFile$1 implements com.sun.codemodel.internal.fmt.JStaticJavaFile$LineFilter {
                   this$0: com.sun.codemodel.internal.fmt.JStaticJavaFile
                   constructor(arg0: com.sun.codemodel.internal.fmt.JStaticJavaFile)
                   public process(arg0: java.lang.String): java.lang.String
               }
               interface JStaticJavaFile$LineFilter {
                   public process(arg0: java.lang.String): java.lang.String
               }
               class JStaticJavaFile$ChainFilter implements com.sun.codemodel.internal.fmt.JStaticJavaFile$LineFilter {
                   public constructor(arg0: com.sun.codemodel.internal.fmt.JStaticJavaFile$LineFilter, arg1: com.sun.codemodel.internal.fmt.JStaticJavaFile$LineFilter)
                   public process(arg0: java.lang.String): java.lang.String
               }
               class JStaticJavaFile$JStaticClass extends com.sun.codemodel.internal.JClass {
                   this$0: com.sun.codemodel.internal.fmt.JStaticJavaFile
                   constructor(arg0: com.sun.codemodel.internal.fmt.JStaticJavaFile)
                   public name(): java.lang.String
                   public fullName(): java.lang.String
                   public _package(): com.sun.codemodel.internal.JPackage
                   public _extends(): com.sun.codemodel.internal.JClass
                   public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                   public isInterface(): boolean
                   public isAbstract(): boolean
                   public typeParams(): com.sun.codemodel.internal.JTypeVar[]
                   protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
               }
               class JStaticJavaFile extends com.sun.codemodel.internal.JResourceFile {
                   constructor(...args: any[])
                   public getJClass(): com.sun.codemodel.internal.JClass
                   protected isResource(): boolean
                   protected build(arg0: java.io.OutputStream): void
                   static access$000(arg0: com.sun.codemodel.internal.fmt.JStaticJavaFile): com.sun.codemodel.internal.JPackage
                   static access$100(arg0: com.sun.codemodel.internal.fmt.JStaticJavaFile): java.lang.String
               }
               class JStaticFile extends com.sun.codemodel.internal.JResourceFile {
                   constructor(...args: any[])
                   protected isResource(): boolean
                   protected build(arg0: java.io.OutputStream): void
               }
               class JSerializedObject extends com.sun.codemodel.internal.JResourceFile {
                   public constructor(arg0: java.lang.String, arg1: java.lang.Object)
                   protected build(arg0: java.io.OutputStream): void
               }
               class JPropertyFile extends com.sun.codemodel.internal.JResourceFile {
                   public constructor(arg0: java.lang.String)
                   public add(arg0: java.lang.String, arg1: java.lang.String): void
                   public build(arg0: java.io.OutputStream): void
               }
               class JBinaryFile extends com.sun.codemodel.internal.JResourceFile {
                   public constructor(arg0: java.lang.String)
                   public getDataStore(): java.io.OutputStream
                   public build(arg0: java.io.OutputStream): void
               }

            }
            class JAnnotationWriter<A>> implements java.lang.reflect.InvocationHandler , com.sun.codemodel.internal.JAnnotationWriter<A> {
                public constructor(arg0: java.lang.Class<A>, arg1: java.lang.Class<W>, arg2: com.sun.codemodel.internal.JAnnotationUse)
                public getAnnotationUse(): com.sun.codemodel.internal.JAnnotationUse
                public getAnnotationType(): java.lang.Class<A>
                public invoke(arg0: java.lang.Object, arg1: java.lang.reflect.Method, arg2: java.lang.Object[]): java.lang.Object
                static create<W extends com.sun.codemodel.internal.JAnnotationWriter<any>>(arg0: java.lang.Class<W>, arg1: com.sun.codemodel.internal.JAnnotatable): W
            }
            class SecureLoader$1 implements java.security.PrivilegedAction {
                constructor()
                public run(): java.lang.Object
            }
            class SecureLoader$2 implements java.security.PrivilegedAction {
                val$c: java.lang.Class
                constructor(arg0: java.lang.Class)
                public run(): java.lang.Object
            }
            class SecureLoader$3 implements java.security.PrivilegedAction {
                constructor()
                public run(): java.lang.Object
            }
            class SecureLoader$4 implements java.security.PrivilegedAction {
                val$cl: java.lang.ClassLoader
                constructor(arg0: java.lang.ClassLoader)
                public run(): java.lang.Object
            }
            class SecureLoader {
                constructor()
                static getContextClassLoader(): java.lang.ClassLoader
                static getClassClassLoader(arg0: java.lang.Class): java.lang.ClassLoader
                static getSystemClassLoader(): java.lang.ClassLoader
                static setContextClassLoader(arg0: java.lang.ClassLoader): void
            }
            class JTypeWildcard extends com.sun.codemodel.internal.JClass {
                constructor(arg0: com.sun.codemodel.internal.JClass)
                public name(): java.lang.String
                public fullName(): java.lang.String
                public _package(): com.sun.codemodel.internal.JPackage
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public isInterface(): boolean
                public isAbstract(): boolean
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JThrow implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JStringLiteral extends com.sun.codemodel.internal.JExpressionImpl {
                public str: java.lang.String
                constructor(arg0: java.lang.String)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JReturn implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JOp$UnaryOp extends com.sun.codemodel.internal.JExpressionImpl {
                protected op: java.lang.String
                protected e: com.sun.codemodel.internal.JExpression
                protected opFirst: boolean
                constructor(...args: any[])
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JOp$TightUnaryOp extends com.sun.codemodel.internal.JOp$UnaryOp {
                constructor(arg0: com.sun.codemodel.internal.JExpression, arg1: java.lang.String)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JOp$BinaryOp extends com.sun.codemodel.internal.JExpressionImpl {
                op: java.lang.String
                left: com.sun.codemodel.internal.JExpression
                right: com.sun.codemodel.internal.JGenerable
                constructor(arg0: java.lang.String, arg1: com.sun.codemodel.internal.JExpression, arg2: com.sun.codemodel.internal.JGenerable)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JOp$TernaryOp extends com.sun.codemodel.internal.JExpressionImpl {
                op1: java.lang.String
                op2: java.lang.String
                e1: com.sun.codemodel.internal.JExpression
                e2: com.sun.codemodel.internal.JExpression
                e3: com.sun.codemodel.internal.JExpression
                constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression, arg3: com.sun.codemodel.internal.JExpression, arg4: com.sun.codemodel.internal.JExpression)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            abstract class JOp {
                static hasTopOp(arg0: com.sun.codemodel.internal.JExpression): boolean
                minus<T>(...args: any[]): any
                public static not(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static complement(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static incr(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static decr(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static plus(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static mul(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static div(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static mod(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static shl(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static shr(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static shrz(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static band(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static bor(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static cand(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static cor(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static xor(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static lt(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static lte(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static gt(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static gte(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static eq(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static ne(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static _instanceof(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JType): com.sun.codemodel.internal.JExpression
                public static cond(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression, arg2: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
            }
            class JNarrowedClass$1 implements java.util.Iterator<com.sun.codemodel.internal.JClass> {
                this$0: com.sun.codemodel.internal.JNarrowedClass
                constructor(arg0: com.sun.codemodel.internal.JNarrowedClass)
                public remove(): void
                next<T>(...args: any[]): any
                public hasNext(): boolean
            }
            class JNarrowedClass extends com.sun.codemodel.internal.JClass {
                basis: com.sun.codemodel.internal.JClass
                static $assertionsDisabled: boolean
                constructor(...args: any[])
                narrow<T>(...args: any[]): any
                public name(): java.lang.String
                public fullName(): java.lang.String
                public binaryName(): java.lang.String
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                printLink(arg0: com.sun.codemodel.internal.JFormatter): void
                public _package(): com.sun.codemodel.internal.JPackage
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                erasure<T>(...args: any[]): any
                public isInterface(): boolean
                public isAbstract(): boolean
                public isArray(): boolean
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
                public getTypeParameters(): java.util.List<com.sun.codemodel.internal.JClass>
                static access$000(arg0: com.sun.codemodel.internal.JNarrowedClass): java.util.List
            }
            class JMod {
                public static NONE: int
                public static PUBLIC: int
                public static PROTECTED: int
                public static PRIVATE: int
                public static FINAL: int
                public static STATIC: int
                public static ABSTRACT: int
                public static NATIVE: int
                public static SYNCHRONIZED: int
                public static TRANSIENT: int
                public static VOLATILE: int
                public constructor()
            }
            class JJavaName$Entry {
                public constructor(arg0: java.lang.String, arg1: java.lang.String)
                apply(arg0: java.lang.String): java.lang.String
            }
            class JJavaName {
                public constructor()
                public static isJavaIdentifier(arg0: java.lang.String): boolean
                public static isFullyQualifiedClassName(arg0: java.lang.String): boolean
                public static isJavaPackageName(arg0: java.lang.String): boolean
                public static getPluralForm(arg0: java.lang.String): java.lang.String
            }
            class JExpr$1 extends com.sun.codemodel.internal.JExpressionImpl {
                val$cl: com.sun.codemodel.internal.JClass
                constructor(arg0: com.sun.codemodel.internal.JClass)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JExpr$2 extends com.sun.codemodel.internal.JExpressionImpl {
                val$source: java.lang.String
                constructor(arg0: java.lang.String)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            abstract class JExpr {
                public static TRUE: com.sun.codemodel.internal.JExpression
                public static FALSE: com.sun.codemodel.internal.JExpression
                static charEscape: java.lang.String
                static charMacro: java.lang.String
                public static assign(arg0: com.sun.codemodel.internal.JAssignmentTarget, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                public static assignPlus(arg0: com.sun.codemodel.internal.JAssignmentTarget, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                _new<T>(...args: any[]): any
                invoke<T>(...args: any[]): any
                ref<T>(...args: any[]): any
                public static refthis(arg0: java.lang.String): com.sun.codemodel.internal.JFieldRef
                public static dotclass(arg0: com.sun.codemodel.internal.JClass): com.sun.codemodel.internal.JExpression
                public static component(arg0: com.sun.codemodel.internal.JExpression, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JArrayCompRef
                public static cast(arg0: com.sun.codemodel.internal.JType, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JCast
                newArray<T>(...args: any[]): any
                public static _this(): com.sun.codemodel.internal.JExpression
                public static _super(): com.sun.codemodel.internal.JExpression
                public static _null(): com.sun.codemodel.internal.JExpression
                lit<T>(...args: any[]): any
                public static quotify(arg0: char, arg1: java.lang.String): java.lang.String
                public static direct(arg0: java.lang.String): com.sun.codemodel.internal.JExpression
            }
            class JCast extends com.sun.codemodel.internal.JExpressionImpl {
                constructor(arg0: com.sun.codemodel.internal.JType, arg1: com.sun.codemodel.internal.JExpression)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JArray extends com.sun.codemodel.internal.JExpressionImpl {
                public add(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JArray
                constructor(arg0: com.sun.codemodel.internal.JType, arg1: com.sun.codemodel.internal.JExpression)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JDirectClass extends com.sun.codemodel.internal.JClass {
                public constructor(arg0: com.sun.codemodel.internal.JCodeModel, arg1: java.lang.String)
                public name(): java.lang.String
                public fullName(): java.lang.String
                public _package(): com.sun.codemodel.internal.JPackage
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public isInterface(): boolean
                public isAbstract(): boolean
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
            }
            class JContinue implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JLabel)
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JBreak implements com.sun.codemodel.internal.JStatement {
                constructor(arg0: com.sun.codemodel.internal.JLabel)
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAtom extends com.sun.codemodel.internal.JExpressionImpl {
                constructor(arg0: java.lang.String)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAssignment extends com.sun.codemodel.internal.JExpressionImpl implements com.sun.codemodel.internal.JStatement {
                lhs: com.sun.codemodel.internal.JAssignmentTarget
                rhs: com.sun.codemodel.internal.JExpression
                op: java.lang.String
                constructor(...args: any[])
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                public state(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JArrayClass extends com.sun.codemodel.internal.JClass {
                constructor(arg0: com.sun.codemodel.internal.JCodeModel, arg1: com.sun.codemodel.internal.JType)
                public name(): java.lang.String
                public fullName(): java.lang.String
                public binaryName(): java.lang.String
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
                public _package(): com.sun.codemodel.internal.JPackage
                public _extends(): com.sun.codemodel.internal.JClass
                public _implements(): java.util.Iterator<com.sun.codemodel.internal.JClass>
                public isInterface(): boolean
                public isAbstract(): boolean
                public elementType(): com.sun.codemodel.internal.JType
                public isArray(): boolean
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                protected substituteParams(arg0: com.sun.codemodel.internal.JTypeVar[], arg1: java.util.List<com.sun.codemodel.internal.JClass>): com.sun.codemodel.internal.JClass
            }
            class JAnonymousClass extends com.sun.codemodel.internal.JDefinedClass {
                constructor(arg0: com.sun.codemodel.internal.JClass)
                public fullName(): java.lang.String
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }
            class JAnnotationStringValue extends com.sun.codemodel.internal.JAnnotationValue {
                constructor(arg0: com.sun.codemodel.internal.JExpression)
                public generate(arg0: com.sun.codemodel.internal.JFormatter): void
            }

         }

      }
      namespace xml {
         namespace internal {
            namespace xsom {
               namespace impl {
                  namespace parser {
                     class ParserContext$1 implements com.sun.xml.internal.xsom.impl.parser.PatcherManager {
                         this$0: com.sun.xml.internal.xsom.impl.parser.ParserContext
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext)
                         public addPatcher(arg0: com.sun.xml.internal.xsom.impl.parser.Patch): void
                         public addErrorChecker(arg0: com.sun.xml.internal.xsom.impl.parser.Patch): void
                         public reportError(arg0: java.lang.String, arg1: org.xml.sax.Locator): void
                     }
                     class ParserContext$2 implements org.xml.sax.ErrorHandler {
                         this$0: com.sun.xml.internal.xsom.impl.parser.ParserContext
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext)
                         public warning(arg0: org.xml.sax.SAXParseException): void
                         public error(arg0: org.xml.sax.SAXParseException): void
                         public fatalError(arg0: org.xml.sax.SAXParseException): void
                     }
                     class ParserContext$3 implements org.xml.sax.ErrorHandler {
                         this$0: com.sun.xml.internal.xsom.impl.parser.ParserContext
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext)
                         public warning(arg0: org.xml.sax.SAXParseException): void
                         public error(arg0: org.xml.sax.SAXParseException): void
                         public fatalError(arg0: org.xml.sax.SAXParseException): void
                     }
                     class ParserContext {
                         public schemaSet: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                         parser: com.sun.xml.internal.xsom.parser.XMLParser
                         public parsedDocuments: java.util.Map<com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl>
                         patcherManager: com.sun.xml.internal.xsom.impl.parser.PatcherManager
                         errorHandler: org.xml.sax.ErrorHandler
                         noopHandler: org.xml.sax.ErrorHandler
                         public constructor(arg0: com.sun.xml.internal.xsom.parser.XSOMParser, arg1: com.sun.xml.internal.xsom.parser.XMLParser)
                         public getEntityResolver(): org.xml.sax.EntityResolver
                         public getAnnotationParserFactory(): com.sun.xml.internal.xsom.parser.AnnotationParserFactory
                         public parse(arg0: org.xml.sax.InputSource): void
                         public getResult(): com.sun.xml.internal.xsom.XSSchemaSet
                         public newNGCCRuntime(): com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                         setErrorFlag(): void
                         static access$000(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext): java.util.Vector
                         static access$100(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext): java.util.Vector
                         static access$200(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext): com.sun.xml.internal.xsom.parser.XSOMParser
                     }
                     interface Patch {
                         public run(): void
                     }
                     class SchemaDocumentImpl implements com.sun.xml.internal.xsom.parser.SchemaDocument {
                         references: java.util.Set<com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl>
                         referers: java.util.Set<com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl>
                         protected constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaImpl, arg1: java.lang.String)
                         public getSystemId(): java.lang.String
                         public getTargetNamespace(): java.lang.String
                         getSchema<T>(...args: any[]): any
                         public getReferencedDocuments(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                         public getIncludedDocuments(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                         public getImportedDocuments(arg0: java.lang.String): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                         public includes(arg0: com.sun.xml.internal.xsom.parser.SchemaDocument): boolean
                         public imports(arg0: com.sun.xml.internal.xsom.parser.SchemaDocument): boolean
                         public getReferers(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                         public equals(arg0: java.lang.Object): boolean
                         public hashCode(): int
                     }
                     class NGCCRuntimeEx$Context implements org.relaxng.datatype.ValidationContext {
                         constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx$Context)
                         public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                         public getBaseUri(): java.lang.String
                         public isNotation(arg0: java.lang.String): boolean
                         public isUnparsedEntity(arg0: java.lang.String): boolean
                         static access$000(arg0: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx$Context): com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx$Context
                     }
                     class NGCCRuntimeEx extends com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime implements com.sun.xml.internal.xsom.impl.parser.PatcherManager {
                         public parser: com.sun.xml.internal.xsom.impl.parser.ParserContext
                         public currentSchema: com.sun.xml.internal.xsom.impl.SchemaImpl
                         public finalDefault: int
                         public blockDefault: int
                         public elementFormDefault: boolean
                         public attributeFormDefault: boolean
                         public chameleonMode: boolean
                         public document: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl
                         public static XMLSchemaNSURI: java.lang.String
                         static $assertionsDisabled: boolean
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.ParserContext)
                         public checkDoubleDefError(arg0: com.sun.xml.internal.xsom.XSDeclaration): void
                         public static ignorableDuplicateComponent(arg0: com.sun.xml.internal.xsom.XSDeclaration): boolean
                         public addPatcher(arg0: com.sun.xml.internal.xsom.impl.parser.Patch): void
                         public addErrorChecker(arg0: com.sun.xml.internal.xsom.impl.parser.Patch): void
                         reportError<T>(...args: any[]): any
                         public includeSchema(arg0: java.lang.String): void
                         public importSchema(arg0: java.lang.String, arg1: java.lang.String): void
                         public hasAlreadyBeenRead(): boolean
                         public parseEntity(arg0: org.xml.sax.InputSource, arg1: boolean, arg2: java.lang.String, arg3: org.xml.sax.Locator): void
                         public createAnnotationParser(): com.sun.xml.internal.xsom.parser.AnnotationParser
                         public getAnnotationContextElementName(): java.lang.String
                         public copyLocator(): org.xml.sax.Locator
                         public getErrorHandler(): org.xml.sax.ErrorHandler
                         public onEnterElementConsumed(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public onLeaveElementConsumed(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public createValidationContext(): org.relaxng.datatype.ValidationContext
                         public createXmlString(arg0: java.lang.String): com.sun.xml.internal.xsom.XmlString
                         public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                         public endPrefixMapping(arg0: java.lang.String): void
                         public parseUName(arg0: java.lang.String): com.sun.xml.internal.xsom.impl.UName
                         public parseBoolean(arg0: java.lang.String): boolean
                         protected unexpectedX(arg0: java.lang.String): void
                         public parseForeignAttributes(arg0: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl): com.sun.xml.internal.xsom.impl.ForeignAttributesImpl
                     }
                     namespace state {
                        class NGCCRuntime implements org.xml.sax.ContentHandler , com.sun.xml.internal.xsom.impl.parser.state.NGCCEventSource {
                            static IMPOSSIBLE: java.lang.String
                            public constructor()
                            public setRootHandler(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler): void
                            public reset(): void
                            public setDocumentLocator(arg0: org.xml.sax.Locator): void
                            public getLocator(): org.xml.sax.Locator
                            public getCurrentAttributes(): org.xml.sax.Attributes
                            public replace(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver): int
                            public processList(arg0: java.lang.String): void
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public onEnterElementConsumed(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public onLeaveElementConsumed(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public characters(arg0: char[], arg1: int, arg2: int): void
                            public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                            public getAttributeIndex(arg0: java.lang.String, arg1: java.lang.String): int
                            public consumeAttribute(arg0: int): void
                            public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                            public endPrefixMapping(arg0: java.lang.String): void
                            public skippedEntity(arg0: java.lang.String): void
                            public processingInstruction(arg0: java.lang.String, arg1: java.lang.String): void
                            public endDocument(): void
                            public startDocument(): void
                            public sendEnterAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendEnterElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                            public sendLeaveAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendLeaveElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendText(arg0: int, arg1: java.lang.String): void
                            public redirectSubtree(arg0: org.xml.sax.ContentHandler, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                            protected unexpectedX(arg0: java.lang.String): void
                            public trace(arg0: java.lang.String): void
                            public traceln(arg0: java.lang.String): void
                        }
                        interface NGCCEventSource {
                            public replace(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver): int
                            public sendEnterElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                            public sendLeaveElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendEnterAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendLeaveAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendText(arg0: int, arg1: java.lang.String): void
                        }
                        abstract class NGCCHandler implements com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver {
                            protected _parent: com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler
                            protected _source: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventSource
                            protected _cookie: int
                            protected constructor(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventSource, arg1: com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler, arg2: int)
                            protected getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            protected onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public spawnChildFromEnterElement(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                            public spawnChildFromEnterAttribute(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public spawnChildFromLeaveElement(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public spawnChildFromLeaveAttribute(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public spawnChildFromText(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String): void
                            public revertToParentFromEnterElement(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: org.xml.sax.Attributes): void
                            public revertToParentFromLeaveElement(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                            public revertToParentFromEnterAttribute(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                            public revertToParentFromLeaveAttribute(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                            public revertToParentFromText(arg0: java.lang.Object, arg1: int, arg2: java.lang.String): void
                            public unexpectedEnterElement(arg0: java.lang.String): void
                            public unexpectedLeaveElement(arg0: java.lang.String): void
                            public unexpectedEnterAttribute(arg0: java.lang.String): void
                            public unexpectedLeaveAttribute(arg0: java.lang.String): void
                        }
                        interface NGCCEventReceiver {
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                        }
                        class AttributesImpl implements org.xml.sax.Attributes {
                            length: int
                            data: java.lang.String[]
                            constructor(...args: any[])
                            public getLength(): int
                            public getURI(arg0: int): java.lang.String
                            public getLocalName(arg0: int): java.lang.String
                            public getQName(arg0: int): java.lang.String
                            getType<T>(...args: any[]): any
                            getValue<T>(...args: any[]): any
                            getIndex<T>(...args: any[]): any
                            public clear(): void
                            public setAttributes(arg0: org.xml.sax.Attributes): void
                            public addAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                            public setAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void
                            public removeAttribute(arg0: int): void
                            public setURI(arg0: int, arg1: java.lang.String): void
                            public setLocalName(arg0: int, arg1: java.lang.String): void
                            public setQName(arg0: int, arg1: java.lang.String): void
                            public setType(arg0: int, arg1: java.lang.String): void
                            public setValue(arg0: int, arg1: java.lang.String): void
                        }
                        class xpath extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class wildcardBody extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class simpleType extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class redefine extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class qualification extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class qname extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class particle extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class occurs extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            max: java.math.BigInteger
                            min: java.math.BigInteger
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class notation extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class modelGroupBody extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class includeDecl extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class importDecl extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class identityConstraint extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class group extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class foreignAttributes extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                            makeResult(): com.sun.xml.internal.xsom.impl.ForeignAttributesImpl
                        }
                        class facet extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class ersSet extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class erSet extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class elementDeclBody extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class complexType_complexContent_body extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class complexType$BaseContentSimpleTypeRef implements com.sun.xml.internal.xsom.impl.Ref$SimpleType {
                            getType<T>(...args: any[]): any
                            constructor(arg0: com.sun.xml.internal.xsom.impl.Ref$Type, arg1: com.sun.xml.internal.xsom.impl.parser.state.complexType$1)
                        }
                        class complexType$BaseComplexTypeContentRef implements com.sun.xml.internal.xsom.impl.Ref$ContentType {
                            public getContentType(): com.sun.xml.internal.xsom.XSContentType
                            constructor(arg0: com.sun.xml.internal.xsom.impl.Ref$Type, arg1: com.sun.xml.internal.xsom.impl.parser.state.complexType$1)
                        }
                        class complexType$InheritBaseContentTypeRef implements com.sun.xml.internal.xsom.impl.Ref$ContentType {
                            public getContentType(): com.sun.xml.internal.xsom.XSContentType
                            constructor(arg0: com.sun.xml.internal.xsom.impl.Ref$Type, arg1: com.sun.xml.internal.xsom.XSContentType, arg2: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx, arg3: com.sun.xml.internal.xsom.impl.parser.state.complexType$1)
                        }
                        class complexType$1 {
                        }
                        class complexType extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class attributeUses extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class attributeGroupDecl extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class attributeDeclBody extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class annotation extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                            public makeResult(): com.sun.xml.internal.xsom.impl.AnnotationImpl
                        }
                        class SimpleType_Union extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class SimpleType_Restriction extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class SimpleType_List extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        class Schema extends com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler {
                            protected $runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                            protected $uri: java.lang.String
                            protected $localName: java.lang.String
                            protected $qname: java.lang.String
                            public getRuntime(): com.sun.xml.internal.xsom.impl.parser.state.NGCCRuntime
                            constructor(...args: any[])
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                            public accepted(): boolean
                        }
                        abstract class NGCCInterleaveFilter implements com.sun.xml.internal.xsom.impl.parser.state.NGCCEventSource , com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver {
                            protected _receivers: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver[]
                            protected constructor(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCHandler, arg1: int)
                            protected setHandlers(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver[]): void
                            public replace(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver): int
                            public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public text(arg0: java.lang.String): void
                            protected findReceiverOfElement(arg0: java.lang.String, arg1: java.lang.String): int
                            protected findReceiverOfAttribute(arg0: java.lang.String, arg1: java.lang.String): int
                            protected findReceiverOfText(): int
                            public joinByEnterElement(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                            public joinByLeaveElement(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public joinByEnterAttribute(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public joinByLeaveAttribute(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public joinByText(arg0: com.sun.xml.internal.xsom.impl.parser.state.NGCCEventReceiver, arg1: java.lang.String): void
                            public sendEnterAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendEnterElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                            public sendLeaveAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendLeaveElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                            public sendText(arg0: int, arg1: java.lang.String): void
                        }

                     }
                     interface PatcherManager$Patcher {
                         public run(): void
                     }
                     interface PatcherManager {
                         public addPatcher(arg0: com.sun.xml.internal.xsom.impl.parser.Patch): void
                         public addErrorChecker(arg0: com.sun.xml.internal.xsom.impl.parser.Patch): void
                         public reportError(arg0: java.lang.String, arg1: org.xml.sax.Locator): void
                     }
                     class DelayedRef$Type extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$Type {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         public getType(): com.sun.xml.internal.xsom.XSType
                     }
                     class DelayedRef$SimpleType extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$SimpleType {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         getType<T>(...args: any[]): any
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                     }
                     class DelayedRef$ComplexType extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$ComplexType {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         getType<T>(...args: any[]): any
                     }
                     class DelayedRef$Element extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$Element {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         public get(): com.sun.xml.internal.xsom.XSElementDecl
                         public getTerm(): com.sun.xml.internal.xsom.XSTerm
                     }
                     class DelayedRef$ModelGroup extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$Term {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         public get(): com.sun.xml.internal.xsom.XSModelGroupDecl
                         public getTerm(): com.sun.xml.internal.xsom.XSTerm
                     }
                     class DelayedRef$AttGroup extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$AttGroup {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         public get(): com.sun.xml.internal.xsom.XSAttGroupDecl
                     }
                     class DelayedRef$Attribute extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$Attribute {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         public getAttribute(): com.sun.xml.internal.xsom.XSAttributeDecl
                     }
                     class DelayedRef$IdentityConstraint extends com.sun.xml.internal.xsom.impl.parser.DelayedRef implements com.sun.xml.internal.xsom.impl.Ref$IdentityConstraint {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         public get(): com.sun.xml.internal.xsom.XSIdentityConstraint
                     }
                     abstract class DelayedRef implements com.sun.xml.internal.xsom.impl.parser.Patch {
                         protected schema: com.sun.xml.internal.xsom.XSSchemaSet
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.SchemaImpl, arg3: com.sun.xml.internal.xsom.impl.UName)
                         public run(): void
                         protected resolveReference(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.Object
                         protected getErrorProperty(): java.lang.String
                         protected _get(): java.lang.Object
                         public redefine(arg0: com.sun.xml.internal.xsom.XSDeclaration): void
                     }
                     class SubstGroupBaseTypeRef implements com.sun.xml.internal.xsom.impl.Ref$Type {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.Ref$Element)
                         public getType(): com.sun.xml.internal.xsom.XSType
                     }
                     class SAXParserFactoryAdaptor$SAXParserImpl extends javax.xml.parsers.SAXParser {
                         this$0: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor
                         public getParser(): org.xml.sax.Parser
                         public getXMLReader(): org.xml.sax.XMLReader
                         public isNamespaceAware(): boolean
                         public isValidating(): boolean
                         public setProperty(arg0: java.lang.String, arg1: java.lang.Object): void
                         public getProperty(arg0: java.lang.String): java.lang.Object
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor, arg1: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor$1)
                     }
                     class SAXParserFactoryAdaptor$XMLReaderImpl extends org.xml.sax.helpers.XMLFilterImpl {
                         this$0: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor
                         parse<T>(...args: any[]): any
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor, arg1: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor$1)
                     }
                     class SAXParserFactoryAdaptor$1 {
                     }
                     class SAXParserFactoryAdaptor extends javax.xml.parsers.SAXParserFactory {
                         public constructor(arg0: com.sun.xml.internal.xsom.parser.XMLParser)
                         public newSAXParser(): javax.xml.parsers.SAXParser
                         public setFeature(arg0: java.lang.String, arg1: boolean): void
                         public getFeature(arg0: java.lang.String): boolean
                         static access$200(arg0: com.sun.xml.internal.xsom.impl.parser.SAXParserFactoryAdaptor): com.sun.xml.internal.xsom.parser.XMLParser
                     }
                     class Messages {
                         public static ERR_UNDEFINED_SIMPLETYPE: java.lang.String
                         public static ERR_UNDEFINED_COMPLEXTYPE: java.lang.String
                         public static ERR_UNDEFINED_TYPE: java.lang.String
                         public static ERR_UNDEFINED_ELEMENT: java.lang.String
                         public static ERR_UNDEFINED_MODELGROUP: java.lang.String
                         public static ERR_UNDEFINED_ATTRIBUTE: java.lang.String
                         public static ERR_UNDEFINED_ATTRIBUTEGROUP: java.lang.String
                         public static ERR_UNDEFINED_IDENTITY_CONSTRAINT: java.lang.String
                         public static ERR_UNDEFINED_PREFIX: java.lang.String
                         public static ERR_DOUBLE_DEFINITION: java.lang.String
                         public static ERR_DOUBLE_DEFINITION_ORIGINAL: java.lang.String
                         public static ERR_MISSING_SCHEMALOCATION: java.lang.String
                         public static ERR_ENTITY_RESOLUTION_FAILURE: java.lang.String
                         public static ERR_SIMPLE_CONTENT_EXPECTED: java.lang.String
                         public static JAXP_UNSUPPORTED_PROPERTY: java.lang.String
                         public static JAXP_SUPPORTED_PROPERTY: java.lang.String
                         public constructor()
                         public static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                     }
                     class DefaultAnnotationParser extends com.sun.xml.internal.xsom.parser.AnnotationParser {
                         public static theInstance: com.sun.xml.internal.xsom.parser.AnnotationParser
                         public getContentHandler(arg0: com.sun.xml.internal.xsom.parser.AnnotationContext, arg1: java.lang.String, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): org.xml.sax.ContentHandler
                         public getResult(arg0: java.lang.Object): java.lang.Object
                     }
                     class BaseContentRef$1 implements com.sun.xml.internal.xsom.impl.parser.Patch {
                         val$$runtime: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx
                         this$0: com.sun.xml.internal.xsom.impl.parser.BaseContentRef
                         constructor(arg0: com.sun.xml.internal.xsom.impl.parser.BaseContentRef, arg1: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx)
                         public run(): void
                     }
                     class BaseContentRef implements com.sun.xml.internal.xsom.impl.Ref$ContentType , com.sun.xml.internal.xsom.impl.parser.Patch {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.NGCCRuntimeEx, arg1: com.sun.xml.internal.xsom.impl.Ref$Type)
                         public getContentType(): com.sun.xml.internal.xsom.XSContentType
                         public run(): void
                         static access$000(arg0: com.sun.xml.internal.xsom.impl.parser.BaseContentRef): com.sun.xml.internal.xsom.impl.Ref$Type
                         static access$100(arg0: com.sun.xml.internal.xsom.impl.parser.BaseContentRef): org.xml.sax.Locator
                     }

                  }
                  class SchemaSetImpl$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSElementDecl, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$2 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSType, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$3 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSAttributeDecl, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$4 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSAttGroupDecl, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$5 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSModelGroupDecl, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$6 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSSimpleType, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$7 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSComplexType, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$8 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSNotation, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$9 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSIdentityConstraint, com.sun.xml.internal.xsom.XSSchema> {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: java.util.Iterator)
                      apply<T>(...args: any[]): any
                  }
                  class SchemaSetImpl$AnySimpleType extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSRestrictionSimpleType , com.sun.xml.internal.xsom.impl.Ref$SimpleType {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl)
                      getOwnerSchema<T>(...args: any[]): any
                      public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public asComplexType(): com.sun.xml.internal.xsom.XSComplexType
                      public isDerivedFrom(arg0: com.sun.xml.internal.xsom.XSType): boolean
                      public isSimpleType(): boolean
                      public isComplexType(): boolean
                      public asEmpty(): com.sun.xml.internal.xsom.XSContentType
                      public asParticle(): com.sun.xml.internal.xsom.XSParticle
                      public getBaseType(): com.sun.xml.internal.xsom.XSType
                      public getSimpleBaseType(): com.sun.xml.internal.xsom.XSSimpleType
                      public getDerivationMethod(): int
                      public iterateDeclaredFacets(): java.util.Iterator<com.sun.xml.internal.xsom.XSFacet>
                      getDeclaredFacets<T>(...args: any[]): any
                      visit<T>(...args: any[]): any
                      apply<T>(...args: any[]): any
                      public getVariety(): com.sun.xml.internal.xsom.XSVariety
                      public getPrimitiveType(): com.sun.xml.internal.xsom.XSSimpleType
                      public isPrimitive(): boolean
                      public getBaseListType(): com.sun.xml.internal.xsom.XSListSimpleType
                      public getBaseUnionType(): com.sun.xml.internal.xsom.XSUnionSimpleType
                      public getFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                      public getFacets(arg0: java.lang.String): java.util.List<com.sun.xml.internal.xsom.XSFacet>
                      public getDeclaredFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                      public isRestriction(): boolean
                      public isList(): boolean
                      public isUnion(): boolean
                      public isFinal(arg0: com.sun.xml.internal.xsom.XSVariety): boolean
                      public asRestriction(): com.sun.xml.internal.xsom.XSRestrictionSimpleType
                      public asList(): com.sun.xml.internal.xsom.XSListSimpleType
                      public asUnion(): com.sun.xml.internal.xsom.XSUnionSimpleType
                      getType<T>(...args: any[]): any
                      getRedefinedBy<T>(...args: any[]): any
                      public getRedefinedCount(): int
                      public listSubstitutables(): com.sun.xml.internal.xsom.XSType[]
                  }
                  class SchemaSetImpl$AnyType extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSComplexType , com.sun.xml.internal.xsom.impl.Ref$Type {
                      this$0: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl)
                      getOwnerSchema<T>(...args: any[]): any
                      public isAbstract(): boolean
                      public getAttributeWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public getAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                      public iterateAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeUse>
                      public getDeclaredAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                      public iterateDeclaredAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeUse>
                      public iterateAttGroups(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public getAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.XSAttributeUse>
                      public getDeclaredAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.XSAttributeUse>
                      public getAttGroups(): java.util.Collection<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public isFinal(arg0: int): boolean
                      public isSubstitutionProhibited(arg0: int): boolean
                      public isMixed(): boolean
                      public getContentType(): com.sun.xml.internal.xsom.XSContentType
                      public getExplicitContent(): com.sun.xml.internal.xsom.XSContentType
                      public getBaseType(): com.sun.xml.internal.xsom.XSType
                      public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public asComplexType(): com.sun.xml.internal.xsom.XSComplexType
                      public isDerivedFrom(arg0: com.sun.xml.internal.xsom.XSType): boolean
                      public isSimpleType(): boolean
                      public isComplexType(): boolean
                      public asEmpty(): com.sun.xml.internal.xsom.XSContentType
                      public getDerivationMethod(): int
                      public getScope(): com.sun.xml.internal.xsom.XSElementDecl
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSFunction<T>): T
                      public getType(): com.sun.xml.internal.xsom.XSType
                      getRedefinedBy<T>(...args: any[]): any
                      public getRedefinedCount(): int
                      public listSubstitutables(): com.sun.xml.internal.xsom.XSType[]
                      public getSubtypes(): java.util.List<com.sun.xml.internal.xsom.XSComplexType>
                      public getElementDecls(): java.util.List<com.sun.xml.internal.xsom.XSElementDecl>
                  }
                  class SchemaSetImpl implements com.sun.xml.internal.xsom.XSSchemaSet {
                      public empty: com.sun.xml.internal.xsom.impl.EmptyImpl
                      public anySimpleType: com.sun.xml.internal.xsom.impl.SchemaSetImpl$AnySimpleType
                      public anyType: com.sun.xml.internal.xsom.impl.SchemaSetImpl$AnyType
                      public constructor()
                      public createSchema(arg0: java.lang.String, arg1: org.xml.sax.Locator): com.sun.xml.internal.xsom.impl.SchemaImpl
                      public getSchemaSize(): int
                      getSchema<T>(...args: any[]): any
                      public iterateSchema(): java.util.Iterator<com.sun.xml.internal.xsom.XSSchema>
                      public getSchemas(): java.util.Collection<com.sun.xml.internal.xsom.XSSchema>
                      public getType(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSType
                      public getSimpleType(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSSimpleType
                      public getElementDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSElementDecl
                      public getAttributeDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeDecl
                      public getModelGroupDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSModelGroupDecl
                      public getAttGroupDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttGroupDecl
                      public getComplexType(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSComplexType
                      public getIdentityConstraint(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSIdentityConstraint
                      public iterateElementDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSElementDecl>
                      public iterateTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSType>
                      public iterateAttributeDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeDecl>
                      public iterateAttGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public iterateModelGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSModelGroupDecl>
                      public iterateSimpleTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSSimpleType>
                      public iterateComplexTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSComplexType>
                      public iterateNotations(): java.util.Iterator<com.sun.xml.internal.xsom.XSNotation>
                      public iterateIdentityConstraints(): java.util.Iterator<com.sun.xml.internal.xsom.XSIdentityConstraint>
                      public select(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): java.util.Collection<com.sun.xml.internal.xsom.XSComponent>
                      public selectSingle(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): com.sun.xml.internal.xsom.XSComponent
                      public getEmpty(): com.sun.xml.internal.xsom.XSContentType
                      public getAnySimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public getAnyType(): com.sun.xml.internal.xsom.XSComplexType
                  }
                  class SchemaImpl implements com.sun.xml.internal.xsom.XSSchema {
                      protected parent: com.sun.xml.internal.xsom.impl.SchemaSetImpl
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.SchemaSetImpl, arg1: org.xml.sax.Locator, arg2: java.lang.String)
                      public getSourceDocument(): com.sun.xml.internal.xsom.parser.SchemaDocument
                      getRoot<T>(...args: any[]): any
                      public getTargetNamespace(): java.lang.String
                      public getOwnerSchema(): com.sun.xml.internal.xsom.XSSchema
                      public setAnnotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                      getAnnotation<T>(...args: any[]): any
                      public getLocator(): org.xml.sax.Locator
                      public addAttributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                      public getAttributeDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSAttributeDecl>
                      public getAttributeDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSAttributeDecl
                      public iterateAttributeDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeDecl>
                      public addElementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                      public getElementDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSElementDecl>
                      public getElementDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSElementDecl
                      public iterateElementDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSElementDecl>
                      public addAttGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl, arg1: boolean): void
                      public getAttGroupDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public getAttGroupDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSAttGroupDecl
                      public iterateAttGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public addNotation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                      public getNotations(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSNotation>
                      public getNotation(arg0: java.lang.String): com.sun.xml.internal.xsom.XSNotation
                      public iterateNotations(): java.util.Iterator<com.sun.xml.internal.xsom.XSNotation>
                      public addModelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl, arg1: boolean): void
                      public getModelGroupDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSModelGroupDecl>
                      public getModelGroupDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSModelGroupDecl
                      public iterateModelGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSModelGroupDecl>
                      protected addIdentityConstraint(arg0: com.sun.xml.internal.xsom.impl.IdentityConstraintImpl): void
                      public getIdentityConstraints(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSIdentityConstraint>
                      public getIdentityConstraint(arg0: java.lang.String): com.sun.xml.internal.xsom.XSIdentityConstraint
                      public addSimpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType, arg1: boolean): void
                      public getSimpleTypes(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSSimpleType>
                      public getSimpleType(arg0: java.lang.String): com.sun.xml.internal.xsom.XSSimpleType
                      public iterateSimpleTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSSimpleType>
                      public addComplexType(arg0: com.sun.xml.internal.xsom.XSComplexType, arg1: boolean): void
                      public getComplexTypes(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSComplexType>
                      public getComplexType(arg0: java.lang.String): com.sun.xml.internal.xsom.XSComplexType
                      public iterateComplexTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSComplexType>
                      public getTypes(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSType>
                      public getType(arg0: java.lang.String): com.sun.xml.internal.xsom.XSType
                      public iterateTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSType>
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSFunction): java.lang.Object
                      public addForeignAttributes(arg0: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl): void
                      public getForeignAttributes(): java.util.List<com.sun.xml.internal.xsom.ForeignAttributes>
                      public getForeignAttribute(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                      public select(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): java.util.Collection<com.sun.xml.internal.xsom.XSComponent>
                      public selectSingle(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): com.sun.xml.internal.xsom.XSComponent
                  }
                  class EmptyImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.impl.ContentTypeImpl {
                      public constructor()
                      public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public asParticle(): com.sun.xml.internal.xsom.XSParticle
                      public asEmpty(): com.sun.xml.internal.xsom.XSContentType
                      apply<T>(...args: any[]): any
                      visit<T>(...args: any[]): any
                      public getContentType(): com.sun.xml.internal.xsom.XSContentType
                  }
                  abstract class ComponentImpl implements com.sun.xml.internal.xsom.XSComponent {
                      protected ownerDocument: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl
                      protected constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl)
                      getOwnerSchema<T>(...args: any[]): any
                      public getRoot(): com.sun.xml.internal.xsom.XSSchemaSet
                      public getSourceDocument(): com.sun.xml.internal.xsom.parser.SchemaDocument
                      getAnnotation<T>(...args: any[]): any
                      public getLocator(): org.xml.sax.Locator
                      public getForeignAttributes(): java.util.List<com.sun.xml.internal.xsom.impl.ForeignAttributesImpl>
                      public getForeignAttribute(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                      public select(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): java.util.Collection<com.sun.xml.internal.xsom.XSComponent>
                      public selectSingle(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): com.sun.xml.internal.xsom.XSComponent
                      toString<T>(...args: any[]): any
                  }
                  interface ContentTypeImpl extends com.sun.xml.internal.xsom.impl.Ref$ContentType , com.sun.xml.internal.xsom.XSContentType {
                  }
                  interface Ref$Term {
                      public getTerm(): com.sun.xml.internal.xsom.XSTerm
                  }
                  interface Ref$Type {
                      public getType(): com.sun.xml.internal.xsom.XSType
                  }
                  interface Ref$ContentType {
                      public getContentType(): com.sun.xml.internal.xsom.XSContentType
                  }
                  interface Ref$SimpleType extends com.sun.xml.internal.xsom.impl.Ref$Type {
                      getType<T>(...args: any[]): any
                  }
                  interface Ref$ComplexType extends com.sun.xml.internal.xsom.impl.Ref$Type {
                      getType<T>(...args: any[]): any
                  }
                  interface Ref$Attribute {
                      public getAttribute(): com.sun.xml.internal.xsom.XSAttributeDecl
                  }
                  interface Ref$AttGroup {
                      public get(): com.sun.xml.internal.xsom.XSAttGroupDecl
                  }
                  interface Ref$Element extends com.sun.xml.internal.xsom.impl.Ref$Term {
                      public get(): com.sun.xml.internal.xsom.XSElementDecl
                  }
                  interface Ref$IdentityConstraint {
                      public get(): com.sun.xml.internal.xsom.XSIdentityConstraint
                  }
                  abstract class Ref {
                      public constructor()
                  }
                  abstract class DeclarationImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSDeclaration {
                      constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: java.lang.String, arg6: boolean)
                      public getName(): java.lang.String
                      public getTargetNamespace(): java.lang.String
                      public isAnonymous(): boolean
                      public isGlobal(): boolean
                      public isLocal(): boolean
                  }
                  class UName$1 implements java.util.Comparator {
                      constructor()
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class UName {
                      public static comparator: java.util.Comparator
                      constructor(...args: any[])
                      public getName(): java.lang.String
                      public getNamespaceURI(): java.lang.String
                      public getQualifiedName(): java.lang.String
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                      static access$000(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.String
                      static access$100(arg0: com.sun.xml.internal.xsom.impl.UName): java.lang.String
                  }
                  class ForeignAttributesImpl extends org.xml.sax.helpers.AttributesImpl implements com.sun.xml.internal.xsom.ForeignAttributes {
                      next: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl
                      public constructor(arg0: org.relaxng.datatype.ValidationContext, arg1: org.xml.sax.Locator, arg2: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl)
                      public getContext(): org.relaxng.datatype.ValidationContext
                      public getLocator(): org.xml.sax.Locator
                  }
                  class IdentityConstraintImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSIdentityConstraint , com.sun.xml.internal.xsom.impl.Ref$IdentityConstraint {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: short, arg5: java.lang.String, arg6: com.sun.xml.internal.xsom.impl.XPathImpl, arg7: java.util.List<com.sun.xml.internal.xsom.impl.XPathImpl>, arg8: com.sun.xml.internal.xsom.impl.Ref$IdentityConstraint)
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSFunction<T>): T
                      public setParent(arg0: com.sun.xml.internal.xsom.impl.ElementDecl): void
                      public getParent(): com.sun.xml.internal.xsom.XSElementDecl
                      public getName(): java.lang.String
                      public getTargetNamespace(): java.lang.String
                      public getCategory(): short
                      public getSelector(): com.sun.xml.internal.xsom.XSXPath
                      public getFields(): java.util.List<com.sun.xml.internal.xsom.XSXPath>
                      public getReferencedKey(): com.sun.xml.internal.xsom.XSIdentityConstraint
                      public get(): com.sun.xml.internal.xsom.XSIdentityConstraint
                  }
                  class AnnotationImpl$LocatorImplUnmodifiable extends org.xml.sax.helpers.LocatorImpl {
                      public setColumnNumber(arg0: int): void
                      public setPublicId(arg0: java.lang.String): void
                      public setSystemId(arg0: java.lang.String): void
                      public setLineNumber(arg0: int): void
                      constructor(arg0: com.sun.xml.internal.xsom.impl.AnnotationImpl$1)
                  }
                  class AnnotationImpl$1 {
                  }
                  class AnnotationImpl implements com.sun.xml.internal.xsom.XSAnnotation {
                      public getAnnotation(): java.lang.Object
                      public setAnnotation(arg0: java.lang.Object): java.lang.Object
                      public getLocator(): org.xml.sax.Locator
                      constructor(...args: any[])
                  }
                  class WildcardImpl$Any extends com.sun.xml.internal.xsom.impl.WildcardImpl implements com.sun.xml.internal.xsom.XSWildcard$Any {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: int)
                      public acceptsNamespace(arg0: java.lang.String): boolean
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardFunction): java.lang.Object
                  }
                  class WildcardImpl$Other extends com.sun.xml.internal.xsom.impl.WildcardImpl implements com.sun.xml.internal.xsom.XSWildcard$Other {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: int)
                      public getOtherNamespace(): java.lang.String
                      public acceptsNamespace(arg0: java.lang.String): boolean
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardFunction): java.lang.Object
                      static access$100(arg0: com.sun.xml.internal.xsom.impl.WildcardImpl$Other): java.lang.String
                  }
                  class WildcardImpl$Finite extends com.sun.xml.internal.xsom.impl.WildcardImpl implements com.sun.xml.internal.xsom.XSWildcard$Union {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.util.Set<java.lang.String>, arg5: int)
                      public iterateNamespaces(): java.util.Iterator<java.lang.String>
                      public getNamespaces(): java.util.Collection<java.lang.String>
                      public acceptsNamespace(arg0: java.lang.String): boolean
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardFunction): java.lang.Object
                      static access$000(arg0: com.sun.xml.internal.xsom.impl.WildcardImpl$Finite): java.util.Set
                  }
                  abstract class WildcardImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSWildcard , com.sun.xml.internal.xsom.impl.Ref$Term {
                      protected constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: int)
                      public getMode(): int
                      public union(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.WildcardImpl): com.sun.xml.internal.xsom.impl.WildcardImpl
                      visit<T>(...args: any[]): any
                      apply<T>(...args: any[]): any
                      public isWildcard(): boolean
                      public isModelGroupDecl(): boolean
                      public isModelGroup(): boolean
                      public isElementDecl(): boolean
                      public asWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public asModelGroupDecl(): com.sun.xml.internal.xsom.XSModelGroupDecl
                      public asModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
                      public asElementDecl(): com.sun.xml.internal.xsom.XSElementDecl
                      public getTerm(): com.sun.xml.internal.xsom.XSTerm
                  }
                  class XPathImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSXPath {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: com.sun.xml.internal.xsom.XmlString)
                      public setParent(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                      public getParent(): com.sun.xml.internal.xsom.XSIdentityConstraint
                      public getXPath(): com.sun.xml.internal.xsom.XmlString
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSFunction<T>): T
                  }
                  class ElementDecl extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSElementDecl , com.sun.xml.internal.xsom.impl.Ref$Term {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.PatcherManager, arg1: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg2: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg3: org.xml.sax.Locator, arg4: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg5: java.lang.String, arg6: java.lang.String, arg7: boolean, arg8: com.sun.xml.internal.xsom.XmlString, arg9: com.sun.xml.internal.xsom.XmlString, arg10: boolean, arg11: boolean, arg12: java.lang.Boolean, arg13: com.sun.xml.internal.xsom.impl.Ref$Type, arg14: com.sun.xml.internal.xsom.impl.Ref$Element, arg15: int, arg16: int, arg17: java.util.List<com.sun.xml.internal.xsom.impl.IdentityConstraintImpl>)
                      public getDefaultValue(): com.sun.xml.internal.xsom.XmlString
                      public getFixedValue(): com.sun.xml.internal.xsom.XmlString
                      public isNillable(): boolean
                      public isAbstract(): boolean
                      public getType(): com.sun.xml.internal.xsom.XSType
                      public getSubstAffiliation(): com.sun.xml.internal.xsom.XSElementDecl
                      public isSubstitutionDisallowed(arg0: int): boolean
                      public isSubstitutionExcluded(arg0: int): boolean
                      public getIdentityConstraints(): java.util.List<com.sun.xml.internal.xsom.XSIdentityConstraint>
                      public getForm(): java.lang.Boolean
                      public listSubstitutables(): com.sun.xml.internal.xsom.XSElementDecl[]
                      public getSubstitutables(): java.util.Set<com.sun.xml.internal.xsom.XSElementDecl>
                      protected addSubstitutable(arg0: com.sun.xml.internal.xsom.impl.ElementDecl): void
                      public updateSubstitutabilityMap(): void
                      public canBeSubstitutedBy(arg0: com.sun.xml.internal.xsom.XSElementDecl): boolean
                      public isWildcard(): boolean
                      public isModelGroupDecl(): boolean
                      public isModelGroup(): boolean
                      public isElementDecl(): boolean
                      public asWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public asModelGroupDecl(): com.sun.xml.internal.xsom.XSModelGroupDecl
                      public asModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
                      public asElementDecl(): com.sun.xml.internal.xsom.XSElementDecl
                      visit<T>(...args: any[]): any
                      apply<T>(...args: any[]): any
                      public getTerm(): com.sun.xml.internal.xsom.XSTerm
                      public isAnonymous(): boolean
                      public getTargetNamespace(): java.lang.String
                      public getName(): java.lang.String
                  }
                  namespace util {
                     class Uri {
                         public constructor()
                         public static isValid(arg0: java.lang.String): boolean
                         public static escapeDisallowedChars(arg0: java.lang.String): java.lang.String
                         public static resolve(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                         public static hasFragmentId(arg0: java.lang.String): boolean
                         public static isAbsolute(arg0: java.lang.String): boolean
                     }
                     class SchemaWriter$1 implements com.sun.xml.internal.xsom.visitor.XSTermVisitor {
                         val$extraAtts: java.lang.String
                         this$0: com.sun.xml.internal.xsom.impl.util.SchemaWriter
                         constructor(arg0: com.sun.xml.internal.xsom.impl.util.SchemaWriter, arg1: java.lang.String)
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                     }
                     class SchemaWriter$2 implements com.sun.xml.internal.xsom.visitor.XSWildcardFunction<java.lang.String> {
                         constructor()
                         any<T>(...args: any[]): any
                         other<T>(...args: any[]): any
                         union<T>(...args: any[]): any
                     }
                     class SchemaWriter implements com.sun.xml.internal.xsom.visitor.XSVisitor , com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor {
                         public constructor(arg0: java.io.Writer)
                         public checkError(): boolean
                         public visit(arg0: com.sun.xml.internal.xsom.XSSchemaSet): void
                         public schema(arg0: com.sun.xml.internal.xsom.XSSchema): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public dumpRef(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public listSimpleType(arg0: com.sun.xml.internal.xsom.XSListSimpleType): void
                         public unionSimpleType(arg0: com.sun.xml.internal.xsom.XSUnionSimpleType): void
                         public restrictionSimpleType(arg0: com.sun.xml.internal.xsom.XSRestrictionSimpleType): void
                         public facet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                         public notation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                         public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                         public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                         static access$000(arg0: com.sun.xml.internal.xsom.impl.util.SchemaWriter, arg1: com.sun.xml.internal.xsom.XSElementDecl, arg2: java.lang.String): void
                         static access$100(arg0: com.sun.xml.internal.xsom.impl.util.SchemaWriter, arg1: java.lang.String): void
                         static access$200(arg0: com.sun.xml.internal.xsom.impl.util.SchemaWriter, arg1: com.sun.xml.internal.xsom.XSModelGroup, arg2: java.lang.String): void
                         static access$300(arg0: com.sun.xml.internal.xsom.impl.util.SchemaWriter, arg1: java.lang.String, arg2: com.sun.xml.internal.xsom.XSWildcard, arg3: java.lang.String): void
                     }
                     class SchemaTreeTraverser$SchemaTreeModel extends javax.swing.tree.DefaultTreeModel {
                         public static getInstance(): com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser$SchemaTreeModel
                         public addSchemaNode(arg0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser$SchemaTreeNode): void
                     }
                     class SchemaTreeTraverser$SchemaTreeNode extends javax.swing.tree.DefaultMutableTreeNode {
                         public constructor(arg0: java.lang.String, arg1: org.xml.sax.Locator)
                         public getCaption(): java.lang.String
                         public getFileName(): java.lang.String
                         public setFileName(arg0: java.lang.String): void
                         public getLineNumber(): int
                         public setLineNumber(arg0: int): void
                     }
                     class SchemaTreeTraverser$SchemaRootNode extends com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser$SchemaTreeNode {
                         public constructor()
                     }
                     class SchemaTreeTraverser$SchemaTreeCellRenderer extends javax.swing.JPanel implements javax.swing.tree.TreeCellRenderer {
                         protected iconLabel: javax.swing.JLabel
                         protected nameLabel: javax.swing.JLabel
                         public selectedBackground: java.awt.Color
                         public selectedForeground: java.awt.Color
                         public nameFont: java.awt.Font
                         public constructor()
                         public paintComponent(arg0: java.awt.Graphics): void
                         protected setValues(arg0: javax.swing.Icon, arg1: java.lang.String, arg2: boolean): void
                         public getTreeCellRendererComponent(arg0: javax.swing.JTree, arg1: java.lang.Object, arg2: boolean, arg3: boolean, arg4: boolean, arg5: int, arg6: boolean): java.awt.Component
                     }
                     class SchemaTreeTraverser$1 implements com.sun.xml.internal.xsom.visitor.XSTermVisitor {
                         val$extraAtts: java.lang.String
                         this$0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser
                         constructor(arg0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser, arg1: java.lang.String)
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                     }
                     class SchemaTreeTraverser implements com.sun.xml.internal.xsom.visitor.XSVisitor , com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor {
                         public constructor()
                         public getModel(): com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser$SchemaTreeModel
                         public visit(arg0: com.sun.xml.internal.xsom.XSSchemaSet): void
                         public schema(arg0: com.sun.xml.internal.xsom.XSSchema): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public dumpRef(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public listSimpleType(arg0: com.sun.xml.internal.xsom.XSListSimpleType): void
                         public unionSimpleType(arg0: com.sun.xml.internal.xsom.XSUnionSimpleType): void
                         public restrictionSimpleType(arg0: com.sun.xml.internal.xsom.XSRestrictionSimpleType): void
                         public facet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                         public notation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                         public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                         public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): void
                         static access$000(arg0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser, arg1: com.sun.xml.internal.xsom.XSElementDecl, arg2: java.lang.String): void
                         static access$100(arg0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser): com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser$SchemaTreeNode
                         static access$200(arg0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser, arg1: com.sun.xml.internal.xsom.XSModelGroup, arg2: java.lang.String): void
                         static access$300(arg0: com.sun.xml.internal.xsom.impl.util.SchemaTreeTraverser, arg1: com.sun.xml.internal.xsom.XSWildcard, arg2: java.lang.String): void
                     }
                     class ResourceEntityResolver implements org.xml.sax.EntityResolver {
                         public constructor(arg0: java.lang.Class)
                         public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
                     }
                     class DraconianErrorHandler implements org.xml.sax.ErrorHandler {
                         public constructor()
                         public error(arg0: org.xml.sax.SAXParseException): void
                         public fatalError(arg0: org.xml.sax.SAXParseException): void
                         public warning(arg0: org.xml.sax.SAXParseException): void
                     }

                  }
                  namespace scd {
                     class TokenMgrError extends java.lang.Error {
                         static LEXICAL_ERROR: int
                         static STATIC_LEXER_ERROR: int
                         static INVALID_LEXICAL_STATE: int
                         static LOOP_DETECTED: int
                         errorCode: int
                         protected static addEscapes(arg0: java.lang.String): java.lang.String
                         protected static LexicalError(arg0: boolean, arg1: int, arg2: int, arg3: int, arg4: java.lang.String, arg5: char): java.lang.String
                         public getMessage(): java.lang.String
                         constructor(...args: any[])
                     }
                     class Token {
                         public kind: int
                         public beginLine: int
                         public beginColumn: int
                         public endLine: int
                         public endColumn: int
                         public image: java.lang.String
                         public next: com.sun.xml.internal.xsom.impl.scd.Token
                         public specialToken: com.sun.xml.internal.xsom.impl.scd.Token
                         public constructor()
                         toString<T>(...args: any[]): any
                         public static newToken(arg0: int): com.sun.xml.internal.xsom.impl.scd.Token
                     }
                     class Step$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<T, com.sun.xml.internal.xsom.XSComponent> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.Step
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Step, arg1: java.util.Iterator)
                         apply<T>(...args: any[]): any
                     }
                     class Step$Any extends com.sun.xml.internal.xsom.impl.scd.Step<com.sun.xml.internal.xsom.XSComponent> {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSComponent>)
                         protected filter(arg0: java.util.Iterator<com.sun.xml.internal.xsom.XSComponent>): java.util.Iterator<com.sun.xml.internal.xsom.XSComponent>
                     }
                     class Step$Filtered$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Filter<T> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.Step$Filtered
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Step$Filtered, arg1: java.util.Iterator)
                         matches<T>(...args: any[]): any
                     }
                     abstract class XSComponent> extends com.sun.xml.internal.xsom.impl.scd.Step<T> {
                         protected constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis<T>)
                         protected filter(arg0: java.util.Iterator<T>): java.util.Iterator<T>
                         protected match(arg0: T): boolean
                     }
                     class Step$Named extends com.sun.xml.internal.xsom.impl.scd.Step$Filtered<com.sun.xml.internal.xsom.XSDeclaration> {
                         constructor(...args: any[])
                         match<T>(...args: any[]): any
                     }
                     class Step$AnonymousType extends com.sun.xml.internal.xsom.impl.scd.Step$Filtered<com.sun.xml.internal.xsom.XSType> {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSType>)
                         match<T>(...args: any[]): any
                     }
                     class Step$Facet extends com.sun.xml.internal.xsom.impl.scd.Step$Filtered<com.sun.xml.internal.xsom.XSFacet> {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSFacet>, arg1: java.lang.String)
                         match<T>(...args: any[]): any
                     }
                     class Step$Schema extends com.sun.xml.internal.xsom.impl.scd.Step$Filtered<com.sun.xml.internal.xsom.XSSchema> {
                         public constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSchema>, arg1: java.lang.String)
                         match<T>(...args: any[]): any
                     }
                     abstract class XSComponent> {
                         public axis: com.sun.xml.internal.xsom.impl.scd.Axis<T>
                         predicate: int
                         protected constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis<T>)
                         protected filter(arg0: java.util.Iterator<T>): java.util.Iterator<T>
                         public evaluate(arg0: java.util.Iterator<com.sun.xml.internal.xsom.XSComponent>): java.util.Iterator<T>
                     }
                     class Axis$1 implements com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSchema> {
                         constructor()
                         iterator<T>(...args: any[]): any
                         public isModelGroup(): boolean
                         toString<T>(...args: any[]): any
                     }
                     class Axis$2 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSComponent> {
                         constructor()
                         elementDecl<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$3$Visitor$Recursion extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSComponent, com.sun.xml.internal.xsom.XSComponent> {
                         this$1: com.sun.xml.internal.xsom.impl.scd.Axis$3$Visitor
                         public constructor(arg0: java.util.Iterator<com.sun.xml.internal.xsom.XSComponent>)
                         apply<T>(...args: any[]): any
                     }
                     class Axis$3$Visitor extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSComponent> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.Axis$3
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis$3)
                         schema<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                         simpleType<T>(...args: any[]): any
                         complexType<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                         attGroupDecl<T>(...args: any[]): any
                         attributeUse<T>(...args: any[]): any
                         attributeDecl<T>(...args: any[]): any
                     }
                     class Axis$3 implements com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSComponent> {
                         constructor()
                         iterator<T>(...args: any[]): any
                         public isModelGroup(): boolean
                         toString<T>(...args: any[]): any
                     }
                     class Axis$4$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Adapter<com.sun.xml.internal.xsom.XSSchema, com.sun.xml.internal.xsom.XSComponent> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.Axis$4
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis$4, arg1: java.util.Iterator)
                         filter<T>(...args: any[]): any
                     }
                     class Axis$4 implements com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSchema> {
                         constructor()
                         iterator<T>(...args: any[]): any
                         public isModelGroup(): boolean
                         toString<T>(...args: any[]): any
                     }
                     class Axis$5 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSElementDecl> {
                         constructor()
                         elementDecl<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$6$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Adapter<com.sun.xml.internal.xsom.XSAttributeDecl, com.sun.xml.internal.xsom.XSAttributeUse> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.Axis$6
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.Axis$6, arg1: java.util.Iterator)
                         filter<T>(...args: any[]): any
                     }
                     class Axis$6 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSAttributeDecl> {
                         constructor()
                         complexType<T>(...args: any[]): any
                         attGroupDecl<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$7 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSElementDecl> {
                         constructor()
                         particle<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         public getName(): java.lang.String
                         toString<T>(...args: any[]): any
                     }
                     class Axis$8 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSType> {
                         constructor()
                         schema<T>(...args: any[]): any
                         attributeDecl<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$9 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSType> {
                         constructor()
                         simpleType<T>(...args: any[]): any
                         complexType<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$10 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSSimpleType> {
                         constructor()
                         simpleType<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$11 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSSimpleType> {
                         constructor()
                         simpleType<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$12 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSSimpleType> {
                         constructor()
                         simpleType<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$13 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSComponent> {
                         constructor()
                         complexType<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$14 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSAttGroupDecl> {
                         constructor()
                         schema<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$15 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSModelGroupDecl> {
                         constructor()
                         schema<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$16 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSIdentityConstraint> {
                         constructor()
                         elementDecl<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$17 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSIdentityConstraint> {
                         constructor()
                         identityConstraint<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$18 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSNotation> {
                         constructor()
                         schema<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$19 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSWildcard> {
                         constructor()
                         particle<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$20 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSWildcard> {
                         constructor()
                         complexType<T>(...args: any[]): any
                         attGroupDecl<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$21 extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSFacet> {
                         constructor()
                         simpleType<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class Axis$ModelGroupAxis extends com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl<com.sun.xml.internal.xsom.XSModelGroup> {
                         constructor(arg0: com.sun.xml.internal.xsom.XSModelGroup$Compositor)
                         public isModelGroup(): boolean
                         particle<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): java.util.Iterator
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): java.util.Iterator
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): java.util.Iterator
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): java.util.Iterator
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): java.util.Iterator
                         public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): java.util.Iterator
                         public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): java.util.Iterator
                         public notation(arg0: com.sun.xml.internal.xsom.XSNotation): java.util.Iterator
                         public facet(arg0: com.sun.xml.internal.xsom.XSFacet): java.util.Iterator
                         public schema(arg0: com.sun.xml.internal.xsom.XSSchema): java.util.Iterator
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): java.util.Iterator
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): java.util.Iterator
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): java.util.Iterator
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): java.util.Iterator
                         public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): java.util.Iterator
                         iterator<T>(...args: any[]): any
                         public getName(): java.lang.String
                     }
                     interface XSComponent> {
                         public static ROOT: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSchema>
                         public static INTERMEDIATE_SKIP: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSComponent>
                         public static DESCENDANTS: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSComponent>
                         public static X_SCHEMA: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSchema>
                         public static SUBSTITUTION_GROUP: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSElementDecl>
                         public static ATTRIBUTE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSAttributeDecl>
                         public static ELEMENT: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSElementDecl>
                         public static TYPE_DEFINITION: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSType>
                         public static BASETYPE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSType>
                         public static PRIMITIVE_TYPE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSimpleType>
                         public static ITEM_TYPE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSimpleType>
                         public static MEMBER_TYPE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSSimpleType>
                         public static SCOPE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSComponent>
                         public static ATTRIBUTE_GROUP: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSAttGroupDecl>
                         public static MODEL_GROUP_DECL: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSModelGroupDecl>
                         public static IDENTITY_CONSTRAINT: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSIdentityConstraint>
                         public static REFERENCED_KEY: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSIdentityConstraint>
                         public static NOTATION: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSNotation>
                         public static WILDCARD: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSWildcard>
                         public static ATTRIBUTE_WILDCARD: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSWildcard>
                         public static FACET: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSFacet>
                         public static MODELGROUP_ALL: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSModelGroup>
                         public static MODELGROUP_CHOICE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSModelGroup>
                         public static MODELGROUP_SEQUENCE: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSModelGroup>
                         public static MODELGROUP_ANY: com.sun.xml.internal.xsom.impl.scd.Axis<com.sun.xml.internal.xsom.XSModelGroup>
                         iterator<T>(...args: any[]): any
                         public isModelGroup(): boolean
                     }
                     class SimpleCharStream {
                         public static staticFlag: boolean
                         bufsize: int
                         available: int
                         tokenBegin: int
                         public bufpos: int
                         protected bufline: int[]
                         protected bufcolumn: int[]
                         protected column: int
                         protected line: int
                         protected prevCharIsCR: boolean
                         protected prevCharIsLF: boolean
                         protected inputStream: java.io.Reader
                         protected buffer: char[]
                         protected maxNextCharInd: int
                         protected inBuf: int
                         protected tabSize: int
                         protected setTabSize(arg0: int): void
                         protected getTabSize(arg0: int): int
                         protected ExpandBuff(arg0: boolean): void
                         protected FillBuff(): void
                         public BeginToken(): char
                         protected UpdateLineColumn(arg0: char): void
                         public readChar(): char
                         public getColumn(): int
                         public getLine(): int
                         public getEndColumn(): int
                         public getEndLine(): int
                         public getBeginColumn(): int
                         public getBeginLine(): int
                         public backup(arg0: int): void
                         constructor(...args: any[])
                         ReInit<T>(...args: any[]): any
                         public GetImage(): java.lang.String
                         public GetSuffix(arg0: int): char[]
                         public Done(): void
                         public adjustBeginLineColumn(arg0: int, arg1: int): void
                     }
                     class SCDParserTokenManager implements com.sun.xml.internal.xsom.impl.scd.SCDParserConstants {
                         public debugStream: java.io.PrintStream
                         static jjbitVec0: long[]
                         static jjbitVec2: long[]
                         static jjbitVec3: long[]
                         static jjbitVec4: long[]
                         static jjbitVec5: long[]
                         static jjbitVec6: long[]
                         static jjbitVec7: long[]
                         static jjbitVec8: long[]
                         static jjbitVec9: long[]
                         static jjbitVec10: long[]
                         static jjbitVec11: long[]
                         static jjbitVec12: long[]
                         static jjbitVec13: long[]
                         static jjbitVec14: long[]
                         static jjbitVec15: long[]
                         static jjbitVec16: long[]
                         static jjbitVec17: long[]
                         static jjbitVec18: long[]
                         static jjbitVec19: long[]
                         static jjbitVec20: long[]
                         static jjbitVec21: long[]
                         static jjbitVec22: long[]
                         static jjbitVec23: long[]
                         static jjbitVec24: long[]
                         static jjbitVec25: long[]
                         static jjbitVec26: long[]
                         static jjbitVec27: long[]
                         static jjbitVec28: long[]
                         static jjbitVec29: long[]
                         static jjbitVec30: long[]
                         static jjbitVec31: long[]
                         static jjbitVec32: long[]
                         static jjbitVec33: long[]
                         static jjbitVec34: long[]
                         static jjbitVec35: long[]
                         static jjbitVec36: long[]
                         static jjbitVec37: long[]
                         static jjbitVec38: long[]
                         static jjbitVec39: long[]
                         static jjnextStates: int[]
                         public static jjstrLiteralImages: java.lang.String[]
                         public static lexStateNames: java.lang.String[]
                         static jjtoToken: long[]
                         static jjtoSkip: long[]
                         protected input_stream: com.sun.xml.internal.xsom.impl.scd.SimpleCharStream
                         protected curChar: char
                         curLexState: int
                         defaultLexState: int
                         jjnewStateCnt: int
                         jjround: int
                         jjmatchedPos: int
                         jjmatchedKind: int
                         public setDebugStream(arg0: java.io.PrintStream): void
                         constructor(...args: any[])
                         ReInit<T>(...args: any[]): any
                         public SwitchTo(arg0: int): void
                         protected jjFillToken(): com.sun.xml.internal.xsom.impl.scd.Token
                         public getNextToken(): com.sun.xml.internal.xsom.impl.scd.Token
                     }
                     interface SCDParserConstants {
                         public static EOF: int
                         public static Letter: int
                         public static BaseChar: int
                         public static Ideographic: int
                         public static CombiningChar: int
                         public static UnicodeDigit: int
                         public static Extender: int
                         public static NCNAME: int
                         public static NUMBER: int
                         public static FACETNAME: int
                         public static DEFAULT: int
                         public static tokenImage: java.util.List<java.lang.String>
                     }
                     class SCDParser implements com.sun.xml.internal.xsom.impl.scd.SCDParserConstants {
                         public token_source: com.sun.xml.internal.xsom.impl.scd.SCDParserTokenManager
                         jj_input_stream: com.sun.xml.internal.xsom.impl.scd.SimpleCharStream
                         public token: com.sun.xml.internal.xsom.impl.scd.Token
                         public jj_nt: com.sun.xml.internal.xsom.impl.scd.Token
                         constructor(...args: any[])
                         public QName(): com.sun.xml.internal.xsom.impl.UName
                         public Prefix(): java.lang.String
                         public RelativeSchemaComponentPath(): java.util.List
                         public Step(): com.sun.xml.internal.xsom.impl.scd.Step
                         public NameOrWildcard(arg0: com.sun.xml.internal.xsom.impl.scd.Axis): com.sun.xml.internal.xsom.impl.scd.Step
                         public NameOrWildcardOrAnonymous(arg0: com.sun.xml.internal.xsom.impl.scd.Axis): com.sun.xml.internal.xsom.impl.scd.Step
                         public Predicate(arg0: com.sun.xml.internal.xsom.impl.scd.Step): int
                         ReInit<T>(...args: any[]): any
                         public getNextToken(): com.sun.xml.internal.xsom.impl.scd.Token
                         public getToken(arg0: int): com.sun.xml.internal.xsom.impl.scd.Token
                         public generateParseException(): com.sun.xml.internal.xsom.impl.scd.ParseException
                         public enable_tracing(): void
                         public disable_tracing(): void
                     }
                     class ParseException extends java.lang.Exception {
                         protected specialConstructor: boolean
                         public currentToken: com.sun.xml.internal.xsom.impl.scd.Token
                         public expectedTokenSequences: int[][]
                         public tokenImage: java.util.List<java.lang.String>
                         protected eol: java.lang.String
                         constructor(...args: any[])
                         public getMessage(): java.lang.String
                         protected add_escapes(arg0: java.lang.String): java.lang.String
                     }
                     class SCDImpl$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<com.sun.xml.internal.xsom.XSComponent, com.sun.xml.internal.xsom.XSComponent> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.SCDImpl
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.SCDImpl, arg1: java.util.Iterator)
                         apply<T>(...args: any[]): any
                     }
                     class SCDImpl extends com.sun.xml.internal.xsom.SCD {
                         public constructor(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.impl.scd.Step[])
                         public select(arg0: java.util.Iterator<com.sun.xml.internal.xsom.XSComponent>): java.util.Iterator<com.sun.xml.internal.xsom.XSComponent>
                         toString<T>(...args: any[]): any
                     }
                     abstract class Iterators$ReadOnly<T> implements java.util.Iterator<T> {
                         constructor()
                         public remove(): void
                     }
                     class Iterators$Singleton<T> extends com.sun.xml.internal.xsom.impl.scd.Iterators$ReadOnly<T> {
                         constructor(arg0: T)
                         public hasNext(): boolean
                         public next(): T
                     }
                     abstract class Iterators$Adapter<T, U> extends com.sun.xml.internal.xsom.impl.scd.Iterators$ReadOnly<T> {
                         public constructor(arg0: java.util.Iterator<U>)
                         public hasNext(): boolean
                         public next(): T
                         protected filter(arg0: U): T
                     }
                     abstract class Iterators$Map<T, U> extends com.sun.xml.internal.xsom.impl.scd.Iterators$ReadOnly<T> {
                         protected constructor(arg0: java.util.Iterator<U>)
                         public hasNext(): boolean
                         public next(): T
                         protected apply(arg0: U): java.util.Iterator<T>
                     }
                     abstract class Iterators$Filter<T> extends com.sun.xml.internal.xsom.impl.scd.Iterators$ReadOnly<T> {
                         protected constructor(arg0: java.util.Iterator<T>)
                         protected matches(arg0: T): boolean
                         public hasNext(): boolean
                         public next(): T
                     }
                     class Iterators$Unique<T> extends com.sun.xml.internal.xsom.impl.scd.Iterators$Filter<T> {
                         public constructor(arg0: java.util.Iterator<T>)
                         protected matches(arg0: T): boolean
                     }
                     class Iterators$Union<T> extends com.sun.xml.internal.xsom.impl.scd.Iterators$ReadOnly<T> {
                         public constructor(arg0: java.util.Iterator<T>, arg1: java.util.Iterator<T>)
                         public hasNext(): boolean
                         public next(): T
                     }
                     class Iterators$Array<T> extends com.sun.xml.internal.xsom.impl.scd.Iterators$ReadOnly<T> {
                         public constructor(arg0: T[])
                         public hasNext(): boolean
                         public next(): T
                     }
                     class Iterators {
                         public constructor()
                         public static empty<T>(): java.util.Iterator<T>
                         public static singleton<T>(arg0: T): java.util.Iterator<T>
                     }
                     class AbstractAxisImpl$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<T, com.sun.xml.internal.xsom.XSComponent> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl, arg1: java.util.Iterator)
                         apply<T>(...args: any[]): any
                     }
                     class AbstractAxisImpl$2 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Map<T, com.sun.xml.internal.xsom.XSParticle> {
                         this$0: com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl
                         constructor(arg0: com.sun.xml.internal.xsom.impl.scd.AbstractAxisImpl, arg1: java.util.Iterator)
                         apply<T>(...args: any[]): any
                     }
                     abstract class XSComponent> implements com.sun.xml.internal.xsom.impl.scd.Axis<T> , com.sun.xml.internal.xsom.visitor.XSFunction<java.util.Iterator<T>> {
                         constructor()
                         protected singleton(arg0: T): java.util.Iterator<T>
                         union<T>(...args: any[]): any
                         iterator<T>(...args: any[]): any
                         public getName(): java.lang.String
                         public isModelGroup(): boolean
                         annotation<T>(...args: any[]): any
                         attGroupDecl<T>(...args: any[]): any
                         attributeDecl<T>(...args: any[]): any
                         attributeUse<T>(...args: any[]): any
                         complexType<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                         facet<T>(...args: any[]): any
                         notation<T>(...args: any[]): any
                         identityConstraint<T>(...args: any[]): any
                         xpath<T>(...args: any[]): any
                         simpleType<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         empty<T>(...args: any[]): any
                         wildcard<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                     }

                  }
                  abstract class SimpleTypeImpl extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSSimpleType , com.sun.xml.internal.xsom.impl.ContentTypeImpl , com.sun.xml.internal.xsom.impl.Ref$SimpleType {
                      constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: boolean, arg6: java.util.Set<com.sun.xml.internal.xsom.XSVariety>, arg7: com.sun.xml.internal.xsom.impl.Ref$SimpleType)
                      public listSubstitutables(): com.sun.xml.internal.xsom.XSType[]
                      public redefine(arg0: com.sun.xml.internal.xsom.impl.SimpleTypeImpl): void
                      getRedefinedBy<T>(...args: any[]): any
                      public getRedefinedCount(): int
                      public getBaseType(): com.sun.xml.internal.xsom.XSType
                      public getSimpleBaseType(): com.sun.xml.internal.xsom.XSSimpleType
                      public isPrimitive(): boolean
                      public getBaseListType(): com.sun.xml.internal.xsom.XSListSimpleType
                      public getBaseUnionType(): com.sun.xml.internal.xsom.XSUnionSimpleType
                      public isFinal(arg0: com.sun.xml.internal.xsom.XSVariety): boolean
                      public getDerivationMethod(): int
                      public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public asComplexType(): com.sun.xml.internal.xsom.XSComplexType
                      public isDerivedFrom(arg0: com.sun.xml.internal.xsom.XSType): boolean
                      public isSimpleType(): boolean
                      public isComplexType(): boolean
                      public asParticle(): com.sun.xml.internal.xsom.XSParticle
                      public asEmpty(): com.sun.xml.internal.xsom.XSContentType
                      public isRestriction(): boolean
                      public isList(): boolean
                      public isUnion(): boolean
                      public asRestriction(): com.sun.xml.internal.xsom.XSRestrictionSimpleType
                      public asList(): com.sun.xml.internal.xsom.XSListSimpleType
                      public asUnion(): com.sun.xml.internal.xsom.XSUnionSimpleType
                      visit<T>(...args: any[]): any
                      apply<T>(...args: any[]): any
                      public getContentType(): com.sun.xml.internal.xsom.XSContentType
                      getType<T>(...args: any[]): any
                      public isAnonymous(): boolean
                      public getTargetNamespace(): java.lang.String
                      public getName(): java.lang.String
                  }
                  class ModelGroupDeclImpl extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSModelGroupDecl , com.sun.xml.internal.xsom.impl.Ref$Term {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: java.lang.String, arg6: com.sun.xml.internal.xsom.impl.ModelGroupImpl)
                      public getModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
                      public redefine(arg0: com.sun.xml.internal.xsom.impl.ModelGroupDeclImpl): void
                      visit<T>(...args: any[]): any
                      apply<T>(...args: any[]): any
                      public isWildcard(): boolean
                      public isModelGroupDecl(): boolean
                      public isModelGroup(): boolean
                      public isElementDecl(): boolean
                      public asWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public asModelGroupDecl(): com.sun.xml.internal.xsom.XSModelGroupDecl
                      public asModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
                      public asElementDecl(): com.sun.xml.internal.xsom.XSElementDecl
                      public getTerm(): com.sun.xml.internal.xsom.XSTerm
                      public isAnonymous(): boolean
                      public getTargetNamespace(): java.lang.String
                      public getName(): java.lang.String
                  }
                  class AttGroupDeclImpl extends com.sun.xml.internal.xsom.impl.AttributesHolder implements com.sun.xml.internal.xsom.XSAttGroupDecl {
                      constructor(...args: any[])
                      public setWildcard(arg0: com.sun.xml.internal.xsom.impl.WildcardImpl): void
                      public getAttributeWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public getAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                      public redefine(arg0: com.sun.xml.internal.xsom.impl.AttGroupDeclImpl): void
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSFunction): java.lang.Object
                      public getAttGroups(): java.util.Collection
                  }
                  class AttributesHolder$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Adapter<com.sun.xml.internal.xsom.XSAttGroupDecl, com.sun.xml.internal.xsom.impl.Ref$AttGroup> {
                      this$0: com.sun.xml.internal.xsom.impl.AttributesHolder
                      constructor(arg0: com.sun.xml.internal.xsom.impl.AttributesHolder, arg1: java.util.Iterator)
                      filter<T>(...args: any[]): any
                  }
                  class AttributesHolder$2 extends java.util.AbstractSet<com.sun.xml.internal.xsom.XSAttGroupDecl> {
                      this$0: com.sun.xml.internal.xsom.impl.AttributesHolder
                      constructor(arg0: com.sun.xml.internal.xsom.impl.AttributesHolder)
                      public iterator(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public size(): int
                  }
                  abstract class AttributesHolder extends com.sun.xml.internal.xsom.impl.DeclarationImpl {
                      protected attributes: java.util.Map<com.sun.xml.internal.xsom.impl.UName, com.sun.xml.internal.xsom.impl.AttributeUseImpl>
                      protected prohibitedAtts: java.util.Set<com.sun.xml.internal.xsom.impl.UName>
                      protected attGroups: java.util.Set<com.sun.xml.internal.xsom.impl.Ref$AttGroup>
                      protected constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: boolean)
                      public setWildcard(arg0: com.sun.xml.internal.xsom.impl.WildcardImpl): void
                      public addAttributeUse(arg0: com.sun.xml.internal.xsom.impl.UName, arg1: com.sun.xml.internal.xsom.impl.AttributeUseImpl): void
                      public addProhibitedAttribute(arg0: com.sun.xml.internal.xsom.impl.UName): void
                      public getAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.XSAttributeUse>
                      public iterateAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeUse>
                      public getDeclaredAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                      public iterateDeclaredAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.impl.AttributeUseImpl>
                      public getDeclaredAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.impl.AttributeUseImpl>
                      public addAttGroup(arg0: com.sun.xml.internal.xsom.impl.Ref$AttGroup): void
                      public iterateAttGroups(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public getAttGroups(): java.util.Set<com.sun.xml.internal.xsom.XSAttGroupDecl>
                      public isAnonymous(): boolean
                      public getTargetNamespace(): java.lang.String
                      public getName(): java.lang.String
                  }
                  class ComplexTypeImpl$1 extends com.sun.xml.internal.xsom.impl.scd.Iterators$Filter<com.sun.xml.internal.xsom.XSAttributeUse> {
                      this$0: com.sun.xml.internal.xsom.impl.ComplexTypeImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.ComplexTypeImpl, arg1: java.util.Iterator)
                      matches<T>(...args: any[]): any
                  }
                  class ComplexTypeImpl extends com.sun.xml.internal.xsom.impl.AttributesHolder implements com.sun.xml.internal.xsom.XSComplexType , com.sun.xml.internal.xsom.impl.Ref$ComplexType {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: boolean, arg6: boolean, arg7: int, arg8: com.sun.xml.internal.xsom.impl.Ref$Type, arg9: int, arg10: int, arg11: boolean)
                      public asComplexType(): com.sun.xml.internal.xsom.XSComplexType
                      public isDerivedFrom(arg0: com.sun.xml.internal.xsom.XSType): boolean
                      public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public isSimpleType(): boolean
                      public isComplexType(): boolean
                      public getDerivationMethod(): int
                      public getBaseType(): com.sun.xml.internal.xsom.XSType
                      public redefine(arg0: com.sun.xml.internal.xsom.impl.ComplexTypeImpl): void
                      getRedefinedBy<T>(...args: any[]): any
                      public getRedefinedCount(): int
                      public getScope(): com.sun.xml.internal.xsom.XSElementDecl
                      public setScope(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                      public isAbstract(): boolean
                      public setWildcard(arg0: com.sun.xml.internal.xsom.impl.WildcardImpl): void
                      public getAttributeWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public isFinal(arg0: int): boolean
                      public isSubstitutionProhibited(arg0: int): boolean
                      public setContentType(arg0: com.sun.xml.internal.xsom.impl.Ref$ContentType): void
                      public getContentType(): com.sun.xml.internal.xsom.XSContentType
                      public setExplicitContent(arg0: com.sun.xml.internal.xsom.XSContentType): void
                      public getExplicitContent(): com.sun.xml.internal.xsom.XSContentType
                      public isMixed(): boolean
                      public getAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                      public iterateAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeUse>
                      public getAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.XSAttributeUse>
                      public listSubstitutables(): com.sun.xml.internal.xsom.XSType[]
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSFunction<T>): T
                      getType<T>(...args: any[]): any
                      public getSubtypes(): java.util.List<com.sun.xml.internal.xsom.XSComplexType>
                      public getElementDecls(): java.util.List<com.sun.xml.internal.xsom.XSElementDecl>
                      public getAttGroups(): java.util.Collection
                  }
                  class ModelGroupImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSModelGroup , com.sun.xml.internal.xsom.impl.Ref$Term {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: com.sun.xml.internal.xsom.XSModelGroup$Compositor, arg5: com.sun.xml.internal.xsom.impl.ParticleImpl[])
                      getChild<T>(...args: any[]): any
                      public getSize(): int
                      getChildren<T>(...args: any[]): any
                      public getCompositor(): com.sun.xml.internal.xsom.XSModelGroup$Compositor
                      public redefine(arg0: com.sun.xml.internal.xsom.impl.ModelGroupDeclImpl): void
                      public iterator(): java.util.Iterator<com.sun.xml.internal.xsom.XSParticle>
                      public isWildcard(): boolean
                      public isModelGroupDecl(): boolean
                      public isModelGroup(): boolean
                      public isElementDecl(): boolean
                      public asWildcard(): com.sun.xml.internal.xsom.XSWildcard
                      public asModelGroupDecl(): com.sun.xml.internal.xsom.XSModelGroupDecl
                      public asModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
                      public asElementDecl(): com.sun.xml.internal.xsom.XSElementDecl
                      visit<T>(...args: any[]): any
                      apply<T>(...args: any[]): any
                      public getTerm(): com.sun.xml.internal.xsom.XSTerm
                  }
                  class AttributeUseImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSAttributeUse {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: com.sun.xml.internal.xsom.impl.Ref$Attribute, arg5: com.sun.xml.internal.xsom.XmlString, arg6: com.sun.xml.internal.xsom.XmlString, arg7: boolean)
                      public getDecl(): com.sun.xml.internal.xsom.XSAttributeDecl
                      public getDefaultValue(): com.sun.xml.internal.xsom.XmlString
                      public getFixedValue(): com.sun.xml.internal.xsom.XmlString
                      public isRequired(): boolean
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSFunction): java.lang.Object
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                  }
                  class ParticleImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSParticle , com.sun.xml.internal.xsom.impl.ContentTypeImpl {
                      constructor(...args: any[])
                      public getTerm(): com.sun.xml.internal.xsom.XSTerm
                      public getMaxOccurs(): java.math.BigInteger
                      public isRepeated(): boolean
                      public getMinOccurs(): java.math.BigInteger
                      public redefine(arg0: com.sun.xml.internal.xsom.impl.ModelGroupDeclImpl): void
                      public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                      public asParticle(): com.sun.xml.internal.xsom.XSParticle
                      public asEmpty(): com.sun.xml.internal.xsom.XSContentType
                      apply<T>(...args: any[]): any
                      visit<T>(...args: any[]): any
                      public getContentType(): com.sun.xml.internal.xsom.XSContentType
                      public getForeignAttributes(): java.util.List
                  }
                  class FacetImpl extends com.sun.xml.internal.xsom.impl.ComponentImpl implements com.sun.xml.internal.xsom.XSFacet {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: com.sun.xml.internal.xsom.XmlString, arg6: boolean)
                      public getName(): java.lang.String
                      public getValue(): com.sun.xml.internal.xsom.XmlString
                      public isFixed(): boolean
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSFunction): java.lang.Object
                  }
                  class RestrictionSimpleTypeImpl extends com.sun.xml.internal.xsom.impl.SimpleTypeImpl implements com.sun.xml.internal.xsom.XSRestrictionSimpleType {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: boolean, arg6: java.util.Set<com.sun.xml.internal.xsom.XSVariety>, arg7: com.sun.xml.internal.xsom.impl.Ref$SimpleType)
                      public addFacet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                      public iterateDeclaredFacets(): java.util.Iterator<com.sun.xml.internal.xsom.XSFacet>
                      getDeclaredFacets<T>(...args: any[]): any
                      public getDeclaredFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                      public getFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                      public getFacets(arg0: java.lang.String): java.util.List<com.sun.xml.internal.xsom.XSFacet>
                      public getVariety(): com.sun.xml.internal.xsom.XSVariety
                      public getPrimitiveType(): com.sun.xml.internal.xsom.XSSimpleType
                      public isPrimitive(): boolean
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeFunction): java.lang.Object
                      public isRestriction(): boolean
                      public asRestriction(): com.sun.xml.internal.xsom.XSRestrictionSimpleType
                  }
                  class AttributeDeclImpl extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSAttributeDecl , com.sun.xml.internal.xsom.impl.Ref$Attribute {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg4: org.xml.sax.Locator, arg5: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg6: boolean, arg7: com.sun.xml.internal.xsom.XmlString, arg8: com.sun.xml.internal.xsom.XmlString, arg9: com.sun.xml.internal.xsom.impl.Ref$SimpleType)
                      public getType(): com.sun.xml.internal.xsom.XSSimpleType
                      public getDefaultValue(): com.sun.xml.internal.xsom.XmlString
                      public getFixedValue(): com.sun.xml.internal.xsom.XmlString
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSFunction): java.lang.Object
                      public getAttribute(): com.sun.xml.internal.xsom.XSAttributeDecl
                      public isAnonymous(): boolean
                      public getTargetNamespace(): java.lang.String
                      public getName(): java.lang.String
                  }
                  class UnionSimpleTypeImpl$1 implements java.util.Iterator<com.sun.xml.internal.xsom.XSSimpleType> {
                      idx: int
                      this$0: com.sun.xml.internal.xsom.impl.UnionSimpleTypeImpl
                      constructor(arg0: com.sun.xml.internal.xsom.impl.UnionSimpleTypeImpl)
                      public hasNext(): boolean
                      next<T>(...args: any[]): any
                      public remove(): void
                  }
                  class UnionSimpleTypeImpl extends com.sun.xml.internal.xsom.impl.SimpleTypeImpl implements com.sun.xml.internal.xsom.XSUnionSimpleType {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: boolean, arg6: java.util.Set<com.sun.xml.internal.xsom.XSVariety>, arg7: com.sun.xml.internal.xsom.impl.Ref$SimpleType[])
                      public getMember(arg0: int): com.sun.xml.internal.xsom.XSSimpleType
                      public getMemberSize(): int
                      public iterator(): java.util.Iterator<com.sun.xml.internal.xsom.XSSimpleType>
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeFunction): java.lang.Object
                      public getBaseUnionType(): com.sun.xml.internal.xsom.XSUnionSimpleType
                      public getFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                      public getFacets(arg0: java.lang.String): java.util.List<com.sun.xml.internal.xsom.XSFacet>
                      public getVariety(): com.sun.xml.internal.xsom.XSVariety
                      public getPrimitiveType(): com.sun.xml.internal.xsom.XSSimpleType
                      public isUnion(): boolean
                      public asUnion(): com.sun.xml.internal.xsom.XSUnionSimpleType
                      static access$000(arg0: com.sun.xml.internal.xsom.impl.UnionSimpleTypeImpl): com.sun.xml.internal.xsom.impl.Ref$SimpleType[]
                  }
                  class ListSimpleTypeImpl extends com.sun.xml.internal.xsom.impl.SimpleTypeImpl implements com.sun.xml.internal.xsom.XSListSimpleType {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: boolean, arg6: java.util.Set<com.sun.xml.internal.xsom.XSVariety>, arg7: com.sun.xml.internal.xsom.impl.Ref$SimpleType)
                      public getItemType(): com.sun.xml.internal.xsom.XSSimpleType
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeFunction): java.lang.Object
                      public getFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                      public getFacets(arg0: java.lang.String): java.util.List<com.sun.xml.internal.xsom.XSFacet>
                      public getVariety(): com.sun.xml.internal.xsom.XSVariety
                      public getPrimitiveType(): com.sun.xml.internal.xsom.XSSimpleType
                      public getBaseListType(): com.sun.xml.internal.xsom.XSListSimpleType
                      public isList(): boolean
                      public asList(): com.sun.xml.internal.xsom.XSListSimpleType
                  }
                  class Util {
                      constructor()
                      public static listSubstitutables(arg0: com.sun.xml.internal.xsom.XSType): com.sun.xml.internal.xsom.XSType[]
                      public static buildSubstitutables(arg0: com.sun.xml.internal.xsom.XSType, arg1: java.util.Set): void
                  }
                  class NotationImpl extends com.sun.xml.internal.xsom.impl.DeclarationImpl implements com.sun.xml.internal.xsom.XSNotation {
                      public constructor(arg0: com.sun.xml.internal.xsom.impl.parser.SchemaDocumentImpl, arg1: com.sun.xml.internal.xsom.impl.AnnotationImpl, arg2: org.xml.sax.Locator, arg3: com.sun.xml.internal.xsom.impl.ForeignAttributesImpl, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String)
                      public getPublicId(): java.lang.String
                      public getSystemId(): java.lang.String
                      public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                      public apply(arg0: com.sun.xml.internal.xsom.visitor.XSFunction): java.lang.Object
                      public isAnonymous(): boolean
                      public getTargetNamespace(): java.lang.String
                      public getName(): java.lang.String
                  }
                  class Const {
                      public static schemaNamespace: java.lang.String
                      public constructor()
                  }

               }
               namespace util {
                  class XSFunctionFilter<T> implements com.sun.xml.internal.xsom.visitor.XSFunction<T> {
                      protected core: com.sun.xml.internal.xsom.visitor.XSFunction<T>
                      constructor(...args: any[])
                      public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): T
                      public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): T
                      public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): T
                      public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): T
                      public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): T
                      public schema(arg0: com.sun.xml.internal.xsom.XSSchema): T
                      public facet(arg0: com.sun.xml.internal.xsom.XSFacet): T
                      public notation(arg0: com.sun.xml.internal.xsom.XSNotation): T
                      public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): T
                      public particle(arg0: com.sun.xml.internal.xsom.XSParticle): T
                      public empty(arg0: com.sun.xml.internal.xsom.XSContentType): T
                      public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): T
                      public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): T
                      public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): T
                      public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): T
                      public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): T
                      public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): T
                  }
                  class XSFinder implements com.sun.xml.internal.xsom.visitor.XSFunction<java.lang.Boolean> {
                      public constructor()
                      public find(arg0: com.sun.xml.internal.xsom.XSComponent): boolean
                      annotation<T>(...args: any[]): any
                      attGroupDecl<T>(...args: any[]): any
                      attributeDecl<T>(...args: any[]): any
                      attributeUse<T>(...args: any[]): any
                      complexType<T>(...args: any[]): any
                      schema<T>(...args: any[]): any
                      facet<T>(...args: any[]): any
                      notation<T>(...args: any[]): any
                      simpleType<T>(...args: any[]): any
                      particle<T>(...args: any[]): any
                      empty<T>(...args: any[]): any
                      wildcard<T>(...args: any[]): any
                      modelGroupDecl<T>(...args: any[]): any
                      modelGroup<T>(...args: any[]): any
                      elementDecl<T>(...args: any[]): any
                      identityConstraint<T>(...args: any[]): any
                      xpath<T>(...args: any[]): any
                  }
                  class TypeSet$1 extends com.sun.xml.internal.xsom.util.TypeSet {
                      val$a: com.sun.xml.internal.xsom.util.TypeSet
                      val$b: com.sun.xml.internal.xsom.util.TypeSet
                      constructor(arg0: com.sun.xml.internal.xsom.util.TypeSet, arg1: com.sun.xml.internal.xsom.util.TypeSet)
                      public contains(arg0: com.sun.xml.internal.xsom.XSType): boolean
                  }
                  class TypeSet$2 extends com.sun.xml.internal.xsom.util.TypeSet {
                      val$a: com.sun.xml.internal.xsom.util.TypeSet
                      val$b: com.sun.xml.internal.xsom.util.TypeSet
                      constructor(arg0: com.sun.xml.internal.xsom.util.TypeSet, arg1: com.sun.xml.internal.xsom.util.TypeSet)
                      public contains(arg0: com.sun.xml.internal.xsom.XSType): boolean
                  }
                  abstract class TypeSet {
                      public constructor()
                      public contains(arg0: com.sun.xml.internal.xsom.XSType): boolean
                      public static intersection(arg0: com.sun.xml.internal.xsom.util.TypeSet, arg1: com.sun.xml.internal.xsom.util.TypeSet): com.sun.xml.internal.xsom.util.TypeSet
                      public static union(arg0: com.sun.xml.internal.xsom.util.TypeSet, arg1: com.sun.xml.internal.xsom.util.TypeSet): com.sun.xml.internal.xsom.util.TypeSet
                  }
                  class TypeClosure extends com.sun.xml.internal.xsom.util.TypeSet {
                      public constructor(arg0: com.sun.xml.internal.xsom.util.TypeSet)
                      public contains(arg0: com.sun.xml.internal.xsom.XSType): boolean
                  }
                  class SimpleTypeSet extends com.sun.xml.internal.xsom.util.TypeSet {
                      public constructor(arg0: java.util.Set)
                      public contains(arg0: com.sun.xml.internal.xsom.XSType): boolean
                  }
                  class NameGetter implements com.sun.xml.internal.xsom.visitor.XSFunction<java.lang.String> {
                      public static theInstance: com.sun.xml.internal.xsom.visitor.XSFunction
                      public constructor(arg0: java.util.Locale)
                      public static get(arg0: com.sun.xml.internal.xsom.XSComponent): java.lang.String
                      annotation<T>(...args: any[]): any
                      attGroupDecl<T>(...args: any[]): any
                      attributeUse<T>(...args: any[]): any
                      attributeDecl<T>(...args: any[]): any
                      complexType<T>(...args: any[]): any
                      schema<T>(...args: any[]): any
                      facet<T>(...args: any[]): any
                      simpleType<T>(...args: any[]): any
                      particle<T>(...args: any[]): any
                      empty<T>(...args: any[]): any
                      wildcard<T>(...args: any[]): any
                      modelGroupDecl<T>(...args: any[]): any
                      modelGroup<T>(...args: any[]): any
                      elementDecl<T>(...args: any[]): any
                      notation<T>(...args: any[]): any
                      identityConstraint<T>(...args: any[]): any
                      xpath<T>(...args: any[]): any
                  }
                  class DomAnnotationParserFactory$1 extends com.sun.xml.internal.xsom.util.ContextClassloaderLocal<javax.xml.transform.sax.SAXTransformerFactory> {
                      constructor()
                      initialValue<T>(...args: any[]): any
                  }
                  class DomAnnotationParserFactory$AnnotationParserImpl extends com.sun.xml.internal.xsom.parser.AnnotationParser {
                      constructor(...args: any[])
                      public getContentHandler(arg0: com.sun.xml.internal.xsom.parser.AnnotationContext, arg1: java.lang.String, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): org.xml.sax.ContentHandler
                      public getResult(arg0: java.lang.Object): java.lang.Object
                  }
                  class DomAnnotationParserFactory implements com.sun.xml.internal.xsom.parser.AnnotationParserFactory {
                      public constructor()
                      create<T>(...args: any[]): any
                      static access$000(): com.sun.xml.internal.xsom.util.ContextClassloaderLocal
                  }
                  class ContextClassloaderLocal$1 implements java.security.PrivilegedAction {
                      constructor()
                      public run(): java.lang.Object
                  }
                  abstract class ContextClassloaderLocal<V> {
                      constructor()
                      public get(): V
                      public set(arg0: V): void
                      protected initialValue(): V
                  }
                  class DeferedCollection$1 implements java.util.Iterator<T> {
                      idx: int
                      this$0: com.sun.xml.internal.xsom.util.DeferedCollection
                      constructor(arg0: com.sun.xml.internal.xsom.util.DeferedCollection)
                      public hasNext(): boolean
                      public next(): T
                      public remove(): void
                  }
                  class DeferedCollection<T> implements java.util.Collection<T> {
                      public constructor(arg0: java.util.Iterator<T>)
                      public isEmpty(): boolean
                      public size(): int
                      public contains(arg0: java.lang.Object): boolean
                      public containsAll(arg0: java.util.Collection<any>): boolean
                      public iterator(): java.util.Iterator<T>
                      toArray<T>(...args: any[]): any
                      public add(arg0: T): boolean
                      public remove(arg0: java.lang.Object): boolean
                      public addAll(arg0: java.util.Collection<T>): boolean
                      public removeAll(arg0: java.util.Collection<any>): boolean
                      public retainAll(arg0: java.util.Collection<any>): boolean
                      public clear(): void
                      static access$000(arg0: com.sun.xml.internal.xsom.util.DeferedCollection): java.util.List
                      static access$100(arg0: com.sun.xml.internal.xsom.util.DeferedCollection): java.util.Iterator
                      static access$200(arg0: com.sun.xml.internal.xsom.util.DeferedCollection): void
                  }
                  class ComponentNameFunction implements com.sun.xml.internal.xsom.visitor.XSFunction<java.lang.String> {
                      public constructor()
                      annotation<T>(...args: any[]): any
                      attGroupDecl<T>(...args: any[]): any
                      attributeDecl<T>(...args: any[]): any
                      attributeUse<T>(...args: any[]): any
                      complexType<T>(...args: any[]): any
                      schema<T>(...args: any[]): any
                      facet<T>(...args: any[]): any
                      notation<T>(...args: any[]): any
                      simpleType<T>(...args: any[]): any
                      particle<T>(...args: any[]): any
                      empty<T>(...args: any[]): any
                      wildcard<T>(...args: any[]): any
                      modelGroupDecl<T>(...args: any[]): any
                      modelGroup<T>(...args: any[]): any
                      elementDecl<T>(...args: any[]): any
                      identityConstraint<T>(...args: any[]): any
                      xpath<T>(...args: any[]): any
                  }

               }
               namespace visitor {
                  interface XSWildcardVisitor {
                      public any(arg0: com.sun.xml.internal.xsom.XSWildcard$Any): void
                      public other(arg0: com.sun.xml.internal.xsom.XSWildcard$Other): void
                      public union(arg0: com.sun.xml.internal.xsom.XSWildcard$Union): void
                  }
                  interface XSWildcardFunction<T> {
                      public any(arg0: com.sun.xml.internal.xsom.XSWildcard$Any): T
                      public other(arg0: com.sun.xml.internal.xsom.XSWildcard$Other): T
                      public union(arg0: com.sun.xml.internal.xsom.XSWildcard$Union): T
                  }
                  interface XSVisitor extends com.sun.xml.internal.xsom.visitor.XSTermVisitor , com.sun.xml.internal.xsom.visitor.XSContentTypeVisitor {
                      public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                      public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                      public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                      public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                      public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                      public schema(arg0: com.sun.xml.internal.xsom.XSSchema): void
                      public facet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                      public notation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                      public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                      public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): void
                  }
                  interface XSTermVisitor {
                      public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                      public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                      public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                      public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                  }
                  interface XSContentTypeVisitor {
                      public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                      public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                      public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                  }
                  interface XSFunction<T> extends com.sun.xml.internal.xsom.visitor.XSContentTypeFunction<T> , com.sun.xml.internal.xsom.visitor.XSTermFunction<T> {
                      public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): T
                      public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): T
                      public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): T
                      public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): T
                      public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): T
                      public schema(arg0: com.sun.xml.internal.xsom.XSSchema): T
                      public facet(arg0: com.sun.xml.internal.xsom.XSFacet): T
                      public notation(arg0: com.sun.xml.internal.xsom.XSNotation): T
                      public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): T
                      public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): T
                  }
                  interface XSContentTypeFunction<T> {
                      public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): T
                      public particle(arg0: com.sun.xml.internal.xsom.XSParticle): T
                      public empty(arg0: com.sun.xml.internal.xsom.XSContentType): T
                  }
                  interface XSTermFunction<T> {
                      public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): T
                      public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): T
                      public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): T
                      public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): T
                  }
                  interface XSTermFunctionWithParam<T, P> {
                      public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard, arg1: P): T
                      public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl, arg1: P): T
                      public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup, arg1: P): T
                      public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl, arg1: P): T
                  }
                  interface XSSimpleTypeVisitor {
                      public listSimpleType(arg0: com.sun.xml.internal.xsom.XSListSimpleType): void
                      public unionSimpleType(arg0: com.sun.xml.internal.xsom.XSUnionSimpleType): void
                      public restrictionSimpleType(arg0: com.sun.xml.internal.xsom.XSRestrictionSimpleType): void
                  }
                  interface XSSimpleTypeFunction<T> {
                      public listSimpleType(arg0: com.sun.xml.internal.xsom.XSListSimpleType): T
                      public unionSimpleType(arg0: com.sun.xml.internal.xsom.XSUnionSimpleType): T
                      public restrictionSimpleType(arg0: com.sun.xml.internal.xsom.XSRestrictionSimpleType): T
                  }

               }
               interface XSWildcard$Any extends com.sun.xml.internal.xsom.XSWildcard {
               }
               interface XSWildcard$Other extends com.sun.xml.internal.xsom.XSWildcard {
                   public getOtherNamespace(): java.lang.String
               }
               interface XSWildcard$Union extends com.sun.xml.internal.xsom.XSWildcard {
                   public iterateNamespaces(): java.util.Iterator<java.lang.String>
                   public getNamespaces(): java.util.Collection<java.lang.String>
               }
               interface XSWildcard extends com.sun.xml.internal.xsom.XSComponent , com.sun.xml.internal.xsom.XSTerm {
                   public static LAX: int
                   public static STRTICT: int
                   public static SKIP: int
                   public getMode(): int
                   public acceptsNamespace(arg0: java.lang.String): boolean
                   public visit(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardVisitor): void
                   public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSWildcardFunction<T>): T
               }
               interface XSComponent {
                   getAnnotation<T>(...args: any[]): any
                   public getForeignAttributes(): java.util.List<com.sun.xml.internal.xsom.ForeignAttributes>
                   public getForeignAttribute(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                   public getLocator(): org.xml.sax.Locator
                   public getOwnerSchema(): com.sun.xml.internal.xsom.XSSchema
                   public getRoot(): com.sun.xml.internal.xsom.XSSchemaSet
                   public getSourceDocument(): com.sun.xml.internal.xsom.parser.SchemaDocument
                   public select(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): java.util.Collection<com.sun.xml.internal.xsom.XSComponent>
                   public selectSingle(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): com.sun.xml.internal.xsom.XSComponent
                   public visit(arg0: com.sun.xml.internal.xsom.visitor.XSVisitor): void
                   public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSFunction<T>): T
               }
               interface XSTerm extends com.sun.xml.internal.xsom.XSComponent {
                   public visit(arg0: com.sun.xml.internal.xsom.visitor.XSTermVisitor): void
                   apply<T>(...args: any[]): any
                   public isWildcard(): boolean
                   public isModelGroupDecl(): boolean
                   public isModelGroup(): boolean
                   public isElementDecl(): boolean
                   public asWildcard(): com.sun.xml.internal.xsom.XSWildcard
                   public asModelGroupDecl(): com.sun.xml.internal.xsom.XSModelGroupDecl
                   public asModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
                   public asElementDecl(): com.sun.xml.internal.xsom.XSElementDecl
               }
               interface XSAnnotation {
                   public getAnnotation(): java.lang.Object
                   public setAnnotation(arg0: java.lang.Object): java.lang.Object
                   public getLocator(): org.xml.sax.Locator
               }
               interface ForeignAttributes extends org.xml.sax.Attributes {
                   public getContext(): org.relaxng.datatype.ValidationContext
                   public getLocator(): org.xml.sax.Locator
               }
               interface XSSchema extends com.sun.xml.internal.xsom.XSComponent {
                   public getTargetNamespace(): java.lang.String
                   public getAttributeDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSAttributeDecl>
                   public iterateAttributeDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeDecl>
                   public getAttributeDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSAttributeDecl
                   public getElementDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSElementDecl>
                   public iterateElementDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSElementDecl>
                   public getElementDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSElementDecl
                   public getAttGroupDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSAttGroupDecl>
                   public iterateAttGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                   public getAttGroupDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSAttGroupDecl
                   public getModelGroupDecls(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSModelGroupDecl>
                   public iterateModelGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSModelGroupDecl>
                   public getModelGroupDecl(arg0: java.lang.String): com.sun.xml.internal.xsom.XSModelGroupDecl
                   public getTypes(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSType>
                   public iterateTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSType>
                   public getType(arg0: java.lang.String): com.sun.xml.internal.xsom.XSType
                   public getSimpleTypes(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSSimpleType>
                   public iterateSimpleTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSSimpleType>
                   public getSimpleType(arg0: java.lang.String): com.sun.xml.internal.xsom.XSSimpleType
                   public getComplexTypes(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSComplexType>
                   public iterateComplexTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSComplexType>
                   public getComplexType(arg0: java.lang.String): com.sun.xml.internal.xsom.XSComplexType
                   public getNotations(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSNotation>
                   public iterateNotations(): java.util.Iterator<com.sun.xml.internal.xsom.XSNotation>
                   public getNotation(arg0: java.lang.String): com.sun.xml.internal.xsom.XSNotation
                   public getIdentityConstraints(): java.util.Map<java.lang.String, com.sun.xml.internal.xsom.XSIdentityConstraint>
                   public getIdentityConstraint(arg0: java.lang.String): com.sun.xml.internal.xsom.XSIdentityConstraint
                   public getSourceDocument(): com.sun.xml.internal.xsom.parser.SchemaDocument
                   public getRoot(): com.sun.xml.internal.xsom.XSSchemaSet
               }
               interface XSSchemaSet {
                   getSchema<T>(...args: any[]): any
                   public getSchemaSize(): int
                   public iterateSchema(): java.util.Iterator<com.sun.xml.internal.xsom.XSSchema>
                   public getSchemas(): java.util.Collection<com.sun.xml.internal.xsom.XSSchema>
                   public getType(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSType
                   public getSimpleType(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSSimpleType
                   public getAttributeDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeDecl
                   public getElementDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSElementDecl
                   public getModelGroupDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSModelGroupDecl
                   public getAttGroupDecl(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttGroupDecl
                   public getComplexType(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSComplexType
                   public getIdentityConstraint(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSIdentityConstraint
                   public iterateElementDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSElementDecl>
                   public iterateTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSType>
                   public iterateAttributeDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeDecl>
                   public iterateAttGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                   public iterateModelGroupDecls(): java.util.Iterator<com.sun.xml.internal.xsom.XSModelGroupDecl>
                   public iterateSimpleTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSSimpleType>
                   public iterateComplexTypes(): java.util.Iterator<com.sun.xml.internal.xsom.XSComplexType>
                   public iterateNotations(): java.util.Iterator<com.sun.xml.internal.xsom.XSNotation>
                   public iterateIdentityConstraints(): java.util.Iterator<com.sun.xml.internal.xsom.XSIdentityConstraint>
                   public getAnyType(): com.sun.xml.internal.xsom.XSComplexType
                   public getAnySimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                   public getEmpty(): com.sun.xml.internal.xsom.XSContentType
                   public select(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): java.util.Collection<com.sun.xml.internal.xsom.XSComponent>
                   public selectSingle(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): com.sun.xml.internal.xsom.XSComponent
               }
               namespace parser {
                  interface SchemaDocument {
                      public getSystemId(): java.lang.String
                      public getTargetNamespace(): java.lang.String
                      public getSchema(): com.sun.xml.internal.xsom.XSSchema
                      public getReferencedDocuments(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                      public getIncludedDocuments(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                      public getImportedDocuments(arg0: java.lang.String): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                      public includes(arg0: com.sun.xml.internal.xsom.parser.SchemaDocument): boolean
                      public imports(arg0: com.sun.xml.internal.xsom.parser.SchemaDocument): boolean
                      public getReferers(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                  }
                  interface AnnotationParserFactory {
                      public create(): com.sun.xml.internal.xsom.parser.AnnotationParser
                  }
                  abstract class AnnotationParser {
                      public constructor()
                      public getContentHandler(arg0: com.sun.xml.internal.xsom.parser.AnnotationContext, arg1: java.lang.String, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): org.xml.sax.ContentHandler
                      public getResult(arg0: java.lang.Object): java.lang.Object
                  }
                  class AnnotationContext {
                      public static SCHEMA: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static NOTATION: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static ELEMENT_DECL: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static IDENTITY_CONSTRAINT: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static XPATH: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static MODELGROUP_DECL: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static SIMPLETYPE_DECL: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static COMPLEXTYPE_DECL: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static PARTICLE: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static MODELGROUP: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static ATTRIBUTE_USE: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static WILDCARD: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static ATTRIBUTE_GROUP: com.sun.xml.internal.xsom.parser.AnnotationContext
                      public static ATTRIBUTE_DECL: com.sun.xml.internal.xsom.parser.AnnotationContext
                      toString<T>(...args: any[]): any
                  }
                  class XSOMParser$1 implements com.sun.xml.internal.xsom.parser.AnnotationParserFactory {
                      val$annParser: java.lang.Class
                      this$0: com.sun.xml.internal.xsom.parser.XSOMParser
                      constructor(arg0: com.sun.xml.internal.xsom.parser.XSOMParser, arg1: java.lang.Class)
                      public create(): com.sun.xml.internal.xsom.parser.AnnotationParser
                  }
                  class XSOMParser {
                      constructor(...args: any[])
                      parse<T>(...args: any[]): any
                      public getParserHandler(): org.xml.sax.ContentHandler
                      public getResult(): com.sun.xml.internal.xsom.XSSchemaSet
                      public getDocuments(): java.util.Set<com.sun.xml.internal.xsom.parser.SchemaDocument>
                      public getEntityResolver(): org.xml.sax.EntityResolver
                      public setEntityResolver(arg0: org.xml.sax.EntityResolver): void
                      public getErrorHandler(): org.xml.sax.ErrorHandler
                      public setErrorHandler(arg0: org.xml.sax.ErrorHandler): void
                      setAnnotationParser<T>(...args: any[]): any
                      public getAnnotationParserFactory(): com.sun.xml.internal.xsom.parser.AnnotationParserFactory
                  }
                  interface XMLParser {
                      public parse(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.ContentHandler, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): void
                  }
                  class JAXPParser$XMLReaderEx extends org.xml.sax.helpers.XMLFilterImpl {
                      constructor(arg0: org.xml.sax.XMLReader)
                      public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
                      public setDocumentLocator(arg0: org.xml.sax.Locator): void
                  }
                  class JAXPParser implements com.sun.xml.internal.xsom.parser.XMLParser {
                      constructor(...args: any[])
                      public parse(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.ContentHandler, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): void
                  }

               }
               interface XSModelGroupDecl extends com.sun.xml.internal.xsom.XSDeclaration , com.sun.xml.internal.xsom.XSTerm {
                   public getModelGroup(): com.sun.xml.internal.xsom.XSModelGroup
               }
               interface XSDeclaration extends com.sun.xml.internal.xsom.XSComponent {
                   public getTargetNamespace(): java.lang.String
                   public getName(): java.lang.String
                   public isAnonymous(): boolean
                   public isGlobal(): boolean
                   public isLocal(): boolean
               }
               class XSModelGroup$Compositor extends java.lang.Enum<com.sun.xml.internal.xsom.XSModelGroup$Compositor> {
                   public static ALL: com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public static CHOICE: com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public static SEQUENCE: com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public static values(): com.sun.xml.internal.xsom.XSModelGroup$Compositor[]
                   valueOf<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }
               interface XSModelGroup extends com.sun.xml.internal.xsom.XSComponent , com.sun.xml.internal.xsom.XSTerm , java.lang.Iterable<com.sun.xml.internal.xsom.XSParticle> {
                   public static ALL: com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public static SEQUENCE: com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public static CHOICE: com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public getCompositor(): com.sun.xml.internal.xsom.XSModelGroup$Compositor
                   public getChild(arg0: int): com.sun.xml.internal.xsom.XSParticle
                   public getSize(): int
                   public getChildren(): com.sun.xml.internal.xsom.XSParticle[]
               }
               interface XSParticle extends com.sun.xml.internal.xsom.XSContentType {
                   public static UNBOUNDED: int
                   public getMinOccurs(): java.math.BigInteger
                   public getMaxOccurs(): java.math.BigInteger
                   public isRepeated(): boolean
                   public getTerm(): com.sun.xml.internal.xsom.XSTerm
               }
               interface XSContentType extends com.sun.xml.internal.xsom.XSComponent {
                   public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                   public asParticle(): com.sun.xml.internal.xsom.XSParticle
                   public asEmpty(): com.sun.xml.internal.xsom.XSContentType
                   public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSContentTypeFunction<T>): T
                   public visit(arg0: com.sun.xml.internal.xsom.visitor.XSContentTypeVisitor): void
               }
               interface XSElementDecl extends com.sun.xml.internal.xsom.XSDeclaration , com.sun.xml.internal.xsom.XSTerm {
                   public getType(): com.sun.xml.internal.xsom.XSType
                   public isNillable(): boolean
                   public getSubstAffiliation(): com.sun.xml.internal.xsom.XSElementDecl
                   public getIdentityConstraints(): java.util.List<com.sun.xml.internal.xsom.XSIdentityConstraint>
                   public isSubstitutionExcluded(arg0: int): boolean
                   public isSubstitutionDisallowed(arg0: int): boolean
                   public isAbstract(): boolean
                   public listSubstitutables(): com.sun.xml.internal.xsom.XSElementDecl[]
                   public getSubstitutables(): java.util.Set<com.sun.xml.internal.xsom.XSElementDecl>
                   public canBeSubstitutedBy(arg0: com.sun.xml.internal.xsom.XSElementDecl): boolean
                   public getDefaultValue(): com.sun.xml.internal.xsom.XmlString
                   public getFixedValue(): com.sun.xml.internal.xsom.XmlString
                   public getForm(): java.lang.Boolean
               }
               interface XSAttributeDecl extends com.sun.xml.internal.xsom.XSDeclaration {
                   public getType(): com.sun.xml.internal.xsom.XSSimpleType
                   public getDefaultValue(): com.sun.xml.internal.xsom.XmlString
                   public getFixedValue(): com.sun.xml.internal.xsom.XmlString
               }
               interface XSAttGroupDecl extends com.sun.xml.internal.xsom.XSAttContainer {
               }
               interface XSAttContainer extends com.sun.xml.internal.xsom.XSDeclaration {
                   public getAttributeWildcard(): com.sun.xml.internal.xsom.XSWildcard
                   public getAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                   public iterateAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeUse>
                   public getAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.XSAttributeUse>
                   public getDeclaredAttributeUse(arg0: java.lang.String, arg1: java.lang.String): com.sun.xml.internal.xsom.XSAttributeUse
                   public iterateDeclaredAttributeUses(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttributeUse>
                   public getDeclaredAttributeUses(): java.util.Collection<com.sun.xml.internal.xsom.XSAttributeUse>
                   public iterateAttGroups(): java.util.Iterator<com.sun.xml.internal.xsom.XSAttGroupDecl>
                   public getAttGroups(): java.util.Collection<com.sun.xml.internal.xsom.XSAttGroupDecl>
               }
               interface XSType extends com.sun.xml.internal.xsom.XSDeclaration {
                   public static EXTENSION: int
                   public static RESTRICTION: int
                   public static SUBSTITUTION: int
                   public getBaseType(): com.sun.xml.internal.xsom.XSType
                   public getDerivationMethod(): int
                   public isSimpleType(): boolean
                   public isComplexType(): boolean
                   public listSubstitutables(): com.sun.xml.internal.xsom.XSType[]
                   public getRedefinedBy(): com.sun.xml.internal.xsom.XSType
                   public getRedefinedCount(): int
                   public asSimpleType(): com.sun.xml.internal.xsom.XSSimpleType
                   public asComplexType(): com.sun.xml.internal.xsom.XSComplexType
                   public isDerivedFrom(arg0: com.sun.xml.internal.xsom.XSType): boolean
               }
               interface XSSimpleType extends com.sun.xml.internal.xsom.XSType , com.sun.xml.internal.xsom.XSContentType {
                   public getSimpleBaseType(): com.sun.xml.internal.xsom.XSSimpleType
                   public getVariety(): com.sun.xml.internal.xsom.XSVariety
                   public getPrimitiveType(): com.sun.xml.internal.xsom.XSSimpleType
                   public isPrimitive(): boolean
                   public getBaseListType(): com.sun.xml.internal.xsom.XSListSimpleType
                   public getBaseUnionType(): com.sun.xml.internal.xsom.XSUnionSimpleType
                   public isFinal(arg0: com.sun.xml.internal.xsom.XSVariety): boolean
                   getRedefinedBy<T>(...args: any[]): any
                   public getFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
                   public getFacets(arg0: java.lang.String): java.util.List<com.sun.xml.internal.xsom.XSFacet>
                   public visit(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor): void
                   public apply<T>(arg0: com.sun.xml.internal.xsom.visitor.XSSimpleTypeFunction<T>): T
                   public isRestriction(): boolean
                   public isList(): boolean
                   public isUnion(): boolean
                   public asRestriction(): com.sun.xml.internal.xsom.XSRestrictionSimpleType
                   public asList(): com.sun.xml.internal.xsom.XSListSimpleType
                   public asUnion(): com.sun.xml.internal.xsom.XSUnionSimpleType
               }
               interface XSComplexType extends com.sun.xml.internal.xsom.XSType , com.sun.xml.internal.xsom.XSAttContainer {
                   public isAbstract(): boolean
                   public isFinal(arg0: int): boolean
                   public isSubstitutionProhibited(arg0: int): boolean
                   public getScope(): com.sun.xml.internal.xsom.XSElementDecl
                   public getContentType(): com.sun.xml.internal.xsom.XSContentType
                   public getExplicitContent(): com.sun.xml.internal.xsom.XSContentType
                   public isMixed(): boolean
                   getRedefinedBy<T>(...args: any[]): any
                   public getSubtypes(): java.util.List<com.sun.xml.internal.xsom.XSComplexType>
                   public getElementDecls(): java.util.List<com.sun.xml.internal.xsom.XSElementDecl>
               }
               interface XSNotation extends com.sun.xml.internal.xsom.XSDeclaration {
                   public getPublicId(): java.lang.String
                   public getSystemId(): java.lang.String
               }
               interface XSIdentityConstraint extends com.sun.xml.internal.xsom.XSComponent {
                   public static KEY: short
                   public static KEYREF: short
                   public static UNIQUE: short
                   public getParent(): com.sun.xml.internal.xsom.XSElementDecl
                   public getName(): java.lang.String
                   public getTargetNamespace(): java.lang.String
                   public getCategory(): short
                   public getSelector(): com.sun.xml.internal.xsom.XSXPath
                   public getFields(): java.util.List<com.sun.xml.internal.xsom.XSXPath>
                   public getReferencedKey(): com.sun.xml.internal.xsom.XSIdentityConstraint
               }
               interface XSAttributeUse extends com.sun.xml.internal.xsom.XSComponent {
                   public isRequired(): boolean
                   public getDecl(): com.sun.xml.internal.xsom.XSAttributeDecl
                   public getDefaultValue(): com.sun.xml.internal.xsom.XmlString
                   public getFixedValue(): com.sun.xml.internal.xsom.XmlString
               }
               interface XSFacet extends com.sun.xml.internal.xsom.XSComponent {
                   public static FACET_LENGTH: java.lang.String
                   public static FACET_MINLENGTH: java.lang.String
                   public static FACET_MAXLENGTH: java.lang.String
                   public static FACET_PATTERN: java.lang.String
                   public static FACET_ENUMERATION: java.lang.String
                   public static FACET_TOTALDIGITS: java.lang.String
                   public static FACET_FRACTIONDIGITS: java.lang.String
                   public static FACET_MININCLUSIVE: java.lang.String
                   public static FACET_MAXINCLUSIVE: java.lang.String
                   public static FACET_MINEXCLUSIVE: java.lang.String
                   public static FACET_MAXEXCLUSIVE: java.lang.String
                   public static FACET_WHITESPACE: java.lang.String
                   public getName(): java.lang.String
                   public getValue(): com.sun.xml.internal.xsom.XmlString
                   public isFixed(): boolean
               }
               interface XSXPath extends com.sun.xml.internal.xsom.XSComponent {
                   public getParent(): com.sun.xml.internal.xsom.XSIdentityConstraint
                   public getXPath(): com.sun.xml.internal.xsom.XmlString
               }
               class XmlString$1 implements org.relaxng.datatype.ValidationContext {
                   constructor()
                   public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                   public getBaseUri(): java.lang.String
                   public isUnparsedEntity(arg0: java.lang.String): boolean
                   public isNotation(arg0: java.lang.String): boolean
               }
               class XmlString {
                   public value: java.lang.String
                   public context: org.relaxng.datatype.ValidationContext
                   constructor(...args: any[])
                   public resolvePrefix(arg0: java.lang.String): java.lang.String
                   toString<T>(...args: any[]): any
               }
               class XSVariety {
                   public static ATOMIC: com.sun.xml.internal.xsom.XSVariety
                   public static UNION: com.sun.xml.internal.xsom.XSVariety
                   public static LIST: com.sun.xml.internal.xsom.XSVariety
                   toString<T>(...args: any[]): any
               }
               interface XSListSimpleType extends com.sun.xml.internal.xsom.XSSimpleType {
                   public getItemType(): com.sun.xml.internal.xsom.XSSimpleType
               }
               interface XSUnionSimpleType extends com.sun.xml.internal.xsom.XSSimpleType , java.lang.Iterable<com.sun.xml.internal.xsom.XSSimpleType> {
                   public getMember(arg0: int): com.sun.xml.internal.xsom.XSSimpleType
                   public getMemberSize(): int
               }
               interface XSRestrictionSimpleType extends com.sun.xml.internal.xsom.XSSimpleType {
                   public iterateDeclaredFacets(): java.util.Iterator<com.sun.xml.internal.xsom.XSFacet>
                   getDeclaredFacets<T>(...args: any[]): any
                   public getDeclaredFacet(arg0: java.lang.String): com.sun.xml.internal.xsom.XSFacet
               }
               abstract class SCD {
                   public constructor()
                   public static create(arg0: java.lang.String, arg1: javax.xml.namespace.NamespaceContext): com.sun.xml.internal.xsom.SCD
                   select<T>(...args: any[]): any
                   selectSingle<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }

            }
            namespace rngom {
               namespace parse {
                  namespace xml {
                     class SchemaParser$PrefixMapping {
                         prefix: java.lang.String
                         uri: java.lang.String
                         next: com.sun.xml.internal.rngom.parse.xml.SchemaParser$PrefixMapping
                         constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.xml.SchemaParser$PrefixMapping)
                     }
                     abstract class SchemaParser$AbstractContext extends com.sun.xml.internal.rngom.parse.xml.DtdContext implements com.sun.xml.internal.rngom.parse.Context {
                         prefixMapping: com.sun.xml.internal.rngom.parse.xml.SchemaParser$PrefixMapping
                         constructor(...args: any[])
                         public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                         public prefixes(): java.util.Enumeration
                         public copy(): com.sun.xml.internal.rngom.parse.Context
                     }
                     class SchemaParser$SavedContext extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$AbstractContext {
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser$AbstractContext)
                         public getBaseUri(): java.lang.String
                     }
                     class SchemaParser$ContextImpl extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$AbstractContext {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         public getBaseUri(): java.lang.String
                     }
                     interface SchemaParser$CommentHandler {
                         public comment(arg0: java.lang.String): void
                     }
                     abstract class SchemaParser$Handler implements org.xml.sax.ContentHandler , com.sun.xml.internal.rngom.parse.xml.SchemaParser$CommentHandler {
                         comments: com.sun.xml.internal.rngom.ast.builder.CommentList
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         getComments(): com.sun.xml.internal.rngom.ast.builder.CommentList
                         public comment(arg0: java.lang.String): void
                         public processingInstruction(arg0: java.lang.String, arg1: java.lang.String): void
                         public skippedEntity(arg0: java.lang.String): void
                         public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                         public startDocument(): void
                         public endDocument(): void
                         public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                         public endPrefixMapping(arg0: java.lang.String): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                     }
                     abstract class SchemaParser$State extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$Handler {
                         parent: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         nsInherit: java.lang.String
                         ns: java.lang.String
                         datatypeLibrary: java.lang.String
                         scope: com.sun.xml.internal.rngom.ast.builder.Scope
                         startLocation: com.sun.xml.internal.rngom.ast.om.Location
                         annotations: com.sun.xml.internal.rngom.ast.builder.Annotations
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         set(): void
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setParent(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State): void
                         getNs(): java.lang.String
                         isRelaxNGElement(arg0: java.lang.String): boolean
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         setName(arg0: java.lang.String): void
                         setOtherAttribute(arg0: java.lang.String, arg1: java.lang.String): void
                         endAttributes(): void
                         checkForeignElement(): void
                         attributes(arg0: org.xml.sax.Attributes): void
                         end(): void
                         endChild<T>(...args: any[]): any
                         public startDocument(): void
                         public endDocument(): void
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         isPatternNamespaceURI(arg0: java.lang.String): boolean
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         mergeLeadingComments(): void
                     }
                     class SchemaParser$ForeignElementHandler extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$Handler {
                         nextState: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         builder: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder
                         builderStack: java.util.Stack
                         textBuf: java.lang.StringBuffer
                         textLoc: com.sun.xml.internal.rngom.ast.om.Location
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State, arg2: com.sun.xml.internal.rngom.ast.builder.CommentList)
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         public comment(arg0: java.lang.String): void
                         flushText(): void
                     }
                     class SchemaParser$Skipper extends org.xml.sax.helpers.DefaultHandler implements com.sun.xml.internal.rngom.parse.xml.SchemaParser$CommentHandler {
                         level: int
                         nextState: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State)
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public comment(arg0: java.lang.String): void
                     }
                     abstract class SchemaParser$EmptyContentState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         end(): void
                     }
                     abstract class SchemaParser$PatternContainerState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         childPatterns: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         endChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): void
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         end(): void
                         sendPatternToParent(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): void
                     }
                     class SchemaParser$GroupState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                     }
                     class SchemaParser$ZeroOrMoreState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$OneOrMoreState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$OptionalState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$ListState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$ChoiceState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$InterleaveState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$MixedState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     interface SchemaParser$NameClassRef {
                         public setNameClass(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): void
                     }
                     class SchemaParser$ElementState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState implements com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassRef {
                         nameClass: com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         nameClassWasAttribute: boolean
                         name: java.lang.String
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         setName(arg0: java.lang.String): void
                         public setNameClass(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): void
                         endAttributes(): void
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                     }
                     class SchemaParser$RootState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         grammar: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(...args: any[])
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         checkForeignElement(): void
                         endChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): void
                         isRelaxNGElement(arg0: java.lang.String): boolean
                     }
                     class SchemaParser$NotAllowedState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$EmptyContentState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$EmptyState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$EmptyContentState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$TextState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$EmptyContentState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$ValueState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$EmptyContentState {
                         buf: java.lang.StringBuffer
                         type: java.lang.String
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setOtherAttribute(arg0: java.lang.String, arg1: java.lang.String): void
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         checkForeignElement(): void
                         makePattern<T>(...args: any[]): any
                         end(): void
                     }
                     class SchemaParser$DataState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         type: java.lang.String
                         except: com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         dpb: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setOtherAttribute(arg0: java.lang.String, arg1: java.lang.String): void
                         endAttributes(): void
                         end(): void
                         endChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): void
                     }
                     class SchemaParser$ParamState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setName(arg0: java.lang.String): void
                         endAttributes(): void
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         checkForeignElement(): void
                         end(): void
                     }
                     class SchemaParser$AttributeState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState implements com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassRef {
                         nameClass: com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         nameClassWasAttribute: boolean
                         name: java.lang.String
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setName(arg0: java.lang.String): void
                         public setNameClass(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): void
                         endAttributes(): void
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         end(): void
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                     }
                     abstract class SchemaParser$SinglePatternContainerState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                     }
                     class SchemaParser$GrammarSectionState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         section: com.sun.xml.internal.rngom.ast.builder.GrammarSection
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(...args: any[])
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         end(): void
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                     }
                     class SchemaParser$DivState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$GrammarSectionState {
                         div: com.sun.xml.internal.rngom.ast.builder.Div
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.Div)
                         end(): void
                     }
                     class SchemaParser$IncludeState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$GrammarSectionState {
                         href: java.lang.String
                         include: com.sun.xml.internal.rngom.ast.builder.Include
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.Include)
                         setOtherAttribute(arg0: java.lang.String, arg1: java.lang.String): void
                         endAttributes(): void
                         end(): void
                     }
                     class SchemaParser$MergeGrammarState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$GrammarSectionState {
                         grammar: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar)
                         end(): void
                     }
                     class SchemaParser$GrammarState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$GrammarSectionState {
                         grammar: com.sun.xml.internal.rngom.ast.builder.Grammar
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         setParent(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State): void
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         end(): void
                     }
                     class SchemaParser$RefState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$EmptyContentState {
                         name: java.lang.String
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         endAttributes(): void
                         setName(arg0: java.lang.String): void
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$ParentRefState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$RefState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$ExternalRefState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$EmptyContentState {
                         href: java.lang.String
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setOtherAttribute(arg0: java.lang.String, arg1: java.lang.String): void
                         endAttributes(): void
                         makePattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     abstract class SchemaParser$DefinitionState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$PatternContainerState {
                         combine: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine
                         section: com.sun.xml.internal.rngom.ast.builder.GrammarSection
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection)
                         setOtherAttribute(arg0: java.lang.String, arg1: java.lang.String): void
                         buildPattern(arg0: java.util.List<com.sun.xml.internal.rngom.ast.om.ParsedPattern>, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class SchemaParser$DefineState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$DefinitionState {
                         name: java.lang.String
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         setName(arg0: java.lang.String): void
                         endAttributes(): void
                         sendPatternToParent(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): void
                     }
                     class SchemaParser$StartState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$DefinitionState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         sendPatternToParent(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): void
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                     }
                     abstract class SchemaParser$NameClassContainerState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                     }
                     class SchemaParser$NameClassChildState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassContainerState {
                         prevState: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         nameClassRef: com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassRef
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State, arg2: com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassRef)
                         endChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): void
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         end(): void
                     }
                     abstract class SchemaParser$NameClassBaseState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$State {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         makeNameClass(): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         end(): void
                     }
                     class SchemaParser$NameState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassBaseState {
                         buf: java.lang.StringBuffer
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         checkForeignElement(): void
                         makeNameClass(): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                     }
                     class SchemaParser$AnyNameState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassBaseState {
                         except: com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         getContext(): int
                         makeNameClass(): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         makeNameClassNoExcept(): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         makeNameClassExcept(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         endChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): void
                     }
                     class SchemaParser$NsNameState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$AnyNameState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         makeNameClassNoExcept(): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         makeNameClassExcept(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         getContext(): int
                     }
                     class SchemaParser$NameClassChoiceState extends com.sun.xml.internal.rngom.parse.xml.SchemaParser$NameClassContainerState {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(...args: any[])
                         setParent(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser$State): void
                         create(): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         createChildState(arg0: java.lang.String): com.sun.xml.internal.rngom.parse.xml.SchemaParser$State
                         endChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): void
                         endForeignChild(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         end(): void
                     }
                     class SchemaParser$LexicalHandlerImpl extends com.sun.xml.internal.rngom.xml.sax.AbstractLexicalHandler {
                         this$0: com.sun.xml.internal.rngom.parse.xml.SchemaParser
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser)
                         public startDTD(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public endDTD(): void
                         public comment(arg0: char[], arg1: int, arg2: int): void
                     }
                     class SchemaParser {
                         static relaxng10URI: java.lang.String
                         public getParsedPattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         error(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         warning(arg0: java.lang.String): void
                         constructor(arg0: com.sun.xml.internal.rngom.parse.xml.SAXParseable, arg1: org.xml.sax.XMLReader, arg2: org.xml.sax.ErrorHandler, arg3: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg4: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar, arg5: com.sun.xml.internal.rngom.ast.builder.Scope, arg6: java.lang.String)
                         static access$000(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler
                         static access$100(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.ast.builder.SchemaBuilder
                         static access$200(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.ast.om.Location
                         static access$300(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.parse.xml.SchemaParser$ContextImpl
                         static access$402(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: org.xml.sax.Locator): org.xml.sax.Locator
                         static access$500(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): org.xml.sax.XMLReader
                         static access$600(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.parse.Context
                         static access$700(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): java.lang.String
                         static access$800(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String): void
                         static access$900(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String, arg2: java.lang.String): void
                         static access$1000(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String): void
                         static access$1100(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String, arg2: java.lang.String): java.lang.String
                         static access$1200(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         static access$1202(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         static access$1300(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): java.util.Hashtable
                         static access$1400(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         static access$1500(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.ast.builder.NameClassBuilder
                         static access$1600(): java.lang.String
                         static access$1700(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         static access$702(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String): java.lang.String
                         static access$1800(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String): java.lang.String
                         static access$1900(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser, arg1: java.lang.String): java.lang.String
                         static access$2000(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): com.sun.xml.internal.rngom.parse.xml.SAXParseable
                         static access$2100(arg0: com.sun.xml.internal.rngom.parse.xml.SchemaParser): java.util.Hashtable
                     }
                     abstract class DtdContext implements org.xml.sax.DTDHandler , org.relaxng.datatype.ValidationContext {
                         constructor(...args: any[])
                         public notationDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public unparsedEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public isNotation(arg0: java.lang.String): boolean
                         public isUnparsedEntity(arg0: java.lang.String): boolean
                         public clearDtdContext(): void
                     }
                     class SAXParseable implements com.sun.xml.internal.rngom.parse.Parseable {
                         xrc: com.sun.xml.internal.rngom.xml.sax.XMLReaderCreator
                         eh: org.xml.sax.ErrorHandler
                         constructor(...args: any[])
                         public parse(arg0: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public parseInclude(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg2: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar, arg3: java.lang.String): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public parseExternal(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg2: com.sun.xml.internal.rngom.ast.builder.Scope, arg3: java.lang.String): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         static toBuildException(arg0: org.xml.sax.SAXException): com.sun.xml.internal.rngom.ast.builder.BuildException
                     }

                  }
                  namespace compact {
                     class UCode_UCodeESC_CharStream {
                         public static staticFlag: boolean
                         public bufpos: int
                         bufsize: int
                         available: int
                         tokenBegin: int
                         static hexval(arg0: char): int
                         public BeginToken(): char
                         public readChar(): char
                         public getColumn(): int
                         public getLine(): int
                         public getEndColumn(): int
                         public getEndLine(): int
                         public getBeginColumn(): int
                         public getBeginLine(): int
                         public backup(arg0: int): void
                         constructor(...args: any[])
                         ReInit<T>(...args: any[]): any
                         public GetImage(): java.lang.String
                         public GetSuffix(arg0: int): char[]
                         public Done(): void
                         public adjustBeginLineColumn(arg0: int, arg1: int): void
                     }
                     class EOFException extends java.io.IOException {
                         public constructor()
                     }
                     class TokenMgrError extends java.lang.Error {
                         static LEXICAL_ERROR: int
                         static STATIC_LEXER_ERROR: int
                         static INVALID_LEXICAL_STATE: int
                         static LOOP_DETECTED: int
                         errorCode: int
                         protected static addEscapes(arg0: java.lang.String): java.lang.String
                         protected static LexicalError(arg0: boolean, arg1: int, arg2: int, arg3: int, arg4: java.lang.String, arg5: char): java.lang.String
                         public getMessage(): java.lang.String
                         constructor(...args: any[])
                     }
                     class Token implements java.io.Serializable {
                         public kind: int
                         public beginLine: int
                         public beginColumn: int
                         public endLine: int
                         public endColumn: int
                         public image: java.lang.String
                         public next: com.sun.xml.internal.rngom.parse.compact.Token
                         public specialToken: com.sun.xml.internal.rngom.parse.compact.Token
                         public getValue(): java.lang.Object
                         constructor(...args: any[])
                         toString<T>(...args: any[]): any
                         newToken<T>(...args: any[]): any
                     }
                     class ParseException extends java.lang.Exception {
                         public currentToken: com.sun.xml.internal.rngom.parse.compact.Token
                         public expectedTokenSequences: int[][]
                         public tokenImage: java.lang.String[]
                         protected eol: java.lang.String
                         constructor(...args: any[])
                         static add_escapes(arg0: java.lang.String): java.lang.String
                     }
                     class JavaCharStream {
                         public static staticFlag: boolean
                         public bufpos: int
                         bufsize: int
                         available: int
                         tokenBegin: int
                         protected bufline: int[]
                         protected bufcolumn: int[]
                         protected column: int
                         protected line: int
                         protected prevCharIsCR: boolean
                         protected prevCharIsLF: boolean
                         protected inputStream: java.io.Reader
                         protected nextCharBuf: char[]
                         protected buffer: char[]
                         protected maxNextCharInd: int
                         protected nextCharInd: int
                         protected inBuf: int
                         protected tabSize: int
                         static hexval(arg0: char): int
                         protected setTabSize(arg0: int): void
                         protected getTabSize(arg0: int): int
                         protected ExpandBuff(arg0: boolean): void
                         protected FillBuff(): void
                         protected ReadByte(): char
                         public BeginToken(): char
                         protected AdjustBuffSize(): void
                         protected UpdateLineColumn(arg0: char): void
                         public readChar(): char
                         public getColumn(): int
                         public getLine(): int
                         public getEndColumn(): int
                         public getEndLine(): int
                         public getBeginColumn(): int
                         public getBeginLine(): int
                         public backup(arg0: int): void
                         constructor(...args: any[])
                         ReInit<T>(...args: any[]): any
                         public GetImage(): java.lang.String
                         public GetSuffix(arg0: int): char[]
                         public Done(): void
                         public adjustBeginLineColumn(arg0: int, arg1: int): void
                     }
                     class EscapeSyntaxException extends java.lang.RuntimeException {
                         constructor(arg0: java.lang.String, arg1: int, arg2: int)
                         getKey(): java.lang.String
                         getLineNumber(): int
                         getColumnNumber(): int
                     }
                     class CompactSyntaxTokenManager implements com.sun.xml.internal.rngom.parse.compact.CompactSyntaxConstants {
                         public debugStream: java.io.PrintStream
                         static jjbitVec0: long[]
                         static jjbitVec2: long[]
                         static jjbitVec3: long[]
                         static jjbitVec4: long[]
                         static jjbitVec5: long[]
                         static jjbitVec6: long[]
                         static jjbitVec7: long[]
                         static jjbitVec8: long[]
                         static jjbitVec9: long[]
                         static jjbitVec10: long[]
                         static jjbitVec11: long[]
                         static jjbitVec12: long[]
                         static jjbitVec13: long[]
                         static jjbitVec14: long[]
                         static jjbitVec15: long[]
                         static jjbitVec16: long[]
                         static jjbitVec17: long[]
                         static jjbitVec18: long[]
                         static jjbitVec19: long[]
                         static jjbitVec20: long[]
                         static jjbitVec21: long[]
                         static jjbitVec22: long[]
                         static jjbitVec23: long[]
                         static jjbitVec24: long[]
                         static jjbitVec25: long[]
                         static jjbitVec26: long[]
                         static jjbitVec27: long[]
                         static jjbitVec28: long[]
                         static jjbitVec29: long[]
                         static jjbitVec30: long[]
                         static jjbitVec31: long[]
                         static jjbitVec32: long[]
                         static jjbitVec33: long[]
                         static jjbitVec34: long[]
                         static jjbitVec35: long[]
                         static jjbitVec36: long[]
                         static jjbitVec37: long[]
                         static jjbitVec38: long[]
                         static jjbitVec39: long[]
                         static jjbitVec40: long[]
                         static jjbitVec41: long[]
                         static jjnextStates: int[]
                         public static jjstrLiteralImages: java.lang.String[]
                         public static lexStateNames: java.lang.String[]
                         public static jjnewLexState: int[]
                         static jjtoToken: long[]
                         static jjtoSkip: long[]
                         static jjtoSpecial: long[]
                         protected input_stream: com.sun.xml.internal.rngom.parse.compact.JavaCharStream
                         protected curChar: char
                         curLexState: int
                         defaultLexState: int
                         jjnewStateCnt: int
                         jjround: int
                         jjmatchedPos: int
                         jjmatchedKind: int
                         public setDebugStream(arg0: java.io.PrintStream): void
                         constructor(...args: any[])
                         ReInit<T>(...args: any[]): any
                         public SwitchTo(arg0: int): void
                         protected jjFillToken(): com.sun.xml.internal.rngom.parse.compact.Token
                         public getNextToken(): com.sun.xml.internal.rngom.parse.compact.Token
                         SkipLexicalActions(arg0: com.sun.xml.internal.rngom.parse.compact.Token): void
                     }
                     interface CompactSyntaxConstants {
                         public static EOF: int
                         public static NEWLINE: int
                         public static NOT_NEWLINE: int
                         public static WS: int
                         public static DOCUMENTATION: int
                         public static DOCUMENTATION_CONTINUE: int
                         public static SINGLE_LINE_COMMENT: int
                         public static DOCUMENTATION_AFTER_SINGLE_LINE_COMMENT: int
                         public static SINGLE_LINE_COMMENT_CONTINUE: int
                         public static BASE_CHAR: int
                         public static IDEOGRAPHIC: int
                         public static LETTER: int
                         public static COMBINING_CHAR: int
                         public static DIGIT: int
                         public static EXTENDER: int
                         public static NMSTART: int
                         public static NMCHAR: int
                         public static NCNAME: int
                         public static IDENTIFIER: int
                         public static ESCAPED_IDENTIFIER: int
                         public static PREFIX_STAR: int
                         public static PREFIXED_NAME: int
                         public static LITERAL: int
                         public static FANNOTATE: int
                         public static ILLEGAL_CHAR: int
                         public static DEFAULT: int
                         public static AFTER_SINGLE_LINE_COMMENT: int
                         public static AFTER_DOCUMENTATION: int
                         public static tokenImage: java.lang.String[]
                     }
                     class CompactSyntax$LocatedString {
                         this$0: com.sun.xml.internal.rngom.parse.compact.CompactSyntax
                         constructor(arg0: com.sun.xml.internal.rngom.parse.compact.CompactSyntax, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.compact.Token)
                         getString(): java.lang.String
                         getLocation(): com.sun.xml.internal.rngom.ast.om.Location
                         getToken(): com.sun.xml.internal.rngom.parse.compact.Token
                     }
                     class CompactSyntax$LookaheadSuccess extends java.lang.Error {
                         constructor(arg0: com.sun.xml.internal.rngom.parse.compact.CompactSyntax$1)
                     }
                     class CompactSyntax$JJCalls {
                         gen: int
                         first: com.sun.xml.internal.rngom.parse.compact.Token
                         arg: int
                         next: com.sun.xml.internal.rngom.parse.compact.CompactSyntax$JJCalls
                         constructor()
                     }
                     class CompactSyntax$1 {
                     }
                     class CompactSyntax implements com.sun.xml.internal.rngom.parse.Context , com.sun.xml.internal.rngom.parse.compact.CompactSyntaxConstants {
                         public token_source: com.sun.xml.internal.rngom.parse.compact.CompactSyntaxTokenManager
                         jj_input_stream: com.sun.xml.internal.rngom.parse.compact.JavaCharStream
                         public token: com.sun.xml.internal.rngom.parse.compact.Token
                         public jj_nt: com.sun.xml.internal.rngom.parse.compact.Token
                         constructor(...args: any[])
                         parse(arg0: com.sun.xml.internal.rngom.ast.builder.Scope): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         parseInclude(arg0: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         makeLocation(arg0: com.sun.xml.internal.rngom.parse.compact.Token): com.sun.xml.internal.rngom.ast.om.Location
                         getCompatibilityPrefix(): java.lang.String
                         public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                         public prefixes(): java.util.Enumeration
                         public getBaseUri(): java.lang.String
                         public isUnparsedEntity(arg0: java.lang.String): boolean
                         public isNotation(arg0: java.lang.String): boolean
                         public copy(): com.sun.xml.internal.rngom.parse.Context
                         public Input(arg0: com.sun.xml.internal.rngom.ast.builder.Scope): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public TopLevelLookahead(): void
                         public LookaheadAfterAnnotations(): void
                         public LookaheadGrammarKeyword(): void
                         public LookaheadDocumentation(): void
                         public LookaheadBody(): void
                         public IncludedGrammar(arg0: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public TopLevelGrammar(arg0: com.sun.xml.internal.rngom.ast.builder.Scope): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public Preamble(): void
                         public NamespaceDecl(): void
                         public NamespaceName(): java.lang.String
                         public DatatypesDecl(): void
                         public AnnotatedPrimaryExpr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.parse.compact.Token[]): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public PrimaryExpr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations, arg3: com.sun.xml.internal.rngom.parse.compact.Token[]): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public EmptyExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public TextExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public NotAllowedExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public Expr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.parse.compact.Token, arg3: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public UnaryExpr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: boolean[], arg3: com.sun.xml.internal.rngom.parse.compact.Token[]): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public ElementExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public AttributeExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public NameClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations[]): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public AnnotateAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public NameClassAlternatives(arg0: int, arg1: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations[]): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public BasicNameClass(arg0: int): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public PrimaryNameClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public OpenNameClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public UnprefixedNameClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public PrefixedNameClass(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public NsNameExceptClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations[]): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public NsName(): com.sun.xml.internal.rngom.parse.compact.CompactSyntax$LocatedString
                         public AnyNameExceptClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations[]): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public ParenNameClass(arg0: int, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public ExceptNameClass(arg0: int): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public ListExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public MixedExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public GrammarExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public ParenExpr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public GrammarBody(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.builder.Annotations
                         public GrammarComponent(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope): void
                         public Definition(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public Start(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public Define(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public AssignOp(): com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine
                         public Include(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public IncludeBody(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.builder.Annotations
                         public IncludeComponent(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope): void
                         public Div(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public IncludeDiv(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public ExternalRefExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public Inherit(): java.lang.String
                         public ParentExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public IdentifierExpr(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public ValueExpr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public DataExpr(arg0: boolean, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations, arg3: com.sun.xml.internal.rngom.parse.compact.Token[]): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public DatatypeName(): com.sun.xml.internal.rngom.parse.compact.Token
                         public Identifier(): com.sun.xml.internal.rngom.parse.compact.CompactSyntax$LocatedString
                         public Prefix(): java.lang.String
                         public UnprefixedName(): com.sun.xml.internal.rngom.parse.compact.CompactSyntax$LocatedString
                         public Params(arg0: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder): void
                         public Param(arg0: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder): void
                         public Except(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.parse.compact.Token[]): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public Documentation(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         public Annotations(): com.sun.xml.internal.rngom.ast.builder.Annotations
                         public AnnotationAttribute(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public PrefixedAnnotationAttribute(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations, arg1: boolean): void
                         public UnprefixedAnnotationAttribute(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public AnnotationElement(arg0: boolean): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         public AnnotationElementNotKeyword(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         public PrefixedAnnotationElement(arg0: boolean): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         public UnprefixedAnnotationElement(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         public IdentifierAnnotationElement(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         public AnnotationElementContent(arg0: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder): void
                         public AnnotationElementLiteral(arg0: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder): void
                         public Literal(): java.lang.String
                         public LocatedLiteral(): com.sun.xml.internal.rngom.parse.compact.CompactSyntax$LocatedString
                         public Keyword(): com.sun.xml.internal.rngom.parse.compact.Token
                         ReInit<T>(...args: any[]): any
                         public getNextToken(): com.sun.xml.internal.rngom.parse.compact.Token
                         public getToken(arg0: int): com.sun.xml.internal.rngom.parse.compact.Token
                         public generateParseException(): com.sun.xml.internal.rngom.parse.compact.ParseException
                         public enable_tracing(): void
                         public disable_tracing(): void
                     }
                     class CompactParseable implements com.sun.xml.internal.rngom.parse.Parseable {
                         public constructor(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.ErrorHandler)
                         public parse(arg0: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public parseInclude(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg2: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar, arg3: java.lang.String): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public parseExternal(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg2: com.sun.xml.internal.rngom.ast.builder.Scope, arg3: java.lang.String): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }

                  }
                  interface Context extends org.relaxng.datatype.ValidationContext {
                      public prefixes(): java.util.Enumeration
                      public copy(): com.sun.xml.internal.rngom.parse.Context
                  }
                  interface Parseable {
                      public parse<P extends com.sun.xml.internal.rngom.ast.om.ParsedPattern>(arg0: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder<any, P, any, any, any, any>): P
                      public parseInclude<P extends com.sun.xml.internal.rngom.ast.om.ParsedPattern>(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder<any, P, any, any, any, any>, arg2: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar<P, any, any, any, any>, arg3: java.lang.String): P
                      public parseExternal<P extends com.sun.xml.internal.rngom.ast.om.ParsedPattern>(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder<any, P, any, any, any, any>, arg2: com.sun.xml.internal.rngom.ast.builder.Scope, arg3: java.lang.String): P
                  }
                  class IllegalSchemaException extends java.lang.Exception {
                      public constructor()
                  }
                  namespace host {
                     class ScopeHost extends com.sun.xml.internal.rngom.parse.host.GrammarSectionHost implements com.sun.xml.internal.rngom.ast.builder.Scope {
                         protected lhs: com.sun.xml.internal.rngom.ast.builder.Scope
                         protected rhs: com.sun.xml.internal.rngom.ast.builder.Scope
                         protected constructor(arg0: com.sun.xml.internal.rngom.ast.builder.Scope, arg1: com.sun.xml.internal.rngom.ast.builder.Scope)
                         public makeParentRef(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeRef(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class GrammarSectionHost extends com.sun.xml.internal.rngom.parse.host.Base implements com.sun.xml.internal.rngom.ast.builder.GrammarSection {
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.GrammarSection, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection)
                         public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public makeDiv(): com.sun.xml.internal.rngom.ast.builder.Div
                         public makeInclude(): com.sun.xml.internal.rngom.ast.builder.Include
                         public topLevelAnnotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         public topLevelComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                     }
                     class Base {
                         public constructor()
                         cast<T>(...args: any[]): any
                     }
                     class AnnotationsHost extends com.sun.xml.internal.rngom.parse.host.Base implements com.sun.xml.internal.rngom.ast.builder.Annotations {
                         lhs: com.sun.xml.internal.rngom.ast.builder.Annotations
                         rhs: com.sun.xml.internal.rngom.ast.builder.Annotations
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.Annotations, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations)
                         public addAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location): void
                         public addComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                         public addElement(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         public addLeadingComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                     }
                     class LocationHost implements com.sun.xml.internal.rngom.ast.om.Location {
                         lhs: com.sun.xml.internal.rngom.ast.om.Location
                         rhs: com.sun.xml.internal.rngom.ast.om.Location
                         constructor(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.om.Location)
                     }
                     class SchemaBuilderHost extends com.sun.xml.internal.rngom.parse.host.Base implements com.sun.xml.internal.rngom.ast.builder.SchemaBuilder {
                         lhs: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder
                         rhs: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder
                         public constructor(arg0: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder)
                         public annotate(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public annotateAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public commentAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.builder.CommentList): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public expandPattern(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public getNameClassBuilder(): com.sun.xml.internal.rngom.ast.builder.NameClassBuilder
                         public makeAnnotations(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList, arg1: com.sun.xml.internal.rngom.parse.Context): com.sun.xml.internal.rngom.ast.builder.Annotations
                         public makeAttribute(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg2: com.sun.xml.internal.rngom.ast.om.Location, arg3: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeChoice(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeCommentList(): com.sun.xml.internal.rngom.ast.builder.CommentList
                         public makeDataPatternBuilder(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.ast.om.Location): com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder
                         public makeElement(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg2: com.sun.xml.internal.rngom.ast.om.Location, arg3: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeElementAnnotationBuilder(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.CommentList, arg5: com.sun.xml.internal.rngom.parse.Context): com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder
                         public makeEmpty(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeErrorPattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeExternalRef(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.builder.Scope, arg4: com.sun.xml.internal.rngom.ast.om.Location, arg5: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeGrammar(arg0: com.sun.xml.internal.rngom.ast.builder.Scope): com.sun.xml.internal.rngom.ast.builder.Grammar
                         public makeGroup(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeInterleave(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeList(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeLocation(arg0: java.lang.String, arg1: int, arg2: int): com.sun.xml.internal.rngom.ast.om.Location
                         public makeMixed(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeNotAllowed(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeOneOrMore(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeZeroOrMore(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeOptional(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeText(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public makeValue(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.parse.Context, arg4: java.lang.String, arg5: com.sun.xml.internal.rngom.ast.om.Location, arg6: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public usesComments(): boolean
                     }
                     class ParsedPatternHost implements com.sun.xml.internal.rngom.ast.om.ParsedPattern {
                         public lhs: com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         public rhs: com.sun.xml.internal.rngom.ast.om.ParsedPattern
                         constructor(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern)
                     }
                     class ParsedNameClassHost implements com.sun.xml.internal.rngom.ast.om.ParsedNameClass {
                         lhs: com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         rhs: com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         constructor(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.om.ParsedNameClass)
                     }
                     class ParsedElementAnnotationHost implements com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation {
                         lhs: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         rhs: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                         constructor(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation, arg1: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation)
                     }
                     class NameClassBuilderHost extends com.sun.xml.internal.rngom.parse.host.Base implements com.sun.xml.internal.rngom.ast.builder.NameClassBuilder {
                         lhs: com.sun.xml.internal.rngom.ast.builder.NameClassBuilder
                         rhs: com.sun.xml.internal.rngom.ast.builder.NameClassBuilder
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.NameClassBuilder, arg1: com.sun.xml.internal.rngom.ast.builder.NameClassBuilder)
                         public annotate(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public annotateAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public commentAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.builder.CommentList): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public makeChoice(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         public makeName(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                         makeNsName<T>(...args: any[]): any
                         makeAnyName<T>(...args: any[]): any
                         public makeErrorNameClass(): com.sun.xml.internal.rngom.ast.om.ParsedNameClass
                     }
                     class IncludeHost extends com.sun.xml.internal.rngom.parse.host.GrammarSectionHost implements com.sun.xml.internal.rngom.ast.builder.Include {
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.Include, arg1: com.sun.xml.internal.rngom.ast.builder.Include)
                         public endInclude(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                     }
                     class GrammarHost extends com.sun.xml.internal.rngom.parse.host.ScopeHost implements com.sun.xml.internal.rngom.ast.builder.Grammar {
                         lhs: com.sun.xml.internal.rngom.ast.builder.Grammar
                         rhs: com.sun.xml.internal.rngom.ast.builder.Grammar
                         public constructor(arg0: com.sun.xml.internal.rngom.ast.builder.Grammar, arg1: com.sun.xml.internal.rngom.ast.builder.Grammar)
                         public endGrammar(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }
                     class ElementAnnotationBuilderHost extends com.sun.xml.internal.rngom.parse.host.AnnotationsHost implements com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder {
                         lhs: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder
                         rhs: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder, arg1: com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder)
                         public addText(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                         public makeElementAnnotation(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                     }
                     class DivHost extends com.sun.xml.internal.rngom.parse.host.GrammarSectionHost implements com.sun.xml.internal.rngom.ast.builder.Div {
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.Div, arg1: com.sun.xml.internal.rngom.ast.builder.Div)
                         public endDiv(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                     }
                     class DataPatternBuilderHost extends com.sun.xml.internal.rngom.parse.host.Base implements com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder {
                         lhs: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder
                         rhs: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder, arg1: com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder)
                         public addParam(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.Context, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location, arg5: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                         public annotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                         makePattern<T>(...args: any[]): any
                     }
                     class CommentListHost extends com.sun.xml.internal.rngom.parse.host.Base implements com.sun.xml.internal.rngom.ast.builder.CommentList {
                         lhs: com.sun.xml.internal.rngom.ast.builder.CommentList
                         rhs: com.sun.xml.internal.rngom.ast.builder.CommentList
                         constructor(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList, arg1: com.sun.xml.internal.rngom.ast.builder.CommentList)
                         public addComment(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location): void
                     }

                  }

               }
               namespace dt {
                  namespace builtin {
                     class CompatibilityDatatypeLibrary implements org.relaxng.datatype.DatatypeLibrary {
                         constructor(arg0: org.relaxng.datatype.DatatypeLibraryFactory)
                         public createDatatypeBuilder(arg0: java.lang.String): org.relaxng.datatype.DatatypeBuilder
                         public createDatatype(arg0: java.lang.String): org.relaxng.datatype.Datatype
                     }
                     class BuiltinDatatypeLibraryFactory implements org.relaxng.datatype.DatatypeLibraryFactory {
                         public constructor(arg0: org.relaxng.datatype.DatatypeLibraryFactory)
                         public createDatatypeLibrary(arg0: java.lang.String): org.relaxng.datatype.DatatypeLibrary
                     }
                     class BuiltinDatatypeLibrary implements org.relaxng.datatype.DatatypeLibrary {
                         constructor(arg0: org.relaxng.datatype.DatatypeLibraryFactory)
                         public createDatatypeBuilder(arg0: java.lang.String): org.relaxng.datatype.DatatypeBuilder
                         public createDatatype(arg0: java.lang.String): org.relaxng.datatype.Datatype
                     }
                     class BuiltinDatatypeBuilder implements org.relaxng.datatype.DatatypeBuilder {
                         constructor(arg0: org.relaxng.datatype.Datatype)
                         public addParameter(arg0: java.lang.String, arg1: java.lang.String, arg2: org.relaxng.datatype.ValidationContext): void
                         public createDatatype(): org.relaxng.datatype.Datatype
                     }

                  }
                  class DoNothingDatatypeLibraryFactoryImpl$1$1$1 implements org.relaxng.datatype.Datatype {
                      this$2: com.sun.xml.internal.rngom.dt.DoNothingDatatypeLibraryFactoryImpl$1$1
                      constructor(arg0: com.sun.xml.internal.rngom.dt.DoNothingDatatypeLibraryFactoryImpl$1$1)
                      public isValid(arg0: java.lang.String, arg1: org.relaxng.datatype.ValidationContext): boolean
                      public checkValid(arg0: java.lang.String, arg1: org.relaxng.datatype.ValidationContext): void
                      public createStreamingValidator(arg0: org.relaxng.datatype.ValidationContext): org.relaxng.datatype.DatatypeStreamingValidator
                      public createValue(arg0: java.lang.String, arg1: org.relaxng.datatype.ValidationContext): java.lang.Object
                      public sameValue(arg0: java.lang.Object, arg1: java.lang.Object): boolean
                      public valueHashCode(arg0: java.lang.Object): int
                      public getIdType(): int
                      public isContextDependent(): boolean
                  }
                  class DoNothingDatatypeLibraryFactoryImpl$1$1 implements org.relaxng.datatype.DatatypeBuilder {
                      this$1: com.sun.xml.internal.rngom.dt.DoNothingDatatypeLibraryFactoryImpl$1
                      constructor(arg0: com.sun.xml.internal.rngom.dt.DoNothingDatatypeLibraryFactoryImpl$1)
                      public addParameter(arg0: java.lang.String, arg1: java.lang.String, arg2: org.relaxng.datatype.ValidationContext): void
                      public createDatatype(): org.relaxng.datatype.Datatype
                  }
                  class DoNothingDatatypeLibraryFactoryImpl$1 implements org.relaxng.datatype.DatatypeLibrary {
                      this$0: com.sun.xml.internal.rngom.dt.DoNothingDatatypeLibraryFactoryImpl
                      constructor(arg0: com.sun.xml.internal.rngom.dt.DoNothingDatatypeLibraryFactoryImpl)
                      public createDatatype(arg0: java.lang.String): org.relaxng.datatype.Datatype
                      public createDatatypeBuilder(arg0: java.lang.String): org.relaxng.datatype.DatatypeBuilder
                  }
                  class DoNothingDatatypeLibraryFactoryImpl implements org.relaxng.datatype.DatatypeLibraryFactory {
                      public constructor()
                      public createDatatypeLibrary(arg0: java.lang.String): org.relaxng.datatype.DatatypeLibrary
                  }
                  class CascadingDatatypeLibraryFactory implements org.relaxng.datatype.DatatypeLibraryFactory {
                      public constructor(arg0: org.relaxng.datatype.DatatypeLibraryFactory, arg1: org.relaxng.datatype.DatatypeLibraryFactory)
                      public createDatatypeLibrary(arg0: java.lang.String): org.relaxng.datatype.DatatypeLibrary
                  }
                  class CachedDatatypeLibraryFactory implements org.relaxng.datatype.DatatypeLibraryFactory {
                      public constructor(arg0: org.relaxng.datatype.DatatypeLibraryFactory)
                      public createDatatypeLibrary(arg0: java.lang.String): org.relaxng.datatype.DatatypeLibrary
                  }

               }
               namespace binary {
                  namespace visitor {
                     class PatternWalker implements com.sun.xml.internal.rngom.binary.visitor.PatternVisitor {
                         public constructor()
                         public visitEmpty(): void
                         public visitNotAllowed(): void
                         public visitError(): void
                         public visitGroup(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         protected visitBinary(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitInterleave(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitChoice(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitOneOrMore(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitElement(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitAttribute(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitData(arg0: org.relaxng.datatype.Datatype): void
                         public visitDataExcept(arg0: org.relaxng.datatype.Datatype, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitValue(arg0: org.relaxng.datatype.Datatype, arg1: java.lang.Object): void
                         public visitText(): void
                         public visitList(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitAfter(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                     }
                     interface PatternVisitor {
                         public visitEmpty(): void
                         public visitNotAllowed(): void
                         public visitError(): void
                         public visitAfter(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitGroup(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitInterleave(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitChoice(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitOneOrMore(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitElement(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitAttribute(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitData(arg0: org.relaxng.datatype.Datatype): void
                         public visitDataExcept(arg0: org.relaxng.datatype.Datatype, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitValue(arg0: org.relaxng.datatype.Datatype, arg1: java.lang.Object): void
                         public visitText(): void
                         public visitList(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                     }
                     interface PatternFunction {
                         public caseEmpty(arg0: com.sun.xml.internal.rngom.binary.EmptyPattern): java.lang.Object
                         public caseNotAllowed(arg0: com.sun.xml.internal.rngom.binary.NotAllowedPattern): java.lang.Object
                         public caseError(arg0: com.sun.xml.internal.rngom.binary.ErrorPattern): java.lang.Object
                         public caseGroup(arg0: com.sun.xml.internal.rngom.binary.GroupPattern): java.lang.Object
                         public caseInterleave(arg0: com.sun.xml.internal.rngom.binary.InterleavePattern): java.lang.Object
                         public caseChoice(arg0: com.sun.xml.internal.rngom.binary.ChoicePattern): java.lang.Object
                         public caseOneOrMore(arg0: com.sun.xml.internal.rngom.binary.OneOrMorePattern): java.lang.Object
                         public caseElement(arg0: com.sun.xml.internal.rngom.binary.ElementPattern): java.lang.Object
                         public caseAttribute(arg0: com.sun.xml.internal.rngom.binary.AttributePattern): java.lang.Object
                         public caseData(arg0: com.sun.xml.internal.rngom.binary.DataPattern): java.lang.Object
                         public caseDataExcept(arg0: com.sun.xml.internal.rngom.binary.DataExceptPattern): java.lang.Object
                         public caseValue(arg0: com.sun.xml.internal.rngom.binary.ValuePattern): java.lang.Object
                         public caseText(arg0: com.sun.xml.internal.rngom.binary.TextPattern): java.lang.Object
                         public caseList(arg0: com.sun.xml.internal.rngom.binary.ListPattern): java.lang.Object
                         public caseRef(arg0: com.sun.xml.internal.rngom.binary.RefPattern): java.lang.Object
                         public caseAfter(arg0: com.sun.xml.internal.rngom.binary.AfterPattern): java.lang.Object
                     }
                     class ChildElementFinder$Element {
                         public nc: com.sun.xml.internal.rngom.nc.NameClass
                         public content: com.sun.xml.internal.rngom.binary.Pattern
                         public constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern)
                         public equals(arg0: java.lang.Object): boolean
                         public hashCode(): int
                     }
                     class ChildElementFinder extends com.sun.xml.internal.rngom.binary.visitor.PatternWalker {
                         public constructor()
                         public getChildren(): java.util.Set
                         public visitElement(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitAttribute(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern): void
                         public visitList(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                     }

                  }
                  abstract class Pattern implements com.sun.xml.internal.rngom.ast.om.ParsedPattern {
                      static TEXT_HASH_CODE: int
                      static ERROR_HASH_CODE: int
                      static EMPTY_HASH_CODE: int
                      static NOT_ALLOWED_HASH_CODE: int
                      static CHOICE_HASH_CODE: int
                      static GROUP_HASH_CODE: int
                      static INTERLEAVE_HASH_CODE: int
                      static ONE_OR_MORE_HASH_CODE: int
                      static ELEMENT_HASH_CODE: int
                      static VALUE_HASH_CODE: int
                      static ATTRIBUTE_HASH_CODE: int
                      static DATA_HASH_CODE: int
                      static LIST_HASH_CODE: int
                      static AFTER_HASH_CODE: int
                      static EMPTY_CONTENT_TYPE: int
                      static ELEMENT_CONTENT_TYPE: int
                      static MIXED_CONTENT_TYPE: int
                      static DATA_CONTENT_TYPE: int
                      static START_CONTEXT: int
                      static ELEMENT_CONTEXT: int
                      static ELEMENT_REPEAT_CONTEXT: int
                      static ELEMENT_REPEAT_GROUP_CONTEXT: int
                      static ELEMENT_REPEAT_INTERLEAVE_CONTEXT: int
                      static ATTRIBUTE_CONTEXT: int
                      static LIST_CONTEXT: int
                      static DATA_EXCEPT_CONTEXT: int
                      combineHashCode<T>(...args: any[]): any
                      constructor(...args: any[])
                      checkRecursion(arg0: int): void
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      public isNullable(): boolean
                      isNotAllowed(): boolean
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      patternHashCode(): int
                      getContentType(): int
                      containsChoice(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      static contentTypeGroupable(arg0: int, arg1: int): boolean
                  }
                  class SchemaPatternBuilder$1 extends com.sun.xml.internal.rngom.binary.NotAllowedPattern {
                      this$0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder
                      constructor(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder)
                      isNotAllowed(): boolean
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class SchemaPatternBuilder extends com.sun.xml.internal.rngom.binary.PatternBuilder {
                      public constructor()
                      public hasIdTypes(): boolean
                      makeElement(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern, arg2: org.xml.sax.Locator): com.sun.xml.internal.rngom.binary.Pattern
                      makeAttribute(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern, arg2: org.xml.sax.Locator): com.sun.xml.internal.rngom.binary.Pattern
                      makeData(arg0: org.relaxng.datatype.Datatype): com.sun.xml.internal.rngom.binary.Pattern
                      makeDataExcept(arg0: org.relaxng.datatype.Datatype, arg1: com.sun.xml.internal.rngom.binary.Pattern, arg2: org.xml.sax.Locator): com.sun.xml.internal.rngom.binary.Pattern
                      makeValue(arg0: org.relaxng.datatype.Datatype, arg1: java.lang.Object): com.sun.xml.internal.rngom.binary.Pattern
                      makeText(): com.sun.xml.internal.rngom.binary.Pattern
                      makeOneOrMore(arg0: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeUnexpandedNotAllowed(): com.sun.xml.internal.rngom.binary.Pattern
                      makeError(): com.sun.xml.internal.rngom.binary.Pattern
                      makeChoice(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeList(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: org.xml.sax.Locator): com.sun.xml.internal.rngom.binary.Pattern
                      makeMixed(arg0: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class PatternBuilder {
                      protected notAllowed: com.sun.xml.internal.rngom.binary.NotAllowedPattern
                      protected interner: com.sun.xml.internal.rngom.binary.PatternInterner
                      constructor(...args: any[])
                      makeEmpty(): com.sun.xml.internal.rngom.binary.Pattern
                      makeNotAllowed(): com.sun.xml.internal.rngom.binary.Pattern
                      makeGroup(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeInterleave(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeChoice(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeOneOrMore(arg0: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeOptional(arg0: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                      makeZeroOrMore(arg0: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class DuplicateAttributeDetector$Alternative {
                      static access$000(arg0: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$Alternative): com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$Alternative
                      static access$100(arg0: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$Alternative): int
                      static access$200(arg0: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$Alternative): int
                      constructor(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$Alternative, arg2: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$1)
                      static access$102(arg0: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector$Alternative, arg1: int): int
                  }
                  class DuplicateAttributeDetector$1 {
                  }
                  class DuplicateAttributeDetector {
                      constructor()
                      addAttribute(arg0: com.sun.xml.internal.rngom.nc.NameClass): boolean
                      startChoice(): void
                      alternative(): void
                      endChoice(): void
                  }
                  class Alphabet {
                      constructor()
                      isEmpty(): boolean
                      addElement(arg0: com.sun.xml.internal.rngom.nc.NameClass): void
                      addAlphabet(arg0: com.sun.xml.internal.rngom.binary.Alphabet): void
                      checkOverlap(arg0: com.sun.xml.internal.rngom.binary.Alphabet): void
                  }
                  class RestrictionViolationException extends java.lang.Exception {
                      constructor(...args: any[])
                      getMessageId(): java.lang.String
                      getLocator(): org.xml.sax.Locator
                      maybeSetLocator(arg0: org.xml.sax.Locator): void
                      getName(): javax.xml.namespace.QName
                  }
                  class TextPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor()
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                  }
                  class PatternInterner {
                      constructor(...args: any[])
                      intern(arg0: com.sun.xml.internal.rngom.binary.Pattern): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class EmptyPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor()
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                  }
                  class NotAllowedPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor()
                      isNotAllowed(): boolean
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                  }
                  class ErrorPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor()
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                  }
                  class GroupPattern extends com.sun.xml.internal.rngom.binary.BinaryPattern {
                      constructor(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern)
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                  }
                  abstract class BinaryPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      protected p1: com.sun.xml.internal.rngom.binary.Pattern
                      protected p2: com.sun.xml.internal.rngom.binary.Pattern
                      constructor(arg0: boolean, arg1: int, arg2: com.sun.xml.internal.rngom.binary.Pattern, arg3: com.sun.xml.internal.rngom.binary.Pattern)
                      checkRecursion(arg0: int): void
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public getOperand1(): com.sun.xml.internal.rngom.binary.Pattern
                      public getOperand2(): com.sun.xml.internal.rngom.binary.Pattern
                      public fillChildren(arg0: java.util.Collection): void
                      public getChildren(): com.sun.xml.internal.rngom.binary.Pattern[]
                  }
                  class InterleavePattern extends com.sun.xml.internal.rngom.binary.BinaryPattern {
                      constructor(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern)
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                  }
                  class ChoicePattern extends com.sun.xml.internal.rngom.binary.BinaryPattern {
                      constructor(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern)
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      containsChoice(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                  }
                  class OneOrMorePattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      p: com.sun.xml.internal.rngom.binary.Pattern
                      constructor(arg0: com.sun.xml.internal.rngom.binary.Pattern)
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      checkRecursion(arg0: int): void
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      getOperand(): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class ElementPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern, arg2: org.xml.sax.Locator)
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      checkRecursion(arg0: int): void
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      setContent(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                      public getContent(): com.sun.xml.internal.rngom.binary.Pattern
                      public getNameClass(): com.sun.xml.internal.rngom.nc.NameClass
                      public getLocator(): org.xml.sax.Locator
                  }
                  class AttributePattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.binary.Pattern, arg2: org.xml.sax.Locator)
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      checkRecursion(arg0: int): void
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      public getContent(): com.sun.xml.internal.rngom.binary.Pattern
                      public getNameClass(): com.sun.xml.internal.rngom.nc.NameClass
                      public getLocator(): org.xml.sax.Locator
                  }
                  class DataPattern extends com.sun.xml.internal.rngom.binary.StringPattern {
                      constructor(arg0: org.relaxng.datatype.Datatype)
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      getDatatype(): org.relaxng.datatype.Datatype
                      allowsAnyString(): boolean
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                  }
                  abstract class StringPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      constructor(arg0: int)
                  }
                  class DataExceptPattern extends com.sun.xml.internal.rngom.binary.DataPattern {
                      constructor(arg0: org.relaxng.datatype.Datatype, arg1: com.sun.xml.internal.rngom.binary.Pattern, arg2: org.xml.sax.Locator)
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      getExcept(): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class ValuePattern extends com.sun.xml.internal.rngom.binary.StringPattern {
                      obj: java.lang.Object
                      dt: org.relaxng.datatype.Datatype
                      constructor(arg0: org.relaxng.datatype.Datatype, arg1: java.lang.Object)
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      getDatatype(): org.relaxng.datatype.Datatype
                      getValue(): java.lang.Object
                  }
                  class ListPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      p: com.sun.xml.internal.rngom.binary.Pattern
                      locator: org.xml.sax.Locator
                      constructor(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: org.xml.sax.Locator)
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      checkRecursion(arg0: int): void
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      checkRestrictions(arg0: int, arg1: com.sun.xml.internal.rngom.binary.DuplicateAttributeDetector, arg2: com.sun.xml.internal.rngom.binary.Alphabet): void
                      getOperand(): com.sun.xml.internal.rngom.binary.Pattern
                  }
                  class RefPattern extends com.sun.xml.internal.rngom.binary.Pattern {
                      static REPLACEMENT_KEEP: byte
                      static REPLACEMENT_REQUIRE: byte
                      static REPLACEMENT_IGNORE: byte
                      static COMBINE_NONE: byte
                      static COMBINE_CHOICE: byte
                      static COMBINE_INTERLEAVE: byte
                      constructor(arg0: java.lang.String)
                      getPattern(): com.sun.xml.internal.rngom.binary.Pattern
                      setPattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): void
                      getRefLocator(): org.xml.sax.Locator
                      setRefLocator(arg0: org.xml.sax.Locator): void
                      checkRecursion(arg0: int): void
                      expand(arg0: com.sun.xml.internal.rngom.binary.SchemaPatternBuilder): com.sun.xml.internal.rngom.binary.Pattern
                      samePattern(arg0: com.sun.xml.internal.rngom.binary.Pattern): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      getReplacementStatus(): byte
                      setReplacementStatus(arg0: byte): void
                      isCombineImplicit(): boolean
                      setCombineImplicit(): void
                      getCombineType(): byte
                      setCombineType(arg0: byte): void
                      getName(): java.lang.String
                  }
                  class AfterPattern extends com.sun.xml.internal.rngom.binary.BinaryPattern {
                      constructor(arg0: com.sun.xml.internal.rngom.binary.Pattern, arg1: com.sun.xml.internal.rngom.binary.Pattern)
                      isNotAllowed(): boolean
                      public apply(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternFunction): java.lang.Object
                      public accept(arg0: com.sun.xml.internal.rngom.binary.visitor.PatternVisitor): void
                  }
                  class SchemaBuilderImpl$OpenIncludes {
                      uri: java.lang.String
                      parent: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$OpenIncludes
                      constructor(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$OpenIncludes)
                  }
                  class SchemaBuilderImpl$DummyDataPatternBuilder implements com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder {
                      this$0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl
                      public addParam(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.Context, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location, arg5: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      makePattern<T>(...args: any[]): any
                      public annotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      constructor(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl, arg1: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$1)
                  }
                  class SchemaBuilderImpl$ValidationContextImpl implements org.relaxng.datatype.ValidationContext {
                      constructor(arg0: org.relaxng.datatype.ValidationContext, arg1: java.lang.String)
                      public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                      public getBaseUri(): java.lang.String
                      public isUnparsedEntity(arg0: java.lang.String): boolean
                      public isNotation(arg0: java.lang.String): boolean
                  }
                  class SchemaBuilderImpl$DataPatternBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder {
                      this$0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl
                      constructor(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl, arg1: org.relaxng.datatype.DatatypeBuilder)
                      public addParam(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.Context, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location, arg5: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      displayParam(arg0: java.lang.String, arg1: int): java.lang.String
                      makePattern<T>(...args: any[]): any
                      public annotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                  }
                  class SchemaBuilderImpl$GrammarImpl implements com.sun.xml.internal.rngom.ast.builder.Grammar , com.sun.xml.internal.rngom.ast.builder.Div , com.sun.xml.internal.rngom.ast.builder.IncludedGrammar {
                      constructor(...args: any[])
                      public endGrammar(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public endDiv(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public endIncludedGrammar(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public topLevelAnnotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      public topLevelComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public makeRef(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeParentRef(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeDiv(): com.sun.xml.internal.rngom.ast.builder.Div
                      public makeInclude(): com.sun.xml.internal.rngom.ast.builder.Include
                      static access$600(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$GrammarImpl, arg1: java.lang.String): com.sun.xml.internal.rngom.binary.RefPattern
                      static access$700(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$GrammarImpl, arg1: com.sun.xml.internal.rngom.binary.RefPattern, arg2: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg3: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg4: com.sun.xml.internal.rngom.ast.om.Location): void
                  }
                  class SchemaBuilderImpl$Override {
                      prp: com.sun.xml.internal.rngom.binary.RefPattern
                      next: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$Override
                      replacementStatus: byte
                      constructor(arg0: com.sun.xml.internal.rngom.binary.RefPattern, arg1: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$Override)
                  }
                  class SchemaBuilderImpl$IncludeImpl implements com.sun.xml.internal.rngom.ast.builder.Include , com.sun.xml.internal.rngom.ast.builder.Div {
                      public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public endDiv(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public topLevelAnnotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      public topLevelComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public makeDiv(): com.sun.xml.internal.rngom.ast.builder.Div
                      public endInclude(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public makeInclude(): com.sun.xml.internal.rngom.ast.builder.Include
                      constructor(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl, arg1: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$GrammarImpl, arg2: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$1)
                  }
                  class SchemaBuilderImpl$1 {
                  }
                  class SchemaBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.SchemaBuilder , com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder , com.sun.xml.internal.rngom.ast.builder.CommentList {
                      static localizer: com.sun.xml.internal.rngom.util.Localizer
                      public expandPattern(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      constructor(...args: any[])
                      public getNameClassBuilder(): com.sun.xml.internal.rngom.ast.builder.NameClassBuilder
                      public makeChoice(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeInterleave(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeGroup(arg0: java.util.List, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeOneOrMore(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeZeroOrMore(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeOptional(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeList(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeMixed(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeEmpty(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeNotAllowed(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeText(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeErrorPattern(): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeAttribute(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg2: com.sun.xml.internal.rngom.ast.om.Location, arg3: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeElement(arg0: com.sun.xml.internal.rngom.ast.om.ParsedNameClass, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg2: com.sun.xml.internal.rngom.ast.om.Location, arg3: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeDataPatternBuilder(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.ast.om.Location): com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder
                      public makeValue(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.parse.Context, arg4: java.lang.String, arg5: com.sun.xml.internal.rngom.ast.om.Location, arg6: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeGrammar(arg0: com.sun.xml.internal.rngom.ast.builder.Scope): com.sun.xml.internal.rngom.ast.builder.Grammar
                      public annotate(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public annotateAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public commentAfter(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg1: com.sun.xml.internal.rngom.ast.builder.CommentList): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeExternalRef(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.builder.Scope, arg4: com.sun.xml.internal.rngom.ast.om.Location, arg5: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeLocation(arg0: java.lang.String, arg1: int, arg2: int): com.sun.xml.internal.rngom.ast.om.Location
                      public makeAnnotations(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList, arg1: com.sun.xml.internal.rngom.parse.Context): com.sun.xml.internal.rngom.ast.builder.Annotations
                      public makeElementAnnotationBuilder(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.CommentList, arg5: com.sun.xml.internal.rngom.parse.Context): com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder
                      public makeCommentList(): com.sun.xml.internal.rngom.ast.builder.CommentList
                      addComment<T>(...args: any[]): any
                      public addAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location): void
                      public addElement(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      public addLeadingComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public makeElementAnnotation(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                      public addText(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public usesComments(): boolean
                      static access$000(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl): com.sun.xml.internal.rngom.binary.SchemaPatternBuilder
                      static access$100(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Locator): void
                      static access$200(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Locator): void
                      static access$300(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl, arg1: java.lang.String, arg2: org.xml.sax.Locator): void
                      static access$800(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl): com.sun.xml.internal.rngom.binary.SchemaBuilderImpl$OpenIncludes
                      static access$1000(arg0: com.sun.xml.internal.rngom.binary.SchemaBuilderImpl): void
                  }

               }
               namespace xml {
                  namespace util {
                     class WellKnownNamespaces {
                         public static XML: java.lang.String
                         public static XMLNS: java.lang.String
                         public static XML_SCHEMA_DATATYPES: java.lang.String
                         public static XML_SCHEMA: java.lang.String
                         public static RELAX_NG_COMPATIBILITY_DATATYPES: java.lang.String
                         public static RELAX_NG: java.lang.String
                         public static RELAX_NG_0_9: java.lang.String
                         public static RELAX_NG_COMPATIBILITY_ANNOTATIONS: java.lang.String
                     }
                     class Naming {
                         public static isName(arg0: java.lang.String): boolean
                         public static isNmtoken(arg0: java.lang.String): boolean
                         public static isNcname(arg0: java.lang.String): boolean
                         public static isQname(arg0: java.lang.String): boolean
                     }
                     abstract class EncodingMap {
                         public constructor()
                         public static getJavaName(arg0: java.lang.String): java.lang.String
                         public static main(arg0: java.lang.String[]): void
                     }

                  }
                  namespace sax {
                     class XmlBaseHandler$Entry {
                         static access$000(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry): int
                         static access$100(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry): com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry
                         constructor(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$1)
                         static access$102(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry, arg1: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry): com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry
                         static access$302(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry, arg1: java.lang.String): java.lang.String
                         static access$402(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry, arg1: java.lang.String): java.lang.String
                         static access$002(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry, arg1: int): int
                         static access$400(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry): java.lang.String
                         static access$300(arg0: com.sun.xml.internal.rngom.xml.sax.XmlBaseHandler$Entry): java.lang.String
                     }
                     class XmlBaseHandler$1 {
                     }
                     class XmlBaseHandler {
                         public constructor()
                         public setLocator(arg0: org.xml.sax.Locator): void
                         public startElement(): void
                         public endElement(): void
                         public xmlBaseAttribute(arg0: java.lang.String): void
                         public getBaseUri(): java.lang.String
                     }
                     interface XMLReaderCreator {
                         public createXMLReader(): org.xml.sax.XMLReader
                     }
                     class JAXPXMLReaderCreator implements com.sun.xml.internal.rngom.xml.sax.XMLReaderCreator {
                         constructor(...args: any[])
                         public createXMLReader(): org.xml.sax.XMLReader
                     }
                     class AbstractLexicalHandler implements org.xml.sax.ext.LexicalHandler {
                         public constructor()
                         public startDTD(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public endDTD(): void
                         public startEntity(arg0: java.lang.String): void
                         public endEntity(arg0: java.lang.String): void
                         public startCDATA(): void
                         public endCDATA(): void
                         public comment(arg0: char[], arg1: int, arg2: int): void
                     }

                  }

               }
               namespace util {
                  abstract class Utf16 {
                      public constructor()
                      public static isSurrogate(arg0: char): boolean
                      public static isSurrogate1(arg0: char): boolean
                      public static isSurrogate2(arg0: char): boolean
                      public static scalarValue(arg0: char, arg1: char): int
                      public static surrogate1(arg0: int): char
                      public static surrogate2(arg0: int): char
                  }
                  class Uri {
                      public constructor()
                      public static isValid(arg0: java.lang.String): boolean
                      public static escapeDisallowedChars(arg0: java.lang.String): java.lang.String
                      public static resolve(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                      public static hasFragmentId(arg0: java.lang.String): boolean
                      public static isAbsolute(arg0: java.lang.String): boolean
                  }
                  class Localizer {
                      constructor(...args: any[])
                      message<T>(...args: any[]): any
                  }

               }
               namespace ast {
                  namespace builder {
                     interface CommentList<L>> {
                         public getNameClassBuilder(): com.sun.xml.internal.rngom.ast.builder.NameClassBuilder<N, E, L, A, CL>
                         public makeChoice(arg0: java.util.List<P>, arg1: L, arg2: A): P
                         public makeInterleave(arg0: java.util.List<P>, arg1: L, arg2: A): P
                         public makeGroup(arg0: java.util.List<P>, arg1: L, arg2: A): P
                         public makeOneOrMore(arg0: P, arg1: L, arg2: A): P
                         public makeZeroOrMore(arg0: P, arg1: L, arg2: A): P
                         public makeOptional(arg0: P, arg1: L, arg2: A): P
                         public makeList(arg0: P, arg1: L, arg2: A): P
                         public makeMixed(arg0: P, arg1: L, arg2: A): P
                         public makeEmpty(arg0: L, arg1: A): P
                         public makeNotAllowed(arg0: L, arg1: A): P
                         public makeText(arg0: L, arg1: A): P
                         public makeAttribute(arg0: N, arg1: P, arg2: L, arg3: A): P
                         public makeElement(arg0: N, arg1: P, arg2: L, arg3: A): P
                         public makeDataPatternBuilder(arg0: java.lang.String, arg1: java.lang.String, arg2: L): com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder
                         public makeValue(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.parse.Context, arg4: java.lang.String, arg5: L, arg6: A): P
                         public makeGrammar(arg0: com.sun.xml.internal.rngom.ast.builder.Scope<P, E, L, A, CL>): com.sun.xml.internal.rngom.ast.builder.Grammar<P, E, L, A, CL>
                         public annotate(arg0: P, arg1: A): P
                         public annotateAfter(arg0: P, arg1: E): P
                         public commentAfter(arg0: P, arg1: CL): P
                         public makeExternalRef(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.builder.Scope<P, E, L, A, CL>, arg4: L, arg5: A): P
                         public makeLocation(arg0: java.lang.String, arg1: int, arg2: int): L
                         public makeAnnotations(arg0: CL, arg1: com.sun.xml.internal.rngom.parse.Context): A
                         public makeElementAnnotationBuilder(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: L, arg4: CL, arg5: com.sun.xml.internal.rngom.parse.Context): com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder<P, E, L, A, CL>
                         public makeCommentList(): CL
                         public makeErrorPattern(): P
                         public usesComments(): boolean
                         public expandPattern(arg0: P): P
                     }
                     interface CommentList<L>> {
                         public addAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: L): void
                         public addElement(arg0: E): void
                         public addComment(arg0: CL): void
                         public addLeadingComment(arg0: CL): void
                     }
                     interface Location> {
                         public addComment(arg0: java.lang.String, arg1: L): void
                     }
                     interface CommentList<L>> {
                         public annotate(arg0: N, arg1: A): N
                         public annotateAfter(arg0: N, arg1: E): N
                         public commentAfter(arg0: N, arg1: CL): N
                         public makeChoice(arg0: java.util.List<N>, arg1: L, arg2: A): N
                         public makeName(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: L, arg4: A): N
                         makeNsName<T>(...args: any[]): any
                         makeAnyName<T>(...args: any[]): any
                         public makeErrorNameClass(): N
                     }
                     interface CommentList<L>> extends com.sun.xml.internal.rngom.ast.builder.GrammarSection<P, E, L, A, CL> , com.sun.xml.internal.rngom.ast.builder.Scope<P, E, L, A, CL> {
                         public endIncludedGrammar(arg0: L, arg1: A): P
                     }
                     class GrammarSection$Combine {
                         toString<T>(...args: any[]): any
                         constructor(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$1)
                     }
                     class GrammarSection$1 {
                     }
                     interface CommentList<L>> {
                         public static COMBINE_CHOICE: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine
                         public static COMBINE_INTERLEAVE: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine
                         public static START: java.lang.String
                         public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: P, arg3: L, arg4: A): void
                         public topLevelAnnotation(arg0: E): void
                         public topLevelComment(arg0: CL): void
                         public makeDiv(): com.sun.xml.internal.rngom.ast.builder.Div<P, E, L, A, CL>
                         public makeInclude(): com.sun.xml.internal.rngom.ast.builder.Include<P, E, L, A, CL>
                     }
                     interface CommentList<L>> extends com.sun.xml.internal.rngom.ast.builder.GrammarSection<P, E, L, A, CL> {
                         public makeParentRef(arg0: java.lang.String, arg1: L, arg2: A): P
                         public makeRef(arg0: java.lang.String, arg1: L, arg2: A): P
                     }
                     class BuildException extends java.lang.RuntimeException {
                         public constructor(arg0: java.lang.Throwable)
                         public getCause(): java.lang.Throwable
                     }
                     interface CommentList<L>> {
                         public addParam(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.Context, arg3: java.lang.String, arg4: L, arg5: A): void
                         public annotation(arg0: E): void
                         makePattern<T>(...args: any[]): any
                     }
                     interface CommentList<L>> extends com.sun.xml.internal.rngom.ast.builder.GrammarSection<P, E, L, A, CL> , com.sun.xml.internal.rngom.ast.builder.Scope<P, E, L, A, CL> {
                         public endGrammar(arg0: L, arg1: A): P
                     }
                     interface CommentList<L>> extends com.sun.xml.internal.rngom.ast.builder.Annotations<E, L, CL> {
                         public addText(arg0: java.lang.String, arg1: L, arg2: CL): void
                         public makeElementAnnotation(): E
                     }
                     interface CommentList<L>> extends com.sun.xml.internal.rngom.ast.builder.GrammarSection<P, E, L, A, CL> {
                         public endDiv(arg0: L, arg1: A): void
                     }
                     interface CommentList<L>> extends com.sun.xml.internal.rngom.ast.builder.GrammarSection<P, E, L, A, CL> {
                         public endInclude(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: L, arg4: A): void
                     }

                  }
                  namespace om {
                     interface ParsedNameClass {
                     }
                     interface ParsedPattern {
                     }
                     interface ParsedElementAnnotation {
                     }
                     interface Location {
                     }

                  }
                  namespace util {
                     class LocatorImpl implements org.xml.sax.Locator , com.sun.xml.internal.rngom.ast.om.Location {
                         public constructor(arg0: java.lang.String, arg1: int, arg2: int)
                         public getPublicId(): java.lang.String
                         public getSystemId(): java.lang.String
                         public getLineNumber(): int
                         public getColumnNumber(): int
                     }
                     class CheckingSchemaBuilder extends com.sun.xml.internal.rngom.parse.host.SchemaBuilderHost {
                         constructor(...args: any[])
                         public expandPattern(arg0: com.sun.xml.internal.rngom.ast.om.ParsedPattern): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                     }

                  }

               }
               namespace nc {
                  class SimpleNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      public name: javax.xml.namespace.QName
                      constructor(...args: any[])
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }
                  class NameClass$1 extends com.sun.xml.internal.rngom.nc.NameClassWalker {
                      val$names: java.util.Set
                      this$0: com.sun.xml.internal.rngom.nc.NameClass
                      constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: java.util.Set)
                      visitName<T>(...args: any[]): any
                  }
                  abstract class NameClass implements com.sun.xml.internal.rngom.ast.om.ParsedNameClass , java.io.Serializable {
                      static SPECIFICITY_NONE: int
                      static SPECIFICITY_ANY_NAME: int
                      static SPECIFICITY_NS_NAME: int
                      static SPECIFICITY_NAME: int
                      public static ANY: com.sun.xml.internal.rngom.nc.NameClass
                      public static NULL: com.sun.xml.internal.rngom.nc.NameClass
                      public constructor()
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                      public listNames(): java.util.Set<javax.xml.namespace.QName>
                      public hasOverlapWith(arg0: com.sun.xml.internal.rngom.nc.NameClass): boolean
                  }
                  interface NameClassVisitor<V> {
                      public visitChoice(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.nc.NameClass): V
                      public visitNsName(arg0: java.lang.String): V
                      public visitNsNameExcept(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.nc.NameClass): V
                      public visitAnyName(): V
                      public visitAnyNameExcept(arg0: com.sun.xml.internal.rngom.nc.NameClass): V
                      public visitName(arg0: javax.xml.namespace.QName): V
                      public visitNull(): V
                  }
                  class OverlapDetector implements com.sun.xml.internal.rngom.nc.NameClassVisitor<java.lang.Void> {
                      static IMPOSSIBLE: java.lang.String
                      visitChoice<T>(...args: any[]): any
                      visitNsName<T>(...args: any[]): any
                      visitNsNameExcept<T>(...args: any[]): any
                      visitAnyName<T>(...args: any[]): any
                      visitAnyNameExcept<T>(...args: any[]): any
                      visitName<T>(...args: any[]): any
                      visitNull<T>(...args: any[]): any
                      static overlap(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.nc.NameClass): boolean
                  }
                  class NullNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      protected constructor()
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }
                  class NsNameExceptNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      public constructor(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.nc.NameClass)
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }
                  class NsNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      public constructor(arg0: java.lang.String)
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }
                  class NameClassWalker implements com.sun.xml.internal.rngom.nc.NameClassVisitor<java.lang.Void> {
                      public constructor()
                      visitChoice<T>(...args: any[]): any
                      visitNsName<T>(...args: any[]): any
                      visitNsNameExcept<T>(...args: any[]): any
                      visitAnyName<T>(...args: any[]): any
                      visitAnyNameExcept<T>(...args: any[]): any
                      visitName<T>(...args: any[]): any
                      visitNull<T>(...args: any[]): any
                  }
                  class CommentList<L>> implements com.sun.xml.internal.rngom.ast.builder.NameClassBuilder<com.sun.xml.internal.rngom.nc.NameClass, E, L, A, CL> {
                      public constructor()
                      makeChoice<T>(...args: any[]): any
                      makeName<T>(...args: any[]): any
                      makeNsName<T>(...args: any[]): any
                      makeAnyName<T>(...args: any[]): any
                      makeErrorNameClass<T>(...args: any[]): any
                      annotate<T>(...args: any[]): any
                      annotateAfter<T>(...args: any[]): any
                      commentAfter<T>(...args: any[]): any
                  }
                  class ChoiceNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      public constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.nc.NameClass)
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }
                  class AnyNameExceptNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      public constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass)
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }
                  class AnyNameClass extends com.sun.xml.internal.rngom.nc.NameClass {
                      protected constructor()
                      public contains(arg0: javax.xml.namespace.QName): boolean
                      public containsSpecificity(arg0: javax.xml.namespace.QName): int
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                      public accept<V>(arg0: com.sun.xml.internal.rngom.nc.NameClassVisitor<V>): V
                      public isOpen(): boolean
                  }

               }
               namespace digested {
                  class PatternParseable$Parser implements com.sun.xml.internal.rngom.digested.DPatternVisitor<com.sun.xml.internal.rngom.ast.om.ParsedPattern> {
                      public constructor(arg0: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder)
                      onAttribute<T>(...args: any[]): any
                      onChoice<T>(...args: any[]): any
                      onData<T>(...args: any[]): any
                      onElement<T>(...args: any[]): any
                      onEmpty<T>(...args: any[]): any
                      onGrammar<T>(...args: any[]): any
                      onGroup<T>(...args: any[]): any
                      onInterleave<T>(...args: any[]): any
                      onList<T>(...args: any[]): any
                      onMixed<T>(...args: any[]): any
                      onNotAllowed<T>(...args: any[]): any
                      onOneOrMore<T>(...args: any[]): any
                      onOptional<T>(...args: any[]): any
                      onRef<T>(...args: any[]): any
                      onText<T>(...args: any[]): any
                      onValue<T>(...args: any[]): any
                      onZeroOrMore<T>(...args: any[]): any
                  }
                  class PatternParseable implements com.sun.xml.internal.rngom.parse.Parseable {
                      public constructor(arg0: com.sun.xml.internal.rngom.digested.DPattern)
                      public parse(arg0: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public parseInclude(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg2: com.sun.xml.internal.rngom.ast.builder.IncludedGrammar, arg3: java.lang.String): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public parseExternal(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.SchemaBuilder, arg2: com.sun.xml.internal.rngom.ast.builder.Scope, arg3: java.lang.String): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                  }
                  abstract class DPattern implements com.sun.xml.internal.rngom.ast.om.ParsedPattern {
                      location: org.xml.sax.Locator
                      annotation: com.sun.xml.internal.rngom.digested.DAnnotation
                      next: com.sun.xml.internal.rngom.digested.DPattern
                      prev: com.sun.xml.internal.rngom.digested.DPattern
                      public constructor()
                      public getLocation(): org.xml.sax.Locator
                      public getAnnotation(): com.sun.xml.internal.rngom.digested.DAnnotation
                      public isNullable(): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor<V>): V
                      public createParseable(): com.sun.xml.internal.rngom.parse.Parseable
                      public isElement(): boolean
                      public isAttribute(): boolean
                  }
                  class DAnnotation$Attribute {
                      constructor(...args: any[])
                      public getNs(): java.lang.String
                      public getLocalName(): java.lang.String
                      public getPrefix(): java.lang.String
                      public getValue(): java.lang.String
                      public getLoc(): org.xml.sax.Locator
                  }
                  class DAnnotation {
                      static EMPTY: com.sun.xml.internal.rngom.digested.DAnnotation
                      attributes: java.util.Map<javax.xml.namespace.QName, com.sun.xml.internal.rngom.digested.DAnnotation$Attribute>
                      contents: java.util.List<org.w3c.dom.Element>
                      public constructor()
                      getAttribute<T>(...args: any[]): any
                      public getAttributes(): java.util.Map<javax.xml.namespace.QName, com.sun.xml.internal.rngom.digested.DAnnotation$Attribute>
                      public getChildren(): java.util.List<org.w3c.dom.Element>
                  }
                  interface DPatternVisitor<V> {
                      public onAttribute(arg0: com.sun.xml.internal.rngom.digested.DAttributePattern): V
                      public onChoice(arg0: com.sun.xml.internal.rngom.digested.DChoicePattern): V
                      public onData(arg0: com.sun.xml.internal.rngom.digested.DDataPattern): V
                      public onElement(arg0: com.sun.xml.internal.rngom.digested.DElementPattern): V
                      public onEmpty(arg0: com.sun.xml.internal.rngom.digested.DEmptyPattern): V
                      public onGrammar(arg0: com.sun.xml.internal.rngom.digested.DGrammarPattern): V
                      public onGroup(arg0: com.sun.xml.internal.rngom.digested.DGroupPattern): V
                      public onInterleave(arg0: com.sun.xml.internal.rngom.digested.DInterleavePattern): V
                      public onList(arg0: com.sun.xml.internal.rngom.digested.DListPattern): V
                      public onMixed(arg0: com.sun.xml.internal.rngom.digested.DMixedPattern): V
                      public onNotAllowed(arg0: com.sun.xml.internal.rngom.digested.DNotAllowedPattern): V
                      public onOneOrMore(arg0: com.sun.xml.internal.rngom.digested.DOneOrMorePattern): V
                      public onOptional(arg0: com.sun.xml.internal.rngom.digested.DOptionalPattern): V
                      public onRef(arg0: com.sun.xml.internal.rngom.digested.DRefPattern): V
                      public onText(arg0: com.sun.xml.internal.rngom.digested.DTextPattern): V
                      public onValue(arg0: com.sun.xml.internal.rngom.digested.DValuePattern): V
                      public onZeroOrMore(arg0: com.sun.xml.internal.rngom.digested.DZeroOrMorePattern): V
                  }
                  class DAttributePattern extends com.sun.xml.internal.rngom.digested.DXmlTokenPattern {
                      public constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass)
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  abstract class DXmlTokenPattern extends com.sun.xml.internal.rngom.digested.DUnaryPattern {
                      public constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass)
                      public getName(): com.sun.xml.internal.rngom.nc.NameClass
                      public isNullable(): boolean
                  }
                  abstract class DUnaryPattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      public constructor()
                      public getChild(): com.sun.xml.internal.rngom.digested.DPattern
                      public setChild(arg0: com.sun.xml.internal.rngom.digested.DPattern): void
                  }
                  class DChoicePattern extends com.sun.xml.internal.rngom.digested.DContainerPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor<V>): V
                  }
                  class DContainerPattern$1 implements java.util.Iterator<com.sun.xml.internal.rngom.digested.DPattern> {
                      next<T>(...args: any[]): any
                      this$0: com.sun.xml.internal.rngom.digested.DContainerPattern
                      constructor(arg0: com.sun.xml.internal.rngom.digested.DContainerPattern)
                      public hasNext(): boolean
                      public remove(): void
                  }
                  abstract class DContainerPattern extends com.sun.xml.internal.rngom.digested.DPattern implements java.lang.Iterable<com.sun.xml.internal.rngom.digested.DPattern> {
                      public constructor()
                      public firstChild(): com.sun.xml.internal.rngom.digested.DPattern
                      public lastChild(): com.sun.xml.internal.rngom.digested.DPattern
                      public countChildren(): int
                      public iterator(): java.util.Iterator<com.sun.xml.internal.rngom.digested.DPattern>
                      add(arg0: com.sun.xml.internal.rngom.digested.DPattern): void
                      static access$000(arg0: com.sun.xml.internal.rngom.digested.DContainerPattern): com.sun.xml.internal.rngom.digested.DPattern
                  }
                  class DDataPattern$Param {
                      name: java.lang.String
                      value: java.lang.String
                      context: com.sun.xml.internal.rngom.parse.Context
                      ns: java.lang.String
                      loc: com.sun.xml.internal.rngom.ast.om.Location
                      anno: com.sun.xml.internal.rngom.digested.Annotation
                      this$0: com.sun.xml.internal.rngom.digested.DDataPattern
                      public constructor(arg0: com.sun.xml.internal.rngom.digested.DDataPattern, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.parse.Context, arg4: java.lang.String, arg5: com.sun.xml.internal.rngom.ast.om.Location, arg6: com.sun.xml.internal.rngom.digested.Annotation)
                      public getName(): java.lang.String
                      public getValue(): java.lang.String
                      public getContext(): com.sun.xml.internal.rngom.parse.Context
                      public getNs(): java.lang.String
                      public getLoc(): com.sun.xml.internal.rngom.ast.om.Location
                      public getAnno(): com.sun.xml.internal.rngom.digested.Annotation
                  }
                  class DDataPattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      except: com.sun.xml.internal.rngom.digested.DPattern
                      datatypeLibrary: java.lang.String
                      type: java.lang.String
                      params: java.util.List<com.sun.xml.internal.rngom.digested.DDataPattern$Param>
                      public constructor()
                      public getDatatypeLibrary(): java.lang.String
                      public getType(): java.lang.String
                      public getParams(): java.util.List<com.sun.xml.internal.rngom.digested.DDataPattern$Param>
                      public getExcept(): com.sun.xml.internal.rngom.digested.DPattern
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DElementPattern extends com.sun.xml.internal.rngom.digested.DXmlTokenPattern {
                      public constructor(arg0: com.sun.xml.internal.rngom.nc.NameClass)
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DEmptyPattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DGrammarPattern extends com.sun.xml.internal.rngom.digested.DPattern implements java.lang.Iterable<com.sun.xml.internal.rngom.digested.DDefine> {
                      start: com.sun.xml.internal.rngom.digested.DPattern
                      public constructor()
                      public getStart(): com.sun.xml.internal.rngom.digested.DPattern
                      public get(arg0: java.lang.String): com.sun.xml.internal.rngom.digested.DDefine
                      getOrAdd(arg0: java.lang.String): com.sun.xml.internal.rngom.digested.DDefine
                      public iterator(): java.util.Iterator<com.sun.xml.internal.rngom.digested.DDefine>
                      public isNullable(): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor<V>): V
                  }
                  class DDefine {
                      annotation: com.sun.xml.internal.rngom.digested.DAnnotation
                      public constructor(arg0: java.lang.String)
                      public getPattern(): com.sun.xml.internal.rngom.digested.DPattern
                      public getAnnotation(): com.sun.xml.internal.rngom.digested.DAnnotation
                      public setPattern(arg0: com.sun.xml.internal.rngom.digested.DPattern): void
                      public getName(): java.lang.String
                      public isNullable(): boolean
                  }
                  class DGroupPattern extends com.sun.xml.internal.rngom.digested.DContainerPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept<V>(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor<V>): V
                  }
                  class DInterleavePattern extends com.sun.xml.internal.rngom.digested.DContainerPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DListPattern extends com.sun.xml.internal.rngom.digested.DUnaryPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DMixedPattern extends com.sun.xml.internal.rngom.digested.DUnaryPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DNotAllowedPattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DOneOrMorePattern extends com.sun.xml.internal.rngom.digested.DUnaryPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DOptionalPattern extends com.sun.xml.internal.rngom.digested.DUnaryPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DRefPattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      public constructor(arg0: com.sun.xml.internal.rngom.digested.DDefine)
                      public isNullable(): boolean
                      public getTarget(): com.sun.xml.internal.rngom.digested.DDefine
                      public getName(): java.lang.String
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DTextPattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DValuePattern extends com.sun.xml.internal.rngom.digested.DPattern {
                      public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.parse.Context, arg4: java.lang.String)
                      public getDatatypeLibrary(): java.lang.String
                      public getType(): java.lang.String
                      public getValue(): java.lang.String
                      public getContext(): com.sun.xml.internal.rngom.parse.Context
                      public getNs(): java.lang.String
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class DZeroOrMorePattern extends com.sun.xml.internal.rngom.digested.DUnaryPattern {
                      public constructor()
                      public isNullable(): boolean
                      public accept(arg0: com.sun.xml.internal.rngom.digested.DPatternVisitor): java.lang.Object
                  }
                  class Annotation implements com.sun.xml.internal.rngom.ast.builder.Annotations<com.sun.xml.internal.rngom.digested.ElementWrapper, com.sun.xml.internal.rngom.ast.util.LocatorImpl, com.sun.xml.internal.rngom.digested.CommentListImpl> {
                      constructor()
                      addAttribute<T>(...args: any[]): any
                      addElement<T>(...args: any[]): any
                      addComment<T>(...args: any[]): any
                      addLeadingComment<T>(...args: any[]): any
                      getResult(): com.sun.xml.internal.rngom.digested.DAnnotation
                  }
                  class ElementWrapper implements com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation {
                      element: org.w3c.dom.Element
                      public constructor(arg0: org.w3c.dom.Element)
                  }
                  class CommentListImpl implements com.sun.xml.internal.rngom.ast.builder.CommentList<com.sun.xml.internal.rngom.ast.util.LocatorImpl> {
                      constructor()
                      addComment<T>(...args: any[]): any
                  }
                  class Main$1 extends org.xml.sax.helpers.DefaultHandler {
                      constructor()
                      public error(arg0: org.xml.sax.SAXParseException): void
                  }
                  class Main {
                      public constructor()
                      public static main(arg0: java.lang.String[]): void
                  }
                  class IncludeImpl$IncludedGrammarImpl extends com.sun.xml.internal.rngom.digested.GrammarBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.IncludedGrammar {
                      this$0: com.sun.xml.internal.rngom.digested.IncludeImpl
                      public constructor(arg0: com.sun.xml.internal.rngom.digested.IncludeImpl, arg1: com.sun.xml.internal.rngom.digested.DGrammarPattern, arg2: com.sun.xml.internal.rngom.ast.builder.Scope, arg3: com.sun.xml.internal.rngom.digested.DSchemaBuilderImpl)
                      public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public endIncludedGrammar(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                  }
                  class IncludeImpl extends com.sun.xml.internal.rngom.digested.GrammarBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.Include {
                      public constructor(arg0: com.sun.xml.internal.rngom.digested.DGrammarPattern, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.digested.DSchemaBuilderImpl)
                      public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public endInclude(arg0: com.sun.xml.internal.rngom.parse.Parseable, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      static access$000(arg0: com.sun.xml.internal.rngom.digested.IncludeImpl): boolean
                      static access$100(arg0: com.sun.xml.internal.rngom.digested.IncludeImpl): java.util.Set
                  }
                  class GrammarBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.Grammar , com.sun.xml.internal.rngom.ast.builder.Div {
                      protected grammar: com.sun.xml.internal.rngom.digested.DGrammarPattern
                      protected parent: com.sun.xml.internal.rngom.ast.builder.Scope
                      protected sb: com.sun.xml.internal.rngom.digested.DSchemaBuilderImpl
                      public constructor(arg0: com.sun.xml.internal.rngom.digested.DGrammarPattern, arg1: com.sun.xml.internal.rngom.ast.builder.Scope, arg2: com.sun.xml.internal.rngom.digested.DSchemaBuilderImpl)
                      public endGrammar(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public endDiv(arg0: com.sun.xml.internal.rngom.ast.om.Location, arg1: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public define(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.builder.GrammarSection$Combine, arg2: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg3: com.sun.xml.internal.rngom.ast.om.Location, arg4: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public topLevelAnnotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      public topLevelComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public makeDiv(): com.sun.xml.internal.rngom.ast.builder.Div
                      public makeInclude(): com.sun.xml.internal.rngom.ast.builder.Include
                      public makeParentRef(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                      public makeRef(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.Annotations): com.sun.xml.internal.rngom.ast.om.ParsedPattern
                  }
                  class DSchemaBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.SchemaBuilder<com.sun.xml.internal.rngom.nc.NameClass, com.sun.xml.internal.rngom.digested.DPattern, com.sun.xml.internal.rngom.digested.ElementWrapper, com.sun.xml.internal.rngom.ast.util.LocatorImpl, com.sun.xml.internal.rngom.digested.Annotation, com.sun.xml.internal.rngom.digested.CommentListImpl> {
                      public constructor()
                      public getNameClassBuilder(): com.sun.xml.internal.rngom.ast.builder.NameClassBuilder
                      static wrap(arg0: com.sun.xml.internal.rngom.digested.DPattern, arg1: com.sun.xml.internal.rngom.ast.util.LocatorImpl, arg2: com.sun.xml.internal.rngom.digested.Annotation): com.sun.xml.internal.rngom.digested.DPattern
                      static addAll(arg0: com.sun.xml.internal.rngom.digested.DContainerPattern, arg1: java.util.List<com.sun.xml.internal.rngom.digested.DPattern>): com.sun.xml.internal.rngom.digested.DContainerPattern
                      static addBody(arg0: com.sun.xml.internal.rngom.digested.DUnaryPattern, arg1: com.sun.xml.internal.rngom.ast.om.ParsedPattern, arg2: com.sun.xml.internal.rngom.ast.util.LocatorImpl): com.sun.xml.internal.rngom.digested.DUnaryPattern
                      makeChoice<T>(...args: any[]): any
                      makeInterleave<T>(...args: any[]): any
                      makeGroup<T>(...args: any[]): any
                      makeOneOrMore<T>(...args: any[]): any
                      makeZeroOrMore<T>(...args: any[]): any
                      makeOptional<T>(...args: any[]): any
                      makeList<T>(...args: any[]): any
                      makeMixed<T>(...args: any[]): any
                      makeEmpty<T>(...args: any[]): any
                      makeNotAllowed<T>(...args: any[]): any
                      makeText<T>(...args: any[]): any
                      makeAttribute<T>(...args: any[]): any
                      makeElement<T>(...args: any[]): any
                      makeDataPatternBuilder<T>(...args: any[]): any
                      makeValue<T>(...args: any[]): any
                      public makeGrammar(arg0: com.sun.xml.internal.rngom.ast.builder.Scope): com.sun.xml.internal.rngom.ast.builder.Grammar
                      annotate<T>(...args: any[]): any
                      annotateAfter<T>(...args: any[]): any
                      commentAfter<T>(...args: any[]): any
                      makeExternalRef<T>(...args: any[]): any
                      makeLocation<T>(...args: any[]): any
                      makeAnnotations<T>(...args: any[]): any
                      makeElementAnnotationBuilder<T>(...args: any[]): any
                      makeCommentList<T>(...args: any[]): any
                      makeErrorPattern<T>(...args: any[]): any
                      public usesComments(): boolean
                      expandPattern<T>(...args: any[]): any
                  }
                  class ElementAnnotationBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder {
                      public constructor(arg0: org.w3c.dom.Element)
                      public addText(arg0: java.lang.String, arg1: com.sun.xml.internal.rngom.ast.om.Location, arg2: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public makeElementAnnotation(): com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation
                      public addAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location): void
                      public addElement(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      public addComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                      public addLeadingComment(arg0: com.sun.xml.internal.rngom.ast.builder.CommentList): void
                  }
                  class DataPatternBuilderImpl implements com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder {
                      public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.ast.om.Location)
                      public addParam(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.xml.internal.rngom.parse.Context, arg3: java.lang.String, arg4: com.sun.xml.internal.rngom.ast.om.Location, arg5: com.sun.xml.internal.rngom.ast.builder.Annotations): void
                      public annotation(arg0: com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation): void
                      makePattern<T>(...args: any[]): any
                  }
                  class DXMLPrinter$XMLWriterException extends java.lang.RuntimeException {
                      this$0: com.sun.xml.internal.rngom.digested.DXMLPrinter
                      protected constructor(arg0: com.sun.xml.internal.rngom.digested.DXMLPrinter, arg1: java.lang.Throwable)
                  }
                  class DXMLPrinter$XMLWriter {
                      this$0: com.sun.xml.internal.rngom.digested.DXMLPrinter
                      protected constructor(arg0: com.sun.xml.internal.rngom.digested.DXMLPrinter)
                      protected newLine(): void
                      protected indent(): void
                      public startDocument(): void
                      public endDocument(): void
                      public start(arg0: java.lang.String): void
                      public end(): void
                      attr<T>(...args: any[]): any
                      public ns(arg0: java.lang.String, arg1: java.lang.String): void
                      public body(arg0: java.lang.String): void
                  }
                  class DXMLPrinter$DXMLPrinterVisitor extends com.sun.xml.internal.rngom.digested.DXMLPrinter$XMLWriter implements com.sun.xml.internal.rngom.digested.DPatternVisitor<java.lang.Void> {
                      this$0: com.sun.xml.internal.rngom.digested.DXMLPrinter
                      protected constructor(arg0: com.sun.xml.internal.rngom.digested.DXMLPrinter)
                      on<T>(...args: any[]): any
                      protected unwrapGroup(arg0: com.sun.xml.internal.rngom.digested.DPattern): void
                      protected unwrapChoice(arg0: com.sun.xml.internal.rngom.digested.DPattern): void
                      onAttribute<T>(...args: any[]): any
                      onChoice<T>(...args: any[]): any
                      onData<T>(...args: any[]): any
                      onElement<T>(...args: any[]): any
                      onEmpty<T>(...args: any[]): any
                      onGrammar<T>(...args: any[]): any
                      onGroup<T>(...args: any[]): any
                      onInterleave<T>(...args: any[]): any
                      onList<T>(...args: any[]): any
                      onMixed<T>(...args: any[]): any
                      onNotAllowed<T>(...args: any[]): any
                      onOneOrMore<T>(...args: any[]): any
                      onOptional<T>(...args: any[]): any
                      onRef<T>(...args: any[]): any
                      onText<T>(...args: any[]): any
                      onValue<T>(...args: any[]): any
                      onZeroOrMore<T>(...args: any[]): any
                  }
                  class DXMLPrinter$NameClassXMLPrinterVisitor extends com.sun.xml.internal.rngom.digested.DXMLPrinter$XMLWriter implements com.sun.xml.internal.rngom.nc.NameClassVisitor<java.lang.Void> {
                      this$0: com.sun.xml.internal.rngom.digested.DXMLPrinter
                      protected constructor(arg0: com.sun.xml.internal.rngom.digested.DXMLPrinter)
                      visitChoice<T>(...args: any[]): any
                      visitNsName<T>(...args: any[]): any
                      visitNsNameExcept<T>(...args: any[]): any
                      visitAnyName<T>(...args: any[]): any
                      visitAnyNameExcept<T>(...args: any[]): any
                      visitName<T>(...args: any[]): any
                      visitNull<T>(...args: any[]): any
                  }
                  class DXMLPrinter$1 extends org.xml.sax.helpers.DefaultHandler {
                      constructor()
                      public error(arg0: org.xml.sax.SAXParseException): void
                  }
                  class DXMLPrinter {
                      protected out: javax.xml.stream.XMLStreamWriter
                      protected indentStep: java.lang.String
                      protected newLine: java.lang.String
                      protected indent: int
                      protected afterEnd: boolean
                      protected visitor: com.sun.xml.internal.rngom.digested.DXMLPrinter$DXMLPrinterVisitor
                      protected ncVisitor: com.sun.xml.internal.rngom.digested.DXMLPrinter$NameClassXMLPrinterVisitor
                      protected domPrinter: com.sun.xml.internal.rngom.digested.DOMPrinter
                      public constructor(arg0: javax.xml.stream.XMLStreamWriter)
                      public printDocument(arg0: com.sun.xml.internal.rngom.digested.DGrammarPattern): void
                      print<T>(...args: any[]): any
                      public static main(arg0: java.lang.String[]): void
                  }
                  class DOMPrinter {
                      protected out: javax.xml.stream.XMLStreamWriter
                      public constructor(arg0: javax.xml.stream.XMLStreamWriter)
                      public print(arg0: org.w3c.dom.Node): void
                      protected visitChildren(arg0: org.w3c.dom.Node): void
                      protected visitDocument(arg0: org.w3c.dom.Document): void
                      protected visitDocumentFragment(arg0: org.w3c.dom.DocumentFragment): void
                      protected visitElement(arg0: org.w3c.dom.Element): void
                      protected visitAttr(arg0: org.w3c.dom.Attr): void
                      protected visitComment(arg0: org.w3c.dom.Comment): void
                      protected visitText(arg0: org.w3c.dom.Text): void
                      protected visitCDATASection(arg0: org.w3c.dom.CDATASection): void
                      protected visitProcessingInstruction(arg0: org.w3c.dom.ProcessingInstruction): void
                      protected visitReference(arg0: org.w3c.dom.EntityReference): void
                  }
                  class DPatternWalker implements com.sun.xml.internal.rngom.digested.DPatternVisitor<java.lang.Void> {
                      public constructor()
                      onAttribute<T>(...args: any[]): any
                      protected onXmlToken(arg0: com.sun.xml.internal.rngom.digested.DXmlTokenPattern): java.lang.Void
                      onChoice<T>(...args: any[]): any
                      protected onContainer(arg0: com.sun.xml.internal.rngom.digested.DContainerPattern): java.lang.Void
                      onData<T>(...args: any[]): any
                      onElement<T>(...args: any[]): any
                      onEmpty<T>(...args: any[]): any
                      onGrammar<T>(...args: any[]): any
                      onGroup<T>(...args: any[]): any
                      onInterleave<T>(...args: any[]): any
                      onList<T>(...args: any[]): any
                      onMixed<T>(...args: any[]): any
                      onNotAllowed<T>(...args: any[]): any
                      onOneOrMore<T>(...args: any[]): any
                      onOptional<T>(...args: any[]): any
                      onRef<T>(...args: any[]): any
                      onText<T>(...args: any[]): any
                      onValue<T>(...args: any[]): any
                      onZeroOrMore<T>(...args: any[]): any
                      protected onUnary(arg0: com.sun.xml.internal.rngom.digested.DUnaryPattern): java.lang.Void
                  }

               }

            }
            namespace dtdparser {
               abstract class XmlReader$BaseReader extends java.io.Reader {
                   protected instream: java.io.InputStream
                   protected buffer: byte[]
                   protected start: int
                   protected finish: int
                   constructor(arg0: java.io.InputStream)
                   public ready(): boolean
                   public close(): void
               }
               class XmlReader$Utf8Reader extends com.sun.xml.internal.dtdparser.XmlReader$BaseReader {
                   constructor(arg0: java.io.InputStream)
                   public read(arg0: char[], arg1: int, arg2: int): int
               }
               class XmlReader$AsciiReader extends com.sun.xml.internal.dtdparser.XmlReader$BaseReader {
                   constructor(arg0: java.io.InputStream)
                   public read(arg0: char[], arg1: int, arg2: int): int
               }
               class XmlReader$Iso8859_1Reader extends com.sun.xml.internal.dtdparser.XmlReader$BaseReader {
                   constructor(arg0: java.io.InputStream)
                   public read(arg0: char[], arg1: int, arg2: int): int
               }
               class XmlReader extends java.io.Reader {
                   createReader<T>(...args: any[]): any
                   public getEncoding(): java.lang.String
                   read<T>(...args: any[]): any
                   public markSupported(): boolean
                   public mark(arg0: int): void
                   public reset(): void
                   public skip(arg0: long): long
                   public ready(): boolean
                   public close(): void
               }
               class XmlNames {
                   public static isName(arg0: java.lang.String): boolean
                   public static isUnqualifiedName(arg0: java.lang.String): boolean
                   public static isQualifiedName(arg0: java.lang.String): boolean
                   public static isNmtoken(arg0: java.lang.String): boolean
                   public static isNCNmtoken(arg0: java.lang.String): boolean
               }
               class XmlChars {
                   public static isChar(arg0: int): boolean
                   public static isNameChar(arg0: char): boolean
                   public static isNCNameChar(arg0: char): boolean
                   public static isSpace(arg0: char): boolean
                   public static isLetter(arg0: char): boolean
               }
               class SimpleHashtable$Entry {
                   hash: int
                   key: java.lang.Object
                   value: java.lang.Object
                   next: com.sun.xml.internal.dtdparser.SimpleHashtable$Entry
                   protected constructor(arg0: int, arg1: java.lang.Object, arg2: java.lang.Object, arg3: com.sun.xml.internal.dtdparser.SimpleHashtable$Entry)
               }
               class SimpleHashtable implements java.util.Enumeration {
                   constructor(...args: any[])
                   public clear(): void
                   public size(): int
                   public keys(): java.util.Enumeration
                   public hasMoreElements(): boolean
                   public nextElement(): java.lang.Object
                   public get(arg0: java.lang.String): java.lang.Object
                   public getNonInterned(arg0: java.lang.String): java.lang.Object
                   public put(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.Object
               }
               class Resolver implements org.xml.sax.EntityResolver {
                   public constructor()
                   createInputSource<T>(...args: any[]): any
                   public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
                   public isIgnoringMIME(): boolean
                   public setIgnoringMIME(arg0: boolean): void
                   registerCatalogEntry<T>(...args: any[]): any
               }
               abstract class MessageCatalog {
                   protected constructor(arg0: java.lang.Class)
                   getMessage<T>(...args: any[]): any
                   public chooseLocale(arg0: java.lang.String[]): java.util.Locale
                   public isLocaleSupported(arg0: java.lang.String): boolean
               }
               class InternalEntity extends com.sun.xml.internal.dtdparser.EntityDecl {
                   buf: char[]
                   constructor(arg0: java.lang.String, arg1: char[])
               }
               class EntityDecl {
                   name: java.lang.String
                   isFromInternalSubset: boolean
                   isPE: boolean
                   constructor()
               }
               class InputEntity {
                   public static getInputEntity(arg0: com.sun.xml.internal.dtdparser.DTDEventListener, arg1: java.util.Locale): com.sun.xml.internal.dtdparser.InputEntity
                   public isInternal(): boolean
                   public isDocument(): boolean
                   public isParameterEntity(): boolean
                   public getName(): java.lang.String
                   init<T>(...args: any[]): any
                   public pop(): com.sun.xml.internal.dtdparser.InputEntity
                   public isEOF(): boolean
                   public getEncoding(): java.lang.String
                   public getNameChar(): char
                   public getc(): char
                   public peekc(arg0: char): boolean
                   public ungetc(): void
                   public maybeWhitespace(): boolean
                   public parsedContent(arg0: com.sun.xml.internal.dtdparser.DTDEventListener): boolean
                   public unparsedContent(arg0: com.sun.xml.internal.dtdparser.DTDEventListener, arg1: boolean, arg2: java.lang.String): boolean
                   public ignorableWhitespace(arg0: com.sun.xml.internal.dtdparser.DTDEventListener): boolean
                   public peek(arg0: java.lang.String, arg1: char[]): boolean
                   public startRemembering(): void
                   public rememberText(): java.lang.String
                   public getPublicId(): java.lang.String
                   public getSystemId(): java.lang.String
                   public getLineNumber(): int
                   public getColumnNumber(): int
                   public close(): void
               }
               interface DTDEventListener extends java.util.EventListener {
                   public static CONTENT_MODEL_EMPTY: short
                   public static CONTENT_MODEL_ANY: short
                   public static CONTENT_MODEL_MIXED: short
                   public static CONTENT_MODEL_CHILDREN: short
                   public static USE_NORMAL: short
                   public static USE_IMPLIED: short
                   public static USE_FIXED: short
                   public static USE_REQUIRED: short
                   public static CHOICE: short
                   public static SEQUENCE: short
                   public static OCCURENCE_ZERO_OR_MORE: short
                   public static OCCURENCE_ONE_OR_MORE: short
                   public static OCCURENCE_ZERO_OR_ONE: short
                   public static OCCURENCE_ONCE: short
                   public setDocumentLocator(arg0: org.xml.sax.Locator): void
                   public processingInstruction(arg0: java.lang.String, arg1: java.lang.String): void
                   public notationDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   public unparsedEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                   public internalGeneralEntityDecl(arg0: java.lang.String, arg1: java.lang.String): void
                   public externalGeneralEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   public internalParameterEntityDecl(arg0: java.lang.String, arg1: java.lang.String): void
                   public externalParameterEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   public startDTD(arg0: com.sun.xml.internal.dtdparser.InputEntity): void
                   public endDTD(): void
                   public comment(arg0: java.lang.String): void
                   public characters(arg0: char[], arg1: int, arg2: int): void
                   public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                   public startCDATA(): void
                   public endCDATA(): void
                   public fatalError(arg0: org.xml.sax.SAXParseException): void
                   public error(arg0: org.xml.sax.SAXParseException): void
                   public warning(arg0: org.xml.sax.SAXParseException): void
                   public startContentModel(arg0: java.lang.String, arg1: short): void
                   public endContentModel(arg0: java.lang.String, arg1: short): void
                   public attributeDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: short, arg5: java.lang.String): void
                   public childElement(arg0: java.lang.String, arg1: short): void
                   public mixedElement(arg0: java.lang.String): void
                   public startModelGroup(): void
                   public endModelGroup(arg0: short): void
                   public connector(arg0: short): void
               }
               class ExternalEntity extends com.sun.xml.internal.dtdparser.EntityDecl {
                   systemId: java.lang.String
                   publicId: java.lang.String
                   notation: java.lang.String
                   public constructor(arg0: com.sun.xml.internal.dtdparser.InputEntity)
                   public getInputSource(arg0: org.xml.sax.EntityResolver): org.xml.sax.InputSource
               }
               class EndOfInputException extends java.io.IOException {
                   constructor()
               }
               class DTDParser$1 implements org.xml.sax.Locator {
                   this$0: com.sun.xml.internal.dtdparser.DTDParser
                   constructor(arg0: com.sun.xml.internal.dtdparser.DTDParser)
                   public getPublicId(): java.lang.String
                   public getSystemId(): java.lang.String
                   public getLineNumber(): int
                   public getColumnNumber(): int
               }
               class DTDParser$NameCache {
                   hashtable: com.sun.xml.internal.dtdparser.DTDParser$NameCacheEntry[]
                   constructor()
                   lookup(arg0: char[], arg1: int): java.lang.String
                   lookupEntry(arg0: char[], arg1: int): com.sun.xml.internal.dtdparser.DTDParser$NameCacheEntry
               }
               class DTDParser$NameCacheEntry {
                   name: java.lang.String
                   chars: char[]
                   next: com.sun.xml.internal.dtdparser.DTDParser$NameCacheEntry
                   constructor()
                   matches(arg0: char[], arg1: int): boolean
               }
               class DTDParser$Catalog extends com.sun.xml.internal.dtdparser.MessageCatalog {
                   constructor()
               }
               class DTDParser {
                   public static TYPE_CDATA: java.lang.String
                   public static TYPE_ID: java.lang.String
                   public static TYPE_IDREF: java.lang.String
                   public static TYPE_IDREFS: java.lang.String
                   public static TYPE_ENTITY: java.lang.String
                   public static TYPE_ENTITIES: java.lang.String
                   public static TYPE_NMTOKEN: java.lang.String
                   public static TYPE_NMTOKENS: java.lang.String
                   public static TYPE_NOTATION: java.lang.String
                   public static TYPE_ENUMERATION: java.lang.String
                   protected declaredElements: java.util.Set
                   notations: java.util.Hashtable
                   entities: com.sun.xml.internal.dtdparser.SimpleHashtable
                   static strANY: java.lang.String
                   static strEMPTY: java.lang.String
                   static messages: com.sun.xml.internal.dtdparser.DTDParser$Catalog
                   public constructor()
                   public setLocale(arg0: java.util.Locale): void
                   public getLocale(): java.util.Locale
                   public chooseLocale(arg0: java.lang.String[]): java.util.Locale
                   public setEntityResolver(arg0: org.xml.sax.EntityResolver): void
                   public getEntityResolver(): org.xml.sax.EntityResolver
                   public setDtdHandler(arg0: com.sun.xml.internal.dtdparser.DTDEventListener): void
                   public getDtdHandler(): com.sun.xml.internal.dtdparser.DTDEventListener
                   parse<T>(...args: any[]): any
                   afterRoot(): void
                   public getPublicId(): java.lang.String
                   public getSystemId(): java.lang.String
                   public getLineNumber(): int
                   public getColumnNumber(): int
                   error(arg0: java.lang.String, arg1: java.lang.Object[]): void
               }
               class DTDHandlerBase implements com.sun.xml.internal.dtdparser.DTDEventListener {
                   public constructor()
                   public processingInstruction(arg0: java.lang.String, arg1: java.lang.String): void
                   public setDocumentLocator(arg0: org.xml.sax.Locator): void
                   public fatalError(arg0: org.xml.sax.SAXParseException): void
                   public error(arg0: org.xml.sax.SAXParseException): void
                   public warning(arg0: org.xml.sax.SAXParseException): void
                   public notationDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   public unparsedEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                   public endDTD(): void
                   public externalGeneralEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   public internalGeneralEntityDecl(arg0: java.lang.String, arg1: java.lang.String): void
                   public externalParameterEntityDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                   public internalParameterEntityDecl(arg0: java.lang.String, arg1: java.lang.String): void
                   public startDTD(arg0: com.sun.xml.internal.dtdparser.InputEntity): void
                   public comment(arg0: java.lang.String): void
                   public characters(arg0: char[], arg1: int, arg2: int): void
                   public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                   public startCDATA(): void
                   public endCDATA(): void
                   public startContentModel(arg0: java.lang.String, arg1: short): void
                   public endContentModel(arg0: java.lang.String, arg1: short): void
                   public attributeDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: short, arg5: java.lang.String): void
                   public childElement(arg0: java.lang.String, arg1: short): void
                   public mixedElement(arg0: java.lang.String): void
                   public startModelGroup(): void
                   public endModelGroup(arg0: short): void
                   public connector(arg0: short): void
               }

            }

         }

      }
      namespace tools {
         namespace example {
            namespace debug {
               namespace expr {
                  class JJExpressionParserCalls {
                      gen: int
                      first: com.sun.tools.example.debug.expr.Token
                      arg: int
                      next: com.sun.tools.example.debug.expr.JJExpressionParserCalls
                      constructor()
                  }
                  class ASCII_UCodeESC_CharStream {
                      public static staticFlag: boolean
                      public bufpos: int
                      bufsize: int
                      available: int
                      tokenBegin: int
                      static hexval(arg0: char): int
                      public BeginToken(): char
                      public readChar(): char
                      public getColumn(): int
                      public getLine(): int
                      public getEndColumn(): int
                      public getEndLine(): int
                      public getBeginColumn(): int
                      public getBeginLine(): int
                      public backup(arg0: int): void
                      constructor(...args: any[])
                      ReInit<T>(...args: any[]): any
                      public GetImage(): java.lang.String
                      public GetSuffix(arg0: int): char[]
                      public Done(): void
                      public adjustBeginLineColumn(arg0: int, arg1: int): void
                  }
                  class ExpressionParserTokenManager implements com.sun.tools.example.debug.expr.ExpressionParserConstants {
                      static jjbitVec0: long[]
                      static jjbitVec2: long[]
                      static jjbitVec3: long[]
                      static jjbitVec4: long[]
                      static jjbitVec5: long[]
                      static jjbitVec6: long[]
                      static jjbitVec7: long[]
                      static jjbitVec8: long[]
                      static jjnextStates: int[]
                      public static jjstrLiteralImages: java.lang.String[]
                      public static lexStateNames: java.lang.String[]
                      static jjtoToken: long[]
                      static jjtoSkip: long[]
                      static jjtoSpecial: long[]
                      protected curChar: char
                      curLexState: int
                      defaultLexState: int
                      jjnewStateCnt: int
                      jjround: int
                      jjmatchedPos: int
                      jjmatchedKind: int
                      constructor(...args: any[])
                      ReInit<T>(...args: any[]): any
                      public SwitchTo(arg0: int): void
                      public getNextToken(): com.sun.tools.example.debug.expr.Token
                  }
                  interface ExpressionParserConstants {
                      public static EOF: int
                      public static SINGLE_LINE_COMMENT: int
                      public static FORMAL_COMMENT: int
                      public static MULTI_LINE_COMMENT: int
                      public static ABSTRACT: int
                      public static BOOLEAN: int
                      public static BREAK: int
                      public static BYTE: int
                      public static CASE: int
                      public static CATCH: int
                      public static CHAR: int
                      public static CLASS: int
                      public static CONST: int
                      public static CONTINUE: int
                      public static _DEFAULT: int
                      public static DO: int
                      public static DOUBLE: int
                      public static ELSE: int
                      public static EXTENDS: int
                      public static FALSE: int
                      public static FINAL: int
                      public static FINALLY: int
                      public static FLOAT: int
                      public static FOR: int
                      public static GOTO: int
                      public static IF: int
                      public static IMPLEMENTS: int
                      public static IMPORT: int
                      public static INSTANCEOF: int
                      public static INT: int
                      public static INTERFACE: int
                      public static LONG: int
                      public static NATIVE: int
                      public static NEW: int
                      public static NULL: int
                      public static PACKAGE: int
                      public static PRIVATE: int
                      public static PROTECTED: int
                      public static PUBLIC: int
                      public static RETURN: int
                      public static SHORT: int
                      public static STATIC: int
                      public static SUPER: int
                      public static SWITCH: int
                      public static SYNCHRONIZED: int
                      public static THIS: int
                      public static THROW: int
                      public static THROWS: int
                      public static TRANSIENT: int
                      public static TRUE: int
                      public static TRY: int
                      public static VOID: int
                      public static VOLATILE: int
                      public static WHILE: int
                      public static INTEGER_LITERAL: int
                      public static DECIMAL_LITERAL: int
                      public static HEX_LITERAL: int
                      public static OCTAL_LITERAL: int
                      public static FLOATING_POINT_LITERAL: int
                      public static EXPONENT: int
                      public static CHARACTER_LITERAL: int
                      public static STRING_LITERAL: int
                      public static IDENTIFIER: int
                      public static LETTER: int
                      public static DIGIT: int
                      public static LPAREN: int
                      public static RPAREN: int
                      public static LBRACE: int
                      public static RBRACE: int
                      public static LBRACKET: int
                      public static RBRACKET: int
                      public static SEMICOLON: int
                      public static COMMA: int
                      public static DOT: int
                      public static ASSIGN: int
                      public static GT: int
                      public static LT: int
                      public static BANG: int
                      public static TILDE: int
                      public static HOOK: int
                      public static COLON: int
                      public static EQ: int
                      public static LE: int
                      public static GE: int
                      public static NE: int
                      public static SC_OR: int
                      public static SC_AND: int
                      public static INCR: int
                      public static DECR: int
                      public static PLUS: int
                      public static MINUS: int
                      public static STAR: int
                      public static SLASH: int
                      public static BIT_AND: int
                      public static BIT_OR: int
                      public static XOR: int
                      public static REM: int
                      public static LSHIFT: int
                      public static RSIGNEDSHIFT: int
                      public static RUNSIGNEDSHIFT: int
                      public static PLUSASSIGN: int
                      public static MINUSASSIGN: int
                      public static STARASSIGN: int
                      public static SLASHASSIGN: int
                      public static ANDASSIGN: int
                      public static ORASSIGN: int
                      public static XORASSIGN: int
                      public static REMASSIGN: int
                      public static LSHIFTASSIGN: int
                      public static RSIGNEDSHIFTASSIGN: int
                      public static RUNSIGNEDSHIFTASSIGN: int
                      public static DEFAULT: int
                      public static tokenImage: java.lang.String[]
                  }
                  class ExpressionParser implements com.sun.tools.example.debug.expr.ExpressionParserConstants {
                      stack: java.util.Stack<com.sun.tools.example.debug.expr.LValue>
                      vm: com.sun.jdi.VirtualMachine
                      frameGetter: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame
                      public token_source: com.sun.tools.example.debug.expr.ExpressionParserTokenManager
                      jj_input_stream: com.sun.tools.example.debug.expr.ASCII_UCodeESC_CharStream
                      public token: com.sun.tools.example.debug.expr.Token
                      public jj_nt: com.sun.tools.example.debug.expr.Token
                      public lookingAhead: boolean
                      peek(): com.sun.tools.example.debug.expr.LValue
                      pop(): com.sun.tools.example.debug.expr.LValue
                      push(arg0: com.sun.tools.example.debug.expr.LValue): void
                      public static getMassagedValue(): com.sun.jdi.Value
                      public static evaluate(arg0: java.lang.String, arg1: com.sun.jdi.VirtualMachine, arg2: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame): com.sun.jdi.Value
                      public static main(arg0: java.lang.String[]): void
                      public Type(): void
                      public PrimitiveType(): void
                      public Name(): java.lang.String
                      public NameList(): void
                      public Expression(): void
                      public Assignment(): void
                      public AssignmentOperator(): void
                      public ConditionalExpression(): void
                      public ConditionalOrExpression(): void
                      public ConditionalAndExpression(): void
                      public InclusiveOrExpression(): void
                      public ExclusiveOrExpression(): void
                      public AndExpression(): void
                      public EqualityExpression(): void
                      public InstanceOfExpression(): void
                      public RelationalExpression(): void
                      public ShiftExpression(): void
                      public AdditiveExpression(): void
                      public MultiplicativeExpression(): void
                      public UnaryExpression(): void
                      public PreIncrementExpression(): void
                      public PreDecrementExpression(): void
                      public UnaryExpressionNotPlusMinus(): void
                      public CastLookahead(): void
                      public PostfixExpression(): void
                      public CastExpression(): void
                      public PrimaryExpression(): void
                      public PrimaryPrefix(): void
                      public PrimarySuffix(): void
                      public Literal(): void
                      public BooleanLiteral(): void
                      public NullLiteral(): void
                      public Arguments(): java.util.List<com.sun.jdi.Value>
                      public ArgumentList(arg0: java.util.List<com.sun.jdi.Value>): void
                      public AllocationExpression(): void
                      public ArrayDimensions(): void
                      constructor(...args: any[])
                      ReInit<T>(...args: any[]): any
                      public getNextToken(): com.sun.tools.example.debug.expr.Token
                      public getToken(arg0: int): com.sun.tools.example.debug.expr.Token
                      public generateParseException(): com.sun.tools.example.debug.expr.ParseException
                      public enable_tracing(): void
                      public disable_tracing(): void
                  }
                  interface ExpressionParser$GetFrame {
                      public get(): com.sun.jdi.StackFrame
                  }
                  abstract class LValue {
                      protected jdiValue: com.sun.jdi.Value
                      static STATIC: int
                      static INSTANCE: int
                      static primitiveTypeNames: java.util.List<java.lang.String>
                      static SAME: int
                      static ASSIGNABLE: int
                      static DIFFERENT: int
                      constructor()
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                      setValue<T>(...args: any[]): any
                      memberLValue<T>(...args: any[]): any
                      getMassagedValue(arg0: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame): com.sun.jdi.Value
                      interiorGetValue(): com.sun.jdi.Value
                      arrayElementLValue(arg0: com.sun.tools.example.debug.expr.LValue): com.sun.tools.example.debug.expr.LValue
                      toString<T>(...args: any[]): any
                      static fieldByName(arg0: com.sun.jdi.ReferenceType, arg1: java.lang.String, arg2: int): com.sun.jdi.Field
                      static methodsByName(arg0: com.sun.jdi.ReferenceType, arg1: java.lang.String, arg2: int): java.util.List<com.sun.jdi.Method>
                      static argumentsMatch(arg0: java.util.List<com.sun.jdi.Type>, arg1: java.util.List<com.sun.jdi.Value>): int
                      static isComponentAssignable(arg0: com.sun.jdi.Type, arg1: com.sun.jdi.Type): boolean
                      static isArrayAssignableTo(arg0: com.sun.jdi.ArrayType, arg1: com.sun.jdi.Type): boolean
                      static isAssignableTo(arg0: com.sun.jdi.Type, arg1: com.sun.jdi.Type): boolean
                      static resolveOverload(arg0: java.util.List<com.sun.jdi.Method>, arg1: java.util.List<com.sun.jdi.Value>): com.sun.jdi.Method
                      make<T>(...args: any[]): any
                      static makeBoolean(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeCharacter(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeFloat(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeDouble(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeInteger(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeShort(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeLong(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeByte(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeString(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeNull(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeThisObject(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame, arg2: com.sun.tools.example.debug.expr.Token): com.sun.tools.example.debug.expr.LValue
                      static makeNewObject(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame, arg2: java.lang.String, arg3: java.util.List<com.sun.jdi.Value>): com.sun.tools.example.debug.expr.LValue
                      static makeName(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame, arg2: java.lang.String): com.sun.tools.example.debug.expr.LValue
                      static stringValue(arg0: com.sun.tools.example.debug.expr.LValue, arg1: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame): java.lang.String
                      static booleanOperation(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token, arg2: com.sun.tools.example.debug.expr.LValue, arg3: com.sun.tools.example.debug.expr.LValue): com.sun.tools.example.debug.expr.LValue
                      static operation(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.example.debug.expr.Token, arg2: com.sun.tools.example.debug.expr.LValue, arg3: com.sun.tools.example.debug.expr.LValue, arg4: com.sun.tools.example.debug.expr.ExpressionParser$GetFrame): com.sun.tools.example.debug.expr.LValue
                  }
                  class LValue$LValueConstant extends com.sun.tools.example.debug.expr.LValue {
                      value: com.sun.jdi.Value
                      constructor(arg0: com.sun.jdi.Value)
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                  }
                  class LValue$LValueArrayElement extends com.sun.tools.example.debug.expr.LValue {
                      array: com.sun.jdi.ArrayReference
                      index: int
                      constructor(arg0: com.sun.jdi.Value, arg1: int)
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                  }
                  class LValue$LValueArrayLength extends com.sun.tools.example.debug.expr.LValue {
                      arrayRef: com.sun.jdi.ArrayReference
                      constructor(arg0: com.sun.jdi.ArrayReference)
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                  }
                  class LValue$LValueStaticMember extends com.sun.tools.example.debug.expr.LValue {
                      refType: com.sun.jdi.ReferenceType
                      thread: com.sun.jdi.ThreadReference
                      matchingField: com.sun.jdi.Field
                      overloads: java.util.List<com.sun.jdi.Method>
                      matchingMethod: com.sun.jdi.Method
                      methodArguments: java.util.List<com.sun.jdi.Value>
                      constructor(arg0: com.sun.jdi.ReferenceType, arg1: java.lang.String, arg2: com.sun.jdi.ThreadReference)
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                  }
                  class LValue$LValueInstanceMember extends com.sun.tools.example.debug.expr.LValue {
                      obj: com.sun.jdi.ObjectReference
                      thread: com.sun.jdi.ThreadReference
                      matchingField: com.sun.jdi.Field
                      overloads: java.util.List<com.sun.jdi.Method>
                      matchingMethod: com.sun.jdi.Method
                      methodArguments: java.util.List<com.sun.jdi.Value>
                      constructor(arg0: com.sun.jdi.Value, arg1: java.lang.String, arg2: com.sun.jdi.ThreadReference)
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                  }
                  class LValue$LValueLocal extends com.sun.tools.example.debug.expr.LValue {
                      frame: com.sun.jdi.StackFrame
                      var: com.sun.jdi.LocalVariable
                      constructor(arg0: com.sun.jdi.StackFrame, arg1: com.sun.jdi.LocalVariable)
                      getValue(): com.sun.jdi.Value
                      setValue0(arg0: com.sun.jdi.Value): void
                      invokeWith(arg0: java.util.List<com.sun.jdi.Value>): void
                  }
                  class ParseException extends java.lang.Exception {
                      protected specialConstructor: boolean
                      public currentToken: com.sun.tools.example.debug.expr.Token
                      public expectedTokenSequences: int[][]
                      public tokenImage: java.lang.String[]
                      protected eol: java.lang.String
                      constructor(...args: any[])
                      public getMessage(): java.lang.String
                      protected add_escapes(arg0: java.lang.String): java.lang.String
                  }
                  class Token {
                      public kind: int
                      public beginLine: int
                      public beginColumn: int
                      public endLine: int
                      public endColumn: int
                      public image: java.lang.String
                      public next: com.sun.tools.example.debug.expr.Token
                      public specialToken: com.sun.tools.example.debug.expr.Token
                      public constructor()
                      toString<T>(...args: any[]): any
                      public static newToken(arg0: int): com.sun.tools.example.debug.expr.Token
                  }
                  class TokenMgrError extends java.lang.Error {
                      static LEXICAL_ERROR: int
                      static STATIC_LEXER_ERROR: int
                      static INVALID_LEXICAL_STATE: int
                      static LOOP_DETECTED: int
                      errorCode: int
                      protected static addEscapes(arg0: java.lang.String): java.lang.String
                      public getMessage(): java.lang.String
                      constructor(...args: any[])
                  }

               }
               namespace tty {
                  class AccessWatchpointSpec extends com.sun.tools.example.debug.tty.WatchpointSpec {
                      constructor(arg0: com.sun.tools.example.debug.tty.ReferenceTypeSpec, arg1: java.lang.String)
                      resolveEventRequest(arg0: com.sun.jdi.ReferenceType): com.sun.jdi.request.EventRequest
                      toString<T>(...args: any[]): any
                  }
                  class Commands {
                      static methodTraceCommand: java.lang.String
                      constructor()
                      typedName(arg0: com.sun.jdi.Method): java.lang.String
                      commandConnectors(arg0: com.sun.jdi.VirtualMachineManager): void
                      commandClasses(): void
                      commandClass(arg0: java.util.StringTokenizer): void
                      commandMethods(arg0: java.util.StringTokenizer): void
                      commandFields(arg0: java.util.StringTokenizer): void
                      commandThreads(arg0: java.util.StringTokenizer): void
                      commandThreadGroups(): void
                      commandThread(arg0: java.util.StringTokenizer): void
                      commandThreadGroup(arg0: java.util.StringTokenizer): void
                      commandRun(arg0: java.util.StringTokenizer): void
                      commandLoad(arg0: java.util.StringTokenizer): void
                      commandSuspend(arg0: java.util.StringTokenizer): void
                      commandResume(arg0: java.util.StringTokenizer): void
                      commandCont(): void
                      clearPreviousStep(arg0: com.sun.jdi.ThreadReference): void
                      commandStep(arg0: java.util.StringTokenizer): void
                      commandStepi(): void
                      commandNext(): void
                      doKill(arg0: com.sun.jdi.ThreadReference, arg1: java.util.StringTokenizer): void
                      doKillThread(arg0: com.sun.jdi.ThreadReference, arg1: java.util.StringTokenizer): void
                      commandKill(arg0: java.util.StringTokenizer): void
                      listCaughtExceptions(): void
                      commandCatchException(arg0: java.util.StringTokenizer): void
                      commandIgnoreException(arg0: java.util.StringTokenizer): void
                      commandUp(arg0: java.util.StringTokenizer): void
                      commandDown(arg0: java.util.StringTokenizer): void
                      commandWhere(arg0: java.util.StringTokenizer, arg1: boolean): void
                      commandInterrupt(arg0: java.util.StringTokenizer): void
                      commandMemory(): void
                      commandGC(): void
                      static locationString(arg0: com.sun.jdi.Location): java.lang.String
                      listBreakpoints(): void
                      protected parseBreakpointSpec(arg0: java.util.StringTokenizer, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.example.debug.tty.BreakpointSpec
                      commandStop(arg0: java.util.StringTokenizer): void
                      commandClear(arg0: java.util.StringTokenizer): void
                      commandWatch(arg0: java.util.StringTokenizer): void
                      commandUnwatch(arg0: java.util.StringTokenizer): void
                      turnOnExitTrace(arg0: com.sun.tools.example.debug.tty.ThreadInfo, arg1: int): void
                      commandTrace(arg0: java.util.StringTokenizer): void
                      commandUntrace(arg0: java.util.StringTokenizer): void
                      commandList(arg0: java.util.StringTokenizer): void
                      commandLines(arg0: java.util.StringTokenizer): void
                      commandClasspath(arg0: java.util.StringTokenizer): void
                      commandUse(arg0: java.util.StringTokenizer): void
                      commandLocals(): void
                      doPrint(arg0: java.util.StringTokenizer, arg1: boolean): void
                      commandPrint(arg0: java.util.StringTokenizer, arg1: boolean): void
                      commandSet(arg0: java.util.StringTokenizer): void
                      doLock(arg0: java.util.StringTokenizer): void
                      commandLock(arg0: java.util.StringTokenizer): void
                      commandThreadlocks(arg0: java.util.StringTokenizer): void
                      doDisableGC(arg0: java.util.StringTokenizer): void
                      commandDisableGC(arg0: java.util.StringTokenizer): void
                      doEnableGC(arg0: java.util.StringTokenizer): void
                      commandEnableGC(arg0: java.util.StringTokenizer): void
                      doSave(arg0: java.util.StringTokenizer): void
                      commandSave(arg0: java.util.StringTokenizer): void
                      commandBytecodes(arg0: java.util.StringTokenizer): void
                      commandExclude(arg0: java.util.StringTokenizer): void
                      commandRedefine(arg0: java.util.StringTokenizer): void
                      commandPopFrames(arg0: java.util.StringTokenizer, arg1: boolean): void
                      commandExtension(arg0: java.util.StringTokenizer): void
                      commandVersion(arg0: java.lang.String, arg1: com.sun.jdi.VirtualMachineManager): void
                  }
                  class Commands$7 extends com.sun.tools.example.debug.tty.Commands$AsyncExecution {
                      val$t: java.util.StringTokenizer
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: java.util.StringTokenizer)
                      action(): void
                  }
                  class Commands$6 extends com.sun.tools.example.debug.tty.Commands$AsyncExecution {
                      val$t: java.util.StringTokenizer
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: java.util.StringTokenizer)
                      action(): void
                  }
                  class Commands$5 extends com.sun.tools.example.debug.tty.Commands$AsyncExecution {
                      val$t: java.util.StringTokenizer
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: java.util.StringTokenizer)
                      action(): void
                  }
                  class Commands$4 extends com.sun.tools.example.debug.tty.Commands$AsyncExecution {
                      val$t: java.util.StringTokenizer
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: java.util.StringTokenizer)
                      action(): void
                  }
                  class Commands$3 extends com.sun.tools.example.debug.tty.Commands$AsyncExecution {
                      val$t: java.util.StringTokenizer
                      val$dumpObject: boolean
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: java.util.StringTokenizer, arg2: boolean)
                      action(): void
                  }
                  class Commands$2 extends com.sun.tools.example.debug.tty.Commands$AsyncExecution {
                      val$threadToKill: com.sun.jdi.ThreadReference
                      val$tokenizer: java.util.StringTokenizer
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: com.sun.jdi.ThreadReference, arg2: java.util.StringTokenizer)
                      action(): void
                  }
                  class Commands$1 implements com.sun.tools.example.debug.expr.ExpressionParser$GetFrame {
                      val$threadInfo: com.sun.tools.example.debug.tty.ThreadInfo
                      this$0: com.sun.tools.example.debug.tty.Commands
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands, arg1: com.sun.tools.example.debug.tty.ThreadInfo)
                      public get(): com.sun.jdi.StackFrame
                  }
                  abstract class Commands$AsyncExecution {
                      this$0: com.sun.tools.example.debug.tty.Commands
                      action(): void
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands)
                      execute(): void
                  }
                  class Commands$AsyncExecution$1 extends java.lang.Thread {
                      val$threadInfo: com.sun.tools.example.debug.tty.ThreadInfo
                      val$stackFrame: int
                      this$1: com.sun.tools.example.debug.tty.Commands$AsyncExecution
                      constructor(arg0: com.sun.tools.example.debug.tty.Commands$AsyncExecution, arg1: java.lang.String, arg2: com.sun.tools.example.debug.tty.ThreadInfo, arg3: int)
                      public run(): void
                  }
                  class Env {
                      static specList: com.sun.tools.example.debug.tty.EventRequestSpecList
                      constructor()
                      static init(arg0: java.lang.String, arg1: boolean, arg2: int): void
                      static connection(): com.sun.tools.example.debug.tty.VMConnection
                      static vm(): com.sun.jdi.VirtualMachine
                      shutdown<T>(...args: any[]): any
                      setSourcePath<T>(...args: any[]): any
                      static getSourcePath(): java.lang.String
                      static excludesString(): java.lang.String
                      addExcludes<T>(...args: any[]): any
                      static setExcludes(arg0: java.lang.String): void
                      static atExitMethod(): com.sun.jdi.Method
                      static setAtExitMethod(arg0: com.sun.jdi.Method): void
                      static sourceReader(arg0: com.sun.jdi.Location): java.io.BufferedReader
                      static sourceLine(arg0: com.sun.jdi.Location, arg1: int): java.lang.String
                      static description(arg0: com.sun.jdi.ObjectReference): java.lang.String
                      static toHex(arg0: long): java.lang.String
                      static fromHex(arg0: java.lang.String): long
                      static getReferenceTypeFromToken(arg0: java.lang.String): com.sun.jdi.ReferenceType
                      static getSaveKeys(): java.util.Set<java.lang.String>
                      static getSavedValue(arg0: java.lang.String): com.sun.jdi.Value
                      static setSavedValue(arg0: java.lang.String, arg1: com.sun.jdi.Value): void
                  }
                  class Env$SourceCode {
                      constructor(arg0: java.lang.String, arg1: java.io.BufferedReader)
                      fileName(): java.lang.String
                      sourceLine(arg0: int): java.lang.String
                  }
                  class AmbiguousMethodException extends java.lang.Exception {
                      constructor(...args: any[])
                  }
                  class BreakpointSpec extends com.sun.tools.example.debug.tty.EventRequestSpec {
                      methodId: java.lang.String
                      methodArgs<T>(...args: any[]): any
                      lineNumber<T>(...args: any[]): any
                      constructor(...args: any[])
                      resolveEventRequest(arg0: com.sun.jdi.ReferenceType): com.sun.jdi.request.EventRequest
                      methodName(): java.lang.String
                      isMethodBreakpoint(): boolean
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      errorMessageFor(arg0: java.lang.Exception): java.lang.String
                      toString<T>(...args: any[]): any
                  }
                  class EventRequestSpecList {
                      constructor()
                      resolve(arg0: com.sun.jdi.event.ClassPrepareEvent): boolean
                      resolveAll(): void
                      addEagerlyResolve(arg0: com.sun.tools.example.debug.tty.EventRequestSpec): boolean
                      createBreakpoint<T>(...args: any[]): any
                      createExceptionCatch(arg0: java.lang.String, arg1: boolean, arg2: boolean): com.sun.tools.example.debug.tty.EventRequestSpec
                      createAccessWatchpoint(arg0: java.lang.String, arg1: java.lang.String): com.sun.tools.example.debug.tty.WatchpointSpec
                      createModificationWatchpoint(arg0: java.lang.String, arg1: java.lang.String): com.sun.tools.example.debug.tty.WatchpointSpec
                      delete(arg0: com.sun.tools.example.debug.tty.EventRequestSpec): boolean
                      eventRequestSpecs(): java.util.List<com.sun.tools.example.debug.tty.EventRequestSpec>
                  }
                  class ExceptionSpec extends com.sun.tools.example.debug.tty.EventRequestSpec {
                      constructor(arg0: com.sun.tools.example.debug.tty.ReferenceTypeSpec, arg1: boolean, arg2: boolean)
                      resolveEventRequest(arg0: com.sun.jdi.ReferenceType): com.sun.jdi.request.EventRequest
                      public notifyCaught(): boolean
                      public notifyUncaught(): boolean
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      toString<T>(...args: any[]): any
                  }
                  class LineNotFoundException extends java.lang.Exception {
                      constructor(...args: any[])
                  }
                  class MessageOutput {
                      static textResources: java.util.ResourceBundle
                      public constructor()
                      static fatalError(arg0: java.lang.String): void
                      format<T>(...args: any[]): any
                      static printDirectln(arg0: java.lang.String): void
                      printDirect<T>(...args: any[]): any
                      println<T>(...args: any[]): any
                      print<T>(...args: any[]): any
                      lnprint<T>(...args: any[]): any
                      static printException(arg0: java.lang.String, arg1: java.lang.Exception): void
                      static printPrompt(): void
                  }
                  class ModificationWatchpointSpec extends com.sun.tools.example.debug.tty.WatchpointSpec {
                      constructor(arg0: com.sun.tools.example.debug.tty.ReferenceTypeSpec, arg1: java.lang.String)
                      resolveEventRequest(arg0: com.sun.jdi.ReferenceType): com.sun.jdi.request.EventRequest
                      toString<T>(...args: any[]): any
                  }
                  class PatternReferenceTypeSpec implements com.sun.tools.example.debug.tty.ReferenceTypeSpec {
                      classId: java.lang.String
                      stem: java.lang.String
                      constructor(arg0: java.lang.String)
                      public isUnique(): boolean
                      public matches(arg0: com.sun.jdi.ReferenceType): boolean
                      public createPrepareRequest(): com.sun.jdi.request.ClassPrepareRequest
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      toString<T>(...args: any[]): any
                  }
                  class SourceMapper {
                      constructor(...args: any[])
                      getSourcePath(): java.lang.String
                      sourceFile(arg0: com.sun.jdi.Location): java.io.File
                      sourceReader(arg0: com.sun.jdi.Location): java.io.BufferedReader
                  }
                  class EventHandler implements java.lang.Runnable {
                      notifier: com.sun.tools.example.debug.tty.EventNotifier
                      thread: java.lang.Thread
                      connected: boolean
                      completed: boolean
                      shutdownMessageKey: java.lang.String
                      stopOnVMStart: boolean
                      constructor(arg0: com.sun.tools.example.debug.tty.EventNotifier, arg1: boolean)
                      shutdown(): void
                      public run(): void
                      handleDisconnectedException(): void
                      public vmDeathEvent(arg0: com.sun.jdi.event.Event): boolean
                      public vmDisconnectEvent(arg0: com.sun.jdi.event.Event): boolean
                  }
                  interface EventNotifier {
                      public vmStartEvent(arg0: com.sun.jdi.event.VMStartEvent): void
                      public vmDeathEvent(arg0: com.sun.jdi.event.VMDeathEvent): void
                      public vmDisconnectEvent(arg0: com.sun.jdi.event.VMDisconnectEvent): void
                      public threadStartEvent(arg0: com.sun.jdi.event.ThreadStartEvent): void
                      public threadDeathEvent(arg0: com.sun.jdi.event.ThreadDeathEvent): void
                      public classPrepareEvent(arg0: com.sun.jdi.event.ClassPrepareEvent): void
                      public classUnloadEvent(arg0: com.sun.jdi.event.ClassUnloadEvent): void
                      public breakpointEvent(arg0: com.sun.jdi.event.BreakpointEvent): void
                      public fieldWatchEvent(arg0: com.sun.jdi.event.WatchpointEvent): void
                      public stepEvent(arg0: com.sun.jdi.event.StepEvent): void
                      public exceptionEvent(arg0: com.sun.jdi.event.ExceptionEvent): void
                      public methodEntryEvent(arg0: com.sun.jdi.event.MethodEntryEvent): void
                      public methodExitEvent(arg0: com.sun.jdi.event.MethodExitEvent): boolean
                      public vmInterrupted(): void
                      public receivedEvent(arg0: com.sun.jdi.event.Event): void
                  }
                  class TTY implements com.sun.tools.example.debug.tty.EventNotifier {
                      handler: com.sun.tools.example.debug.tty.EventHandler
                      public setShuttingDown(arg0: boolean): void
                      public isShuttingDown(): boolean
                      public vmStartEvent(arg0: com.sun.jdi.event.VMStartEvent): void
                      public vmDeathEvent(arg0: com.sun.jdi.event.VMDeathEvent): void
                      public vmDisconnectEvent(arg0: com.sun.jdi.event.VMDisconnectEvent): void
                      public threadStartEvent(arg0: com.sun.jdi.event.ThreadStartEvent): void
                      public threadDeathEvent(arg0: com.sun.jdi.event.ThreadDeathEvent): void
                      public classPrepareEvent(arg0: com.sun.jdi.event.ClassPrepareEvent): void
                      public classUnloadEvent(arg0: com.sun.jdi.event.ClassUnloadEvent): void
                      public breakpointEvent(arg0: com.sun.jdi.event.BreakpointEvent): void
                      public fieldWatchEvent(arg0: com.sun.jdi.event.WatchpointEvent): void
                      public stepEvent(arg0: com.sun.jdi.event.StepEvent): void
                      public exceptionEvent(arg0: com.sun.jdi.event.ExceptionEvent): void
                      public methodEntryEvent(arg0: com.sun.jdi.event.MethodEntryEvent): void
                      public methodExitEvent(arg0: com.sun.jdi.event.MethodExitEvent): boolean
                      public vmInterrupted(): void
                      public receivedEvent(arg0: com.sun.jdi.event.Event): void
                      help(): void
                      executeCommand(arg0: java.util.StringTokenizer): void
                      monitorCommand(arg0: java.util.StringTokenizer): void
                      unmonitorCommand(arg0: java.util.StringTokenizer): void
                      readCommand(arg0: java.util.StringTokenizer): void
                      readCommandFile(arg0: java.io.File): boolean
                      readStartupCommandFile(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): java.lang.String
                      public constructor()
                      usageError<T>(...args: any[]): any
                      public static main(arg0: java.lang.String[]): void
                  }
                  class TTYResources extends java.util.ListResourceBundle {
                      public constructor()
                      public getContents(): java.lang.Object[][]
                  }
                  class TTYResources_ja extends java.util.ListResourceBundle {
                      public constructor()
                      public getContents(): java.lang.Object[][]
                  }
                  class TTYResources_zh_CN extends java.util.ListResourceBundle {
                      public constructor()
                      public getContents(): java.lang.Object[][]
                  }
                  class ThreadInfo {
                      static addThread(arg0: com.sun.jdi.ThreadReference): void
                      static removeThread(arg0: com.sun.jdi.ThreadReference): void
                      static threads(): java.util.List<com.sun.tools.example.debug.tty.ThreadInfo>
                      static invalidateAll(): void
                      static setThreadGroup(arg0: com.sun.jdi.ThreadGroupReference): void
                      static setCurrentThread(arg0: com.sun.jdi.ThreadReference): void
                      static setCurrentThreadInfo(arg0: com.sun.tools.example.debug.tty.ThreadInfo): void
                      static getCurrentThreadInfo(): com.sun.tools.example.debug.tty.ThreadInfo
                      getThread(): com.sun.jdi.ThreadReference
                      static group(): com.sun.jdi.ThreadGroupReference
                      getThreadInfo<T>(...args: any[]): any
                      getStack(): java.util.List<com.sun.jdi.StackFrame>
                      getCurrentFrame(): com.sun.jdi.StackFrame
                      invalidate(): void
                      getCurrentFrameIndex(): int
                      setCurrentFrameIndex(arg0: int): void
                      up(arg0: int): void
                      down(arg0: int): void
                  }
                  class ThreadGroupIterator implements java.util.Iterator<com.sun.jdi.ThreadGroupReference> {
                      constructor(...args: any[])
                      public hasNext(): boolean
                      next<T>(...args: any[]): any
                      public nextThreadGroup(): com.sun.jdi.ThreadGroupReference
                      public remove(): void
                      static find(arg0: java.lang.String): com.sun.jdi.ThreadGroupReference
                  }
                  class ThreadIterator implements java.util.Iterator<com.sun.jdi.ThreadReference> {
                      it: java.util.Iterator<com.sun.jdi.ThreadReference>
                      tgi: com.sun.tools.example.debug.tty.ThreadGroupIterator
                      constructor(...args: any[])
                      public hasNext(): boolean
                      next<T>(...args: any[]): any
                      public nextThread(): com.sun.jdi.ThreadReference
                      public remove(): void
                  }
                  class VMConnection {
                      notifyOutputComplete(): void
                      waitOutputComplete(): void
                      constructor(arg0: java.lang.String, arg1: int)
                      open(): com.sun.jdi.VirtualMachine
                      setConnectorArg(arg0: java.lang.String, arg1: java.lang.String): boolean
                      connectorArg(arg0: java.lang.String): java.lang.String
                      public vm(): com.sun.jdi.VirtualMachine
                      isOpen(): boolean
                      isLaunch(): boolean
                      public disposeVM(): void
                      static access$000(arg0: com.sun.tools.example.debug.tty.VMConnection, arg1: java.io.InputStream): void
                  }
                  class VMConnection$1 extends java.lang.Thread {
                      val$stream: java.io.InputStream
                      this$0: com.sun.tools.example.debug.tty.VMConnection
                      constructor(arg0: com.sun.tools.example.debug.tty.VMConnection, arg1: java.lang.String, arg2: java.io.InputStream)
                      public run(): void
                  }
                  class VMNotConnectedException extends java.lang.RuntimeException {
                      constructor(...args: any[])
                  }
                  class MalformedMemberNameException extends java.lang.Exception {
                      constructor(...args: any[])
                  }
                  interface ReferenceTypeSpec {
                      public matches(arg0: com.sun.jdi.ReferenceType): boolean
                      public createPrepareRequest(): com.sun.jdi.request.ClassPrepareRequest
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                  }
                  abstract class EventRequestSpec {
                      refSpec: com.sun.tools.example.debug.tty.ReferenceTypeSpec
                      suspendPolicy: int
                      resolved<T>(...args: any[]): any
                      prepareRequest: com.sun.jdi.request.ClassPrepareRequest
                      constructor(arg0: com.sun.tools.example.debug.tty.ReferenceTypeSpec)
                      resolveEventRequest(arg0: com.sun.jdi.ReferenceType): com.sun.jdi.request.EventRequest
                      resolve(arg0: com.sun.jdi.event.ClassPrepareEvent): com.sun.jdi.request.EventRequest
                      remove(): void
                      resolveEagerly(): com.sun.jdi.request.EventRequest
                      isResolved(): boolean
                      protected isJavaIdentifier(arg0: java.lang.String): boolean
                      errorMessageFor(arg0: java.lang.Exception): java.lang.String
                  }
                  abstract class WatchpointSpec extends com.sun.tools.example.debug.tty.EventRequestSpec {
                      fieldId: java.lang.String
                      constructor(arg0: com.sun.tools.example.debug.tty.ReferenceTypeSpec, arg1: java.lang.String)
                      public hashCode(): int
                      public equals(arg0: java.lang.Object): boolean
                      errorMessageFor(arg0: java.lang.Exception): java.lang.String
                  }

               }

            }

         }
         namespace extcheck {
            class ExtCheck {
                static create(arg0: java.io.File, arg1: boolean): com.sun.tools.extcheck.ExtCheck
                checkInstalledAgainstTarget(): boolean
                verboseMessage(arg0: java.lang.String): void
                generalMessage(arg0: java.lang.String): void
                static error(arg0: java.lang.String): void
            }
            class ExtCheck$JarLoader {
                constructor(arg0: java.net.URL)
                getBaseURL(): java.net.URL
                getJarFile(): java.util.jar.JarFile
                getClassPath(): java.net.URL[]
            }
            class Main {
                public static INSUFFICIENT: java.lang.String
                public static MISSING: java.lang.String
                public static DOES_NOT_EXIST: java.lang.String
                public static EXTRA: java.lang.String
                public constructor()
                public static main(arg0: java.lang.String[]): void
                public static realMain(arg0: java.lang.String[]): void
            }

         }
         namespace jdi {
            namespace resources {
               class jdi_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class jdi_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class jdi extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }
            class BaseLineInfo implements com.sun.tools.jdi.LineInfo {
                constructor(arg0: int, arg1: com.sun.tools.jdi.ReferenceTypeImpl)
                public liStratum(): java.lang.String
                public liLineNumber(): int
                public liSourceName(): java.lang.String
                public liSourcePath(): java.lang.String
            }
            class BooleanTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.BooleanType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class BooleanValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.BooleanValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: boolean)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public type(): com.sun.jdi.Type
                public value(): boolean
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class ByteTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.ByteType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class ByteValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.ByteValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: byte)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public value(): byte
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedCharValue(): char
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class CharTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.CharType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class CharValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.CharValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: char)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public value(): char
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                toString<T>(...args: any[]): any
                checkedByteValue(): byte
                checkedShortValue(): short
                typeValueKey(): byte
            }
            class ConcreteMethodImpl extends com.sun.tools.jdi.MethodImpl {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: int)
                public location(): com.sun.jdi.Location
                sourceNameFilter(arg0: java.util.List<com.sun.jdi.Location>, arg1: com.sun.tools.jdi.SDE$Stratum, arg2: java.lang.String): java.util.List<com.sun.jdi.Location>
                allLineLocations(arg0: com.sun.tools.jdi.SDE$Stratum, arg1: java.lang.String): java.util.List<com.sun.jdi.Location>
                locationsOfLine(arg0: com.sun.tools.jdi.SDE$Stratum, arg1: java.lang.String, arg2: int): java.util.List<com.sun.jdi.Location>
                public locationOfCodeIndex(arg0: long): com.sun.jdi.Location
                codeIndexToLineInfo(arg0: com.sun.tools.jdi.SDE$Stratum, arg1: long): com.sun.tools.jdi.LineInfo
                public variables(): java.util.List<com.sun.jdi.LocalVariable>
                public variablesByName(arg0: java.lang.String): java.util.List<com.sun.jdi.LocalVariable>
                public arguments(): java.util.List<com.sun.jdi.LocalVariable>
                public bytecodes(): byte[]
                argSlotCount(): int
            }
            class ConcreteMethodImpl$SoftLocationXRefs {
                stratumID: java.lang.String
                lineMapper: java.util.Map<java.lang.Integer, java.util.List<com.sun.jdi.Location>>
                lineLocations: java.util.List<com.sun.jdi.Location>
                lowestLine: int
                highestLine: int
                constructor(arg0: java.lang.String, arg1: java.util.Map<java.lang.Integer, java.util.List<com.sun.jdi.Location>>, arg2: java.util.List<com.sun.jdi.Location>, arg3: int, arg4: int)
            }
            class DoubleTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.DoubleType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class DoubleValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.DoubleValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: double)
                public equals(arg0: java.lang.Object): boolean
                compareTo<T>(...args: any[]): any
                public hashCode(): int
                public type(): com.sun.jdi.Type
                public value(): double
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                checkedLongValue(): long
                checkedFloatValue(): float
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class FieldImpl extends com.sun.tools.jdi.TypeComponentImpl implements com.sun.jdi.Field , com.sun.tools.jdi.ValueContainer {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: int)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public findType(arg0: java.lang.String): com.sun.jdi.Type
                public typeName(): java.lang.String
                public isTransient(): boolean
                public isVolatile(): boolean
                public isEnumConstant(): boolean
                toString<T>(...args: any[]): any
            }
            class FloatTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.FloatType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class FloatValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.FloatValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: float)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public value(): float
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                checkedLongValue(): long
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class IntegerTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.IntegerType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class IntegerValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.IntegerValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: int)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public value(): int
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class InternalEventHandler implements java.lang.Runnable {
                queue: com.sun.tools.jdi.EventQueueImpl
                vm: com.sun.tools.jdi.VirtualMachineImpl
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.EventQueueImpl)
                public run(): void
            }
            class LocalVariableImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.LocalVariable , com.sun.tools.jdi.ValueContainer {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.jdi.Method, arg2: int, arg3: com.sun.jdi.Location, arg4: com.sun.jdi.Location, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public name(): java.lang.String
                public typeName(): java.lang.String
                public type(): com.sun.jdi.Type
                public findType(arg0: java.lang.String): com.sun.jdi.Type
                public signature(): java.lang.String
                public genericSignature(): java.lang.String
                public isVisible(arg0: com.sun.jdi.StackFrame): boolean
                public isArgument(): boolean
                slot(): int
                hides(arg0: com.sun.jdi.LocalVariable): boolean
                toString<T>(...args: any[]): any
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class LocationImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.Location {
                constructor(...args: any[])
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public declaringType(): com.sun.jdi.ReferenceType
                public method(): com.sun.jdi.Method
                public codeIndex(): long
                getBaseLineInfo(arg0: com.sun.tools.jdi.SDE$Stratum): com.sun.tools.jdi.LineInfo
                getLineInfo(arg0: com.sun.tools.jdi.SDE$Stratum): com.sun.tools.jdi.LineInfo
                addStratumLineInfo(arg0: com.sun.tools.jdi.LineInfo): void
                addBaseLineInfo(arg0: com.sun.tools.jdi.LineInfo): void
                sourceName<T>(...args: any[]): any
                sourcePath<T>(...args: any[]): any
                lineNumber<T>(...args: any[]): any
                toString<T>(...args: any[]): any
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class LockObject {
                public constructor()
            }
            class LongTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.LongType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class LongValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.LongValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public value(): long
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class MonitorInfoImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.MonitorInfo , com.sun.tools.jdi.ThreadListener {
                monitor<T>(...args: any[]): any
                thread<T>(...args: any[]): any
                stack_depth: int
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.jdi.ObjectReference, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: int)
                public threadResumable(arg0: com.sun.tools.jdi.ThreadAction): boolean
                public stackDepth(): int
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class NonConcreteMethodImpl extends com.sun.tools.jdi.MethodImpl {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: int)
                public location(): com.sun.jdi.Location
                allLineLocations<T>(...args: any[]): any
                locationsOfLine<T>(...args: any[]): any
                public locationOfCodeIndex(arg0: long): com.sun.jdi.Location
                public variables(): java.util.List<com.sun.jdi.LocalVariable>
                public variablesByName(arg0: java.lang.String): java.util.List<com.sun.jdi.LocalVariable>
                public arguments(): java.util.List<com.sun.jdi.LocalVariable>
                public bytecodes(): byte[]
                argSlotCount(): int
            }
            class ObsoleteMethodImpl extends com.sun.tools.jdi.NonConcreteMethodImpl {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl)
                public isObsolete(): boolean
                public returnTypeName(): java.lang.String
                public returnType(): com.sun.jdi.Type
                public argumentTypeNames(): java.util.List<java.lang.String>
                public argumentSignatures(): java.util.List<java.lang.String>
                argumentType(arg0: int): com.sun.jdi.Type
                public argumentTypes(): java.util.List<com.sun.jdi.Type>
            }
            class ProcessAttachingConnector extends com.sun.tools.jdi.ConnectorImpl implements com.sun.jdi.connect.AttachingConnector {
                static ARG_PID: java.lang.String
                static ARG_TIMEOUT: java.lang.String
                vm: com.sun.tools.attach.VirtualMachine
                transport<T>(...args: any[]): any
                public constructor()
                public attach(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
                public name(): java.lang.String
                public description(): java.lang.String
                toString<T>(...args: any[]): any
                public defaultArguments(): java.util.Map
            }
            class ProcessAttachingConnector$2 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.ProcessAttachingConnector
                constructor(arg0: com.sun.tools.jdi.ProcessAttachingConnector)
                public name(): java.lang.String
            }
            class ProcessAttachingConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.ProcessAttachingConnector
                constructor(arg0: com.sun.tools.jdi.ProcessAttachingConnector)
                public name(): java.lang.String
            }
            class RawCommandLineLauncher extends com.sun.tools.jdi.AbstractLauncher implements com.sun.jdi.connect.LaunchingConnector {
                transportService<T>(...args: any[]): any
                transport<T>(...args: any[]): any
                public constructor()
                public launch(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
                public name(): java.lang.String
                public description(): java.lang.String
                toString<T>(...args: any[]): any
                public defaultArguments(): java.util.Map
            }
            class RawCommandLineLauncher$2 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.RawCommandLineLauncher
                constructor(arg0: com.sun.tools.jdi.RawCommandLineLauncher)
                public name(): java.lang.String
            }
            class RawCommandLineLauncher$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.RawCommandLineLauncher
                constructor(arg0: com.sun.tools.jdi.RawCommandLineLauncher)
                public name(): java.lang.String
            }
            abstract class PrimitiveTypeImpl extends com.sun.tools.jdi.TypeImpl implements com.sun.jdi.PrimitiveType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            class ShortTypeImpl extends com.sun.tools.jdi.PrimitiveTypeImpl implements com.sun.jdi.ShortType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                convert(arg0: com.sun.jdi.PrimitiveValue): com.sun.jdi.PrimitiveValue
                toString<T>(...args: any[]): any
            }
            abstract class PrimitiveValueImpl extends com.sun.tools.jdi.ValueImpl implements com.sun.jdi.PrimitiveValue {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                checkedShortValue(): short
                checkedIntValue(): int
                checkedLongValue(): long
                checkedFloatValue(): float
                checkedBooleanValue(): boolean
                checkedDoubleValue(): double
                prepareForAssignmentTo(arg0: com.sun.tools.jdi.ValueContainer): com.sun.tools.jdi.ValueImpl
                convertForAssignmentTo(arg0: com.sun.tools.jdi.ValueContainer): com.sun.tools.jdi.ValueImpl
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class ShortValueImpl extends com.sun.tools.jdi.PrimitiveValueImpl implements com.sun.jdi.ShortValue {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: short)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public type(): com.sun.jdi.Type
                public value(): short
                public booleanValue(): boolean
                public byteValue(): byte
                public charValue(): char
                public shortValue(): short
                public intValue(): int
                public longValue(): long
                public floatValue(): float
                public doubleValue(): double
                checkedByteValue(): byte
                checkedCharValue(): char
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class GenericAttachingConnector extends com.sun.tools.jdi.ConnectorImpl implements com.sun.jdi.connect.AttachingConnector {
                static ARG_ADDRESS: java.lang.String
                static ARG_TIMEOUT: java.lang.String
                transportService: com.sun.jdi.connect.spi.TransportService
                transport<T>(...args: any[]): any
                protected constructor(arg0: com.sun.jdi.connect.spi.TransportService)
                public static create(arg0: com.sun.jdi.connect.spi.TransportService): com.sun.tools.jdi.GenericAttachingConnector
                attach<T>(...args: any[]): any
                public name(): java.lang.String
                public description(): java.lang.String
                toString<T>(...args: any[]): any
                public defaultArguments(): java.util.Map
            }
            class GenericAttachingConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.GenericAttachingConnector
                constructor(arg0: com.sun.tools.jdi.GenericAttachingConnector)
                public name(): java.lang.String
            }
            class SocketAttachingConnector extends com.sun.tools.jdi.GenericAttachingConnector {
                static ARG_PORT: java.lang.String
                static ARG_HOST: java.lang.String
                public constructor()
                public attach(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
                public name(): java.lang.String
                public description(): java.lang.String
            }
            class SocketAttachingConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.SocketAttachingConnector
                constructor(arg0: com.sun.tools.jdi.SocketAttachingConnector)
                public name(): java.lang.String
            }
            class GenericListeningConnector extends com.sun.tools.jdi.ConnectorImpl implements com.sun.jdi.connect.ListeningConnector {
                static ARG_ADDRESS: java.lang.String
                static ARG_TIMEOUT: java.lang.String
                listenMap: java.util.Map<java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>, com.sun.jdi.connect.spi.TransportService$ListenKey>
                transportService: com.sun.jdi.connect.spi.TransportService
                transport<T>(...args: any[]): any
                static $assertionsDisabled: boolean
                protected constructor(arg0: com.sun.jdi.connect.spi.TransportService)
                public static create(arg0: com.sun.jdi.connect.spi.TransportService): com.sun.tools.jdi.GenericListeningConnector
                startListening<T>(...args: any[]): any
                public stopListening(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): void
                public accept(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
                public supportsMultipleConnections(): boolean
                public name(): java.lang.String
                public description(): java.lang.String
                toString<T>(...args: any[]): any
                public defaultArguments(): java.util.Map
            }
            class GenericListeningConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.GenericListeningConnector
                constructor(arg0: com.sun.tools.jdi.GenericListeningConnector)
                public name(): java.lang.String
            }
            class SocketListeningConnector extends com.sun.tools.jdi.GenericListeningConnector {
                static ARG_PORT: java.lang.String
                static ARG_LOCALADDR: java.lang.String
                public constructor()
                public startListening(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): java.lang.String
                public name(): java.lang.String
                public description(): java.lang.String
            }
            class SocketListeningConnector$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.SocketListeningConnector
                constructor(arg0: com.sun.tools.jdi.SocketListeningConnector)
                public name(): java.lang.String
            }
            class SocketTransportServiceCapabilities extends com.sun.jdi.connect.spi.TransportService$Capabilities {
                constructor()
                public supportsMultipleConnections(): boolean
                public supportsAttachTimeout(): boolean
                public supportsAcceptTimeout(): boolean
                public supportsHandshakeTimeout(): boolean
            }
            class SocketConnection extends com.sun.jdi.connect.spi.Connection {
                constructor(arg0: java.net.Socket)
                public close(): void
                public isOpen(): boolean
                public readPacket(): byte[]
                public writePacket(arg0: byte[]): void
            }
            class SocketTransportService extends com.sun.jdi.connect.spi.TransportService {
                handshake(arg0: java.net.Socket, arg1: long): void
                public constructor()
                public name(): java.lang.String
                public description(): java.lang.String
                public capabilities(): com.sun.jdi.connect.spi.TransportService$Capabilities
                public attach(arg0: java.lang.String, arg1: long, arg2: long): com.sun.jdi.connect.spi.Connection
                startListening<T>(...args: any[]): any
                public stopListening(arg0: com.sun.jdi.connect.spi.TransportService$ListenKey): void
                public accept(arg0: com.sun.jdi.connect.spi.TransportService$ListenKey, arg1: long, arg2: long): com.sun.jdi.connect.spi.Connection
                toString<T>(...args: any[]): any
            }
            class SocketTransportService$SocketListenKey extends com.sun.jdi.connect.spi.TransportService$ListenKey {
                ss: java.net.ServerSocket
                constructor(arg0: java.net.ServerSocket)
                socket(): java.net.ServerSocket
                public address(): java.lang.String
                toString<T>(...args: any[]): any
            }
            class StackFrameImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.StackFrame , com.sun.tools.jdi.ThreadListener {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long, arg3: com.sun.jdi.Location)
                public threadResumable(arg0: com.sun.tools.jdi.ThreadAction): boolean
                validateStackFrame(): void
                public location(): com.sun.jdi.Location
                public thread(): com.sun.jdi.ThreadReference
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public thisObject(): com.sun.jdi.ObjectReference
                public visibleVariables(): java.util.List<com.sun.jdi.LocalVariable>
                public visibleVariableByName(arg0: java.lang.String): com.sun.jdi.LocalVariable
                public getValue(arg0: com.sun.jdi.LocalVariable): com.sun.jdi.Value
                public getValues(arg0: java.util.List<com.sun.jdi.LocalVariable>): java.util.Map<com.sun.jdi.LocalVariable, com.sun.jdi.Value>
                public setValue(arg0: com.sun.jdi.LocalVariable, arg1: com.sun.jdi.Value): void
                public getArgumentValues(): java.util.List<com.sun.jdi.Value>
                pop(): void
                toString<T>(...args: any[]): any
                public virtualMachine(): com.sun.jdi.VirtualMachine
                static access$000(arg0: com.sun.tools.jdi.StackFrameImpl): com.sun.tools.jdi.ThreadReferenceImpl
                static access$100(arg0: com.sun.tools.jdi.StackFrameImpl): long
            }
            class StackFrameImpl$1 implements com.sun.tools.jdi.CommandSender {
                this$0: com.sun.tools.jdi.StackFrameImpl
                constructor(arg0: com.sun.tools.jdi.StackFrameImpl)
                public send(): com.sun.tools.jdi.PacketStream
            }
            class StratumLineInfo implements com.sun.tools.jdi.LineInfo {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String)
                public liStratum(): java.lang.String
                public liLineNumber(): int
                public liSourceName(): java.lang.String
                public liSourcePath(): java.lang.String
            }
            abstract class ConnectorImpl implements com.sun.jdi.connect.Connector {
                defaultArguments<T>(...args: any[]): any
                static trueString: java.lang.String
                static falseString: java.lang.String
                constructor()
                addStringArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean): void
                addBooleanArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean, arg4: boolean): void
                addIntegerArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: int, arg6: int): void
                addSelectedArgument(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: java.util.List<java.lang.String>): void
                argument(arg0: java.lang.String, arg1: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.tools.jdi.ConnectorImpl$ArgumentImpl
                getString(arg0: java.lang.String): java.lang.String
                toString<T>(...args: any[]): any
            }
            class ConnectorImpl$SelectedArgumentImpl extends com.sun.tools.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$SelectedArgument {
                this$0: com.sun.tools.jdi.ConnectorImpl
                constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: java.util.List<java.lang.String>)
                public choices(): java.util.List<java.lang.String>
                public isValid(arg0: java.lang.String): boolean
            }
            class ConnectorImpl$StringArgumentImpl extends com.sun.tools.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$StringArgument {
                this$0: com.sun.tools.jdi.ConnectorImpl
                constructor(arg0: com.sun.tools.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean)
                public isValid(arg0: java.lang.String): boolean
            }
            class ConnectorImpl$IntegerArgumentImpl extends com.sun.tools.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$IntegerArgument {
                this$0: com.sun.tools.jdi.ConnectorImpl
                constructor(arg0: com.sun.tools.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean, arg6: int, arg7: int)
                public setValue(arg0: int): void
                isValid<T>(...args: any[]): any
                public stringValueOf(arg0: int): java.lang.String
                public intValue(): int
                public max(): int
                public min(): int
            }
            class ConnectorImpl$BooleanArgumentImpl extends com.sun.tools.jdi.ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$BooleanArgument {
                this$0: com.sun.tools.jdi.ConnectorImpl
                constructor(arg0: com.sun.tools.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: boolean)
                public setValue(arg0: boolean): void
                public isValid(arg0: java.lang.String): boolean
                public stringValueOf(arg0: boolean): java.lang.String
                public booleanValue(): boolean
            }
            abstract class ConnectorImpl$ArgumentImpl implements com.sun.jdi.connect.Connector$Argument , java.lang.Cloneable , java.io.Serializable {
                this$0: com.sun.tools.jdi.ConnectorImpl
                constructor(arg0: com.sun.tools.jdi.ConnectorImpl, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: boolean)
                public isValid(arg0: java.lang.String): boolean
                public name(): java.lang.String
                public label(): java.lang.String
                public description(): java.lang.String
                public value(): java.lang.String
                public setValue(arg0: java.lang.String): void
                public mustSpecify(): boolean
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public clone(): java.lang.Object
                toString<T>(...args: any[]): any
            }
            abstract class AbstractLauncher extends com.sun.tools.jdi.ConnectorImpl implements com.sun.jdi.connect.LaunchingConnector {
                grp: java.lang.ThreadGroup
                launch<T>(...args: any[]): any
                public name(): java.lang.String
                public description(): java.lang.String
                constructor()
                tokenizeCommand(arg0: java.lang.String, arg1: char): java.lang.String[]
            }
            class AbstractLauncher$Helper {
                this$0: com.sun.tools.jdi.AbstractLauncher
                constructor(arg0: com.sun.tools.jdi.AbstractLauncher, arg1: java.lang.String[], arg2: java.lang.String, arg3: com.sun.jdi.connect.spi.TransportService$ListenKey, arg4: com.sun.jdi.connect.spi.TransportService)
                commandString(): java.lang.String
                launchAndAccept(): void
                process(): java.lang.Process
                connection(): com.sun.jdi.connect.spi.Connection
                notifyOfExit(): void
                notifyOfConnection(arg0: com.sun.jdi.connect.spi.Connection): void
                notifyOfAcceptException(arg0: java.io.IOException): void
                monitorTarget(): java.lang.Thread
                acceptConnection(): java.lang.Thread
                static access$000(arg0: com.sun.tools.jdi.AbstractLauncher$Helper): java.lang.Process
                static access$100(arg0: com.sun.tools.jdi.AbstractLauncher$Helper): com.sun.jdi.connect.spi.TransportService$ListenKey
                static access$200(arg0: com.sun.tools.jdi.AbstractLauncher$Helper): com.sun.jdi.connect.spi.TransportService
            }
            class AbstractLauncher$Helper$2 extends java.lang.Thread {
                this$1: com.sun.tools.jdi.AbstractLauncher$Helper
                constructor(arg0: com.sun.tools.jdi.AbstractLauncher$Helper, arg1: java.lang.ThreadGroup, arg2: java.lang.String)
                public run(): void
            }
            class AbstractLauncher$Helper$1 extends java.lang.Thread {
                this$1: com.sun.tools.jdi.AbstractLauncher$Helper
                constructor(arg0: com.sun.tools.jdi.AbstractLauncher$Helper, arg1: java.lang.ThreadGroup, arg2: java.lang.String)
                public run(): void
            }
            class SunCommandLineLauncher extends com.sun.tools.jdi.AbstractLauncher implements com.sun.jdi.connect.LaunchingConnector {
                transportService<T>(...args: any[]): any
                transport<T>(...args: any[]): any
                usingSharedMemory: boolean
                public constructor()
                static hasWhitespace(arg0: java.lang.String): boolean
                public launch(arg0: java.util.Map<java.lang.String, any extends com.sun.jdi.connect.Connector$Argument>): com.sun.jdi.VirtualMachine
                public name(): java.lang.String
                public description(): java.lang.String
                toString<T>(...args: any[]): any
                public defaultArguments(): java.util.Map
            }
            class SunCommandLineLauncher$2 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.SunCommandLineLauncher
                constructor(arg0: com.sun.tools.jdi.SunCommandLineLauncher)
                public name(): java.lang.String
            }
            class SunCommandLineLauncher$1 implements com.sun.jdi.connect.Transport {
                this$0: com.sun.tools.jdi.SunCommandLineLauncher
                constructor(arg0: com.sun.tools.jdi.SunCommandLineLauncher)
                public name(): java.lang.String
            }
            interface VMModifiers {
                public static PUBLIC: int
                public static PRIVATE: int
                public static PROTECTED: int
                public static STATIC: int
                public static FINAL: int
                public static SYNCHRONIZED: int
                public static VOLATILE: int
                public static BRIDGE: int
                public static TRANSIENT: int
                public static VARARGS: int
                public static NATIVE: int
                public static INTERFACE: int
                public static ABSTRACT: int
                public static ENUM_CONSTANT: int
                public static SYNTHETIC: int
            }
            class VoidTypeImpl extends com.sun.tools.jdi.TypeImpl implements com.sun.jdi.VoidType {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                toString<T>(...args: any[]): any
            }
            class EventDestination extends java.lang.Enum<com.sun.tools.jdi.EventDestination> {
                public static UNKNOWN_EVENT: com.sun.tools.jdi.EventDestination
                public static INTERNAL_EVENT: com.sun.tools.jdi.EventDestination
                public static CLIENT_EVENT: com.sun.tools.jdi.EventDestination
                public static values(): com.sun.tools.jdi.EventDestination[]
                valueOf<T>(...args: any[]): any
            }
            interface LineInfo {
                public liStratum(): java.lang.String
                public liLineNumber(): int
                public liSourceName(): java.lang.String
                public liSourcePath(): java.lang.String
            }
            class JNITypeParser {
                static SIGNATURE_ENDCLASS: char
                static SIGNATURE_FUNC: char
                static SIGNATURE_ENDFUNC: char
                constructor(arg0: java.lang.String)
                static typeNameToSignature(arg0: java.lang.String): java.lang.String
                typeName(): java.lang.String
                argumentTypeNames(): java.util.List<java.lang.String>
                signature(): java.lang.String
                argumentSignatures(): java.util.List<java.lang.String>
                dimensionCount(): int
                componentSignature(arg0: int): java.lang.String
            }
            class SDE {
                static BASE_STRATUM_NAME: java.lang.String
                static NullString: java.lang.String
                sourceDebugExtension: java.lang.String
                jplsFilename: java.lang.String
                defaultStratumId: java.lang.String
                isValid<T>(...args: any[]): any
                constructor(...args: any[])
                sdePeek(): char
                sdeRead(): char
                sdeAdvance(): void
                syntax<T>(...args: any[]): any
                assureLineTableSize(): void
                assureFileTableSize(): void
                assureStratumTableSize(): void
                readLine(): java.lang.String
                stratumTableIndex(arg0: java.lang.String): int
                stratum(arg0: java.lang.String): com.sun.tools.jdi.SDE$Stratum
                availableStrata(): java.util.List<java.lang.String>
                ignoreWhite(): void
                ignoreLine(): void
                readNumber(): int
                storeFile(arg0: int, arg1: java.lang.String, arg2: java.lang.String): void
                fileLine(): void
                storeLine(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void
                lineLine(): void
                storeStratum(arg0: java.lang.String): void
                stratumSection(): void
                fileSection(): void
                lineSection(): void
                ignoreSection(): void
                createJavaStratum(): void
                decode(): void
                createProxyForAbsentSDE(): void
                static access$000(arg0: com.sun.tools.jdi.SDE): com.sun.tools.jdi.SDE$StratumTableRecord[]
                static access$100(arg0: com.sun.tools.jdi.SDE): int
                static access$200(arg0: com.sun.tools.jdi.SDE): com.sun.tools.jdi.SDE$FileTableRecord[]
                static access$300(arg0: com.sun.tools.jdi.SDE, arg1: int, arg2: int): int
                static access$500(arg0: com.sun.tools.jdi.SDE, arg1: int, arg2: int, arg3: int): int
                static access$600(arg0: com.sun.tools.jdi.SDE, arg1: int, arg2: int): int
                static access$700(arg0: com.sun.tools.jdi.SDE): com.sun.tools.jdi.SDE$LineTableRecord[]
            }
            class SDE$1 {
            }
            class SDE$LineStratum {
                this$0: com.sun.tools.jdi.SDE
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                lineNumber(): int
                getSourceInfo(): void
                sourceName(): java.lang.String
                sourcePath(): java.lang.String
                constructor(arg0: com.sun.tools.jdi.SDE, arg1: int, arg2: int, arg3: com.sun.tools.jdi.ReferenceTypeImpl, arg4: int, arg5: com.sun.tools.jdi.SDE$1)
            }
            class SDE$Stratum {
                this$0: com.sun.tools.jdi.SDE
                id(): java.lang.String
                isJava(): boolean
                sourceNames(arg0: com.sun.tools.jdi.ReferenceTypeImpl): java.util.List<java.lang.String>
                sourcePaths(arg0: com.sun.tools.jdi.ReferenceTypeImpl): java.util.List<java.lang.String>
                lineStratum(arg0: com.sun.tools.jdi.ReferenceTypeImpl, arg1: int): com.sun.tools.jdi.SDE$LineStratum
                constructor(arg0: com.sun.tools.jdi.SDE, arg1: int, arg2: com.sun.tools.jdi.SDE$1)
            }
            class SDE$StratumTableRecord {
                id: java.lang.String
                fileIndex: int
                lineIndex: int
                this$0: com.sun.tools.jdi.SDE
                constructor(arg0: com.sun.tools.jdi.SDE, arg1: com.sun.tools.jdi.SDE$1)
            }
            class SDE$LineTableRecord {
                jplsStart: int
                jplsEnd: int
                jplsLineInc: int
                njplsStart: int
                njplsEnd: int
                fileId: int
                this$0: com.sun.tools.jdi.SDE
                constructor(arg0: com.sun.tools.jdi.SDE, arg1: com.sun.tools.jdi.SDE$1)
            }
            class SDE$FileTableRecord {
                fileId: int
                sourceName: java.lang.String
                sourcePath: java.lang.String
                isConverted: boolean
                this$0: com.sun.tools.jdi.SDE
                getSourcePath(arg0: com.sun.tools.jdi.ReferenceTypeImpl): java.lang.String
                constructor(arg0: com.sun.tools.jdi.SDE, arg1: com.sun.tools.jdi.SDE$1)
            }
            class JDWPException extends java.lang.Exception {
                errorCode<T>(...args: any[]): any
                constructor(arg0: short)
                toJDIException(): java.lang.RuntimeException
            }
            abstract class TypeComponentImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.TypeComponent {
                ref<T>(...args: any[]): any
                name<T>(...args: any[]): any
                signature<T>(...args: any[]): any
                genericSignature<T>(...args: any[]): any
                declaringType<T>(...args: any[]): any
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: int)
                public modifiers(): int
                public isStatic(): boolean
                public isFinal(): boolean
                public isPrivate(): boolean
                public isPackagePrivate(): boolean
                public isProtected(): boolean
                public isPublic(): boolean
                public isSynthetic(): boolean
                isModifierSet(arg0: int): boolean
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            abstract class MethodImpl extends com.sun.tools.jdi.TypeComponentImpl implements com.sun.jdi.Method {
                retValContainer: com.sun.tools.jdi.MethodImpl$ReturnContainer
                argSlotCount(): int
                allLineLocations<T>(...args: any[]): any
                locationsOfLine<T>(...args: any[]): any
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: int)
                static createMethodImpl(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: int): com.sun.tools.jdi.MethodImpl
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                codeIndexToLineInfo(arg0: com.sun.tools.jdi.SDE$Stratum, arg1: long): com.sun.tools.jdi.LineInfo
                public returnTypeName(): java.lang.String
                public returnType(): com.sun.jdi.Type
                public findType(arg0: java.lang.String): com.sun.jdi.Type
                public argumentTypeNames(): java.util.List<java.lang.String>
                public argumentSignatures(): java.util.List<java.lang.String>
                argumentType(arg0: int): com.sun.jdi.Type
                public argumentTypes(): java.util.List<com.sun.jdi.Type>
                compareTo<T>(...args: any[]): any
                public isAbstract(): boolean
                public isDefault(): boolean
                public isSynchronized(): boolean
                public isNative(): boolean
                public isVarArgs(): boolean
                public isBridge(): boolean
                public isConstructor(): boolean
                public isStaticInitializer(): boolean
                public isObsolete(): boolean
                getReturnValueContainer(): com.sun.tools.jdi.MethodImpl$ReturnContainer
                handleVarArgs(arg0: java.util.List<com.sun.jdi.Value>): void
                validateAndPrepareArgumentsForInvoke(arg0: java.util.List<com.sun.jdi.Value>): java.util.List<com.sun.jdi.Value>
                toString<T>(...args: any[]): any
                static access$000(arg0: com.sun.tools.jdi.MethodImpl): java.lang.String
            }
            class MethodImpl$ArgumentContainer implements com.sun.tools.jdi.ValueContainer {
                index: int
                this$0: com.sun.tools.jdi.MethodImpl
                constructor(arg0: com.sun.tools.jdi.MethodImpl, arg1: int)
                public type(): com.sun.jdi.Type
                public typeName(): java.lang.String
                public signature(): java.lang.String
                public findType(arg0: java.lang.String): com.sun.jdi.Type
            }
            class MethodImpl$ReturnContainer implements com.sun.tools.jdi.ValueContainer {
                this$0: com.sun.tools.jdi.MethodImpl
                constructor(arg0: com.sun.tools.jdi.MethodImpl)
                public type(): com.sun.jdi.Type
                public typeName(): java.lang.String
                public signature(): java.lang.String
                public findType(arg0: java.lang.String): com.sun.jdi.Type
            }
            class VMAction extends java.util.EventObject {
                static VM_SUSPENDED: int
                static VM_NOT_SUSPENDED: int
                id<T>(...args: any[]): any
                resumingThread<T>(...args: any[]): any
                constructor(...args: any[])
                vm(): com.sun.jdi.VirtualMachine
            }
            class EventSetImpl extends java.util.ArrayList<com.sun.jdi.event.Event> implements com.sun.jdi.event.EventSet {
                toString<T>(...args: any[]): any
                constructor(...args: any[])
                build(): void
                userFilter(): com.sun.jdi.event.EventSet
                internalFilter(): com.sun.jdi.event.EventSet
                createEvent(arg0: com.sun.tools.jdi.JDWP$Event$Composite$Events): com.sun.tools.jdi.EventSetImpl$EventImpl
                public virtualMachine(): com.sun.jdi.VirtualMachine
                public suspendPolicy(): int
                public resume(): void
                public iterator(): java.util.Iterator<com.sun.jdi.event.Event>
                public eventIterator(): com.sun.jdi.event.EventIterator
                public spliterator(): java.util.Spliterator<com.sun.jdi.event.Event>
                add<T>(...args: any[]): any
                public remove(arg0: java.lang.Object): boolean
                public addAll(arg0: java.util.Collection<com.sun.jdi.event.Event>): boolean
                public removeAll(arg0: java.util.Collection<any>): boolean
                public retainAll(arg0: java.util.Collection<any>): boolean
                public clear(): void
                static access$000(arg0: com.sun.tools.jdi.EventSetImpl): com.sun.tools.jdi.VirtualMachineImpl
            }
            class EventSetImpl$1 {
                static $SwitchMap$com$sun$tools$jdi$EventDestination: int[]
            }
            class EventSetImpl$Itr implements com.sun.jdi.event.EventIterator {
                cursor: int
                this$0: com.sun.tools.jdi.EventSetImpl
                public constructor(arg0: com.sun.tools.jdi.EventSetImpl)
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public nextEvent(): com.sun.jdi.event.Event
                public remove(): void
            }
            class EventSetImpl$ModificationWatchpointEventImpl extends com.sun.tools.jdi.EventSetImpl$WatchpointEventImpl implements com.sun.jdi.event.ModificationWatchpointEvent {
                newValue: com.sun.jdi.Value
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$FieldModification)
                public valueToBe(): com.sun.jdi.Value
                eventName(): java.lang.String
            }
            class EventSetImpl$AccessWatchpointEventImpl extends com.sun.tools.jdi.EventSetImpl$WatchpointEventImpl implements com.sun.jdi.event.AccessWatchpointEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$FieldAccess)
                eventName(): java.lang.String
            }
            abstract class EventSetImpl$WatchpointEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.WatchpointEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon, arg2: int, arg3: com.sun.jdi.ThreadReference, arg4: com.sun.jdi.Location, arg5: byte, arg6: long, arg7: long, arg8: com.sun.jdi.ObjectReference)
                public field(): com.sun.jdi.Field
                public object(): com.sun.jdi.ObjectReference
                public valueCurrent(): com.sun.jdi.Value
            }
            class EventSetImpl$VMDisconnectEventImpl extends com.sun.tools.jdi.EventSetImpl$EventImpl implements com.sun.jdi.event.VMDisconnectEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl)
                eventName(): java.lang.String
            }
            class EventSetImpl$VMDeathEventImpl extends com.sun.tools.jdi.EventSetImpl$EventImpl implements com.sun.jdi.event.VMDeathEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$VMDeath)
                eventName(): java.lang.String
            }
            class EventSetImpl$VMStartEventImpl extends com.sun.tools.jdi.EventSetImpl$ThreadedEventImpl implements com.sun.jdi.event.VMStartEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$VMStart)
                eventName(): java.lang.String
            }
            class EventSetImpl$ThreadStartEventImpl extends com.sun.tools.jdi.EventSetImpl$ThreadedEventImpl implements com.sun.jdi.event.ThreadStartEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$ThreadStart)
                eventName(): java.lang.String
            }
            class EventSetImpl$ThreadDeathEventImpl extends com.sun.tools.jdi.EventSetImpl$ThreadedEventImpl implements com.sun.jdi.event.ThreadDeathEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$ThreadDeath)
                eventName(): java.lang.String
            }
            class EventSetImpl$ExceptionEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.ExceptionEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$Exception)
                public exception(): com.sun.jdi.ObjectReference
                public catchLocation(): com.sun.jdi.Location
                eventName(): java.lang.String
            }
            class EventSetImpl$ClassUnloadEventImpl extends com.sun.tools.jdi.EventSetImpl$EventImpl implements com.sun.jdi.event.ClassUnloadEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$ClassUnload)
                public className(): java.lang.String
                public classSignature(): java.lang.String
                eventName(): java.lang.String
            }
            class EventSetImpl$ClassPrepareEventImpl extends com.sun.tools.jdi.EventSetImpl$ThreadedEventImpl implements com.sun.jdi.event.ClassPrepareEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$ClassPrepare)
                public referenceType(): com.sun.jdi.ReferenceType
                eventName(): java.lang.String
            }
            class EventSetImpl$MonitorWaitedEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.MonitorWaitedEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$MonitorWaited)
                eventName(): java.lang.String
                public monitor(): com.sun.jdi.ObjectReference
                public timedout(): boolean
            }
            class EventSetImpl$MonitorWaitEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.MonitorWaitEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$MonitorWait)
                eventName(): java.lang.String
                public monitor(): com.sun.jdi.ObjectReference
                public timeout(): long
            }
            class EventSetImpl$MonitorContendedEnteredEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.MonitorContendedEnteredEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$MonitorContendedEntered)
                eventName(): java.lang.String
                public monitor(): com.sun.jdi.ObjectReference
            }
            class EventSetImpl$MonitorContendedEnterEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.MonitorContendedEnterEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$MonitorContendedEnter)
                eventName(): java.lang.String
                public monitor(): com.sun.jdi.ObjectReference
            }
            class EventSetImpl$MethodExitEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.MethodExitEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(...args: any[])
                eventName(): java.lang.String
                public returnValue(): com.sun.jdi.Value
            }
            class EventSetImpl$MethodEntryEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.MethodEntryEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$MethodEntry)
                eventName(): java.lang.String
            }
            class EventSetImpl$StepEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.StepEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$SingleStep)
                eventName(): java.lang.String
            }
            class EventSetImpl$BreakpointEventImpl extends com.sun.tools.jdi.EventSetImpl$LocatableEventImpl implements com.sun.jdi.event.BreakpointEvent {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$Breakpoint)
                eventName(): java.lang.String
            }
            abstract class EventSetImpl$LocatableEventImpl extends com.sun.tools.jdi.EventSetImpl$ThreadedEventImpl implements com.sun.jdi.Locatable {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon, arg2: int, arg3: com.sun.jdi.ThreadReference, arg4: com.sun.jdi.Location)
                public location(): com.sun.jdi.Location
                public method(): com.sun.jdi.Method
                toString<T>(...args: any[]): any
            }
            abstract class EventSetImpl$ThreadedEventImpl extends com.sun.tools.jdi.EventSetImpl$EventImpl {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(arg0: com.sun.tools.jdi.EventSetImpl, arg1: com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon, arg2: int, arg3: com.sun.jdi.ThreadReference)
                public thread(): com.sun.jdi.ThreadReference
                toString<T>(...args: any[]): any
            }
            abstract class EventSetImpl$EventImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.event.Event {
                this$0: com.sun.tools.jdi.EventSetImpl
                constructor(...args: any[])
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public request(): com.sun.jdi.request.EventRequest
                requestID(): int
                destination(): com.sun.tools.jdi.EventDestination
                eventName(): java.lang.String
                toString<T>(...args: any[]): any
            }
            class ClassObjectReferenceImpl extends com.sun.tools.jdi.ObjectReferenceImpl implements com.sun.jdi.ClassObjectReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public reflectedType(): com.sun.jdi.ReferenceType
                typeValueKey(): byte
                toString<T>(...args: any[]): any
            }
            class ClassLoaderReferenceImpl extends com.sun.tools.jdi.ObjectReferenceImpl implements com.sun.jdi.ClassLoaderReference , com.sun.tools.jdi.VMListener {
                protected newCache(): com.sun.tools.jdi.ObjectReferenceImpl$Cache
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                protected description(): java.lang.String
                public definedClasses(): java.util.List<com.sun.jdi.ReferenceType>
                public visibleClasses(): java.util.List<com.sun.jdi.ReferenceType>
                findType(arg0: java.lang.String): com.sun.jdi.Type
                typeValueKey(): byte
            }
            class ClassLoaderReferenceImpl$1 {
            }
            class ClassLoaderReferenceImpl$Cache extends com.sun.tools.jdi.ObjectReferenceImpl$Cache {
                visibleClasses: java.util.List<com.sun.jdi.ReferenceType>
                constructor(arg0: com.sun.tools.jdi.ClassLoaderReferenceImpl$1)
            }
            class ThreadGroupReferenceImpl extends com.sun.tools.jdi.ObjectReferenceImpl implements com.sun.jdi.ThreadGroupReference , com.sun.tools.jdi.VMListener {
                name<T>(...args: any[]): any
                parent<T>(...args: any[]): any
                triedParent: boolean
                protected newCache(): com.sun.tools.jdi.ObjectReferenceImpl$Cache
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                protected description(): java.lang.String
                public suspend(): void
                public resume(): void
                public threads(): java.util.List<com.sun.jdi.ThreadReference>
                public threadGroups(): java.util.List<com.sun.jdi.ThreadGroupReference>
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class ThreadGroupReferenceImpl$1 {
            }
            class ThreadGroupReferenceImpl$Cache extends com.sun.tools.jdi.ObjectReferenceImpl$Cache {
                kids: com.sun.tools.jdi.JDWP$ThreadGroupReference$Children
                constructor(arg0: com.sun.tools.jdi.ThreadGroupReferenceImpl$1)
            }
            class ThreadReferenceImpl extends com.sun.tools.jdi.ObjectReferenceImpl implements com.sun.jdi.ThreadReference , com.sun.tools.jdi.VMListener {
                static SUSPEND_STATUS_SUSPENDED: int
                static SUSPEND_STATUS_BREAK: int
                protected newCache(): com.sun.tools.jdi.ObjectReferenceImpl$Cache
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                protected description(): java.lang.String
                public vmNotSuspended(arg0: com.sun.tools.jdi.VMAction): boolean
                public name(): java.lang.String
                sendResumingCommand(arg0: com.sun.tools.jdi.CommandSender): com.sun.tools.jdi.PacketStream
                public suspend(): void
                public resume(): void
                public suspendCount(): int
                public stop(arg0: com.sun.jdi.ObjectReference): void
                public interrupt(): void
                public status(): int
                public isSuspended(): boolean
                public isAtBreakpoint(): boolean
                public threadGroup(): com.sun.jdi.ThreadGroupReference
                public frameCount(): int
                frames<T>(...args: any[]): any
                public frame(arg0: int): com.sun.jdi.StackFrame
                public ownedMonitors(): java.util.List<com.sun.jdi.ObjectReference>
                public currentContendedMonitor(): com.sun.jdi.ObjectReference
                public ownedMonitorsAndFrames(): java.util.List<com.sun.jdi.MonitorInfo>
                public popFrames(arg0: com.sun.jdi.StackFrame): void
                public forceEarlyReturn(arg0: com.sun.jdi.Value): void
                toString<T>(...args: any[]): any
                typeValueKey(): byte
                addListener(arg0: com.sun.tools.jdi.ThreadListener): void
                removeListener(arg0: com.sun.tools.jdi.ThreadListener): void
            }
            class ThreadReferenceImpl$1 {
            }
            class ThreadReferenceImpl$Cache extends com.sun.tools.jdi.ObjectReferenceImpl$Cache {
                name: java.lang.String
                constructor(arg0: com.sun.tools.jdi.ThreadReferenceImpl$1)
            }
            class ThreadReferenceImpl$LocalCache {
                status: com.sun.tools.jdi.JDWP$ThreadReference$Status
                frames: java.util.List<com.sun.jdi.StackFrame>
                framesStart: int
                framesLength: int
                frameCount: int
                ownedMonitors: java.util.List<com.sun.jdi.ObjectReference>
                ownedMonitorsInfo: java.util.List<com.sun.jdi.MonitorInfo>
                contendedMonitor: com.sun.jdi.ObjectReference
                triedCurrentContended: boolean
                constructor(arg0: com.sun.tools.jdi.ThreadReferenceImpl$1)
            }
            class ArrayReferenceImpl extends com.sun.tools.jdi.ObjectReferenceImpl implements com.sun.jdi.ArrayReference {
                length<T>(...args: any[]): any
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                protected invokableReferenceType(arg0: com.sun.jdi.Method): com.sun.tools.jdi.ClassTypeImpl
                arrayType(): com.sun.tools.jdi.ArrayTypeImpl
                public getValue(arg0: int): com.sun.jdi.Value
                getValues<T>(...args: any[]): any
                public setValue(arg0: int, arg1: com.sun.jdi.Value): void
                setValues<T>(...args: any[]): any
                toString<T>(...args: any[]): any
                typeValueKey(): byte
                validateAssignment(arg0: com.sun.tools.jdi.ValueContainer): void
            }
            class ArrayReferenceImpl$Component implements com.sun.tools.jdi.ValueContainer {
                this$0: com.sun.tools.jdi.ArrayReferenceImpl
                constructor(arg0: com.sun.tools.jdi.ArrayReferenceImpl)
                public type(): com.sun.jdi.Type
                public typeName(): java.lang.String
                public signature(): java.lang.String
                public findType(arg0: java.lang.String): com.sun.jdi.Type
            }
            class StringReferenceImpl extends com.sun.tools.jdi.ObjectReferenceImpl implements com.sun.jdi.StringReference {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public value(): java.lang.String
                toString<T>(...args: any[]): any
                typeValueKey(): byte
            }
            class Packet {
                public static NoFlags: short
                public static Reply: short
                public static ReplyNoError: short
                static uID: int
                static nullData: byte[]
                id: int
                flags: short
                cmdSet: short
                cmd: short
                errorCode: short
                data: byte[]
                replied: boolean
                public toByteArray(): byte[]
                public static fromByteArray(arg0: byte[]): com.sun.tools.jdi.Packet
                constructor()
            }
            class ArrayTypeImpl extends com.sun.tools.jdi.ReferenceTypeImpl implements com.sun.jdi.ArrayType {
                protected constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public newInstance(arg0: int): com.sun.jdi.ArrayReference
                public componentSignature(): java.lang.String
                public componentTypeName(): java.lang.String
                type(): com.sun.jdi.Type
                addVisibleMethods(arg0: java.util.Map<java.lang.String, com.sun.jdi.Method>, arg1: java.util.Set<com.sun.jdi.InterfaceType>): void
                public allMethods(): java.util.List<com.sun.jdi.Method>
                findComponentType(arg0: java.lang.String): com.sun.jdi.Type
                public componentType(): com.sun.jdi.Type
                static isComponentAssignable(arg0: com.sun.jdi.Type, arg1: com.sun.jdi.Type): boolean
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                inheritedTypes(): java.util.List<com.sun.jdi.ReferenceType>
                getModifiers(): void
                toString<T>(...args: any[]): any
                public isPrepared(): boolean
                public isVerified(): boolean
                public isInitialized(): boolean
                public failedToInitialize(): boolean
                public isAbstract(): boolean
                public isFinal(): boolean
                public isStatic(): boolean
            }
            class InterfaceTypeImpl extends com.sun.tools.jdi.InvokableTypeImpl implements com.sun.jdi.InterfaceType {
                protected constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public superinterfaces(): java.util.List<com.sun.jdi.InterfaceType>
                public subinterfaces(): java.util.List<com.sun.jdi.InterfaceType>
                public implementors(): java.util.List<com.sun.jdi.ClassType>
                public isInitialized(): boolean
                toString<T>(...args: any[]): any
                waitForReply(arg0: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.InvokableTypeImpl$InvocationResult
                getInvokeMethodSender(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: com.sun.tools.jdi.MethodImpl, arg2: com.sun.tools.jdi.ValueImpl[], arg3: int): com.sun.tools.jdi.CommandSender
                superclass(): com.sun.jdi.ClassType
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                interfaces(): java.util.List<com.sun.jdi.InterfaceType>
                canInvoke(arg0: com.sun.jdi.Method): boolean
            }
            class InterfaceTypeImpl$IResult implements com.sun.tools.jdi.InvokableTypeImpl$InvocationResult {
                public constructor(arg0: com.sun.tools.jdi.JDWP$InterfaceType$InvokeMethod)
                public getException(): com.sun.tools.jdi.ObjectReferenceImpl
                public getResult(): com.sun.tools.jdi.ValueImpl
            }
            abstract class InvokableTypeImpl extends com.sun.tools.jdi.ReferenceTypeImpl {
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.Value
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                addVisibleMethods(arg0: java.util.Map<java.lang.String, com.sun.jdi.Method>, arg1: java.util.Set<com.sun.jdi.InterfaceType>): void
                addInterfaces(arg0: java.util.List<com.sun.jdi.InterfaceType>): void
                getAllInterfaces(): java.util.List<com.sun.jdi.InterfaceType>
                public allMethods(): java.util.List<com.sun.jdi.Method>
                inheritedTypes(): java.util.List<com.sun.jdi.ReferenceType>
                getInvokeMethodSender(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: com.sun.tools.jdi.MethodImpl, arg2: com.sun.tools.jdi.ValueImpl[], arg3: int): com.sun.tools.jdi.CommandSender
                waitForReply(arg0: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.InvokableTypeImpl$InvocationResult
                superclass(): com.sun.jdi.ClassType
                interfaces(): java.util.List<com.sun.jdi.InterfaceType>
                canInvoke(arg0: com.sun.jdi.Method): boolean
            }
            interface InvokableTypeImpl$InvocationResult {
                public getException(): com.sun.tools.jdi.ObjectReferenceImpl
                public getResult(): com.sun.tools.jdi.ValueImpl
            }
            class ClassTypeImpl extends com.sun.tools.jdi.InvokableTypeImpl implements com.sun.jdi.ClassType {
                protected constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                public superclass(): com.sun.jdi.ClassType
                public interfaces(): java.util.List<com.sun.jdi.InterfaceType>
                public allInterfaces(): java.util.List<com.sun.jdi.InterfaceType>
                public subclasses(): java.util.List<com.sun.jdi.ClassType>
                public isEnum(): boolean
                public setValue(arg0: com.sun.jdi.Field, arg1: com.sun.jdi.Value): void
                sendNewInstanceCommand(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: com.sun.tools.jdi.MethodImpl, arg2: com.sun.tools.jdi.ValueImpl[], arg3: int): com.sun.tools.jdi.PacketStream
                public newInstance(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.ObjectReference
                public concreteMethodByName(arg0: java.lang.String, arg1: java.lang.String): com.sun.jdi.Method
                validateConstructorInvocation(arg0: com.sun.jdi.Method): void
                toString<T>(...args: any[]): any
                getInvokeMethodSender(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: com.sun.tools.jdi.MethodImpl, arg2: com.sun.tools.jdi.ValueImpl[], arg3: int): com.sun.tools.jdi.CommandSender
                waitForReply(arg0: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.InvokableTypeImpl$InvocationResult
                canInvoke(arg0: com.sun.jdi.Method): boolean
            }
            class ClassTypeImpl$1 implements com.sun.tools.jdi.CommandSender {
                val$thread: com.sun.tools.jdi.ThreadReferenceImpl
                val$method: com.sun.tools.jdi.MethodImpl
                val$args: com.sun.tools.jdi.ValueImpl[]
                val$options: int
                this$0: com.sun.tools.jdi.ClassTypeImpl
                constructor(arg0: com.sun.tools.jdi.ClassTypeImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: com.sun.tools.jdi.MethodImpl, arg3: com.sun.tools.jdi.ValueImpl[], arg4: int)
                public send(): com.sun.tools.jdi.PacketStream
            }
            class ClassTypeImpl$IResult implements com.sun.tools.jdi.InvokableTypeImpl$InvocationResult {
                public constructor(arg0: com.sun.tools.jdi.JDWP$ClassType$InvokeMethod)
                public getException(): com.sun.tools.jdi.ObjectReferenceImpl
                public getResult(): com.sun.tools.jdi.ValueImpl
            }
            abstract class TypeImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.Type {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public signature(): java.lang.String
                public name(): java.lang.String
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            abstract class ReferenceTypeImpl extends com.sun.tools.jdi.TypeImpl implements com.sun.jdi.ReferenceType {
                ref<T>(...args: any[]): any
                modifiers<T>(...args: any[]): any
                static NO_SDE_INFO_MARK: com.sun.tools.jdi.SDE
                protected constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                noticeRedefineClass(): void
                getMethodMirror(arg0: long): com.sun.jdi.Method
                getFieldMirror(arg0: long): com.sun.jdi.Field
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
                public signature(): java.lang.String
                public genericSignature(): java.lang.String
                public classLoader(): com.sun.jdi.ClassLoaderReference
                public isPublic(): boolean
                public isProtected(): boolean
                public isPrivate(): boolean
                public isPackagePrivate(): boolean
                public isAbstract(): boolean
                public isFinal(): boolean
                public isStatic(): boolean
                public isPrepared(): boolean
                public isVerified(): boolean
                public isInitialized(): boolean
                public failedToInitialize(): boolean
                public fields(): java.util.List<com.sun.jdi.Field>
                inheritedTypes(): java.util.List<com.sun.jdi.ReferenceType>
                addVisibleFields(arg0: java.util.List<com.sun.jdi.Field>, arg1: java.util.Map<java.lang.String, com.sun.jdi.Field>, arg2: java.util.List<java.lang.String>): void
                public visibleFields(): java.util.List<com.sun.jdi.Field>
                addAllFields(arg0: java.util.List<com.sun.jdi.Field>, arg1: java.util.Set<com.sun.jdi.ReferenceType>): void
                public allFields(): java.util.List<com.sun.jdi.Field>
                public fieldByName(arg0: java.lang.String): com.sun.jdi.Field
                public methods(): java.util.List<com.sun.jdi.Method>
                addToMethodMap(arg0: java.util.Map<java.lang.String, com.sun.jdi.Method>, arg1: java.util.List<com.sun.jdi.Method>): void
                addVisibleMethods(arg0: java.util.Map<java.lang.String, com.sun.jdi.Method>, arg1: java.util.Set<com.sun.jdi.InterfaceType>): void
                public visibleMethods(): java.util.List<com.sun.jdi.Method>
                public allMethods(): java.util.List<com.sun.jdi.Method>
                methodsByName<T>(...args: any[]): any
                getInterfaces(): java.util.List<com.sun.jdi.InterfaceType>
                public nestedTypes(): java.util.List<com.sun.jdi.ReferenceType>
                public getValue(arg0: com.sun.jdi.Field): com.sun.jdi.Value
                validateFieldAccess(arg0: com.sun.jdi.Field): void
                validateFieldSet(arg0: com.sun.jdi.Field): void
                public getValues(arg0: java.util.List<com.sun.jdi.Field>): java.util.Map<com.sun.jdi.Field, com.sun.jdi.Value>
                public classObject(): com.sun.jdi.ClassObjectReference
                stratum(arg0: java.lang.String): com.sun.tools.jdi.SDE$Stratum
                public sourceName(): java.lang.String
                public sourceNames(arg0: java.lang.String): java.util.List<java.lang.String>
                public sourcePaths(arg0: java.lang.String): java.util.List<java.lang.String>
                baseSourceName(): java.lang.String
                baseSourcePath(): java.lang.String
                baseSourceDir(): java.lang.String
                public sourceDebugExtension(): java.lang.String
                public availableStrata(): java.util.List<java.lang.String>
                public defaultStratum(): java.lang.String
                allLineLocations<T>(...args: any[]): any
                locationsOfLine<T>(...args: any[]): any
                public instances(arg0: long): java.util.List<com.sun.jdi.ObjectReference>
                public majorVersion(): int
                public minorVersion(): int
                public constantPoolCount(): int
                public constantPool(): byte[]
                getModifiers(): void
                decodeStatus(arg0: int): void
                updateStatus(): void
                markPrepared(): void
                indexOf<T>(...args: any[]): any
                isAssignableTo(arg0: com.sun.jdi.ReferenceType): boolean
                isAssignableFrom<T>(...args: any[]): any
                setStatus(arg0: int): void
                setSignature(arg0: java.lang.String): void
                setGenericSignature(arg0: java.lang.String): void
                findType(arg0: java.lang.String): com.sun.jdi.Type
                loaderString(): java.lang.String
            }
            class PacketStream {
                vm: com.sun.tools.jdi.VirtualMachineImpl
                pkt: com.sun.tools.jdi.Packet
                constructor(...args: any[])
                id(): int
                send(): void
                waitForReply(): void
                writeBoolean(arg0: boolean): void
                writeByte(arg0: byte): void
                writeChar(arg0: char): void
                writeShort(arg0: short): void
                writeInt(arg0: int): void
                writeLong(arg0: long): void
                writeFloat(arg0: float): void
                writeDouble(arg0: double): void
                writeID(arg0: int, arg1: long): void
                writeNullObjectRef(): void
                writeObjectRef(arg0: long): void
                writeClassRef(arg0: long): void
                writeMethodRef(arg0: long): void
                writeFieldRef(arg0: long): void
                writeFrameRef(arg0: long): void
                writeByteArray(arg0: byte[]): void
                writeString(arg0: java.lang.String): void
                writeLocation(arg0: com.sun.jdi.Location): void
                writeValue(arg0: com.sun.jdi.Value): void
                writeValueChecked(arg0: com.sun.jdi.Value): void
                writeUntaggedValue(arg0: com.sun.jdi.Value): void
                writeUntaggedValueChecked(arg0: com.sun.jdi.Value): void
                readByte(): byte
                readBoolean(): boolean
                readChar(): char
                readShort(): short
                readInt(): int
                readLong(): long
                readFloat(): float
                readDouble(): double
                readString(): java.lang.String
                readObjectRef(): long
                readClassRef(): long
                readTaggedObjectReference(): com.sun.tools.jdi.ObjectReferenceImpl
                readObjectReference(): com.sun.tools.jdi.ObjectReferenceImpl
                readStringReference(): com.sun.tools.jdi.StringReferenceImpl
                readArrayReference(): com.sun.tools.jdi.ArrayReferenceImpl
                readThreadReference(): com.sun.tools.jdi.ThreadReferenceImpl
                readThreadGroupReference(): com.sun.tools.jdi.ThreadGroupReferenceImpl
                readClassLoaderReference(): com.sun.tools.jdi.ClassLoaderReferenceImpl
                readClassObjectReference(): com.sun.tools.jdi.ClassObjectReferenceImpl
                readReferenceType(): com.sun.tools.jdi.ReferenceTypeImpl
                readMethodRef(): long
                readFieldRef(): long
                readField(): com.sun.jdi.Field
                readFrameRef(): long
                readValue(): com.sun.tools.jdi.ValueImpl
                readUntaggedValue(arg0: byte): com.sun.tools.jdi.ValueImpl
                readLocation(): com.sun.jdi.Location
                readByteArray(arg0: int): byte[]
                readArrayRegion(): java.util.List<com.sun.jdi.Value>
                writeArrayRegion(arg0: java.util.List<com.sun.jdi.Value>): void
                skipBytes(arg0: int): int
                command(): byte
                static isObjectTag(arg0: byte): boolean
            }
            interface CommandSender {
                public send(): com.sun.tools.jdi.PacketStream
            }
            class ThreadAction extends java.util.EventObject {
                static THREAD_RESUMABLE: int
                id<T>(...args: any[]): any
                constructor(arg0: com.sun.jdi.ThreadReference, arg1: int)
                thread(): com.sun.jdi.ThreadReference
            }
            class VMState {
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl)
                isSuspended(): boolean
                notifyCommandComplete(arg0: int): void
                freeze(): void
                thawCommand(arg0: com.sun.tools.jdi.CommandSender): com.sun.tools.jdi.PacketStream
                thaw<T>(...args: any[]): any
                addListener(arg0: com.sun.tools.jdi.VMListener): void
                hasListener(arg0: com.sun.tools.jdi.VMListener): boolean
                removeListener(arg0: com.sun.tools.jdi.VMListener): void
                allThreads(): java.util.List<com.sun.jdi.ThreadReference>
                topLevelThreadGroups(): java.util.List<com.sun.jdi.ThreadGroupReference>
            }
            class VMState$1 {
            }
            class VMState$Cache {
                groups: java.util.List<com.sun.jdi.ThreadGroupReference>
                threads: java.util.List<com.sun.jdi.ThreadReference>
                constructor(arg0: com.sun.tools.jdi.VMState$1)
            }
            class JDWP {
                constructor()
            }
            class JDWP$1 {
            }
            class JDWP$InvokeOptions {
                static INVOKE_SINGLE_THREADED: int
                static INVOKE_NONVIRTUAL: int
                constructor()
            }
            class JDWP$SuspendPolicy {
                static NONE: int
                static EVENT_THREAD: int
                static ALL: int
                constructor()
            }
            class JDWP$StepSize {
                static MIN: int
                static LINE: int
                constructor()
            }
            class JDWP$StepDepth {
                static INTO: int
                static OVER: int
                static OUT: int
                constructor()
            }
            class JDWP$Tag {
                static ARRAY: int
                static BYTE: int
                static CHAR: int
                static OBJECT: int
                static FLOAT: int
                static DOUBLE: int
                static INT: int
                static LONG: int
                static SHORT: int
                static VOID: int
                static BOOLEAN: int
                static STRING: int
                static THREAD: int
                static THREAD_GROUP: int
                static CLASS_LOADER: int
                static CLASS_OBJECT: int
                constructor()
            }
            class JDWP$TypeTag {
                static CLASS: int
                static INTERFACE: int
                static ARRAY: int
                constructor()
            }
            class JDWP$ClassStatus {
                static VERIFIED: int
                static PREPARED: int
                static INITIALIZED: int
                static ERROR: int
                constructor()
            }
            class JDWP$SuspendStatus {
                static SUSPEND_STATUS_SUSPENDED: int
                constructor()
            }
            class JDWP$ThreadStatus {
                static ZOMBIE: int
                static RUNNING: int
                static SLEEPING: int
                static MONITOR: int
                static WAIT: int
                constructor()
            }
            class JDWP$EventKind {
                static SINGLE_STEP: int
                static BREAKPOINT: int
                static FRAME_POP: int
                static EXCEPTION: int
                static USER_DEFINED: int
                static THREAD_START: int
                static THREAD_DEATH: int
                static THREAD_END: int
                static CLASS_PREPARE: int
                static CLASS_UNLOAD: int
                static CLASS_LOAD: int
                static FIELD_ACCESS: int
                static FIELD_MODIFICATION: int
                static EXCEPTION_CATCH: int
                static METHOD_ENTRY: int
                static METHOD_EXIT: int
                static METHOD_EXIT_WITH_RETURN_VALUE: int
                static MONITOR_CONTENDED_ENTER: int
                static MONITOR_CONTENDED_ENTERED: int
                static MONITOR_WAIT: int
                static MONITOR_WAITED: int
                static VM_START: int
                static VM_INIT: int
                static VM_DEATH: int
                static VM_DISCONNECTED: int
                constructor()
            }
            class JDWP$Error {
                static NONE: int
                static INVALID_THREAD: int
                static INVALID_THREAD_GROUP: int
                static INVALID_PRIORITY: int
                static THREAD_NOT_SUSPENDED: int
                static THREAD_SUSPENDED: int
                static THREAD_NOT_ALIVE: int
                static INVALID_OBJECT: int
                static INVALID_CLASS: int
                static CLASS_NOT_PREPARED: int
                static INVALID_METHODID: int
                static INVALID_LOCATION: int
                static INVALID_FIELDID: int
                static INVALID_FRAMEID: int
                static NO_MORE_FRAMES: int
                static OPAQUE_FRAME: int
                static NOT_CURRENT_FRAME: int
                static TYPE_MISMATCH: int
                static INVALID_SLOT: int
                static DUPLICATE: int
                static NOT_FOUND: int
                static INVALID_MONITOR: int
                static NOT_MONITOR_OWNER: int
                static INTERRUPT: int
                static INVALID_CLASS_FORMAT: int
                static CIRCULAR_CLASS_DEFINITION: int
                static FAILS_VERIFICATION: int
                static ADD_METHOD_NOT_IMPLEMENTED: int
                static SCHEMA_CHANGE_NOT_IMPLEMENTED: int
                static INVALID_TYPESTATE: int
                static HIERARCHY_CHANGE_NOT_IMPLEMENTED: int
                static DELETE_METHOD_NOT_IMPLEMENTED: int
                static UNSUPPORTED_VERSION: int
                static NAMES_DONT_MATCH: int
                static CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED: int
                static METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED: int
                static NOT_IMPLEMENTED: int
                static NULL_POINTER: int
                static ABSENT_INFORMATION: int
                static INVALID_EVENT_TYPE: int
                static ILLEGAL_ARGUMENT: int
                static OUT_OF_MEMORY: int
                static ACCESS_DENIED: int
                static VM_DEAD: int
                static INTERNAL: int
                static UNATTACHED_THREAD: int
                static INVALID_TAG: int
                static ALREADY_INVOKING: int
                static INVALID_INDEX: int
                static INVALID_LENGTH: int
                static INVALID_STRING: int
                static INVALID_CLASS_LOADER: int
                static INVALID_ARRAY: int
                static TRANSPORT_LOAD: int
                static TRANSPORT_INIT: int
                static NATIVE_METHOD: int
                static INVALID_COUNT: int
                constructor()
            }
            class JDWP$Event {
                static COMMAND_SET: int
            }
            class JDWP$Event$Composite {
                static COMMAND: int
                suspendPolicy: byte
                events: com.sun.tools.jdi.JDWP$Event$Composite$Events[]
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events {
                eventKind: byte
                aEventsCommon: com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$VMDeath extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$FieldModification extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                refTypeTag: byte
                typeID: long
                fieldID: long
                object: com.sun.tools.jdi.ObjectReferenceImpl
                valueToBe: com.sun.tools.jdi.ValueImpl
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$FieldAccess extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                refTypeTag: byte
                typeID: long
                fieldID: long
                object: com.sun.tools.jdi.ObjectReferenceImpl
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$ClassUnload extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                signature: java.lang.String
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$ClassPrepare extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                refTypeTag: byte
                typeID: long
                signature: java.lang.String
                status: int
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$ThreadDeath extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$ThreadStart extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$Exception extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                exception: com.sun.tools.jdi.ObjectReferenceImpl
                catchLocation: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MonitorWaited extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                object: com.sun.tools.jdi.ObjectReferenceImpl
                location: com.sun.jdi.Location
                timed_out: boolean
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MonitorWait extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                object: com.sun.tools.jdi.ObjectReferenceImpl
                location: com.sun.jdi.Location
                timeout: long
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MonitorContendedEntered extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                object: com.sun.tools.jdi.ObjectReferenceImpl
                location: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MonitorContendedEnter extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                object: com.sun.tools.jdi.ObjectReferenceImpl
                location: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MethodExitWithReturnValue extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                value: com.sun.tools.jdi.ValueImpl
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MethodExit extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$MethodEntry extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$Breakpoint extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$SingleStep extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                location: com.sun.jdi.Location
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            class JDWP$Event$Composite$Events$VMStart extends com.sun.tools.jdi.JDWP$Event$Composite$Events$EventsCommon {
                static ALT_ID: byte
                requestID: int
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                eventKind(): byte
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream)
            }
            abstract class JDWP$Event$Composite$Events$EventsCommon {
                constructor()
                eventKind(): byte
            }
            class JDWP$ClassObjectReference {
                static COMMAND_SET: int
            }
            class JDWP$ClassObjectReference$ReflectedType {
                static COMMAND: int
                refTypeTag: byte
                typeID: long
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassObjectReferenceImpl): com.sun.tools.jdi.JDWP$ClassObjectReference$ReflectedType
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ClassObjectReference$ReflectedType
            }
            class JDWP$StackFrame {
                static COMMAND_SET: int
            }
            class JDWP$StackFrame$PopFrames {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long): com.sun.tools.jdi.JDWP$StackFrame$PopFrames
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$StackFrame$PopFrames
            }
            class JDWP$StackFrame$ThisObject {
                static COMMAND: int
                objectThis: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long): com.sun.tools.jdi.JDWP$StackFrame$ThisObject
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$StackFrame$ThisObject
            }
            class JDWP$StackFrame$SetValues {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long, arg3: com.sun.tools.jdi.JDWP$StackFrame$SetValues$SlotInfo[]): com.sun.tools.jdi.JDWP$StackFrame$SetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long, arg3: com.sun.tools.jdi.JDWP$StackFrame$SetValues$SlotInfo[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$StackFrame$SetValues
            }
            class JDWP$StackFrame$SetValues$SlotInfo {
                slot: int
                slotValue: com.sun.tools.jdi.ValueImpl
                constructor(arg0: int, arg1: com.sun.tools.jdi.ValueImpl)
                static access$2200(arg0: com.sun.tools.jdi.JDWP$StackFrame$SetValues$SlotInfo, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$StackFrame$GetValues {
                static COMMAND: int
                values: com.sun.tools.jdi.ValueImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long, arg3: com.sun.tools.jdi.JDWP$StackFrame$GetValues$SlotInfo[]): com.sun.tools.jdi.JDWP$StackFrame$GetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: long, arg3: com.sun.tools.jdi.JDWP$StackFrame$GetValues$SlotInfo[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$StackFrame$GetValues
            }
            class JDWP$StackFrame$GetValues$SlotInfo {
                slot: int
                sigbyte: byte
                constructor(arg0: int, arg1: byte)
                static access$2100(arg0: com.sun.tools.jdi.JDWP$StackFrame$GetValues$SlotInfo, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest {
                static COMMAND_SET: int
            }
            class JDWP$EventRequest$ClearAllBreakpoints {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$EventRequest$ClearAllBreakpoints
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$EventRequest$ClearAllBreakpoints
            }
            class JDWP$EventRequest$Clear {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: byte, arg2: int): com.sun.tools.jdi.JDWP$EventRequest$Clear
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: byte, arg2: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$EventRequest$Clear
            }
            class JDWP$EventRequest$Set {
                static COMMAND: int
                requestID: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: byte, arg2: byte, arg3: com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier[]): com.sun.tools.jdi.JDWP$EventRequest$Set
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: byte, arg2: byte, arg3: com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$EventRequest$Set
            }
            class JDWP$EventRequest$Set$Modifier {
                modKind: byte
                aModifierCommon: com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon
                constructor(arg0: byte, arg1: com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon)
                static access$2000(arg0: com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$SourceNameMatch extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                sourceNamePattern: java.lang.String
                static create(arg0: java.lang.String): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: java.lang.String)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$InstanceOnly extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                instance: com.sun.tools.jdi.ObjectReferenceImpl
                static create(arg0: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.tools.jdi.ObjectReferenceImpl)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$Step extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                size: int
                depth: int
                static create(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: int, arg2: int): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: int, arg2: int)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$FieldOnly extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                declaring: com.sun.tools.jdi.ReferenceTypeImpl
                fieldID: long
                static create(arg0: com.sun.tools.jdi.ReferenceTypeImpl, arg1: long): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.tools.jdi.ReferenceTypeImpl, arg1: long)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$ExceptionOnly extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                exceptionOrNull: com.sun.tools.jdi.ReferenceTypeImpl
                caught: boolean
                uncaught: boolean
                static create(arg0: com.sun.tools.jdi.ReferenceTypeImpl, arg1: boolean, arg2: boolean): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.tools.jdi.ReferenceTypeImpl, arg1: boolean, arg2: boolean)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$LocationOnly extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                loc: com.sun.jdi.Location
                static create(arg0: com.sun.jdi.Location): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.jdi.Location)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$ClassExclude extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                classPattern: java.lang.String
                static create(arg0: java.lang.String): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: java.lang.String)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$ClassMatch extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                classPattern: java.lang.String
                static create(arg0: java.lang.String): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: java.lang.String)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$ClassOnly extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                clazz: com.sun.tools.jdi.ReferenceTypeImpl
                static create(arg0: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.tools.jdi.ReferenceTypeImpl)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$ThreadOnly extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                thread: com.sun.tools.jdi.ThreadReferenceImpl
                static create(arg0: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: com.sun.tools.jdi.ThreadReferenceImpl)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$Conditional extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                exprID: int
                static create(arg0: int): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: int)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$EventRequest$Set$Modifier$Count extends com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier$ModifierCommon {
                static ALT_ID: byte
                count: int
                static create(arg0: int): com.sun.tools.jdi.JDWP$EventRequest$Set$Modifier
                constructor(arg0: int)
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            abstract class JDWP$EventRequest$Set$Modifier$ModifierCommon {
                constructor()
                write(arg0: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$ClassLoaderReference {
                static COMMAND_SET: int
            }
            class JDWP$ClassLoaderReference$VisibleClasses {
                static COMMAND: int
                classes: com.sun.tools.jdi.JDWP$ClassLoaderReference$VisibleClasses$ClassInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassLoaderReferenceImpl): com.sun.tools.jdi.JDWP$ClassLoaderReference$VisibleClasses
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassLoaderReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ClassLoaderReference$VisibleClasses
            }
            class JDWP$ClassLoaderReference$VisibleClasses$ClassInfo {
                refTypeTag: byte
                typeID: long
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ArrayReference {
                static COMMAND_SET: int
            }
            class JDWP$ArrayReference$SetValues {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayReferenceImpl, arg2: int, arg3: com.sun.tools.jdi.ValueImpl[]): com.sun.tools.jdi.JDWP$ArrayReference$SetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayReferenceImpl, arg2: int, arg3: com.sun.tools.jdi.ValueImpl[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ArrayReference$SetValues
            }
            class JDWP$ArrayReference$GetValues {
                static COMMAND: int
                values: java.util.List<any>
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayReferenceImpl, arg2: int, arg3: int): com.sun.tools.jdi.JDWP$ArrayReference$GetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayReferenceImpl, arg2: int, arg3: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ArrayReference$GetValues
            }
            class JDWP$ArrayReference$Length {
                static COMMAND: int
                arrayLength: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayReferenceImpl): com.sun.tools.jdi.JDWP$ArrayReference$Length
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ArrayReference$Length
            }
            class JDWP$ThreadGroupReference {
                static COMMAND_SET: int
            }
            class JDWP$ThreadGroupReference$Children {
                static COMMAND: int
                childThreads: com.sun.tools.jdi.ThreadReferenceImpl[]
                childGroups: com.sun.tools.jdi.ThreadGroupReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadGroupReferenceImpl): com.sun.tools.jdi.JDWP$ThreadGroupReference$Children
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadGroupReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadGroupReference$Children
            }
            class JDWP$ThreadGroupReference$Parent {
                static COMMAND: int
                parentGroup: com.sun.tools.jdi.ThreadGroupReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadGroupReferenceImpl): com.sun.tools.jdi.JDWP$ThreadGroupReference$Parent
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadGroupReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadGroupReference$Parent
            }
            class JDWP$ThreadGroupReference$Name {
                static COMMAND: int
                groupName: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadGroupReferenceImpl): com.sun.tools.jdi.JDWP$ThreadGroupReference$Name
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadGroupReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadGroupReference$Name
            }
            class JDWP$ThreadReference {
                static COMMAND_SET: int
            }
            class JDWP$ThreadReference$ForceEarlyReturn {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: com.sun.tools.jdi.ValueImpl): com.sun.tools.jdi.JDWP$ThreadReference$ForceEarlyReturn
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: com.sun.tools.jdi.ValueImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$ForceEarlyReturn
            }
            class JDWP$ThreadReference$OwnedMonitorsStackDepthInfo {
                static COMMAND: int
                owned: com.sun.tools.jdi.JDWP$ThreadReference$OwnedMonitorsStackDepthInfo$monitor[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$OwnedMonitorsStackDepthInfo
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$OwnedMonitorsStackDepthInfo
            }
            class JDWP$ThreadReference$OwnedMonitorsStackDepthInfo$monitor {
                monitor: com.sun.tools.jdi.ObjectReferenceImpl
                stack_depth: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ThreadReference$SuspendCount {
                static COMMAND: int
                suspendCount: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$SuspendCount
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$SuspendCount
            }
            class JDWP$ThreadReference$Interrupt {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$Interrupt
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Interrupt
            }
            class JDWP$ThreadReference$Stop {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$Stop
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Stop
            }
            class JDWP$ThreadReference$CurrentContendedMonitor {
                static COMMAND: int
                monitor: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$CurrentContendedMonitor
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$CurrentContendedMonitor
            }
            class JDWP$ThreadReference$OwnedMonitors {
                static COMMAND: int
                owned: com.sun.tools.jdi.ObjectReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$OwnedMonitors
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$OwnedMonitors
            }
            class JDWP$ThreadReference$FrameCount {
                static COMMAND: int
                frameCount: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$FrameCount
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$FrameCount
            }
            class JDWP$ThreadReference$Frames {
                static COMMAND: int
                frames: com.sun.tools.jdi.JDWP$ThreadReference$Frames$Frame[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: int, arg3: int): com.sun.tools.jdi.JDWP$ThreadReference$Frames
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: int, arg3: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Frames
            }
            class JDWP$ThreadReference$Frames$Frame {
                frameID: long
                location: com.sun.jdi.Location
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ThreadReference$ThreadGroup {
                static COMMAND: int
                group: com.sun.tools.jdi.ThreadGroupReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$ThreadGroup
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$ThreadGroup
            }
            class JDWP$ThreadReference$Status {
                static COMMAND: int
                threadStatus: int
                suspendStatus: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$Status
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Status
            }
            class JDWP$ThreadReference$Resume {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$Resume
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Resume
            }
            class JDWP$ThreadReference$Suspend {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$Suspend
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Suspend
            }
            class JDWP$ThreadReference$Name {
                static COMMAND: int
                threadName: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.JDWP$ThreadReference$Name
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ThreadReference$Name
            }
            class JDWP$StringReference {
                static COMMAND_SET: int
            }
            class JDWP$StringReference$Value {
                static COMMAND: int
                stringValue: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$StringReference$Value
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$StringReference$Value
            }
            class JDWP$ObjectReference {
                static COMMAND_SET: int
            }
            class JDWP$ObjectReference$ReferringObjects {
                static COMMAND: int
                referringObjects: com.sun.tools.jdi.ObjectReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: int): com.sun.tools.jdi.JDWP$ObjectReference$ReferringObjects
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$ReferringObjects
            }
            class JDWP$ObjectReference$IsCollected {
                static COMMAND: int
                isCollected: boolean
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$ObjectReference$IsCollected
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$IsCollected
            }
            class JDWP$ObjectReference$EnableCollection {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$ObjectReference$EnableCollection
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$EnableCollection
            }
            class JDWP$ObjectReference$DisableCollection {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$ObjectReference$DisableCollection
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$DisableCollection
            }
            class JDWP$ObjectReference$InvokeMethod {
                static COMMAND: int
                returnValue: com.sun.tools.jdi.ValueImpl
                exception: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: com.sun.tools.jdi.ClassTypeImpl, arg4: long, arg5: com.sun.tools.jdi.ValueImpl[], arg6: int): com.sun.tools.jdi.JDWP$ObjectReference$InvokeMethod
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: com.sun.tools.jdi.ClassTypeImpl, arg4: long, arg5: com.sun.tools.jdi.ValueImpl[], arg6: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$InvokeMethod
            }
            class JDWP$ObjectReference$MonitorInfo {
                static COMMAND: int
                owner: com.sun.tools.jdi.ThreadReferenceImpl
                entryCount: int
                waiters: com.sun.tools.jdi.ThreadReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$ObjectReference$MonitorInfo
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$MonitorInfo
            }
            class JDWP$ObjectReference$SetValues {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: com.sun.tools.jdi.JDWP$ObjectReference$SetValues$FieldValue[]): com.sun.tools.jdi.JDWP$ObjectReference$SetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: com.sun.tools.jdi.JDWP$ObjectReference$SetValues$FieldValue[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$SetValues
            }
            class JDWP$ObjectReference$SetValues$FieldValue {
                fieldID: long
                value: com.sun.tools.jdi.ValueImpl
                constructor(arg0: long, arg1: com.sun.tools.jdi.ValueImpl)
                static access$1600(arg0: com.sun.tools.jdi.JDWP$ObjectReference$SetValues$FieldValue, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$ObjectReference$GetValues {
                static COMMAND: int
                values: com.sun.tools.jdi.ValueImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: com.sun.tools.jdi.JDWP$ObjectReference$GetValues$Field[]): com.sun.tools.jdi.JDWP$ObjectReference$GetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: com.sun.tools.jdi.JDWP$ObjectReference$GetValues$Field[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$GetValues
            }
            class JDWP$ObjectReference$GetValues$Field {
                fieldID: long
                constructor(arg0: long)
                static access$1500(arg0: com.sun.tools.jdi.JDWP$ObjectReference$GetValues$Field, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$ObjectReference$ReferenceType {
                static COMMAND: int
                refTypeTag: byte
                typeID: long
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.JDWP$ObjectReference$ReferenceType
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ObjectReferenceImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ObjectReference$ReferenceType
            }
            class JDWP$Field {
                static COMMAND_SET: int
            }
            class JDWP$Method {
                static COMMAND_SET: int
            }
            class JDWP$Method$VariableTableWithGeneric {
                static COMMAND: int
                argCnt: int
                slots: com.sun.tools.jdi.JDWP$Method$VariableTableWithGeneric$SlotInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.JDWP$Method$VariableTableWithGeneric
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$Method$VariableTableWithGeneric
            }
            class JDWP$Method$VariableTableWithGeneric$SlotInfo {
                codeIndex: long
                name: java.lang.String
                signature: java.lang.String
                genericSignature: java.lang.String
                length: int
                slot: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$Method$IsObsolete {
                static COMMAND: int
                isObsolete: boolean
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.JDWP$Method$IsObsolete
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$Method$IsObsolete
            }
            class JDWP$Method$Bytecodes {
                static COMMAND: int
                bytes: byte[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.JDWP$Method$Bytecodes
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$Method$Bytecodes
            }
            class JDWP$Method$VariableTable {
                static COMMAND: int
                argCnt: int
                slots: com.sun.tools.jdi.JDWP$Method$VariableTable$SlotInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.JDWP$Method$VariableTable
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$Method$VariableTable
            }
            class JDWP$Method$VariableTable$SlotInfo {
                codeIndex: long
                name: java.lang.String
                signature: java.lang.String
                length: int
                slot: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$Method$LineTable {
                static COMMAND: int
                start: long
                end: long
                lines: com.sun.tools.jdi.JDWP$Method$LineTable$LineInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.JDWP$Method$LineTable
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: long): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$Method$LineTable
            }
            class JDWP$Method$LineTable$LineInfo {
                lineCodeIndex: long
                lineNumber: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$InterfaceType {
                static COMMAND_SET: int
            }
            class JDWP$InterfaceType$InvokeMethod {
                static COMMAND: int
                returnValue: com.sun.tools.jdi.ValueImpl
                exception: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.InterfaceTypeImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: long, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int): com.sun.tools.jdi.JDWP$InterfaceType$InvokeMethod
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.InterfaceTypeImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: long, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$InterfaceType$InvokeMethod
            }
            class JDWP$ArrayType {
                static COMMAND_SET: int
            }
            class JDWP$ArrayType$NewInstance {
                static COMMAND: int
                newArray: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayTypeImpl, arg2: int): com.sun.tools.jdi.JDWP$ArrayType$NewInstance
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ArrayTypeImpl, arg2: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ArrayType$NewInstance
            }
            class JDWP$ClassType {
                static COMMAND_SET: int
            }
            class JDWP$ClassType$NewInstance {
                static COMMAND: int
                newObject: com.sun.tools.jdi.ObjectReferenceImpl
                exception: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: long, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int): com.sun.tools.jdi.JDWP$ClassType$NewInstance
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: long, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ClassType$NewInstance
            }
            class JDWP$ClassType$InvokeMethod {
                static COMMAND: int
                returnValue: com.sun.tools.jdi.ValueImpl
                exception: com.sun.tools.jdi.ObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: long, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int): com.sun.tools.jdi.JDWP$ClassType$InvokeMethod
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.ThreadReferenceImpl, arg3: long, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ClassType$InvokeMethod
            }
            class JDWP$ClassType$SetValues {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.JDWP$ClassType$SetValues$FieldValue[]): com.sun.tools.jdi.JDWP$ClassType$SetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.JDWP$ClassType$SetValues$FieldValue[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ClassType$SetValues
            }
            class JDWP$ClassType$SetValues$FieldValue {
                fieldID: long
                value: com.sun.tools.jdi.ValueImpl
                constructor(arg0: long, arg1: com.sun.tools.jdi.ValueImpl)
                static access$1100(arg0: com.sun.tools.jdi.JDWP$ClassType$SetValues$FieldValue, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$ClassType$Superclass {
                static COMMAND: int
                superclass: com.sun.tools.jdi.ClassTypeImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl): com.sun.tools.jdi.JDWP$ClassType$Superclass
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ClassTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ClassType$Superclass
            }
            class JDWP$ReferenceType {
                static COMMAND_SET: int
            }
            class JDWP$ReferenceType$ConstantPool {
                static COMMAND: int
                count: int
                bytes: byte[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$ConstantPool
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$ConstantPool
            }
            class JDWP$ReferenceType$ClassFileVersion {
                static COMMAND: int
                majorVersion: int
                minorVersion: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$ClassFileVersion
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$ClassFileVersion
            }
            class JDWP$ReferenceType$Instances {
                static COMMAND: int
                instances: com.sun.tools.jdi.ObjectReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: int): com.sun.tools.jdi.JDWP$ReferenceType$Instances
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Instances
            }
            class JDWP$ReferenceType$MethodsWithGeneric {
                static COMMAND: int
                declared: com.sun.tools.jdi.JDWP$ReferenceType$MethodsWithGeneric$MethodInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$MethodsWithGeneric
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$MethodsWithGeneric
            }
            class JDWP$ReferenceType$MethodsWithGeneric$MethodInfo {
                methodID: long
                name: java.lang.String
                signature: java.lang.String
                genericSignature: java.lang.String
                modBits: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ReferenceType$FieldsWithGeneric {
                static COMMAND: int
                declared: com.sun.tools.jdi.JDWP$ReferenceType$FieldsWithGeneric$FieldInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$FieldsWithGeneric
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$FieldsWithGeneric
            }
            class JDWP$ReferenceType$FieldsWithGeneric$FieldInfo {
                fieldID: long
                name: java.lang.String
                signature: java.lang.String
                genericSignature: java.lang.String
                modBits: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ReferenceType$SignatureWithGeneric {
                static COMMAND: int
                signature: java.lang.String
                genericSignature: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$SignatureWithGeneric
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$SignatureWithGeneric
            }
            class JDWP$ReferenceType$SourceDebugExtension {
                static COMMAND: int
                extension: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$SourceDebugExtension
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$SourceDebugExtension
            }
            class JDWP$ReferenceType$ClassObject {
                static COMMAND: int
                classObject: com.sun.tools.jdi.ClassObjectReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$ClassObject
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$ClassObject
            }
            class JDWP$ReferenceType$Interfaces {
                static COMMAND: int
                interfaces: com.sun.tools.jdi.InterfaceTypeImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$Interfaces
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Interfaces
            }
            class JDWP$ReferenceType$Status {
                static COMMAND: int
                status: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$Status
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Status
            }
            class JDWP$ReferenceType$NestedTypes {
                static COMMAND: int
                classes: com.sun.tools.jdi.JDWP$ReferenceType$NestedTypes$TypeInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$NestedTypes
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$NestedTypes
            }
            class JDWP$ReferenceType$NestedTypes$TypeInfo {
                refTypeTag: byte
                typeID: long
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ReferenceType$SourceFile {
                static COMMAND: int
                sourceFile: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$SourceFile
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$SourceFile
            }
            class JDWP$ReferenceType$GetValues {
                static COMMAND: int
                values: com.sun.tools.jdi.ValueImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: com.sun.tools.jdi.JDWP$ReferenceType$GetValues$Field[]): com.sun.tools.jdi.JDWP$ReferenceType$GetValues
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl, arg2: com.sun.tools.jdi.JDWP$ReferenceType$GetValues$Field[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$GetValues
            }
            class JDWP$ReferenceType$GetValues$Field {
                fieldID: long
                constructor(arg0: long)
                static access$700(arg0: com.sun.tools.jdi.JDWP$ReferenceType$GetValues$Field, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$ReferenceType$Methods {
                static COMMAND: int
                declared: com.sun.tools.jdi.JDWP$ReferenceType$Methods$MethodInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$Methods
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Methods
            }
            class JDWP$ReferenceType$Methods$MethodInfo {
                methodID: long
                name: java.lang.String
                signature: java.lang.String
                modBits: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ReferenceType$Fields {
                static COMMAND: int
                declared: com.sun.tools.jdi.JDWP$ReferenceType$Fields$FieldInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$Fields
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Fields
            }
            class JDWP$ReferenceType$Fields$FieldInfo {
                fieldID: long
                name: java.lang.String
                signature: java.lang.String
                modBits: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$ReferenceType$Modifiers {
                static COMMAND: int
                modBits: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$Modifiers
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Modifiers
            }
            class JDWP$ReferenceType$ClassLoader {
                static COMMAND: int
                classLoader: com.sun.tools.jdi.ClassLoaderReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$ClassLoader
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$ClassLoader
            }
            class JDWP$ReferenceType$Signature {
                static COMMAND: int
                signature: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.JDWP$ReferenceType$Signature
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$ReferenceType$Signature
            }
            class JDWP$VirtualMachine {
                static COMMAND_SET: int
            }
            class JDWP$VirtualMachine$InstanceCounts {
                static COMMAND: int
                counts: long[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl[]): com.sun.tools.jdi.JDWP$VirtualMachine$InstanceCounts
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.ReferenceTypeImpl[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$InstanceCounts
            }
            class JDWP$VirtualMachine$AllClassesWithGeneric {
                static COMMAND: int
                classes: com.sun.tools.jdi.JDWP$VirtualMachine$AllClassesWithGeneric$ClassInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$AllClassesWithGeneric
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$AllClassesWithGeneric
            }
            class JDWP$VirtualMachine$AllClassesWithGeneric$ClassInfo {
                refTypeTag: byte
                typeID: long
                signature: java.lang.String
                genericSignature: java.lang.String
                status: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$VirtualMachine$SetDefaultStratum {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: java.lang.String): com.sun.tools.jdi.JDWP$VirtualMachine$SetDefaultStratum
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: java.lang.String): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$SetDefaultStratum
            }
            class JDWP$VirtualMachine$RedefineClasses {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.JDWP$VirtualMachine$RedefineClasses$ClassDef[]): com.sun.tools.jdi.JDWP$VirtualMachine$RedefineClasses
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.JDWP$VirtualMachine$RedefineClasses$ClassDef[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$RedefineClasses
            }
            class JDWP$VirtualMachine$RedefineClasses$ClassDef {
                refType: com.sun.tools.jdi.ReferenceTypeImpl
                classfile: byte[]
                constructor(arg0: com.sun.tools.jdi.ReferenceTypeImpl, arg1: byte[])
                static access$300(arg0: com.sun.tools.jdi.JDWP$VirtualMachine$RedefineClasses$ClassDef, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$VirtualMachine$CapabilitiesNew {
                static COMMAND: int
                canWatchFieldModification: boolean
                canWatchFieldAccess: boolean
                canGetBytecodes: boolean
                canGetSyntheticAttribute: boolean
                canGetOwnedMonitorInfo: boolean
                canGetCurrentContendedMonitor: boolean
                canGetMonitorInfo: boolean
                canRedefineClasses: boolean
                canAddMethod: boolean
                canUnrestrictedlyRedefineClasses: boolean
                canPopFrames: boolean
                canUseInstanceFilters: boolean
                canGetSourceDebugExtension: boolean
                canRequestVMDeathEvent: boolean
                canSetDefaultStratum: boolean
                canGetInstanceInfo: boolean
                canRequestMonitorEvents: boolean
                canGetMonitorFrameInfo: boolean
                canUseSourceNameFilters: boolean
                canGetConstantPool: boolean
                canForceEarlyReturn: boolean
                reserved22: boolean
                reserved23: boolean
                reserved24: boolean
                reserved25: boolean
                reserved26: boolean
                reserved27: boolean
                reserved28: boolean
                reserved29: boolean
                reserved30: boolean
                reserved31: boolean
                reserved32: boolean
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$CapabilitiesNew
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$CapabilitiesNew
            }
            class JDWP$VirtualMachine$ReleaseEvents {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$ReleaseEvents
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$ReleaseEvents
            }
            class JDWP$VirtualMachine$HoldEvents {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$HoldEvents
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$HoldEvents
            }
            class JDWP$VirtualMachine$DisposeObjects {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.JDWP$VirtualMachine$DisposeObjects$Request[]): com.sun.tools.jdi.JDWP$VirtualMachine$DisposeObjects
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.JDWP$VirtualMachine$DisposeObjects$Request[]): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$DisposeObjects
            }
            class JDWP$VirtualMachine$DisposeObjects$Request {
                object: com.sun.tools.jdi.ObjectReferenceImpl
                refCnt: int
                constructor(arg0: com.sun.tools.jdi.ObjectReferenceImpl, arg1: int)
                static access$200(arg0: com.sun.tools.jdi.JDWP$VirtualMachine$DisposeObjects$Request, arg1: com.sun.tools.jdi.PacketStream): void
            }
            class JDWP$VirtualMachine$ClassPaths {
                static COMMAND: int
                baseDir: java.lang.String
                classpaths: java.lang.String[]
                bootclasspaths: java.lang.String[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$ClassPaths
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$ClassPaths
            }
            class JDWP$VirtualMachine$Capabilities {
                static COMMAND: int
                canWatchFieldModification: boolean
                canWatchFieldAccess: boolean
                canGetBytecodes: boolean
                canGetSyntheticAttribute: boolean
                canGetOwnedMonitorInfo: boolean
                canGetCurrentContendedMonitor: boolean
                canGetMonitorInfo: boolean
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$Capabilities
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$Capabilities
            }
            class JDWP$VirtualMachine$CreateString {
                static COMMAND: int
                stringObject: com.sun.tools.jdi.StringReferenceImpl
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: java.lang.String): com.sun.tools.jdi.JDWP$VirtualMachine$CreateString
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: java.lang.String): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$CreateString
            }
            class JDWP$VirtualMachine$Exit {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: int): com.sun.tools.jdi.JDWP$VirtualMachine$Exit
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: int): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$Exit
            }
            class JDWP$VirtualMachine$Resume {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$Resume
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$Resume
            }
            class JDWP$VirtualMachine$Suspend {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$Suspend
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$Suspend
            }
            class JDWP$VirtualMachine$IDSizes {
                static COMMAND: int
                fieldIDSize: int
                methodIDSize: int
                objectIDSize: int
                referenceTypeIDSize: int
                frameIDSize: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$IDSizes
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$IDSizes
            }
            class JDWP$VirtualMachine$Dispose {
                static COMMAND: int
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$Dispose
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$Dispose
            }
            class JDWP$VirtualMachine$TopLevelThreadGroups {
                static COMMAND: int
                groups: com.sun.tools.jdi.ThreadGroupReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$TopLevelThreadGroups
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$TopLevelThreadGroups
            }
            class JDWP$VirtualMachine$AllThreads {
                static COMMAND: int
                threads: com.sun.tools.jdi.ThreadReferenceImpl[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads
            }
            class JDWP$VirtualMachine$AllClasses {
                static COMMAND: int
                classes: com.sun.tools.jdi.JDWP$VirtualMachine$AllClasses$ClassInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$AllClasses
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$AllClasses
            }
            class JDWP$VirtualMachine$AllClasses$ClassInfo {
                refTypeTag: byte
                typeID: long
                signature: java.lang.String
                status: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$VirtualMachine$ClassesBySignature {
                static COMMAND: int
                classes: com.sun.tools.jdi.JDWP$VirtualMachine$ClassesBySignature$ClassInfo[]
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: java.lang.String): com.sun.tools.jdi.JDWP$VirtualMachine$ClassesBySignature
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: java.lang.String): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$ClassesBySignature
            }
            class JDWP$VirtualMachine$ClassesBySignature$ClassInfo {
                refTypeTag: byte
                typeID: long
                status: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream, arg2: com.sun.tools.jdi.JDWP$1)
            }
            class JDWP$VirtualMachine$Version {
                static COMMAND: int
                description: java.lang.String
                jdwpMajor: int
                jdwpMinor: int
                vmVersion: java.lang.String
                vmName: java.lang.String
                static process(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.JDWP$VirtualMachine$Version
                static enqueueCommand(arg0: com.sun.tools.jdi.VirtualMachineImpl): com.sun.tools.jdi.PacketStream
                static waitForReply(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.tools.jdi.PacketStream): com.sun.tools.jdi.JDWP$VirtualMachine$Version
            }
            interface VMListener extends java.util.EventListener {
                public vmSuspended(arg0: com.sun.tools.jdi.VMAction): boolean
                public vmNotSuspended(arg0: com.sun.tools.jdi.VMAction): boolean
            }
            class ObjectReferenceImpl extends com.sun.tools.jdi.ValueImpl implements com.sun.jdi.ObjectReference , com.sun.tools.jdi.VMListener {
                ref<T>(...args: any[]): any
                addedListener: boolean
                protected newCache(): com.sun.tools.jdi.ObjectReferenceImpl$Cache
                protected getCache(): com.sun.tools.jdi.ObjectReferenceImpl$Cache
                protected invokableReferenceType(arg0: com.sun.jdi.Method): com.sun.tools.jdi.ClassTypeImpl
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: long)
                protected description(): java.lang.String
                public vmSuspended(arg0: com.sun.tools.jdi.VMAction): boolean
                public vmNotSuspended(arg0: com.sun.tools.jdi.VMAction): boolean
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public type(): com.sun.jdi.Type
                public referenceType(): com.sun.jdi.ReferenceType
                public getValue(arg0: com.sun.jdi.Field): com.sun.jdi.Value
                public getValues(arg0: java.util.List<com.sun.jdi.Field>): java.util.Map<com.sun.jdi.Field, com.sun.jdi.Value>
                public setValue(arg0: com.sun.jdi.Field, arg1: com.sun.jdi.Value): void
                validateMethodInvocation(arg0: com.sun.jdi.Method, arg1: int): void
                validateClassMethodInvocation(arg0: com.sun.jdi.Method, arg1: int): void
                validateIfaceMethodInvocation(arg0: com.sun.jdi.Method, arg1: int): void
                sendInvokeCommand(arg0: com.sun.tools.jdi.ThreadReferenceImpl, arg1: com.sun.tools.jdi.ClassTypeImpl, arg2: com.sun.tools.jdi.MethodImpl, arg3: com.sun.tools.jdi.ValueImpl[], arg4: int): com.sun.tools.jdi.PacketStream
                public invokeMethod(arg0: com.sun.jdi.ThreadReference, arg1: com.sun.jdi.Method, arg2: java.util.List<com.sun.jdi.Value>, arg3: int): com.sun.jdi.Value
                public disableCollection(): void
                public enableCollection(): void
                public isCollected(): boolean
                public uniqueID(): long
                jdwpMonitorInfo(): com.sun.tools.jdi.JDWP$ObjectReference$MonitorInfo
                public waitingThreads(): java.util.List<com.sun.jdi.ThreadReference>
                public owningThread(): com.sun.jdi.ThreadReference
                public entryCount(): int
                public referringObjects(arg0: long): java.util.List<com.sun.jdi.ObjectReference>
                isClassObject(): boolean
                prepareForAssignmentTo(arg0: com.sun.tools.jdi.ValueContainer): com.sun.tools.jdi.ValueImpl
                validateAssignment(arg0: com.sun.tools.jdi.ValueContainer): void
                toString<T>(...args: any[]): any
                typeValueKey(): byte
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class ObjectReferenceImpl$1 implements com.sun.tools.jdi.CommandSender {
                val$thread: com.sun.tools.jdi.ThreadReferenceImpl
                val$refType: com.sun.tools.jdi.ClassTypeImpl
                val$method: com.sun.tools.jdi.MethodImpl
                val$args: com.sun.tools.jdi.ValueImpl[]
                val$options: int
                this$0: com.sun.tools.jdi.ObjectReferenceImpl
                constructor(arg0: com.sun.tools.jdi.ObjectReferenceImpl, arg1: com.sun.tools.jdi.ThreadReferenceImpl, arg2: com.sun.tools.jdi.ClassTypeImpl, arg3: com.sun.tools.jdi.MethodImpl, arg4: com.sun.tools.jdi.ValueImpl[], arg5: int)
                public send(): com.sun.tools.jdi.PacketStream
            }
            class ObjectReferenceImpl$Cache {
                monitorInfo: com.sun.tools.jdi.JDWP$ObjectReference$MonitorInfo
                protected constructor()
            }
            interface VirtualMachineManagerService extends com.sun.jdi.VirtualMachineManager {
                public setDefaultConnector(arg0: com.sun.jdi.connect.LaunchingConnector): void
                public addConnector(arg0: com.sun.jdi.connect.Connector): void
                public removeConnector(arg0: com.sun.jdi.connect.Connector): void
            }
            class VirtualMachineManagerImpl implements com.sun.tools.jdi.VirtualMachineManagerService {
                public static virtualMachineManager(): com.sun.jdi.VirtualMachineManager
                protected constructor()
                public defaultConnector(): com.sun.jdi.connect.LaunchingConnector
                public setDefaultConnector(arg0: com.sun.jdi.connect.LaunchingConnector): void
                public launchingConnectors(): java.util.List<com.sun.jdi.connect.LaunchingConnector>
                public attachingConnectors(): java.util.List<com.sun.jdi.connect.AttachingConnector>
                public listeningConnectors(): java.util.List<com.sun.jdi.connect.ListeningConnector>
                public allConnectors(): java.util.List<com.sun.jdi.connect.Connector>
                public connectedVirtualMachines(): java.util.List<com.sun.jdi.VirtualMachine>
                public addConnector(arg0: com.sun.jdi.connect.Connector): void
                public removeConnector(arg0: com.sun.jdi.connect.Connector): void
                createVirtualMachine<T>(...args: any[]): any
                public addVirtualMachine(arg0: com.sun.jdi.VirtualMachine): void
                disposeVirtualMachine(arg0: com.sun.jdi.VirtualMachine): void
                public majorInterfaceVersion(): int
                public minorInterfaceVersion(): int
                mainGroupForJDI(): java.lang.ThreadGroup
                getString(arg0: java.lang.String): java.lang.String
            }
            class EventRequestManagerImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.request.EventRequestManager {
                requestLists: java.util.List<com.sun.jdi.request.EventRequest>[]
                static JDWPtoJDISuspendPolicy(arg0: byte): int
                static JDItoJDWPSuspendPolicy(arg0: int): byte
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public createClassPrepareRequest(): com.sun.jdi.request.ClassPrepareRequest
                public createClassUnloadRequest(): com.sun.jdi.request.ClassUnloadRequest
                public createExceptionRequest(arg0: com.sun.jdi.ReferenceType, arg1: boolean, arg2: boolean): com.sun.jdi.request.ExceptionRequest
                public createStepRequest(arg0: com.sun.jdi.ThreadReference, arg1: int, arg2: int): com.sun.jdi.request.StepRequest
                public createThreadDeathRequest(): com.sun.jdi.request.ThreadDeathRequest
                public createThreadStartRequest(): com.sun.jdi.request.ThreadStartRequest
                public createMethodEntryRequest(): com.sun.jdi.request.MethodEntryRequest
                public createMethodExitRequest(): com.sun.jdi.request.MethodExitRequest
                public createMonitorContendedEnterRequest(): com.sun.jdi.request.MonitorContendedEnterRequest
                public createMonitorContendedEnteredRequest(): com.sun.jdi.request.MonitorContendedEnteredRequest
                public createMonitorWaitRequest(): com.sun.jdi.request.MonitorWaitRequest
                public createMonitorWaitedRequest(): com.sun.jdi.request.MonitorWaitedRequest
                public createBreakpointRequest(arg0: com.sun.jdi.Location): com.sun.jdi.request.BreakpointRequest
                public createAccessWatchpointRequest(arg0: com.sun.jdi.Field): com.sun.jdi.request.AccessWatchpointRequest
                public createModificationWatchpointRequest(arg0: com.sun.jdi.Field): com.sun.jdi.request.ModificationWatchpointRequest
                public createVMDeathRequest(): com.sun.jdi.request.VMDeathRequest
                public deleteEventRequest(arg0: com.sun.jdi.request.EventRequest): void
                public deleteEventRequests(arg0: java.util.List<com.sun.jdi.request.EventRequest>): void
                public deleteAllBreakpoints(): void
                public stepRequests(): java.util.List<com.sun.jdi.request.StepRequest>
                public classPrepareRequests(): java.util.List<com.sun.jdi.request.ClassPrepareRequest>
                public classUnloadRequests(): java.util.List<com.sun.jdi.request.ClassUnloadRequest>
                public threadStartRequests(): java.util.List<com.sun.jdi.request.ThreadStartRequest>
                public threadDeathRequests(): java.util.List<com.sun.jdi.request.ThreadDeathRequest>
                public exceptionRequests(): java.util.List<com.sun.jdi.request.ExceptionRequest>
                public breakpointRequests(): java.util.List<com.sun.jdi.request.BreakpointRequest>
                public accessWatchpointRequests(): java.util.List<com.sun.jdi.request.AccessWatchpointRequest>
                public modificationWatchpointRequests(): java.util.List<com.sun.jdi.request.ModificationWatchpointRequest>
                public methodEntryRequests(): java.util.List<com.sun.jdi.request.MethodEntryRequest>
                public methodExitRequests(): java.util.List<com.sun.jdi.request.MethodExitRequest>
                public monitorContendedEnterRequests(): java.util.List<com.sun.jdi.request.MonitorContendedEnterRequest>
                public monitorContendedEnteredRequests(): java.util.List<com.sun.jdi.request.MonitorContendedEnteredRequest>
                public monitorWaitRequests(): java.util.List<com.sun.jdi.request.MonitorWaitRequest>
                public monitorWaitedRequests(): java.util.List<com.sun.jdi.request.MonitorWaitedRequest>
                public vmDeathRequests(): java.util.List<com.sun.jdi.request.VMDeathRequest>
                unmodifiableRequestList(arg0: int): java.util.List<com.sun.jdi.request.EventRequest>
                request(arg0: int, arg1: int): com.sun.jdi.request.EventRequest
                requestList(arg0: int): java.util.List<com.sun.jdi.request.EventRequest>
                static access$000(): int
                static access$002(arg0: int): int
            }
            class EventRequestManagerImpl$VMDeathRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl implements com.sun.jdi.request.VMDeathRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$ModificationWatchpointRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$WatchpointRequestImpl implements com.sun.jdi.request.ModificationWatchpointRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl, arg1: com.sun.jdi.Field)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$AccessWatchpointRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$WatchpointRequestImpl implements com.sun.jdi.request.AccessWatchpointRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl, arg1: com.sun.jdi.Field)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            abstract class EventRequestManagerImpl$WatchpointRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.WatchpointRequest {
                field<T>(...args: any[]): any
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl, arg1: com.sun.jdi.Field)
            }
            class EventRequestManagerImpl$ThreadStartRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ThreadVisibleEventRequestImpl implements com.sun.jdi.request.ThreadStartRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$ThreadDeathRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ThreadVisibleEventRequestImpl implements com.sun.jdi.request.ThreadDeathRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$StepRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.StepRequest {
                thread<T>(...args: any[]): any
                size<T>(...args: any[]): any
                depth<T>(...args: any[]): any
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl, arg1: com.sun.jdi.ThreadReference, arg2: int, arg3: int)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$MonitorWaitedRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.MonitorWaitedRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$MonitorWaitRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.MonitorWaitRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$MonitorContendedEnteredRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.MonitorContendedEnteredRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$MonitorContendedEnterRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.MonitorContendedEnterRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$MethodExitRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.MethodExitRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$MethodEntryRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.MethodEntryRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$ExceptionRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.ExceptionRequest {
                exception<T>(...args: any[]): any
                caught: boolean
                uncaught: boolean
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl, arg1: com.sun.jdi.ReferenceType, arg2: boolean, arg3: boolean)
                public notifyCaught(): boolean
                public notifyUncaught(): boolean
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$ClassUnloadRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.ClassUnloadRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$ClassPrepareRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.ClassPrepareRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                eventCmd(): int
                public addSourceNameFilter(arg0: java.lang.String): void
                toString<T>(...args: any[]): any
            }
            class EventRequestManagerImpl$BreakpointRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ClassVisibleEventRequestImpl implements com.sun.jdi.request.BreakpointRequest {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl, arg1: com.sun.jdi.Location)
                public location(): com.sun.jdi.Location
                eventCmd(): int
                toString<T>(...args: any[]): any
            }
            abstract class EventRequestManagerImpl$ClassVisibleEventRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$ThreadVisibleEventRequestImpl {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                addClassFilter<T>(...args: any[]): any
                public addClassExclusionFilter(arg0: java.lang.String): void
                public addInstanceFilter(arg0: com.sun.jdi.ObjectReference): void
            }
            abstract class EventRequestManagerImpl$ThreadVisibleEventRequestImpl extends com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl {
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                public addThreadFilter(arg0: com.sun.jdi.ThreadReference): void
            }
            abstract class EventRequestManagerImpl$EventRequestImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.request.EventRequest {
                id: int
                filters: java.util.List<java.lang.Object>
                isEnabled<T>(...args: any[]): any
                deleted: boolean
                suspendPolicy<T>(...args: any[]): any
                this$0: com.sun.tools.jdi.EventRequestManagerImpl
                constructor(arg0: com.sun.tools.jdi.EventRequestManagerImpl)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                eventCmd(): int
                invalidState(): com.sun.jdi.request.InvalidRequestStateException
                state(): java.lang.String
                requestList(): java.util.List
                delete(): void
                public enable(): void
                public disable(): void
                public setEnabled(arg0: boolean): void
                public addCountFilter(arg0: int): void
                public setSuspendPolicy(arg0: int): void
                set(): void
                clear(): void
                public getProperty(arg0: java.lang.Object): java.lang.Object
                public putProperty(arg0: java.lang.Object, arg1: java.lang.Object): void
            }
            class EventQueueImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.event.EventQueue {
                eventSets: java.util.LinkedList<com.sun.jdi.event.EventSet>
                target: com.sun.tools.jdi.TargetVM
                closed: boolean
                constructor(arg0: com.sun.jdi.VirtualMachine, arg1: com.sun.tools.jdi.TargetVM)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                enqueue(arg0: com.sun.jdi.event.EventSet): void
                size(): int
                close(): void
                remove<T>(...args: any[]): any
                removeInternal(): com.sun.jdi.event.EventSet
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }
            class EventQueueImpl$TimerThread extends java.lang.Thread {
                this$0: com.sun.tools.jdi.EventQueueImpl
                constructor(arg0: com.sun.tools.jdi.EventQueueImpl, arg1: long)
                timedOut(): boolean
                public run(): void
            }
            class TargetVM implements java.lang.Runnable {
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl, arg1: com.sun.jdi.connect.spi.Connection)
                start(): void
                public run(): void
                protected handleVMCommand(arg0: com.sun.tools.jdi.Packet): void
                protected handleEventCmdSet(arg0: com.sun.tools.jdi.Packet): void
                notifyDequeueEventSet(): void
                send(arg0: com.sun.tools.jdi.Packet): void
                waitForReply(arg0: com.sun.tools.jdi.Packet): void
                addEventQueue(arg0: com.sun.tools.jdi.EventQueueImpl): void
                stopListening(): void
            }
            class TargetVM$EventController extends java.lang.Thread {
                vm: com.sun.tools.jdi.VirtualMachineImpl
                controlRequest: int
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl)
                hold(): void
                release(): void
                public run(): void
            }
            interface ThreadListener extends java.util.EventListener {
                public threadResumable(arg0: com.sun.tools.jdi.ThreadAction): boolean
            }
            class VirtualMachineImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.PathSearchingVirtualMachine , com.sun.tools.jdi.ThreadListener {
                public sizeofFieldRef: int
                public sizeofMethodRef: int
                public sizeofObjectRef: int
                public sizeofClassRef: int
                public sizeofFrameRef: int
                sequenceNumber: int
                vmManager: com.sun.tools.jdi.VirtualMachineManagerImpl
                traceFlags: int
                static TRACE_RAW_SENDS: int
                static TRACE_RAW_RECEIVES: int
                traceReceives: boolean
                waitInitCompletion(): void
                state(): com.sun.tools.jdi.VMState
                public threadResumable(arg0: com.sun.tools.jdi.ThreadAction): boolean
                constructor(arg0: com.sun.jdi.VirtualMachineManager, arg1: com.sun.jdi.connect.spi.Connection, arg2: java.lang.Process, arg3: int)
                getInternalEventRequestManager(): com.sun.tools.jdi.EventRequestManagerImpl
                validateVM(): void
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public classesByName(arg0: java.lang.String): java.util.List<com.sun.jdi.ReferenceType>
                public allClasses(): java.util.List<com.sun.jdi.ReferenceType>
                public redefineClasses(arg0: java.util.Map<any extends com.sun.jdi.ReferenceType, byte[]>): void
                public allThreads(): java.util.List<com.sun.jdi.ThreadReference>
                public topLevelThreadGroups(): java.util.List<com.sun.jdi.ThreadGroupReference>
                sendResumingCommand(arg0: com.sun.tools.jdi.CommandSender): com.sun.tools.jdi.PacketStream
                notifySuspend(): void
                public suspend(): void
                public resume(): void
                public eventQueue(): com.sun.jdi.event.EventQueue
                public eventRequestManager(): com.sun.jdi.request.EventRequestManager
                eventRequestManagerImpl(): com.sun.tools.jdi.EventRequestManagerImpl
                mirrorOf<T>(...args: any[]): any
                public mirrorOfVoid(): com.sun.jdi.VoidValue
                public instanceCounts(arg0: java.util.List<com.sun.jdi.ReferenceType>): long[]
                public dispose(): void
                public exit(arg0: int): void
                public process(): java.lang.Process
                public description(): java.lang.String
                public version(): java.lang.String
                public name(): java.lang.String
                public canWatchFieldModification(): boolean
                public canWatchFieldAccess(): boolean
                public canGetBytecodes(): boolean
                public canGetSyntheticAttribute(): boolean
                public canGetOwnedMonitorInfo(): boolean
                public canGetCurrentContendedMonitor(): boolean
                public canGetMonitorInfo(): boolean
                canGet1_5LanguageFeatures(): boolean
                public canUseInstanceFilters(): boolean
                public canRedefineClasses(): boolean
                public canAddMethod(): boolean
                public canUnrestrictedlyRedefineClasses(): boolean
                public canPopFrames(): boolean
                public canGetMethodReturnValues(): boolean
                public canGetInstanceInfo(): boolean
                public canUseSourceNameFilters(): boolean
                public canForceEarlyReturn(): boolean
                public canBeModified(): boolean
                public canGetSourceDebugExtension(): boolean
                public canGetClassFileVersion(): boolean
                public canGetConstantPool(): boolean
                public canRequestVMDeathEvent(): boolean
                public canRequestMonitorEvents(): boolean
                public canGetMonitorFrameInfo(): boolean
                public setDebugTraceMode(arg0: int): void
                printTrace(arg0: java.lang.String): void
                printReceiveTrace(arg0: int, arg1: java.lang.String): void
                removeReferenceType(arg0: java.lang.String): void
                referenceType<T>(...args: any[]): any
                classType(arg0: long): com.sun.tools.jdi.ClassTypeImpl
                interfaceType(arg0: long): com.sun.tools.jdi.InterfaceTypeImpl
                arrayType(arg0: long): com.sun.tools.jdi.ArrayTypeImpl
                sendToTarget(arg0: com.sun.tools.jdi.Packet): void
                waitForTargetReply(arg0: com.sun.tools.jdi.Packet): void
                findBootType(arg0: java.lang.String): com.sun.jdi.Type
                theBooleanType(): com.sun.jdi.BooleanType
                theByteType(): com.sun.jdi.ByteType
                theCharType(): com.sun.jdi.CharType
                theShortType(): com.sun.jdi.ShortType
                theIntegerType(): com.sun.jdi.IntegerType
                theLongType(): com.sun.jdi.LongType
                theFloatType(): com.sun.jdi.FloatType
                theDoubleType(): com.sun.jdi.DoubleType
                theVoidType(): com.sun.jdi.VoidType
                primitiveTypeMirror(arg0: byte): com.sun.jdi.PrimitiveType
                objectMirror<T>(...args: any[]): any
                removeObjectMirror<T>(...args: any[]): any
                stringMirror(arg0: long): com.sun.tools.jdi.StringReferenceImpl
                arrayMirror(arg0: long): com.sun.tools.jdi.ArrayReferenceImpl
                threadMirror(arg0: long): com.sun.tools.jdi.ThreadReferenceImpl
                threadGroupMirror(arg0: long): com.sun.tools.jdi.ThreadGroupReferenceImpl
                classLoaderMirror(arg0: long): com.sun.tools.jdi.ClassLoaderReferenceImpl
                classObjectMirror(arg0: long): com.sun.tools.jdi.ClassObjectReferenceImpl
                public classPath(): java.util.List<java.lang.String>
                public bootClassPath(): java.util.List<java.lang.String>
                public baseDirectory(): java.lang.String
                public setDefaultStratum(arg0: java.lang.String): void
                public getDefaultStratum(): java.lang.String
                threadGroupForJDI(): java.lang.ThreadGroup
            }
            class VirtualMachineImpl$SoftObjectReference extends java.lang.ref.SoftReference<com.sun.tools.jdi.ObjectReferenceImpl> {
                count<T>(...args: any[]): any
                key<T>(...args: any[]): any
                constructor(arg0: java.lang.Long, arg1: com.sun.tools.jdi.ObjectReferenceImpl, arg2: java.lang.ref.ReferenceQueue<com.sun.tools.jdi.ObjectReferenceImpl>)
                incrementCount(): void
                object(): com.sun.tools.jdi.ObjectReferenceImpl
            }
            class VirtualMachineImpl$1 implements com.sun.tools.jdi.CommandSender {
                this$0: com.sun.tools.jdi.VirtualMachineImpl
                constructor(arg0: com.sun.tools.jdi.VirtualMachineImpl)
                public send(): com.sun.tools.jdi.PacketStream
            }
            interface ValueContainer {
                public type(): com.sun.jdi.Type
                public findType(arg0: java.lang.String): com.sun.jdi.Type
                public typeName(): java.lang.String
                public signature(): java.lang.String
            }
            abstract class MirrorImpl implements com.sun.jdi.Mirror {
                protected vm: com.sun.tools.jdi.VirtualMachineImpl
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public virtualMachine(): com.sun.jdi.VirtualMachine
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                validateMirror(arg0: com.sun.jdi.Mirror): void
                validateMirrorOrNull(arg0: com.sun.jdi.Mirror): void
                validateMirrors(arg0: java.util.Collection<com.sun.jdi.Mirror>): void
                validateMirrorsOrNulls(arg0: java.util.Collection<com.sun.jdi.Mirror>): void
            }
            abstract class ValueImpl extends com.sun.tools.jdi.MirrorImpl implements com.sun.jdi.Value {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                static prepareForAssignment(arg0: com.sun.jdi.Value, arg1: com.sun.tools.jdi.ValueContainer): com.sun.tools.jdi.ValueImpl
                typeValueKey<T>(...args: any[]): any
                prepareForAssignmentTo(arg0: com.sun.tools.jdi.ValueContainer): com.sun.tools.jdi.ValueImpl
            }
            class VoidValueImpl extends com.sun.tools.jdi.ValueImpl implements com.sun.jdi.VoidValue {
                constructor(arg0: com.sun.jdi.VirtualMachine)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public type(): com.sun.jdi.Type
                prepareForAssignmentTo(arg0: com.sun.tools.jdi.ValueContainer): com.sun.tools.jdi.ValueImpl
                toString<T>(...args: any[]): any
                typeValueKey(): byte
                public virtualMachine(): com.sun.jdi.VirtualMachine
            }

         }
         namespace attach {
            class AttachOperationFailedException extends java.io.IOException {
                public constructor(arg0: java.lang.String)
            }
            class AttachPermission extends java.security.BasicPermission {
                static serialVersionUID: long
                constructor(...args: any[])
            }
            class AgentInitializationException extends java.lang.Exception {
                static serialVersionUID: long
                constructor(...args: any[])
                public returnValue(): int
            }
            class AgentLoadException extends java.lang.Exception {
                static serialVersionUID: long
                constructor(...args: any[])
            }
            class AttachNotSupportedException extends java.lang.Exception {
                static serialVersionUID: long
                constructor(...args: any[])
            }
            class VirtualMachineDescriptor {
                constructor(...args: any[])
                public provider(): com.sun.tools.attach.spi.AttachProvider
                public id(): java.lang.String
                public displayName(): java.lang.String
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                toString<T>(...args: any[]): any
            }
            abstract class VirtualMachine {
                protected constructor(arg0: com.sun.tools.attach.spi.AttachProvider, arg1: java.lang.String)
                public static list(): java.util.List<com.sun.tools.attach.VirtualMachineDescriptor>
                attach<T>(...args: any[]): any
                public detach(): void
                public provider(): com.sun.tools.attach.spi.AttachProvider
                public id(): java.lang.String
                loadAgentLibrary<T>(...args: any[]): any
                loadAgentPath<T>(...args: any[]): any
                loadAgent<T>(...args: any[]): any
                public getSystemProperties(): java.util.Properties
                public getAgentProperties(): java.util.Properties
                public startManagementAgent(arg0: java.util.Properties): void
                public startLocalManagementAgent(): java.lang.String
                public hashCode(): int
                public equals(arg0: java.lang.Object): boolean
                toString<T>(...args: any[]): any
            }
            namespace spi {
               abstract class AttachProvider {
                   protected constructor()
                   public name(): java.lang.String
                   public type(): java.lang.String
                   attachVirtualMachine<T>(...args: any[]): any
                   public listVirtualMachines(): java.util.List<com.sun.tools.attach.VirtualMachineDescriptor>
                   public static providers(): java.util.List<com.sun.tools.attach.spi.AttachProvider>
               }

            }

         }
         namespace script {
            namespace shell {
               class Main {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   static access$000(arg0: javax.script.ScriptEngine, arg1: java.lang.String[]): void
                   static access$100(arg0: javax.script.ScriptEngine, arg1: java.lang.String, arg2: java.lang.String): void
                   static access$200(arg0: javax.script.ScriptEngine, arg1: java.lang.String): java.lang.String
                   static access$300(arg0: javax.script.ScriptEngine, arg1: java.lang.String): void
               }
               class Main$3 implements com.sun.tools.script.shell.Main$Command {
                   val$se: javax.script.ScriptEngine
                   val$source: java.lang.String
                   constructor(arg0: javax.script.ScriptEngine, arg1: java.lang.String)
                   public run(arg0: java.lang.String[]): void
               }
               class Main$2 implements com.sun.tools.script.shell.Main$Command {
                   val$se: javax.script.ScriptEngine
                   val$fileName: java.lang.String
                   val$encoding: java.lang.String
                   constructor(arg0: javax.script.ScriptEngine, arg1: java.lang.String, arg2: java.lang.String)
                   public run(arg0: java.lang.String[]): void
               }
               class Main$1 implements com.sun.tools.script.shell.Main$Command {
                   val$se: javax.script.ScriptEngine
                   constructor(arg0: javax.script.ScriptEngine)
                   public run(arg0: java.lang.String[]): void
               }
               interface Main$Command {
                   public run(arg0: java.lang.String[]): void
               }

            }

         }
         namespace hat {
            class Main {
                public constructor()
                public static main(arg0: java.lang.String[]): void
            }
            namespace internal {
               namespace oql {
                  class OQLQuery {
                      selectExpr: java.lang.String
                      isInstanceOf: boolean
                      className: java.lang.String
                      identifier: java.lang.String
                      whereExpr: java.lang.String
                      constructor(arg0: java.lang.String, arg1: boolean, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String)
                  }
                  class OQLException extends java.lang.Exception {
                      constructor(...args: any[])
                  }
                  interface ObjectVisitor {
                      public visit(arg0: java.lang.Object): boolean
                  }
                  class OQLEngine {
                      public static isOQLSupported(): boolean
                      public constructor(arg0: com.sun.tools.hat.internal.model.Snapshot)
                      public executeQuery(arg0: java.lang.String, arg1: com.sun.tools.hat.internal.oql.ObjectVisitor): void
                      public evalScript(arg0: java.lang.String): java.lang.Object
                      public wrapJavaObject(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): java.lang.Object
                      public toHtml(arg0: java.lang.Object): java.lang.Object
                      public call(arg0: java.lang.String, arg1: java.lang.Object[]): java.lang.Object
                  }

               }
               namespace parser {
                  class FileReadBuffer implements com.sun.tools.hat.internal.parser.ReadBuffer {
                      constructor(arg0: java.io.RandomAccessFile)
                      public get(arg0: long, arg1: byte[]): void
                      public getChar(arg0: long): char
                      public getByte(arg0: long): byte
                      public getShort(arg0: long): short
                      public getInt(arg0: long): int
                      public getLong(arg0: long): long
                  }
                  class HprofReader extends com.sun.tools.hat.internal.parser.Reader implements com.sun.tools.hat.internal.model.ArrayTypeCodes {
                      static MAGIC_NUMBER: int
                      static HPROF_UTF8: int
                      static HPROF_LOAD_CLASS: int
                      static HPROF_UNLOAD_CLASS: int
                      static HPROF_FRAME: int
                      static HPROF_TRACE: int
                      static HPROF_ALLOC_SITES: int
                      static HPROF_HEAP_SUMMARY: int
                      static HPROF_START_THREAD: int
                      static HPROF_END_THREAD: int
                      static HPROF_HEAP_DUMP: int
                      static HPROF_CPU_SAMPLES: int
                      static HPROF_CONTROL_SETTINGS: int
                      static HPROF_LOCKSTATS_WAIT_TIME: int
                      static HPROF_LOCKSTATS_HOLD_TIME: int
                      static HPROF_GC_ROOT_UNKNOWN: int
                      static HPROF_GC_ROOT_JNI_GLOBAL: int
                      static HPROF_GC_ROOT_JNI_LOCAL: int
                      static HPROF_GC_ROOT_JAVA_FRAME: int
                      static HPROF_GC_ROOT_NATIVE_STACK: int
                      static HPROF_GC_ROOT_STICKY_CLASS: int
                      static HPROF_GC_ROOT_THREAD_BLOCK: int
                      static HPROF_GC_ROOT_MONITOR_USED: int
                      static HPROF_GC_ROOT_THREAD_OBJ: int
                      static HPROF_GC_CLASS_DUMP: int
                      static HPROF_GC_INSTANCE_DUMP: int
                      static HPROF_GC_OBJ_ARRAY_DUMP: int
                      static HPROF_GC_PRIM_ARRAY_DUMP: int
                      static HPROF_HEAP_DUMP_SEGMENT: int
                      static HPROF_HEAP_DUMP_END: int
                      public constructor(arg0: java.lang.String, arg1: com.sun.tools.hat.internal.parser.PositionDataInputStream, arg2: int, arg3: boolean, arg4: int)
                      public read(): com.sun.tools.hat.internal.model.Snapshot
                  }
                  class HprofReader$ThreadObject {
                      threadId: long
                      stackSeq: int
                      this$0: com.sun.tools.hat.internal.parser.HprofReader
                      constructor(arg0: com.sun.tools.hat.internal.parser.HprofReader, arg1: long, arg2: int)
                  }
                  class MappedReadBuffer implements com.sun.tools.hat.internal.parser.ReadBuffer {
                      static $assertionsDisabled: boolean
                      constructor(arg0: java.nio.MappedByteBuffer)
                      static create(arg0: java.io.RandomAccessFile): com.sun.tools.hat.internal.parser.ReadBuffer
                      public get(arg0: long, arg1: byte[]): void
                      public getChar(arg0: long): char
                      public getByte(arg0: long): byte
                      public getShort(arg0: long): short
                      public getInt(arg0: long): int
                      public getLong(arg0: long): long
                  }
                  class PositionInputStream extends java.io.FilterInputStream {
                      public constructor(arg0: java.io.InputStream)
                      read<T>(...args: any[]): any
                      public skip(arg0: long): long
                      public markSupported(): boolean
                      public mark(arg0: int): void
                      public reset(): void
                      public position(): long
                  }
                  class PositionDataInputStream extends java.io.DataInputStream {
                      public constructor(arg0: java.io.InputStream)
                      public markSupported(): boolean
                      public mark(arg0: int): void
                      public reset(): void
                      public position(): long
                  }
                  abstract class Reader {
                      protected in: com.sun.tools.hat.internal.parser.PositionDataInputStream
                      protected constructor(arg0: com.sun.tools.hat.internal.parser.PositionDataInputStream)
                      public read(): com.sun.tools.hat.internal.model.Snapshot
                      public static readFile(arg0: java.lang.String, arg1: boolean, arg2: int): com.sun.tools.hat.internal.model.Snapshot
                  }
                  interface ReadBuffer {
                      public get(arg0: long, arg1: byte[]): void
                      public getChar(arg0: long): char
                      public getByte(arg0: long): byte
                      public getShort(arg0: long): short
                      public getInt(arg0: long): int
                      public getLong(arg0: long): long
                  }

               }
               namespace model {
                  class HackJavaValue extends com.sun.tools.hat.internal.model.JavaValue {
                      public constructor(arg0: java.lang.String, arg1: int)
                      toString<T>(...args: any[]): any
                      public getSize(): int
                  }
                  class JavaBoolean extends com.sun.tools.hat.internal.model.JavaValue {
                      value: boolean
                      public constructor(arg0: boolean)
                      toString<T>(...args: any[]): any
                  }
                  class JavaByte extends com.sun.tools.hat.internal.model.JavaValue {
                      value: byte
                      public constructor(arg0: byte)
                      toString<T>(...args: any[]): any
                  }
                  class JavaChar extends com.sun.tools.hat.internal.model.JavaValue {
                      value: char
                      public constructor(arg0: char)
                      toString<T>(...args: any[]): any
                  }
                  class JavaDouble extends com.sun.tools.hat.internal.model.JavaValue {
                      value: double
                      public constructor(arg0: double)
                      toString<T>(...args: any[]): any
                  }
                  class JavaFloat extends com.sun.tools.hat.internal.model.JavaValue {
                      value: float
                      public constructor(arg0: float)
                      toString<T>(...args: any[]): any
                  }
                  class JavaInt extends com.sun.tools.hat.internal.model.JavaValue {
                      value: int
                      public constructor(arg0: int)
                      toString<T>(...args: any[]): any
                  }
                  class JavaLong extends com.sun.tools.hat.internal.model.JavaValue {
                      value: long
                      public constructor(arg0: long)
                      toString<T>(...args: any[]): any
                  }
                  class JavaObjectRef extends com.sun.tools.hat.internal.model.JavaThing {
                      public constructor(arg0: long)
                      public getId(): long
                      public isHeapAllocated(): boolean
                      dereference<T>(...args: any[]): any
                      public getSize(): int
                      toString<T>(...args: any[]): any
                  }
                  class JavaShort extends com.sun.tools.hat.internal.model.JavaValue {
                      value: short
                      public constructor(arg0: short)
                      toString<T>(...args: any[]): any
                  }
                  abstract class JavaValue extends com.sun.tools.hat.internal.model.JavaThing {
                      protected constructor()
                      public isHeapAllocated(): boolean
                      toString<T>(...args: any[]): any
                      public getSize(): int
                  }
                  class JavaValueArray extends com.sun.tools.hat.internal.model.JavaLazyReadObject implements com.sun.tools.hat.internal.model.ArrayTypeCodes {
                      protected readValueLength(): int
                      protected readValue(): byte[]
                      public constructor(arg0: byte, arg1: long)
                      public getClazz(): com.sun.tools.hat.internal.model.JavaClass
                      public visitReferencedObjects(arg0: com.sun.tools.hat.internal.model.JavaHeapObjectVisitor): void
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public getLength(): int
                      public getElements(): java.lang.Object
                      public getElementType(): byte
                      public getBooleanAt(arg0: int): boolean
                      public getByteAt(arg0: int): byte
                      public getCharAt(arg0: int): char
                      public getShortAt(arg0: int): short
                      public getIntAt(arg0: int): int
                      public getLongAt(arg0: int): long
                      public getFloatAt(arg0: int): float
                      public getDoubleAt(arg0: int): double
                      valueString<T>(...args: any[]): any
                  }
                  class ReachableExcludesImpl implements com.sun.tools.hat.internal.model.ReachableExcludes {
                      public constructor(arg0: java.io.File)
                      public isExcluded(arg0: java.lang.String): boolean
                  }
                  class ReachableObjects {
                      public constructor(arg0: com.sun.tools.hat.internal.model.JavaHeapObject, arg1: com.sun.tools.hat.internal.model.ReachableExcludes)
                      public getRoot(): com.sun.tools.hat.internal.model.JavaHeapObject
                      public getReachables(): com.sun.tools.hat.internal.model.JavaThing[]
                      public getTotalSize(): long
                      public getExcludedFields(): java.lang.String[]
                      public getUsedFields(): java.lang.String[]
                  }
                  class ReachableObjects$2 extends com.sun.tools.hat.internal.util.Comparer {
                      this$0: com.sun.tools.hat.internal.model.ReachableObjects
                      constructor(arg0: com.sun.tools.hat.internal.model.ReachableObjects)
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class ReachableObjects$1 extends com.sun.tools.hat.internal.model.AbstractJavaHeapObjectVisitor {
                      val$bag: java.util.Hashtable
                      val$excludes: com.sun.tools.hat.internal.model.ReachableExcludes
                      val$fieldsExcluded: java.util.Hashtable
                      val$fieldsUsed: java.util.Hashtable
                      this$0: com.sun.tools.hat.internal.model.ReachableObjects
                      constructor(arg0: com.sun.tools.hat.internal.model.ReachableObjects, arg1: java.util.Hashtable, arg2: com.sun.tools.hat.internal.model.ReachableExcludes, arg3: java.util.Hashtable, arg4: java.util.Hashtable)
                      public visit(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      public mightExclude(): boolean
                      public exclude(arg0: com.sun.tools.hat.internal.model.JavaClass, arg1: com.sun.tools.hat.internal.model.JavaField): boolean
                  }
                  abstract class AbstractJavaHeapObjectVisitor implements com.sun.tools.hat.internal.model.JavaHeapObjectVisitor {
                      public constructor()
                      public visit(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      public exclude(arg0: com.sun.tools.hat.internal.model.JavaClass, arg1: com.sun.tools.hat.internal.model.JavaField): boolean
                      public mightExclude(): boolean
                  }
                  interface ArrayTypeCodes {
                      public static T_BOOLEAN: int
                      public static T_CHAR: int
                      public static T_FLOAT: int
                      public static T_DOUBLE: int
                      public static T_BYTE: int
                      public static T_SHORT: int
                      public static T_INT: int
                      public static T_LONG: int
                  }
                  class JavaObjectArray extends com.sun.tools.hat.internal.model.JavaLazyReadObject {
                      public constructor(arg0: long, arg1: long)
                      public getClazz(): com.sun.tools.hat.internal.model.JavaClass
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public getValues(): com.sun.tools.hat.internal.model.JavaThing[]
                      public getElements(): com.sun.tools.hat.internal.model.JavaThing[]
                      public compareTo(arg0: com.sun.tools.hat.internal.model.JavaThing): int
                      public getLength(): int
                      public visitReferencedObjects(arg0: com.sun.tools.hat.internal.model.JavaHeapObjectVisitor): void
                      public describeReferenceTo(arg0: com.sun.tools.hat.internal.model.JavaThing, arg1: com.sun.tools.hat.internal.model.Snapshot): java.lang.String
                      protected readValueLength(): int
                      protected readValue(): byte[]
                  }
                  class StackFrame {
                      public static LINE_NUMBER_UNKNOWN: int
                      public static LINE_NUMBER_COMPILED: int
                      public static LINE_NUMBER_NATIVE: int
                      public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: int)
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public getMethodName(): java.lang.String
                      public getMethodSignature(): java.lang.String
                      public getClassName(): java.lang.String
                      public getSourceFileName(): java.lang.String
                      public getLineNumber(): java.lang.String
                  }
                  interface JavaHeapObjectVisitor {
                      public visit(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      public exclude(arg0: com.sun.tools.hat.internal.model.JavaClass, arg1: com.sun.tools.hat.internal.model.JavaField): boolean
                      public mightExclude(): boolean
                  }
                  class ReferenceChain {
                      obj: com.sun.tools.hat.internal.model.JavaHeapObject
                      next: com.sun.tools.hat.internal.model.ReferenceChain
                      public constructor(arg0: com.sun.tools.hat.internal.model.JavaHeapObject, arg1: com.sun.tools.hat.internal.model.ReferenceChain)
                      public getObj(): com.sun.tools.hat.internal.model.JavaHeapObject
                      public getNext(): com.sun.tools.hat.internal.model.ReferenceChain
                      public getDepth(): int
                  }
                  interface ReachableExcludes {
                      public isExcluded(arg0: java.lang.String): boolean
                  }
                  class StackTrace {
                      public constructor(arg0: com.sun.tools.hat.internal.model.StackFrame[])
                      public traceForDepth(arg0: int): com.sun.tools.hat.internal.model.StackTrace
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public getFrames(): com.sun.tools.hat.internal.model.StackFrame[]
                  }
                  class JavaStatic {
                      public constructor(arg0: com.sun.tools.hat.internal.model.JavaField, arg1: com.sun.tools.hat.internal.model.JavaThing)
                      public resolve(arg0: com.sun.tools.hat.internal.model.JavaClass, arg1: com.sun.tools.hat.internal.model.Snapshot): void
                      public getField(): com.sun.tools.hat.internal.model.JavaField
                      public getValue(): com.sun.tools.hat.internal.model.JavaThing
                  }
                  class JavaField {
                      public constructor(arg0: java.lang.String, arg1: java.lang.String)
                      public hasId(): boolean
                      public getName(): java.lang.String
                      public getSignature(): java.lang.String
                  }
                  class JavaClass extends com.sun.tools.hat.internal.model.JavaHeapObject {
                      constructor(...args: any[])
                      public getClazz(): com.sun.tools.hat.internal.model.JavaClass
                      public getIdentifierSize(): int
                      public getMinimumObjectSize(): int
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public resolveSuperclass(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public isString(): boolean
                      public isClassLoader(): boolean
                      public getField(arg0: int): com.sun.tools.hat.internal.model.JavaField
                      public getNumFieldsForInstance(): int
                      public getFieldForInstance(arg0: int): com.sun.tools.hat.internal.model.JavaField
                      public getClassForField(arg0: int): com.sun.tools.hat.internal.model.JavaClass
                      public getId(): long
                      public getName(): java.lang.String
                      public isArray(): boolean
                      public getInstances(arg0: boolean): java.util.Enumeration
                      public getInstancesCount(arg0: boolean): int
                      public getSubclasses(): com.sun.tools.hat.internal.model.JavaClass[]
                      public getSuperclass(): com.sun.tools.hat.internal.model.JavaClass
                      public getLoader(): com.sun.tools.hat.internal.model.JavaThing
                      public isBootstrap(): boolean
                      public getSigners(): com.sun.tools.hat.internal.model.JavaThing
                      public getProtectionDomain(): com.sun.tools.hat.internal.model.JavaThing
                      public getFields(): com.sun.tools.hat.internal.model.JavaField[]
                      public getFieldsForInstance(): com.sun.tools.hat.internal.model.JavaField[]
                      public getStatics(): com.sun.tools.hat.internal.model.JavaStatic[]
                      public getStaticField(arg0: java.lang.String): com.sun.tools.hat.internal.model.JavaThing
                      toString<T>(...args: any[]): any
                      public compareTo(arg0: com.sun.tools.hat.internal.model.JavaThing): int
                      public isAssignableFrom(arg0: com.sun.tools.hat.internal.model.JavaClass): boolean
                      public describeReferenceTo(arg0: com.sun.tools.hat.internal.model.JavaThing, arg1: com.sun.tools.hat.internal.model.Snapshot): java.lang.String
                      public getInstanceSize(): int
                      public getTotalInstanceSize(): long
                      public getSize(): int
                      public visitReferencedObjects(arg0: com.sun.tools.hat.internal.model.JavaHeapObjectVisitor): void
                      getReadBuffer(): com.sun.tools.hat.internal.parser.ReadBuffer
                      setNew(arg0: com.sun.tools.hat.internal.model.JavaHeapObject, arg1: boolean): void
                      isNew(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): boolean
                      getSiteTrace(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): com.sun.tools.hat.internal.model.StackTrace
                      addReferenceFromRoot(arg0: com.sun.tools.hat.internal.model.Root, arg1: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      getRoot(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): com.sun.tools.hat.internal.model.Root
                      getSnapshot(): com.sun.tools.hat.internal.model.Snapshot
                      addInstance(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                  }
                  class Root {
                      public static INVALID_TYPE: int
                      public static UNKNOWN: int
                      public static SYSTEM_CLASS: int
                      public static NATIVE_LOCAL: int
                      public static NATIVE_STATIC: int
                      public static THREAD_BLOCK: int
                      public static BUSY_MONITOR: int
                      public static JAVA_LOCAL: int
                      public static NATIVE_STACK: int
                      public static JAVA_STATIC: int
                      constructor(...args: any[])
                      public getId(): long
                      public getIdString(): java.lang.String
                      public getDescription(): java.lang.String
                      public getType(): int
                      public getTypeName(): java.lang.String
                      public mostInteresting(arg0: com.sun.tools.hat.internal.model.Root): com.sun.tools.hat.internal.model.Root
                      public getReferer(): com.sun.tools.hat.internal.model.JavaHeapObject
                      public getStackTrace(): com.sun.tools.hat.internal.model.StackTrace
                      public getIndex(): int
                      resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      setIndex(arg0: int): void
                  }
                  abstract class JavaThing {
                      protected constructor()
                      public dereference(arg0: com.sun.tools.hat.internal.model.Snapshot, arg1: com.sun.tools.hat.internal.model.JavaField): com.sun.tools.hat.internal.model.JavaThing
                      public isSameTypeAs(arg0: com.sun.tools.hat.internal.model.JavaThing): boolean
                      public isHeapAllocated(): boolean
                      public getSize(): int
                      toString<T>(...args: any[]): any
                      public compareTo(arg0: com.sun.tools.hat.internal.model.JavaThing): int
                  }
                  abstract class JavaHeapObject extends com.sun.tools.hat.internal.model.JavaThing {
                      public constructor()
                      public getClazz(): com.sun.tools.hat.internal.model.JavaClass
                      public getSize(): int
                      public getId(): long
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      setupReferers(): void
                      public getIdString(): java.lang.String
                      toString<T>(...args: any[]): any
                      public getAllocatedFrom(): com.sun.tools.hat.internal.model.StackTrace
                      public isNew(): boolean
                      setNew(arg0: boolean): void
                      public visitReferencedObjects(arg0: com.sun.tools.hat.internal.model.JavaHeapObjectVisitor): void
                      addReferenceFrom(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      addReferenceFromRoot(arg0: com.sun.tools.hat.internal.model.Root): void
                      public getRoot(): com.sun.tools.hat.internal.model.Root
                      public getReferers(): java.util.Enumeration
                      public refersOnlyWeaklyTo(arg0: com.sun.tools.hat.internal.model.Snapshot, arg1: com.sun.tools.hat.internal.model.JavaThing): boolean
                      public describeReferenceTo(arg0: com.sun.tools.hat.internal.model.JavaThing, arg1: com.sun.tools.hat.internal.model.Snapshot): java.lang.String
                      public isHeapAllocated(): boolean
                      static access$000(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): com.sun.tools.hat.internal.model.JavaThing[]
                  }
                  class JavaHeapObject$1 implements java.util.Enumeration {
                      this$0: com.sun.tools.hat.internal.model.JavaHeapObject
                      constructor(arg0: com.sun.tools.hat.internal.model.JavaHeapObject)
                      public hasMoreElements(): boolean
                      public nextElement(): java.lang.Object
                  }
                  abstract class JavaLazyReadObject extends com.sun.tools.hat.internal.model.JavaHeapObject {
                      protected constructor(arg0: long)
                      public getSize(): int
                      protected getOffset(): long
                      protected getValueLength(): int
                      protected getValue(): byte[]
                      public getId(): long
                      protected readValueLength(): int
                      protected readValue(): byte[]
                      protected static makeId(arg0: long): java.lang.Number
                      protected static getIdValue(arg0: java.lang.Number): long
                      protected objectIdAt(arg0: int, arg1: byte[]): long
                      protected static byteAt(arg0: int, arg1: byte[]): byte
                      protected static booleanAt(arg0: int, arg1: byte[]): boolean
                      protected static charAt(arg0: int, arg1: byte[]): char
                      protected static shortAt(arg0: int, arg1: byte[]): short
                      protected static intAt(arg0: int, arg1: byte[]): int
                      protected static longAt(arg0: int, arg1: byte[]): long
                      protected static floatAt(arg0: int, arg1: byte[]): float
                      protected static doubleAt(arg0: int, arg1: byte[]): double
                  }
                  class JavaObject extends com.sun.tools.hat.internal.model.JavaLazyReadObject {
                      public constructor(arg0: long, arg1: long)
                      public resolve(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public isSameTypeAs(arg0: com.sun.tools.hat.internal.model.JavaThing): boolean
                      public getClazz(): com.sun.tools.hat.internal.model.JavaClass
                      public getFields(): com.sun.tools.hat.internal.model.JavaThing[]
                      public getField(arg0: java.lang.String): com.sun.tools.hat.internal.model.JavaThing
                      public compareTo(arg0: com.sun.tools.hat.internal.model.JavaThing): int
                      public visitReferencedObjects(arg0: com.sun.tools.hat.internal.model.JavaHeapObjectVisitor): void
                      public refersOnlyWeaklyTo(arg0: com.sun.tools.hat.internal.model.Snapshot, arg1: com.sun.tools.hat.internal.model.JavaThing): boolean
                      public describeReferenceTo(arg0: com.sun.tools.hat.internal.model.JavaThing, arg1: com.sun.tools.hat.internal.model.Snapshot): java.lang.String
                      toString<T>(...args: any[]): any
                      protected readValueLength(): int
                      protected readValue(): byte[]
                  }
                  class Snapshot {
                      public static SMALL_ID_MASK: long
                      public static EMPTY_BYTE_ARRAY: byte[]
                      public constructor(arg0: com.sun.tools.hat.internal.parser.ReadBuffer)
                      public setSiteTrace(arg0: com.sun.tools.hat.internal.model.JavaHeapObject, arg1: com.sun.tools.hat.internal.model.StackTrace): void
                      public getSiteTrace(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): com.sun.tools.hat.internal.model.StackTrace
                      public setNewStyleArrayClass(arg0: boolean): void
                      public isNewStyleArrayClass(): boolean
                      public setIdentifierSize(arg0: int): void
                      public getIdentifierSize(): int
                      public getMinimumObjectSize(): int
                      public addHeapObject(arg0: long, arg1: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      public addRoot(arg0: com.sun.tools.hat.internal.model.Root): void
                      public addClass(arg0: long, arg1: com.sun.tools.hat.internal.model.JavaClass): void
                      addFakeInstanceClass(arg0: long, arg1: int): com.sun.tools.hat.internal.model.JavaClass
                      public getHasNewSet(): boolean
                      public resolve(arg0: boolean): void
                      public markNewRelativeTo(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public getThings(): java.util.Enumeration<com.sun.tools.hat.internal.model.JavaHeapObject>
                      findThing<T>(...args: any[]): any
                      public findClass(arg0: java.lang.String): com.sun.tools.hat.internal.model.JavaClass
                      public getClasses(): java.util.Iterator
                      public getClassesArray(): com.sun.tools.hat.internal.model.JavaClass[]
                      public getFinalizerObjects(): java.util.Enumeration
                      public getRoots(): java.util.Enumeration<com.sun.tools.hat.internal.model.Root>
                      public getRootsArray(): com.sun.tools.hat.internal.model.Root[]
                      public getRootAt(arg0: int): com.sun.tools.hat.internal.model.Root
                      public rootsetReferencesTo(arg0: com.sun.tools.hat.internal.model.JavaHeapObject, arg1: boolean): com.sun.tools.hat.internal.model.ReferenceChain[]
                      public getUnresolvedObjectsOK(): boolean
                      public setUnresolvedObjectsOK(arg0: boolean): void
                      public getWeakReferenceClass(): com.sun.tools.hat.internal.model.JavaClass
                      public getReferentFieldIndex(): int
                      public getNullThing(): com.sun.tools.hat.internal.model.JavaThing
                      public setReachableExcludes(arg0: com.sun.tools.hat.internal.model.ReachableExcludes): void
                      public getReachableExcludes(): com.sun.tools.hat.internal.model.ReachableExcludes
                      addReferenceFromRoot(arg0: com.sun.tools.hat.internal.model.Root, arg1: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      getRoot(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): com.sun.tools.hat.internal.model.Root
                      getJavaLangClass(): com.sun.tools.hat.internal.model.JavaClass
                      getJavaLangString(): com.sun.tools.hat.internal.model.JavaClass
                      getJavaLangClassLoader(): com.sun.tools.hat.internal.model.JavaClass
                      getOtherArrayType(): com.sun.tools.hat.internal.model.JavaClass
                      getArrayClass(arg0: java.lang.String): com.sun.tools.hat.internal.model.JavaClass
                      getReadBuffer(): com.sun.tools.hat.internal.parser.ReadBuffer
                      setNew(arg0: com.sun.tools.hat.internal.model.JavaHeapObject, arg1: boolean): void
                      isNew(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): boolean
                  }
                  class Snapshot$1 {
                  }
                  class Snapshot$MyVisitor extends com.sun.tools.hat.internal.model.AbstractJavaHeapObjectVisitor {
                      t: com.sun.tools.hat.internal.model.JavaHeapObject
                      public visit(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                      constructor(arg0: com.sun.tools.hat.internal.model.Snapshot$1)
                  }

               }
               namespace server {
                  class AllClassesQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      excludePlatform: boolean
                      oqlSupported: boolean
                      public constructor(arg0: boolean, arg1: boolean)
                      public run(): void
                  }
                  class AllRootsQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class AllRootsQuery$1 extends com.sun.tools.hat.internal.util.Comparer {
                      this$0: com.sun.tools.hat.internal.server.AllRootsQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.AllRootsQuery)
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class FinalizerObjectsQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class FinalizerSummaryQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class FinalizerSummaryQuery$1 implements java.util.Comparator<com.sun.tools.hat.internal.server.FinalizerSummaryQuery$HistogramElement> {
                      this$0: com.sun.tools.hat.internal.server.FinalizerSummaryQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.FinalizerSummaryQuery)
                      compare<T>(...args: any[]): any
                  }
                  class FinalizerSummaryQuery$HistogramElement {
                      public constructor(arg0: com.sun.tools.hat.internal.model.JavaClass)
                      public updateCount(): void
                      public compare(arg0: com.sun.tools.hat.internal.server.FinalizerSummaryQuery$HistogramElement): int
                      public getClazz(): com.sun.tools.hat.internal.model.JavaClass
                      public getCount(): long
                  }
                  class HistogramQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class HistogramQuery$3 implements java.util.Comparator<com.sun.tools.hat.internal.model.JavaClass> {
                      this$0: com.sun.tools.hat.internal.server.HistogramQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.HistogramQuery)
                      compare<T>(...args: any[]): any
                  }
                  class HistogramQuery$2 implements java.util.Comparator<com.sun.tools.hat.internal.model.JavaClass> {
                      this$0: com.sun.tools.hat.internal.server.HistogramQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.HistogramQuery)
                      compare<T>(...args: any[]): any
                  }
                  class HistogramQuery$1 implements java.util.Comparator<com.sun.tools.hat.internal.model.JavaClass> {
                      this$0: com.sun.tools.hat.internal.server.HistogramQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.HistogramQuery)
                      compare<T>(...args: any[]): any
                  }
                  class HttpReader implements java.lang.Runnable {
                      public constructor(arg0: java.net.Socket, arg1: com.sun.tools.hat.internal.model.Snapshot, arg2: com.sun.tools.hat.internal.oql.OQLEngine)
                      public run(): void
                  }
                  class InstancesCountQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor(arg0: boolean)
                      public run(): void
                  }
                  class InstancesCountQuery$1 extends com.sun.tools.hat.internal.util.Comparer {
                      this$0: com.sun.tools.hat.internal.server.InstancesCountQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.InstancesCountQuery)
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class InstancesQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      constructor(...args: any[])
                      public run(): void
                  }
                  class OQLHelp extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class OQLQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor(arg0: com.sun.tools.hat.internal.oql.OQLEngine)
                      public run(): void
                      static access$000(arg0: com.sun.tools.hat.internal.server.OQLQuery): com.sun.tools.hat.internal.oql.OQLEngine
                  }
                  class OQLQuery$1 implements com.sun.tools.hat.internal.oql.ObjectVisitor {
                      this$0: com.sun.tools.hat.internal.server.OQLQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.OQLQuery)
                      public visit(arg0: java.lang.Object): boolean
                  }
                  class ClassQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                      protected printFullClass(arg0: com.sun.tools.hat.internal.model.JavaClass): void
                      protected printReferencesTo(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                  }
                  class ClassQuery$1 extends com.sun.tools.hat.internal.util.Comparer {
                      this$0: com.sun.tools.hat.internal.server.ClassQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.ClassQuery)
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class ObjectQuery extends com.sun.tools.hat.internal.server.ClassQuery {
                      public constructor()
                      public run(): void
                  }
                  class ObjectQuery$1 extends com.sun.tools.hat.internal.util.Comparer {
                      val$fields: com.sun.tools.hat.internal.model.JavaField[]
                      this$0: com.sun.tools.hat.internal.server.ObjectQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.ObjectQuery, arg1: com.sun.tools.hat.internal.model.JavaField[])
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class PlatformClasses {
                      static names: java.lang.String[]
                      public constructor()
                      public static getNames(): java.lang.String[]
                      public static isPlatformClass(arg0: com.sun.tools.hat.internal.model.JavaClass): boolean
                  }
                  class QueryListener implements java.lang.Runnable {
                      public constructor(arg0: int)
                      public setModel(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      public run(): void
                  }
                  class ReachableQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class RefsByTypeQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  class RefsByTypeQuery$2 implements java.util.Comparator<com.sun.tools.hat.internal.model.JavaClass> {
                      val$map: java.util.Map
                      this$0: com.sun.tools.hat.internal.server.RefsByTypeQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.RefsByTypeQuery, arg1: java.util.Map)
                      compare<T>(...args: any[]): any
                  }
                  class RefsByTypeQuery$1 extends com.sun.tools.hat.internal.model.AbstractJavaHeapObjectVisitor {
                      val$refereesStat: java.util.Map
                      this$0: com.sun.tools.hat.internal.server.RefsByTypeQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.RefsByTypeQuery, arg1: java.util.Map)
                      public visit(arg0: com.sun.tools.hat.internal.model.JavaHeapObject): void
                  }
                  class RootStackQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor()
                      public run(): void
                  }
                  abstract class QueryHandler {
                      protected urlStart: java.lang.String
                      protected query: java.lang.String
                      protected out: java.io.PrintWriter
                      protected snapshot: com.sun.tools.hat.internal.model.Snapshot
                      constructor()
                      run(): void
                      setUrlStart(arg0: java.lang.String): void
                      setQuery(arg0: java.lang.String): void
                      setOutput(arg0: java.io.PrintWriter): void
                      setSnapshot(arg0: com.sun.tools.hat.internal.model.Snapshot): void
                      encodeForURL<T>(...args: any[]): any
                      protected startHtml(arg0: java.lang.String): void
                      protected endHtml(): void
                      protected error(arg0: java.lang.String): void
                      protected printAnchorStart(): void
                      protected printThingAnchorTag(arg0: long): void
                      protected printObject(arg0: com.sun.tools.hat.internal.model.JavaObject): void
                      protected printThing(arg0: com.sun.tools.hat.internal.model.JavaThing): void
                      protected printRoot(arg0: com.sun.tools.hat.internal.model.Root): void
                      protected printClass(arg0: com.sun.tools.hat.internal.model.JavaClass): void
                      protected printField(arg0: com.sun.tools.hat.internal.model.JavaField): void
                      protected printStatic(arg0: com.sun.tools.hat.internal.model.JavaStatic): void
                      protected printStackTrace(arg0: com.sun.tools.hat.internal.model.StackTrace): void
                      protected printException(arg0: java.lang.Throwable): void
                      protected printHex(arg0: long): void
                      protected parseHex(arg0: java.lang.String): long
                      protected print(arg0: java.lang.String): void
                      protected println(arg0: java.lang.String): void
                  }
                  class RootsQuery extends com.sun.tools.hat.internal.server.QueryHandler {
                      public constructor(arg0: boolean)
                      public run(): void
                  }
                  class RootsQuery$1 extends com.sun.tools.hat.internal.util.Comparer {
                      this$0: com.sun.tools.hat.internal.server.RootsQuery
                      constructor(arg0: com.sun.tools.hat.internal.server.RootsQuery)
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }

               }
               namespace util {
                  class ArraySorter {
                      public constructor()
                      public static sort(arg0: java.lang.Object[], arg1: com.sun.tools.hat.internal.util.Comparer): void
                      public static sortArrayOfStrings(arg0: java.lang.Object[]): void
                  }
                  class ArraySorter$1 extends com.sun.tools.hat.internal.util.Comparer {
                      constructor()
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class CompositeEnumeration implements java.util.Enumeration {
                      e1: java.util.Enumeration
                      e2: java.util.Enumeration
                      public constructor(arg0: java.util.Enumeration, arg1: java.util.Enumeration)
                      public hasMoreElements(): boolean
                      public nextElement(): java.lang.Object
                  }
                  class Misc {
                      public constructor()
                      toHex<T>(...args: any[]): any
                      public static parseHex(arg0: java.lang.String): long
                      public static encodeHtml(arg0: java.lang.String): java.lang.String
                  }
                  abstract class Comparer {
                      public constructor()
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }
                  class VectorSorter {
                      public constructor()
                      public static sort(arg0: java.util.Vector<java.lang.Object>, arg1: com.sun.tools.hat.internal.util.Comparer): void
                      public static sortVectorOfStrings(arg0: java.util.Vector<java.lang.Object>): void
                  }
                  class VectorSorter$1 extends com.sun.tools.hat.internal.util.Comparer {
                      constructor()
                      public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                  }

               }

            }

         }
         namespace javac {
            namespace code {
               class BoundKind extends java.lang.Enum<com.sun.tools.javac.code.BoundKind> {
                   public static EXTENDS: com.sun.tools.javac.code.BoundKind
                   public static SUPER: com.sun.tools.javac.code.BoundKind
                   public static UNBOUND: com.sun.tools.javac.code.BoundKind
                   public static values(): com.sun.tools.javac.code.BoundKind[]
                   valueOf<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }
               class Flags$Flag extends java.lang.Enum<com.sun.tools.javac.code.Flags$Flag> {
                   public static PUBLIC: com.sun.tools.javac.code.Flags$Flag
                   public static PRIVATE: com.sun.tools.javac.code.Flags$Flag
                   public static PROTECTED: com.sun.tools.javac.code.Flags$Flag
                   public static STATIC: com.sun.tools.javac.code.Flags$Flag
                   public static FINAL: com.sun.tools.javac.code.Flags$Flag
                   public static SYNCHRONIZED: com.sun.tools.javac.code.Flags$Flag
                   public static VOLATILE: com.sun.tools.javac.code.Flags$Flag
                   public static TRANSIENT: com.sun.tools.javac.code.Flags$Flag
                   public static NATIVE: com.sun.tools.javac.code.Flags$Flag
                   public static INTERFACE: com.sun.tools.javac.code.Flags$Flag
                   public static ABSTRACT: com.sun.tools.javac.code.Flags$Flag
                   public static DEFAULT: com.sun.tools.javac.code.Flags$Flag
                   public static STRICTFP: com.sun.tools.javac.code.Flags$Flag
                   public static BRIDGE: com.sun.tools.javac.code.Flags$Flag
                   public static SYNTHETIC: com.sun.tools.javac.code.Flags$Flag
                   public static ANNOTATION: com.sun.tools.javac.code.Flags$Flag
                   public static DEPRECATED: com.sun.tools.javac.code.Flags$Flag
                   public static HASINIT: com.sun.tools.javac.code.Flags$Flag
                   public static BLOCK: com.sun.tools.javac.code.Flags$Flag
                   public static ENUM: com.sun.tools.javac.code.Flags$Flag
                   public static MANDATED: com.sun.tools.javac.code.Flags$Flag
                   public static IPROXY: com.sun.tools.javac.code.Flags$Flag
                   public static NOOUTERTHIS: com.sun.tools.javac.code.Flags$Flag
                   public static EXISTS: com.sun.tools.javac.code.Flags$Flag
                   public static COMPOUND: com.sun.tools.javac.code.Flags$Flag
                   public static CLASS_SEEN: com.sun.tools.javac.code.Flags$Flag
                   public static SOURCE_SEEN: com.sun.tools.javac.code.Flags$Flag
                   public static LOCKED: com.sun.tools.javac.code.Flags$Flag
                   public static UNATTRIBUTED: com.sun.tools.javac.code.Flags$Flag
                   public static ANONCONSTR: com.sun.tools.javac.code.Flags$Flag
                   public static ACYCLIC: com.sun.tools.javac.code.Flags$Flag
                   public static PARAMETER: com.sun.tools.javac.code.Flags$Flag
                   public static VARARGS: com.sun.tools.javac.code.Flags$Flag
                   public static ACYCLIC_ANN: com.sun.tools.javac.code.Flags$Flag
                   public static GENERATEDCONSTR: com.sun.tools.javac.code.Flags$Flag
                   public static HYPOTHETICAL: com.sun.tools.javac.code.Flags$Flag
                   public static PROPRIETARY: com.sun.tools.javac.code.Flags$Flag
                   public static UNION: com.sun.tools.javac.code.Flags$Flag
                   public static OVERRIDE_BRIDGE: com.sun.tools.javac.code.Flags$Flag
                   public static EFFECTIVELY_FINAL: com.sun.tools.javac.code.Flags$Flag
                   public static CLASH: com.sun.tools.javac.code.Flags$Flag
                   public static AUXILIARY: com.sun.tools.javac.code.Flags$Flag
                   public static NOT_IN_PROFILE: com.sun.tools.javac.code.Flags$Flag
                   public static BAD_OVERRIDE: com.sun.tools.javac.code.Flags$Flag
                   public static SIGNATURE_POLYMORPHIC: com.sun.tools.javac.code.Flags$Flag
                   public static THROWS: com.sun.tools.javac.code.Flags$Flag
                   public static LAMBDA_METHOD: com.sun.tools.javac.code.Flags$Flag
                   public static TYPE_TRANSLATED: com.sun.tools.javac.code.Flags$Flag
                   value: long
                   lowercaseName: java.lang.String
                   public static values(): com.sun.tools.javac.code.Flags$Flag[]
                   valueOf<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }
               class Flags {
                   public static PUBLIC: int
                   public static PRIVATE: int
                   public static PROTECTED: int
                   public static STATIC: int
                   public static FINAL: int
                   public static SYNCHRONIZED: int
                   public static VOLATILE: int
                   public static TRANSIENT: int
                   public static NATIVE: int
                   public static INTERFACE: int
                   public static ABSTRACT: int
                   public static STRICTFP: int
                   public static SYNTHETIC: int
                   public static ANNOTATION: int
                   public static ENUM: int
                   public static MANDATED: int
                   public static StandardFlags: int
                   public static ACC_SUPER: int
                   public static ACC_BRIDGE: int
                   public static ACC_VARARGS: int
                   public static DEPRECATED: int
                   public static HASINIT: int
                   public static BLOCK: int
                   public static IPROXY: int
                   public static NOOUTERTHIS: int
                   public static EXISTS: int
                   public static COMPOUND: int
                   public static CLASS_SEEN: int
                   public static SOURCE_SEEN: int
                   public static LOCKED: int
                   public static UNATTRIBUTED: int
                   public static ANONCONSTR: int
                   public static ACYCLIC: int
                   public static BRIDGE: long
                   public static PARAMETER: long
                   public static VARARGS: long
                   public static ACYCLIC_ANN: long
                   public static GENERATEDCONSTR: long
                   public static HYPOTHETICAL: long
                   public static PROPRIETARY: long
                   public static UNION: long
                   public static OVERRIDE_BRIDGE: long
                   public static EFFECTIVELY_FINAL: long
                   public static CLASH: long
                   public static DEFAULT: long
                   public static AUXILIARY: long
                   public static NOT_IN_PROFILE: long
                   public static BAD_OVERRIDE: long
                   public static SIGNATURE_POLYMORPHIC: long
                   public static THROWS: long
                   public static POTENTIALLY_AMBIGUOUS: long
                   public static LAMBDA_METHOD: long
                   public static TYPE_TRANSLATED: long
                   public static AccessFlags: int
                   public static LocalClassFlags: int
                   public static MemberClassFlags: int
                   public static ClassFlags: int
                   public static InterfaceVarFlags: int
                   public static VarFlags: int
                   public static ConstructorFlags: int
                   public static InterfaceMethodFlags: int
                   public static MethodFlags: int
                   public static ExtendedStandardFlags: long
                   public static ModifierFlags: long
                   public static InterfaceMethodMask: long
                   public static AnnotationTypeElementMask: long
                   public static LocalVarFlags: long
                   public static ReceiverParamFlags: long
                   toString<T>(...args: any[]): any
                   public static asFlagSet(arg0: long): java.util.EnumSet<com.sun.tools.javac.code.Flags$Flag>
                   public static asModifierSet(arg0: long): java.util.Set<javax.lang.model.element.Modifier>
                   public static isStatic(arg0: com.sun.tools.javac.code.Symbol): boolean
                   public static isEnum(arg0: com.sun.tools.javac.code.Symbol): boolean
                   public static isConstant(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): boolean
               }
               class TypeTag$NumericClasses {
                   public static BYTE_CLASS: int
                   public static CHAR_CLASS: int
                   public static SHORT_CLASS: int
                   public static INT_CLASS: int
                   public static LONG_CLASS: int
                   public static FLOAT_CLASS: int
                   public static DOUBLE_CLASS: int
                   static BYTE_SUPERCLASSES: int
                   static CHAR_SUPERCLASSES: int
                   static SHORT_SUPERCLASSES: int
                   static INT_SUPERCLASSES: int
                   static LONG_SUPERCLASSES: int
                   static FLOAT_SUPERCLASSES: int
                   public constructor()
               }
               class TypeTag$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class TypeTag extends java.lang.Enum<com.sun.tools.javac.code.TypeTag> {
                   public static BYTE: com.sun.tools.javac.code.TypeTag
                   public static CHAR: com.sun.tools.javac.code.TypeTag
                   public static SHORT: com.sun.tools.javac.code.TypeTag
                   public static LONG: com.sun.tools.javac.code.TypeTag
                   public static FLOAT: com.sun.tools.javac.code.TypeTag
                   public static INT: com.sun.tools.javac.code.TypeTag
                   public static DOUBLE: com.sun.tools.javac.code.TypeTag
                   public static BOOLEAN: com.sun.tools.javac.code.TypeTag
                   public static VOID: com.sun.tools.javac.code.TypeTag
                   public static CLASS: com.sun.tools.javac.code.TypeTag
                   public static ARRAY: com.sun.tools.javac.code.TypeTag
                   public static METHOD: com.sun.tools.javac.code.TypeTag
                   public static PACKAGE: com.sun.tools.javac.code.TypeTag
                   public static TYPEVAR: com.sun.tools.javac.code.TypeTag
                   public static WILDCARD: com.sun.tools.javac.code.TypeTag
                   public static FORALL: com.sun.tools.javac.code.TypeTag
                   public static DEFERRED: com.sun.tools.javac.code.TypeTag
                   public static BOT: com.sun.tools.javac.code.TypeTag
                   public static NONE: com.sun.tools.javac.code.TypeTag
                   public static ERROR: com.sun.tools.javac.code.TypeTag
                   public static UNKNOWN: com.sun.tools.javac.code.TypeTag
                   public static UNDETVAR: com.sun.tools.javac.code.TypeTag
                   public static UNINITIALIZED_THIS: com.sun.tools.javac.code.TypeTag
                   public static UNINITIALIZED_OBJECT: com.sun.tools.javac.code.TypeTag
                   superClasses: int
                   numericClass: int
                   isPrimitive: boolean
                   public static values(): com.sun.tools.javac.code.TypeTag[]
                   valueOf<T>(...args: any[]): any
                   public isStrictSubRangeOf(arg0: com.sun.tools.javac.code.TypeTag): boolean
                   public isSubRangeOf(arg0: com.sun.tools.javac.code.TypeTag): boolean
                   public static getTypeTagCount(): int
                   public getKindLiteral(): com.sun.source.tree.Tree$Kind
                   public getPrimitiveTypeKind(): javax.lang.model.type.TypeKind
               }
               class Kinds$KindName extends java.lang.Enum<com.sun.tools.javac.code.Kinds$KindName> implements com.sun.tools.javac.api.Formattable {
                   public static ANNOTATION: com.sun.tools.javac.code.Kinds$KindName
                   public static CONSTRUCTOR: com.sun.tools.javac.code.Kinds$KindName
                   public static INTERFACE: com.sun.tools.javac.code.Kinds$KindName
                   public static ENUM: com.sun.tools.javac.code.Kinds$KindName
                   public static STATIC: com.sun.tools.javac.code.Kinds$KindName
                   public static TYPEVAR: com.sun.tools.javac.code.Kinds$KindName
                   public static BOUND: com.sun.tools.javac.code.Kinds$KindName
                   public static VAR: com.sun.tools.javac.code.Kinds$KindName
                   public static VAL: com.sun.tools.javac.code.Kinds$KindName
                   public static METHOD: com.sun.tools.javac.code.Kinds$KindName
                   public static CLASS: com.sun.tools.javac.code.Kinds$KindName
                   public static STATIC_INIT: com.sun.tools.javac.code.Kinds$KindName
                   public static INSTANCE_INIT: com.sun.tools.javac.code.Kinds$KindName
                   public static PACKAGE: com.sun.tools.javac.code.Kinds$KindName
                   public static values(): com.sun.tools.javac.code.Kinds$KindName[]
                   valueOf<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public getKind(): java.lang.String
               }
               class Kinds$1 {
                   static $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode: int[]
                   static $SwitchMap$javax$lang$model$element$ElementKind: int[]
               }
               class Kinds {
                   public static NIL: int
                   public static PCK: int
                   public static TYP: int
                   public static VAR: int
                   public static VAL: int
                   public static MTH: int
                   public static POLY: int
                   public static ERR: int
                   public static AllKinds: int
                   public static ERRONEOUS: int
                   public static AMBIGUOUS: int
                   public static HIDDEN: int
                   public static STATICERR: int
                   public static MISSING_ENCL: int
                   public static ABSENT_VAR: int
                   public static WRONG_MTHS: int
                   public static WRONG_MTH: int
                   public static ABSENT_MTH: int
                   public static ABSENT_TYP: int
                   public static WRONG_STATICNESS: int
                   kindName<T>(...args: any[]): any
                   public static kindNames(arg0: int): java.util.EnumSet<com.sun.tools.javac.code.Kinds$KindName>
                   public static typeKindName(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Kinds$KindName
                   public static absentKind(arg0: int): com.sun.tools.javac.code.Kinds$KindName
               }
               class Type$1 extends com.sun.tools.javac.code.Type$JCNoType {
                   constructor()
                   toString<T>(...args: any[]): any
               }
               class Type$2 extends com.sun.tools.javac.code.Type$JCNoType {
                   constructor()
                   toString<T>(...args: any[]): any
               }
               class Type$3 extends com.sun.tools.javac.code.Type$JCNoType {
                   constructor()
                   toString<T>(...args: any[]): any
               }
               abstract class Type$Mapping {
                   public constructor(arg0: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   toString<T>(...args: any[]): any
               }
               class Type$JCPrimitiveType$1 extends com.sun.tools.javac.code.Type$JCPrimitiveType {
                   val$value: java.lang.Object
                   this$0: com.sun.tools.javac.code.Type$JCPrimitiveType
                   constructor(arg0: com.sun.tools.javac.code.Type$JCPrimitiveType, arg1: com.sun.tools.javac.code.TypeTag, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol, arg3: java.lang.Object)
                   public constValue(): java.lang.Object
                   public baseType(): com.sun.tools.javac.code.Type
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$JCPrimitiveType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.PrimitiveType {
                   tag: com.sun.tools.javac.code.TypeTag
                   public constructor(arg0: com.sun.tools.javac.code.TypeTag, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public isNumeric(): boolean
                   public isPrimitive(): boolean
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public isPrimitiveOrVoid(): boolean
                   public constType(arg0: java.lang.Object): com.sun.tools.javac.code.Type
                   public stringValue(): java.lang.String
                   public isFalse(): boolean
                   public isTrue(): boolean
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
                   public getKind(): javax.lang.model.type.TypeKind
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$WildcardType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.WildcardType {
                   public type: com.sun.tools.javac.code.Type
                   public kind: com.sun.tools.javac.code.BoundKind
                   public bound: com.sun.tools.javac.code.Type$TypeVar
                   isPrintingBound: boolean
                   accept<T>(...args: any[]): any
                   constructor(...args: any[])
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public contains(arg0: com.sun.tools.javac.code.Type): boolean
                   public isSuperBound(): boolean
                   public isExtendsBound(): boolean
                   public isUnbound(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   public withTypeVar(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   toString<T>(...args: any[]): any
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   getExtendsBound<T>(...args: any[]): any
                   getSuperBound<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$ClassType$1 extends com.sun.tools.javac.code.Type$ClassType {
                   val$value: java.lang.Object
                   this$0: com.sun.tools.javac.code.Type$ClassType
                   constructor(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol, arg4: java.lang.Object)
                   public constValue(): java.lang.Object
                   public baseType(): com.sun.tools.javac.code.Type
                   public getTypeArguments(): java.util.List
                   public getEnclosingType(): javax.lang.model.type.TypeMirror
                   public asElement(): javax.lang.model.element.Element
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$ClassType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.DeclaredType {
                   public typarams_field: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public allparams_field: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public supertype_field: com.sun.tools.javac.code.Type
                   public interfaces_field: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public all_interfaces_field: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   rank_field: int
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   accept<T>(...args: any[]): any
                   public constType(arg0: java.lang.Object): com.sun.tools.javac.code.Type
                   toString<T>(...args: any[]): any
                   getTypeArguments<T>(...args: any[]): any
                   public hasErasedSupertypes(): boolean
                   getEnclosingType<T>(...args: any[]): any
                   public setEnclosingType(arg0: com.sun.tools.javac.code.Type): void
                   public allparams(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isErroneous(): boolean
                   public isParameterized(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   public isRaw(): boolean
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   public contains(arg0: com.sun.tools.javac.code.Type): boolean
                   public complete(): void
                   public getKind(): javax.lang.model.type.TypeKind
                   public getAnnotationMirrors(): java.util.List
                   public asElement(): javax.lang.model.element.Element
                   static access$000(arg0: com.sun.tools.javac.code.Type$ClassType): com.sun.tools.javac.code.Type
               }
               class Type$ErasedClassType extends com.sun.tools.javac.code.Type$ClassType {
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public hasErasedSupertypes(): boolean
               }
               class Type$UnionClassType extends com.sun.tools.javac.code.Type$ClassType implements javax.lang.model.type.UnionType {
                   alternatives_field: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public constructor(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>)
                   public getLub(): com.sun.tools.javac.code.Type
                   public getAlternatives(): java.util.List<javax.lang.model.type.TypeMirror>
                   public isUnion(): boolean
                   public getKind(): javax.lang.model.type.TypeKind
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
               }
               class Type$IntersectionClassType extends com.sun.tools.javac.code.Type$ClassType implements javax.lang.model.type.IntersectionType {
                   public allInterfaces: boolean
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: boolean)
                   public getBounds(): java.util.List<javax.lang.model.type.TypeMirror>
                   public getComponents(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isIntersection(): boolean
                   public getExplicitComponents(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getKind(): javax.lang.model.type.TypeKind
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
               }
               class Type$ArrayType$1 extends com.sun.tools.javac.code.Type$ArrayType {
                   this$0: com.sun.tools.javac.code.Type$ArrayType
                   constructor(arg0: com.sun.tools.javac.code.Type$ArrayType, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public isVarargs(): boolean
                   public getComponentType(): javax.lang.model.type.TypeMirror
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$ArrayType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.ArrayType {
                   public elemtype: com.sun.tools.javac.code.Type
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   public isVarargs(): boolean
                   public allparams(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isErroneous(): boolean
                   public isParameterized(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   public isRaw(): boolean
                   public makeVarargs(): com.sun.tools.javac.code.Type$ArrayType
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   public contains(arg0: com.sun.tools.javac.code.Type): boolean
                   public complete(): void
                   getComponentType<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$MethodType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.ExecutableType {
                   public argtypes: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public restype: com.sun.tools.javac.code.Type
                   public thrown: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public recvtype: com.sun.tools.javac.code.Type
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   getParameterTypes<T>(...args: any[]): any
                   getReturnType<T>(...args: any[]): any
                   getReceiverType<T>(...args: any[]): any
                   getThrownTypes<T>(...args: any[]): any
                   public isErroneous(): boolean
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   public contains(arg0: com.sun.tools.javac.code.Type): boolean
                   public asMethodType(): com.sun.tools.javac.code.Type$MethodType
                   public complete(): void
                   getTypeVariables<T>(...args: any[]): any
                   public asElement(): com.sun.tools.javac.code.Symbol$TypeSymbol
                   public getKind(): javax.lang.model.type.TypeKind
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$PackageType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.NoType {
                   constructor(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$TypeVar extends com.sun.tools.javac.code.Type implements javax.lang.model.type.TypeVariable {
                   public bound: com.sun.tools.javac.code.Type
                   public lower: com.sun.tools.javac.code.Type
                   rank_field: int
                   constructor(...args: any[])
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   accept<T>(...args: any[]): any
                   getUpperBound<T>(...args: any[]): any
                   getLowerBound<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public isCaptured(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   public getAnnotationMirrors(): java.util.List
                   public asElement(): javax.lang.model.element.Element
               }
               class Type$CapturedType extends com.sun.tools.javac.code.Type$TypeVar {
                   public wildcard: com.sun.tools.javac.code.Type$WildcardType
                   public constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Type$WildcardType)
                   public accept<R, S>(arg0: com.sun.tools.javac.code.Type$Visitor<R, S>, arg1: S): R
                   public isCaptured(): boolean
                   toString<T>(...args: any[]): any
               }
               abstract class Type$DelegatedType extends com.sun.tools.javac.code.Type {
                   public qtype: com.sun.tools.javac.code.Type
                   public tag: com.sun.tools.javac.code.TypeTag
                   public constructor(arg0: com.sun.tools.javac.code.TypeTag, arg1: com.sun.tools.javac.code.Type)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   toString<T>(...args: any[]): any
                   public getTypeArguments(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getEnclosingType(): com.sun.tools.javac.code.Type
                   public getParameterTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getReturnType(): com.sun.tools.javac.code.Type
                   public getReceiverType(): com.sun.tools.javac.code.Type
                   public getThrownTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public allparams(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getUpperBound(): com.sun.tools.javac.code.Type
                   public isErroneous(): boolean
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$ForAll extends com.sun.tools.javac.code.Type$DelegatedType implements javax.lang.model.type.ExecutableType {
                   public tvars: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Type)
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public getTypeArguments(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isErroneous(): boolean
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   public contains(arg0: com.sun.tools.javac.code.Type): boolean
                   public asMethodType(): com.sun.tools.javac.code.Type$MethodType
                   public complete(): void
                   getTypeVariables<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public getThrownTypes(): java.util.List
                   public getReceiverType(): javax.lang.model.type.TypeMirror
                   public getParameterTypes(): java.util.List
                   public getReturnType(): javax.lang.model.type.TypeMirror
               }
               interface Type$UndetVar$UndetVarListener {
                   public varChanged(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: java.util.Set<com.sun.tools.javac.code.Type$UndetVar$InferenceBound>): void
               }
               class Type$UndetVar$InferenceBound$1 extends com.sun.tools.javac.code.Type$UndetVar$InferenceBound {
                   constructor(arg0: java.lang.String, arg1: int)
                   public complement(): com.sun.tools.javac.code.Type$UndetVar$InferenceBound
               }
               class Type$UndetVar$InferenceBound$2 extends com.sun.tools.javac.code.Type$UndetVar$InferenceBound {
                   constructor(arg0: java.lang.String, arg1: int)
                   public complement(): com.sun.tools.javac.code.Type$UndetVar$InferenceBound
               }
               class Type$UndetVar$InferenceBound$3 extends com.sun.tools.javac.code.Type$UndetVar$InferenceBound {
                   constructor(arg0: java.lang.String, arg1: int)
                   public complement(): com.sun.tools.javac.code.Type$UndetVar$InferenceBound
               }
               abstract class Type$UndetVar$InferenceBound extends java.lang.Enum<com.sun.tools.javac.code.Type$UndetVar$InferenceBound> {
                   public static UPPER: com.sun.tools.javac.code.Type$UndetVar$InferenceBound
                   public static LOWER: com.sun.tools.javac.code.Type$UndetVar$InferenceBound
                   public static EQ: com.sun.tools.javac.code.Type$UndetVar$InferenceBound
                   public static values(): com.sun.tools.javac.code.Type$UndetVar$InferenceBound[]
                   valueOf<T>(...args: any[]): any
                   public complement(): com.sun.tools.javac.code.Type$UndetVar$InferenceBound
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$1)
               }
               class Type$UndetVar$1 extends com.sun.tools.javac.code.Type$Mapping {
                   this$0: com.sun.tools.javac.code.Type$UndetVar
                   constructor(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Type$UndetVar$2 implements com.sun.tools.javac.code.Type$UndetVar$UndetVarListener {
                   val$boundsChanged: java.util.EnumSet
                   this$0: com.sun.tools.javac.code.Type$UndetVar
                   constructor(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: java.util.EnumSet)
                   public varChanged(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: java.util.Set<com.sun.tools.javac.code.Type$UndetVar$InferenceBound>): void
               }
               class Type$UndetVar extends com.sun.tools.javac.code.Type$DelegatedType {
                   protected bounds: java.util.Map<com.sun.tools.javac.code.Type$UndetVar$InferenceBound, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>>
                   public inst: com.sun.tools.javac.code.Type
                   public declaredCount: int
                   public listener: com.sun.tools.javac.code.Type$UndetVar$UndetVarListener
                   toTypeVarMap: com.sun.tools.javac.code.Type$Mapping
                   public accept<R, S>(arg0: com.sun.tools.javac.code.Type$Visitor<R, S>, arg1: S): R
                   public constructor(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: com.sun.tools.javac.code.Types)
                   toString<T>(...args: any[]): any
                   public debugString(): java.lang.String
                   public isPartial(): boolean
                   public baseType(): com.sun.tools.javac.code.Type
                   public getBounds(...arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound[]): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getDeclaredBounds(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public setBounds(arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): void
                   addBound<T>(...args: any[]): any
                   public substBounds(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.code.Types): void
                   public isCaptured(): boolean
               }
               class Type$CapturedUndetVar extends com.sun.tools.javac.code.Type$UndetVar {
                   public constructor(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: com.sun.tools.javac.code.Types)
                   public addBound(arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Types, arg3: boolean): void
                   public isCaptured(): boolean
               }
               class Type$JCNoType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.NoType {
                   public constructor()
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public getKind(): javax.lang.model.type.TypeKind
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
                   public isCompound(): boolean
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$JCVoidType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.NoType {
                   public constructor()
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public getKind(): javax.lang.model.type.TypeKind
                   public isCompound(): boolean
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
                   public isPrimitiveOrVoid(): boolean
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$BottomType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.NullType {
                   public constructor()
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public getKind(): javax.lang.model.type.TypeKind
                   public isCompound(): boolean
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
                   public constType(arg0: java.lang.Object): com.sun.tools.javac.code.Type
                   public stringValue(): java.lang.String
                   public isNullOrReference(): boolean
                   public getAnnotationMirrors(): java.util.List
               }
               class Type$ErrorType extends com.sun.tools.javac.code.Type$ClassType implements javax.lang.model.type.ErrorType {
                   constructor(...args: any[])
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public isPartial(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   accept<T>(...args: any[]): any
                   public constType(arg0: java.lang.Object): com.sun.tools.javac.code.Type
                   getEnclosingType<T>(...args: any[]): any
                   public getReturnType(): com.sun.tools.javac.code.Type
                   public asSub(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Type
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   public isGenType(arg0: com.sun.tools.javac.code.Type): boolean
                   public isErroneous(): boolean
                   public isCompound(): boolean
                   public isInterface(): boolean
                   public allparams(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   getTypeArguments<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public getOriginalType(): com.sun.tools.javac.code.Type
               }
               class Type$AnnotatedType extends com.sun.tools.javac.code.Type implements javax.lang.model.type.ArrayType , javax.lang.model.type.DeclaredType , javax.lang.model.type.PrimitiveType , javax.lang.model.type.TypeVariable , javax.lang.model.type.WildcardType {
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>, arg1: com.sun.tools.javac.code.Type)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public isAnnotated(): boolean
                   getAnnotationMirrors<T>(...args: any[]): any
                   public getKind(): javax.lang.model.type.TypeKind
                   public unannotatedType(): com.sun.tools.javac.code.Type
                   accept<T>(...args: any[]): any
                   public map(arg0: com.sun.tools.javac.code.Type$Mapping): com.sun.tools.javac.code.Type
                   public constType(arg0: java.lang.Object): com.sun.tools.javac.code.Type
                   getEnclosingType<T>(...args: any[]): any
                   public getReturnType(): com.sun.tools.javac.code.Type
                   getTypeArguments<T>(...args: any[]): any
                   public getParameterTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getReceiverType(): com.sun.tools.javac.code.Type
                   public getThrownTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   getUpperBound<T>(...args: any[]): any
                   getLowerBound<T>(...args: any[]): any
                   public isErroneous(): boolean
                   public isCompound(): boolean
                   public isInterface(): boolean
                   public allparams(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isPrimitive(): boolean
                   public isPrimitiveOrVoid(): boolean
                   public isNumeric(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   public isPartial(): boolean
                   public isParameterized(): boolean
                   public isRaw(): boolean
                   public isFinal(): boolean
                   public isSuperBound(): boolean
                   public isExtendsBound(): boolean
                   public isUnbound(): boolean
                   toString<T>(...args: any[]): any
                   public contains(arg0: com.sun.tools.javac.code.Type): boolean
                   public withTypeVar(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   asElement<T>(...args: any[]): any
                   public asMethodType(): com.sun.tools.javac.code.Type$MethodType
                   public complete(): void
                   public getComponentType(): javax.lang.model.type.TypeMirror
                   public makeVarargs(): com.sun.tools.javac.code.Type
                   public getExtendsBound(): javax.lang.model.type.TypeMirror
                   public getSuperBound(): javax.lang.model.type.TypeMirror
               }
               class Type$UnknownType extends com.sun.tools.javac.code.Type {
                   public constructor()
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
                   public isPartial(): boolean
                   public getAnnotationMirrors(): java.util.List
               }
               interface Type$Visitor<R, S> {
                   public visitClassType(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: S): R
                   public visitWildcardType(arg0: com.sun.tools.javac.code.Type$WildcardType, arg1: S): R
                   public visitArrayType(arg0: com.sun.tools.javac.code.Type$ArrayType, arg1: S): R
                   public visitMethodType(arg0: com.sun.tools.javac.code.Type$MethodType, arg1: S): R
                   public visitPackageType(arg0: com.sun.tools.javac.code.Type$PackageType, arg1: S): R
                   public visitTypeVar(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: S): R
                   public visitCapturedType(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: S): R
                   public visitForAll(arg0: com.sun.tools.javac.code.Type$ForAll, arg1: S): R
                   public visitUndetVar(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: S): R
                   public visitErrorType(arg0: com.sun.tools.javac.code.Type$ErrorType, arg1: S): R
                   public visitAnnotatedType(arg0: com.sun.tools.javac.code.Type$AnnotatedType, arg1: S): R
                   public visitType(arg0: com.sun.tools.javac.code.Type, arg1: S): R
               }
               class Type$4 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               abstract class Type extends com.sun.tools.javac.code.AnnoConstruct implements javax.lang.model.type.TypeMirror {
                   public static noType: com.sun.tools.javac.code.Type$JCNoType
                   public static recoveryType: com.sun.tools.javac.code.Type$JCNoType
                   public static stuckType: com.sun.tools.javac.code.Type$JCNoType
                   public static moreInfo: boolean
                   public tsym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   public hasTag(arg0: com.sun.tools.javac.code.TypeTag): boolean
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   public isNumeric(): boolean
                   public isPrimitive(): boolean
                   public isPrimitiveOrVoid(): boolean
                   public isReference(): boolean
                   public isNullOrReference(): boolean
                   public isPartial(): boolean
                   public constValue(): java.lang.Object
                   public isFalse(): boolean
                   public isTrue(): boolean
                   public getModelType(): com.sun.tools.javac.code.Type
                   public static getModelTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getOriginalType(): com.sun.tools.javac.code.Type
                   accept<T>(...args: any[]): any
                   public constructor(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   map<T>(...args: any[]): any
                   public constType(arg0: java.lang.Object): com.sun.tools.javac.code.Type
                   public baseType(): com.sun.tools.javac.code.Type
                   public annotatedType(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): com.sun.tools.javac.code.Type
                   public isAnnotated(): boolean
                   public unannotatedType(): com.sun.tools.javac.code.Type
                   getAnnotationMirrors<T>(...args: any[]): any
                   public getAnnotation<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A
                   public getAnnotationsByType<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A[]
                   public static baseTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   toString<T>(...args: any[]): any
                   public stringValue(): java.lang.String
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   public argtypes(arg0: boolean): java.lang.String
                   public getTypeArguments(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getEnclosingType(): com.sun.tools.javac.code.Type
                   public getParameterTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getReturnType(): com.sun.tools.javac.code.Type
                   public getReceiverType(): com.sun.tools.javac.code.Type
                   public getThrownTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public getUpperBound(): com.sun.tools.javac.code.Type
                   public getLowerBound(): com.sun.tools.javac.code.Type
                   public allparams(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   isErroneous<T>(...args: any[]): any
                   public isParameterized(): boolean
                   public isRaw(): boolean
                   public isCompound(): boolean
                   public isIntersection(): boolean
                   public isUnion(): boolean
                   public isInterface(): boolean
                   public isFinal(): boolean
                   contains<T>(...args: any[]): any
                   containsAny<T>(...args: any[]): any
                   public static filter(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isSuperBound(): boolean
                   public isExtendsBound(): boolean
                   public isUnbound(): boolean
                   public withTypeVar(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public asMethodType(): com.sun.tools.javac.code.Type$MethodType
                   public complete(): void
                   public asElement(): com.sun.tools.javac.code.Symbol$TypeSymbol
                   public getKind(): javax.lang.model.type.TypeKind
               }
               abstract class AnnoConstruct implements javax.lang.model.AnnotatedConstruct {
                   public constructor()
                   getAnnotationMirrors<T>(...args: any[]): any
                   protected getAttribute<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): com.sun.tools.javac.code.Attribute$Compound
                   protected getInheritedAnnotations<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A[]
                   public getAnnotationsByType<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A[]
                   public getAnnotation<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A
               }
               interface Scope$ScopeListener {
                   public symbolAdded(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope): void
                   public symbolRemoved(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope): void
               }
               class Scope$1 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   val$sym: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.code.Scope
                   constructor(arg0: com.sun.tools.javac.code.Scope, arg1: com.sun.tools.javac.code.Symbol)
                   accepts<T>(...args: any[]): any
               }
               class Scope$2 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   constructor()
                   accepts<T>(...args: any[]): any
               }
               class Scope$3$1 implements java.util.Iterator<com.sun.tools.javac.code.Symbol> {
                   this$1: com.sun.tools.javac.code.Scope$3
                   constructor(arg0: com.sun.tools.javac.code.Scope$3)
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
                   skipToNextMatchingEntry(): void
               }
               class Scope$3 implements java.lang.Iterable<com.sun.tools.javac.code.Symbol> {
                   val$sf: com.sun.tools.javac.util.Filter
                   this$0: com.sun.tools.javac.code.Scope
                   constructor(arg0: com.sun.tools.javac.code.Scope, arg1: com.sun.tools.javac.util.Filter)
                   public iterator(): java.util.Iterator<com.sun.tools.javac.code.Symbol>
               }
               class Scope$4$1 implements java.util.Iterator<com.sun.tools.javac.code.Symbol> {
                   currentEntry: com.sun.tools.javac.code.Scope$Entry
                   this$1: com.sun.tools.javac.code.Scope$4
                   constructor(arg0: com.sun.tools.javac.code.Scope$4)
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
               }
               class Scope$4 implements java.lang.Iterable<com.sun.tools.javac.code.Symbol> {
                   val$name: com.sun.tools.javac.util.Name
                   val$sf: com.sun.tools.javac.util.Filter
                   this$0: com.sun.tools.javac.code.Scope
                   constructor(arg0: com.sun.tools.javac.code.Scope, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.Filter)
                   public iterator(): java.util.Iterator<com.sun.tools.javac.code.Symbol>
               }
               class Scope$Entry {
                   public sym: com.sun.tools.javac.code.Symbol
                   public sibling: com.sun.tools.javac.code.Scope$Entry
                   public scope: com.sun.tools.javac.code.Scope
                   public constructor(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope$Entry, arg2: com.sun.tools.javac.code.Scope$Entry, arg3: com.sun.tools.javac.code.Scope)
                   next<T>(...args: any[]): any
                   public isStaticallyImported(): boolean
                   public getOrigin(): com.sun.tools.javac.code.Scope
                   static access$000(arg0: com.sun.tools.javac.code.Scope$Entry): com.sun.tools.javac.code.Scope$Entry
                   static access$002(arg0: com.sun.tools.javac.code.Scope$Entry, arg1: com.sun.tools.javac.code.Scope$Entry): com.sun.tools.javac.code.Scope$Entry
               }
               class Scope$ImportScope$1 extends com.sun.tools.javac.code.Scope$Entry {
                   val$origin: com.sun.tools.javac.code.Scope
                   val$staticallyImported: boolean
                   this$0: com.sun.tools.javac.code.Scope$ImportScope
                   constructor(arg0: com.sun.tools.javac.code.Scope$ImportScope, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Scope$Entry, arg3: com.sun.tools.javac.code.Scope$Entry, arg4: com.sun.tools.javac.code.Scope, arg5: com.sun.tools.javac.code.Scope, arg6: boolean)
                   public getOrigin(): com.sun.tools.javac.code.Scope
                   public isStaticallyImported(): boolean
               }
               class Scope$ImportScope extends com.sun.tools.javac.code.Scope {
                   public constructor(arg0: com.sun.tools.javac.code.Symbol)
                   makeEntry(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope$Entry, arg2: com.sun.tools.javac.code.Scope$Entry, arg3: com.sun.tools.javac.code.Scope, arg4: com.sun.tools.javac.code.Scope, arg5: boolean): com.sun.tools.javac.code.Scope$Entry
               }
               class Scope$StarImportScope extends com.sun.tools.javac.code.Scope$ImportScope implements com.sun.tools.javac.code.Scope$ScopeListener {
                   public constructor(arg0: com.sun.tools.javac.code.Symbol)
                   public importAll(arg0: com.sun.tools.javac.code.Scope): void
                   public symbolRemoved(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope): void
                   public symbolAdded(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope): void
               }
               class Scope$DelegatedScope extends com.sun.tools.javac.code.Scope {
                   delegatee: com.sun.tools.javac.code.Scope
                   public static emptyTable: com.sun.tools.javac.code.Scope$Entry[]
                   public constructor(arg0: com.sun.tools.javac.code.Scope)
                   public dup(): com.sun.tools.javac.code.Scope
                   public dupUnshared(): com.sun.tools.javac.code.Scope
                   public leave(): com.sun.tools.javac.code.Scope
                   enter<T>(...args: any[]): any
                   public remove(arg0: com.sun.tools.javac.code.Symbol): void
                   public lookup(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Scope$Entry
               }
               class Scope$CompoundScope$1$1 extends com.sun.tools.javac.code.Scope$CompoundScope$CompoundScopeIterator {
                   this$1: com.sun.tools.javac.code.Scope$CompoundScope$1
                   constructor(arg0: com.sun.tools.javac.code.Scope$CompoundScope$1, arg1: com.sun.tools.javac.util.List)
                   nextIterator(arg0: com.sun.tools.javac.code.Scope): java.util.Iterator<com.sun.tools.javac.code.Symbol>
               }
               class Scope$CompoundScope$1 implements java.lang.Iterable<com.sun.tools.javac.code.Symbol> {
                   val$sf: com.sun.tools.javac.util.Filter
                   this$0: com.sun.tools.javac.code.Scope$CompoundScope
                   constructor(arg0: com.sun.tools.javac.code.Scope$CompoundScope, arg1: com.sun.tools.javac.util.Filter)
                   public iterator(): java.util.Iterator<com.sun.tools.javac.code.Symbol>
               }
               class Scope$CompoundScope$2$1 extends com.sun.tools.javac.code.Scope$CompoundScope$CompoundScopeIterator {
                   this$1: com.sun.tools.javac.code.Scope$CompoundScope$2
                   constructor(arg0: com.sun.tools.javac.code.Scope$CompoundScope$2, arg1: com.sun.tools.javac.util.List)
                   nextIterator(arg0: com.sun.tools.javac.code.Scope): java.util.Iterator<com.sun.tools.javac.code.Symbol>
               }
               class Scope$CompoundScope$2 implements java.lang.Iterable<com.sun.tools.javac.code.Symbol> {
                   val$name: com.sun.tools.javac.util.Name
                   val$sf: com.sun.tools.javac.util.Filter
                   this$0: com.sun.tools.javac.code.Scope$CompoundScope
                   constructor(arg0: com.sun.tools.javac.code.Scope$CompoundScope, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.Filter)
                   public iterator(): java.util.Iterator<com.sun.tools.javac.code.Symbol>
               }
               abstract class Scope$CompoundScope$CompoundScopeIterator implements java.util.Iterator<com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.code.Scope$CompoundScope
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Scope>)
                   nextIterator(arg0: com.sun.tools.javac.code.Scope): java.util.Iterator<com.sun.tools.javac.code.Symbol>
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
               }
               class Scope$CompoundScope extends com.sun.tools.javac.code.Scope implements com.sun.tools.javac.code.Scope$ScopeListener {
                   public static emptyTable: com.sun.tools.javac.code.Scope$Entry[]
                   public constructor(arg0: com.sun.tools.javac.code.Symbol)
                   public addSubScope(arg0: com.sun.tools.javac.code.Scope): void
                   public symbolAdded(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope): void
                   public symbolRemoved(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope): void
                   public getMark(): int
                   toString<T>(...args: any[]): any
                   public getElements(arg0: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): java.lang.Iterable<com.sun.tools.javac.code.Symbol>
                   public getElementsByName(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): java.lang.Iterable<com.sun.tools.javac.code.Symbol>
                   public lookup(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): com.sun.tools.javac.code.Scope$Entry
                   public dup(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Scope
                   public enter(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope, arg2: com.sun.tools.javac.code.Scope, arg3: boolean): void
                   public remove(arg0: com.sun.tools.javac.code.Symbol): void
                   static access$200(arg0: com.sun.tools.javac.code.Scope$CompoundScope): com.sun.tools.javac.util.List
               }
               class Scope$ErrorScope extends com.sun.tools.javac.code.Scope {
                   constructor(...args: any[])
                   public dup(): com.sun.tools.javac.code.Scope
                   public dupUnshared(): com.sun.tools.javac.code.Scope
                   public lookup(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Scope$Entry
               }
               class Scope {
                   public next: com.sun.tools.javac.code.Scope
                   public owner: com.sun.tools.javac.code.Symbol
                   table: com.sun.tools.javac.code.Scope$Entry[]
                   hashMask: int
                   public elems: com.sun.tools.javac.code.Scope$Entry
                   nelems: int
                   listeners: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Scope$ScopeListener>
                   public static emptyScope: com.sun.tools.javac.code.Scope
                   static noFilter: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>
                   constructor(...args: any[])
                   dup<T>(...args: any[]): any
                   public dupUnshared(): com.sun.tools.javac.code.Scope
                   public leave(): com.sun.tools.javac.code.Scope
                   enter<T>(...args: any[]): any
                   makeEntry(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Scope$Entry, arg2: com.sun.tools.javac.code.Scope$Entry, arg3: com.sun.tools.javac.code.Scope, arg4: com.sun.tools.javac.code.Scope, arg5: boolean): com.sun.tools.javac.code.Scope$Entry
                   public addScopeListener(arg0: com.sun.tools.javac.code.Scope$ScopeListener): void
                   public remove(arg0: com.sun.tools.javac.code.Symbol): void
                   public enterIfAbsent(arg0: com.sun.tools.javac.code.Symbol): void
                   public includes(arg0: com.sun.tools.javac.code.Symbol): boolean
                   lookup<T>(...args: any[]): any
                   getIndex(arg0: com.sun.tools.javac.util.Name): int
                   public anyMatch(arg0: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): boolean
                   getElements<T>(...args: any[]): any
                   getElementsByName<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }
               class Symbol> extends com.sun.tools.javac.code.Symbol {
                   protected other: T
                   public constructor(arg0: T)
                   toString<T>(...args: any[]): any
                   location<T>(...args: any[]): any
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
                   public erasure(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
                   public externalType(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
                   public isLocal(): boolean
                   public isConstructor(): boolean
                   public getQualifiedName(): com.sun.tools.javac.util.Name
                   public flatName(): com.sun.tools.javac.util.Name
                   public members(): com.sun.tools.javac.code.Scope
                   public isInner(): boolean
                   public hasOuterInstance(): boolean
                   public enclClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public outermostClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public packge(): com.sun.tools.javac.code.Symbol$PackageSymbol
                   public isSubClass(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public isMemberOf(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public isEnclosedBy(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                   public isInheritedIn(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public asMemberOf(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol
                   public complete(): void
                   accept<T>(...args: any[]): any
                   public getUnderlyingSymbol(): T
                   public getAnnotationMirrors(): java.util.List
                   public getEnclosingElement(): javax.lang.model.element.Element
                   public getSimpleName(): javax.lang.model.element.Name
                   public asType(): javax.lang.model.type.TypeMirror
               }
               abstract class Symbol$TypeSymbol extends com.sun.tools.javac.code.Symbol {
                   public constructor(arg0: int, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol)
                   public static formFullName(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.util.Name
                   public static formFlatName(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.util.Name
                   public precedes(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public getEnclosedElements(): java.util.List<com.sun.tools.javac.code.Symbol>
                   public accept<R, P>(arg0: com.sun.tools.javac.code.Symbol$Visitor<R, P>, arg1: P): R
                   public getAnnotationMirrors(): java.util.List
                   public getEnclosingElement(): javax.lang.model.element.Element
                   public getSimpleName(): javax.lang.model.element.Name
                   public asType(): javax.lang.model.type.TypeMirror
               }
               class Symbol$TypeVariableSymbol extends com.sun.tools.javac.code.Symbol$TypeSymbol implements javax.lang.model.element.TypeParameterElement {
                   public constructor(arg0: long, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Symbol)
                   public getKind(): javax.lang.model.element.ElementKind
                   getGenericElement<T>(...args: any[]): any
                   getBounds<T>(...args: any[]): any
                   getAnnotationMirrors<T>(...args: any[]): any
                   public getAttribute<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): com.sun.tools.javac.code.Attribute$Compound
                   isCurrentSymbolsAnnotation(arg0: com.sun.tools.javac.code.Attribute$TypeCompound, arg1: int): boolean
                   public accept<R, P>(arg0: javax.lang.model.element.ElementVisitor<R, P>, arg1: P): R
               }
               class Symbol$PackageSymbol extends com.sun.tools.javac.code.Symbol$TypeSymbol implements javax.lang.model.element.PackageElement {
                   public members_field: com.sun.tools.javac.code.Scope
                   public fullname: com.sun.tools.javac.util.Name
                   public package_info: com.sun.tools.javac.code.Symbol$ClassSymbol
                   constructor(...args: any[])
                   toString<T>(...args: any[]): any
                   getQualifiedName<T>(...args: any[]): any
                   public isUnnamed(): boolean
                   public members(): com.sun.tools.javac.code.Scope
                   public flags(): long
                   public getRawAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>
                   public exists(): boolean
                   public getKind(): javax.lang.model.element.ElementKind
                   getEnclosingElement<T>(...args: any[]): any
                   accept<T>(...args: any[]): any
               }
               class Symbol$ClassSymbol extends com.sun.tools.javac.code.Symbol$TypeSymbol implements javax.lang.model.element.TypeElement {
                   public members_field: com.sun.tools.javac.code.Scope
                   public fullname: com.sun.tools.javac.util.Name
                   public flatname: com.sun.tools.javac.util.Name
                   public sourcefile: javax.tools.JavaFileObject
                   public classfile: javax.tools.JavaFileObject
                   public trans_local: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ClassSymbol>
                   public pool: com.sun.tools.javac.jvm.Pool
                   constructor(...args: any[])
                   toString<T>(...args: any[]): any
                   public flags(): long
                   public members(): com.sun.tools.javac.code.Scope
                   public getRawAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>
                   public getRawTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public erasure(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
                   public className(): java.lang.String
                   getQualifiedName<T>(...args: any[]): any
                   public flatName(): com.sun.tools.javac.util.Name
                   public isSubClass(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public complete(): void
                   getInterfaces<T>(...args: any[]): any
                   getSuperclass<T>(...args: any[]): any
                   protected getInheritedAnnotations<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A[]
                   public getKind(): javax.lang.model.element.ElementKind
                   public getModifiers(): java.util.Set<javax.lang.model.element.Modifier>
                   public getNestingKind(): javax.lang.model.element.NestingKind
                   protected getAttribute<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): com.sun.tools.javac.code.Attribute$Compound
                   accept<T>(...args: any[]): any
                   public markAbstractIfNeeded(arg0: com.sun.tools.javac.code.Types): void
                   public getTypeParameters(): java.util.List
               }
               class Symbol$VarSymbol$1 extends com.sun.tools.javac.code.Symbol$VarSymbol {
                   this$0: com.sun.tools.javac.code.Symbol$VarSymbol
                   constructor(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
                   public getEnclosingElement(): javax.lang.model.element.Element
                   public getSimpleName(): javax.lang.model.element.Name
                   public getAnnotationMirrors(): java.util.List
                   public asType(): javax.lang.model.type.TypeMirror
                   public clone(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Symbol$VarSymbol$2 implements java.util.concurrent.Callable<java.lang.Object> {
                   val$attr: com.sun.tools.javac.comp.Attr
                   val$env: com.sun.tools.javac.comp.Env
                   val$variable: com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   this$0: com.sun.tools.javac.code.Symbol$VarSymbol
                   constructor(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: com.sun.tools.javac.comp.Attr, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.tree.JCTree$JCVariableDecl)
                   public call(): java.lang.Object
               }
               class Symbol$VarSymbol extends com.sun.tools.javac.code.Symbol implements javax.lang.model.element.VariableElement {
                   public pos: int
                   public adr: int
                   public constructor(arg0: long, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Symbol)
                   clone<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public asMemberOf(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol
                   public getKind(): javax.lang.model.element.ElementKind
                   accept<T>(...args: any[]): any
                   public getConstantValue(): java.lang.Object
                   public setLazyConstValue(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Attr, arg2: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public isExceptionParameter(): boolean
                   public isResourceVariable(): boolean
                   public getConstValue(): java.lang.Object
                   public setData(arg0: java.lang.Object): void
                   public getAnnotationMirrors(): java.util.List
                   public getEnclosingElement(): javax.lang.model.element.Element
                   public getSimpleName(): javax.lang.model.element.Name
                   public asType(): javax.lang.model.type.TypeMirror
               }
               class Symbol$MethodSymbol$1 extends com.sun.tools.javac.code.Symbol$MethodSymbol {
                   this$0: com.sun.tools.javac.code.Symbol$MethodSymbol
                   constructor(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
                   public getSimpleName(): javax.lang.model.element.Name
                   public getDefaultValue(): javax.lang.model.element.AnnotationValue
                   public getThrownTypes(): java.util.List
                   public getReceiverType(): javax.lang.model.type.TypeMirror
                   public getParameters(): java.util.List
                   public getReturnType(): javax.lang.model.type.TypeMirror
                   public getTypeParameters(): java.util.List
                   public getAnnotationMirrors(): java.util.List
                   public getEnclosingElement(): javax.lang.model.element.Element
                   public asType(): javax.lang.model.type.TypeMirror
                   public clone(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Symbol$MethodSymbol$2 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   constructor()
                   accepts<T>(...args: any[]): any
               }
               class Symbol$MethodSymbol extends com.sun.tools.javac.code.Symbol implements javax.lang.model.element.ExecutableElement {
                   public code: com.sun.tools.javac.jvm.Code
                   public extraParams: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>
                   public capturedLocals: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>
                   params<T>(...args: any[]): any
                   public savedParameterNames: com.sun.tools.javac.util.List<com.sun.tools.javac.util.Name>
                   public defaultValue: com.sun.tools.javac.code.Attribute
                   public static implementation_filter: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>
                   public constructor(arg0: long, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Symbol)
                   clone<T>(...args: any[]): any
                   public getModifiers(): java.util.Set<javax.lang.model.element.Modifier>
                   toString<T>(...args: any[]): any
                   public isDynamic(): boolean
                   public implemented(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol
                   public implementedIn(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol
                   public binaryOverrides(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: com.sun.tools.javac.code.Types): boolean
                   public binaryImplementation(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol$MethodSymbol
                   public overrides(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: com.sun.tools.javac.code.Types, arg3: boolean): boolean
                   public isInheritedIn(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): boolean
                   implementation<T>(...args: any[]): any
                   public asMemberOf(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol
                   public getKind(): javax.lang.model.element.ElementKind
                   public isStaticOrInstanceInit(): boolean
                   getDefaultValue<T>(...args: any[]): any
                   getParameters<T>(...args: any[]): any
                   public isVarArgs(): boolean
                   public isDefault(): boolean
                   accept<T>(...args: any[]): any
                   getReceiverType<T>(...args: any[]): any
                   getReturnType<T>(...args: any[]): any
                   getThrownTypes<T>(...args: any[]): any
                   public getAnnotationMirrors(): java.util.List
                   public getEnclosingElement(): javax.lang.model.element.Element
                   public getSimpleName(): javax.lang.model.element.Name
                   public asType(): javax.lang.model.type.TypeMirror
                   public getTypeParameters(): java.util.List
               }
               class Symbol$DynamicMethodSymbol extends com.sun.tools.javac.code.Symbol$MethodSymbol {
                   public staticArgs: java.lang.Object[]
                   public bsm: com.sun.tools.javac.code.Symbol
                   public bsmKind: int
                   public constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol, arg2: int, arg3: com.sun.tools.javac.code.Symbol$MethodSymbol, arg4: com.sun.tools.javac.code.Type, arg5: java.lang.Object[])
                   public isDynamic(): boolean
               }
               class Symbol$OperatorSymbol extends com.sun.tools.javac.code.Symbol$MethodSymbol {
                   public opcode: int
                   public constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Type, arg2: int, arg3: com.sun.tools.javac.code.Symbol)
                   public accept<R, P>(arg0: com.sun.tools.javac.code.Symbol$Visitor<R, P>, arg1: P): R
               }
               interface Symbol$Completer {
                   public complete(arg0: com.sun.tools.javac.code.Symbol): void
               }
               class Symbol$CompletionFailure extends java.lang.RuntimeException {
                   public sym: com.sun.tools.javac.code.Symbol
                   public diag: com.sun.tools.javac.util.JCDiagnostic
                   public errmsg: java.lang.String
                   constructor(...args: any[])
                   public getDiagnostic(): com.sun.tools.javac.util.JCDiagnostic
                   public getMessage(): java.lang.String
                   public getDetailValue(): java.lang.Object
                   initCause<T>(...args: any[]): any
               }
               interface Symbol$Visitor<R, P> {
                   public visitClassSymbol(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: P): R
                   public visitMethodSymbol(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: P): R
                   public visitPackageSymbol(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: P): R
                   public visitOperatorSymbol(arg0: com.sun.tools.javac.code.Symbol$OperatorSymbol, arg1: P): R
                   public visitVarSymbol(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: P): R
                   public visitTypeSymbol(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: P): R
                   public visitSymbol(arg0: com.sun.tools.javac.code.Symbol, arg1: P): R
               }
               abstract class Symbol extends com.sun.tools.javac.code.AnnoConstruct implements javax.lang.model.element.Element {
                   public kind: int
                   public flags_field: long
                   public name: com.sun.tools.javac.util.Name
                   public type: com.sun.tools.javac.code.Type
                   public owner: com.sun.tools.javac.code.Symbol
                   public completer: com.sun.tools.javac.code.Symbol$Completer
                   public erasure_field: com.sun.tools.javac.code.Type
                   protected metadata: com.sun.tools.javac.code.SymbolMetadata
                   public flags(): long
                   public getRawAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>
                   public getRawTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public attribute(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Attribute$Compound
                   public annotationsPendingCompletion(): boolean
                   public appendAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): void
                   public appendClassInitTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public appendInitTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public appendTypeAttributesWithCompletion(arg0: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public appendUniqueTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public getClassInitTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public getInitTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public getDeclarationAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>
                   public hasAnnotations(): boolean
                   public hasTypeAnnotations(): boolean
                   public prependAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): void
                   public resetAnnotations(): void
                   public setAttributes(arg0: com.sun.tools.javac.code.Symbol): void
                   public setDeclarationAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): void
                   public setDeclarationAttributesWithCompletion(arg0: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext<com.sun.tools.javac.code.Attribute$Compound>): void
                   public setTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public getMetadata(): com.sun.tools.javac.code.SymbolMetadata
                   public constructor(arg0: int, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol)
                   public clone(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
                   public accept<R, P>(arg0: com.sun.tools.javac.code.Symbol$Visitor<R, P>, arg1: P): R
                   toString<T>(...args: any[]): any
                   location<T>(...args: any[]): any
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
                   public erasure(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
                   public externalType(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
                   public isDeprecated(): boolean
                   public isStatic(): boolean
                   public isInterface(): boolean
                   public isPrivate(): boolean
                   public isEnum(): boolean
                   public isLocal(): boolean
                   public isAnonymous(): boolean
                   public isConstructor(): boolean
                   public getQualifiedName(): com.sun.tools.javac.util.Name
                   public flatName(): com.sun.tools.javac.util.Name
                   public members(): com.sun.tools.javac.code.Scope
                   public isInner(): boolean
                   public hasOuterInstance(): boolean
                   public enclClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public outermostClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public packge(): com.sun.tools.javac.code.Symbol$PackageSymbol
                   public isSubClass(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public isMemberOf(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public isEnclosedBy(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                   public isInheritedIn(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): boolean
                   public asMemberOf(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Symbol
                   public overrides(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: com.sun.tools.javac.code.Types, arg3: boolean): boolean
                   public complete(): void
                   public exists(): boolean
                   asType<T>(...args: any[]): any
                   getEnclosingElement<T>(...args: any[]): any
                   public getKind(): javax.lang.model.element.ElementKind
                   public getModifiers(): java.util.Set<javax.lang.model.element.Modifier>
                   getSimpleName<T>(...args: any[]): any
                   getAnnotationMirrors<T>(...args: any[]): any
                   public getEnclosedElements(): java.util.List<com.sun.tools.javac.code.Symbol>
                   public getTypeParameters(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$TypeVariableSymbol>
               }
               class Lint$LintCategory extends java.lang.Enum<com.sun.tools.javac.code.Lint$LintCategory> {
                   public static AUXILIARYCLASS: com.sun.tools.javac.code.Lint$LintCategory
                   public static CAST: com.sun.tools.javac.code.Lint$LintCategory
                   public static CLASSFILE: com.sun.tools.javac.code.Lint$LintCategory
                   public static DEPRECATION: com.sun.tools.javac.code.Lint$LintCategory
                   public static DEP_ANN: com.sun.tools.javac.code.Lint$LintCategory
                   public static DIVZERO: com.sun.tools.javac.code.Lint$LintCategory
                   public static EMPTY: com.sun.tools.javac.code.Lint$LintCategory
                   public static FALLTHROUGH: com.sun.tools.javac.code.Lint$LintCategory
                   public static FINALLY: com.sun.tools.javac.code.Lint$LintCategory
                   public static OPTIONS: com.sun.tools.javac.code.Lint$LintCategory
                   public static OVERLOADS: com.sun.tools.javac.code.Lint$LintCategory
                   public static OVERRIDES: com.sun.tools.javac.code.Lint$LintCategory
                   public static PATH: com.sun.tools.javac.code.Lint$LintCategory
                   public static PROCESSING: com.sun.tools.javac.code.Lint$LintCategory
                   public static RAW: com.sun.tools.javac.code.Lint$LintCategory
                   public static SERIAL: com.sun.tools.javac.code.Lint$LintCategory
                   public static STATIC: com.sun.tools.javac.code.Lint$LintCategory
                   public static SUNAPI: com.sun.tools.javac.code.Lint$LintCategory
                   public static TRY: com.sun.tools.javac.code.Lint$LintCategory
                   public static UNCHECKED: com.sun.tools.javac.code.Lint$LintCategory
                   public static VARARGS: com.sun.tools.javac.code.Lint$LintCategory
                   public option: java.lang.String
                   public hidden: boolean
                   public static values(): com.sun.tools.javac.code.Lint$LintCategory[]
                   valueOf<T>(...args: any[]): any
                   static get(arg0: java.lang.String): com.sun.tools.javac.code.Lint$LintCategory
               }
               class Lint$AugmentVisitor implements com.sun.tools.javac.code.Attribute$Visitor {
                   constructor(arg0: com.sun.tools.javac.util.Context)
                   augment<T>(...args: any[]): any
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
               }
               class Lint {
                   protected static lintKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.code.Lint>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.code.Lint
                   augment<T>(...args: any[]): any
                   constructor(...args: any[])
                   toString<T>(...args: any[]): any
                   public isEnabled(arg0: com.sun.tools.javac.code.Lint$LintCategory): boolean
                   public isSuppressed(arg0: com.sun.tools.javac.code.Lint$LintCategory): boolean
                   static access$000(): java.util.Map
                   static access$100(arg0: com.sun.tools.javac.code.Lint): java.util.EnumSet
                   static access$200(arg0: com.sun.tools.javac.code.Lint): java.util.EnumSet
               }
               class Attribute$Constant extends com.sun.tools.javac.code.Attribute {
                   public value: java.lang.Object
                   accept<T>(...args: any[]): any
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: java.lang.Object)
                   toString<T>(...args: any[]): any
                   public getValue(): java.lang.Object
               }
               class Attribute$Class extends com.sun.tools.javac.code.Attribute {
                   public classType: com.sun.tools.javac.code.Type
                   accept<T>(...args: any[]): any
                   public constructor(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type)
                   static makeClassType(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   toString<T>(...args: any[]): any
                   getValue<T>(...args: any[]): any
               }
               class Attribute$Compound extends com.sun.tools.javac.code.Attribute implements javax.lang.model.element.AnnotationMirror {
                   public values: com.sun.tools.javac.util.List<com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Attribute>>
                   public isSynthesized(): boolean
                   public setSynthesized(arg0: boolean): void
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Attribute>>)
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public member(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Attribute
                   getValue<T>(...args: any[]): any
                   public getAnnotationType(): javax.lang.model.type.DeclaredType
                   public getPosition(): com.sun.tools.javac.code.TypeAnnotationPosition
                   public getElementValues(): java.util.Map<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Attribute>
               }
               class Attribute$TypeCompound extends com.sun.tools.javac.code.Attribute$Compound {
                   public position: com.sun.tools.javac.code.TypeAnnotationPosition
                   constructor(...args: any[])
                   public getPosition(): com.sun.tools.javac.code.TypeAnnotationPosition
                   public hasUnknownPosition(): boolean
                   public isContainerTypeCompound(): boolean
                   public tryFixPosition(): boolean
               }
               class Attribute$Array extends com.sun.tools.javac.code.Attribute {
                   public values: com.sun.tools.javac.code.Attribute[]
                   constructor(...args: any[])
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   getValue<T>(...args: any[]): any
                   public getPosition(): com.sun.tools.javac.code.TypeAnnotationPosition
               }
               class Attribute$Enum extends com.sun.tools.javac.code.Attribute {
                   public value: com.sun.tools.javac.code.Symbol$VarSymbol
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol$VarSymbol)
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   getValue<T>(...args: any[]): any
               }
               class Attribute$Error extends com.sun.tools.javac.code.Attribute {
                   public constructor(arg0: com.sun.tools.javac.code.Type)
                   accept<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   getValue<T>(...args: any[]): any
               }
               class Attribute$UnresolvedClass extends com.sun.tools.javac.code.Attribute$Error {
                   public classType: com.sun.tools.javac.code.Type
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type)
               }
               interface Attribute$Visitor {
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
               }
               class Attribute$RetentionPolicy extends java.lang.Enum<com.sun.tools.javac.code.Attribute$RetentionPolicy> {
                   public static SOURCE: com.sun.tools.javac.code.Attribute$RetentionPolicy
                   public static CLASS: com.sun.tools.javac.code.Attribute$RetentionPolicy
                   public static RUNTIME: com.sun.tools.javac.code.Attribute$RetentionPolicy
                   public static values(): com.sun.tools.javac.code.Attribute$RetentionPolicy[]
                   valueOf<T>(...args: any[]): any
               }
               class Attribute$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               abstract class Attribute implements javax.lang.model.element.AnnotationValue {
                   public type: com.sun.tools.javac.code.Type
                   public constructor(arg0: com.sun.tools.javac.code.Type)
                   accept<T>(...args: any[]): any
                   public getValue(): java.lang.Object
                   public isSynthesized(): boolean
                   public getPosition(): com.sun.tools.javac.code.TypeAnnotationPosition
               }
               class SymbolMetadata$1 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$ctx: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext
                   this$0: com.sun.tools.javac.code.SymbolMetadata
                   constructor(arg0: com.sun.tools.javac.code.SymbolMetadata, arg1: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext)
                   toString<T>(...args: any[]): any
                   public run(): void
               }
               class Attribute$Compound> extends com.sun.tools.javac.code.Attribute$TypeCompound {
                   public constructor(arg0: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext<T>, arg1: com.sun.tools.javac.util.List<T>, arg2: com.sun.tools.javac.code.Symbol)
                   toString<T>(...args: any[]): any
                   public getPlaceholderFor(): com.sun.tools.javac.util.List<T>
                   public getRepeatedContext(): com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext<T>
               }
               class SymbolMetadata {
                   public constructor(arg0: com.sun.tools.javac.code.Symbol)
                   public getDeclarationAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>
                   public getTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public getInitTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public getClassInitTypeAttributes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public setDeclarationAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): void
                   public setTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public setInitTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public setClassInitTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public setAttributes(arg0: com.sun.tools.javac.code.SymbolMetadata): void
                   public setDeclarationAttributesWithCompletion(arg0: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext<com.sun.tools.javac.code.Attribute$Compound>): void
                   public appendTypeAttributesWithCompletion(arg0: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   public reset(): com.sun.tools.javac.code.SymbolMetadata
                   public isEmpty(): boolean
                   public isTypesEmpty(): boolean
                   public pendingCompletion(): boolean
                   public append(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): com.sun.tools.javac.code.SymbolMetadata
                   public appendUniqueTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): com.sun.tools.javac.code.SymbolMetadata
                   public appendInitTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): com.sun.tools.javac.code.SymbolMetadata
                   public appendClassInitTypeAttributes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): com.sun.tools.javac.code.SymbolMetadata
                   public prepend(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): com.sun.tools.javac.code.SymbolMetadata
                   static access$000(arg0: com.sun.tools.javac.code.SymbolMetadata): com.sun.tools.javac.code.Symbol
                   static access$100(arg0: com.sun.tools.javac.code.SymbolMetadata, arg1: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext): void
               }
               class Types$1 extends com.sun.tools.javac.code.Types$UnaryVisitor<java.lang.Boolean> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
               }
               class Types$2 extends com.sun.tools.javac.code.Types$SimpleVisitor<com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$FunctionDescriptorLookupError extends java.lang.RuntimeException {
                   diagnostic: com.sun.tools.javac.util.JCDiagnostic
                   constructor()
                   setMessage(arg0: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.code.Types$FunctionDescriptorLookupError
                   public getDiagnostic(): com.sun.tools.javac.util.JCDiagnostic
               }
               class Types$DescriptorCache$FunctionDescriptor {
                   descSym: com.sun.tools.javac.code.Symbol
                   this$1: com.sun.tools.javac.code.Types$DescriptorCache
                   constructor(arg0: com.sun.tools.javac.code.Types$DescriptorCache, arg1: com.sun.tools.javac.code.Symbol)
                   public getSymbol(): com.sun.tools.javac.code.Symbol
                   public getType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$DescriptorCache$Entry {
                   cachedDescRes: com.sun.tools.javac.code.Types$DescriptorCache$FunctionDescriptor
                   prevMark: int
                   this$1: com.sun.tools.javac.code.Types$DescriptorCache
                   public constructor(arg0: com.sun.tools.javac.code.Types$DescriptorCache, arg1: com.sun.tools.javac.code.Types$DescriptorCache$FunctionDescriptor, arg2: int)
                   matches(arg0: int): boolean
               }
               class Types$DescriptorCache$1 extends com.sun.tools.javac.code.Types$DescriptorCache$FunctionDescriptor {
                   val$thrown1: com.sun.tools.javac.util.List
                   this$1: com.sun.tools.javac.code.Types$DescriptorCache
                   constructor(arg0: com.sun.tools.javac.code.Types$DescriptorCache, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.List)
                   public getType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$DescriptorCache {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   get(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Types$DescriptorCache$FunctionDescriptor
                   public findDescriptorInternal(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Scope$CompoundScope): com.sun.tools.javac.code.Types$DescriptorCache$FunctionDescriptor
                   isSubtypeInternal(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   failure<T>(...args: any[]): any
               }
               class Types$3 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   accepts<T>(...args: any[]): any
               }
               class Types$DescriptorFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   origin: com.sun.tools.javac.code.Symbol$TypeSymbol
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   accepts<T>(...args: any[]): any
               }
               class Types$4 extends com.sun.tools.javac.code.Types$TypeRelation {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               abstract class Types$SameTypeVisitor extends com.sun.tools.javac.code.Types$TypeRelation {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   sameTypeVars(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: com.sun.tools.javac.code.Type$TypeVar): boolean
                   visitWildcardType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   protected containsTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   visitArrayType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitPackageType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$LooseSameTypeVisitor extends com.sun.tools.javac.code.Types$SameTypeVisitor {
                   this$0: com.sun.tools.javac.code.Types
                   sameTypeVars(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: com.sun.tools.javac.code.Type$TypeVar): boolean
                   protected containsTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Types$1)
               }
               class Types$5 extends com.sun.tools.javac.code.Types$SameTypeVisitor {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   sameTypeVars(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: com.sun.tools.javac.code.Type$TypeVar): boolean
                   protected containsTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   visitWildcardType<T>(...args: any[]): any
               }
               class Types$6 extends com.sun.tools.javac.code.Types$LooseSameTypeVisitor {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitAnnotatedType<T>(...args: any[]): any
               }
               class Types$7 extends com.sun.tools.javac.code.Types$TypeRelation {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$8 extends com.sun.tools.javac.code.Types$TypeRelation {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitIntersectionType(arg0: com.sun.tools.javac.code.Type$IntersectionClassType, arg1: com.sun.tools.javac.code.Type, arg2: boolean): boolean
                   visitArrayType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$9 extends com.sun.tools.javac.code.Types$TypeRelation {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
               }
               class Types$10 extends com.sun.tools.javac.code.Type$Mapping {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$11 extends com.sun.tools.javac.code.Types$UnaryVisitor<java.lang.Boolean> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
               }
               class Types$12 extends com.sun.tools.javac.code.Type$Mapping {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$13 extends com.sun.tools.javac.code.Types$SimpleVisitor<com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$14 extends com.sun.tools.javac.code.Types$SimpleVisitor<com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$15 extends com.sun.tools.javac.code.Types$SimpleVisitor<com.sun.tools.javac.code.Type, java.lang.Boolean> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
                   visitAnnotatedType<T>(...args: any[]): any
               }
               class Types$16 extends com.sun.tools.javac.code.Type$Mapping {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$17 extends com.sun.tools.javac.code.Type$Mapping {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$18 extends com.sun.tools.javac.code.Types$UnaryVisitor<com.sun.tools.javac.code.Type> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$19 extends com.sun.tools.javac.code.Types$UnaryVisitor<com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
               }
               class Types$20 extends com.sun.tools.javac.code.Types$UnaryVisitor<com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
               }
               class Types$21 extends com.sun.tools.javac.code.Types$UnaryVisitor<com.sun.tools.javac.code.Type> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$ImplementationCache$Entry {
                   cachedImpl: com.sun.tools.javac.code.Symbol$MethodSymbol
                   implFilter: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>
                   checkResult: boolean
                   prevMark: int
                   this$1: com.sun.tools.javac.code.Types$ImplementationCache
                   public constructor(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>, arg2: boolean, arg3: int)
                   matches(arg0: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>, arg1: boolean, arg2: int): boolean
               }
               class Types$ImplementationCache {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   get(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: boolean, arg3: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): com.sun.tools.javac.code.Symbol$MethodSymbol
               }
               class Types$MembersClosureCache$MembersScope$1 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   val$sf: com.sun.tools.javac.util.Filter
                   this$2: com.sun.tools.javac.code.Types$MembersClosureCache$MembersScope
                   constructor(arg0: com.sun.tools.javac.code.Types$MembersClosureCache$MembersScope, arg1: com.sun.tools.javac.util.Filter)
                   accepts<T>(...args: any[]): any
               }
               class Types$MembersClosureCache$MembersScope extends com.sun.tools.javac.code.Scope$CompoundScope {
                   scope: com.sun.tools.javac.code.Scope$CompoundScope
                   this$1: com.sun.tools.javac.code.Types$MembersClosureCache
                   public constructor(arg0: com.sun.tools.javac.code.Types$MembersClosureCache, arg1: com.sun.tools.javac.code.Scope$CompoundScope)
                   combine(arg0: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>
                   public getElements(arg0: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): java.lang.Iterable<com.sun.tools.javac.code.Symbol>
                   public getElementsByName(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): java.lang.Iterable<com.sun.tools.javac.code.Symbol>
                   public getMark(): int
               }
               class Types$MembersClosureCache extends com.sun.tools.javac.code.Types$SimpleVisitor<com.sun.tools.javac.code.Scope$CompoundScope, java.lang.Void> {
                   seenTypes: java.util.Set<com.sun.tools.javac.code.Symbol$TypeSymbol>
                   nilScope: com.sun.tools.javac.code.Scope$CompoundScope
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
               }
               class Types$MethodFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   msym: com.sun.tools.javac.code.Symbol
                   site: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Type)
                   accepts<T>(...args: any[]): any
               }
               class Types$HasSameArgs extends com.sun.tools.javac.code.Types$TypeRelation {
                   strict: boolean
                   this$0: com.sun.tools.javac.code.Types
                   public constructor(arg0: com.sun.tools.javac.code.Types, arg1: boolean)
                   visitType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$Subst extends com.sun.tools.javac.code.Types$UnaryVisitor<com.sun.tools.javac.code.Type> {
                   from: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   to: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   this$0: com.sun.tools.javac.code.Types
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>)
                   subst<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$22 extends com.sun.tools.javac.code.Type$Mapping {
                   constructor(arg0: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$23 extends com.sun.tools.javac.code.Types$MapVisitor<com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
               }
               class Types$24 extends com.sun.tools.javac.code.Types$MapVisitor<com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
               }
               class Types$25 extends com.sun.tools.javac.code.Types$MapVisitor<com.sun.tools.javac.code.Type> {
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types)
                   visitType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
               }
               class Types$TypePair {
                   t1: com.sun.tools.javac.code.Type
                   t2: com.sun.tools.javac.code.Type
                   strict: boolean
                   this$0: com.sun.tools.javac.code.Types
                   constructor(...args: any[])
                   public hashCode(): int
                   public equals(arg0: java.lang.Object): boolean
               }
               class Types$26 extends com.sun.tools.javac.code.Types$UnaryVisitor<java.lang.Integer> {
                   constructor()
                   visitType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class Types$Adapter extends com.sun.tools.javac.code.Types$SimpleVisitor<java.lang.Void, com.sun.tools.javac.code.Type> {
                   from: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>
                   to: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>
                   mapping: java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type>
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>)
                   public adapt(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): void
                   visitClassType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
               }
               class Types$AdaptFailure extends java.lang.RuntimeException {
                   static serialVersionUID: long
                   public constructor()
               }
               class Types$Rewriter extends com.sun.tools.javac.code.Types$UnaryVisitor<com.sun.tools.javac.code.Type> {
                   high: boolean
                   rewriteTypeVars: boolean
                   this$0: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.code.Types, arg1: boolean, arg2: boolean)
                   visitClassType<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
                   visitCapturedType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   B(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Types$UniqueType {
                   public type: com.sun.tools.javac.code.Type
                   types: com.sun.tools.javac.code.Types
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Types)
                   public hashCode(): int
                   public equals(arg0: java.lang.Object): boolean
                   toString<T>(...args: any[]): any
               }
               abstract class Types$DefaultTypeVisitor<R, S> implements com.sun.tools.javac.code.Type$Visitor<R, S> {
                   public constructor()
                   public visit(arg0: com.sun.tools.javac.code.Type, arg1: S): R
                   public visitClassType(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: S): R
                   public visitWildcardType(arg0: com.sun.tools.javac.code.Type$WildcardType, arg1: S): R
                   public visitArrayType(arg0: com.sun.tools.javac.code.Type$ArrayType, arg1: S): R
                   public visitMethodType(arg0: com.sun.tools.javac.code.Type$MethodType, arg1: S): R
                   public visitPackageType(arg0: com.sun.tools.javac.code.Type$PackageType, arg1: S): R
                   public visitTypeVar(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: S): R
                   public visitCapturedType(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: S): R
                   public visitForAll(arg0: com.sun.tools.javac.code.Type$ForAll, arg1: S): R
                   public visitUndetVar(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: S): R
                   public visitErrorType(arg0: com.sun.tools.javac.code.Type$ErrorType, arg1: S): R
                   public visitAnnotatedType(arg0: com.sun.tools.javac.code.Type$AnnotatedType, arg1: S): R
               }
               abstract class Types$DefaultSymbolVisitor<R, S> implements com.sun.tools.javac.code.Symbol$Visitor<R, S> {
                   public constructor()
                   public visit(arg0: com.sun.tools.javac.code.Symbol, arg1: S): R
                   public visitClassSymbol(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: S): R
                   public visitMethodSymbol(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: S): R
                   public visitOperatorSymbol(arg0: com.sun.tools.javac.code.Symbol$OperatorSymbol, arg1: S): R
                   public visitPackageSymbol(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: S): R
                   public visitTypeSymbol(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: S): R
                   public visitVarSymbol(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: S): R
               }
               abstract class Types$SimpleVisitor<R, S> extends com.sun.tools.javac.code.Types$DefaultTypeVisitor<R, S> {
                   public constructor()
                   public visitCapturedType(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: S): R
                   public visitForAll(arg0: com.sun.tools.javac.code.Type$ForAll, arg1: S): R
                   public visitUndetVar(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: S): R
               }
               abstract class Types$TypeRelation extends com.sun.tools.javac.code.Types$SimpleVisitor<java.lang.Boolean, com.sun.tools.javac.code.Type> {
                   public constructor()
               }
               abstract class Types$UnaryVisitor<R> extends com.sun.tools.javac.code.Types$SimpleVisitor<R, java.lang.Void> {
                   public constructor()
                   public visit(arg0: com.sun.tools.javac.code.Type): R
               }
               class Types$MapVisitor<S> extends com.sun.tools.javac.code.Types$DefaultTypeVisitor<com.sun.tools.javac.code.Type, S> {
                   public constructor()
                   public visit(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   visitType<T>(...args: any[]): any
               }
               abstract class Types$SignatureGenerator {
                   append<T>(...args: any[]): any
                   protected classReference(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   protected constructor(arg0: com.sun.tools.javac.code.Types)
                   public assembleSig(arg0: com.sun.tools.javac.code.Type): void
                   public hasTypeVar(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public assembleClassSig(arg0: com.sun.tools.javac.code.Type): void
                   public assembleParamsSig(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): void
               }
               class Types$27 {
                   static $SwitchMap$com$sun$tools$javac$code$BoundKind: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class Types {
                   protected static typesKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.code.Types>
                   syms: com.sun.tools.javac.code.Symtab
                   messages: com.sun.tools.javac.util.JavacMessages
                   names: com.sun.tools.javac.util.Names
                   allowBoxing: boolean
                   allowCovariantReturns: boolean
                   allowObjectToPrimitiveCast: boolean
                   allowDefaultMethods: boolean
                   reader: com.sun.tools.javac.jvm.ClassReader
                   chk: com.sun.tools.javac.comp.Check
                   enter: com.sun.tools.javac.comp.Enter
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   warnStack: com.sun.tools.javac.util.List<com.sun.tools.javac.util.Warner>
                   capturedName: com.sun.tools.javac.util.Name
                   public noWarnings: com.sun.tools.javac.util.Warner
                   isSameTypeLoose: com.sun.tools.javac.code.Types$TypeRelation
                   isSameTypeStrict: com.sun.tools.javac.code.Types$TypeRelation
                   isSameAnnotatedType<T>(...args: any[]): any
                   isDerivedRawCache: java.util.Map<com.sun.tools.javac.code.Type, java.lang.Boolean>
                   hasSameArgs_strict: com.sun.tools.javac.code.Types$TypeRelation
                   hasSameArgs_nonstrict: com.sun.tools.javac.code.Types$TypeRelation
                   mergeCache: java.util.Set<com.sun.tools.javac.code.Types$TypePair>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.code.Types
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public wildUpperBound(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public cvarUpperBound(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public wildLowerBound(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public cvarLowerBound(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public isUnbounded(arg0: com.sun.tools.javac.code.Type): boolean
                   public asSub(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Type
                   isConvertible<T>(...args: any[]): any
                   public findDescriptorSymbol(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   public findDescriptorType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   isFunctionalInterface<T>(...args: any[]): any
                   public removeWildcards(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public makeFunctionalInterfaceClass(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: long): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public functionalInterfaceBridges(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>
                   isSubtypeUnchecked<T>(...args: any[]): any
                   isSubtype<T>(...args: any[]): any
                   public isSubtypeNoCapture(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   public isSubtypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public isSubtypesUnchecked(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.Warner): boolean
                   public isSuperType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   isSameTypes<T>(...args: any[]): any
                   public isSignaturePolymorphic(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): boolean
                   isSameType<T>(...args: any[]): any
                   public containedBy(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   containsType<T>(...args: any[]): any
                   public isCaptureOf(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type$WildcardType): boolean
                   public isSameWildcard(arg0: com.sun.tools.javac.code.Type$WildcardType, arg1: com.sun.tools.javac.code.Type): boolean
                   public containsTypeEquivalent(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public isEqualityComparable(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   isCastable<T>(...args: any[]): any
                   public disjointTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public disjointType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   public cvarLowerBounds(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public notSoftSubtype(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   public isReifiable(arg0: com.sun.tools.javac.code.Type): boolean
                   public isArray(arg0: com.sun.tools.javac.code.Type): boolean
                   public elemtype(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public elemtypeOrType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public dimensions(arg0: com.sun.tools.javac.code.Type): int
                   public makeArrayType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type$ArrayType
                   public asSuper(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Type
                   public asOuterSuper(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Type
                   public asEnclosingSuper(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Type
                   public memberType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Type
                   isAssignable<T>(...args: any[]): any
                   erasure<T>(...args: any[]): any
                   erasureRecursive<T>(...args: any[]): any
                   makeIntersectionType<T>(...args: any[]): any
                   public supertype(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public interfaces(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public directSupertypes(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public isDirectSuperInterface(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): boolean
                   isDerivedRaw<T>(...args: any[]): any
                   public isDerivedRawInternal(arg0: com.sun.tools.javac.code.Type): boolean
                   setBounds<T>(...args: any[]): any
                   public getBounds(arg0: com.sun.tools.javac.code.Type$TypeVar): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public classBound(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   isSubSignature<T>(...args: any[]): any
                   public overrideEquivalent(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): boolean
                   public overridesObjectMethod(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Symbol): boolean
                   public implementation(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: boolean, arg3: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>): com.sun.tools.javac.code.Symbol$MethodSymbol
                   public membersClosure(arg0: com.sun.tools.javac.code.Type, arg1: boolean): com.sun.tools.javac.code.Scope$CompoundScope
                   public firstUnimplementedAbstract(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.code.Symbol$MethodSymbol
                   public interfaceCandidates(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$MethodSymbol>
                   public prune(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$MethodSymbol>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$MethodSymbol>
                   hasSameArgs<T>(...args: any[]): any
                   subst<T>(...args: any[]): any
                   public substBounds(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public substBound(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type$TypeVar
                   public hasSameBounds(arg0: com.sun.tools.javac.code.Type$ForAll, arg1: com.sun.tools.javac.code.Type$ForAll): boolean
                   public newInstances(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public createMethodTypeWithParameters(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type
                   public createMethodTypeWithThrown(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type
                   public createMethodTypeWithReturn(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   createErrorType<T>(...args: any[]): any
                   public rank(arg0: com.sun.tools.javac.code.Type): int
                   toString<T>(...args: any[]): any
                   public closure(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public insert(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public union(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public intersect(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   lub<T>(...args: any[]): any
                   erasedSupertypes(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   glb<T>(...args: any[]): any
                   public hashCode(arg0: com.sun.tools.javac.code.Type): int
                   public resultSubtype(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   returnTypeSubstitutable<T>(...args: any[]): any
                   public covariantReturnType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public boxedClass(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public boxedTypeOrType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public unboxedType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   public unboxedTypeOrType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   capture<T>(...args: any[]): any
                   public freshTypeVariables(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public adapt(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>): void
                   getRetention<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Types$FunctionDescriptorLookupError
                   static access$100(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.ListBuffer, arg3: com.sun.tools.javac.util.ListBuffer): void
                   static access$200(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): boolean
                   static access$400(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: boolean, arg3: boolean): com.sun.tools.javac.code.Type
                   static access$500(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): boolean
                   static access$600(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner): boolean
                   static access$700(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner): boolean
                   static access$800(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type$Mapping
                   static access$900(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type$Mapping
                   static access$1000(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: boolean): com.sun.tools.javac.code.Type
                   static access$1100(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
                   static access$1200(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type$TypeVar): com.sun.tools.javac.code.Type$WildcardType
                   static access$1300(arg0: com.sun.tools.javac.code.Types, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type$TypeVar): com.sun.tools.javac.code.Type$WildcardType
               }
               class Source$1 {
                   static $SwitchMap$com$sun$tools$javac$code$Source: int[]
               }
               class Source extends java.lang.Enum<com.sun.tools.javac.code.Source> {
                   public static JDK1_2: com.sun.tools.javac.code.Source
                   public static JDK1_3: com.sun.tools.javac.code.Source
                   public static JDK1_4: com.sun.tools.javac.code.Source
                   public static JDK1_5: com.sun.tools.javac.code.Source
                   public static JDK1_6: com.sun.tools.javac.code.Source
                   public static JDK1_7: com.sun.tools.javac.code.Source
                   public static JDK1_8: com.sun.tools.javac.code.Source
                   public name: java.lang.String
                   public static DEFAULT: com.sun.tools.javac.code.Source
                   public static values(): com.sun.tools.javac.code.Source[]
                   valueOf<T>(...args: any[]): any
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.code.Source
                   public static lookup(arg0: java.lang.String): com.sun.tools.javac.code.Source
                   public requiredTarget(): com.sun.tools.javac.jvm.Target
                   public allowEncodingErrors(): boolean
                   public allowAsserts(): boolean
                   public allowCovariantReturns(): boolean
                   public allowGenerics(): boolean
                   public allowDiamond(): boolean
                   public allowMulticatch(): boolean
                   public allowImprovedRethrowAnalysis(): boolean
                   public allowImprovedCatchAnalysis(): boolean
                   public allowEnums(): boolean
                   public allowForeach(): boolean
                   public allowStaticImport(): boolean
                   public allowBoxing(): boolean
                   public allowVarargs(): boolean
                   public allowAnnotations(): boolean
                   public allowHexFloats(): boolean
                   public allowAnonOuterThis(): boolean
                   public addBridges(): boolean
                   public enforceMandatoryWarnings(): boolean
                   public allowTryWithResources(): boolean
                   public allowBinaryLiterals(): boolean
                   public allowUnderscoresInLiterals(): boolean
                   public allowStringsInSwitch(): boolean
                   public allowSimplifiedVarargs(): boolean
                   public allowObjectToPrimitiveCast(): boolean
                   public enforceThisDotInit(): boolean
                   public allowPoly(): boolean
                   public allowLambda(): boolean
                   public allowMethodReferences(): boolean
                   public allowDefaultMethods(): boolean
                   public allowStaticInterfaceMethods(): boolean
                   public allowStrictMethodClashCheck(): boolean
                   public allowEffectivelyFinalInInnerClasses(): boolean
                   public allowTypeAnnotations(): boolean
                   public allowAnnotationsAfterTypeParams(): boolean
                   public allowRepeatedAnnotations(): boolean
                   public allowIntersectionTypesInCast(): boolean
                   public allowGraphInference(): boolean
                   public allowFunctionalInterfaceMostSpecific(): boolean
                   public allowPostApplicabilityVarargsAccessCheck(): boolean
                   public static toSourceVersion(arg0: com.sun.tools.javac.code.Source): javax.lang.model.SourceVersion
               }
               class TypeAnnotationPosition$TypePathEntryKind extends java.lang.Enum<com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind> {
                   public static ARRAY: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind
                   public static INNER_TYPE: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind
                   public static WILDCARD: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind
                   public static TYPE_ARGUMENT: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind
                   public tag: int
                   public static values(): com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind[]
                   valueOf<T>(...args: any[]): any
               }
               class TypeAnnotationPosition$TypePathEntry {
                   public static bytesPerEntry: int
                   public tag: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind
                   public arg: int
                   public static ARRAY: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry
                   public static INNER_TYPE: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry
                   public static WILDCARD: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry
                   public constructor(arg0: com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind, arg1: int)
                   public static fromBinary(arg0: int, arg1: int): com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry
                   toString<T>(...args: any[]): any
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class TypeAnnotationPosition$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TargetType: int[]
               }
               class TypeAnnotationPosition {
                   public type: com.sun.tools.javac.code.TargetType
                   public location: com.sun.tools.javac.util.List<com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry>
                   public pos: int
                   public isValidOffset: boolean
                   public offset: int
                   public lvarOffset: int[]
                   public lvarLength: int[]
                   public lvarIndex: int[]
                   public bound_index: int
                   public parameter_index: int
                   public type_index: int
                   public exception_index: int
                   public onLambda: com.sun.tools.javac.tree.JCTree$JCLambda
                   public constructor()
                   toString<T>(...args: any[]): any
                   public emitToClassfile(): boolean
                   public matchesPos(arg0: int): boolean
                   public updatePosOffset(arg0: int): void
                   public static getTypePathFromBinary(arg0: java.util.List<java.lang.Integer>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry>
                   public static getBinaryFromTypePath(arg0: java.util.List<com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry>): com.sun.tools.javac.util.List<java.lang.Integer>
               }
               class Symtab$1 implements com.sun.tools.javac.code.Symbol$Completer {
                   val$completer: com.sun.tools.javac.code.Symbol$Completer
                   this$0: com.sun.tools.javac.code.Symtab
                   constructor(arg0: com.sun.tools.javac.code.Symtab, arg1: com.sun.tools.javac.code.Symbol$Completer)
                   public complete(arg0: com.sun.tools.javac.code.Symbol): void
               }
               class Symtab$2 implements com.sun.tools.javac.code.Symbol$Completer {
                   val$completer: com.sun.tools.javac.code.Symbol$Completer
                   val$type: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.code.Symtab
                   constructor(arg0: com.sun.tools.javac.code.Symtab, arg1: com.sun.tools.javac.code.Symbol$Completer, arg2: com.sun.tools.javac.code.Type)
                   public complete(arg0: com.sun.tools.javac.code.Symbol): void
               }
               class Symtab$3 extends com.sun.tools.javac.code.Symbol$PackageSymbol {
                   val$messages: com.sun.tools.javac.util.JavacMessages
                   this$0: com.sun.tools.javac.code.Symtab
                   constructor(arg0: com.sun.tools.javac.code.Symtab, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.util.JavacMessages)
                   toString<T>(...args: any[]): any
               }
               class Symtab$4 extends com.sun.tools.javac.code.Symbol$TypeSymbol {
                   this$0: com.sun.tools.javac.code.Symtab
                   constructor(arg0: com.sun.tools.javac.code.Symtab, arg1: int, arg2: long, arg3: com.sun.tools.javac.util.Name, arg4: com.sun.tools.javac.code.Type, arg5: com.sun.tools.javac.code.Symbol)
                   public accept<R, P>(arg0: javax.lang.model.element.ElementVisitor<R, P>, arg1: P): R
               }
               class Symtab {
                   protected static symtabKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.code.Symtab>
                   public byteType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public charType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public shortType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public intType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public longType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public floatType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public doubleType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public booleanType: com.sun.tools.javac.code.Type$JCPrimitiveType
                   public botType: com.sun.tools.javac.code.Type
                   public voidType: com.sun.tools.javac.code.Type$JCVoidType
                   public rootPackage: com.sun.tools.javac.code.Symbol$PackageSymbol
                   public unnamedPackage: com.sun.tools.javac.code.Symbol$PackageSymbol
                   public noSymbol: com.sun.tools.javac.code.Symbol$TypeSymbol
                   public errSymbol: com.sun.tools.javac.code.Symbol$ClassSymbol
                   public unknownSymbol: com.sun.tools.javac.code.Symbol$ClassSymbol
                   public errType: com.sun.tools.javac.code.Type
                   public unknownType: com.sun.tools.javac.code.Type
                   public arrayClass: com.sun.tools.javac.code.Symbol$ClassSymbol
                   public arrayCloneMethod: com.sun.tools.javac.code.Symbol$MethodSymbol
                   public boundClass: com.sun.tools.javac.code.Symbol$ClassSymbol
                   public methodClass: com.sun.tools.javac.code.Symbol$ClassSymbol
                   public objectType: com.sun.tools.javac.code.Type
                   public classType: com.sun.tools.javac.code.Type
                   public classLoaderType: com.sun.tools.javac.code.Type
                   public stringType: com.sun.tools.javac.code.Type
                   public stringBufferType: com.sun.tools.javac.code.Type
                   public stringBuilderType: com.sun.tools.javac.code.Type
                   public cloneableType: com.sun.tools.javac.code.Type
                   public serializableType: com.sun.tools.javac.code.Type
                   public serializedLambdaType: com.sun.tools.javac.code.Type
                   public methodHandleType: com.sun.tools.javac.code.Type
                   public methodHandleLookupType: com.sun.tools.javac.code.Type
                   public methodTypeType: com.sun.tools.javac.code.Type
                   public nativeHeaderType: com.sun.tools.javac.code.Type
                   public throwableType: com.sun.tools.javac.code.Type
                   public errorType: com.sun.tools.javac.code.Type
                   public interruptedExceptionType: com.sun.tools.javac.code.Type
                   public illegalArgumentExceptionType: com.sun.tools.javac.code.Type
                   public exceptionType: com.sun.tools.javac.code.Type
                   public runtimeExceptionType: com.sun.tools.javac.code.Type
                   public classNotFoundExceptionType: com.sun.tools.javac.code.Type
                   public noClassDefFoundErrorType: com.sun.tools.javac.code.Type
                   public noSuchFieldErrorType: com.sun.tools.javac.code.Type
                   public assertionErrorType: com.sun.tools.javac.code.Type
                   public cloneNotSupportedExceptionType: com.sun.tools.javac.code.Type
                   public annotationType: com.sun.tools.javac.code.Type
                   public enumSym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   public listType: com.sun.tools.javac.code.Type
                   public collectionsType: com.sun.tools.javac.code.Type
                   public comparableType: com.sun.tools.javac.code.Type
                   public comparatorType: com.sun.tools.javac.code.Type
                   public arraysType: com.sun.tools.javac.code.Type
                   public iterableType: com.sun.tools.javac.code.Type
                   public iteratorType: com.sun.tools.javac.code.Type
                   public annotationTargetType: com.sun.tools.javac.code.Type
                   public overrideType: com.sun.tools.javac.code.Type
                   public retentionType: com.sun.tools.javac.code.Type
                   public deprecatedType: com.sun.tools.javac.code.Type
                   public suppressWarningsType: com.sun.tools.javac.code.Type
                   public inheritedType: com.sun.tools.javac.code.Type
                   public profileType: com.sun.tools.javac.code.Type
                   public proprietaryType: com.sun.tools.javac.code.Type
                   public systemType: com.sun.tools.javac.code.Type
                   public autoCloseableType: com.sun.tools.javac.code.Type
                   public trustMeType: com.sun.tools.javac.code.Type
                   public lambdaMetafactory: com.sun.tools.javac.code.Type
                   public repeatableType: com.sun.tools.javac.code.Type
                   public documentedType: com.sun.tools.javac.code.Type
                   public elementTypeType: com.sun.tools.javac.code.Type
                   public functionalInterfaceType: com.sun.tools.javac.code.Type
                   public lengthVar: com.sun.tools.javac.code.Symbol$VarSymbol
                   public nullcheck: com.sun.tools.javac.code.Symbol$OperatorSymbol
                   public enumFinalFinalize: com.sun.tools.javac.code.Symbol$MethodSymbol
                   public autoCloseableClose: com.sun.tools.javac.code.Symbol$MethodSymbol
                   public typeOfTag: com.sun.tools.javac.code.Type[]
                   public boxedName: com.sun.tools.javac.util.Name[]
                   public operatorNames: java.util.Set<com.sun.tools.javac.util.Name>
                   public classes: java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$ClassSymbol>
                   public packages: java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$PackageSymbol>
                   public predefClass: com.sun.tools.javac.code.Symbol$ClassSymbol
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.code.Symtab
                   initType<T>(...args: any[]): any
                   public synthesizeEmptyInterfaceIfMissing(arg0: com.sun.tools.javac.code.Type): void
                   public synthesizeBoxTypeIfMissing(arg0: com.sun.tools.javac.code.Type): void
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   static access$000(arg0: com.sun.tools.javac.code.Symtab): com.sun.tools.javac.jvm.Target
                   static access$100(arg0: com.sun.tools.javac.code.Symtab): com.sun.tools.javac.util.Names
               }
               class TargetType extends java.lang.Enum<com.sun.tools.javac.code.TargetType> {
                   public static CLASS_TYPE_PARAMETER: com.sun.tools.javac.code.TargetType
                   public static METHOD_TYPE_PARAMETER: com.sun.tools.javac.code.TargetType
                   public static CLASS_EXTENDS: com.sun.tools.javac.code.TargetType
                   public static CLASS_TYPE_PARAMETER_BOUND: com.sun.tools.javac.code.TargetType
                   public static METHOD_TYPE_PARAMETER_BOUND: com.sun.tools.javac.code.TargetType
                   public static FIELD: com.sun.tools.javac.code.TargetType
                   public static METHOD_RETURN: com.sun.tools.javac.code.TargetType
                   public static METHOD_RECEIVER: com.sun.tools.javac.code.TargetType
                   public static METHOD_FORMAL_PARAMETER: com.sun.tools.javac.code.TargetType
                   public static THROWS: com.sun.tools.javac.code.TargetType
                   public static LOCAL_VARIABLE: com.sun.tools.javac.code.TargetType
                   public static RESOURCE_VARIABLE: com.sun.tools.javac.code.TargetType
                   public static EXCEPTION_PARAMETER: com.sun.tools.javac.code.TargetType
                   public static INSTANCEOF: com.sun.tools.javac.code.TargetType
                   public static NEW: com.sun.tools.javac.code.TargetType
                   public static CONSTRUCTOR_REFERENCE: com.sun.tools.javac.code.TargetType
                   public static METHOD_REFERENCE: com.sun.tools.javac.code.TargetType
                   public static CAST: com.sun.tools.javac.code.TargetType
                   public static CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: com.sun.tools.javac.code.TargetType
                   public static METHOD_INVOCATION_TYPE_ARGUMENT: com.sun.tools.javac.code.TargetType
                   public static CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: com.sun.tools.javac.code.TargetType
                   public static METHOD_REFERENCE_TYPE_ARGUMENT: com.sun.tools.javac.code.TargetType
                   public static UNKNOWN: com.sun.tools.javac.code.TargetType
                   public static values(): com.sun.tools.javac.code.TargetType[]
                   valueOf<T>(...args: any[]): any
                   public isLocal(): boolean
                   public targetTypeValue(): int
                   public static isValidTargetTypeValue(arg0: int): boolean
                   public static fromTargetTypeValue(arg0: int): com.sun.tools.javac.code.TargetType
               }
               class TypeAnnotations$1 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$env: com.sun.tools.javac.comp.Env
                   val$tree: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   this$0: com.sun.tools.javac.code.TypeAnnotations
                   constructor(arg0: com.sun.tools.javac.code.TypeAnnotations, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.tree.JCTree$JCClassDecl)
                   public run(): void
               }
               class TypeAnnotations$2 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$env: com.sun.tools.javac.comp.Env
                   val$tree: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   this$0: com.sun.tools.javac.code.TypeAnnotations
                   constructor(arg0: com.sun.tools.javac.code.TypeAnnotations, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.tree.JCTree$JCClassDecl)
                   public run(): void
               }
               class TypeAnnotations$AnnotationType extends java.lang.Enum<com.sun.tools.javac.code.TypeAnnotations$AnnotationType> {
                   public static DECLARATION: com.sun.tools.javac.code.TypeAnnotations$AnnotationType
                   public static TYPE: com.sun.tools.javac.code.TypeAnnotations$AnnotationType
                   public static BOTH: com.sun.tools.javac.code.TypeAnnotations$AnnotationType
                   public static values(): com.sun.tools.javac.code.TypeAnnotations$AnnotationType[]
                   valueOf<T>(...args: any[]): any
               }
               class TypeAnnotations$TypeAnnotationPositions$1 implements com.sun.tools.javac.code.Type$Visitor<com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>> {
                   val$stopAt: com.sun.tools.javac.code.Type
                   this$1: com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions
                   constructor(arg0: com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions, arg1: com.sun.tools.javac.code.Type)
                   visitClassType<T>(...args: any[]): any
                   visitAnnotatedType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitPackageType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitCapturedType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
               }
               class TypeAnnotations$TypeAnnotationPositions extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.code.TypeAnnotations
                   constructor(arg0: com.sun.tools.javac.code.TypeAnnotations, arg1: boolean)
                   protected push(arg0: com.sun.tools.javac.tree.JCTree): void
                   protected pop(): com.sun.tools.javac.tree.JCTree
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   toString<T>(...args: any[]): any
               }
               class TypeAnnotations$3 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeAnnotations$AnnotationType: int[]
                   static $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode: int[]
                   static $SwitchMap$javax$lang$model$element$ElementKind: int[]
                   static $SwitchMap$com$sun$source$tree$Tree$Kind: int[]
               }
               class TypeAnnotations {
                   protected static typeAnnosKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.code.TypeAnnotations>
                   log: com.sun.tools.javac.util.Log
                   names: com.sun.tools.javac.util.Names
                   syms: com.sun.tools.javac.code.Symtab
                   annotate: com.sun.tools.javac.comp.Annotate
                   attr: com.sun.tools.javac.comp.Attr
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.code.TypeAnnotations
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public organizeTypeAnnotationsSignatures(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public validateTypeAnnotationsSignatures(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public organizeTypeAnnotationsBodies(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public annotationType(arg0: com.sun.tools.javac.code.Attribute$Compound, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.TypeAnnotations$AnnotationType
               }
               interface DeferredLintHandler$LintLogger {
                   public report(): void
               }
               class DeferredLintHandler$1 implements com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition {
                   constructor()
                   public getTree(): com.sun.tools.javac.tree.JCTree
                   public getStartPosition(): int
                   public getPreferredPosition(): int
                   public getEndPosition(arg0: com.sun.tools.javac.tree.EndPosTable): int
               }
               class DeferredLintHandler {
                   protected static deferredLintHandlerKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.code.DeferredLintHandler>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.code.DeferredLintHandler
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public report(arg0: com.sun.tools.javac.code.DeferredLintHandler$LintLogger): void
                   public flush(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): void
                   public setPos(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   public immediate(): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
               }
               class Printer$1 extends com.sun.tools.javac.code.Printer {
                   val$messages: com.sun.tools.javac.api.Messages
                   constructor(arg0: com.sun.tools.javac.api.Messages)
                   protected localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                   protected capturedVarId(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: java.util.Locale): java.lang.String
                   public visitType(arg0: com.sun.tools.javac.code.Type, arg1: java.lang.Object): java.lang.Object
                   public visitAnnotatedType(arg0: com.sun.tools.javac.code.Type$AnnotatedType, arg1: java.lang.Object): java.lang.Object
                   public visitErrorType(arg0: com.sun.tools.javac.code.Type$ErrorType, arg1: java.lang.Object): java.lang.Object
                   public visitUndetVar(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: java.lang.Object): java.lang.Object
                   public visitForAll(arg0: com.sun.tools.javac.code.Type$ForAll, arg1: java.lang.Object): java.lang.Object
                   public visitCapturedType(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: java.lang.Object): java.lang.Object
                   public visitTypeVar(arg0: com.sun.tools.javac.code.Type$TypeVar, arg1: java.lang.Object): java.lang.Object
                   public visitPackageType(arg0: com.sun.tools.javac.code.Type$PackageType, arg1: java.lang.Object): java.lang.Object
                   public visitMethodType(arg0: com.sun.tools.javac.code.Type$MethodType, arg1: java.lang.Object): java.lang.Object
                   public visitArrayType(arg0: com.sun.tools.javac.code.Type$ArrayType, arg1: java.lang.Object): java.lang.Object
                   public visitWildcardType(arg0: com.sun.tools.javac.code.Type$WildcardType, arg1: java.lang.Object): java.lang.Object
                   public visitClassType(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: java.lang.Object): java.lang.Object
                   public visitSymbol(arg0: com.sun.tools.javac.code.Symbol, arg1: java.lang.Object): java.lang.Object
                   public visitTypeSymbol(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: java.lang.Object): java.lang.Object
                   public visitVarSymbol(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: java.lang.Object): java.lang.Object
                   public visitOperatorSymbol(arg0: com.sun.tools.javac.code.Symbol$OperatorSymbol, arg1: java.lang.Object): java.lang.Object
                   public visitPackageSymbol(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: java.lang.Object): java.lang.Object
                   public visitMethodSymbol(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: java.lang.Object): java.lang.Object
                   public visitClassSymbol(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: java.lang.Object): java.lang.Object
               }
               abstract class Printer implements com.sun.tools.javac.code.Type$Visitor<java.lang.String, java.util.Locale> , com.sun.tools.javac.code.Symbol$Visitor<java.lang.String, java.util.Locale> {
                   seenCaptured: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   static PRIME: int
                   protected constructor()
                   protected localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                   protected capturedVarId(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: java.util.Locale): java.lang.String
                   public static createStandardPrinter(arg0: com.sun.tools.javac.api.Messages): com.sun.tools.javac.code.Printer
                   public visitTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: java.util.Locale): java.lang.String
                   public visitSymbols(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>, arg1: java.util.Locale): java.lang.String
                   visit<T>(...args: any[]): any
                   visitCapturedType<T>(...args: any[]): any
                   visitForAll<T>(...args: any[]): any
                   visitUndetVar<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   printBaseElementType(arg0: com.sun.tools.javac.code.Type, arg1: java.lang.StringBuilder, arg2: java.util.Locale): void
                   printBrackets(arg0: com.sun.tools.javac.code.Type, arg1: java.lang.StringBuilder, arg2: java.util.Locale): void
                   visitClassType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitPackageType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitAnnotatedType<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
                   protected className(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: boolean, arg2: java.util.Locale): java.lang.String
                   protected printMethodArgs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean, arg2: java.util.Locale): java.lang.String
                   visitClassSymbol<T>(...args: any[]): any
                   visitMethodSymbol<T>(...args: any[]): any
                   visitOperatorSymbol<T>(...args: any[]): any
                   visitPackageSymbol<T>(...args: any[]): any
                   visitTypeSymbol<T>(...args: any[]): any
                   visitVarSymbol<T>(...args: any[]): any
                   visitSymbol<T>(...args: any[]): any
               }

            }
            namespace api {
               class Formattable$LocalizedString implements com.sun.tools.javac.api.Formattable {
                   key: java.lang.String
                   public constructor(arg0: java.lang.String)
                   toString<T>(...args: any[]): any
                   public getKind(): java.lang.String
               }
               interface Formattable {
                   toString<T>(...args: any[]): any
                   public getKind(): java.lang.String
               }
               class JavacTool$1 extends com.sun.tools.javac.main.OptionHelper$GrumpyHelper {
                   val$optionTable: com.sun.tools.javac.util.Options
                   constructor(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.util.Options)
                   public get(arg0: com.sun.tools.javac.main.Option): java.lang.String
                   public put(arg0: java.lang.String, arg1: java.lang.String): void
                   public remove(arg0: java.lang.String): void
               }
               class JavacTool implements javax.tools.JavaCompiler {
                   public constructor()
                   public static create(): com.sun.tools.javac.api.JavacTool
                   getStandardFileManager<T>(...args: any[]): any
                   getTask<T>(...args: any[]): any
                   public static processOptions(arg0: com.sun.tools.javac.util.Context, arg1: javax.tools.JavaFileManager, arg2: java.lang.Iterable<java.lang.String>): void
                   public run(arg0: java.io.InputStream, arg1: java.io.OutputStream, arg2: java.io.OutputStream, ...arg3: java.lang.String[]): int
                   public getSourceVersions(): java.util.Set<javax.lang.model.SourceVersion>
                   public isSupportedOption(arg0: java.lang.String): int
               }
               class DiagnosticFormatter$PositionKind extends java.lang.Enum<com.sun.tools.javac.api.DiagnosticFormatter$PositionKind> {
                   public static START: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind
                   public static END: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind
                   public static LINE: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind
                   public static COLUMN: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind
                   public static OFFSET: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind
                   public static values(): com.sun.tools.javac.api.DiagnosticFormatter$PositionKind[]
                   valueOf<T>(...args: any[]): any
               }
               class DiagnosticFormatter$Configuration$DiagnosticPart extends java.lang.Enum<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart> {
                   public static SUMMARY: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart
                   public static DETAILS: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart
                   public static SOURCE: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart
                   public static SUBDIAGNOSTICS: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart
                   public static JLS: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart
                   public static values(): com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart[]
                   valueOf<T>(...args: any[]): any
               }
               class DiagnosticFormatter$Configuration$MultilineLimit extends java.lang.Enum<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit> {
                   public static DEPTH: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit
                   public static LENGTH: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit
                   public static values(): com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit[]
                   valueOf<T>(...args: any[]): any
               }
               interface DiagnosticFormatter$Configuration {
                   public setVisible(arg0: java.util.Set<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart>): void
                   public getVisible(): java.util.Set<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart>
                   public setMultilineLimit(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit, arg1: int): void
                   public getMultilineLimit(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit): int
               }
               interface Diagnostic<any>> {
                   public displaySource(arg0: D): boolean
                   public format(arg0: D, arg1: java.util.Locale): java.lang.String
                   public formatMessage(arg0: D, arg1: java.util.Locale): java.lang.String
                   public formatKind(arg0: D, arg1: java.util.Locale): java.lang.String
                   public formatSource(arg0: D, arg1: boolean, arg2: java.util.Locale): java.lang.String
                   public formatPosition(arg0: D, arg1: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind, arg2: java.util.Locale): java.lang.String
                   public getConfiguration(): com.sun.tools.javac.api.DiagnosticFormatter$Configuration
               }
               interface Messages {
                   public add(arg0: java.lang.String): void
                   public getLocalizedString(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
               }
               class MultiTaskListener implements com.sun.source.util.TaskListener {
                   public static taskListenerKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.api.MultiTaskListener>
                   listeners: com.sun.source.util.TaskListener[]
                   ccw: com.sun.tools.javac.api.ClientCodeWrapper
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.api.MultiTaskListener
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public getTaskListeners(): java.util.Collection<com.sun.source.util.TaskListener>
                   public isEmpty(): boolean
                   public add(arg0: com.sun.source.util.TaskListener): void
                   public remove(arg0: com.sun.source.util.TaskListener): void
                   public started(arg0: com.sun.source.util.TaskEvent): void
                   public finished(arg0: com.sun.source.util.TaskEvent): void
                   toString<T>(...args: any[]): any
               }
               interface ClientCodeWrapper$Trusted extends java.lang.annotation.Annotation {
               }
               class ClientCodeWrapper$WrappedJavaFileManager implements javax.tools.JavaFileManager {
                   protected clientJavaFileManager: javax.tools.JavaFileManager
                   this$0: com.sun.tools.javac.api.ClientCodeWrapper
                   constructor(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: javax.tools.JavaFileManager)
                   public getClassLoader(arg0: javax.tools.JavaFileManager$Location): java.lang.ClassLoader
                   public list(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.util.Set<javax.tools.JavaFileObject$Kind>, arg3: boolean): java.lang.Iterable<javax.tools.JavaFileObject>
                   public inferBinaryName(arg0: javax.tools.JavaFileManager$Location, arg1: javax.tools.JavaFileObject): java.lang.String
                   public isSameFile(arg0: javax.tools.FileObject, arg1: javax.tools.FileObject): boolean
                   public handleOption(arg0: java.lang.String, arg1: java.util.Iterator<java.lang.String>): boolean
                   public hasLocation(arg0: javax.tools.JavaFileManager$Location): boolean
                   public getJavaFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind): javax.tools.JavaFileObject
                   public getJavaFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind, arg3: javax.tools.FileObject): javax.tools.JavaFileObject
                   public getFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.lang.String): javax.tools.FileObject
                   public getFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.lang.String, arg3: javax.tools.FileObject): javax.tools.FileObject
                   public flush(): void
                   public close(): void
                   public isSupportedOption(arg0: java.lang.String): int
                   toString<T>(...args: any[]): any
               }
               class ClientCodeWrapper$WrappedFileObject implements javax.tools.FileObject {
                   protected clientFileObject: javax.tools.FileObject
                   this$0: com.sun.tools.javac.api.ClientCodeWrapper
                   constructor(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: javax.tools.FileObject)
                   public toUri(): java.net.URI
                   public getName(): java.lang.String
                   public openInputStream(): java.io.InputStream
                   public openOutputStream(): java.io.OutputStream
                   public openReader(arg0: boolean): java.io.Reader
                   public getCharContent(arg0: boolean): java.lang.CharSequence
                   public openWriter(): java.io.Writer
                   public getLastModified(): long
                   public delete(): boolean
                   toString<T>(...args: any[]): any
               }
               class ClientCodeWrapper$WrappedJavaFileObject extends com.sun.tools.javac.api.ClientCodeWrapper$WrappedFileObject implements javax.tools.JavaFileObject {
                   this$0: com.sun.tools.javac.api.ClientCodeWrapper
                   constructor(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: javax.tools.JavaFileObject)
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public getNestingKind(): javax.lang.model.element.NestingKind
                   public getAccessLevel(): javax.lang.model.element.Modifier
                   toString<T>(...args: any[]): any
               }
               class ClientCodeWrapper$WrappedDiagnosticListener<T> implements javax.tools.DiagnosticListener<T> {
                   protected clientDiagnosticListener: javax.tools.DiagnosticListener<T>
                   this$0: com.sun.tools.javac.api.ClientCodeWrapper
                   constructor(arg0: javax.tools.DiagnosticListener<T>)
                   public report(arg0: javax.tools.Diagnostic<T>): void
                   toString<T>(...args: any[]): any
               }
               class ClientCodeWrapper$DiagnosticSourceUnwrapper implements javax.tools.Diagnostic<javax.tools.JavaFileObject> {
                   public d: com.sun.tools.javac.util.JCDiagnostic
                   this$0: com.sun.tools.javac.api.ClientCodeWrapper
                   constructor(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: com.sun.tools.javac.util.JCDiagnostic)
                   public getKind(): javax.tools.Diagnostic$Kind
                   getSource<T>(...args: any[]): any
                   public getPosition(): long
                   public getStartPosition(): long
                   public getEndPosition(): long
                   public getLineNumber(): long
                   public getColumnNumber(): long
                   public getCode(): java.lang.String
                   public getMessage(arg0: java.util.Locale): java.lang.String
                   toString<T>(...args: any[]): any
               }
               class ClientCodeWrapper$WrappedTaskListener implements com.sun.source.util.TaskListener {
                   protected clientTaskListener: com.sun.source.util.TaskListener
                   this$0: com.sun.tools.javac.api.ClientCodeWrapper
                   constructor(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: com.sun.source.util.TaskListener)
                   public started(arg0: com.sun.source.util.TaskEvent): void
                   public finished(arg0: com.sun.source.util.TaskEvent): void
                   toString<T>(...args: any[]): any
               }
               class ClientCodeWrapper {
                   trustedClasses: java.util.Map<java.lang.Class<any>, java.lang.Boolean>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.api.ClientCodeWrapper
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   wrap<T>(...args: any[]): any
                   unwrap<T>(...args: any[]): any
                   public wrapJavaFileObjects(arg0: java.lang.Iterable<javax.tools.JavaFileObject>): java.lang.Iterable<javax.tools.JavaFileObject>
                   protected isTrusted(arg0: java.lang.Object): boolean
                   static access$000(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: java.lang.Class, arg2: java.lang.Object): java.lang.String
                   static access$100(arg0: com.sun.tools.javac.api.ClientCodeWrapper, arg1: javax.tools.Diagnostic): javax.tools.Diagnostic
               }
               class JavaFileManager> extends javax.tools.ForwardingJavaFileManager<M> {
                   protected constructor(arg0: M)
                   wrap<T>(...args: any[]): any
                   unwrap<T>(...args: any[]): any
                   public list(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.util.Set<javax.tools.JavaFileObject$Kind>, arg3: boolean): java.lang.Iterable<javax.tools.JavaFileObject>
                   public inferBinaryName(arg0: javax.tools.JavaFileManager$Location, arg1: javax.tools.JavaFileObject): java.lang.String
                   public getJavaFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind): javax.tools.JavaFileObject
                   public getJavaFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind, arg3: javax.tools.FileObject): javax.tools.JavaFileObject
                   public getFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.lang.String): javax.tools.FileObject
                   public getFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.lang.String, arg3: javax.tools.FileObject): javax.tools.FileObject
               }
               class JavacTrees$1 implements com.sun.source.util.DocSourcePositions {
                   this$0: com.sun.tools.javac.api.JavacTrees
                   constructor(arg0: com.sun.tools.javac.api.JavacTrees)
                   getStartPosition<T>(...args: any[]): any
                   getEndPosition<T>(...args: any[]): any
               }
               class JavacTrees$2 extends com.sun.source.util.DocTreeScanner<java.lang.Void, java.lang.Void> {
                   val$last: com.sun.source.doctree.DocTree[]
                   this$0: com.sun.tools.javac.api.JavacTrees
                   constructor(arg0: com.sun.tools.javac.api.JavacTrees, arg1: com.sun.source.doctree.DocTree[])
                   scan<T>(...args: any[]): any
               }
               class JavacTrees$3 extends com.sun.tools.javac.code.Types$TypeRelation {
                   this$0: com.sun.tools.javac.api.JavacTrees
                   constructor(arg0: com.sun.tools.javac.api.JavacTrees)
                   visitType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
               }
               class JavacTrees$Copier extends com.sun.tools.javac.tree.TreeCopier<com.sun.tools.javac.tree.JCTree> {
                   leafCopy: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.tree.TreeMaker)
                   copy<T>(...args: any[]): any
               }
               class JavacTrees$4 {
                   static $SwitchMap$com$sun$source$doctree$DocTree$Kind: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
                   static $SwitchMap$com$sun$source$tree$Tree$Kind: int[]
                   static $SwitchMap$javax$tools$Diagnostic$Kind: int[]
               }
               class JavacTrees extends com.sun.source.util.DocTrees {
                   fuzzyMatcher: com.sun.tools.javac.code.Types$TypeRelation
                   instance<T>(...args: any[]): any
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public updateContext(arg0: com.sun.tools.javac.util.Context): void
                   getSourcePositions<T>(...args: any[]): any
                   getTree<T>(...args: any[]): any
                   getPath<T>(...args: any[]): any
                   getElement<T>(...args: any[]): any
                   findConstructor(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol$MethodSymbol
                   fuzzyMatch<T>(...args: any[]): any
                   public getTypeMirror(arg0: com.sun.source.util.TreePath): javax.lang.model.type.TypeMirror
                   getScope<T>(...args: any[]): any
                   public getDocComment(arg0: com.sun.source.util.TreePath): java.lang.String
                   public getDocCommentTree(arg0: com.sun.source.util.TreePath): com.sun.source.doctree.DocCommentTree
                   isAccessible<T>(...args: any[]): any
                   protected createCopier(arg0: com.sun.tools.javac.tree.TreeMaker): com.sun.tools.javac.api.JavacTrees$Copier
                   public getOriginalType(arg0: javax.lang.model.type.ErrorType): javax.lang.model.type.TypeMirror
                   printMessage<T>(...args: any[]): any
                   public getLub(arg0: com.sun.source.tree.CatchTree): javax.lang.model.type.TypeMirror
                   static access$000(arg0: com.sun.tools.javac.api.JavacTrees): com.sun.tools.javac.util.Names
                   static access$100(arg0: com.sun.tools.javac.api.JavacTrees, arg1: com.sun.source.doctree.DocTree): com.sun.source.doctree.DocTree
                   static access$200(arg0: com.sun.tools.javac.api.JavacTrees): com.sun.tools.javac.code.Types
               }
               class JavacTaskImpl$1 extends com.sun.tools.javac.api.JavacTaskImpl$Filter {
                   val$results: com.sun.tools.javac.util.ListBuffer
                   this$0: com.sun.tools.javac.api.JavacTaskImpl
                   constructor(arg0: com.sun.tools.javac.api.JavacTaskImpl, arg1: com.sun.tools.javac.util.ListBuffer)
                   public process(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
               }
               class JavacTaskImpl$2 extends com.sun.tools.javac.api.JavacTaskImpl$Filter {
                   val$results: com.sun.tools.javac.util.ListBuffer
                   this$0: com.sun.tools.javac.api.JavacTaskImpl
                   constructor(arg0: com.sun.tools.javac.api.JavacTaskImpl, arg1: com.sun.tools.javac.util.ListBuffer)
                   public process(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
               }
               abstract class JavacTaskImpl$Filter {
                   this$0: com.sun.tools.javac.api.JavacTaskImpl
                   constructor(arg0: com.sun.tools.javac.api.JavacTaskImpl)
                   run(arg0: java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>, arg1: java.lang.Iterable<javax.lang.model.element.TypeElement>): void
                   process(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
               }
               class JavacTaskImpl$3 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class JavacTaskImpl extends com.sun.tools.javac.api.BasicJavacTask {
                   constructor(...args: any[])
                   public doCall(): com.sun.tools.javac.main.Main$Result
                   call<T>(...args: any[]): any
                   public setProcessors(arg0: java.lang.Iterable<javax.annotation.processing.Processor>): void
                   public setLocale(arg0: java.util.Locale): void
                   toString<T>(...args: any[]): any
                   cleanup(): void
                   public asJavaFileObject(arg0: java.io.File): javax.tools.JavaFileObject
                   public parse(): java.lang.Iterable<com.sun.source.tree.CompilationUnitTree>
                   enter<T>(...args: any[]): any
                   analyze<T>(...args: any[]): any
                   generate<T>(...args: any[]): any
                   public getTypeMirror(arg0: java.lang.Iterable<com.sun.source.tree.Tree>): javax.lang.model.type.TypeMirror
                   getElements<T>(...args: any[]): any
                   getTypes<T>(...args: any[]): any
                   public pathFor(arg0: com.sun.source.tree.CompilationUnitTree, arg1: com.sun.source.tree.Tree): java.lang.Iterable<com.sun.source.tree.Tree>
                   public parseType(arg0: java.lang.String, arg1: javax.lang.model.element.TypeElement): com.sun.tools.javac.code.Type
                   static access$000(arg0: com.sun.tools.javac.api.JavacTaskImpl): com.sun.tools.javac.main.JavaCompiler
                   static access$100(arg0: com.sun.tools.javac.api.JavacTaskImpl, arg1: java.util.Queue, arg2: com.sun.tools.javac.util.ListBuffer): void
               }
               class BasicJavacTask extends com.sun.source.util.JavacTask {
                   protected context: com.sun.tools.javac.util.Context
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.source.util.JavacTask
                   public constructor(arg0: com.sun.tools.javac.util.Context, arg1: boolean)
                   public parse(): java.lang.Iterable<com.sun.source.tree.CompilationUnitTree>
                   public analyze(): java.lang.Iterable<javax.lang.model.element.Element>
                   public generate(): java.lang.Iterable<javax.tools.JavaFileObject>
                   public setTaskListener(arg0: com.sun.source.util.TaskListener): void
                   public addTaskListener(arg0: com.sun.source.util.TaskListener): void
                   public removeTaskListener(arg0: com.sun.source.util.TaskListener): void
                   public getTaskListeners(): java.util.Collection<com.sun.source.util.TaskListener>
                   public getTypeMirror(arg0: java.lang.Iterable<com.sun.source.tree.Tree>): javax.lang.model.type.TypeMirror
                   public getElements(): javax.lang.model.util.Elements
                   public getTypes(): javax.lang.model.util.Types
                   public setProcessors(arg0: java.lang.Iterable<javax.annotation.processing.Processor>): void
                   public setLocale(arg0: java.util.Locale): void
                   call<T>(...args: any[]): any
                   public getContext(): com.sun.tools.javac.util.Context
                   public updateContext(arg0: com.sun.tools.javac.util.Context): void
               }
               class JavacScope$1 extends com.sun.tools.javac.api.JavacScope {
                   this$0: com.sun.tools.javac.api.JavacScope
                   constructor(arg0: com.sun.tools.javac.api.JavacScope, arg1: com.sun.tools.javac.comp.Env)
                   public isStarImportScope(): boolean
                   getEnclosingScope<T>(...args: any[]): any
                   public getLocalElements(): java.lang.Iterable<javax.lang.model.element.Element>
               }
               class JavacScope implements com.sun.source.tree.Scope {
                   protected env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   constructor(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>)
                   getEnclosingScope<T>(...args: any[]): any
                   public getEnclosingClass(): javax.lang.model.element.TypeElement
                   public getEnclosingMethod(): javax.lang.model.element.ExecutableElement
                   public getLocalElements(): java.lang.Iterable<javax.lang.model.element.Element>
                   public getEnv(): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public isStarImportScope(): boolean
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   toString<T>(...args: any[]): any
               }

            }
            namespace tree {
               class JCTree$Tag extends java.lang.Enum<com.sun.tools.javac.tree.JCTree$Tag> {
                   public static NO_TAG: com.sun.tools.javac.tree.JCTree$Tag
                   public static TOPLEVEL: com.sun.tools.javac.tree.JCTree$Tag
                   public static IMPORT: com.sun.tools.javac.tree.JCTree$Tag
                   public static CLASSDEF: com.sun.tools.javac.tree.JCTree$Tag
                   public static METHODDEF: com.sun.tools.javac.tree.JCTree$Tag
                   public static VARDEF: com.sun.tools.javac.tree.JCTree$Tag
                   public static SKIP: com.sun.tools.javac.tree.JCTree$Tag
                   public static BLOCK: com.sun.tools.javac.tree.JCTree$Tag
                   public static DOLOOP: com.sun.tools.javac.tree.JCTree$Tag
                   public static WHILELOOP: com.sun.tools.javac.tree.JCTree$Tag
                   public static FORLOOP: com.sun.tools.javac.tree.JCTree$Tag
                   public static FOREACHLOOP: com.sun.tools.javac.tree.JCTree$Tag
                   public static LABELLED: com.sun.tools.javac.tree.JCTree$Tag
                   public static SWITCH: com.sun.tools.javac.tree.JCTree$Tag
                   public static CASE: com.sun.tools.javac.tree.JCTree$Tag
                   public static SYNCHRONIZED: com.sun.tools.javac.tree.JCTree$Tag
                   public static TRY: com.sun.tools.javac.tree.JCTree$Tag
                   public static CATCH: com.sun.tools.javac.tree.JCTree$Tag
                   public static CONDEXPR: com.sun.tools.javac.tree.JCTree$Tag
                   public static IF: com.sun.tools.javac.tree.JCTree$Tag
                   public static EXEC: com.sun.tools.javac.tree.JCTree$Tag
                   public static BREAK: com.sun.tools.javac.tree.JCTree$Tag
                   public static CONTINUE: com.sun.tools.javac.tree.JCTree$Tag
                   public static RETURN: com.sun.tools.javac.tree.JCTree$Tag
                   public static THROW: com.sun.tools.javac.tree.JCTree$Tag
                   public static ASSERT: com.sun.tools.javac.tree.JCTree$Tag
                   public static APPLY: com.sun.tools.javac.tree.JCTree$Tag
                   public static NEWCLASS: com.sun.tools.javac.tree.JCTree$Tag
                   public static NEWARRAY: com.sun.tools.javac.tree.JCTree$Tag
                   public static LAMBDA: com.sun.tools.javac.tree.JCTree$Tag
                   public static PARENS: com.sun.tools.javac.tree.JCTree$Tag
                   public static ASSIGN: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPECAST: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPETEST: com.sun.tools.javac.tree.JCTree$Tag
                   public static INDEXED: com.sun.tools.javac.tree.JCTree$Tag
                   public static SELECT: com.sun.tools.javac.tree.JCTree$Tag
                   public static REFERENCE: com.sun.tools.javac.tree.JCTree$Tag
                   public static IDENT: com.sun.tools.javac.tree.JCTree$Tag
                   public static LITERAL: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEIDENT: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEARRAY: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEAPPLY: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEUNION: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEINTERSECTION: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEPARAMETER: com.sun.tools.javac.tree.JCTree$Tag
                   public static WILDCARD: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPEBOUNDKIND: com.sun.tools.javac.tree.JCTree$Tag
                   public static ANNOTATION: com.sun.tools.javac.tree.JCTree$Tag
                   public static TYPE_ANNOTATION: com.sun.tools.javac.tree.JCTree$Tag
                   public static MODIFIERS: com.sun.tools.javac.tree.JCTree$Tag
                   public static ANNOTATED_TYPE: com.sun.tools.javac.tree.JCTree$Tag
                   public static ERRONEOUS: com.sun.tools.javac.tree.JCTree$Tag
                   public static POS: com.sun.tools.javac.tree.JCTree$Tag
                   public static NEG: com.sun.tools.javac.tree.JCTree$Tag
                   public static NOT: com.sun.tools.javac.tree.JCTree$Tag
                   public static COMPL: com.sun.tools.javac.tree.JCTree$Tag
                   public static PREINC: com.sun.tools.javac.tree.JCTree$Tag
                   public static PREDEC: com.sun.tools.javac.tree.JCTree$Tag
                   public static POSTINC: com.sun.tools.javac.tree.JCTree$Tag
                   public static POSTDEC: com.sun.tools.javac.tree.JCTree$Tag
                   public static NULLCHK: com.sun.tools.javac.tree.JCTree$Tag
                   public static OR: com.sun.tools.javac.tree.JCTree$Tag
                   public static AND: com.sun.tools.javac.tree.JCTree$Tag
                   public static BITOR: com.sun.tools.javac.tree.JCTree$Tag
                   public static BITXOR: com.sun.tools.javac.tree.JCTree$Tag
                   public static BITAND: com.sun.tools.javac.tree.JCTree$Tag
                   public static EQ: com.sun.tools.javac.tree.JCTree$Tag
                   public static NE: com.sun.tools.javac.tree.JCTree$Tag
                   public static LT: com.sun.tools.javac.tree.JCTree$Tag
                   public static GT: com.sun.tools.javac.tree.JCTree$Tag
                   public static LE: com.sun.tools.javac.tree.JCTree$Tag
                   public static GE: com.sun.tools.javac.tree.JCTree$Tag
                   public static SL: com.sun.tools.javac.tree.JCTree$Tag
                   public static SR: com.sun.tools.javac.tree.JCTree$Tag
                   public static USR: com.sun.tools.javac.tree.JCTree$Tag
                   public static PLUS: com.sun.tools.javac.tree.JCTree$Tag
                   public static MINUS: com.sun.tools.javac.tree.JCTree$Tag
                   public static MUL: com.sun.tools.javac.tree.JCTree$Tag
                   public static DIV: com.sun.tools.javac.tree.JCTree$Tag
                   public static MOD: com.sun.tools.javac.tree.JCTree$Tag
                   public static BITOR_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static BITXOR_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static BITAND_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static SL_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static SR_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static USR_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static PLUS_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static MINUS_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static MUL_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static DIV_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static MOD_ASG: com.sun.tools.javac.tree.JCTree$Tag
                   public static LETEXPR: com.sun.tools.javac.tree.JCTree$Tag
                   public static values(): com.sun.tools.javac.tree.JCTree$Tag[]
                   valueOf<T>(...args: any[]): any
                   public static getNumberOfOperators(): int
                   public noAssignOp(): com.sun.tools.javac.tree.JCTree$Tag
                   public isPostUnaryOp(): boolean
                   public isIncOrDecUnaryOp(): boolean
                   public isAssignop(): boolean
                   public operatorIndex(): int
               }
               class JCTree$JCCompilationUnit extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.CompilationUnitTree {
                   public packageAnnotations: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   public pid: com.sun.tools.javac.tree.JCTree$JCExpression
                   public defs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   public sourcefile: javax.tools.JavaFileObject
                   public packge: com.sun.tools.javac.code.Symbol$PackageSymbol
                   public namedImportScope: com.sun.tools.javac.code.Scope$ImportScope
                   public starImportScope: com.sun.tools.javac.code.Scope$StarImportScope
                   public lineMap: com.sun.tools.javac.util.Position$LineMap
                   public docComments: com.sun.tools.javac.tree.DocCommentTable
                   public endPositions: com.sun.tools.javac.tree.EndPosTable
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, arg3: javax.tools.JavaFileObject, arg4: com.sun.tools.javac.code.Symbol$PackageSymbol, arg5: com.sun.tools.javac.code.Scope$ImportScope, arg6: com.sun.tools.javac.code.Scope$StarImportScope)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getPackageAnnotations<T>(...args: any[]): any
                   getImports<T>(...args: any[]): any
                   getPackageName<T>(...args: any[]): any
                   public getSourceFile(): javax.tools.JavaFileObject
                   getLineMap<T>(...args: any[]): any
                   getTypeDecls<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCImport extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.ImportTree {
                   public staticImport: boolean
                   public qualid: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree, arg1: boolean)
                   accept<T>(...args: any[]): any
                   public isStatic(): boolean
                   getQualifiedIdentifier<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               abstract class JCTree$JCStatement extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.StatementTree {
                   public constructor()
                   setType<T>(...args: any[]): any
                   setPos<T>(...args: any[]): any
               }
               abstract class JCTree$JCExpression extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.ExpressionTree {
                   public constructor()
                   setType<T>(...args: any[]): any
                   setPos<T>(...args: any[]): any
                   public isPoly(): boolean
                   public isStandalone(): boolean
               }
               class JCTree$JCPolyExpression$PolyKind extends java.lang.Enum<com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind> {
                   public static STANDALONE: com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind
                   public static POLY: com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind
                   public static values(): com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind[]
                   valueOf<T>(...args: any[]): any
               }
               abstract class JCTree$JCPolyExpression extends com.sun.tools.javac.tree.JCTree$JCExpression {
                   public polyKind: com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind
                   public constructor()
                   public isPoly(): boolean
                   public isStandalone(): boolean
               }
               abstract class JCTree$JCFunctionalExpression extends com.sun.tools.javac.tree.JCTree$JCPolyExpression {
                   public targets: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public constructor()
                   public getDescriptorType(arg0: com.sun.tools.javac.code.Types): com.sun.tools.javac.code.Type
               }
               class JCTree$JCClassDecl extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.ClassTree {
                   public mods: com.sun.tools.javac.tree.JCTree$JCModifiers
                   public name: com.sun.tools.javac.util.Name
                   public typarams: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>
                   public extending: com.sun.tools.javac.tree.JCTree$JCExpression
                   public implementing: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public defs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   public sym: com.sun.tools.javac.code.Symbol$ClassSymbol
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg3: com.sun.tools.javac.tree.JCTree$JCExpression, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, arg6: com.sun.tools.javac.code.Symbol$ClassSymbol)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getModifiers<T>(...args: any[]): any
                   getSimpleName<T>(...args: any[]): any
                   getTypeParameters<T>(...args: any[]): any
                   getExtendsClause<T>(...args: any[]): any
                   getImplementsClause<T>(...args: any[]): any
                   getMembers<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCMethodDecl extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.MethodTree {
                   public mods: com.sun.tools.javac.tree.JCTree$JCModifiers
                   public name: com.sun.tools.javac.util.Name
                   public restype: com.sun.tools.javac.tree.JCTree$JCExpression
                   public typarams: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>
                   public recvparam: com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   public params: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   public thrown: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public body: com.sun.tools.javac.tree.JCTree$JCBlock
                   public defaultValue: com.sun.tools.javac.tree.JCTree$JCExpression
                   public sym: com.sun.tools.javac.code.Symbol$MethodSymbol
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg4: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg7: com.sun.tools.javac.tree.JCTree$JCBlock, arg8: com.sun.tools.javac.tree.JCTree$JCExpression, arg9: com.sun.tools.javac.code.Symbol$MethodSymbol)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getModifiers<T>(...args: any[]): any
                   getName<T>(...args: any[]): any
                   getReturnType<T>(...args: any[]): any
                   getTypeParameters<T>(...args: any[]): any
                   getParameters<T>(...args: any[]): any
                   getReceiverParameter<T>(...args: any[]): any
                   getThrows<T>(...args: any[]): any
                   getBody<T>(...args: any[]): any
                   getDefaultValue<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCVariableDecl extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.VariableTree {
                   public mods: com.sun.tools.javac.tree.JCTree$JCModifiers
                   public name: com.sun.tools.javac.util.Name
                   public nameexpr: com.sun.tools.javac.tree.JCTree$JCExpression
                   public vartype: com.sun.tools.javac.tree.JCTree$JCExpression
                   public init: com.sun.tools.javac.tree.JCTree$JCExpression
                   public sym: com.sun.tools.javac.code.Symbol$VarSymbol
                   constructor(...args: any[])
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getModifiers<T>(...args: any[]): any
                   getName<T>(...args: any[]): any
                   getNameExpression<T>(...args: any[]): any
                   getType<T>(...args: any[]): any
                   getInitializer<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCSkip extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.EmptyStatementTree {
                   protected constructor()
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCBlock extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.BlockTree {
                   public flags: long
                   public stats: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>
                   public endpos: int
                   protected constructor(arg0: long, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getStatements<T>(...args: any[]): any
                   public isStatic(): boolean
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCDoWhileLoop extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.DoWhileLoopTree {
                   public body: com.sun.tools.javac.tree.JCTree$JCStatement
                   public cond: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCStatement, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getCondition<T>(...args: any[]): any
                   getStatement<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCWhileLoop extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.WhileLoopTree {
                   public cond: com.sun.tools.javac.tree.JCTree$JCExpression
                   public body: com.sun.tools.javac.tree.JCTree$JCStatement
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCStatement)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getCondition<T>(...args: any[]): any
                   getStatement<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCForLoop extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.ForLoopTree {
                   public init: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>
                   public cond: com.sun.tools.javac.tree.JCTree$JCExpression
                   public step: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement>
                   public body: com.sun.tools.javac.tree.JCTree$JCStatement
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement>, arg3: com.sun.tools.javac.tree.JCTree$JCStatement)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getCondition<T>(...args: any[]): any
                   getStatement<T>(...args: any[]): any
                   getInitializer<T>(...args: any[]): any
                   getUpdate<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCEnhancedForLoop extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.EnhancedForLoopTree {
                   public var: com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   public body: com.sun.tools.javac.tree.JCTree$JCStatement
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCStatement)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getVariable<T>(...args: any[]): any
                   getExpression<T>(...args: any[]): any
                   getStatement<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCLabeledStatement extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.LabeledStatementTree {
                   public label: com.sun.tools.javac.util.Name
                   public body: com.sun.tools.javac.tree.JCTree$JCStatement
                   protected constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.tree.JCTree$JCStatement)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getLabel<T>(...args: any[]): any
                   getStatement<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCSwitch extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.SwitchTree {
                   public selector: com.sun.tools.javac.tree.JCTree$JCExpression
                   public cases: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   getCases<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCCase extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.CaseTree {
                   public pat: com.sun.tools.javac.tree.JCTree$JCExpression
                   public stats: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   getStatements<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCSynchronized extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.SynchronizedTree {
                   public lock: com.sun.tools.javac.tree.JCTree$JCExpression
                   public body: com.sun.tools.javac.tree.JCTree$JCBlock
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCBlock)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   getBlock<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCTry extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.TryTree {
                   public body: com.sun.tools.javac.tree.JCTree$JCBlock
                   public catchers: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>
                   public finalizer: com.sun.tools.javac.tree.JCTree$JCBlock
                   public resources: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   public finallyCanCompleteNormally: boolean
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, arg1: com.sun.tools.javac.tree.JCTree$JCBlock, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>, arg3: com.sun.tools.javac.tree.JCTree$JCBlock)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getBlock<T>(...args: any[]): any
                   getCatches<T>(...args: any[]): any
                   getFinallyBlock<T>(...args: any[]): any
                   getResources<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCCatch extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.CatchTree {
                   public param: com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   public body: com.sun.tools.javac.tree.JCTree$JCBlock
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.tree.JCTree$JCBlock)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getParameter<T>(...args: any[]): any
                   getBlock<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCConditional extends com.sun.tools.javac.tree.JCTree$JCPolyExpression implements com.sun.source.tree.ConditionalExpressionTree {
                   public cond: com.sun.tools.javac.tree.JCTree$JCExpression
                   public truepart: com.sun.tools.javac.tree.JCTree$JCExpression
                   public falsepart: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getCondition<T>(...args: any[]): any
                   getTrueExpression<T>(...args: any[]): any
                   getFalseExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCIf extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.IfTree {
                   public cond: com.sun.tools.javac.tree.JCTree$JCExpression
                   public thenpart: com.sun.tools.javac.tree.JCTree$JCStatement
                   public elsepart: com.sun.tools.javac.tree.JCTree$JCStatement
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCStatement, arg2: com.sun.tools.javac.tree.JCTree$JCStatement)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getCondition<T>(...args: any[]): any
                   getThenStatement<T>(...args: any[]): any
                   getElseStatement<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCExpressionStatement extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.ExpressionStatementTree {
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
                   toString<T>(...args: any[]): any
               }
               class JCTree$JCBreak extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.BreakTree {
                   public label: com.sun.tools.javac.util.Name
                   public target: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.tree.JCTree)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getLabel<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCContinue extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.ContinueTree {
                   public label: com.sun.tools.javac.util.Name
                   public target: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.tree.JCTree)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getLabel<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCReturn extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.ReturnTree {
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCThrow extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.ThrowTree {
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCAssert extends com.sun.tools.javac.tree.JCTree$JCStatement implements com.sun.source.tree.AssertTree {
                   public cond: com.sun.tools.javac.tree.JCTree$JCExpression
                   public detail: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getCondition<T>(...args: any[]): any
                   getDetail<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCMethodInvocation extends com.sun.tools.javac.tree.JCTree$JCPolyExpression implements com.sun.source.tree.MethodInvocationTree {
                   public typeargs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public meth: com.sun.tools.javac.tree.JCTree$JCExpression
                   public args: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public varargsElement: com.sun.tools.javac.code.Type
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getTypeArguments<T>(...args: any[]): any
                   getMethodSelect<T>(...args: any[]): any
                   getArguments<T>(...args: any[]): any
                   setType<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCNewClass extends com.sun.tools.javac.tree.JCTree$JCPolyExpression implements com.sun.source.tree.NewClassTree {
                   public encl: com.sun.tools.javac.tree.JCTree$JCExpression
                   public typeargs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public clazz: com.sun.tools.javac.tree.JCTree$JCExpression
                   public args: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public def: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   constructor<T>(...args: any[]): any
                   public varargsElement: com.sun.tools.javac.code.Type
                   public constructorType: com.sun.tools.javac.code.Type
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg4: com.sun.tools.javac.tree.JCTree$JCClassDecl)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getEnclosingExpression<T>(...args: any[]): any
                   getTypeArguments<T>(...args: any[]): any
                   getIdentifier<T>(...args: any[]): any
                   getArguments<T>(...args: any[]): any
                   getClassBody<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCNewArray extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.NewArrayTree {
                   public elemtype: com.sun.tools.javac.tree.JCTree$JCExpression
                   public dims: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public annotations: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   public dimAnnotations: com.sun.tools.javac.util.List<com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>>
                   public elems: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getType<T>(...args: any[]): any
                   getDimensions<T>(...args: any[]): any
                   getInitializers<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
                   getAnnotations<T>(...args: any[]): any
                   getDimAnnotations<T>(...args: any[]): any
               }
               class JCTree$JCLambda$ParameterKind extends java.lang.Enum<com.sun.tools.javac.tree.JCTree$JCLambda$ParameterKind> {
                   public static IMPLICIT: com.sun.tools.javac.tree.JCTree$JCLambda$ParameterKind
                   public static EXPLICIT: com.sun.tools.javac.tree.JCTree$JCLambda$ParameterKind
                   public static values(): com.sun.tools.javac.tree.JCTree$JCLambda$ParameterKind[]
                   valueOf<T>(...args: any[]): any
               }
               class JCTree$JCLambda extends com.sun.tools.javac.tree.JCTree$JCFunctionalExpression implements com.sun.source.tree.LambdaExpressionTree {
                   public params: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   public body: com.sun.tools.javac.tree.JCTree
                   public canCompleteNormally: boolean
                   public paramKind: com.sun.tools.javac.tree.JCTree$JCLambda$ParameterKind
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: com.sun.tools.javac.tree.JCTree)
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getBody<T>(...args: any[]): any
                   public getParameters(): java.util.List<com.sun.source.tree.VariableTree>
                   setType<T>(...args: any[]): any
                   public getBodyKind(): com.sun.source.tree.LambdaExpressionTree$BodyKind
               }
               class JCTree$JCParens extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.ParenthesizedTree {
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCAssign extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.AssignmentTree {
                   public lhs: com.sun.tools.javac.tree.JCTree$JCExpression
                   public rhs: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getVariable<T>(...args: any[]): any
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCAssignOp extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.CompoundAssignmentTree {
                   public lhs: com.sun.tools.javac.tree.JCTree$JCExpression
                   public rhs: com.sun.tools.javac.tree.JCTree$JCExpression
                   public operator: com.sun.tools.javac.code.Symbol
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.JCTree, arg3: com.sun.tools.javac.code.Symbol)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getVariable<T>(...args: any[]): any
                   getExpression<T>(...args: any[]): any
                   public getOperator(): com.sun.tools.javac.code.Symbol
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCUnary extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.UnaryTree {
                   public arg: com.sun.tools.javac.tree.JCTree$JCExpression
                   public operator: com.sun.tools.javac.code.Symbol
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   public getOperator(): com.sun.tools.javac.code.Symbol
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
                   public setTag(arg0: com.sun.tools.javac.tree.JCTree$Tag): void
               }
               class JCTree$JCBinary extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.BinaryTree {
                   public lhs: com.sun.tools.javac.tree.JCTree$JCExpression
                   public rhs: com.sun.tools.javac.tree.JCTree$JCExpression
                   public operator: com.sun.tools.javac.code.Symbol
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.code.Symbol)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getLeftOperand<T>(...args: any[]): any
                   getRightOperand<T>(...args: any[]): any
                   public getOperator(): com.sun.tools.javac.code.Symbol
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCTypeCast extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.TypeCastTree {
                   public clazz: com.sun.tools.javac.tree.JCTree
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getType<T>(...args: any[]): any
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCInstanceOf extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.InstanceOfTree {
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   public clazz: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getType<T>(...args: any[]): any
                   getExpression<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCArrayAccess extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.ArrayAccessTree {
                   public indexed: com.sun.tools.javac.tree.JCTree$JCExpression
                   public index: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   getIndex<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCFieldAccess extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.MemberSelectTree {
                   public selected: com.sun.tools.javac.tree.JCTree$JCExpression
                   public name: com.sun.tools.javac.util.Name
                   public sym: com.sun.tools.javac.code.Symbol
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Symbol)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getExpression<T>(...args: any[]): any
                   getIdentifier<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCMemberReference$OverloadKind extends java.lang.Enum<com.sun.tools.javac.tree.JCTree$JCMemberReference$OverloadKind> {
                   public static OVERLOADED: com.sun.tools.javac.tree.JCTree$JCMemberReference$OverloadKind
                   public static UNOVERLOADED: com.sun.tools.javac.tree.JCTree$JCMemberReference$OverloadKind
                   public static values(): com.sun.tools.javac.tree.JCTree$JCMemberReference$OverloadKind[]
                   valueOf<T>(...args: any[]): any
               }
               class JCTree$JCMemberReference$ReferenceKind extends java.lang.Enum<com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind> {
                   public static SUPER: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public static UNBOUND: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public static STATIC: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public static BOUND: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public static IMPLICIT_INNER: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public static TOPLEVEL: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public static ARRAY_CTOR: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   mode: com.sun.source.tree.MemberReferenceTree$ReferenceMode
                   unbound: boolean
                   public static values(): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind[]
                   valueOf<T>(...args: any[]): any
                   public isUnbound(): boolean
               }
               class JCTree$JCMemberReference extends com.sun.tools.javac.tree.JCTree$JCFunctionalExpression implements com.sun.source.tree.MemberReferenceTree {
                   public mode: com.sun.source.tree.MemberReferenceTree$ReferenceMode
                   public kind: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   public name: com.sun.tools.javac.util.Name
                   public expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   public typeargs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public sym: com.sun.tools.javac.code.Symbol
                   public varargsElement: com.sun.tools.javac.code.Type
                   public refPolyKind: com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind
                   public ownerAccessible: boolean
                   public overloadKind: com.sun.tools.javac.tree.JCTree$JCMemberReference$OverloadKind
                   protected constructor(arg0: com.sun.source.tree.MemberReferenceTree$ReferenceMode, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getMode(): com.sun.source.tree.MemberReferenceTree$ReferenceMode
                   getQualifierExpression<T>(...args: any[]): any
                   getName<T>(...args: any[]): any
                   getTypeArguments<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
                   public hasKind(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind): boolean
               }
               class JCTree$JCIdent extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.IdentifierTree {
                   public name: com.sun.tools.javac.util.Name
                   public sym: com.sun.tools.javac.code.Symbol
                   protected constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getName<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCLiteral extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.LiteralTree {
                   public typetag: com.sun.tools.javac.code.TypeTag
                   public value: java.lang.Object
                   protected constructor(arg0: com.sun.tools.javac.code.TypeTag, arg1: java.lang.Object)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getValue(): java.lang.Object
                   setType<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCPrimitiveTypeTree extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.PrimitiveTypeTree {
                   public typetag: com.sun.tools.javac.code.TypeTag
                   protected constructor(arg0: com.sun.tools.javac.code.TypeTag)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getPrimitiveTypeKind(): javax.lang.model.type.TypeKind
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCArrayTypeTree extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.ArrayTypeTree {
                   public elemtype: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getType<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCTypeApply extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.ParameterizedTypeTree {
                   public clazz: com.sun.tools.javac.tree.JCTree$JCExpression
                   public arguments: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getType<T>(...args: any[]): any
                   getTypeArguments<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCTypeUnion extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.UnionTypeTree {
                   public alternatives: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getTypeAlternatives<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCTypeIntersection extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.IntersectionTypeTree {
                   public bounds: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getBounds<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCTypeParameter extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.TypeParameterTree {
                   public name: com.sun.tools.javac.util.Name
                   public bounds: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public annotations: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   protected constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getName<T>(...args: any[]): any
                   getBounds<T>(...args: any[]): any
                   getAnnotations<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCWildcard extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.WildcardTree {
                   public kind: com.sun.tools.javac.tree.JCTree$TypeBoundKind
                   public inner: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind, arg1: com.sun.tools.javac.tree.JCTree)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getBound<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$TypeBoundKind extends com.sun.tools.javac.tree.JCTree {
                   public kind: com.sun.tools.javac.code.BoundKind
                   protected constructor(arg0: com.sun.tools.javac.code.BoundKind)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCAnnotation extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.AnnotationTree {
                   public annotationType: com.sun.tools.javac.tree.JCTree
                   public args: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public attribute: com.sun.tools.javac.code.Attribute$Compound
                   protected constructor(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getAnnotationType<T>(...args: any[]): any
                   getArguments<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCModifiers extends com.sun.tools.javac.tree.JCTree implements com.sun.source.tree.ModifiersTree {
                   public flags: long
                   public annotations: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   protected constructor(arg0: long, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getFlags(): java.util.Set<javax.lang.model.element.Modifier>
                   getAnnotations<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCAnnotatedType extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.AnnotatedTypeTree {
                   public annotations: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   public underlyingType: com.sun.tools.javac.tree.JCTree$JCExpression
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getAnnotations<T>(...args: any[]): any
                   getUnderlyingType<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$JCErroneous extends com.sun.tools.javac.tree.JCTree$JCExpression implements com.sun.source.tree.ErroneousTree {
                   public errs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   getErrorTrees<T>(...args: any[]): any
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               class JCTree$LetExpr extends com.sun.tools.javac.tree.JCTree$JCExpression {
                   public defs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   public expr: com.sun.tools.javac.tree.JCTree
                   protected constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: com.sun.tools.javac.tree.JCTree)
                   accept<T>(...args: any[]): any
                   public getKind(): com.sun.source.tree.Tree$Kind
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
               }
               interface JCTree$Factory {
                   public TopLevel(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.JCTree$JCCompilationUnit
                   public Import(arg0: com.sun.tools.javac.tree.JCTree, arg1: boolean): com.sun.tools.javac.tree.JCTree$JCImport
                   public ClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg3: com.sun.tools.javac.tree.JCTree$JCExpression, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   public MethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg4: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg7: com.sun.tools.javac.tree.JCTree$JCBlock, arg8: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCMethodDecl
                   public VarDef(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   public Skip(): com.sun.tools.javac.tree.JCTree$JCSkip
                   public Block(arg0: long, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>): com.sun.tools.javac.tree.JCTree$JCBlock
                   public DoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCStatement, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCDoWhileLoop
                   public WhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCWhileLoop
                   public ForLoop(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement>, arg3: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCForLoop
                   public ForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop
                   public Labelled(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCLabeledStatement
                   public Switch(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>): com.sun.tools.javac.tree.JCTree$JCSwitch
                   public Case(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>): com.sun.tools.javac.tree.JCTree$JCCase
                   public Synchronized(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCBlock): com.sun.tools.javac.tree.JCTree$JCSynchronized
                   Try<T>(...args: any[]): any
                   public Catch(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.tree.JCTree$JCBlock): com.sun.tools.javac.tree.JCTree$JCCatch
                   public Conditional(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCConditional
                   public If(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCStatement, arg2: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCIf
                   public Exec(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpressionStatement
                   public Break(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCBreak
                   public Continue(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCContinue
                   public Return(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCReturn
                   public Throw(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCThrow
                   public Assert(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCAssert
                   public Apply(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCMethodInvocation
                   public NewClass(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg4: com.sun.tools.javac.tree.JCTree$JCClassDecl): com.sun.tools.javac.tree.JCTree$JCNewClass
                   public NewArray(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCNewArray
                   public Parens(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCParens
                   public Assign(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCAssign
                   public Assignop(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCAssignOp
                   public Unary(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCUnary
                   public Binary(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCBinary
                   public TypeCast(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCTypeCast
                   public TypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCInstanceOf
                   public Indexed(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCArrayAccess
                   public Select(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCFieldAccess
                   public Ident(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCIdent
                   public Literal(arg0: com.sun.tools.javac.code.TypeTag, arg1: java.lang.Object): com.sun.tools.javac.tree.JCTree$JCLiteral
                   public TypeIdent(arg0: com.sun.tools.javac.code.TypeTag): com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree
                   public TypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCArrayTypeTree
                   public TypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCTypeApply
                   public TypeParameter(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCTypeParameter
                   public Wildcard(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCWildcard
                   public TypeBoundKind(arg0: com.sun.tools.javac.code.BoundKind): com.sun.tools.javac.tree.JCTree$TypeBoundKind
                   public Annotation(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCAnnotation
                   public Modifiers(arg0: long, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): com.sun.tools.javac.tree.JCTree$JCModifiers
                   public Erroneous(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.JCTree$JCErroneous
                   public LetExpr(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$LetExpr
               }
               abstract class JCTree$Visitor {
                   public constructor()
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitImport(arg0: com.sun.tools.javac.tree.JCTree$JCImport): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeUnion(arg0: com.sun.tools.javac.tree.JCTree$JCTypeUnion): void
                   public visitTypeIntersection(arg0: com.sun.tools.javac.tree.JCTree$JCTypeIntersection): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitTypeBoundKind(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitModifiers(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class JCTree$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$BoundKind: int[]
               }
               abstract class JCTree implements com.sun.source.tree.Tree , java.lang.Cloneable , com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition {
                   pos<T>(...args: any[]): any
                   public type: com.sun.tools.javac.code.Type
                   public constructor()
                   public getTag(): com.sun.tools.javac.tree.JCTree$Tag
                   public hasTag(arg0: com.sun.tools.javac.tree.JCTree$Tag): boolean
                   toString<T>(...args: any[]): any
                   public setPos(arg0: int): com.sun.tools.javac.tree.JCTree
                   public setType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree
                   accept<T>(...args: any[]): any
                   public clone(): java.lang.Object
                   public getTree(): com.sun.tools.javac.tree.JCTree
                   public getStartPosition(): int
                   public getPreferredPosition(): int
                   public getEndPosition(arg0: com.sun.tools.javac.tree.EndPosTable): int
               }
               interface EndPosTable {
                   public getEndPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public storeEnd(arg0: com.sun.tools.javac.tree.JCTree, arg1: int): void
                   public replaceTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree): int
               }
               class TreeMaker$AnnotationBuilder implements com.sun.tools.javac.code.Attribute$Visitor {
                   result: com.sun.tools.javac.tree.JCTree$JCExpression
                   this$0: com.sun.tools.javac.tree.TreeMaker
                   constructor(arg0: com.sun.tools.javac.tree.TreeMaker)
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitCompoundInternal(arg0: com.sun.tools.javac.code.Attribute$Compound): com.sun.tools.javac.tree.JCTree$JCAnnotation
                   public visitTypeCompoundInternal(arg0: com.sun.tools.javac.code.Attribute$TypeCompound): com.sun.tools.javac.tree.JCTree$JCAnnotation
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                   translate<T>(...args: any[]): any
               }
               class TreeMaker$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class TreeMaker implements com.sun.tools.javac.tree.JCTree$Factory {
                   protected static treeMakerKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.tree.TreeMaker>
                   public pos: int
                   public toplevel: com.sun.tools.javac.tree.JCTree$JCCompilationUnit
                   names: com.sun.tools.javac.util.Names
                   types: com.sun.tools.javac.code.Types
                   syms: com.sun.tools.javac.code.Symtab
                   annotationBuilder: com.sun.tools.javac.tree.TreeMaker$AnnotationBuilder
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.tree.TreeMaker
                   constructor(...args: any[])
                   public forToplevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): com.sun.tools.javac.tree.TreeMaker
                   at<T>(...args: any[]): any
                   public TopLevel(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.JCTree$JCCompilationUnit
                   public Import(arg0: com.sun.tools.javac.tree.JCTree, arg1: boolean): com.sun.tools.javac.tree.JCTree$JCImport
                   public ClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg3: com.sun.tools.javac.tree.JCTree$JCExpression, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   MethodDef<T>(...args: any[]): any
                   VarDef<T>(...args: any[]): any
                   public ReceiverVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   public Skip(): com.sun.tools.javac.tree.JCTree$JCSkip
                   public Block(arg0: long, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>): com.sun.tools.javac.tree.JCTree$JCBlock
                   public DoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCStatement, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCDoWhileLoop
                   public WhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCWhileLoop
                   public ForLoop(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement>, arg3: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCForLoop
                   public ForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop
                   public Labelled(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCLabeledStatement
                   public Switch(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>): com.sun.tools.javac.tree.JCTree$JCSwitch
                   public Case(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>): com.sun.tools.javac.tree.JCTree$JCCase
                   public Synchronized(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCBlock): com.sun.tools.javac.tree.JCTree$JCSynchronized
                   Try<T>(...args: any[]): any
                   public Catch(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.tree.JCTree$JCBlock): com.sun.tools.javac.tree.JCTree$JCCatch
                   public Conditional(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCConditional
                   public If(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCStatement, arg2: com.sun.tools.javac.tree.JCTree$JCStatement): com.sun.tools.javac.tree.JCTree$JCIf
                   public Exec(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpressionStatement
                   public Break(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCBreak
                   public Continue(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCContinue
                   public Return(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCReturn
                   public Throw(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCThrow
                   public Assert(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCAssert
                   public Apply(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCMethodInvocation
                   public NewClass(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg4: com.sun.tools.javac.tree.JCTree$JCClassDecl): com.sun.tools.javac.tree.JCTree$JCNewClass
                   public NewArray(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCNewArray
                   public Lambda(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCLambda
                   public Parens(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCParens
                   public Assign(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCAssign
                   public Assignop(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCAssignOp
                   public Unary(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCUnary
                   public Binary(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCBinary
                   TypeCast<T>(...args: any[]): any
                   public TypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCInstanceOf
                   Indexed<T>(...args: any[]): any
                   Select<T>(...args: any[]): any
                   public Reference(arg0: com.sun.source.tree.MemberReferenceTree$ReferenceMode, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCMemberReference
                   Ident<T>(...args: any[]): any
                   Literal<T>(...args: any[]): any
                   public TypeIdent(arg0: com.sun.tools.javac.code.TypeTag): com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree
                   public TypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCArrayTypeTree
                   public TypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCTypeApply
                   public TypeUnion(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCTypeUnion
                   public TypeIntersection(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCTypeIntersection
                   TypeParameter<T>(...args: any[]): any
                   public Wildcard(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCWildcard
                   public TypeBoundKind(arg0: com.sun.tools.javac.code.BoundKind): com.sun.tools.javac.tree.JCTree$TypeBoundKind
                   Annotation<T>(...args: any[]): any
                   TypeAnnotation<T>(...args: any[]): any
                   Modifiers<T>(...args: any[]): any
                   public AnnotatedType(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCAnnotatedType
                   Erroneous<T>(...args: any[]): any
                   LetExpr<T>(...args: any[]): any
                   public AnonymousClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   public QualIdent(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCExpression
                   public Idents(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public This(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree$JCExpression
                   public QualThis(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree$JCExpression
                   ClassLiteral<T>(...args: any[]): any
                   public Super(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.tree.JCTree$JCIdent
                   App<T>(...args: any[]): any
                   public Create(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCExpression
                   public Type(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree$JCExpression
                   public Types(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public Annotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   public TypeParam(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Type$TypeVar): com.sun.tools.javac.tree.JCTree$JCTypeParameter
                   public TypeParams(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>
                   public Param(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   public Params(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   public Call(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCStatement
                   public Assignment(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCStatement
                   isUnqualifiable(arg0: com.sun.tools.javac.code.Symbol): boolean
                   public paramName(arg0: int): com.sun.tools.javac.util.Name
                   public typaramName(arg0: int): com.sun.tools.javac.util.Name
               }
               class TreeTranslator extends com.sun.tools.javac.tree.JCTree$Visitor {
                   protected result: com.sun.tools.javac.tree.JCTree
                   public constructor()
                   translate<T>(...args: any[]): any
                   public translateVarDefs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   public translateTypeParams(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>
                   public translateCases(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>
                   public translateCatchers(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>
                   public translateAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitImport(arg0: com.sun.tools.javac.tree.JCTree$JCImport): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeUnion(arg0: com.sun.tools.javac.tree.JCTree$JCTypeUnion): void
                   public visitTypeIntersection(arg0: com.sun.tools.javac.tree.JCTree$JCTypeIntersection): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitTypeBoundKind(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public visitModifiers(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class TreeInfo$1 implements com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition {
                   val$tree: com.sun.tools.javac.tree.JCTree
                   val$endPos: int
                   constructor(arg0: com.sun.tools.javac.tree.JCTree, arg1: int)
                   public getTree(): com.sun.tools.javac.tree.JCTree
                   public getStartPosition(): int
                   public getPreferredPosition(): int
                   public getEndPosition(arg0: com.sun.tools.javac.tree.EndPosTable): int
               }
               class TreeInfo$1DeclScanner extends com.sun.tools.javac.tree.TreeScanner {
                   result: com.sun.tools.javac.tree.JCTree
                   val$sym: com.sun.tools.javac.code.Symbol
                   constructor()
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
               }
               class TreeInfo$1Result extends java.lang.Error {
                   static serialVersionUID: long
                   path: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>)
               }
               class TreeInfo$1PathFinder extends com.sun.tools.javac.tree.TreeScanner {
                   path: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   val$node: com.sun.tools.javac.tree.JCTree
                   constructor()
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class TreeInfo$TypeAnnotationFinder extends com.sun.tools.javac.tree.TreeScanner {
                   public foundTypeAnno: boolean
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   constructor(arg0: com.sun.tools.javac.tree.TreeInfo$1)
               }
               class TreeInfo$2 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class TreeInfo {
                   protected static treeInfoKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.tree.TreeInfo>
                   public static notExpression: int
                   public static noPrec: int
                   public static assignPrec: int
                   public static assignopPrec: int
                   public static condPrec: int
                   public static orPrec: int
                   public static andPrec: int
                   public static bitorPrec: int
                   public static bitxorPrec: int
                   public static bitandPrec: int
                   public static eqPrec: int
                   public static ordPrec: int
                   public static shiftPrec: int
                   public static addPrec: int
                   public static mulPrec: int
                   public static prefixPrec: int
                   public static postfixPrec: int
                   public static precCount: int
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.tree.TreeInfo
                   public static args(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   public operatorName(arg0: com.sun.tools.javac.tree.JCTree$Tag): com.sun.tools.javac.util.Name
                   public static isConstructor(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static isReceiverParam(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static hasConstructors(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): boolean
                   public static isMultiCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): boolean
                   public static isSyntheticInit(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static calledMethodName(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.util.Name
                   public static isSelfCall(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static isSuperCall(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static isInitialConstructor(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static firstConstructorCall(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCMethodInvocation
                   public static isDiamond(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static isEnumInit(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static setPolyKind(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind): void
                   public static setVarargsElement(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type): void
                   public static isExpressionStatement(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): boolean
                   public static isStaticSelector(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.util.Names): boolean
                   public static isNull(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static isInAnnotation(arg0: com.sun.tools.javac.comp.Env<any>, arg1: com.sun.tools.javac.tree.JCTree): boolean
                   public static getCommentText(arg0: com.sun.tools.javac.comp.Env<any>, arg1: com.sun.tools.javac.tree.JCTree): java.lang.String
                   public static getCommentTree(arg0: com.sun.tools.javac.comp.Env<any>, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.DCTree$DCDocComment
                   public static firstStatPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public static endPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public static getStartPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public static getEndPos(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.EndPosTable): int
                   public static diagEndPos(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   public static finalizerPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public static positionFor(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree): int
                   public static diagnosticPositionFor(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   public static declarationFor(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
                   scopeFor<T>(...args: any[]): any
                   public static pathFor(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   public static referencedStatement(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): com.sun.tools.javac.tree.JCTree
                   skipParens<T>(...args: any[]): any
                   public static types(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public static name(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.util.Name
                   public static fullName(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.util.Name
                   public static symbolFor(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.code.Symbol
                   public static isDeclaration(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static symbol(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.code.Symbol
                   public static nonstaticSelect(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public static setSymbol(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Symbol): void
                   public static flags(arg0: com.sun.tools.javac.tree.JCTree): long
                   public static firstFlag(arg0: long): long
                   public static flagNames(arg0: long): java.lang.String
                   public static opPrec(arg0: com.sun.tools.javac.tree.JCTree$Tag): int
                   static tagToKind(arg0: com.sun.tools.javac.tree.JCTree$Tag): com.sun.source.tree.Tree$Kind
                   public static typeIn(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   public static innermostType(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
                   public static containsTypeAnnotation(arg0: com.sun.tools.javac.tree.JCTree): boolean
               }
               class TreeScanner extends com.sun.tools.javac.tree.JCTree$Visitor {
                   public constructor()
                   scan<T>(...args: any[]): any
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitImport(arg0: com.sun.tools.javac.tree.JCTree$JCImport): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeUnion(arg0: com.sun.tools.javac.tree.JCTree$JCTypeUnion): void
                   public visitTypeIntersection(arg0: com.sun.tools.javac.tree.JCTree$JCTypeIntersection): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitTypeBoundKind(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind): void
                   public visitModifiers(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               abstract class DCTree$DCEndPosTree<T>> extends com.sun.tools.javac.tree.DCTree {
                   public constructor()
                   public getEndPos(arg0: com.sun.tools.javac.tree.DCTree$DCDocComment): int
                   public setEndPos(arg0: int): T
               }
               class DCTree$DCDocComment extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.DocCommentTree {
                   public comment: com.sun.tools.javac.parser.Tokens$Comment
                   public firstSentence: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   public body: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   public tags: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   public constructor(arg0: com.sun.tools.javac.parser.Tokens$Comment, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getFirstSentence<T>(...args: any[]): any
                   getBody<T>(...args: any[]): any
                   getBlockTags<T>(...args: any[]): any
               }
               abstract class DCTree$DCBlockTag extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.BlockTagTree {
                   public constructor()
                   public getTagName(): java.lang.String
               }
               abstract class DCTree$DCInlineTag extends com.sun.tools.javac.tree.DCTree$DCEndPosTree<com.sun.tools.javac.tree.DCTree$DCInlineTag> implements com.sun.source.doctree.InlineTagTree {
                   public constructor()
                   public getTagName(): java.lang.String
               }
               class DCTree$DCAttribute extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.AttributeTree {
                   public name: com.sun.tools.javac.util.Name
                   public vkind: com.sun.source.doctree.AttributeTree$ValueKind
                   public value: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.source.doctree.AttributeTree$ValueKind, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getName<T>(...args: any[]): any
                   public getValueKind(): com.sun.source.doctree.AttributeTree$ValueKind
                   getValue<T>(...args: any[]): any
               }
               class DCTree$DCAuthor extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.AuthorTree {
                   public name: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getName<T>(...args: any[]): any
               }
               class DCTree$DCComment extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.CommentTree {
                   public body: java.lang.String
                   constructor(arg0: java.lang.String)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getBody(): java.lang.String
               }
               class DCTree$DCDeprecated extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.DeprecatedTree {
                   public body: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getBody<T>(...args: any[]): any
               }
               class DCTree$DCDocRoot extends com.sun.tools.javac.tree.DCTree$DCInlineTag implements com.sun.source.doctree.DocRootTree {
                   public constructor()
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
               }
               class DCTree$DCEndElement extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.EndElementTree {
                   public name: com.sun.tools.javac.util.Name
                   constructor(arg0: com.sun.tools.javac.util.Name)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getName<T>(...args: any[]): any
               }
               class DCTree$DCEntity extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.EntityTree {
                   public name: com.sun.tools.javac.util.Name
                   constructor(arg0: com.sun.tools.javac.util.Name)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getName<T>(...args: any[]): any
               }
               class DCTree$DCErroneous extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.ErroneousTree , com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition {
                   public body: java.lang.String
                   public diag: com.sun.tools.javac.util.JCDiagnostic
                   constructor(arg0: java.lang.String, arg1: com.sun.tools.javac.util.JCDiagnostic$Factory, arg2: com.sun.tools.javac.util.DiagnosticSource, arg3: java.lang.String, ...arg4: java.lang.Object[])
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getBody(): java.lang.String
                   public getDiagnostic(): javax.tools.Diagnostic<javax.tools.JavaFileObject>
                   public getTree(): com.sun.tools.javac.tree.JCTree
                   public getStartPosition(): int
                   public getPreferredPosition(): int
                   public getEndPosition(arg0: com.sun.tools.javac.tree.EndPosTable): int
               }
               class DCTree$DCIdentifier extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.IdentifierTree {
                   public name: com.sun.tools.javac.util.Name
                   constructor(arg0: com.sun.tools.javac.util.Name)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getName<T>(...args: any[]): any
               }
               class DCTree$DCInheritDoc extends com.sun.tools.javac.tree.DCTree$DCInlineTag implements com.sun.source.doctree.InheritDocTree {
                   public constructor()
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
               }
               class DCTree$DCLink extends com.sun.tools.javac.tree.DCTree$DCInlineTag implements com.sun.source.doctree.LinkTree {
                   public kind: com.sun.source.doctree.DocTree$Kind
                   public ref: com.sun.tools.javac.tree.DCTree$DCReference
                   public label: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.source.doctree.DocTree$Kind, arg1: com.sun.tools.javac.tree.DCTree$DCReference, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getReference(): com.sun.source.doctree.ReferenceTree
                   getLabel<T>(...args: any[]): any
               }
               class DCTree$DCLiteral extends com.sun.tools.javac.tree.DCTree$DCInlineTag implements com.sun.source.doctree.LiteralTree {
                   public kind: com.sun.source.doctree.DocTree$Kind
                   public body: com.sun.tools.javac.tree.DCTree$DCText
                   constructor(arg0: com.sun.source.doctree.DocTree$Kind, arg1: com.sun.tools.javac.tree.DCTree$DCText)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getBody<T>(...args: any[]): any
               }
               class DCTree$DCParam extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.ParamTree {
                   isTypeParameter<T>(...args: any[]): any
                   public name: com.sun.tools.javac.tree.DCTree$DCIdentifier
                   public description: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: boolean, arg1: com.sun.tools.javac.tree.DCTree$DCIdentifier, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getName(): com.sun.source.doctree.IdentifierTree
                   getDescription<T>(...args: any[]): any
               }
               class DCTree$DCReference extends com.sun.tools.javac.tree.DCTree$DCEndPosTree<com.sun.tools.javac.tree.DCTree$DCReference> implements com.sun.source.doctree.ReferenceTree {
                   public signature: java.lang.String
                   public qualifierExpression: com.sun.tools.javac.tree.JCTree
                   public memberName: com.sun.tools.javac.util.Name
                   public paramTypes: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   constructor(arg0: java.lang.String, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getSignature(): java.lang.String
               }
               class DCTree$DCReturn extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.ReturnTree {
                   public description: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getDescription<T>(...args: any[]): any
               }
               class DCTree$DCSee extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.SeeTree {
                   public reference: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getReference<T>(...args: any[]): any
               }
               class DCTree$DCSerial extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.SerialTree {
                   public description: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getDescription<T>(...args: any[]): any
               }
               class DCTree$DCSerialData extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.SerialDataTree {
                   public description: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getDescription<T>(...args: any[]): any
               }
               class DCTree$DCSerialField extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.SerialFieldTree {
                   public name: com.sun.tools.javac.tree.DCTree$DCIdentifier
                   public type: com.sun.tools.javac.tree.DCTree$DCReference
                   public description: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.tree.DCTree$DCIdentifier, arg1: com.sun.tools.javac.tree.DCTree$DCReference, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getDescription<T>(...args: any[]): any
                   public getName(): com.sun.source.doctree.IdentifierTree
                   public getType(): com.sun.source.doctree.ReferenceTree
               }
               class DCTree$DCSince extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.SinceTree {
                   public body: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getBody<T>(...args: any[]): any
               }
               class DCTree$DCStartElement extends com.sun.tools.javac.tree.DCTree$DCEndPosTree<com.sun.tools.javac.tree.DCTree$DCStartElement> implements com.sun.source.doctree.StartElementTree {
                   public name: com.sun.tools.javac.util.Name
                   public attrs: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   public selfClosing: boolean
                   constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>, arg2: boolean)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getName<T>(...args: any[]): any
                   getAttributes<T>(...args: any[]): any
                   public isSelfClosing(): boolean
               }
               class DCTree$DCText extends com.sun.tools.javac.tree.DCTree implements com.sun.source.doctree.TextTree {
                   public text: java.lang.String
                   constructor(arg0: java.lang.String)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getBody(): java.lang.String
               }
               class DCTree$DCThrows extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.ThrowsTree {
                   public kind: com.sun.source.doctree.DocTree$Kind
                   public name: com.sun.tools.javac.tree.DCTree$DCReference
                   public description: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.source.doctree.DocTree$Kind, arg1: com.sun.tools.javac.tree.DCTree$DCReference, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getExceptionName(): com.sun.source.doctree.ReferenceTree
                   getDescription<T>(...args: any[]): any
               }
               class DCTree$DCUnknownBlockTag extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.UnknownBlockTagTree {
                   public name: com.sun.tools.javac.util.Name
                   public content: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getTagName(): java.lang.String
                   getContent<T>(...args: any[]): any
               }
               class DCTree$DCUnknownInlineTag extends com.sun.tools.javac.tree.DCTree$DCInlineTag implements com.sun.source.doctree.UnknownInlineTagTree {
                   public name: com.sun.tools.javac.util.Name
                   public content: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getTagName(): java.lang.String
                   getContent<T>(...args: any[]): any
               }
               class DCTree$DCValue extends com.sun.tools.javac.tree.DCTree$DCInlineTag implements com.sun.source.doctree.ValueTree {
                   public ref: com.sun.tools.javac.tree.DCTree$DCReference
                   constructor(arg0: com.sun.tools.javac.tree.DCTree$DCReference)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   public getReference(): com.sun.source.doctree.ReferenceTree
               }
               class DCTree$DCVersion extends com.sun.tools.javac.tree.DCTree$DCBlockTag implements com.sun.source.doctree.VersionTree {
                   public body: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>)
                   public getKind(): com.sun.source.doctree.DocTree$Kind
                   public accept<R, D>(arg0: com.sun.source.doctree.DocTreeVisitor<R, D>, arg1: D): R
                   getBody<T>(...args: any[]): any
               }
               abstract class DCTree implements com.sun.source.doctree.DocTree {
                   pos<T>(...args: any[]): any
                   public constructor()
                   public getSourcePosition(arg0: com.sun.tools.javac.tree.DCTree$DCDocComment): long
                   toString<T>(...args: any[]): any
               }
               interface DocCommentTable {
                   public hasComment(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public getComment(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.parser.Tokens$Comment
                   public getCommentText(arg0: com.sun.tools.javac.tree.JCTree): java.lang.String
                   public getCommentTree(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.DCTree$DCDocComment
                   public putComment(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.parser.Tokens$Comment): void
               }
               class DocTreeMaker {
                   protected static treeMakerKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.tree.DocTreeMaker>
                   public pos: int
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.tree.DocTreeMaker
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   at<T>(...args: any[]): any
                   public Attribute(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.source.doctree.AttributeTree$ValueKind, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCAttribute
                   public Author(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCAuthor
                   public Code(arg0: com.sun.tools.javac.tree.DCTree$DCText): com.sun.tools.javac.tree.DCTree$DCLiteral
                   public Comment(arg0: java.lang.String): com.sun.tools.javac.tree.DCTree$DCComment
                   public Deprecated(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCDeprecated
                   public DocComment(arg0: com.sun.tools.javac.parser.Tokens$Comment, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCDocComment
                   public DocRoot(): com.sun.tools.javac.tree.DCTree$DCDocRoot
                   public EndElement(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.DCTree$DCEndElement
                   public Entity(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.DCTree$DCEntity
                   public Erroneous(arg0: java.lang.String, arg1: com.sun.tools.javac.util.DiagnosticSource, arg2: java.lang.String, ...arg3: java.lang.Object[]): com.sun.tools.javac.tree.DCTree$DCErroneous
                   public Exception(arg0: com.sun.tools.javac.tree.DCTree$DCReference, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCThrows
                   public Identifier(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.DCTree$DCIdentifier
                   public InheritDoc(): com.sun.tools.javac.tree.DCTree$DCInheritDoc
                   public Link(arg0: com.sun.tools.javac.tree.DCTree$DCReference, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCLink
                   public LinkPlain(arg0: com.sun.tools.javac.tree.DCTree$DCReference, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCLink
                   public Literal(arg0: com.sun.tools.javac.tree.DCTree$DCText): com.sun.tools.javac.tree.DCTree$DCLiteral
                   public Param(arg0: boolean, arg1: com.sun.tools.javac.tree.DCTree$DCIdentifier, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCParam
                   public Reference(arg0: java.lang.String, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): com.sun.tools.javac.tree.DCTree$DCReference
                   public Return(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCReturn
                   public See(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCSee
                   public Serial(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCSerial
                   public SerialData(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCSerialData
                   public SerialField(arg0: com.sun.tools.javac.tree.DCTree$DCIdentifier, arg1: com.sun.tools.javac.tree.DCTree$DCReference, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCSerialField
                   public Since(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCSince
                   public StartElement(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>, arg2: boolean): com.sun.tools.javac.tree.DCTree$DCStartElement
                   public Text(arg0: java.lang.String): com.sun.tools.javac.tree.DCTree$DCText
                   public Throws(arg0: com.sun.tools.javac.tree.DCTree$DCReference, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCThrows
                   public UnknownBlockTag(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCUnknownBlockTag
                   public UnknownInlineTag(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCUnknownInlineTag
                   public Value(arg0: com.sun.tools.javac.tree.DCTree$DCReference): com.sun.tools.javac.tree.DCTree$DCValue
                   public Version(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>): com.sun.tools.javac.tree.DCTree$DCVersion
               }
               class TreeCopier$1 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class TreeCopier<P> implements com.sun.source.tree.TreeVisitor<com.sun.tools.javac.tree.JCTree, P> {
                   public constructor(arg0: com.sun.tools.javac.tree.TreeMaker)
                   copy<T>(...args: any[]): any
                   visitAnnotatedType<T>(...args: any[]): any
                   visitAnnotation<T>(...args: any[]): any
                   visitAssert<T>(...args: any[]): any
                   visitAssignment<T>(...args: any[]): any
                   visitCompoundAssignment<T>(...args: any[]): any
                   visitBinary<T>(...args: any[]): any
                   visitBlock<T>(...args: any[]): any
                   visitBreak<T>(...args: any[]): any
                   visitCase<T>(...args: any[]): any
                   visitCatch<T>(...args: any[]): any
                   visitClass<T>(...args: any[]): any
                   visitConditionalExpression<T>(...args: any[]): any
                   visitContinue<T>(...args: any[]): any
                   visitDoWhileLoop<T>(...args: any[]): any
                   visitErroneous<T>(...args: any[]): any
                   visitExpressionStatement<T>(...args: any[]): any
                   visitEnhancedForLoop<T>(...args: any[]): any
                   visitForLoop<T>(...args: any[]): any
                   visitIdentifier<T>(...args: any[]): any
                   visitIf<T>(...args: any[]): any
                   visitImport<T>(...args: any[]): any
                   visitArrayAccess<T>(...args: any[]): any
                   visitLabeledStatement<T>(...args: any[]): any
                   visitLiteral<T>(...args: any[]): any
                   visitMethod<T>(...args: any[]): any
                   visitMethodInvocation<T>(...args: any[]): any
                   visitModifiers<T>(...args: any[]): any
                   visitNewArray<T>(...args: any[]): any
                   visitNewClass<T>(...args: any[]): any
                   visitLambdaExpression<T>(...args: any[]): any
                   visitParenthesized<T>(...args: any[]): any
                   visitReturn<T>(...args: any[]): any
                   visitMemberSelect<T>(...args: any[]): any
                   visitMemberReference<T>(...args: any[]): any
                   visitEmptyStatement<T>(...args: any[]): any
                   visitSwitch<T>(...args: any[]): any
                   visitSynchronized<T>(...args: any[]): any
                   visitThrow<T>(...args: any[]): any
                   visitCompilationUnit<T>(...args: any[]): any
                   visitTry<T>(...args: any[]): any
                   visitParameterizedType<T>(...args: any[]): any
                   visitUnionType<T>(...args: any[]): any
                   visitIntersectionType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitTypeCast<T>(...args: any[]): any
                   visitPrimitiveType<T>(...args: any[]): any
                   visitTypeParameter<T>(...args: any[]): any
                   visitInstanceOf<T>(...args: any[]): any
                   visitUnary<T>(...args: any[]): any
                   visitVariable<T>(...args: any[]): any
                   visitWhileLoop<T>(...args: any[]): any
                   visitWildcard<T>(...args: any[]): any
                   visitOther<T>(...args: any[]): any
               }
               class Pretty$UncheckedIOException extends java.lang.Error {
                   static serialVersionUID: long
                   constructor(arg0: java.io.IOException)
               }
               class Pretty$1UsedVisitor extends com.sun.tools.javac.tree.TreeScanner {
                   result: boolean
                   val$t: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.tree.Pretty
                   constructor()
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
               }
               class Pretty$1 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class Pretty extends com.sun.tools.javac.tree.JCTree$Visitor {
                   out: java.io.Writer
                   public width: int
                   lmargin: int
                   enclClassName: com.sun.tools.javac.util.Name
                   docComments: com.sun.tools.javac.tree.DocCommentTable
                   lineSep: java.lang.String
                   prec: int
                   public constructor(arg0: java.io.Writer, arg1: boolean)
                   align(): void
                   indent(): void
                   undent(): void
                   open(arg0: int, arg1: int): void
                   close(arg0: int, arg1: int): void
                   public print(arg0: java.lang.Object): void
                   public println(): void
                   toSimpleString<T>(...args: any[]): any
                   printExpr<T>(...args: any[]): any
                   public printStat(arg0: com.sun.tools.javac.tree.JCTree): void
                   printExprs<T>(...args: any[]): any
                   public printStats(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): void
                   public printFlags(arg0: long): void
                   public printAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): void
                   public printTypeAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): void
                   public printDocComment(arg0: com.sun.tools.javac.tree.JCTree): void
                   static lineEndPos(arg0: java.lang.String, arg1: int): int
                   public printTypeParameters(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>): void
                   public printBlock(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): void
                   public printEnumBody(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): void
                   isEnumerator(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public printUnit(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   isUsed(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree): boolean
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitImport(arg0: com.sun.tools.javac.tree.JCTree$JCImport): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public operatorName(arg0: com.sun.tools.javac.tree.JCTree$Tag): java.lang.String
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeUnion(arg0: com.sun.tools.javac.tree.JCTree$JCTypeUnion): void
                   public visitTypeIntersection(arg0: com.sun.tools.javac.tree.JCTree$JCTypeIntersection): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitTypeBoundKind(arg0: com.sun.tools.javac.tree.JCTree$TypeBoundKind): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public visitModifiers(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class DocPretty$UncheckedIOException extends java.lang.Error {
                   static serialVersionUID: long
                   constructor(arg0: java.io.IOException)
               }
               class DocPretty$1 {
                   static $SwitchMap$com$sun$source$doctree$AttributeTree$ValueKind: int[]
               }
               class DocPretty implements com.sun.source.doctree.DocTreeVisitor<java.lang.Void, java.lang.Void> {
                   out: java.io.Writer
                   lmargin: int
                   lineSep: java.lang.String
                   public constructor(arg0: java.io.Writer)
                   print<T>(...args: any[]): any
                   protected println(): void
                   protected printTagName(arg0: com.sun.source.doctree.DocTree): void
                   visitAttribute<T>(...args: any[]): any
                   visitAuthor<T>(...args: any[]): any
                   visitComment<T>(...args: any[]): any
                   visitDeprecated<T>(...args: any[]): any
                   visitDocComment<T>(...args: any[]): any
                   visitDocRoot<T>(...args: any[]): any
                   visitEndElement<T>(...args: any[]): any
                   visitEntity<T>(...args: any[]): any
                   visitErroneous<T>(...args: any[]): any
                   visitIdentifier<T>(...args: any[]): any
                   visitInheritDoc<T>(...args: any[]): any
                   visitLink<T>(...args: any[]): any
                   visitLiteral<T>(...args: any[]): any
                   visitParam<T>(...args: any[]): any
                   visitReference<T>(...args: any[]): any
                   visitReturn<T>(...args: any[]): any
                   visitSee<T>(...args: any[]): any
                   visitSerial<T>(...args: any[]): any
                   visitSerialData<T>(...args: any[]): any
                   visitSerialField<T>(...args: any[]): any
                   visitSince<T>(...args: any[]): any
                   visitStartElement<T>(...args: any[]): any
                   visitText<T>(...args: any[]): any
                   visitThrows<T>(...args: any[]): any
                   visitUnknownBlockTag<T>(...args: any[]): any
                   visitUnknownInlineTag<T>(...args: any[]): any
                   visitValue<T>(...args: any[]): any
                   visitVersion<T>(...args: any[]): any
                   visitOther<T>(...args: any[]): any
               }

            }
            namespace util {
               class JCDiagnostic$Factory$1 implements java.lang.Runnable {
                   val$options: com.sun.tools.javac.util.Options
                   this$0: com.sun.tools.javac.util.JCDiagnostic$Factory
                   constructor(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory, arg1: com.sun.tools.javac.util.Options)
                   public run(): void
               }
               class JCDiagnostic$Factory {
                   protected static diagnosticFactoryKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.util.JCDiagnostic$Factory>
                   formatter: com.sun.tools.javac.api.DiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic>
                   prefix: java.lang.String
                   defaultErrorFlags: java.util.Set<com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.JCDiagnostic$Factory
                   constructor(...args: any[])
                   public error(arg0: com.sun.tools.javac.util.DiagnosticSource, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: java.lang.String, ...arg3: java.lang.Object[]): com.sun.tools.javac.util.JCDiagnostic
                   mandatoryWarning<T>(...args: any[]): any
                   warning<T>(...args: any[]): any
                   public mandatoryNote(arg0: com.sun.tools.javac.util.DiagnosticSource, arg1: java.lang.String, ...arg2: java.lang.Object[]): com.sun.tools.javac.util.JCDiagnostic
                   note<T>(...args: any[]): any
                   public fragment(arg0: java.lang.String, ...arg1: java.lang.Object[]): com.sun.tools.javac.util.JCDiagnostic
                   create<T>(...args: any[]): any
                   protected qualify(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: java.lang.String): java.lang.String
                   static access$000(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory, arg1: com.sun.tools.javac.util.Options): void
               }
               class JCDiagnostic$DiagnosticType extends java.lang.Enum<com.sun.tools.javac.util.JCDiagnostic$DiagnosticType> {
                   public static FRAGMENT: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType
                   public static NOTE: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType
                   public static WARNING: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType
                   public static ERROR: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType
                   key: java.lang.String
                   public static values(): com.sun.tools.javac.util.JCDiagnostic$DiagnosticType[]
                   valueOf<T>(...args: any[]): any
               }
               interface JCDiagnostic$DiagnosticPosition {
                   public getTree(): com.sun.tools.javac.tree.JCTree
                   public getStartPosition(): int
                   public getPreferredPosition(): int
                   public getEndPosition(arg0: com.sun.tools.javac.tree.EndPosTable): int
               }
               class JCDiagnostic$SimpleDiagnosticPosition implements com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition {
                   public constructor(arg0: int)
                   public getTree(): com.sun.tools.javac.tree.JCTree
                   public getStartPosition(): int
                   public getPreferredPosition(): int
                   public getEndPosition(arg0: com.sun.tools.javac.tree.EndPosTable): int
               }
               class JCDiagnostic$DiagnosticFlag extends java.lang.Enum<com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag> {
                   public static MANDATORY: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag
                   public static RESOLVE_ERROR: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag
                   public static SYNTAX: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag
                   public static RECOVERABLE: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag
                   public static NON_DEFERRABLE: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag
                   public static COMPRESSED: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag
                   public static values(): com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag[]
                   valueOf<T>(...args: any[]): any
               }
               class JCDiagnostic$SourcePosition {
                   this$0: com.sun.tools.javac.util.JCDiagnostic
                   constructor(arg0: com.sun.tools.javac.util.JCDiagnostic)
                   public getLineNumber(): int
                   public getColumnNumber(): int
               }
               class JCDiagnostic$MultilineDiagnostic extends com.sun.tools.javac.util.JCDiagnostic {
                   public constructor(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.util.JCDiagnostic>)
                   public getSubdiagnostics(): com.sun.tools.javac.util.List<com.sun.tools.javac.util.JCDiagnostic>
                   public isMultiline(): boolean
                   public getSource(): java.lang.Object
               }
               class JCDiagnostic$1 {
                   static $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType: int[]
                   static $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticFlag: int[]
               }
               class JCDiagnostic implements javax.tools.Diagnostic<javax.tools.JavaFileObject> {
                   protected args: java.lang.Object[]
                   public static fragment(arg0: java.lang.String, ...arg1: java.lang.Object[]): com.sun.tools.javac.util.JCDiagnostic
                   public static getFragmentFormatter(): com.sun.tools.javac.api.DiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic>
                   protected constructor(arg0: com.sun.tools.javac.api.DiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg2: com.sun.tools.javac.code.Lint$LintCategory, arg3: java.util.Set<com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag>, arg4: com.sun.tools.javac.util.DiagnosticSource, arg5: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg6: java.lang.String, ...arg7: java.lang.Object[])
                   public getType(): com.sun.tools.javac.util.JCDiagnostic$DiagnosticType
                   public getSubdiagnostics(): com.sun.tools.javac.util.List<com.sun.tools.javac.util.JCDiagnostic>
                   public isMultiline(): boolean
                   public isMandatory(): boolean
                   public hasLintCategory(): boolean
                   public getLintCategory(): com.sun.tools.javac.code.Lint$LintCategory
                   getSource<T>(...args: any[]): any
                   public getDiagnosticSource(): com.sun.tools.javac.util.DiagnosticSource
                   protected getIntStartPosition(): int
                   protected getIntPosition(): int
                   protected getIntEndPosition(): int
                   public getStartPosition(): long
                   public getPosition(): long
                   public getEndPosition(): long
                   public getDiagnosticPosition(): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   public getLineNumber(): long
                   public getColumnNumber(): long
                   public getArgs(): java.lang.Object[]
                   getPrefix<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public getKind(): javax.tools.Diagnostic$Kind
                   public getCode(): java.lang.String
                   public getMessage(arg0: java.util.Locale): java.lang.String
                   public setFlag(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag): void
                   public isFlagSet(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag): boolean
                   static access$100(arg0: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   static access$200(arg0: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.util.DiagnosticSource
                   static access$300(arg0: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.api.DiagnosticFormatter
                   static access$400(arg0: com.sun.tools.javac.util.JCDiagnostic): java.util.Set
               }
               class Log$PrefixKind extends java.lang.Enum<com.sun.tools.javac.util.Log$PrefixKind> {
                   public static JAVAC: com.sun.tools.javac.util.Log$PrefixKind
                   public static COMPILER_MISC: com.sun.tools.javac.util.Log$PrefixKind
                   value: java.lang.String
                   public static values(): com.sun.tools.javac.util.Log$PrefixKind[]
                   valueOf<T>(...args: any[]): any
                   public key(arg0: java.lang.String): java.lang.String
               }
               abstract class Log$DiagnosticHandler {
                   protected prev: com.sun.tools.javac.util.Log$DiagnosticHandler
                   public constructor()
                   protected install(arg0: com.sun.tools.javac.util.Log): void
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Log$DiscardDiagnosticHandler extends com.sun.tools.javac.util.Log$DiagnosticHandler {
                   public constructor(arg0: com.sun.tools.javac.util.Log)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Log$DeferredDiagnosticHandler extends com.sun.tools.javac.util.Log$DiagnosticHandler {
                   constructor(...args: any[])
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic): void
                   public getDiagnostics(): java.util.Queue<com.sun.tools.javac.util.JCDiagnostic>
                   reportDeferredDiagnostics<T>(...args: any[]): any
               }
               class Log$WriterKind extends java.lang.Enum<com.sun.tools.javac.util.Log$WriterKind> {
                   public static NOTICE: com.sun.tools.javac.util.Log$WriterKind
                   public static WARNING: com.sun.tools.javac.util.Log$WriterKind
                   public static ERROR: com.sun.tools.javac.util.Log$WriterKind
                   public static values(): com.sun.tools.javac.util.Log$WriterKind[]
                   valueOf<T>(...args: any[]): any
               }
               class Log$1 implements java.lang.Runnable {
                   val$options: com.sun.tools.javac.util.Options
                   this$0: com.sun.tools.javac.util.Log
                   constructor(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.util.Options)
                   public run(): void
               }
               class Log$DefaultDiagnosticHandler extends com.sun.tools.javac.util.Log$DiagnosticHandler {
                   this$0: com.sun.tools.javac.util.Log
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic): void
                   constructor(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.util.Log$1)
               }
               class Log$2 {
                   static $SwitchMap$com$sun$tools$javac$util$Log$WriterKind: int[]
                   static $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType: int[]
               }
               class Log extends com.sun.tools.javac.util.AbstractLog {
                   public static logKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.util.Log>
                   public static outKey: com.sun.tools.javac.util.Context$Key<java.io.PrintWriter>
                   protected errWriter: java.io.PrintWriter
                   protected warnWriter: java.io.PrintWriter
                   protected noticeWriter: java.io.PrintWriter
                   protected MaxErrors: int
                   protected MaxWarnings: int
                   public promptOnError: boolean
                   public emitWarnings: boolean
                   public suppressNotes: boolean
                   public dumpOnError: boolean
                   public multipleErrors: boolean
                   protected diagListener: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>
                   public expectDiagKeys: java.util.Set<java.lang.String>
                   public compressedOutput: boolean
                   public nerrors: int
                   public nwarnings: int
                   constructor(...args: any[])
                   protected getDefaultMaxErrors(): int
                   protected getDefaultMaxWarnings(): int
                   static defaultWriter(arg0: com.sun.tools.javac.util.Context): java.io.PrintWriter
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.Log
                   public hasDiagnosticListener(): boolean
                   public setEndPosTable(arg0: javax.tools.JavaFileObject, arg1: com.sun.tools.javac.tree.EndPosTable): void
                   public currentSourceFile(): javax.tools.JavaFileObject
                   public getDiagnosticFormatter(): com.sun.tools.javac.api.DiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic>
                   public setDiagnosticFormatter(arg0: com.sun.tools.javac.api.DiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic>): void
                   public getWriter(arg0: com.sun.tools.javac.util.Log$WriterKind): java.io.PrintWriter
                   public setWriter(arg0: com.sun.tools.javac.util.Log$WriterKind, arg1: java.io.PrintWriter): void
                   public setWriters(arg0: java.io.PrintWriter): void
                   public initRound(arg0: com.sun.tools.javac.util.Log): void
                   public popDiagnosticHandler(arg0: com.sun.tools.javac.util.Log$DiagnosticHandler): void
                   flush<T>(...args: any[]): any
                   protected shouldReport(arg0: javax.tools.JavaFileObject, arg1: int): boolean
                   public prompt(): void
                   printNewline<T>(...args: any[]): any
                   printLines<T>(...args: any[]): any
                   printRawLines<T>(...args: any[]): any
                   public printVerbose(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   protected directError(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   public strictWarning(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic): void
                   protected writeDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic): void
                   protected getWriterForDiagnosticType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType): java.io.PrintWriter
                   public static getLocalizedString(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                   localize<T>(...args: any[]): any
                   public rawError(arg0: int, arg1: java.lang.String): void
                   public rawWarning(arg0: int, arg1: java.lang.String): void
                   public static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                   static access$000(arg0: com.sun.tools.javac.util.Log): com.sun.tools.javac.util.Log$DiagnosticHandler
                   static access$002(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.util.Log$DiagnosticHandler): com.sun.tools.javac.util.Log$DiagnosticHandler
                   static access$200(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.util.Options): void
               }
               abstract class AbstractLog {
                   protected diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   protected source: com.sun.tools.javac.util.DiagnosticSource
                   protected sourceMap: java.util.Map<javax.tools.JavaFileObject, com.sun.tools.javac.util.DiagnosticSource>
                   constructor(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory)
                   public useSource(arg0: javax.tools.JavaFileObject): javax.tools.JavaFileObject
                   protected getSource(arg0: javax.tools.JavaFileObject): com.sun.tools.javac.util.DiagnosticSource
                   public currentSource(): com.sun.tools.javac.util.DiagnosticSource
                   error<T>(...args: any[]): any
                   warning<T>(...args: any[]): any
                   mandatoryWarning<T>(...args: any[]): any
                   note<T>(...args: any[]): any
                   public mandatoryNote(arg0: javax.tools.JavaFileObject, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   protected report(arg0: com.sun.tools.javac.util.JCDiagnostic): void
                   protected directError(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
               }
               class BaseFileManager$1 extends com.sun.tools.javac.main.OptionHelper$GrumpyHelper {
                   this$0: com.sun.tools.javac.util.BaseFileManager
                   constructor(arg0: com.sun.tools.javac.util.BaseFileManager, arg1: com.sun.tools.javac.util.Log)
                   public get(arg0: com.sun.tools.javac.main.Option): java.lang.String
                   public put(arg0: java.lang.String, arg1: java.lang.String): void
                   public remove(arg0: java.lang.String): void
               }
               class BaseFileManager$ByteBufferCache {
                   get(arg0: int): java.nio.ByteBuffer
                   put(arg0: java.nio.ByteBuffer): void
                   constructor(arg0: com.sun.tools.javac.util.BaseFileManager$1)
               }
               class BaseFileManager$ContentCacheEntry {
                   timestamp: long
                   ref: java.lang.ref.SoftReference<java.nio.CharBuffer>
                   constructor(arg0: javax.tools.JavaFileObject, arg1: java.nio.CharBuffer)
                   isValid(arg0: javax.tools.JavaFileObject): boolean
                   getValue(): java.nio.CharBuffer
               }
               abstract class BaseFileManager {
                   public log: com.sun.tools.javac.util.Log
                   protected charset: java.nio.charset.Charset
                   protected options: com.sun.tools.javac.util.Options
                   protected classLoaderClass: java.lang.String
                   protected locations: com.sun.tools.javac.file.Locations
                   protected contentCache: java.util.Map<javax.tools.JavaFileObject, com.sun.tools.javac.util.BaseFileManager$ContentCacheEntry>
                   protected constructor(arg0: java.nio.charset.Charset)
                   public setContext(arg0: com.sun.tools.javac.util.Context): void
                   protected createLocations(): com.sun.tools.javac.file.Locations
                   protected getSource(): com.sun.tools.javac.code.Source
                   protected getClassLoader(arg0: java.net.URL[]): java.lang.ClassLoader
                   public handleOption(arg0: java.lang.String, arg1: java.util.Iterator<java.lang.String>): boolean
                   public isSupportedOption(arg0: java.lang.String): int
                   public isDefaultBootClassPath(): boolean
                   public getEncodingName(): java.lang.String
                   public decode(arg0: java.nio.ByteBuffer, arg1: boolean): java.nio.CharBuffer
                   public getDecoder(arg0: java.lang.String, arg1: boolean): java.nio.charset.CharsetDecoder
                   public makeByteBuffer(arg0: java.io.InputStream): java.nio.ByteBuffer
                   public recycleByteBuffer(arg0: java.nio.ByteBuffer): void
                   public getCachedContent(arg0: javax.tools.JavaFileObject): java.nio.CharBuffer
                   public cache(arg0: javax.tools.JavaFileObject, arg1: java.nio.CharBuffer): void
                   public flushCache(arg0: javax.tools.JavaFileObject): void
                   public static getKind(arg0: java.lang.String): javax.tools.JavaFileObject$Kind
                   nullCheck<T>(...args: any[]): any
               }
               class Context$Key<T> {
                   public constructor()
               }
               interface Context$Factory<T> {
                   public make(arg0: com.sun.tools.javac.util.Context): T
               }
               class Context {
                   put<T>(...args: any[]): any
                   get<T>(...args: any[]): any
                   constructor(...args: any[])
                   public dump(): void
                   public clear(): void
               }
               class JavacMessages implements com.sun.tools.javac.api.Messages {
                   public static messagesKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.util.JavacMessages>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.JavacMessages
                   public getCurrentLocale(): java.util.Locale
                   public setCurrentLocale(arg0: java.util.Locale): void
                   constructor(...args: any[])
                   public add(arg0: java.lang.String): void
                   public getBundles(arg0: java.util.Locale): com.sun.tools.javac.util.List<java.util.ResourceBundle>
                   getLocalizedString<T>(...args: any[]): any
                   static getDefaultLocalizedString(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                   static getDefaultMessages(): com.sun.tools.javac.util.JavacMessages
                   public static getDefaultBundle(): java.util.ResourceBundle
               }
               class Options {
                   public static optionsKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.util.Options>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.Options
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   get<T>(...args: any[]): any
                   getBoolean<T>(...args: any[]): any
                   isSet<T>(...args: any[]): any
                   isUnset<T>(...args: any[]): any
                   put<T>(...args: any[]): any
                   public putAll(arg0: com.sun.tools.javac.util.Options): void
                   public remove(arg0: java.lang.String): void
                   public keySet(): java.util.Set<java.lang.String>
                   public size(): int
                   public addListener(arg0: java.lang.Runnable): void
                   public notifyListeners(): void
                   public lint(arg0: java.lang.String): boolean
               }
               class Pair<A, B> {
                   public fst: A
                   public snd: B
                   public constructor(arg0: A, arg1: B)
                   toString<T>(...args: any[]): any
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   public static of<A, B>(arg0: A, arg1: B): com.sun.tools.javac.util.Pair<A, B>
               }
               interface LayoutCharacters {
                   public static TabInc: int
                   public static DiagInc: int
                   public static DetailsInc: int
                   public static TAB: byte
                   public static LF: byte
                   public static FF: byte
                   public static CR: byte
                   public static EOI: byte
               }
               class DiagnosticSource$1 extends com.sun.tools.javac.util.DiagnosticSource {
                   constructor()
                   protected findLine(arg0: int): boolean
               }
               class DiagnosticSource {
                   public static NO_SOURCE: com.sun.tools.javac.util.DiagnosticSource
                   protected fileObject: javax.tools.JavaFileObject
                   protected endPosTable: com.sun.tools.javac.tree.EndPosTable
                   protected refBuf: java.lang.ref.SoftReference<char[]>
                   protected buf: char[]
                   protected bufLen: int
                   protected lineStart: int
                   protected line: int
                   protected log: com.sun.tools.javac.util.AbstractLog
                   constructor(...args: any[])
                   public getFile(): javax.tools.JavaFileObject
                   public getLineNumber(arg0: int): int
                   public getColumnNumber(arg0: int, arg1: boolean): int
                   public getLine(arg0: int): java.lang.String
                   public getEndPosTable(): com.sun.tools.javac.tree.EndPosTable
                   public setEndPosTable(arg0: com.sun.tools.javac.tree.EndPosTable): void
                   protected findLine(arg0: int): boolean
                   protected initBuf(arg0: javax.tools.JavaFileObject): char[]
               }
               class List$1 extends com.sun.tools.javac.util.List<java.lang.Object> {
                   constructor(arg0: java.lang.Object, arg1: com.sun.tools.javac.util.List)
                   public setTail(arg0: com.sun.tools.javac.util.List<java.lang.Object>): com.sun.tools.javac.util.List<java.lang.Object>
                   public isEmpty(): boolean
               }
               class List$2 implements java.util.Iterator<java.lang.Object> {
                   constructor()
                   public hasNext(): boolean
                   public next(): java.lang.Object
                   public remove(): void
               }
               class List$3 implements java.util.Iterator<A> {
                   elems: com.sun.tools.javac.util.List<A>
                   this$0: com.sun.tools.javac.util.List
                   constructor(arg0: com.sun.tools.javac.util.List)
                   public hasNext(): boolean
                   public next(): A
                   public remove(): void
               }
               class List<A> extends java.util.AbstractCollection<A> implements java.util.List<A> {
                   public head: A
                   public tail: com.sun.tools.javac.util.List<A>
                   constructor(arg0: A, arg1: com.sun.tools.javac.util.List<A>)
                   public static nil<A>(): com.sun.tools.javac.util.List<A>
                   public static filter<A>(arg0: com.sun.tools.javac.util.List<A>, arg1: A): com.sun.tools.javac.util.List<A>
                   public intersect(arg0: com.sun.tools.javac.util.List<A>): com.sun.tools.javac.util.List<A>
                   public diff(arg0: com.sun.tools.javac.util.List<A>): com.sun.tools.javac.util.List<A>
                   public take(arg0: int): com.sun.tools.javac.util.List<A>
                   of<T>(...args: any[]): any
                   from<T>(...args: any[]): any
                   public static fill<A>(arg0: int, arg1: A): com.sun.tools.javac.util.List<A>
                   public isEmpty(): boolean
                   public nonEmpty(): boolean
                   public length(): int
                   public size(): int
                   public setTail(arg0: com.sun.tools.javac.util.List<A>): com.sun.tools.javac.util.List<A>
                   public prepend(arg0: A): com.sun.tools.javac.util.List<A>
                   public prependList(arg0: com.sun.tools.javac.util.List<A>): com.sun.tools.javac.util.List<A>
                   public reverse(): com.sun.tools.javac.util.List<A>
                   public append(arg0: A): com.sun.tools.javac.util.List<A>
                   appendList<T>(...args: any[]): any
                   toArray<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public hashCode(): int
                   equals<T>(...args: any[]): any
                   public contains(arg0: java.lang.Object): boolean
                   public last(): A
                   public static convert<T>(arg0: java.lang.Class<T>, arg1: com.sun.tools.javac.util.List<any>): com.sun.tools.javac.util.List<T>
                   public iterator(): java.util.Iterator<A>
                   public get(arg0: int): A
                   public addAll(arg0: int, arg1: java.util.Collection<A>): boolean
                   public set(arg0: int, arg1: A): A
                   public add(arg0: int, arg1: A): void
                   public remove(arg0: int): A
                   public indexOf(arg0: java.lang.Object): int
                   public lastIndexOf(arg0: java.lang.Object): int
                   listIterator<T>(...args: any[]): any
                   public subList(arg0: int, arg1: int): java.util.List<A>
               }
               abstract class Name$Table {
                   public names: com.sun.tools.javac.util.Names
                   constructor(arg0: com.sun.tools.javac.util.Names)
                   public fromChars(arg0: char[], arg1: int, arg2: int): com.sun.tools.javac.util.Name
                   public fromString(arg0: java.lang.String): com.sun.tools.javac.util.Name
                   fromUtf<T>(...args: any[]): any
                   public dispose(): void
                   protected static hashValue(arg0: byte[], arg1: int, arg2: int): int
                   protected static equals(arg0: byte[], arg1: int, arg2: byte[], arg3: int, arg4: int): boolean
               }
               abstract class Name implements javax.lang.model.element.Name {
                   public table: com.sun.tools.javac.util.Name$Table
                   protected constructor(arg0: com.sun.tools.javac.util.Name$Table)
                   public contentEquals(arg0: java.lang.CharSequence): boolean
                   public length(): int
                   public charAt(arg0: int): char
                   public subSequence(arg0: int, arg1: int): java.lang.CharSequence
                   append<T>(...args: any[]): any
                   public compareTo(arg0: com.sun.tools.javac.util.Name): int
                   public isEmpty(): boolean
                   public lastIndexOf(arg0: byte): int
                   public startsWith(arg0: com.sun.tools.javac.util.Name): boolean
                   public subName(arg0: int, arg1: int): com.sun.tools.javac.util.Name
                   toString<T>(...args: any[]): any
                   public toUtf(): byte[]
                   public getIndex(): int
                   public getByteLength(): int
                   public getByteAt(arg0: int): byte
                   public getBytes(arg0: byte[], arg1: int): void
                   public getByteArray(): byte[]
                   public getByteOffset(): int
               }
               interface Filter<T> {
                   public accepts(arg0: T): boolean
               }
               class ListBuffer$1 implements java.util.Iterator<A> {
                   elems: com.sun.tools.javac.util.List<A>
                   this$0: com.sun.tools.javac.util.ListBuffer
                   constructor(arg0: com.sun.tools.javac.util.ListBuffer)
                   public hasNext(): boolean
                   public next(): A
                   public remove(): void
               }
               class ListBuffer<A> extends java.util.AbstractQueue<A> {
                   public static of<T>(arg0: T): com.sun.tools.javac.util.ListBuffer<T>
                   public constructor()
                   public clear(): void
                   public length(): int
                   public size(): int
                   public isEmpty(): boolean
                   public nonEmpty(): boolean
                   public prepend(arg0: A): com.sun.tools.javac.util.ListBuffer<A>
                   public append(arg0: A): com.sun.tools.javac.util.ListBuffer<A>
                   appendList<T>(...args: any[]): any
                   public appendArray(arg0: A[]): com.sun.tools.javac.util.ListBuffer<A>
                   public toList(): com.sun.tools.javac.util.List<A>
                   public contains(arg0: java.lang.Object): boolean
                   toArray<T>(...args: any[]): any
                   public first(): A
                   public next(): A
                   public iterator(): java.util.Iterator<A>
                   public add(arg0: A): boolean
                   public remove(arg0: java.lang.Object): boolean
                   public containsAll(arg0: java.util.Collection<any>): boolean
                   public addAll(arg0: java.util.Collection<A>): boolean
                   public removeAll(arg0: java.util.Collection<any>): boolean
                   public retainAll(arg0: java.util.Collection<any>): boolean
                   public offer(arg0: A): boolean
                   public poll(): A
                   public peek(): A
                   public last(): A
                   static access$000(arg0: com.sun.tools.javac.util.ListBuffer): com.sun.tools.javac.util.List
               }
               interface GraphUtils$DependencyKind {
                   public getDotStyle(): java.lang.String
               }
               abstract class GraphUtils$Node<D> {
                   public data: D
                   public constructor(arg0: D)
                   public getSupportedDependencyKinds(): com.sun.tools.javac.util.GraphUtils$DependencyKind[]
                   public getAllDependencies(): java.lang.Iterable<com.sun.tools.javac.util.GraphUtils$Node<D>>
                   public getDependencyName(arg0: com.sun.tools.javac.util.GraphUtils$Node<D>, arg1: com.sun.tools.javac.util.GraphUtils$DependencyKind): java.lang.String
                   toString<T>(...args: any[]): any
               }
               abstract class GraphUtils$TarjanNode<D> extends com.sun.tools.javac.util.GraphUtils$Node<D> implements java.lang.Comparable<com.sun.tools.javac.util.GraphUtils$TarjanNode<D>> {
                   index: int
                   lowlink: int
                   active: boolean
                   public constructor(arg0: D)
                   public getAllDependencies(): java.lang.Iterable<com.sun.tools.javac.util.GraphUtils$TarjanNode<D>>
                   public getDependenciesByKind(arg0: com.sun.tools.javac.util.GraphUtils$DependencyKind): java.lang.Iterable<com.sun.tools.javac.util.GraphUtils$TarjanNode<D>>
                   compareTo<T>(...args: any[]): any
               }
               class GraphUtils$TarjanNode<D>> {
                   index: int
                   sccs: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.util.List<N>>
                   stack: com.sun.tools.javac.util.ListBuffer<N>
                   constructor(arg0: com.sun.tools.javac.util.GraphUtils$1)
                   static access$100(arg0: com.sun.tools.javac.util.GraphUtils$Tarjan, arg1: java.lang.Iterable): com.sun.tools.javac.util.List
               }
               class GraphUtils$1 {
               }
               class GraphUtils {
                   public constructor()
                   public static tarjan<D, N extends com.sun.tools.javac.util.GraphUtils$TarjanNode<D>>(arg0: java.lang.Iterable<N>): com.sun.tools.javac.util.List<any extends com.sun.tools.javac.util.List<N>>
                   public static toDot<D>(arg0: java.lang.Iterable<com.sun.tools.javac.util.GraphUtils$TarjanNode<D>>, arg1: java.lang.String, arg2: java.lang.String): java.lang.String
               }
               class Names {
                   public static namesKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.util.Names>
                   public asterisk: com.sun.tools.javac.util.Name
                   public comma: com.sun.tools.javac.util.Name
                   public empty: com.sun.tools.javac.util.Name
                   public hyphen: com.sun.tools.javac.util.Name
                   public one: com.sun.tools.javac.util.Name
                   public period: com.sun.tools.javac.util.Name
                   public semicolon: com.sun.tools.javac.util.Name
                   public slash: com.sun.tools.javac.util.Name
                   public slashequals: com.sun.tools.javac.util.Name
                   public _class: com.sun.tools.javac.util.Name
                   public _default: com.sun.tools.javac.util.Name
                   public _super: com.sun.tools.javac.util.Name
                   public _this: com.sun.tools.javac.util.Name
                   public _name: com.sun.tools.javac.util.Name
                   public addSuppressed: com.sun.tools.javac.util.Name
                   public any: com.sun.tools.javac.util.Name
                   public append: com.sun.tools.javac.util.Name
                   public clinit: com.sun.tools.javac.util.Name
                   public clone: com.sun.tools.javac.util.Name
                   public close: com.sun.tools.javac.util.Name
                   public compareTo: com.sun.tools.javac.util.Name
                   public deserializeLambda: com.sun.tools.javac.util.Name
                   public desiredAssertionStatus: com.sun.tools.javac.util.Name
                   public equals: com.sun.tools.javac.util.Name
                   public error: com.sun.tools.javac.util.Name
                   public family: com.sun.tools.javac.util.Name
                   public finalize: com.sun.tools.javac.util.Name
                   public forName: com.sun.tools.javac.util.Name
                   public getClass: com.sun.tools.javac.util.Name
                   public getClassLoader: com.sun.tools.javac.util.Name
                   public getComponentType: com.sun.tools.javac.util.Name
                   public getDeclaringClass: com.sun.tools.javac.util.Name
                   public getMessage: com.sun.tools.javac.util.Name
                   public hasNext: com.sun.tools.javac.util.Name
                   public hashCode: com.sun.tools.javac.util.Name
                   public init: com.sun.tools.javac.util.Name
                   public initCause: com.sun.tools.javac.util.Name
                   public iterator: com.sun.tools.javac.util.Name
                   public length: com.sun.tools.javac.util.Name
                   public next: com.sun.tools.javac.util.Name
                   public ordinal: com.sun.tools.javac.util.Name
                   public serialVersionUID: com.sun.tools.javac.util.Name
                   toString<T>(...args: any[]): any
                   public value: com.sun.tools.javac.util.Name
                   valueOf<T>(...args: any[]): any
                   public values: com.sun.tools.javac.util.Name
                   public java_io_Serializable: com.sun.tools.javac.util.Name
                   public java_lang_AutoCloseable: com.sun.tools.javac.util.Name
                   public java_lang_Class: com.sun.tools.javac.util.Name
                   public java_lang_Cloneable: com.sun.tools.javac.util.Name
                   public java_lang_Enum: com.sun.tools.javac.util.Name
                   public java_lang_Object: com.sun.tools.javac.util.Name
                   public java_lang_invoke_MethodHandle: com.sun.tools.javac.util.Name
                   public Array: com.sun.tools.javac.util.Name
                   public Bound: com.sun.tools.javac.util.Name
                   public Method: com.sun.tools.javac.util.Name
                   public java_lang: com.sun.tools.javac.util.Name
                   public Annotation: com.sun.tools.javac.util.Name
                   public AnnotationDefault: com.sun.tools.javac.util.Name
                   public BootstrapMethods: com.sun.tools.javac.util.Name
                   public Bridge: com.sun.tools.javac.util.Name
                   public CharacterRangeTable: com.sun.tools.javac.util.Name
                   public Code: com.sun.tools.javac.util.Name
                   public CompilationID: com.sun.tools.javac.util.Name
                   public ConstantValue: com.sun.tools.javac.util.Name
                   public Deprecated: com.sun.tools.javac.util.Name
                   public EnclosingMethod: com.sun.tools.javac.util.Name
                   public Enum: com.sun.tools.javac.util.Name
                   public Exceptions: com.sun.tools.javac.util.Name
                   public InnerClasses: com.sun.tools.javac.util.Name
                   public LineNumberTable: com.sun.tools.javac.util.Name
                   public LocalVariableTable: com.sun.tools.javac.util.Name
                   public LocalVariableTypeTable: com.sun.tools.javac.util.Name
                   public MethodParameters: com.sun.tools.javac.util.Name
                   public RuntimeInvisibleAnnotations: com.sun.tools.javac.util.Name
                   public RuntimeInvisibleParameterAnnotations: com.sun.tools.javac.util.Name
                   public RuntimeInvisibleTypeAnnotations: com.sun.tools.javac.util.Name
                   public RuntimeVisibleAnnotations: com.sun.tools.javac.util.Name
                   public RuntimeVisibleParameterAnnotations: com.sun.tools.javac.util.Name
                   public RuntimeVisibleTypeAnnotations: com.sun.tools.javac.util.Name
                   public Signature: com.sun.tools.javac.util.Name
                   public SourceFile: com.sun.tools.javac.util.Name
                   public SourceID: com.sun.tools.javac.util.Name
                   public StackMap: com.sun.tools.javac.util.Name
                   public StackMapTable: com.sun.tools.javac.util.Name
                   public Synthetic: com.sun.tools.javac.util.Name
                   public Value: com.sun.tools.javac.util.Name
                   public Varargs: com.sun.tools.javac.util.Name
                   public ANNOTATION_TYPE: com.sun.tools.javac.util.Name
                   public CONSTRUCTOR: com.sun.tools.javac.util.Name
                   public FIELD: com.sun.tools.javac.util.Name
                   public LOCAL_VARIABLE: com.sun.tools.javac.util.Name
                   public METHOD: com.sun.tools.javac.util.Name
                   public PACKAGE: com.sun.tools.javac.util.Name
                   public PARAMETER: com.sun.tools.javac.util.Name
                   public TYPE: com.sun.tools.javac.util.Name
                   public TYPE_PARAMETER: com.sun.tools.javac.util.Name
                   public TYPE_USE: com.sun.tools.javac.util.Name
                   public CLASS: com.sun.tools.javac.util.Name
                   public RUNTIME: com.sun.tools.javac.util.Name
                   public SOURCE: com.sun.tools.javac.util.Name
                   public T: com.sun.tools.javac.util.Name
                   public deprecated: com.sun.tools.javac.util.Name
                   public ex: com.sun.tools.javac.util.Name
                   public package_info: com.sun.tools.javac.util.Name
                   public lambda: com.sun.tools.javac.util.Name
                   public metafactory: com.sun.tools.javac.util.Name
                   public altMetafactory: com.sun.tools.javac.util.Name
                   public dollarThis: com.sun.tools.javac.util.Name
                   public table: com.sun.tools.javac.util.Name$Table
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.Names
                   public constructor(arg0: com.sun.tools.javac.util.Context)
                   protected createTable(arg0: com.sun.tools.javac.util.Options): com.sun.tools.javac.util.Name$Table
                   public dispose(): void
                   public fromChars(arg0: char[], arg1: int, arg2: int): com.sun.tools.javac.util.Name
                   public fromString(arg0: java.lang.String): com.sun.tools.javac.util.Name
                   fromUtf<T>(...args: any[]): any
               }
               class Warner {
                   protected warned: boolean
                   public pos(): com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   public warn(arg0: com.sun.tools.javac.code.Lint$LintCategory): void
                   public silentWarn(arg0: com.sun.tools.javac.code.Lint$LintCategory): void
                   constructor(...args: any[])
                   public hasSilentLint(arg0: com.sun.tools.javac.code.Lint$LintCategory): boolean
                   public hasNonSilentLint(arg0: com.sun.tools.javac.code.Lint$LintCategory): boolean
                   public hasLint(arg0: com.sun.tools.javac.code.Lint$LintCategory): boolean
                   public clear(): void
               }
               class MandatoryWarningHandler$DeferredDiagnosticKind extends java.lang.Enum<com.sun.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind> {
                   public static IN_FILE: com.sun.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind
                   public static ADDITIONAL_IN_FILE: com.sun.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind
                   public static IN_FILES: com.sun.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind
                   public static ADDITIONAL_IN_FILES: com.sun.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind
                   public static values(): com.sun.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind[]
                   valueOf<T>(...args: any[]): any
                   getKey(arg0: java.lang.String): java.lang.String
               }
               class MandatoryWarningHandler {
                   public constructor(arg0: com.sun.tools.javac.util.Log, arg1: boolean, arg2: boolean, arg3: java.lang.String, arg4: com.sun.tools.javac.code.Lint$LintCategory)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   public reportDeferredDiagnostic(): void
               }
               interface Position$LineMap extends com.sun.source.tree.LineMap {
                   public getStartPosition(arg0: int): int
                   public getPosition(arg0: int, arg1: int): int
                   public getLineNumber(arg0: int): int
                   public getColumnNumber(arg0: int): int
               }
               class Position$LineMapImpl implements com.sun.tools.javac.util.Position$LineMap {
                   protected startPosition: int[]
                   protected constructor()
                   protected build(arg0: char[], arg1: int): void
                   getStartPosition<T>(...args: any[]): any
                   getPosition<T>(...args: any[]): any
                   getLineNumber<T>(...args: any[]): any
                   getColumnNumber<T>(...args: any[]): any
                   protected setTabPosition(arg0: int): void
               }
               class Position$LineTabMapImpl extends com.sun.tools.javac.util.Position$LineMapImpl {
                   public constructor(arg0: int)
                   protected setTabPosition(arg0: int): void
                   getColumnNumber<T>(...args: any[]): any
                   getPosition<T>(...args: any[]): any
                   getLineNumber<T>(...args: any[]): any
                   getStartPosition<T>(...args: any[]): any
               }
               class Position {
                   public static NOPOS: int
                   public static FIRSTPOS: int
                   public static FIRSTLINE: int
                   public static FIRSTCOLUMN: int
                   public static LINESHIFT: int
                   public static MAXCOLUMN: int
                   public static MAXLINE: int
                   public static MAXPOS: int
                   public static makeLineMap(arg0: char[], arg1: int, arg2: boolean): com.sun.tools.javac.util.Position$LineMap
                   public static encodePosition(arg0: int, arg1: int): int
               }
               class Bits$BitsState extends java.lang.Enum<com.sun.tools.javac.util.Bits$BitsState> {
                   public static UNKNOWN: com.sun.tools.javac.util.Bits$BitsState
                   public static UNINIT: com.sun.tools.javac.util.Bits$BitsState
                   public static NORMAL: com.sun.tools.javac.util.Bits$BitsState
                   public static values(): com.sun.tools.javac.util.Bits$BitsState[]
                   valueOf<T>(...args: any[]): any
                   static getState(arg0: int[], arg1: boolean): com.sun.tools.javac.util.Bits$BitsState
               }
               class Bits$1 {
                   static $SwitchMap$com$sun$tools$javac$util$Bits$BitsState: int[]
               }
               class Bits {
                   public bits: int[]
                   protected currentState: com.sun.tools.javac.util.Bits$BitsState
                   constructor(...args: any[])
                   protected sizeTo(arg0: int): void
                   public clear(): void
                   public reset(): void
                   protected internalReset(): void
                   public isReset(): boolean
                   public assign(arg0: com.sun.tools.javac.util.Bits): com.sun.tools.javac.util.Bits
                   public dup(): com.sun.tools.javac.util.Bits
                   protected dupBits(): int[]
                   public incl(arg0: int): void
                   public inclRange(arg0: int, arg1: int): void
                   public excludeFrom(arg0: int): void
                   public excl(arg0: int): void
                   public isMember(arg0: int): boolean
                   public andSet(arg0: com.sun.tools.javac.util.Bits): com.sun.tools.javac.util.Bits
                   protected internalAndSet(arg0: com.sun.tools.javac.util.Bits): void
                   public orSet(arg0: com.sun.tools.javac.util.Bits): com.sun.tools.javac.util.Bits
                   public diffSet(arg0: com.sun.tools.javac.util.Bits): com.sun.tools.javac.util.Bits
                   public xorSet(arg0: com.sun.tools.javac.util.Bits): com.sun.tools.javac.util.Bits
                   public nextBit(arg0: int): int
                   toString<T>(...args: any[]): any
                   public static main(arg0: java.lang.String[]): void
                   static access$000(): int[]
               }
               class ByteBuffer {
                   public elems: byte[]
                   public length: int
                   constructor(...args: any[])
                   public appendByte(arg0: int): void
                   appendBytes<T>(...args: any[]): any
                   public appendChar(arg0: int): void
                   public appendInt(arg0: int): void
                   public appendLong(arg0: long): void
                   public appendFloat(arg0: float): void
                   public appendDouble(arg0: double): void
                   public appendName(arg0: com.sun.tools.javac.util.Name): void
                   public reset(): void
                   public toName(arg0: com.sun.tools.javac.util.Names): com.sun.tools.javac.util.Name
               }
               class UnsharedNameTable$HashEntry extends java.lang.ref.WeakReference<com.sun.tools.javac.util.UnsharedNameTable$NameImpl> {
                   next: com.sun.tools.javac.util.UnsharedNameTable$HashEntry
                   constructor(arg0: com.sun.tools.javac.util.UnsharedNameTable$NameImpl)
               }
               class UnsharedNameTable$NameImpl extends com.sun.tools.javac.util.Name {
                   bytes: byte[]
                   index: int
                   constructor(arg0: com.sun.tools.javac.util.UnsharedNameTable, arg1: byte[], arg2: int)
                   public getIndex(): int
                   public getByteLength(): int
                   public getByteAt(arg0: int): byte
                   public getByteArray(): byte[]
                   public getByteOffset(): int
               }
               class UnsharedNameTable extends com.sun.tools.javac.util.Name$Table {
                   public index: int
                   public static create(arg0: com.sun.tools.javac.util.Names): com.sun.tools.javac.util.Name$Table
                   constructor(...args: any[])
                   public fromChars(arg0: char[], arg1: int, arg2: int): com.sun.tools.javac.util.Name
                   public fromUtf(arg0: byte[], arg1: int, arg2: int): com.sun.tools.javac.util.Name
                   public dispose(): void
               }
               class StringUtils {
                   public constructor()
                   public static toLowerCase(arg0: java.lang.String): java.lang.String
                   public static toUpperCase(arg0: java.lang.String): java.lang.String
                   indexOfIgnoreCase<T>(...args: any[]): any
               }
               class SharedNameTable$NameImpl extends com.sun.tools.javac.util.Name {
                   next: com.sun.tools.javac.util.SharedNameTable$NameImpl
                   index: int
                   length: int
                   constructor(arg0: com.sun.tools.javac.util.SharedNameTable)
                   public getIndex(): int
                   public getByteLength(): int
                   public getByteAt(arg0: int): byte
                   public getByteArray(): byte[]
                   public getByteOffset(): int
                   public hashCode(): int
                   public equals(arg0: java.lang.Object): boolean
               }
               class SharedNameTable extends com.sun.tools.javac.util.Name$Table {
                   public bytes: byte[]
                   public static create(arg0: com.sun.tools.javac.util.Names): com.sun.tools.javac.util.SharedNameTable
                   constructor(...args: any[])
                   public fromChars(arg0: char[], arg1: int, arg2: int): com.sun.tools.javac.util.Name
                   public fromUtf(arg0: byte[], arg1: int, arg2: int): com.sun.tools.javac.util.Name
                   public dispose(): void
               }
               class ServiceLoader$LazyIterator implements java.util.Iterator<S> {
                   service: java.lang.Class<S>
                   loader: java.lang.ClassLoader
                   configs: java.util.Enumeration<java.net.URL>
                   pending: java.util.Iterator<java.lang.String>
                   nextName: java.lang.String
                   this$0: com.sun.tools.javac.util.ServiceLoader
                   public hasNext(): boolean
                   public next(): S
                   public remove(): void
                   constructor(arg0: com.sun.tools.javac.util.ServiceLoader, arg1: java.lang.Class, arg2: java.lang.ClassLoader, arg3: com.sun.tools.javac.util.ServiceLoader$1)
               }
               class ServiceLoader$1 implements java.util.Iterator<S> {
                   knownProviders: java.util.Iterator<java.util.Map$Entry<java.lang.String, S>>
                   this$0: com.sun.tools.javac.util.ServiceLoader
                   constructor(arg0: com.sun.tools.javac.util.ServiceLoader)
                   public hasNext(): boolean
                   public next(): S
                   public remove(): void
               }
               class ServiceLoader<S> implements java.lang.Iterable<S> {
                   public reload(): void
                   public iterator(): java.util.Iterator<S>
                   load<T>(...args: any[]): any
                   public static loadInstalled<S>(arg0: java.lang.Class<S>): com.sun.tools.javac.util.ServiceLoader<S>
                   toString<T>(...args: any[]): any
                   static access$100(arg0: java.lang.Class, arg1: java.lang.String, arg2: java.lang.Throwable): void
                   static access$200(arg0: com.sun.tools.javac.util.ServiceLoader, arg1: java.lang.Class, arg2: java.net.URL): java.util.Iterator
                   static access$300(arg0: java.lang.Class, arg1: java.lang.String): void
                   static access$400(arg0: com.sun.tools.javac.util.ServiceLoader): java.util.LinkedHashMap
                   static access$500(arg0: com.sun.tools.javac.util.ServiceLoader): com.sun.tools.javac.util.ServiceLoader$LazyIterator
               }
               class ForwardingDiagnosticFormatter$ForwardingConfiguration implements com.sun.tools.javac.api.DiagnosticFormatter$Configuration {
                   protected configuration: com.sun.tools.javac.api.DiagnosticFormatter$Configuration
                   public constructor(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration)
                   public getDelegatedConfiguration(): com.sun.tools.javac.api.DiagnosticFormatter$Configuration
                   public getMultilineLimit(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit): int
                   public getVisible(): java.util.Set<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart>
                   public setMultilineLimit(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit, arg1: int): void
                   public setVisible(arg0: java.util.Set<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart>): void
               }
               class DiagnosticFormatter<D>> implements com.sun.tools.javac.api.DiagnosticFormatter<D> {
                   protected formatter: F
                   protected configuration: com.sun.tools.javac.util.ForwardingDiagnosticFormatter$ForwardingConfiguration
                   public constructor(arg0: F)
                   public getDelegatedFormatter(): F
                   public getConfiguration(): com.sun.tools.javac.api.DiagnosticFormatter$Configuration
                   public displaySource(arg0: D): boolean
                   public format(arg0: D, arg1: java.util.Locale): java.lang.String
                   public formatKind(arg0: D, arg1: java.util.Locale): java.lang.String
                   public formatMessage(arg0: D, arg1: java.util.Locale): java.lang.String
                   public formatPosition(arg0: D, arg1: com.sun.tools.javac.api.DiagnosticFormatter$PositionKind, arg2: java.util.Locale): java.lang.String
                   public formatSource(arg0: D, arg1: boolean, arg2: java.util.Locale): java.lang.String
               }
               class RichDiagnosticFormatter$WhereClauseKind extends java.lang.Enum<com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind> {
                   public static TYPEVAR: com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind
                   public static CAPTURED: com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind
                   public static INTERSECTION: com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind
                   public static values(): com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind[]
                   valueOf<T>(...args: any[]): any
                   key(): java.lang.String
               }
               class RichDiagnosticFormatter$ClassNameSimplifier {
                   nameClashes: java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>>
                   this$0: com.sun.tools.javac.util.RichDiagnosticFormatter
                   protected constructor(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter)
                   protected addUsage(arg0: com.sun.tools.javac.code.Symbol): void
                   public simplify(arg0: com.sun.tools.javac.code.Symbol): java.lang.String
               }
               class RichDiagnosticFormatter$RichPrinter extends com.sun.tools.javac.code.Printer {
                   this$0: com.sun.tools.javac.util.RichDiagnosticFormatter
                   protected constructor(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter)
                   public localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                   public capturedVarId(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: java.util.Locale): java.lang.String
                   visitType<T>(...args: any[]): any
                   visitCapturedType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   protected className(arg0: com.sun.tools.javac.code.Type$ClassType, arg1: boolean, arg2: java.util.Locale): java.lang.String
                   visitTypeVar<T>(...args: any[]): any
                   visitClassSymbol<T>(...args: any[]): any
                   visitMethodSymbol<T>(...args: any[]): any
               }
               class RichDiagnosticFormatter$1 extends com.sun.tools.javac.code.Types$UnaryVisitor<java.lang.Void> {
                   this$0: com.sun.tools.javac.util.RichDiagnosticFormatter
                   constructor(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter)
                   public visit(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): java.lang.Void
                   visitForAll<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
                   visitErrorType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
                   visitCapturedType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
               }
               class RichDiagnosticFormatter$2 extends com.sun.tools.javac.code.Types$DefaultSymbolVisitor<java.lang.Void, java.lang.Void> {
                   this$0: com.sun.tools.javac.util.RichDiagnosticFormatter
                   constructor(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter)
                   visitClassSymbol<T>(...args: any[]): any
                   visitSymbol<T>(...args: any[]): any
                   visitMethodSymbol<T>(...args: any[]): any
               }
               class RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature extends java.lang.Enum<com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature> {
                   public static WHERE_CLAUSES: com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature
                   public static SIMPLE_NAMES: com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature
                   public static UNIQUE_TYPEVAR_NAMES: com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature
                   public static values(): com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature[]
                   valueOf<T>(...args: any[]): any
               }
               class RichDiagnosticFormatter$RichConfiguration extends com.sun.tools.javac.util.ForwardingDiagnosticFormatter$ForwardingConfiguration {
                   protected features: java.util.EnumSet<com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature>
                   public constructor(arg0: com.sun.tools.javac.util.Options, arg1: com.sun.tools.javac.util.AbstractDiagnosticFormatter)
                   public getAvailableFeatures(): com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature[]
                   public enable(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature): void
                   public disable(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature): void
                   public isEnabled(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature): boolean
               }
               class RichDiagnosticFormatter extends com.sun.tools.javac.util.ForwardingDiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic, com.sun.tools.javac.util.AbstractDiagnosticFormatter> {
                   syms: com.sun.tools.javac.code.Symtab
                   types: com.sun.tools.javac.code.Types
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   messages: com.sun.tools.javac.util.JavacMessages
                   protected nameSimplifier: com.sun.tools.javac.util.RichDiagnosticFormatter$ClassNameSimplifier
                   whereClauses: java.util.Map<com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind, java.util.Map<com.sun.tools.javac.code.Type, com.sun.tools.javac.util.JCDiagnostic>>
                   protected typePreprocessor: com.sun.tools.javac.code.Types$UnaryVisitor<java.lang.Void>
                   protected symbolPreprocessor: com.sun.tools.javac.code.Types$DefaultSymbolVisitor<java.lang.Void, java.lang.Void>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.RichDiagnosticFormatter
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   format<T>(...args: any[]): any
                   formatMessage<T>(...args: any[]): any
                   protected setRichPrinter(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter$RichPrinter): void
                   protected getRichPrinter(): com.sun.tools.javac.util.RichDiagnosticFormatter$RichPrinter
                   protected preprocessDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic): void
                   protected preprocessArgument(arg0: java.lang.Object): void
                   protected getWhereClauses(): com.sun.tools.javac.util.List<com.sun.tools.javac.util.JCDiagnostic>
                   protected preprocessType(arg0: com.sun.tools.javac.code.Type): void
                   protected preprocessSymbol(arg0: com.sun.tools.javac.code.Symbol): void
                   getConfiguration<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind): int
                   static access$100(arg0: com.sun.tools.javac.util.RichDiagnosticFormatter, arg1: com.sun.tools.javac.code.Type$TypeVar): boolean
               }
               class AbstractDiagnosticFormatter$SimpleConfiguration implements com.sun.tools.javac.api.DiagnosticFormatter$Configuration {
                   protected multilineLimits: java.util.Map<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit, java.lang.Integer>
                   protected visibleParts: java.util.EnumSet<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart>
                   protected caretEnabled: boolean
                   constructor(...args: any[])
                   public getMultilineLimit(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit): int
                   getVisible<T>(...args: any[]): any
                   public setMultilineLimit(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit, arg1: int): void
                   public setVisible(arg0: java.util.Set<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart>): void
                   public setVisiblePart(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart, arg1: boolean): void
                   public setCaretEnabled(arg0: boolean): void
                   public isCaretEnabled(): boolean
               }
               class AbstractDiagnosticFormatter$1 extends com.sun.tools.javac.code.Printer {
                   this$0: com.sun.tools.javac.util.AbstractDiagnosticFormatter
                   constructor(arg0: com.sun.tools.javac.util.AbstractDiagnosticFormatter)
                   protected localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                   protected capturedVarId(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: java.util.Locale): java.lang.String
                   visitCapturedType<T>(...args: any[]): any
               }
               class AbstractDiagnosticFormatter$2 {
                   static $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType: int[]
                   static $SwitchMap$com$sun$tools$javac$api$DiagnosticFormatter$PositionKind: int[]
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               abstract class AbstractDiagnosticFormatter implements com.sun.tools.javac.api.DiagnosticFormatter<com.sun.tools.javac.util.JCDiagnostic> {
                   protected messages: com.sun.tools.javac.util.JavacMessages
                   protected depth: int
                   protected printer: com.sun.tools.javac.code.Printer
                   protected constructor(arg0: com.sun.tools.javac.util.JavacMessages, arg1: com.sun.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration)
                   formatKind<T>(...args: any[]): any
                   format<T>(...args: any[]): any
                   protected formatDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.util.Locale): java.lang.String
                   formatPosition<T>(...args: any[]): any
                   formatSource<T>(...args: any[]): any
                   protected formatArguments(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.util.Locale): java.util.Collection<java.lang.String>
                   protected formatArgument(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.lang.Object, arg2: java.util.Locale): java.lang.String
                   protected formatIterable(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.lang.Iterable<any>, arg2: java.util.Locale): java.lang.String
                   protected formatSubdiagnostics(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.util.Locale): com.sun.tools.javac.util.List<java.lang.String>
                   protected formatSubdiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: com.sun.tools.javac.util.JCDiagnostic, arg2: java.util.Locale): java.lang.String
                   protected formatSourceLine(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: int): java.lang.String
                   protected formatLintCategory(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.util.Locale): java.lang.String
                   protected localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                   displaySource<T>(...args: any[]): any
                   public isRaw(): boolean
                   protected indentString(arg0: int): java.lang.String
                   protected indent(arg0: java.lang.String, arg1: int): java.lang.String
                   getConfiguration<T>(...args: any[]): any
                   public getPrinter(): com.sun.tools.javac.code.Printer
                   public setPrinter(arg0: com.sun.tools.javac.code.Printer): void
                   static access$000(arg0: com.sun.tools.javac.util.AbstractDiagnosticFormatter): com.sun.tools.javac.util.List
                   static access$002(arg0: com.sun.tools.javac.util.AbstractDiagnosticFormatter, arg1: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
               }
               class RawDiagnosticFormatter extends com.sun.tools.javac.util.AbstractDiagnosticFormatter {
                   public constructor(arg0: com.sun.tools.javac.util.Options)
                   public formatDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.util.Locale): java.lang.String
                   formatMessage<T>(...args: any[]): any
                   protected formatArgument(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.lang.Object, arg2: java.util.Locale): java.lang.String
                   protected localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                   public isRaw(): boolean
               }
               class PropagatedException extends java.lang.RuntimeException {
                   static serialVersionUID: long
                   public constructor(arg0: java.lang.RuntimeException)
                   getCause<T>(...args: any[]): any
               }
               class IntHashTable {
                   protected objs: java.lang.Object[]
                   protected ints: int[]
                   protected mask: int
                   protected num_bindings: int
                   constructor(...args: any[])
                   public hash(arg0: java.lang.Object): int
                   lookup<T>(...args: any[]): any
                   public getFromIndex(arg0: int): int
                   public putAtIndex(arg0: java.lang.Object, arg1: int, arg2: int): int
                   public remove(arg0: java.lang.Object): int
                   protected rehash(): void
                   public clear(): void
               }
               class FatalError extends java.lang.Error {
                   constructor(...args: any[])
               }
               class Convert {
                   public constructor()
                   public static string2int(arg0: java.lang.String, arg1: int): int
                   public static string2long(arg0: java.lang.String, arg1: int): long
                   utf2chars<T>(...args: any[]): any
                   utf2string<T>(...args: any[]): any
                   chars2utf<T>(...args: any[]): any
                   public static string2utf(arg0: java.lang.String): byte[]
                   quote<T>(...args: any[]): any
                   public static escapeUnicode(arg0: java.lang.String): java.lang.String
                   shortName<T>(...args: any[]): any
                   packagePart<T>(...args: any[]): any
                   public static enclosingCandidates(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.util.List<com.sun.tools.javac.util.Name>
               }
               class Constants$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class Constants {
                   public constructor()
                   public static decode(arg0: java.lang.Object, arg1: com.sun.tools.javac.code.Type): java.lang.Object
                   format<T>(...args: any[]): any
               }
               class ClientCodeException extends java.lang.RuntimeException {
                   static serialVersionUID: long
                   public constructor(arg0: java.lang.Throwable)
               }
               class BasicDiagnosticFormatter$BasicConfiguration$SourcePosition extends java.lang.Enum<com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition> {
                   public static BOTTOM: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition
                   public static AFTER_SUMMARY: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition
                   public static values(): com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition[]
                   valueOf<T>(...args: any[]): any
               }
               class BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind extends java.lang.Enum<com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind> {
                   public static DEFAULT_POS_FORMAT: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind
                   public static DEFAULT_NO_POS_FORMAT: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind
                   public static DEFAULT_CLASS_FORMAT: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind
                   public static values(): com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind[]
                   valueOf<T>(...args: any[]): any
               }
               class BasicDiagnosticFormatter$BasicConfiguration extends com.sun.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration {
                   protected indentationLevels: java.util.Map<com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart, java.lang.Integer>
                   protected availableFormats: java.util.Map<com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind, java.lang.String>
                   protected sourcePosition: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition
                   constructor(...args: any[])
                   public getIndentation(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart): int
                   public setIndentation(arg0: com.sun.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart, arg1: int): void
                   public setSourcePosition(arg0: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition): void
                   public getSourcePosition(): com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition
                   public setFormat(arg0: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind, arg1: java.lang.String): void
                   public getFormat(arg0: com.sun.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind): java.lang.String
               }
               class BasicDiagnosticFormatter$1 {
                   static $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType: int[]
               }
               class BasicDiagnosticFormatter extends com.sun.tools.javac.util.AbstractDiagnosticFormatter {
                   constructor(...args: any[])
                   public formatDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.util.Locale): java.lang.String
                   formatMessage<T>(...args: any[]): any
                   protected addSourceLineIfNeeded(arg0: com.sun.tools.javac.util.JCDiagnostic, arg1: java.lang.String): java.lang.String
                   protected formatMeta(arg0: char, arg1: com.sun.tools.javac.util.JCDiagnostic, arg2: java.util.Locale): java.lang.String
                   getConfiguration<T>(...args: any[]): any
               }
               class Assert {
                   check<T>(...args: any[]): any
                   checkNull<T>(...args: any[]): any
                   checkNonNull<T>(...args: any[]): any
                   error<T>(...args: any[]): any
               }
               class ArrayUtils {
                   public constructor()
                   ensureCapacity<T>(...args: any[]): any
               }
               class Abort extends java.lang.Error {
                   constructor(...args: any[])
               }

            }
            namespace main {
               class Option$1 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$2 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public matches(arg0: java.lang.String): boolean
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$3 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$4 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$5 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$6 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$7 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$8 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$9 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$10 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$11 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$12 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$13 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$14 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$15 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$16 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$17 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$18 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup, arg7: boolean)
                   public matches(arg0: java.lang.String): boolean
                   public hasArg(): boolean
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$19 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$20 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup, arg7: boolean)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$21 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$22 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$23 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String, arg2: java.lang.String): boolean
               }
               class Option$24 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$25 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public matches(arg0: java.lang.String): boolean
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$26 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: com.sun.tools.javac.main.Option$OptionKind, arg6: com.sun.tools.javac.main.Option$OptionGroup, arg7: boolean)
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$27 extends com.sun.tools.javac.main.Option {
                   constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.javac.main.Option$OptionKind, arg5: com.sun.tools.javac.main.Option$OptionGroup)
                   public matches(arg0: java.lang.String): boolean
                   public process(arg0: com.sun.tools.javac.main.OptionHelper, arg1: java.lang.String): boolean
               }
               class Option$OptionKind extends java.lang.Enum<com.sun.tools.javac.main.Option$OptionKind> {
                   public static STANDARD: com.sun.tools.javac.main.Option$OptionKind
                   public static EXTENDED: com.sun.tools.javac.main.Option$OptionKind
                   public static HIDDEN: com.sun.tools.javac.main.Option$OptionKind
                   public static values(): com.sun.tools.javac.main.Option$OptionKind[]
                   valueOf<T>(...args: any[]): any
               }
               class Option$OptionGroup extends java.lang.Enum<com.sun.tools.javac.main.Option$OptionGroup> {
                   public static BASIC: com.sun.tools.javac.main.Option$OptionGroup
                   public static FILEMANAGER: com.sun.tools.javac.main.Option$OptionGroup
                   public static INFO: com.sun.tools.javac.main.Option$OptionGroup
                   public static OPERAND: com.sun.tools.javac.main.Option$OptionGroup
                   public static values(): com.sun.tools.javac.main.Option$OptionGroup[]
                   valueOf<T>(...args: any[]): any
               }
               class Option$ChoiceKind extends java.lang.Enum<com.sun.tools.javac.main.Option$ChoiceKind> {
                   public static ONEOF: com.sun.tools.javac.main.Option$ChoiceKind
                   public static ANYOF: com.sun.tools.javac.main.Option$ChoiceKind
                   public static values(): com.sun.tools.javac.main.Option$ChoiceKind[]
                   valueOf<T>(...args: any[]): any
               }
               class Option$PkgInfo extends java.lang.Enum<com.sun.tools.javac.main.Option$PkgInfo> {
                   public static ALWAYS: com.sun.tools.javac.main.Option$PkgInfo
                   public static LEGACY: com.sun.tools.javac.main.Option$PkgInfo
                   public static NONEMPTY: com.sun.tools.javac.main.Option$PkgInfo
                   public static values(): com.sun.tools.javac.main.Option$PkgInfo[]
                   valueOf<T>(...args: any[]): any
                   public static get(arg0: com.sun.tools.javac.util.Options): com.sun.tools.javac.main.Option$PkgInfo
               }
               class Option extends java.lang.Enum<com.sun.tools.javac.main.Option> {
                   public static G: com.sun.tools.javac.main.Option
                   public static G_NONE: com.sun.tools.javac.main.Option
                   public static G_CUSTOM: com.sun.tools.javac.main.Option
                   public static XLINT: com.sun.tools.javac.main.Option
                   public static XLINT_CUSTOM: com.sun.tools.javac.main.Option
                   public static XDOCLINT: com.sun.tools.javac.main.Option
                   public static XDOCLINT_CUSTOM: com.sun.tools.javac.main.Option
                   public static NOWARN: com.sun.tools.javac.main.Option
                   public static VERBOSE: com.sun.tools.javac.main.Option
                   public static DEPRECATION: com.sun.tools.javac.main.Option
                   public static CLASSPATH: com.sun.tools.javac.main.Option
                   public static CP: com.sun.tools.javac.main.Option
                   public static SOURCEPATH: com.sun.tools.javac.main.Option
                   public static BOOTCLASSPATH: com.sun.tools.javac.main.Option
                   public static XBOOTCLASSPATH_PREPEND: com.sun.tools.javac.main.Option
                   public static XBOOTCLASSPATH_APPEND: com.sun.tools.javac.main.Option
                   public static XBOOTCLASSPATH: com.sun.tools.javac.main.Option
                   public static EXTDIRS: com.sun.tools.javac.main.Option
                   public static DJAVA_EXT_DIRS: com.sun.tools.javac.main.Option
                   public static ENDORSEDDIRS: com.sun.tools.javac.main.Option
                   public static DJAVA_ENDORSED_DIRS: com.sun.tools.javac.main.Option
                   public static PROC: com.sun.tools.javac.main.Option
                   public static PROCESSOR: com.sun.tools.javac.main.Option
                   public static PROCESSORPATH: com.sun.tools.javac.main.Option
                   public static PARAMETERS: com.sun.tools.javac.main.Option
                   public static D: com.sun.tools.javac.main.Option
                   public static S: com.sun.tools.javac.main.Option
                   public static H: com.sun.tools.javac.main.Option
                   public static IMPLICIT: com.sun.tools.javac.main.Option
                   public static ENCODING: com.sun.tools.javac.main.Option
                   public static SOURCE: com.sun.tools.javac.main.Option
                   public static TARGET: com.sun.tools.javac.main.Option
                   public static PROFILE: com.sun.tools.javac.main.Option
                   public static VERSION: com.sun.tools.javac.main.Option
                   public static FULLVERSION: com.sun.tools.javac.main.Option
                   public static DIAGS: com.sun.tools.javac.main.Option
                   public static HELP: com.sun.tools.javac.main.Option
                   public static A: com.sun.tools.javac.main.Option
                   public static X: com.sun.tools.javac.main.Option
                   public static J: com.sun.tools.javac.main.Option
                   public static MOREINFO: com.sun.tools.javac.main.Option
                   public static WERROR: com.sun.tools.javac.main.Option
                   public static PROMPT: com.sun.tools.javac.main.Option
                   public static DOE: com.sun.tools.javac.main.Option
                   public static PRINTSOURCE: com.sun.tools.javac.main.Option
                   public static WARNUNCHECKED: com.sun.tools.javac.main.Option
                   public static XMAXERRS: com.sun.tools.javac.main.Option
                   public static XMAXWARNS: com.sun.tools.javac.main.Option
                   public static XSTDOUT: com.sun.tools.javac.main.Option
                   public static XPRINT: com.sun.tools.javac.main.Option
                   public static XPRINTROUNDS: com.sun.tools.javac.main.Option
                   public static XPRINTPROCESSORINFO: com.sun.tools.javac.main.Option
                   public static XPREFER: com.sun.tools.javac.main.Option
                   public static XPKGINFO: com.sun.tools.javac.main.Option
                   public static O: com.sun.tools.javac.main.Option
                   public static XJCOV: com.sun.tools.javac.main.Option
                   public static PLUGIN: com.sun.tools.javac.main.Option
                   public static XDIAGS: com.sun.tools.javac.main.Option
                   public static XD: com.sun.tools.javac.main.Option
                   public static AT: com.sun.tools.javac.main.Option
                   public static SOURCEFILE: com.sun.tools.javac.main.Option
                   public text: java.lang.String
                   kind: com.sun.tools.javac.main.Option$OptionKind
                   group: com.sun.tools.javac.main.Option$OptionGroup
                   argsNameKey: java.lang.String
                   descrKey: java.lang.String
                   hasSuffix: boolean
                   choiceKind: com.sun.tools.javac.main.Option$ChoiceKind
                   choices: java.util.Map<java.lang.String, java.lang.Boolean>
                   public static values(): com.sun.tools.javac.main.Option[]
                   valueOf<T>(...args: any[]): any
                   public getText(): java.lang.String
                   public getKind(): com.sun.tools.javac.main.Option$OptionKind
                   public hasArg(): boolean
                   public matches(arg0: java.lang.String): boolean
                   process<T>(...args: any[]): any
                   help(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.main.Option$OptionKind): void
                   static getJavaCompilerOptions(): java.util.Set<com.sun.tools.javac.main.Option>
                   public static getJavacFileManagerOptions(): java.util.Set<com.sun.tools.javac.main.Option>
                   public static getJavacToolOptions(): java.util.Set<com.sun.tools.javac.main.Option>
                   static getOptions(arg0: java.util.Set<com.sun.tools.javac.main.Option$OptionGroup>): java.util.Set<com.sun.tools.javac.main.Option>
                   constructor(...args: any[])
               }
               class OptionHelper$GrumpyHelper extends com.sun.tools.javac.main.OptionHelper {
                   public constructor(arg0: com.sun.tools.javac.util.Log)
                   public getLog(): com.sun.tools.javac.util.Log
                   public getOwnName(): java.lang.String
                   public get(arg0: com.sun.tools.javac.main.Option): java.lang.String
                   public put(arg0: java.lang.String, arg1: java.lang.String): void
                   public remove(arg0: java.lang.String): void
                   error(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   public addFile(arg0: java.io.File): void
                   public addClassName(arg0: java.lang.String): void
               }
               abstract class OptionHelper {
                   public constructor()
                   public get(arg0: com.sun.tools.javac.main.Option): java.lang.String
                   public put(arg0: java.lang.String, arg1: java.lang.String): void
                   public remove(arg0: java.lang.String): void
                   public getLog(): com.sun.tools.javac.util.Log
                   public getOwnName(): java.lang.String
                   error(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   addFile(arg0: java.io.File): void
                   addClassName(arg0: java.lang.String): void
               }
               class JavaCompiler$CompilePolicy extends java.lang.Enum<com.sun.tools.javac.main.JavaCompiler$CompilePolicy> {
                   public static ATTR_ONLY: com.sun.tools.javac.main.JavaCompiler$CompilePolicy
                   public static CHECK_ONLY: com.sun.tools.javac.main.JavaCompiler$CompilePolicy
                   public static SIMPLE: com.sun.tools.javac.main.JavaCompiler$CompilePolicy
                   public static BY_FILE: com.sun.tools.javac.main.JavaCompiler$CompilePolicy
                   public static BY_TODO: com.sun.tools.javac.main.JavaCompiler$CompilePolicy
                   public static values(): com.sun.tools.javac.main.JavaCompiler$CompilePolicy[]
                   valueOf<T>(...args: any[]): any
                   static decode(arg0: java.lang.String): com.sun.tools.javac.main.JavaCompiler$CompilePolicy
               }
               class JavaCompiler$ImplicitSourcePolicy extends java.lang.Enum<com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy> {
                   public static NONE: com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy
                   public static CLASS: com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy
                   public static UNSET: com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy
                   public static values(): com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy[]
                   valueOf<T>(...args: any[]): any
                   static decode(arg0: java.lang.String): com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy
               }
               class JavaCompiler$1 implements com.sun.tools.javac.jvm.ClassReader$SourceCompleter {
                   this$0: com.sun.tools.javac.main.JavaCompiler
                   constructor(arg0: com.sun.tools.javac.main.JavaCompiler)
                   public complete(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
               }
               class JavaCompiler$1ScanNested extends com.sun.tools.javac.tree.TreeScanner {
                   dependencies: java.util.Set<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   protected hasLambdas: boolean
                   val$env: com.sun.tools.javac.comp.Env
                   this$0: com.sun.tools.javac.main.JavaCompiler
                   constructor()
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
               }
               class JavaCompiler$1MethodBodyRemover extends com.sun.tools.javac.tree.TreeTranslator {
                   val$isInterface: boolean
                   this$0: com.sun.tools.javac.main.JavaCompiler
                   constructor()
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
               }
               class JavaCompiler$2 {
                   static $SwitchMap$com$sun$tools$javac$main$JavaCompiler$CompilePolicy: int[]
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class JavaCompiler {
                   protected static compilerKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.main.JavaCompiler>
                   public log: com.sun.tools.javac.util.Log
                   diagFactory: com.sun.tools.javac.util.JCDiagnostic$Factory
                   protected make: com.sun.tools.javac.tree.TreeMaker
                   protected reader: com.sun.tools.javac.jvm.ClassReader
                   protected writer: com.sun.tools.javac.jvm.ClassWriter
                   protected jniWriter: com.sun.tools.javac.jvm.JNIWriter
                   protected enter: com.sun.tools.javac.comp.Enter
                   protected syms: com.sun.tools.javac.code.Symtab
                   protected source: com.sun.tools.javac.code.Source
                   protected gen: com.sun.tools.javac.jvm.Gen
                   protected names: com.sun.tools.javac.util.Names
                   protected attr: com.sun.tools.javac.comp.Attr
                   protected chk: com.sun.tools.javac.comp.Check
                   flow<T>(...args: any[]): any
                   protected transTypes: com.sun.tools.javac.comp.TransTypes
                   protected lower: com.sun.tools.javac.comp.Lower
                   protected annotate: com.sun.tools.javac.comp.Annotate
                   protected completionFailureName: com.sun.tools.javac.util.Name
                   protected types: com.sun.tools.javac.code.Types
                   protected fileManager: javax.tools.JavaFileManager
                   protected parserFactory: com.sun.tools.javac.parser.ParserFactory
                   protected taskListener: com.sun.tools.javac.api.MultiTaskListener
                   protected delegateCompiler: com.sun.tools.javac.main.JavaCompiler
                   protected thisCompleter: com.sun.tools.javac.jvm.ClassReader$SourceCompleter
                   protected options: com.sun.tools.javac.util.Options
                   protected context: com.sun.tools.javac.util.Context
                   protected annotationProcessingOccurred: boolean
                   protected implicitSourceFilesRead: boolean
                   protected compileStates: com.sun.tools.javac.comp.CompileStates
                   public verbose: boolean
                   public sourceOutput: boolean
                   public stubOutput: boolean
                   public attrParseOnly: boolean
                   relax: boolean
                   public printFlat: boolean
                   public encoding: java.lang.String
                   public lineDebugInfo: boolean
                   public genEndPos: boolean
                   protected devVerbose: boolean
                   protected processPcks: boolean
                   protected werror: boolean
                   explicitAnnotationProcessingRequested<T>(...args: any[]): any
                   protected compilePolicy: com.sun.tools.javac.main.JavaCompiler$CompilePolicy
                   protected implicitSourcePolicy: com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy
                   public verboseCompilePolicy: boolean
                   public shouldStopPolicyIfError: com.sun.tools.javac.comp.CompileStates$CompileState
                   public shouldStopPolicyIfNoError: com.sun.tools.javac.comp.CompileStates$CompileState
                   public todo: com.sun.tools.javac.comp.Todo
                   public closeables: com.sun.tools.javac.util.List<java.io.Closeable>
                   protected inputFiles: java.util.Set<javax.tools.JavaFileObject>
                   keepComments<T>(...args: any[]): any
                   public elapsed_msec: long
                   protected needRootClasses: boolean
                   processAnnotations<T>(...args: any[]): any
                   deferredDiagnosticHandler: com.sun.tools.javac.util.Log$DeferredDiagnosticHandler
                   desugaredEnvs: java.util.HashMap<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, java.util.Queue<com.sun.tools.javac.util.Pair<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl>>>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.main.JavaCompiler
                   public static version(): java.lang.String
                   public static fullVersion(): java.lang.String
                   public constructor(arg0: com.sun.tools.javac.util.Context)
                   protected shouldStop(arg0: com.sun.tools.javac.comp.CompileStates$CompileState): boolean
                   public errorCount(): int
                   stopIfError<T>(...args: any[]): any
                   public warningCount(): int
                   public readSource(arg0: javax.tools.JavaFileObject): java.lang.CharSequence
                   parse<T>(...args: any[]): any
                   public resolveBinaryNameOrIdent(arg0: java.lang.String): com.sun.tools.javac.code.Symbol
                   public resolveIdent(arg0: java.lang.String): com.sun.tools.javac.code.Symbol
                   printSource(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): javax.tools.JavaFileObject
                   genCode(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): javax.tools.JavaFileObject
                   public complete(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   compile<T>(...args: any[]): any
                   public parseFiles(arg0: java.lang.Iterable<javax.tools.JavaFileObject>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>
                   public enterTreesIfNeeded(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>
                   public enterTrees(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>
                   public initProcessAnnotations(arg0: java.lang.Iterable<javax.annotation.processing.Processor>): void
                   attribute<T>(...args: any[]): any
                   public reportPublicApi(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   desugar<T>(...args: any[]): any
                   generate<T>(...args: any[]): any
                   groupByFile(arg0: java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>): java.util.Map<com.sun.tools.javac.tree.JCTree$JCCompilationUnit, java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>>
                   removeMethodBodies(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   public reportDeferredDiagnostics(): void
                   close<T>(...args: any[]): any
                   protected printNote(arg0: java.lang.String): void
                   public printCount(arg0: java.lang.String, arg1: int): void
                   public initRound(arg0: com.sun.tools.javac.main.JavaCompiler): void
                   static access$000(): com.sun.tools.javac.main.JavaCompiler$CompilePolicy
               }
               class Main$Result extends java.lang.Enum<com.sun.tools.javac.main.Main$Result> {
                   public static OK: com.sun.tools.javac.main.Main$Result
                   public static ERROR: com.sun.tools.javac.main.Main$Result
                   public static CMDERR: com.sun.tools.javac.main.Main$Result
                   public static SYSERR: com.sun.tools.javac.main.Main$Result
                   public static ABNORMAL: com.sun.tools.javac.main.Main$Result
                   public exitCode: int
                   public static values(): com.sun.tools.javac.main.Main$Result[]
                   valueOf<T>(...args: any[]): any
                   public isOK(): boolean
               }
               class Main$1 extends com.sun.tools.javac.main.OptionHelper {
                   this$0: com.sun.tools.javac.main.Main
                   constructor(arg0: com.sun.tools.javac.main.Main)
                   public get(arg0: com.sun.tools.javac.main.Option): java.lang.String
                   public put(arg0: java.lang.String, arg1: java.lang.String): void
                   public remove(arg0: java.lang.String): void
                   public getLog(): com.sun.tools.javac.util.Log
                   public getOwnName(): java.lang.String
                   public error(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   public addFile(arg0: java.io.File): void
                   public addClassName(arg0: java.lang.String): void
               }
               class Main {
                   ownName: java.lang.String
                   out: java.io.PrintWriter
                   public log: com.sun.tools.javac.util.Log
                   apiMode: boolean
                   public filenames: java.util.Set<java.io.File>
                   public classnames: com.sun.tools.javac.util.ListBuffer<java.lang.String>
                   public static javacBundleName: java.lang.String
                   constructor(...args: any[])
                   error(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   warning(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                   public getOption(arg0: java.lang.String): com.sun.tools.javac.main.Option
                   public setOptions(arg0: com.sun.tools.javac.util.Options): void
                   public setAPIMode(arg0: boolean): void
                   processArgs<T>(...args: any[]): any
                   compile<T>(...args: any[]): any
                   bugMessage(arg0: java.lang.Throwable): void
                   feMessage(arg0: java.lang.Throwable): void
                   ioMessage(arg0: java.lang.Throwable): void
                   resourceMessage(arg0: java.lang.Throwable): void
                   apMessage(arg0: com.sun.tools.javac.processing.AnnotationProcessingError): void
                   pluginMessage(arg0: java.lang.Throwable): void
                   showClass(arg0: java.lang.String): void
                   static access$000(arg0: com.sun.tools.javac.main.Main): com.sun.tools.javac.util.Options
               }
               class CommandLine {
                   public constructor()
                   public static parse(arg0: java.lang.String[]): java.lang.String[]
               }

            }
            namespace file {
               class RelativePath$RelativeDirectory extends com.sun.tools.javac.file.RelativePath {
                   static forPackage(arg0: java.lang.CharSequence): com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   constructor(...args: any[])
                   public dirname(): com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   public basename(): java.lang.String
                   contains(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   toString<T>(...args: any[]): any
                   public compareTo(arg0: java.lang.Object): int
               }
               class RelativePath$RelativeFile extends com.sun.tools.javac.file.RelativePath {
                   static forClass(arg0: java.lang.CharSequence, arg1: javax.tools.JavaFileObject$Kind): com.sun.tools.javac.file.RelativePath$RelativeFile
                   constructor(...args: any[])
                   public dirname(): com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   public basename(): java.lang.String
                   getZipEntry(arg0: java.util.zip.ZipFile): java.util.zip.ZipEntry
                   toString<T>(...args: any[]): any
                   public compareTo(arg0: java.lang.Object): int
               }
               abstract class RelativePath implements java.lang.Comparable<com.sun.tools.javac.file.RelativePath> {
                   protected path: java.lang.String
                   protected constructor(arg0: java.lang.String)
                   public dirname(): com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   public basename(): java.lang.String
                   public getFile(arg0: java.io.File): java.io.File
                   compareTo<T>(...args: any[]): any
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   toString<T>(...args: any[]): any
                   public getPath(): java.lang.String
               }
               class JavacFileManager$SortFiles$1 extends com.sun.tools.javac.file.JavacFileManager$SortFiles {
                   constructor(arg0: java.lang.String, arg1: int)
                   compare<T>(...args: any[]): any
               }
               class JavacFileManager$SortFiles$2 extends com.sun.tools.javac.file.JavacFileManager$SortFiles {
                   constructor(arg0: java.lang.String, arg1: int)
                   compare<T>(...args: any[]): any
               }
               abstract class JavacFileManager$SortFiles extends java.lang.Enum<com.sun.tools.javac.file.JavacFileManager$SortFiles> implements java.util.Comparator<java.io.File> {
                   public static FORWARD: com.sun.tools.javac.file.JavacFileManager$SortFiles
                   public static REVERSE: com.sun.tools.javac.file.JavacFileManager$SortFiles
                   public static values(): com.sun.tools.javac.file.JavacFileManager$SortFiles[]
                   valueOf<T>(...args: any[]): any
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.file.JavacFileManager$1)
               }
               class JavacFileManager$1 implements com.sun.tools.javac.util.Context$Factory<javax.tools.JavaFileManager> {
                   constructor()
                   make<T>(...args: any[]): any
               }
               interface JavacFileManager$Archive {
                   public close(): void
                   public contains(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   public getFileObject(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg1: java.lang.String): javax.tools.JavaFileObject
                   public getFiles(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory): com.sun.tools.javac.util.List<java.lang.String>
                   public getSubdirectories(): java.util.Set<com.sun.tools.javac.file.RelativePath$RelativeDirectory>
               }
               class JavacFileManager$MissingArchive implements com.sun.tools.javac.file.JavacFileManager$Archive {
                   zipFileName: java.io.File
                   this$0: com.sun.tools.javac.file.JavacFileManager
                   public constructor(arg0: com.sun.tools.javac.file.JavacFileManager, arg1: java.io.File)
                   public contains(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   public close(): void
                   public getFileObject(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg1: java.lang.String): javax.tools.JavaFileObject
                   public getFiles(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory): com.sun.tools.javac.util.List<java.lang.String>
                   public getSubdirectories(): java.util.Set<com.sun.tools.javac.file.RelativePath$RelativeDirectory>
                   toString<T>(...args: any[]): any
               }
               class JavacFileManager extends com.sun.tools.javac.util.BaseFileManager implements javax.tools.StandardJavaFileManager {
                   protected mmappedIO: boolean
                   protected symbolFileEnabled: boolean
                   protected sortFiles: com.sun.tools.javac.file.JavacFileManager$SortFiles
                   archives: java.util.Map<java.io.File, com.sun.tools.javac.file.JavacFileManager$Archive>
                   public static toArray(arg0: java.nio.CharBuffer): char[]
                   public static preRegister(arg0: com.sun.tools.javac.util.Context): void
                   public constructor(arg0: com.sun.tools.javac.util.Context, arg1: boolean, arg2: java.nio.charset.Charset)
                   public setContext(arg0: com.sun.tools.javac.util.Context): void
                   public setSymbolFileEnabled(arg0: boolean): void
                   public isDefaultBootClassPath(): boolean
                   getFileForInput<T>(...args: any[]): any
                   public getRegularFile(arg0: java.io.File): javax.tools.JavaFileObject
                   getFileForOutput<T>(...args: any[]): any
                   public getJavaFileObjectsFromStrings(arg0: java.lang.Iterable<java.lang.String>): java.lang.Iterable<javax.tools.JavaFileObject>
                   getJavaFileObjects<T>(...args: any[]): any
                   public static testName(arg0: java.lang.String, arg1: boolean, arg2: boolean): void
                   protected openArchive(arg0: java.io.File): com.sun.tools.javac.file.JavacFileManager$Archive
                   public flush(): void
                   public close(): void
                   public getClassLoader(arg0: javax.tools.JavaFileManager$Location): java.lang.ClassLoader
                   public list(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.util.Set<javax.tools.JavaFileObject$Kind>, arg3: boolean): java.lang.Iterable<javax.tools.JavaFileObject>
                   public inferBinaryName(arg0: javax.tools.JavaFileManager$Location, arg1: javax.tools.JavaFileObject): java.lang.String
                   public isSameFile(arg0: javax.tools.FileObject, arg1: javax.tools.FileObject): boolean
                   public hasLocation(arg0: javax.tools.JavaFileManager$Location): boolean
                   public getJavaFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind): javax.tools.JavaFileObject
                   public getJavaFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind, arg3: javax.tools.FileObject): javax.tools.JavaFileObject
                   public getJavaFileObjectsFromFiles(arg0: java.lang.Iterable<java.io.File>): java.lang.Iterable<javax.tools.JavaFileObject>
                   public setLocation(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.Iterable<java.io.File>): void
                   public getLocation(arg0: javax.tools.JavaFileManager$Location): java.lang.Iterable<java.io.File>
                   isRelativeUri<T>(...args: any[]): any
                   public static getRelativeName(arg0: java.io.File): java.lang.String
                   public static getMessage(arg0: java.io.IOException): java.lang.String
               }
               class Locations$Path extends java.util.LinkedHashSet<java.io.File> {
                   this$0: com.sun.tools.javac.file.Locations
                   public expandJarClassPaths(arg0: boolean): com.sun.tools.javac.file.Locations$Path
                   public emptyPathDefault(arg0: java.io.File): com.sun.tools.javac.file.Locations$Path
                   public constructor(arg0: com.sun.tools.javac.file.Locations)
                   addDirectories<T>(...args: any[]): any
                   addFiles<T>(...args: any[]): any
                   public addFile(arg0: java.io.File, arg1: boolean): void
               }
               abstract class Locations$LocationHandler {
                   location: javax.tools.JavaFileManager$Location
                   options: java.util.Set<com.sun.tools.javac.main.Option>
                   this$0: com.sun.tools.javac.file.Locations
                   protected constructor(arg0: com.sun.tools.javac.file.Locations, arg1: javax.tools.JavaFileManager$Location, ...arg2: com.sun.tools.javac.main.Option[])
                   update(arg0: com.sun.tools.javac.util.Options): void
                   handleOption(arg0: com.sun.tools.javac.main.Option, arg1: java.lang.String): boolean
                   getLocation(): java.util.Collection<java.io.File>
                   setLocation(arg0: java.lang.Iterable<java.io.File>): void
               }
               class Locations$OutputLocationHandler extends com.sun.tools.javac.file.Locations$LocationHandler {
                   this$0: com.sun.tools.javac.file.Locations
                   constructor(arg0: com.sun.tools.javac.file.Locations, arg1: javax.tools.JavaFileManager$Location, ...arg2: com.sun.tools.javac.main.Option[])
                   handleOption(arg0: com.sun.tools.javac.main.Option, arg1: java.lang.String): boolean
                   getLocation(): java.util.Collection<java.io.File>
                   setLocation(arg0: java.lang.Iterable<java.io.File>): void
                   static access$600(arg0: com.sun.tools.javac.file.Locations$OutputLocationHandler): java.io.File
               }
               class Locations$SimpleLocationHandler extends com.sun.tools.javac.file.Locations$LocationHandler {
                   protected searchPath: java.util.Collection<java.io.File>
                   this$0: com.sun.tools.javac.file.Locations
                   constructor(arg0: com.sun.tools.javac.file.Locations, arg1: javax.tools.JavaFileManager$Location, ...arg2: com.sun.tools.javac.main.Option[])
                   handleOption(arg0: com.sun.tools.javac.main.Option, arg1: java.lang.String): boolean
                   getLocation(): java.util.Collection<java.io.File>
                   setLocation(arg0: java.lang.Iterable<java.io.File>): void
                   protected computePath(arg0: java.lang.String): com.sun.tools.javac.file.Locations$Path
                   protected createPath(): com.sun.tools.javac.file.Locations$Path
               }
               class Locations$ClassPathLocationHandler extends com.sun.tools.javac.file.Locations$SimpleLocationHandler {
                   this$0: com.sun.tools.javac.file.Locations
                   constructor(arg0: com.sun.tools.javac.file.Locations)
                   getLocation(): java.util.Collection<java.io.File>
                   protected computePath(arg0: java.lang.String): com.sun.tools.javac.file.Locations$Path
                   protected createPath(): com.sun.tools.javac.file.Locations$Path
               }
               class Locations$BootClassPathLocationHandler extends com.sun.tools.javac.file.Locations$LocationHandler {
                   optionValues: java.util.Map<com.sun.tools.javac.main.Option, java.lang.String>
                   this$0: com.sun.tools.javac.file.Locations
                   constructor(arg0: com.sun.tools.javac.file.Locations)
                   isDefault(): boolean
                   isDefaultRtJar(arg0: java.io.File): boolean
                   handleOption(arg0: com.sun.tools.javac.main.Option, arg1: java.lang.String): boolean
                   getLocation(): java.util.Collection<java.io.File>
                   setLocation(arg0: java.lang.Iterable<java.io.File>): void
                   computePath(): com.sun.tools.javac.file.Locations$Path
               }
               class Locations$1 {
                   static $SwitchMap$com$sun$tools$javac$main$Option: int[]
               }
               class Locations {
                   handlersForLocation: java.util.Map<javax.tools.JavaFileManager$Location, com.sun.tools.javac.file.Locations$LocationHandler>
                   handlersForOption: java.util.Map<com.sun.tools.javac.main.Option, com.sun.tools.javac.file.Locations$LocationHandler>
                   public constructor()
                   public update(arg0: com.sun.tools.javac.util.Log, arg1: com.sun.tools.javac.util.Options, arg2: com.sun.tools.javac.code.Lint, arg3: com.sun.tools.javac.file.FSInfo): void
                   public bootClassPath(): java.util.Collection<java.io.File>
                   public isDefaultBootClassPath(): boolean
                   isDefaultBootClassPathRtJar(arg0: java.io.File): boolean
                   public userClassPath(): java.util.Collection<java.io.File>
                   public sourcePath(): java.util.Collection<java.io.File>
                   initHandlers(): void
                   handleOption(arg0: com.sun.tools.javac.main.Option, arg1: java.lang.String): boolean
                   getLocation(arg0: javax.tools.JavaFileManager$Location): java.util.Collection<java.io.File>
                   getOutputLocation(arg0: javax.tools.JavaFileManager$Location): java.io.File
                   setLocation(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.Iterable<java.io.File>): void
                   protected getHandler(arg0: javax.tools.JavaFileManager$Location): com.sun.tools.javac.file.Locations$LocationHandler
                   protected lazy(): void
                   public static pathToURLs(arg0: java.lang.String): java.net.URL[]
                   static access$000(arg0: java.lang.String): java.lang.Iterable
                   static access$100(arg0: com.sun.tools.javac.file.Locations): boolean
                   static access$200(arg0: com.sun.tools.javac.file.Locations): com.sun.tools.javac.util.Log
                   static access$300(arg0: com.sun.tools.javac.file.Locations, arg1: java.io.File): boolean
                   static access$400(arg0: java.lang.String, arg1: java.io.File): java.lang.Iterable
                   static access$500(arg0: com.sun.tools.javac.file.Locations): com.sun.tools.javac.file.FSInfo
               }
               class FSInfo {
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.file.FSInfo
                   constructor(...args: any[])
                   public getCanonicalFile(arg0: java.io.File): java.io.File
                   public exists(arg0: java.io.File): boolean
                   public isDirectory(arg0: java.io.File): boolean
                   public isFile(arg0: java.io.File): boolean
                   public getJarClassPath(arg0: java.io.File): java.util.List<java.io.File>
               }
               class ZipFileIndexCache {
                   public constructor()
                   public static getSharedInstance(): com.sun.tools.javac.file.ZipFileIndexCache
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.file.ZipFileIndexCache
                   getZipFileIndexes<T>(...args: any[]): any
                   public getZipFileIndex(arg0: java.io.File, arg1: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg2: boolean, arg3: java.lang.String, arg4: boolean): com.sun.tools.javac.file.ZipFileIndex
                   public getExistingZipIndex(arg0: java.io.File): com.sun.tools.javac.file.ZipFileIndex
                   clearCache<T>(...args: any[]): any
                   public removeFromCache(arg0: java.io.File): void
                   public setOpenedIndexes(arg0: java.util.List<com.sun.tools.javac.file.ZipFileIndex>): void
               }
               class ZipFileIndex$ZipDirectory {
                   zipDir: byte[]
                   zipRandomFile: java.io.RandomAccessFile
                   zipFileIndex: com.sun.tools.javac.file.ZipFileIndex
                   this$0: com.sun.tools.javac.file.ZipFileIndex
                   public constructor(arg0: com.sun.tools.javac.file.ZipFileIndex, arg1: java.io.RandomAccessFile, arg2: long, arg3: long, arg4: com.sun.tools.javac.file.ZipFileIndex)
                   static access$000(arg0: com.sun.tools.javac.file.ZipFileIndex$ZipDirectory): void
               }
               class ZipFileIndex$DirectoryEntry {
                   constructor(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg1: com.sun.tools.javac.file.ZipFileIndex)
                   getEntriesAsCollection(): java.util.List<com.sun.tools.javac.file.ZipFileIndex$Entry>
                   static access$100(arg0: com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry, arg1: java.lang.String): com.sun.tools.javac.file.ZipFileIndex$Entry
                   static access$200(arg0: com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry): com.sun.tools.javac.util.List
                   static access$300(arg0: com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry): com.sun.tools.javac.util.List
                   static access$1502(arg0: com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry, arg1: int): int
                   static access$1602(arg0: com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry, arg1: long): long
                   static access$1700(arg0: com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry): com.sun.tools.javac.file.RelativePath$RelativeDirectory
               }
               class ZipFileIndex$Entry implements java.lang.Comparable<com.sun.tools.javac.file.ZipFileIndex$Entry> {
                   public static EMPTY_ARRAY: com.sun.tools.javac.file.ZipFileIndex$Entry[]
                   dir: com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   isDir: boolean
                   name: java.lang.String
                   offset: int
                   size: int
                   compressedSize: int
                   javatime: long
                   constructor(...args: any[])
                   public getName(): java.lang.String
                   public getFileName(): java.lang.String
                   public getLastModified(): long
                   setNativeTime(arg0: int): void
                   public isDirectory(): boolean
                   compareTo<T>(...args: any[]): any
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   toString<T>(...args: any[]): any
               }
               class ZipFileIndex$ZipFormatException extends java.io.IOException {
                   constructor(...args: any[])
               }
               class ZipFileIndex {
                   public static NOT_MODIFIED: long
                   zipFile: java.io.File
                   zipFileLastModified: long
                   symbolFilePrefix: com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   lastReferenceTimeStamp: long
                   public isOpen(): boolean
                   constructor(arg0: java.io.File, arg1: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg2: boolean, arg3: boolean, arg4: java.lang.String)
                   toString<T>(...args: any[]): any
                   protected finalize(): void
                   public close(): void
                   getZipIndexEntry(arg0: com.sun.tools.javac.file.RelativePath): com.sun.tools.javac.file.ZipFileIndex$Entry
                   public getFiles(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory): com.sun.tools.javac.util.List<java.lang.String>
                   public getDirectories(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory): java.util.List<java.lang.String>
                   public getAllDirectories(): java.util.Set<com.sun.tools.javac.file.RelativePath$RelativeDirectory>
                   public contains(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   public isDirectory(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   public getLastModified(arg0: com.sun.tools.javac.file.RelativePath$RelativeFile): long
                   public length(arg0: com.sun.tools.javac.file.RelativePath$RelativeFile): int
                   read<T>(...args: any[]): any
                   public getZipFileLastModified(): long
                   public writeZipIndex(): boolean
                   public getZipFile(): java.io.File
                   getAbsoluteFile(): java.io.File
                   static access$400(arg0: byte[], arg1: int): int
                   static access$500(arg0: byte[], arg1: int): int
                   static access$602(arg0: com.sun.tools.javac.file.ZipFileIndex, arg1: java.util.Map): java.util.Map
                   static access$600(arg0: com.sun.tools.javac.file.ZipFileIndex): java.util.Map
                   static access$700(arg0: com.sun.tools.javac.file.ZipFileIndex, arg1: java.lang.String): com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   static access$802(arg0: com.sun.tools.javac.file.ZipFileIndex, arg1: com.sun.tools.javac.file.ZipFileIndex$Entry[]): com.sun.tools.javac.file.ZipFileIndex$Entry[]
                   static access$800(arg0: com.sun.tools.javac.file.ZipFileIndex): com.sun.tools.javac.file.ZipFileIndex$Entry[]
                   static access$900(arg0: com.sun.tools.javac.file.ZipFileIndex): void
                   static access$1000(arg0: com.sun.tools.javac.file.ZipFileIndex): int
                   static access$1100(arg0: com.sun.tools.javac.file.ZipFileIndex): boolean
                   static access$1200(): java.lang.String
                   static access$1300(): java.lang.String
                   static access$1400(arg0: com.sun.tools.javac.file.ZipFileIndex): java.io.File
               }
               class BaseFileObject$CannotCreateUriError extends java.lang.Error {
                   public constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
               }
               abstract class BaseFileObject implements javax.tools.JavaFileObject {
                   protected fileManager: com.sun.tools.javac.file.JavacFileManager
                   protected constructor(arg0: com.sun.tools.javac.file.JavacFileManager)
                   public getShortName(): java.lang.String
                   toString<T>(...args: any[]): any
                   public getNestingKind(): javax.lang.model.element.NestingKind
                   public getAccessLevel(): javax.lang.model.element.Modifier
                   public openReader(arg0: boolean): java.io.Reader
                   protected getDecoder(arg0: boolean): java.nio.charset.CharsetDecoder
                   protected inferBinaryName(arg0: java.lang.Iterable<java.io.File>): java.lang.String
                   protected static getKind(arg0: java.lang.String): javax.tools.JavaFileObject$Kind
                   protected static removeExtension(arg0: java.lang.String): java.lang.String
                   protected static createJarUri(arg0: java.io.File, arg1: java.lang.String): java.net.URI
                   public static getSimpleName(arg0: javax.tools.FileObject): java.lang.String
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class ZipFileIndexArchive$ZipFileIndexFileObject extends com.sun.tools.javac.file.BaseFileObject {
                   zfIndex: com.sun.tools.javac.file.ZipFileIndex
                   entry: com.sun.tools.javac.file.ZipFileIndex$Entry
                   inputStream: java.io.InputStream
                   zipName: java.io.File
                   constructor(arg0: com.sun.tools.javac.file.JavacFileManager, arg1: com.sun.tools.javac.file.ZipFileIndex, arg2: com.sun.tools.javac.file.ZipFileIndex$Entry, arg3: java.io.File)
                   public toUri(): java.net.URI
                   public getName(): java.lang.String
                   public getShortName(): java.lang.String
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public openInputStream(): java.io.InputStream
                   public openOutputStream(): java.io.OutputStream
                   getCharContent<T>(...args: any[]): any
                   public openWriter(): java.io.Writer
                   public getLastModified(): long
                   public delete(): boolean
                   protected getDecoder(arg0: boolean): java.nio.charset.CharsetDecoder
                   protected inferBinaryName(arg0: java.lang.Iterable<java.io.File>): java.lang.String
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class ZipFileIndexArchive implements com.sun.tools.javac.file.JavacFileManager$Archive {
                   public constructor(arg0: com.sun.tools.javac.file.JavacFileManager, arg1: com.sun.tools.javac.file.ZipFileIndex)
                   public contains(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   public getFiles(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory): com.sun.tools.javac.util.List<java.lang.String>
                   public getFileObject(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg1: java.lang.String): javax.tools.JavaFileObject
                   public getSubdirectories(): java.util.Set<com.sun.tools.javac.file.RelativePath$RelativeDirectory>
                   public close(): void
                   toString<T>(...args: any[]): any
               }
               class ZipArchive$ZipFileObject extends com.sun.tools.javac.file.BaseFileObject {
                   zarch: com.sun.tools.javac.file.ZipArchive
                   entry: java.util.zip.ZipEntry
                   protected constructor(arg0: com.sun.tools.javac.file.ZipArchive, arg1: java.lang.String, arg2: java.util.zip.ZipEntry)
                   public toUri(): java.net.URI
                   public getName(): java.lang.String
                   public getShortName(): java.lang.String
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public openInputStream(): java.io.InputStream
                   public openOutputStream(): java.io.OutputStream
                   getCharContent<T>(...args: any[]): any
                   public openWriter(): java.io.Writer
                   public getLastModified(): long
                   public delete(): boolean
                   protected getDecoder(arg0: boolean): java.nio.charset.CharsetDecoder
                   protected inferBinaryName(arg0: java.lang.Iterable<java.io.File>): java.lang.String
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class ZipArchive implements com.sun.tools.javac.file.JavacFileManager$Archive {
                   protected fileManager: com.sun.tools.javac.file.JavacFileManager
                   protected map: java.util.Map<com.sun.tools.javac.file.RelativePath$RelativeDirectory, com.sun.tools.javac.util.List<java.lang.String>>
                   protected zfile: java.util.zip.ZipFile
                   protected absFileRef: java.lang.ref.Reference<java.io.File>
                   constructor(...args: any[])
                   protected initMap(): void
                   addZipEntry(arg0: java.util.zip.ZipEntry): void
                   public contains(arg0: com.sun.tools.javac.file.RelativePath): boolean
                   public getFiles(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory): com.sun.tools.javac.util.List<java.lang.String>
                   public getFileObject(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg1: java.lang.String): javax.tools.JavaFileObject
                   public getSubdirectories(): java.util.Set<com.sun.tools.javac.file.RelativePath$RelativeDirectory>
                   public close(): void
                   toString<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.file.ZipArchive): java.io.File
               }
               class SymbolArchive$SymbolFileObject extends com.sun.tools.javac.file.ZipArchive$ZipFileObject {
                   protected constructor(arg0: com.sun.tools.javac.file.SymbolArchive, arg1: java.lang.String, arg2: java.util.zip.ZipEntry)
                   protected inferBinaryName(arg0: java.lang.Iterable<java.io.File>): java.lang.String
               }
               class SymbolArchive extends com.sun.tools.javac.file.ZipArchive {
                   origFile: java.io.File
                   prefix: com.sun.tools.javac.file.RelativePath$RelativeDirectory
                   public constructor(arg0: com.sun.tools.javac.file.JavacFileManager, arg1: java.io.File, arg2: java.util.zip.ZipFile, arg3: com.sun.tools.javac.file.RelativePath$RelativeDirectory)
                   addZipEntry(arg0: java.util.zip.ZipEntry): void
                   public getFileObject(arg0: com.sun.tools.javac.file.RelativePath$RelativeDirectory, arg1: java.lang.String): javax.tools.JavaFileObject
                   toString<T>(...args: any[]): any
               }
               class RegularFileObject extends com.sun.tools.javac.file.BaseFileObject {
                   file: java.io.File
                   static isMacOS: boolean
                   constructor(...args: any[])
                   public toUri(): java.net.URI
                   public getName(): java.lang.String
                   public getShortName(): java.lang.String
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public openInputStream(): java.io.InputStream
                   public openOutputStream(): java.io.OutputStream
                   getCharContent<T>(...args: any[]): any
                   public openWriter(): java.io.Writer
                   public getLastModified(): long
                   public delete(): boolean
                   protected getDecoder(arg0: boolean): java.nio.charset.CharsetDecoder
                   protected inferBinaryName(arg0: java.lang.Iterable<java.io.File>): java.lang.String
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class CacheFSInfo$1 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.file.FSInfo> {
                   constructor()
                   make<T>(...args: any[]): any
               }
               class CacheFSInfo$Entry {
                   canonicalFile: java.io.File
                   exists: boolean
                   isFile: boolean
                   isDirectory: boolean
                   jarClassPath: java.util.List<java.io.File>
                   constructor(arg0: com.sun.tools.javac.file.CacheFSInfo$1)
               }
               class CacheFSInfo extends com.sun.tools.javac.file.FSInfo {
                   public constructor()
                   public static preRegister(arg0: com.sun.tools.javac.util.Context): void
                   public clearCache(): void
                   public getCanonicalFile(arg0: java.io.File): java.io.File
                   public exists(arg0: java.io.File): boolean
                   public isDirectory(arg0: java.io.File): boolean
                   public isFile(arg0: java.io.File): boolean
                   public getJarClassPath(arg0: java.io.File): java.util.List<java.io.File>
               }

            }
            namespace comp {
               interface Annotate$Worker {
                   public run(): void
                   toString<T>(...args: any[]): any
               }
               class Attribute$Compound> {
                   public env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public annotated: java.util.Map<com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.util.ListBuffer<T>>
                   public pos: java.util.Map<T, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition>
                   public log: com.sun.tools.javac.util.Log
                   public isTypeCompound: boolean
                   this$0: com.sun.tools.javac.comp.Annotate
                   public constructor(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: java.util.Map<com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.util.ListBuffer<T>>, arg2: java.util.Map<T, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition>, arg3: com.sun.tools.javac.util.Log, arg4: boolean)
                   public processRepeatedAnnotations(arg0: com.sun.tools.javac.util.List<T>, arg1: com.sun.tools.javac.code.Symbol): T
                   public annotateRepeated(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
               }
               class Annotate {
                   protected static annotateKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Annotate>
                   attr: com.sun.tools.javac.comp.Attr
                   make: com.sun.tools.javac.tree.TreeMaker
                   log: com.sun.tools.javac.util.Log
                   syms: com.sun.tools.javac.code.Symtab
                   names: com.sun.tools.javac.util.Names
                   rs: com.sun.tools.javac.comp.Resolve
                   types: com.sun.tools.javac.code.Types
                   cfolder: com.sun.tools.javac.comp.ConstFold
                   chk: com.sun.tools.javac.comp.Check
                   q: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.comp.Annotate$Worker>
                   typesQ: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.comp.Annotate$Worker>
                   repeatedQ: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.comp.Annotate$Worker>
                   afterRepeatedQ: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.comp.Annotate$Worker>
                   validateQ: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.comp.Annotate$Worker>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Annotate
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public earlier(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
                   public normal(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
                   public typeAnnotation(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
                   public repeated(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
                   public afterRepeated(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
                   public validate(arg0: com.sun.tools.javac.comp.Annotate$Worker): void
                   public enterStart(): void
                   public enterDone(): void
                   public enterDoneWithoutFlush(): void
                   public flush(): void
                   enterAnnotation<T>(...args: any[]): any
                   enterTypeAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Attribute$TypeCompound
                   enterAttributeValue(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Attribute
                   static access$000(arg0: com.sun.tools.javac.comp.Annotate, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.comp.Annotate$AnnotateRepeatedContext, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Attribute$Compound
               }
               class Resolve$VerboseResolutionMode extends java.lang.Enum<com.sun.tools.javac.comp.Resolve$VerboseResolutionMode> {
                   public static SUCCESS: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static FAILURE: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static APPLICABLE: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static INAPPLICABLE: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static DEFERRED_INST: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static PREDEF: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static OBJECT_INIT: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   public static INTERNAL: com.sun.tools.javac.comp.Resolve$VerboseResolutionMode
                   opt: java.lang.String
                   public static values(): com.sun.tools.javac.comp.Resolve$VerboseResolutionMode[]
                   valueOf<T>(...args: any[]): any
                   static getVerboseResolutionMode(arg0: com.sun.tools.javac.util.Options): java.util.EnumSet<com.sun.tools.javac.comp.Resolve$VerboseResolutionMode>
               }
               class Resolve$1 extends com.sun.tools.javac.code.Types$SimpleVisitor<java.lang.Void, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   visit(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   visitType<T>(...args: any[]): any
                   visitArrayType<T>(...args: any[]): any
                   visitClassType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
                   visitMethodType<T>(...args: any[]): any
               }
               interface Resolve$MethodCheck {
                   public argumentsAcceptable(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.Warner): void
                   public mostSpecificCheck(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean): com.sun.tools.javac.comp.Resolve$MethodCheck
               }
               class Resolve$MethodCheckDiag extends java.lang.Enum<com.sun.tools.javac.comp.Resolve$MethodCheckDiag> {
                   public static ARITY_MISMATCH: com.sun.tools.javac.comp.Resolve$MethodCheckDiag
                   public static ARG_MISMATCH: com.sun.tools.javac.comp.Resolve$MethodCheckDiag
                   public static VARARG_MISMATCH: com.sun.tools.javac.comp.Resolve$MethodCheckDiag
                   public static INACCESSIBLE_VARARGS: com.sun.tools.javac.comp.Resolve$MethodCheckDiag
                   basicKey: java.lang.String
                   inferKey: java.lang.String
                   public static values(): com.sun.tools.javac.comp.Resolve$MethodCheckDiag[]
                   valueOf<T>(...args: any[]): any
                   regex(): java.lang.String
               }
               class Resolve$2 implements com.sun.tools.javac.comp.Resolve$MethodCheck {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   public argumentsAcceptable(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.Warner): void
                   public mostSpecificCheck(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean): com.sun.tools.javac.comp.Resolve$MethodCheck
               }
               abstract class Resolve$AbstractMethodCheck implements com.sun.tools.javac.comp.Resolve$MethodCheck {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   public argumentsAcceptable(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.Warner): void
                   checkArg(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: boolean, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg5: com.sun.tools.javac.util.Warner): void
                   protected reportMC(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Resolve$MethodCheckDiag, arg2: com.sun.tools.javac.comp.Infer$InferenceContext, ...arg3: java.lang.Object[]): void
                   public mostSpecificCheck(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean): com.sun.tools.javac.comp.Resolve$MethodCheck
               }
               class Resolve$3 extends com.sun.tools.javac.comp.Resolve$AbstractMethodCheck {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   checkArg(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: boolean, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg5: com.sun.tools.javac.util.Warner): void
                   toString<T>(...args: any[]): any
               }
               class Resolve$4$1 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$env: com.sun.tools.javac.comp.Env
                   val$t: com.sun.tools.javac.code.Type
                   this$1: com.sun.tools.javac.comp.Resolve$4
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$4, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.code.Type)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Resolve$4$2 extends com.sun.tools.javac.comp.Resolve$MethodCheckContext {
                   methodDiag: com.sun.tools.javac.comp.Resolve$MethodCheckDiag
                   val$varargsCheck: boolean
                   this$1: com.sun.tools.javac.comp.Resolve$4
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$4, arg1: boolean, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg3: com.sun.tools.javac.util.Warner, arg4: boolean)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Resolve$4 extends com.sun.tools.javac.comp.Resolve$AbstractMethodCheck {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   checkArg(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: boolean, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg5: com.sun.tools.javac.util.Warner): void
                   public argumentsAcceptable(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.Warner): void
                   public mostSpecificCheck(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean): com.sun.tools.javac.comp.Resolve$MethodCheck
                   toString<T>(...args: any[]): any
                   static access$400(arg0: com.sun.tools.javac.comp.Resolve$4, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Resolve$MethodReferenceCheck$1 extends com.sun.tools.javac.comp.Resolve$MethodCheckContext {
                   methodDiag: com.sun.tools.javac.comp.Resolve$MethodCheckDiag
                   val$varargsCheck: boolean
                   this$1: com.sun.tools.javac.comp.Resolve$MethodReferenceCheck
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$MethodReferenceCheck, arg1: boolean, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg3: com.sun.tools.javac.util.Warner, arg4: boolean)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Resolve$MethodReferenceCheck extends com.sun.tools.javac.comp.Resolve$AbstractMethodCheck {
                   pendingInferenceContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.comp.Infer$InferenceContext)
                   checkArg(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: boolean, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg5: com.sun.tools.javac.util.Warner): void
                   public mostSpecificCheck(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean): com.sun.tools.javac.comp.Resolve$MethodCheck
               }
               abstract class Resolve$MethodCheckContext implements com.sun.tools.javac.comp.Check$CheckContext {
                   strict: boolean
                   deferredAttrContext<T>(...args: any[]): any
                   rsWarner: com.sun.tools.javac.util.Warner
                   this$0: com.sun.tools.javac.comp.Resolve
                   public constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: boolean, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg3: com.sun.tools.javac.util.Warner)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
                   public checkWarner(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Warner
                   public inferenceContext(): com.sun.tools.javac.comp.Infer$InferenceContext
                   toString<T>(...args: any[]): any
               }
               class Resolve$MethodResultInfo extends com.sun.tools.javac.comp.Attr$ResultInfo {
                   this$0: com.sun.tools.javac.comp.Resolve
                   public constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.comp.Check$CheckContext)
                   protected check(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   dup<T>(...args: any[]): any
               }
               class Resolve$MostSpecificCheck$MostSpecificCheckContext$FunctionalInterfaceMostSpecificChecker$1 extends com.sun.tools.javac.comp.DeferredAttr$LambdaReturnScanner {
                   val$buffer: com.sun.tools.javac.util.ListBuffer
                   this$3: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$FunctionalInterfaceMostSpecificChecker
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$FunctionalInterfaceMostSpecificChecker, arg1: com.sun.tools.javac.util.ListBuffer)
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
               }
               class Resolve$MostSpecificCheck$MostSpecificCheckContext$FunctionalInterfaceMostSpecificChecker extends com.sun.tools.javac.comp.DeferredAttr$PolyScanner {
                   t: com.sun.tools.javac.code.Type
                   s: com.sun.tools.javac.code.Type
                   warn: com.sun.tools.javac.util.Warner
                   result: boolean
                   this$2: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner)
                   skip(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
               }
               class Resolve$MostSpecificCheck$MostSpecificCheckContext extends com.sun.tools.javac.comp.Resolve$MethodCheckContext {
                   actual: com.sun.tools.javac.code.Type
                   this$1: com.sun.tools.javac.comp.Resolve$MostSpecificCheck
                   public constructor(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck, arg1: boolean, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg3: com.sun.tools.javac.util.Warner, arg4: com.sun.tools.javac.code.Type)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   static access$501(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner): boolean
                   static access$600(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): boolean
                   static access$700(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.tree.JCTree, arg4: com.sun.tools.javac.util.Warner): boolean
                   static access$801(arg0: com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner): boolean
               }
               class Resolve$MostSpecificCheck implements com.sun.tools.javac.comp.Resolve$MethodCheck {
                   strict: boolean
                   actuals: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: boolean, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>)
                   public argumentsAcceptable(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.Warner): void
                   methodCheckResult(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Type): com.sun.tools.javac.comp.Attr$ResultInfo
                   public mostSpecificCheck(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: boolean): com.sun.tools.javac.comp.Resolve$MethodCheck
               }
               class Resolve$InapplicableMethodException extends java.lang.RuntimeException {
                   diagnostic: com.sun.tools.javac.util.JCDiagnostic
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   constructor(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory)
                   setMessage<T>(...args: any[]): any
                   public getDiagnostic(): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$LookupFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   abstractOk: boolean
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: boolean)
                   accepts<T>(...args: any[]): any
               }
               class Resolve$InterfaceLookupPhase$1 extends com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase {
                   constructor(arg0: java.lang.String, arg1: int)
                   update(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Resolve): com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase
               }
               class Resolve$InterfaceLookupPhase$2 extends com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase {
                   constructor(arg0: java.lang.String, arg1: int)
                   update(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Resolve): com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase
               }
               abstract class Resolve$InterfaceLookupPhase extends java.lang.Enum<com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase> {
                   public static ABSTRACT_OK: com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase
                   public static DEFAULT_OK: com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase
                   public static values(): com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase[]
                   valueOf<T>(...args: any[]): any
                   update(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Resolve): com.sun.tools.javac.comp.Resolve$InterfaceLookupPhase
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.comp.Resolve$1)
               }
               class Resolve$5$1 implements java.util.Iterator<com.sun.tools.javac.code.Symbol$TypeSymbol> {
                   seen: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$TypeSymbol>
                   currentSym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   prevSym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   this$1: com.sun.tools.javac.comp.Resolve$5
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$5)
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
                   symbolFor(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol$TypeSymbol
               }
               class Resolve$5 implements java.lang.Iterable<com.sun.tools.javac.code.Symbol$TypeSymbol> {
                   val$intype: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.code.Type)
                   public iterator(): java.util.Iterator<com.sun.tools.javac.code.Symbol$TypeSymbol>
               }
               interface Resolve$LogResolveHelper {
                   public resolveDiagnosticNeeded(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public getArgumentTypes(arg0: com.sun.tools.javac.comp.Resolve$ResolveError, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
               }
               class Resolve$6 implements com.sun.tools.javac.comp.Resolve$LogResolveHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   public resolveDiagnosticNeeded(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public getArgumentTypes(arg0: com.sun.tools.javac.comp.Resolve$ResolveError, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
               }
               class Resolve$7 implements com.sun.tools.javac.comp.Resolve$LogResolveHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   public resolveDiagnosticNeeded(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   public getArgumentTypes(arg0: com.sun.tools.javac.comp.Resolve$ResolveError, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
               }
               class Resolve$ResolveDeferredRecoveryMap extends com.sun.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap {
                   this$0: com.sun.tools.javac.comp.Resolve
                   public constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.comp.DeferredAttr$AttrMode, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   protected typeOf(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType): com.sun.tools.javac.code.Type
               }
               class Resolve$8 extends com.sun.tools.javac.comp.Resolve$BasicLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List)
                   doLookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
               }
               class Resolve$9 extends com.sun.tools.javac.comp.Resolve$BasicLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List)
                   doLookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$10 extends com.sun.tools.javac.code.Symbol$MethodSymbol {
                   val$spMethod: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol, arg5: com.sun.tools.javac.code.Symbol)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
               }
               class Resolve$11 extends com.sun.tools.javac.comp.Resolve$BasicLookupHelper {
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List, arg5: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition)
                   doLookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
               }
               class Resolve$12$1 extends com.sun.tools.javac.comp.Resolve$InapplicableSymbolError {
                   val$details: com.sun.tools.javac.util.JCDiagnostic
                   this$1: com.sun.tools.javac.comp.Resolve$12
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$12, arg1: int, arg2: java.lang.String, arg3: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg4: com.sun.tools.javac.util.JCDiagnostic)
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$12 extends com.sun.tools.javac.comp.Resolve$BasicLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List)
                   doLookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$13 extends com.sun.tools.javac.code.Symbol$MethodSymbol {
                   val$sym: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol, arg5: com.sun.tools.javac.code.Symbol)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
               }
               class Resolve$14 extends com.sun.tools.javac.comp.Resolve$BasicLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List, arg5: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   doLookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$SearchResultKind extends java.lang.Enum<com.sun.tools.javac.comp.Resolve$SearchResultKind> {
                   public static GOOD_MATCH: com.sun.tools.javac.comp.Resolve$SearchResultKind
                   public static BAD_MATCH_MORE_SPECIFIC: com.sun.tools.javac.comp.Resolve$SearchResultKind
                   public static BAD_MATCH: com.sun.tools.javac.comp.Resolve$SearchResultKind
                   public static NOT_APPLICABLE_MATCH: com.sun.tools.javac.comp.Resolve$SearchResultKind
                   public static values(): com.sun.tools.javac.comp.Resolve$SearchResultKind[]
                   valueOf<T>(...args: any[]): any
               }
               abstract class Resolve$LookupHelper {
                   name: com.sun.tools.javac.util.Name
                   site: com.sun.tools.javac.code.Type
                   argtypes: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   typeargtypes: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   maxPhase: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   shouldStop(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): boolean
                   lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   debug(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               abstract class Resolve$BasicLookupHelper extends com.sun.tools.javac.comp.Resolve$LookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(...args: any[])
                   lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   doLookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
                   debug(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
               }
               class Resolve$ReferenceLookupHelper$1 extends com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper {
                   this$1: com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper, arg1: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.List, arg5: com.sun.tools.javac.util.List, arg6: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   unboundLookup(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper
                   lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   referenceKind(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
               }
               abstract class Resolve$ReferenceLookupHelper extends com.sun.tools.javac.comp.Resolve$LookupHelper {
                   referenceTree: com.sun.tools.javac.tree.JCTree$JCMemberReference
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   unboundLookup(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper
                   referenceKind(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$MethodReferenceLookupHelper extends com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   unboundLookup(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper
                   referenceKind(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
               }
               class Resolve$UnboundMethodReferenceLookupHelper extends com.sun.tools.javac.comp.Resolve$MethodReferenceLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   unboundLookup(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper
                   referenceKind(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
               }
               class Resolve$ArrayConstructorReferenceLookupHelper extends com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   protected lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   referenceKind(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
               }
               class Resolve$ConstructorReferenceLookupHelper$1 extends com.sun.tools.javac.comp.Resolve$InvalidSymbolError {
                   this$1: com.sun.tools.javac.comp.Resolve$ConstructorReferenceLookupHelper
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$ConstructorReferenceLookupHelper, arg1: int, arg2: com.sun.tools.javac.code.Symbol, arg3: java.lang.String)
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$ConstructorReferenceLookupHelper extends com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper {
                   needsInference: boolean
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   protected lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   referenceKind(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind
               }
               abstract class Resolve$ResolveError extends com.sun.tools.javac.code.Symbol {
                   debugName: java.lang.String
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: int, arg2: java.lang.String)
                   public accept<R, P>(arg0: javax.lang.model.element.ElementVisitor<R, P>, arg1: P): R
                   toString<T>(...args: any[]): any
                   public exists(): boolean
                   public isStatic(): boolean
                   protected access(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               abstract class Resolve$InvalidSymbolError extends com.sun.tools.javac.comp.Resolve$ResolveError {
                   sym: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: int, arg2: com.sun.tools.javac.code.Symbol, arg3: java.lang.String)
                   public exists(): boolean
                   toString<T>(...args: any[]): any
                   public access(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$SymbolNotFoundError extends com.sun.tools.javac.comp.Resolve$ResolveError {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(...args: any[])
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$InapplicableSymbolError extends com.sun.tools.javac.comp.Resolve$ResolveError {
                   protected resolveContext: com.sun.tools.javac.comp.Resolve$MethodResolutionContext
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(...args: any[])
                   toString<T>(...args: any[]): any
                   public exists(): boolean
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
                   public access(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   protected errCandidate(): com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic>
               }
               class Resolve$InapplicableSymbolsError$1 extends com.sun.tools.javac.comp.Resolve$InapplicableSymbolError {
                   val$p: com.sun.tools.javac.util.Pair
                   this$1: com.sun.tools.javac.comp.Resolve$InapplicableSymbolsError
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$InapplicableSymbolsError, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg2: com.sun.tools.javac.util.Pair)
                   protected errCandidate(): com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic>
               }
               class Resolve$InapplicableSymbolsError extends com.sun.tools.javac.comp.Resolve$InapplicableSymbolError {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionContext)
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
                   filterCandidates(arg0: java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic>): java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic>
                   static access$1100(arg0: com.sun.tools.javac.comp.Resolve$InapplicableSymbolsError): java.util.Map
               }
               class Resolve$AccessError extends com.sun.tools.javac.comp.Resolve$InvalidSymbolError {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(...args: any[])
                   public exists(): boolean
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$StaticError extends com.sun.tools.javac.comp.Resolve$InvalidSymbolError {
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.code.Symbol)
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$AmbiguityError extends com.sun.tools.javac.comp.Resolve$ResolveError {
                   ambiguousSyms: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>
                   this$0: com.sun.tools.javac.comp.Resolve
                   public exists(): boolean
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol)
                   addAmbiguousSymbol(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.comp.Resolve$AmbiguityError
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
                   mergeAbstracts(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol
                   protected access(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$BadVarargsMethod extends com.sun.tools.javac.comp.Resolve$ResolveError {
                   delegatedError: com.sun.tools.javac.comp.Resolve$ResolveError
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.comp.Resolve$ResolveError)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
                   protected access(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   public exists(): boolean
                   getDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.JCDiagnostic
               }
               interface Resolve$MethodResolutionDiagHelper$DiagnosticRewriter {
                   public rewriteDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.util.DiagnosticSource, arg3: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg4: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$MethodResolutionDiagHelper$Template {
                   regex: java.lang.String
                   subTemplates: com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[]
                   constructor(arg0: java.lang.String, ...arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[])
                   matches(arg0: java.lang.Object): boolean
               }
               class Resolve$MethodResolutionDiagHelper$1 extends com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template {
                   constructor(arg0: java.lang.String, ...arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[])
                   matches(arg0: java.lang.Object): boolean
               }
               class Resolve$MethodResolutionDiagHelper$2 implements com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$DiagnosticRewriter {
                   constructor()
                   public rewriteDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.util.DiagnosticSource, arg3: com.sun.tools.javac.util.JCDiagnostic$DiagnosticType, arg4: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.util.JCDiagnostic
               }
               class Resolve$MethodResolutionDiagHelper {
                   static skip: com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template
                   static rewriters: java.util.Map<com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template, com.sun.tools.javac.comp.Resolve$MethodResolutionDiagHelper$DiagnosticRewriter>
                   constructor()
               }
               class Resolve$MethodResolutionPhase$1 extends com.sun.tools.javac.comp.Resolve$MethodResolutionPhase {
                   constructor(arg0: java.lang.String, arg1: int, arg2: boolean, arg3: boolean)
                   public mergeResults(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class Resolve$MethodResolutionPhase extends java.lang.Enum<com.sun.tools.javac.comp.Resolve$MethodResolutionPhase> {
                   public static BASIC: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   public static BOX: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   public static VARARITY: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   isBoxingRequired<T>(...args: any[]): any
                   isVarargsRequired<T>(...args: any[]): any
                   public static values(): com.sun.tools.javac.comp.Resolve$MethodResolutionPhase[]
                   valueOf<T>(...args: any[]): any
                   public isApplicable(arg0: boolean, arg1: boolean): boolean
                   public mergeResults(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
                   constructor(arg0: java.lang.String, arg1: int, arg2: boolean, arg3: boolean, arg4: com.sun.tools.javac.comp.Resolve$1)
               }
               class Resolve$MethodResolutionContext$Candidate {
                   step: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   sym: com.sun.tools.javac.code.Symbol
                   details: com.sun.tools.javac.util.JCDiagnostic
                   mtype: com.sun.tools.javac.code.Type
                   this$1: com.sun.tools.javac.comp.Resolve$MethodResolutionContext
                   public equals(arg0: java.lang.Object): boolean
                   isApplicable(): boolean
                   constructor(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.util.JCDiagnostic, arg4: com.sun.tools.javac.code.Type, arg5: com.sun.tools.javac.comp.Resolve$1)
               }
               class Resolve$MethodResolutionContext {
                   step: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   methodCheck: com.sun.tools.javac.comp.Resolve$MethodCheck
                   this$0: com.sun.tools.javac.comp.Resolve
                   constructor(arg0: com.sun.tools.javac.comp.Resolve)
                   addInapplicableCandidate(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.util.JCDiagnostic): void
                   addApplicableCandidate(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Type): void
                   deferredAttrContext(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.comp.Attr$ResultInfo, arg3: com.sun.tools.javac.util.Warner): com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   attrMode(): com.sun.tools.javac.comp.DeferredAttr$AttrMode
                   internal(): boolean
                   static access$000(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionContext): boolean
                   static access$100(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionContext): com.sun.tools.javac.util.List
                   static access$202(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg1: com.sun.tools.javac.comp.DeferredAttr$AttrMode): com.sun.tools.javac.comp.DeferredAttr$AttrMode
                   static access$002(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg1: boolean): boolean
               }
               class Resolve$15 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$Kinds$KindName: int[]
               }
               class Resolve {
                   protected static resolveKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Resolve>
                   names: com.sun.tools.javac.util.Names
                   log: com.sun.tools.javac.util.Log
                   syms: com.sun.tools.javac.code.Symtab
                   attr: com.sun.tools.javac.comp.Attr
                   deferredAttr: com.sun.tools.javac.comp.DeferredAttr
                   chk: com.sun.tools.javac.comp.Check
                   infer: com.sun.tools.javac.comp.Infer
                   reader: com.sun.tools.javac.jvm.ClassReader
                   treeinfo: com.sun.tools.javac.tree.TreeInfo
                   types: com.sun.tools.javac.code.Types
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   public boxingEnabled: boolean
                   public varargsEnabled: boolean
                   public allowMethodHandles: boolean
                   public allowFunctionalInterfaceMostSpecific: boolean
                   public checkVarargsAccessAfterResolution: boolean
                   verboseResolutionMode: java.util.EnumSet<com.sun.tools.javac.comp.Resolve$VerboseResolutionMode>
                   polymorphicSignatureScope: com.sun.tools.javac.code.Scope
                   accessibilityChecker: com.sun.tools.javac.code.Types$SimpleVisitor<java.lang.Void, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   nilMethodCheck: com.sun.tools.javac.comp.Resolve$MethodCheck
                   arityMethodCheck: com.sun.tools.javac.comp.Resolve$MethodCheck
                   resolveMethodCheck: com.sun.tools.javac.comp.Resolve$MethodCheck
                   noteWarner: com.sun.tools.javac.util.Warner
                   basicLogResolveHelper: com.sun.tools.javac.comp.Resolve$LogResolveHelper
                   methodLogResolveHelper: com.sun.tools.javac.comp.Resolve$LogResolveHelper
                   methodResolutionSteps: com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Resolve$MethodResolutionPhase>
                   currentResolutionContext: com.sun.tools.javac.comp.Resolve$MethodResolutionContext
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Resolve
                   reportVerboseResolutionDiagnostic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.code.Symbol): void
                   getVerboseApplicableCandidateDiag(arg0: int, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.JCDiagnostic
                   getVerboseInapplicableCandidateDiag(arg0: int, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.util.JCDiagnostic
                   protected static isStatic(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): boolean
                   static isInitializer(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): boolean
                   isAccessible<T>(...args: any[]): any
                   checkAccessibleType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type): void
                   rawInstantiate(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Attr$ResultInfo, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: boolean, arg7: boolean, arg8: com.sun.tools.javac.util.Warner): com.sun.tools.javac.code.Type
                   checkMethod(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Attr$ResultInfo, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.Warner): com.sun.tools.javac.code.Type
                   instantiate(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Attr$ResultInfo, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: boolean, arg7: boolean, arg8: com.sun.tools.javac.util.Warner): com.sun.tools.javac.code.Type
                   dummyArgs(arg0: int): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   findField(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   public resolveInternalField(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol$VarSymbol
                   findVar(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol
                   selectBest(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.code.Symbol, arg5: com.sun.tools.javac.code.Symbol, arg6: boolean, arg7: boolean, arg8: boolean): com.sun.tools.javac.code.Symbol
                   mostSpecific(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg4: com.sun.tools.javac.code.Type, arg5: boolean, arg6: boolean): com.sun.tools.javac.code.Symbol
                   adjustArgs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.code.Symbol, arg2: int, arg3: boolean): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   mostSpecificReturnType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   ambiguityError(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
                   findMethodInScope(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.code.Scope, arg6: com.sun.tools.javac.code.Symbol, arg7: boolean, arg8: boolean, arg9: boolean, arg10: boolean): com.sun.tools.javac.code.Symbol
                   findMethod(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: boolean, arg6: boolean, arg7: boolean): com.sun.tools.javac.code.Symbol
                   superclasses(arg0: com.sun.tools.javac.code.Type): java.lang.Iterable<com.sun.tools.javac.code.Symbol$TypeSymbol>
                   findFun(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: boolean, arg5: boolean): com.sun.tools.javac.code.Symbol
                   loadClass(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol
                   findImmediateMemberType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   findInheritedMemberType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   findMemberType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.code.Symbol
                   findGlobalType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Scope, arg2: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol
                   findTypeVar(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name, arg2: boolean): com.sun.tools.javac.code.Symbol
                   findType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol
                   findIdent(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.Name, arg2: int): com.sun.tools.javac.code.Symbol
                   public reportDependence(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol): void
                   findIdentInPackage(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: com.sun.tools.javac.util.Name, arg3: int): com.sun.tools.javac.code.Symbol
                   findIdentInType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: int): com.sun.tools.javac.code.Symbol
                   accessInternal(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name, arg5: boolean, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg7: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg8: com.sun.tools.javac.comp.Resolve$LogResolveHelper): com.sun.tools.javac.code.Symbol
                   accessMethod<T>(...args: any[]): any
                   accessBase<T>(...args: any[]): any
                   checkNonAbstract(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   printscopes<T>(...args: any[]): any
                   resolveIdent(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.util.Name, arg3: int): com.sun.tools.javac.code.Symbol
                   resolveMethod(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol
                   resolveQualifiedMethod<T>(...args: any[]): any
                   findPolymorphicSignatureInstance(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol
                   public resolveInternalMethod(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Name, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol$MethodSymbol
                   resolveConstructor(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol
                   public resolveInternalConstructor(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol$MethodSymbol
                   findConstructor(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: boolean, arg6: boolean): com.sun.tools.javac.code.Symbol
                   resolveDiamond(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol
                   resolveOperator(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.tree.JCTree$Tag, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Symbol
                   resolveUnaryOperator(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.tree.JCTree$Tag, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg3: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol
                   resolveBinaryOperator(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.tree.JCTree$Tag, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol
                   getMemberReference(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol
                   makeReferenceLookupHelper(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper
                   resolveMemberReferenceByArity(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Name, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Symbol
                   resolveMemberReference(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Name, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.comp.Resolve$MethodCheck, arg7: com.sun.tools.javac.comp.Infer$InferenceContext, arg8: com.sun.tools.javac.comp.DeferredAttr$AttrMode): com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper>
                   hasAnotherApplicableMethod(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg1: com.sun.tools.javac.code.Symbol, arg2: boolean): boolean
                   lookupMethod<T>(...args: any[]): any
                   resolveSelf(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol, arg3: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol
                   resolveSelfContaining(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Symbol, arg3: boolean): com.sun.tools.javac.code.Symbol
                   hasEnclosingInstance(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Type): boolean
                   resolveImplicitThis<T>(...args: any[]): any
                   public logAccessErrorInternal(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.code.Type): void
                   public methodArguments(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): java.lang.Object
                   static access$300(arg0: com.sun.tools.javac.comp.Resolve): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
                   static access$1000(arg0: com.sun.tools.javac.comp.Resolve, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List, arg5: boolean, arg6: boolean): com.sun.tools.javac.code.Symbol
                   static access$1200(arg0: com.sun.tools.javac.comp.Resolve): com.sun.tools.javac.comp.Resolve$SymbolNotFoundError
                   static access$1300(arg0: com.sun.tools.javac.comp.Resolve): boolean
                   static access$1400(arg0: com.sun.tools.javac.comp.Resolve): boolean
               }
               class Infer$InferenceException extends com.sun.tools.javac.comp.Resolve$InapplicableMethodException {
                   messages: com.sun.tools.javac.util.List<com.sun.tools.javac.util.JCDiagnostic>
                   constructor(arg0: com.sun.tools.javac.util.JCDiagnostic$Factory)
                   setMessage<T>(...args: any[]): any
                   public getDiagnostic(): com.sun.tools.javac.util.JCDiagnostic
                   clear(): void
               }
               class Infer$ImplicitArgType extends com.sun.tools.javac.comp.DeferredAttr$DeferredTypeMap {
                   this$0: com.sun.tools.javac.comp.Infer
                   public constructor(arg0: com.sun.tools.javac.comp.Infer, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Infer$MultiUndetVarListener implements com.sun.tools.javac.code.Type$UndetVar$UndetVarListener {
                   changed: boolean
                   undetvars: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   this$0: com.sun.tools.javac.comp.Infer
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>)
                   public varChanged(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: java.util.Set<com.sun.tools.javac.code.Type$UndetVar$InferenceBound>): void
                   reset(): void
                   detach(): void
               }
               class Infer$IncorporationStep$1 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
                   accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
               }
               class Infer$IncorporationStep$2 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$3 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$4 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$5 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$6 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$7 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
                   accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
               }
               class Infer$IncorporationStep$8 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$9 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$10 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               class Infer$IncorporationStep$11 extends com.sun.tools.javac.comp.Infer$IncorporationStep {
                   constructor(arg0: java.lang.String, arg1: int)
                   public apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
               }
               abstract class Infer$IncorporationStep extends java.lang.Enum<com.sun.tools.javac.comp.Infer$IncorporationStep> {
                   public static CHECK_BOUNDS: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static EQ_CHECK_LEGACY: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static EQ_CHECK: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static CROSS_UPPER_LOWER: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static CROSS_UPPER_EQ: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static CROSS_EQ_LOWER: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static CROSS_UPPER_UPPER: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static CROSS_EQ_EQ: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static PROP_UPPER: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static PROP_LOWER: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static PROP_EQ: com.sun.tools.javac.comp.Infer$IncorporationStep
                   public static values(): com.sun.tools.javac.comp.Infer$IncorporationStep[]
                   valueOf<T>(...args: any[]): any
                   apply(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext, arg2: com.sun.tools.javac.util.Warner): void
                   accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
                   isSubtype(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.comp.Infer): boolean
                   isSameType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.comp.Infer): boolean
                   addBound(arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound, arg1: com.sun.tools.javac.code.Type$UndetVar, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.comp.Infer): void
                   opFor(arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound): com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   doIncorporationOp(arg0: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner, arg4: com.sun.tools.javac.comp.Infer): boolean
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.comp.Infer$1)
               }
               class Infer$IncorporationBinaryOpKind$1 extends com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   apply(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Types): boolean
               }
               class Infer$IncorporationBinaryOpKind$2 extends com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   apply(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Types): boolean
               }
               class Infer$IncorporationBinaryOpKind$3 extends com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   apply(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Types): boolean
               }
               class Infer$IncorporationBinaryOpKind$4 extends com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   apply(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Types): boolean
               }
               class Infer$IncorporationBinaryOpKind$5 extends com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   apply(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Types): boolean
               }
               abstract class Infer$IncorporationBinaryOpKind extends java.lang.Enum<com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind> {
                   public static IS_SUBTYPE: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   public static IS_SAME_TYPE: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   public static ADD_UPPER_BOUND: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   public static ADD_LOWER_BOUND: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   public static ADD_EQ_BOUND: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   public static values(): com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind[]
                   valueOf<T>(...args: any[]): any
                   apply(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.code.Types): boolean
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.comp.Infer$1)
               }
               class Infer$IncorporationBinaryOp {
                   opKind: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   op1: com.sun.tools.javac.code.Type
                   op2: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.Infer
                   constructor(arg0: com.sun.tools.javac.comp.Infer, arg1: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type)
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   apply(arg0: com.sun.tools.javac.util.Warner): boolean
               }
               class Infer$BoundFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Type> {
                   inferenceContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   public constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext)
                   accepts<T>(...args: any[]): any
               }
               class Infer$BoundErrorKind$1 extends com.sun.tools.javac.comp.Infer$BoundErrorKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
               }
               class Infer$BoundErrorKind$2 extends com.sun.tools.javac.comp.Infer$BoundErrorKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
               }
               class Infer$BoundErrorKind$3 extends com.sun.tools.javac.comp.Infer$BoundErrorKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
               }
               class Infer$BoundErrorKind$4 extends com.sun.tools.javac.comp.Infer$BoundErrorKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
               }
               class Infer$BoundErrorKind$5 extends com.sun.tools.javac.comp.Infer$BoundErrorKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
               }
               class Infer$BoundErrorKind$6 extends com.sun.tools.javac.comp.Infer$BoundErrorKind {
                   constructor(arg0: java.lang.String, arg1: int)
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
               }
               abstract class Infer$BoundErrorKind extends java.lang.Enum<com.sun.tools.javac.comp.Infer$BoundErrorKind> {
                   public static BAD_UPPER: com.sun.tools.javac.comp.Infer$BoundErrorKind
                   public static BAD_EQ_UPPER: com.sun.tools.javac.comp.Infer$BoundErrorKind
                   public static BAD_EQ_LOWER: com.sun.tools.javac.comp.Infer$BoundErrorKind
                   public static UPPER: com.sun.tools.javac.comp.Infer$BoundErrorKind
                   public static LOWER: com.sun.tools.javac.comp.Infer$BoundErrorKind
                   public static EQ: com.sun.tools.javac.comp.Infer$BoundErrorKind
                   public static values(): com.sun.tools.javac.comp.Infer$BoundErrorKind[]
                   valueOf<T>(...args: any[]): any
                   setMessage(arg0: com.sun.tools.javac.comp.Infer$InferenceException, arg1: com.sun.tools.javac.code.Type$UndetVar): com.sun.tools.javac.comp.Resolve$InapplicableMethodException
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.comp.Infer$1)
               }
               class Infer$GraphStrategy$NodeNotFoundException extends java.lang.RuntimeException {
                   graph: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph
                   public constructor(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph)
               }
               interface Infer$GraphStrategy {
                   public pickNode(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph): com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node
                   public done(): boolean
               }
               abstract class Infer$LeafSolver implements com.sun.tools.javac.comp.Infer$GraphStrategy {
                   this$0: com.sun.tools.javac.comp.Infer
                   constructor(arg0: com.sun.tools.javac.comp.Infer)
                   public pickNode(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph): com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node
                   isSubtype(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner, arg3: com.sun.tools.javac.comp.Infer): boolean
                   isSameType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.comp.Infer): boolean
                   addBound(arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound, arg1: com.sun.tools.javac.code.Type$UndetVar, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.comp.Infer): void
                   opFor(arg0: com.sun.tools.javac.code.Type$UndetVar$InferenceBound): com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind
                   doIncorporationOp(arg0: com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.util.Warner, arg4: com.sun.tools.javac.comp.Infer): boolean
               }
               abstract class Infer$BestLeafSolver extends com.sun.tools.javac.comp.Infer$LeafSolver {
                   varsToSolve: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   treeCache: java.util.Map<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node, com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>, java.lang.Integer>>
                   noPath: com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>, java.lang.Integer>
                   this$0: com.sun.tools.javac.comp.Infer
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>)
                   computeTreeToLeafs(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node): com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>, java.lang.Integer>
                   public pickNode(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph): com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node
               }
               class Infer$InferenceStep$1 extends com.sun.tools.javac.comp.Infer$InferenceStep {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound)
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
               }
               class Infer$InferenceStep$2 extends com.sun.tools.javac.comp.Infer$InferenceStep {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound)
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
               }
               class Infer$InferenceStep$3 extends com.sun.tools.javac.comp.Infer$InferenceStep {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound)
                   public accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
               }
               class Infer$InferenceStep$4 extends com.sun.tools.javac.comp.Infer$InferenceStep {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound)
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
               }
               class Infer$InferenceStep$5 extends com.sun.tools.javac.comp.Infer$InferenceStep {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound)
                   public accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
               }
               class Infer$InferenceStep$6 extends com.sun.tools.javac.comp.Infer$InferenceStep {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound)
                   public accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
               }
               abstract class Infer$InferenceStep extends java.lang.Enum<com.sun.tools.javac.comp.Infer$InferenceStep> {
                   public static EQ: com.sun.tools.javac.comp.Infer$InferenceStep
                   public static LOWER: com.sun.tools.javac.comp.Infer$InferenceStep
                   public static THROWS: com.sun.tools.javac.comp.Infer$InferenceStep
                   public static UPPER: com.sun.tools.javac.comp.Infer$InferenceStep
                   public static UPPER_LEGACY: com.sun.tools.javac.comp.Infer$InferenceStep
                   public static CAPTURED: com.sun.tools.javac.comp.Infer$InferenceStep
                   ib: com.sun.tools.javac.code.Type$UndetVar$InferenceBound
                   public static values(): com.sun.tools.javac.comp.Infer$InferenceStep[]
                   valueOf<T>(...args: any[]): any
                   solve(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
                   public accepts(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): boolean
                   filterBounds(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.code.Type$UndetVar$InferenceBound, arg3: com.sun.tools.javac.comp.Infer$1)
               }
               class Infer$LegacyInferenceSteps extends java.lang.Enum<com.sun.tools.javac.comp.Infer$LegacyInferenceSteps> {
                   public static EQ_LOWER: com.sun.tools.javac.comp.Infer$LegacyInferenceSteps
                   public static EQ_UPPER: com.sun.tools.javac.comp.Infer$LegacyInferenceSteps
                   steps: java.util.EnumSet<com.sun.tools.javac.comp.Infer$InferenceStep>
                   public static values(): com.sun.tools.javac.comp.Infer$LegacyInferenceSteps[]
                   valueOf<T>(...args: any[]): any
               }
               class Infer$GraphInferenceSteps extends java.lang.Enum<com.sun.tools.javac.comp.Infer$GraphInferenceSteps> {
                   public static EQ: com.sun.tools.javac.comp.Infer$GraphInferenceSteps
                   public static EQ_LOWER: com.sun.tools.javac.comp.Infer$GraphInferenceSteps
                   public static EQ_LOWER_THROWS_UPPER_CAPTURED: com.sun.tools.javac.comp.Infer$GraphInferenceSteps
                   steps: java.util.EnumSet<com.sun.tools.javac.comp.Infer$InferenceStep>
                   public static values(): com.sun.tools.javac.comp.Infer$GraphInferenceSteps[]
                   valueOf<T>(...args: any[]): any
               }
               class Infer$DependencyKind extends java.lang.Enum<com.sun.tools.javac.comp.Infer$DependencyKind> implements com.sun.tools.javac.util.GraphUtils$DependencyKind {
                   public static BOUND: com.sun.tools.javac.comp.Infer$DependencyKind
                   public static STUCK: com.sun.tools.javac.comp.Infer$DependencyKind
                   dotSyle: java.lang.String
                   public static values(): com.sun.tools.javac.comp.Infer$DependencyKind[]
                   valueOf<T>(...args: any[]): any
                   public getDotStyle(): java.lang.String
               }
               class Infer$GraphSolver$InferenceGraph$Node extends com.sun.tools.javac.util.GraphUtils$TarjanNode<com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>> {
                   deps: java.util.EnumMap<com.sun.tools.javac.comp.Infer$DependencyKind, java.util.Set<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>>
                   this$2: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph
                   constructor(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph, arg1: com.sun.tools.javac.code.Type)
                   public getSupportedDependencyKinds(): com.sun.tools.javac.util.GraphUtils$DependencyKind[]
                   public getDependencyName(arg0: com.sun.tools.javac.util.GraphUtils$Node<com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>>, arg1: com.sun.tools.javac.util.GraphUtils$DependencyKind): java.lang.String
                   public getAllDependencies(): java.lang.Iterable<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>
                   public getDependenciesByKind(arg0: com.sun.tools.javac.util.GraphUtils$DependencyKind): java.lang.Iterable<com.sun.tools.javac.util.GraphUtils$TarjanNode<com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>>>
                   protected getDependencies(...arg0: com.sun.tools.javac.comp.Infer$DependencyKind[]): java.util.Set<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>
                   protected addDependency(arg0: com.sun.tools.javac.comp.Infer$DependencyKind, arg1: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node): void
                   protected addDependencies(arg0: com.sun.tools.javac.comp.Infer$DependencyKind, arg1: java.util.Set<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>): void
                   protected removeDependency(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node): java.util.Set<com.sun.tools.javac.comp.Infer$DependencyKind>
                   protected closure(...arg0: com.sun.tools.javac.comp.Infer$DependencyKind[]): java.util.Set<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>
                   protected isLeaf(): boolean
                   protected mergeWith(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>): void
                   static access$800(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node, arg1: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node, arg2: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node): void
               }
               class Infer$GraphSolver$InferenceGraph {
                   nodes: java.util.ArrayList<com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node>
                   this$1: com.sun.tools.javac.comp.Infer$GraphSolver
                   constructor(arg0: java.util.Map<com.sun.tools.javac.code.Type, java.util.Set<com.sun.tools.javac.code.Type>>)
                   public findNode(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node
                   public deleteNode(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node): void
                   notifyUpdate(arg0: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node, arg1: com.sun.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node): void
                   initNodes(arg0: java.util.Map<com.sun.tools.javac.code.Type, java.util.Set<com.sun.tools.javac.code.Type>>): void
                   toDot(): java.lang.String
               }
               class Infer$GraphSolver {
                   inferenceContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   stuckDeps: java.util.Map<com.sun.tools.javac.code.Type, java.util.Set<com.sun.tools.javac.code.Type>>
                   warn: com.sun.tools.javac.util.Warner
                   this$0: com.sun.tools.javac.comp.Infer
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext, arg1: java.util.Map<com.sun.tools.javac.code.Type, java.util.Set<com.sun.tools.javac.code.Type>>, arg2: com.sun.tools.javac.util.Warner)
                   solve(arg0: com.sun.tools.javac.comp.Infer$GraphStrategy): void
               }
               interface Infer$FreeTypeListener {
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Infer$InferenceContext$1 extends com.sun.tools.javac.code.Type$Mapping {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext, arg1: java.lang.String)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Infer$InferenceContext$2 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Type$UndetVar> {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext)
                   accepts<T>(...args: any[]): any
               }
               class Infer$InferenceContext$3 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Type$UndetVar> {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext)
                   accepts<T>(...args: any[]): any
               }
               class Infer$InferenceContext$4 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Type$UndetVar> {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext)
                   accepts<T>(...args: any[]): any
               }
               class Infer$InferenceContext$5 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Infer$InferenceContext$6 extends com.sun.tools.javac.comp.Infer$LeafSolver {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext)
                   public done(): boolean
               }
               class Infer$InferenceContext$7 extends com.sun.tools.javac.comp.Infer$BestLeafSolver {
                   val$vars: com.sun.tools.javac.util.List
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.util.List)
                   public done(): boolean
               }
               class Infer$InferenceContext$8 extends com.sun.tools.javac.comp.Infer$BestLeafSolver {
                   this$1: com.sun.tools.javac.comp.Infer$InferenceContext
                   constructor(arg0: com.sun.tools.javac.comp.Infer$InferenceContext, arg1: com.sun.tools.javac.util.List)
                   public done(): boolean
               }
               class Infer$InferenceContext {
                   undetvars: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   inferencevars: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   freeTypeListeners: java.util.Map<com.sun.tools.javac.comp.Infer$FreeTypeListener, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>>
                   freetypeListeners: com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Infer$FreeTypeListener>
                   fromTypeVarFun: com.sun.tools.javac.code.Type$Mapping
                   captureTypeCache: java.util.Map<com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type>
                   this$0: com.sun.tools.javac.comp.Infer
                   public constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>)
                   addVar(arg0: com.sun.tools.javac.code.Type$TypeVar): void
                   inferenceVars(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   restvars(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   instvars(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   boundedVars(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   free<T>(...args: any[]): any
                   freeVarsIn<T>(...args: any[]): any
                   asUndetVar(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   asUndetVars(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   instTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   asInstType(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   asInstTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   addFreeTypeListener(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.comp.Infer$FreeTypeListener): void
                   notifyChange<T>(...args: any[]): any
                   save(): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   rollback(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): void
                   dupTo(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
                   solve<T>(...args: any[]): any
                   public solveAny(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: java.util.Map<com.sun.tools.javac.code.Type, java.util.Set<com.sun.tools.javac.code.Type>>, arg2: com.sun.tools.javac.util.Warner): void
                   public solveLegacy(arg0: boolean, arg1: com.sun.tools.javac.util.Warner, arg2: java.util.EnumSet<com.sun.tools.javac.comp.Infer$InferenceStep>): void
                   toString<T>(...args: any[]): any
                   cachedCapture(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: boolean): com.sun.tools.javac.code.Type
                   static access$100(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.comp.Infer
                   static access$600(arg0: com.sun.tools.javac.comp.Infer$InferenceContext, arg1: com.sun.tools.javac.util.List, arg2: java.util.EnumSet): boolean
               }
               class Infer$1 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$Type$UndetVar$InferenceBound: int[]
               }
               class Infer {
                   protected static inferKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Infer>
                   rs: com.sun.tools.javac.comp.Resolve
                   chk: com.sun.tools.javac.comp.Check
                   syms: com.sun.tools.javac.code.Symtab
                   types: com.sun.tools.javac.code.Types
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   log: com.sun.tools.javac.util.Log
                   allowGraphInference: boolean
                   public static anyPoly: com.sun.tools.javac.code.Type
                   protected inferenceException: com.sun.tools.javac.comp.Infer$InferenceException
                   static MAX_INCORPORATION_STEPS: int
                   incorporationStepsLegacy: java.util.EnumSet<com.sun.tools.javac.comp.Infer$IncorporationStep>
                   incorporationStepsGraph: java.util.EnumSet<com.sun.tools.javac.comp.Infer$IncorporationStep>
                   incorporationCache: java.util.Map<com.sun.tools.javac.comp.Infer$IncorporationBinaryOp, java.lang.Boolean>
                   emptyContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Infer
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   instantiateMethod(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.code.Type$MethodType, arg3: com.sun.tools.javac.comp.Attr$ResultInfo, arg4: com.sun.tools.javac.code.Symbol$MethodSymbol, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: boolean, arg7: boolean, arg8: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg9: com.sun.tools.javac.util.Warner): com.sun.tools.javac.code.Type
                   generateReturnConstraints(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.code.Type$MethodType, arg3: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
                   instantiatePolymorphicSignatureInstance(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol, arg2: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type
                   public instantiateFunctionalInterface(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.comp.Check$CheckContext): com.sun.tools.javac.code.Type
                   checkWithinBounds(arg0: com.sun.tools.javac.comp.Infer$InferenceContext, arg1: com.sun.tools.javac.util.Warner): void
                   checkCompatibleUpperBounds(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$InferenceContext): void
                   reportBoundError(arg0: com.sun.tools.javac.code.Type$UndetVar, arg1: com.sun.tools.javac.comp.Infer$BoundErrorKind): void
                   static access$200(arg0: com.sun.tools.javac.comp.Infer, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Pair
                   static access$700(arg0: com.sun.tools.javac.comp.Infer, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class DeferredAttr$1 extends com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext {
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.DeferredAttr$AttrMode, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase, arg4: com.sun.tools.javac.comp.Infer$InferenceContext, arg5: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg6: com.sun.tools.javac.util.Warner)
                   addDeferredAttrNode(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy): void
                   complete(): void
                   toString<T>(...args: any[]): any
               }
               class DeferredAttr$DeferredType$SpeculativeCache$Entry {
                   speculativeTree: com.sun.tools.javac.tree.JCTree
                   resultInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   this$2: com.sun.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache
                   public constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.comp.Attr$ResultInfo)
                   matches(arg0: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): boolean
               }
               class DeferredAttr$DeferredType$SpeculativeCache {
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredType
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType)
                   get(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache$Entry
                   put(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Attr$ResultInfo): void
               }
               class DeferredAttr$DeferredType extends com.sun.tools.javac.code.Type {
                   public tree: com.sun.tools.javac.tree.JCTree$JCExpression
                   env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   mode: com.sun.tools.javac.comp.DeferredAttr$AttrMode
                   speculativeCache: com.sun.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>)
                   public getTag(): com.sun.tools.javac.code.TypeTag
                   toString<T>(...args: any[]): any
                   speculativeType(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Type
                   check(arg0: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   static access$100(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy, arg3: com.sun.tools.javac.comp.DeferredAttr$DeferredTypeCompleter): com.sun.tools.javac.code.Type
               }
               interface DeferredAttr$DeferredTypeCompleter {
                   public complete(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext): com.sun.tools.javac.code.Type
               }
               class DeferredAttr$2 implements com.sun.tools.javac.comp.DeferredAttr$DeferredTypeCompleter {
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr)
                   public complete(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext): com.sun.tools.javac.code.Type
               }
               class DeferredAttr$3 implements com.sun.tools.javac.comp.DeferredAttr$DeferredTypeCompleter {
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr)
                   public complete(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext): com.sun.tools.javac.code.Type
               }
               interface DeferredAttr$DeferredStuckPolicy {
                   public isStuck(): boolean
                   public stuckVars(): java.util.Set<com.sun.tools.javac.code.Type>
                   public depVars(): java.util.Set<com.sun.tools.javac.code.Type>
               }
               class DeferredAttr$4 implements com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy {
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr)
                   public isStuck(): boolean
                   public stuckVars(): java.util.Set<com.sun.tools.javac.code.Type>
                   public depVars(): java.util.Set<com.sun.tools.javac.code.Type>
               }
               class DeferredAttr$AttrMode extends java.lang.Enum<com.sun.tools.javac.comp.DeferredAttr$AttrMode> {
                   public static SPECULATIVE: com.sun.tools.javac.comp.DeferredAttr$AttrMode
                   public static CHECK: com.sun.tools.javac.comp.DeferredAttr$AttrMode
                   public static values(): com.sun.tools.javac.comp.DeferredAttr$AttrMode[]
                   valueOf<T>(...args: any[]): any
               }
               class DeferredAttr$5$1PosScanner extends com.sun.tools.javac.tree.TreeScanner {
                   found: boolean
                   val$d: com.sun.tools.javac.util.JCDiagnostic
                   this$1: com.sun.tools.javac.comp.DeferredAttr$5
                   constructor()
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class DeferredAttr$5 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.util.JCDiagnostic> {
                   val$newTree: com.sun.tools.javac.tree.JCTree
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.tree.JCTree)
                   accepts<T>(...args: any[]): any
               }
               class DeferredAttr$UnenterScanner extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr)
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
               }
               class DeferredAttr$DeferredAttrContext {
                   mode: com.sun.tools.javac.comp.DeferredAttr$AttrMode
                   msym: com.sun.tools.javac.code.Symbol
                   phase: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   inferenceContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   parent: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   warn: com.sun.tools.javac.util.Warner
                   deferredAttrNodes: java.util.ArrayList<com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode>
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.DeferredAttr$AttrMode, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase, arg4: com.sun.tools.javac.comp.Infer$InferenceContext, arg5: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, arg6: com.sun.tools.javac.util.Warner)
                   addDeferredAttrNode(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy): void
                   complete(): void
                   static access$000(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext): boolean
               }
               class DeferredAttr$DeferredAttrNode$1 extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   val$deferredAttrContext: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode, arg1: com.sun.tools.javac.comp.Check$CheckContext, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext)
                   public inferenceContext(): com.sun.tools.javac.comp.Infer$InferenceContext
                   public deferredAttrContext(): com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
               }
               class DeferredAttr$DeferredAttrNode$StructuralStuckChecker extends com.sun.tools.javac.tree.TreeScanner implements com.sun.tools.javac.comp.DeferredAttr$DeferredTypeCompleter {
                   resultInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   inferenceContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode)
                   public complete(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext): com.sun.tools.javac.code.Type
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   canLambdaBodyCompleteNormally(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): boolean
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
               }
               class DeferredAttr$DeferredAttrNode$LambdaBodyStructChecker extends com.sun.tools.javac.tree.TreeScanner {
                   isVoidCompatible: boolean
                   isPotentiallyValueCompatible: boolean
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrNode)
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
               }
               class DeferredAttr$DeferredAttrNode {
                   dt: com.sun.tools.javac.comp.DeferredAttr$DeferredType
                   resultInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   deferredStuckPolicy: com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredType, arg2: com.sun.tools.javac.comp.Attr$ResultInfo, arg3: com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy)
                   process(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext): boolean
               }
               class DeferredAttr$DeferredTypeMap extends com.sun.tools.javac.code.Type$Mapping {
                   deferredAttrContext: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   protected constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.DeferredAttr$AttrMode, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   protected typeOf(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType): com.sun.tools.javac.code.Type
               }
               class DeferredAttr$RecoveryDeferredTypeMap$1 extends com.sun.tools.javac.comp.Attr$RecoveryInfo {
                   this$1: com.sun.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap, arg1: com.sun.tools.javac.comp.Attr, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext)
                   protected check(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class DeferredAttr$RecoveryDeferredTypeMap extends com.sun.tools.javac.comp.DeferredAttr$DeferredTypeMap {
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   public constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.DeferredAttr$AttrMode, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase)
                   protected typeOf(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredType): com.sun.tools.javac.code.Type
                   public apply(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class DeferredAttr$FilterScanner$1 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.tree.JCTree> {
                   val$validTags: java.util.Set
                   this$0: com.sun.tools.javac.comp.DeferredAttr$FilterScanner
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$FilterScanner, arg1: java.util.Set)
                   accepts<T>(...args: any[]): any
               }
               abstract class DeferredAttr$FilterScanner extends com.sun.tools.javac.tree.TreeScanner {
                   treeFilter: com.sun.tools.javac.util.Filter<com.sun.tools.javac.tree.JCTree>
                   constructor(arg0: java.util.Set<com.sun.tools.javac.tree.JCTree$Tag>)
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   skip(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class DeferredAttr$PolyScanner extends com.sun.tools.javac.comp.DeferredAttr$FilterScanner {
                   constructor()
               }
               class DeferredAttr$LambdaReturnScanner extends com.sun.tools.javac.comp.DeferredAttr$FilterScanner {
                   constructor()
               }
               class DeferredAttr$CheckStuckPolicy$1 extends com.sun.tools.javac.comp.DeferredAttr$LambdaReturnScanner {
                   val$pt: com.sun.tools.javac.code.Type
                   this$1: com.sun.tools.javac.comp.DeferredAttr$CheckStuckPolicy
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$CheckStuckPolicy, arg1: com.sun.tools.javac.code.Type)
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
               }
               class DeferredAttr$CheckStuckPolicy extends com.sun.tools.javac.comp.DeferredAttr$PolyScanner implements com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy , com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   pt: com.sun.tools.javac.code.Type
                   inferenceContext: com.sun.tools.javac.comp.Infer$InferenceContext
                   stuckVars<T>(...args: any[]): any
                   depVars<T>(...args: any[]): any
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   public isStuck(): boolean
                   public constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredType)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   scanLambdaBody(arg0: com.sun.tools.javac.tree.JCTree$JCLambda, arg1: com.sun.tools.javac.code.Type): void
               }
               class DeferredAttr$OverloadStuckPolicy extends com.sun.tools.javac.comp.DeferredAttr$CheckStuckPolicy implements com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy {
                   stuck: boolean
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   public isStuck(): boolean
                   public constructor(arg0: com.sun.tools.javac.comp.DeferredAttr, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredType)
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
               }
               class DeferredAttr$ArgumentExpressionKind extends java.lang.Enum<com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind> {
                   public static POLY: com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind
                   public static NO_POLY: com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind
                   public static PRIMITIVE: com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind
                   public static values(): com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind[]
                   valueOf<T>(...args: any[]): any
                   public isPoly(): boolean
                   public isPrimitive(): boolean
                   static standaloneKind(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind
                   static methodKind(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Types): com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind
               }
               class DeferredAttr$DeferredChecker$1 implements com.sun.tools.javac.comp.DeferredAttr$MethodAnalyzer<com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind> {
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredChecker
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredChecker)
                   process<T>(...args: any[]): any
                   reduce<T>(...args: any[]): any
                   shouldStop<T>(...args: any[]): any
               }
               class DeferredAttr$DeferredChecker$2 extends com.sun.tools.javac.comp.Resolve$LookupHelper {
                   val$rec: com.sun.tools.javac.tree.JCTree$JCExpression
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredChecker
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredChecker, arg1: com.sun.tools.javac.comp.Resolve, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.List, arg5: com.sun.tools.javac.util.List, arg6: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase, arg7: com.sun.tools.javac.tree.JCTree$JCExpression)
                   lookup(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase): com.sun.tools.javac.code.Symbol
                   access(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
               }
               class DeferredAttr$DeferredChecker$3 implements com.sun.tools.javac.comp.DeferredAttr$MethodAnalyzer<com.sun.tools.javac.code.Symbol> {
                   this$1: com.sun.tools.javac.comp.DeferredAttr$DeferredChecker
                   constructor(arg0: com.sun.tools.javac.comp.DeferredAttr$DeferredChecker)
                   process<T>(...args: any[]): any
                   reduce<T>(...args: any[]): any
                   shouldStop<T>(...args: any[]): any
               }
               class DeferredAttr$DeferredChecker extends com.sun.tools.javac.comp.DeferredAttr$FilterScanner {
                   env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   result: com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind
                   argumentKindAnalyzer: com.sun.tools.javac.comp.DeferredAttr$MethodAnalyzer<com.sun.tools.javac.comp.DeferredAttr$ArgumentExpressionKind>
                   returnSymbolAnalyzer: com.sun.tools.javac.comp.DeferredAttr$MethodAnalyzer<com.sun.tools.javac.code.Symbol>
                   this$0: com.sun.tools.javac.comp.DeferredAttr
                   public constructor(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>)
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   skip(arg0: com.sun.tools.javac.tree.JCTree): void
                   analyzeCandidateMethods<E>(arg0: com.sun.tools.javac.code.Symbol, arg1: E, arg2: com.sun.tools.javac.comp.DeferredAttr$MethodAnalyzer<E>): E
               }
               interface DeferredAttr$MethodAnalyzer<E> {
                   public process(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): E
                   public reduce(arg0: E, arg1: E): E
                   public shouldStop(arg0: E): boolean
               }
               class DeferredAttr$6 {
                   static $SwitchMap$com$sun$tools$javac$comp$DeferredAttr$AttrMode: int[]
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$tools$javac$comp$DeferredAttr$ArgumentExpressionKind: int[]
               }
               class DeferredAttr extends com.sun.tools.javac.tree.JCTree$Visitor {
                   protected static deferredAttrKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.DeferredAttr>
                   attr: com.sun.tools.javac.comp.Attr
                   chk: com.sun.tools.javac.comp.Check
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   enter: com.sun.tools.javac.comp.Enter
                   infer: com.sun.tools.javac.comp.Infer
                   rs: com.sun.tools.javac.comp.Resolve
                   log: com.sun.tools.javac.util.Log
                   syms: com.sun.tools.javac.code.Symtab
                   make: com.sun.tools.javac.tree.TreeMaker
                   types: com.sun.tools.javac.code.Types
                   flow: com.sun.tools.javac.comp.Flow
                   names: com.sun.tools.javac.util.Names
                   typeEnvs: com.sun.tools.javac.comp.TypeEnvs
                   stuckTree: com.sun.tools.javac.tree.JCTree
                   basicCompleter: com.sun.tools.javac.comp.DeferredAttr$DeferredTypeCompleter
                   dummyCompleter: com.sun.tools.javac.comp.DeferredAttr$DeferredTypeCompleter
                   dummyStuckPolicy: com.sun.tools.javac.comp.DeferredAttr$DeferredStuckPolicy
                   protected unenterScanner: com.sun.tools.javac.comp.DeferredAttr$UnenterScanner
                   emptyDeferredAttrContext: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.DeferredAttr
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   attribSpeculative(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.tree.JCTree
                   isDeferred(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): boolean
                   static access$200(arg0: com.sun.tools.javac.comp.DeferredAttr): java.util.EnumSet
               }
               interface Check$CheckContext {
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
                   public checkWarner(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Warner
                   public inferenceContext(): com.sun.tools.javac.comp.Infer$InferenceContext
                   public deferredAttrContext(): com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
               }
               class Check$NestedCheckContext implements com.sun.tools.javac.comp.Check$CheckContext {
                   enclosingContext: com.sun.tools.javac.comp.Check$CheckContext
                   constructor(arg0: com.sun.tools.javac.comp.Check$CheckContext)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
                   public checkWarner(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Warner
                   public inferenceContext(): com.sun.tools.javac.comp.Infer$InferenceContext
                   public deferredAttrContext(): com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
               }
               class Check$1 implements com.sun.tools.javac.comp.Check$CheckContext {
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public checkWarner(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Warner
                   public inferenceContext(): com.sun.tools.javac.comp.Infer$InferenceContext
                   public deferredAttrContext(): com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   toString<T>(...args: any[]): any
               }
               class Check$2 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   val$found: com.sun.tools.javac.code.Type
                   val$req: com.sun.tools.javac.code.Type
                   val$checkContext: com.sun.tools.javac.comp.Check$CheckContext
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.comp.Check$CheckContext)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Check$3 implements com.sun.tools.javac.code.DeferredLintHandler$LintLogger {
                   val$tree: com.sun.tools.javac.tree.JCTree$JCTypeCast
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.tree.JCTree$JCTypeCast)
                   public report(): void
               }
               class Check$4 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$mtype: com.sun.tools.javac.code.Type
                   val$sym: com.sun.tools.javac.code.Symbol
                   val$env: com.sun.tools.javac.comp.Env
                   val$argtrees: com.sun.tools.javac.util.List
                   val$argtypes: com.sun.tools.javac.util.List
                   val$useVarargs: boolean
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env, arg4: com.sun.tools.javac.util.List, arg5: com.sun.tools.javac.util.List, arg6: boolean)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Check$5 extends com.sun.tools.javac.code.Types$UnaryVisitor<java.lang.Boolean> {
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check)
                   visitType<T>(...args: any[]): any
                   visitTypeVar<T>(...args: any[]): any
                   visitCapturedType<T>(...args: any[]): any
                   visitWildcardType<T>(...args: any[]): any
               }
               class Check$1SpecialTreeVisitor extends com.sun.tools.javac.tree.JCTree$Visitor {
                   specialized: boolean
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check)
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
               }
               class Check$Validator extends com.sun.tools.javac.tree.JCTree$Visitor {
                   checkRaw: boolean
                   isOuter: boolean
                   env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>)
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitSelectInternal(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public validateTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: boolean, arg2: boolean): void
                   public validateTrees(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, arg1: boolean, arg2: boolean): void
               }
               class Check$6 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check)
                   accepts<T>(...args: any[]): any
               }
               class Check$CycleChecker extends com.sun.tools.javac.tree.TreeScanner {
                   seenClasses: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>
                   errorFound: boolean
                   partialCheck: boolean
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check)
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   checkClass(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): void
               }
               class Check$ClashFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   site: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.code.Type)
                   shouldSkip(arg0: com.sun.tools.javac.code.Symbol): boolean
                   accepts<T>(...args: any[]): any
               }
               class Check$DefaultMethodClashFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   site: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.code.Type)
                   accepts<T>(...args: any[]): any
               }
               class Check$1AnnotationValidator extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check)
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
               }
               class Check$7 implements com.sun.tools.javac.code.DeferredLintHandler$LintLogger {
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   val$s: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol)
                   public report(): void
               }
               class Check$8 implements com.sun.tools.javac.code.DeferredLintHandler$LintLogger {
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   val$s: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.comp.Check
                   constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol)
                   public report(): void
               }
               class Check$ConversionWarner extends com.sun.tools.javac.util.Warner {
                   uncheckedKey: java.lang.String
                   found: com.sun.tools.javac.code.Type
                   expected: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.Check
                   public constructor(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: java.lang.String, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Type)
                   public warn(arg0: com.sun.tools.javac.code.Lint$LintCategory): void
               }
               class Check$9 {
                   static $SwitchMap$com$sun$tools$javac$code$Attribute$RetentionPolicy: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$Lint$LintCategory: int[]
               }
               class Check {
                   protected static checkKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Check>
                   allowGenerics: boolean
                   allowVarargs: boolean
                   allowAnnotations: boolean
                   allowCovariantReturns: boolean
                   allowSimplifiedVarargs: boolean
                   allowDefaultMethods: boolean
                   allowStrictMethodClashCheck: boolean
                   complexInference: boolean
                   syntheticNameChar: char
                   public compiled: java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$ClassSymbol>
                   basicHandler: com.sun.tools.javac.comp.Check$CheckContext
                   isTypeArgErroneous<T>(...args: any[]): any
                   overrideWarner: com.sun.tools.javac.util.Warner
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Check
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   setLint(arg0: com.sun.tools.javac.code.Lint): com.sun.tools.javac.code.Lint
                   setMethod(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): com.sun.tools.javac.code.Symbol$MethodSymbol
                   warnDeprecated(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   public warnUnchecked(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   warnUnsafeVararg(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   public warnSunApi(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   public warnStatic(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   public reportDeferredDiagnostics(): void
                   public completionError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$CompletionFailure): com.sun.tools.javac.code.Type
                   typeTagError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.tools.javac.code.Type
                   earlyRefError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   duplicateError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   varargsDuplicateError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol): void
                   checkTransparentVar(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$VarSymbol, arg2: com.sun.tools.javac.code.Scope): void
                   checkTransparentClass(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: com.sun.tools.javac.code.Scope): void
                   checkUniqueClassName(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Scope): boolean
                   localClassName(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.util.Name
                   checkType<T>(...args: any[]): any
                   checkCastable<T>(...args: any[]): any
                   public checkRedundantCast(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   checkNonVoid(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkClassOrArrayType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkClassType<T>(...args: any[]): any
                   checkConstructorRefType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkRefType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkRefTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   checkNullOrRefType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkDisjoint(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: long, arg2: long, arg3: long): boolean
                   checkDiamond(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkVarargsMethodDecl(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   checkMethod(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: boolean, arg6: com.sun.tools.javac.comp.Infer$InferenceContext): com.sun.tools.javac.code.Type
                   public checkValidGenericType(arg0: com.sun.tools.javac.code.Type): boolean
                   checkFlags(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: long, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.tree.JCTree): long
                   validate<T>(...args: any[]): any
                   checkRaw(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   subset(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   intersects(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   incl(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   excl(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   union(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   diff(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   public intersect(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   isUnchecked<T>(...args: any[]): any
                   isHandled(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): boolean
                   unhandled(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   static protection(arg0: long): int
                   cannotOverride(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol): java.lang.Object
                   uncheckedOverrides(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol): java.lang.Object
                   varargsOverrides(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol): java.lang.Object
                   checkOverride<T>(...args: any[]): any
                   public checkCompatibleConcretes(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): void
                   checkCompatibleAbstracts<T>(...args: any[]): any
                   checkCommonOverriderIn(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Type): boolean
                   public checkClassOverrideEqualsAndHashIfNeeded(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   checkAllDefined(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   checkNonCyclicDecl(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   checkNonCyclic<T>(...args: any[]): any
                   checkImplementations<T>(...args: any[]): any
                   checkCompatibleSupertypes(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): void
                   checkConflicts(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol): void
                   checkOverrideClashes(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   checkHideClashes(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   checkDefaultMethodClashes(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): void
                   checkPotentiallyAmbiguousOverloads(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol, arg3: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   checkElemAccessFromSerializableLambda(arg0: com.sun.tools.javac.tree.JCTree): void
                   checkClassBounds<T>(...args: any[]): any
                   checkNotRepeated(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: java.util.Set<com.sun.tools.javac.code.Type>): void
                   validateAnnotationTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   validateAnnotationType<T>(...args: any[]): any
                   validateAnnotationMethod(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   public validateAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.code.Symbol): void
                   public validateTypeAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: boolean): void
                   public validateTypeAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation, arg1: boolean): void
                   public validateRepeatable(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.code.Attribute$Compound, arg2: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): void
                   isOverrider(arg0: com.sun.tools.javac.code.Symbol): boolean
                   protected isTypeAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation, arg1: boolean): boolean
                   annotationApplicable(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation, arg1: com.sun.tools.javac.code.Symbol): boolean
                   getAttributeTargetAttribute(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Attribute$Array
                   public validateAnnotationDeferErrors(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): boolean
                   checkDeprecatedAnnotation(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   checkDeprecated(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol): void
                   checkSunAPI(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   checkProfile(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   checkNonCyclicElements(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   checkNonCyclicElementsInternal(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): void
                   checkAnnotationResType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): void
                   checkCyclicConstructors(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   checkOperator(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$OperatorSymbol, arg2: com.sun.tools.javac.tree.JCTree$Tag, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Type): int
                   checkDivZero(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Type): void
                   checkEmptyIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   checkUnique(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Scope): boolean
                   duplicateErasureError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol): void
                   checkUniqueImport(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Scope): boolean
                   checkUniqueStaticImport(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Scope): boolean
                   public checkCanonical(arg0: com.sun.tools.javac.tree.JCTree): void
                   checkForBadAuxiliaryClassAccess(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   public castWarner(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Warner
                   public convertWarner(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Warner
                   public checkFunctionalInterface(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   static access$000(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.util.Log
                   static access$100(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.code.Types
                   static access$200(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.comp.Infer
                   static access$300(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.comp.DeferredAttr
                   static access$400(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.code.Lint
                   static access$500(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   static access$600(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.util.Names
                   static access$700(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.comp.Enter
                   static access$800(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   static access$900(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.tree.JCTree$JCAnnotation): boolean
                   static access$1000(arg0: com.sun.tools.javac.comp.Check): boolean
                   static access$1100(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.util.JCDiagnostic$Factory
                   static access$1200(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.code.Symbol$MethodSymbol
                   static access$1300(arg0: com.sun.tools.javac.comp.Check): com.sun.tools.javac.code.Symtab
                   static access$1400(arg0: com.sun.tools.javac.comp.Check, arg1: com.sun.tools.javac.code.Symbol): boolean
               }
               class Attr$1 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$resultInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   val$tree: com.sun.tools.javac.tree.JCTree
                   val$found: com.sun.tools.javac.code.Type
                   val$ownkind: int
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Attr$ResultInfo, arg2: com.sun.tools.javac.tree.JCTree, arg3: com.sun.tools.javac.code.Type, arg4: int)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Attr$IdentAttributer extends com.sun.source.util.SimpleTreeVisitor<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> {
                   this$0: com.sun.tools.javac.comp.Attr
                   visitMemberSelect<T>(...args: any[]): any
                   visitIdentifier<T>(...args: any[]): any
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Attr$1)
               }
               class Attr$BreakAttr extends java.lang.RuntimeException {
                   static serialVersionUID: long
                   static access$100(arg0: com.sun.tools.javac.comp.Attr$BreakAttr): com.sun.tools.javac.comp.Env
                   constructor(arg0: com.sun.tools.javac.comp.Env, arg1: com.sun.tools.javac.comp.Attr$1)
               }
               class Attr$ResultInfo {
                   pkind: int
                   pt: com.sun.tools.javac.code.Type
                   checkContext: com.sun.tools.javac.comp.Check$CheckContext
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(...args: any[])
                   protected check(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   dup<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }
               class Attr$RecoveryInfo$1 extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   val$this$0: com.sun.tools.javac.comp.Attr
                   val$deferredAttrContext: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   constructor(arg0: com.sun.tools.javac.comp.Check$CheckContext, arg1: com.sun.tools.javac.comp.Attr, arg2: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext)
                   public deferredAttrContext(): com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Attr$RecoveryInfo extends com.sun.tools.javac.comp.Attr$ResultInfo {
                   this$0: com.sun.tools.javac.comp.Attr
                   public constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext)
               }
               class Attr$2 extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Check$CheckContext)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Attr$3 extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Check$CheckContext)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Attr$4 extends com.sun.tools.javac.tree.TreeTranslator {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr)
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
               }
               class Attr$5 extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   val$tree: com.sun.tools.javac.tree.JCTree$JCNewClass
                   val$csym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Check$CheckContext, arg2: com.sun.tools.javac.tree.JCTree$JCNewClass, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Attr$6 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$tree: com.sun.tools.javac.tree.JCTree$JCNewClass
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.tree.JCTree$JCNewClass)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Attr$7 extends com.sun.tools.javac.comp.Attr$PostAttrAnalyzer {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr)
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class Attr$8 extends com.sun.tools.javac.code.Types$MapVisitor<com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition> {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr)
                   visitClassType<T>(...args: any[]): any
                   public visitIntersectionClassType(arg0: com.sun.tools.javac.code.Type$IntersectionClassType, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): com.sun.tools.javac.code.Type
               }
               class Attr$9 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   val$env: com.sun.tools.javac.comp.Env
                   val$ts: com.sun.tools.javac.util.List
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.util.List)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Attr$FunctionalReturnContext extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Check$CheckContext)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
                   public report(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.JCDiagnostic): void
               }
               class Attr$ExpressionLambdaReturnContext extends com.sun.tools.javac.comp.Attr$FunctionalReturnContext {
                   expr: com.sun.tools.javac.tree.JCTree$JCExpression
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.comp.Check$CheckContext)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
               }
               class Attr$10 implements com.sun.tools.javac.comp.Infer$FreeTypeListener {
                   val$env: com.sun.tools.javac.comp.Env
                   val$fExpr: com.sun.tools.javac.tree.JCTree$JCFunctionalExpression
                   val$pt: com.sun.tools.javac.code.Type
                   val$descriptorType: com.sun.tools.javac.code.Type
                   val$primaryTarget: com.sun.tools.javac.code.Type
                   val$checkContext: com.sun.tools.javac.comp.Check$CheckContext
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.tree.JCTree$JCFunctionalExpression, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Type, arg5: com.sun.tools.javac.code.Type, arg6: com.sun.tools.javac.comp.Check$CheckContext)
                   public typesInferred(arg0: com.sun.tools.javac.comp.Infer$InferenceContext): void
               }
               class Attr$11 extends com.sun.tools.javac.comp.Check$NestedCheckContext {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Check$CheckContext)
                   public compatible(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Warner): boolean
               }
               class Attr$12 extends com.sun.tools.javac.comp.Resolve$InapplicableSymbolError {
                   val$sym: com.sun.tools.javac.code.Symbol
                   val$diag: com.sun.tools.javac.util.JCDiagnostic
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Resolve, arg2: com.sun.tools.javac.comp.Resolve$MethodResolutionContext, arg3: com.sun.tools.javac.code.Symbol, arg4: com.sun.tools.javac.util.JCDiagnostic)
                   protected errCandidate(): com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic>
               }
               class Attr$13 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$annotations: com.sun.tools.javac.util.List
                   val$tree: com.sun.tools.javac.tree.JCTree
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.tree.JCTree)
                   toString<T>(...args: any[]): any
                   public run(): void
               }
               class Attr$14 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   constructor()
                   accepts<T>(...args: any[]): any
               }
               class Attr$TypeAnnotationsValidator extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.Attr
                   public constructor(arg0: com.sun.tools.javac.comp.Attr, arg1: boolean)
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
               }
               class Attr$PostAttrAnalyzer extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.Attr
                   constructor(arg0: com.sun.tools.javac.comp.Attr)
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
               }
               class Attr$15 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class Attr extends com.sun.tools.javac.tree.JCTree$Visitor {
                   protected static attrKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Attr>
                   names: com.sun.tools.javac.util.Names
                   log: com.sun.tools.javac.util.Log
                   syms: com.sun.tools.javac.code.Symtab
                   rs: com.sun.tools.javac.comp.Resolve
                   infer: com.sun.tools.javac.comp.Infer
                   deferredAttr: com.sun.tools.javac.comp.DeferredAttr
                   chk: com.sun.tools.javac.comp.Check
                   flow: com.sun.tools.javac.comp.Flow
                   memberEnter: com.sun.tools.javac.comp.MemberEnter
                   make: com.sun.tools.javac.tree.TreeMaker
                   cfolder: com.sun.tools.javac.comp.ConstFold
                   enter: com.sun.tools.javac.comp.Enter
                   target: com.sun.tools.javac.jvm.Target
                   types: com.sun.tools.javac.code.Types
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   annotate: com.sun.tools.javac.comp.Annotate
                   typeAnnotations: com.sun.tools.javac.code.TypeAnnotations
                   deferredLintHandler: com.sun.tools.javac.code.DeferredLintHandler
                   typeEnvs: com.sun.tools.javac.comp.TypeEnvs
                   relax: boolean
                   allowPoly: boolean
                   allowTypeAnnos: boolean
                   allowGenerics: boolean
                   allowVarargs: boolean
                   allowEnums: boolean
                   allowBoxing: boolean
                   allowCovariantReturns: boolean
                   allowLambda: boolean
                   allowDefaultMethods: boolean
                   allowStaticInterfaceMethods: boolean
                   allowAnonOuterThis: boolean
                   findDiamonds: boolean
                   static allowDiamondFinder: boolean
                   useBeforeDeclarationWarning: boolean
                   identifyLambdaCandidate: boolean
                   allowStringsInSwitch: boolean
                   sourceName: java.lang.String
                   statInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   varInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   unknownAnyPolyInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   unknownExprInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   unknownTypeInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   unknownTypeExprInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   recoveryInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   resultInfo: com.sun.tools.javac.comp.Attr$ResultInfo
                   result: com.sun.tools.javac.code.Type
                   noCheckTree: com.sun.tools.javac.tree.JCTree
                   removeClassParams: com.sun.tools.javac.tree.TreeTranslator
                   static primitiveTags: com.sun.tools.javac.code.TypeTag[]
                   targetChecker: com.sun.tools.javac.code.Types$MapVisitor<com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition>
                   noteWarner: com.sun.tools.javac.util.Warner
                   public static anyNonAbstractOrDefaultMethod: com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Attr
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   check(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: int, arg3: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   isAssignableAsBlankFinal(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): boolean
                   checkAssignable(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$VarSymbol, arg2: com.sun.tools.javac.tree.JCTree, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   isStaticReference(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   static isType(arg0: com.sun.tools.javac.code.Symbol): boolean
                   thisSym(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Symbol
                   public attribIdent(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): com.sun.tools.javac.code.Symbol
                   public coerce(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   attribType<T>(...args: any[]): any
                   public attribImportQualifier(arg0: com.sun.tools.javac.tree.JCTree$JCImport, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Type
                   public attribExprToTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public attribStatToTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   pt(): com.sun.tools.javac.code.Type
                   pkind(): int
                   attribTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   copyEnv(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   copyScope(arg0: com.sun.tools.javac.code.Scope): com.sun.tools.javac.code.Scope
                   attribExpr<T>(...args: any[]): any
                   public attribStat(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Type
                   attribExprs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   attribStats<T extends com.sun.tools.javac.tree.JCTree>(arg0: com.sun.tools.javac.util.List<T>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   attribArgs(arg0: int, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg3: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>): int
                   attribAnyTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   attribTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   attribTypeVariables(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   attribAnnotationTypes(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   public attribLazyConstantValue(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg2: com.sun.tools.javac.code.Type): java.lang.Object
                   attribBase(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: boolean, arg3: boolean, arg4: boolean): com.sun.tools.javac.code.Type
                   checkBase(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg3: boolean, arg4: boolean, arg5: boolean): com.sun.tools.javac.code.Type
                   attribIdentAsEnumType(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCIdent): com.sun.tools.javac.code.Type
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   checkAutoCloseable(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Type): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   adjustMethodReturnType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   checkFirstConstructorStat(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): boolean
                   newMethodTemplate(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   findDiamond(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCNewClass, arg2: com.sun.tools.javac.code.Type): void
                   public makeNullCheck(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   preFlow(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public removeClinit(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.code.Symbol$MethodSymbol
                   public lambdaEnv(arg0: com.sun.tools.javac.tree.JCTree$JCLambda, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   memberReferenceQualifierResult(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): com.sun.tools.javac.comp.Attr$ResultInfo
                   checkReferenceCompatible(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type, arg3: com.sun.tools.javac.comp.Check$CheckContext, arg4: boolean): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   checkId(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg4: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   checkMethodId(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg4: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   checkSigPolyMethodId(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg4: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   checkMethodIdInternal(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg4: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   checkIdInternal(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg5: com.sun.tools.javac.comp.Attr$ResultInfo): com.sun.tools.javac.code.Type
                   enclosingInitEnv(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public checkMethod(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.comp.Attr$ResultInfo, arg3: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   litType(arg0: com.sun.tools.javac.code.TypeTag): com.sun.tools.javac.code.Type
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeUnion(arg0: com.sun.tools.javac.tree.JCTree$JCTypeUnion): void
                   public visitTypeIntersection(arg0: com.sun.tools.javac.tree.JCTree$JCTypeIntersection): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   checkIntersection(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.code.Type
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public annotateType(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public attrib(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   public attribTopLevel(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   attribClass<T>(...args: any[]): any
                   public visitImport(arg0: com.sun.tools.javac.tree.JCTree$JCImport): void
                   checkForSerial(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                   isSerializable(arg0: com.sun.tools.javac.code.Type): boolean
                   public validateTypeAnnotations(arg0: com.sun.tools.javac.tree.JCTree, arg1: boolean): void
                   public postAttr(arg0: com.sun.tools.javac.tree.JCTree): void
                   static access$300(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.comp.Infer$InferenceContext, arg4: com.sun.tools.javac.util.List): void
                   static access$400(arg0: com.sun.tools.javac.comp.Attr, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.tree.JCTree$JCFunctionalExpression, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Type, arg5: com.sun.tools.javac.code.Type, arg6: com.sun.tools.javac.comp.Check$CheckContext): void
                   static access$500(arg0: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
               }
               class ConstFold$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class ConstFold {
                   protected static constFoldKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.ConstFold>
                   static minusOne: java.lang.Integer
                   static zero: java.lang.Integer
                   static one: java.lang.Integer
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.ConstFold
                   fold(arg0: int, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): com.sun.tools.javac.code.Type
                   fold1(arg0: int, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   fold2(arg0: int, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
                   coerce(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Type
               }
               class Env$1 implements java.util.Iterator<com.sun.tools.javac.comp.Env<A>> {
                   next<T>(...args: any[]): any
                   this$0: com.sun.tools.javac.comp.Env
                   constructor(arg0: com.sun.tools.javac.comp.Env)
                   public hasNext(): boolean
                   public remove(): void
               }
               class Env<A> implements java.lang.Iterable<com.sun.tools.javac.comp.Env<A>> {
                   public next: com.sun.tools.javac.comp.Env<A>
                   public outer: com.sun.tools.javac.comp.Env<A>
                   public tree: com.sun.tools.javac.tree.JCTree
                   public toplevel: com.sun.tools.javac.tree.JCTree$JCCompilationUnit
                   public enclClass: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   public enclMethod: com.sun.tools.javac.tree.JCTree$JCMethodDecl
                   public info: A
                   public baseClause: boolean
                   public constructor(arg0: com.sun.tools.javac.tree.JCTree, arg1: A)
                   dup<T>(...args: any[]): any
                   public dupto(arg0: com.sun.tools.javac.comp.Env<A>): com.sun.tools.javac.comp.Env<A>
                   public enclosing(arg0: com.sun.tools.javac.tree.JCTree$Tag): com.sun.tools.javac.comp.Env<A>
                   toString<T>(...args: any[]): any
                   public iterator(): java.util.Iterator<com.sun.tools.javac.comp.Env<A>>
               }
               class AttrContext {
                   scope: com.sun.tools.javac.code.Scope
                   staticLevel: int
                   isSelfCall: boolean
                   selectSuper: boolean
                   isSerializable: boolean
                   pendingResolutionPhase: com.sun.tools.javac.comp.Resolve$MethodResolutionPhase
                   lint: com.sun.tools.javac.code.Lint
                   enclVar: com.sun.tools.javac.code.Symbol
                   returnResult: com.sun.tools.javac.comp.Attr$ResultInfo
                   defaultSuperCallSite: com.sun.tools.javac.code.Type
                   preferredTreeForDiagnostics: com.sun.tools.javac.tree.JCTree
                   public constructor()
                   dup<T>(...args: any[]): any
                   public getLocalElements(): java.lang.Iterable<com.sun.tools.javac.code.Symbol>
                   lastResolveVarargs(): boolean
                   toString<T>(...args: any[]): any
               }
               class Enter extends com.sun.tools.javac.tree.JCTree$Visitor {
                   protected static enterKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Enter>
                   log: com.sun.tools.javac.util.Log
                   syms: com.sun.tools.javac.code.Symtab
                   chk: com.sun.tools.javac.comp.Check
                   make: com.sun.tools.javac.tree.TreeMaker
                   reader: com.sun.tools.javac.jvm.ClassReader
                   annotate: com.sun.tools.javac.comp.Annotate
                   memberEnter: com.sun.tools.javac.comp.MemberEnter
                   types: com.sun.tools.javac.code.Types
                   lint: com.sun.tools.javac.code.Lint
                   names: com.sun.tools.javac.util.Names
                   fileManager: javax.tools.JavaFileManager
                   pkginfoOpt: com.sun.tools.javac.main.Option$PkgInfo
                   typeEnvs: com.sun.tools.javac.comp.TypeEnvs
                   uncompleted: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Symbol$ClassSymbol>
                   protected env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   result: com.sun.tools.javac.code.Type
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Enter
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public getEnv(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public getClassEnv(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public classEnv(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   topLevelEnv(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public getTopLevelEnv(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   enterScope(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Scope
                   classEnter<T>(...args: any[]): any
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   protected duplicateClass(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public main(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>): void
                   public complete(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
               }
               class Flow$1 extends com.sun.tools.javac.comp.Flow$AssignAnalyzer {
                   enclosedSymbols: com.sun.tools.javac.code.Scope
                   val$env: com.sun.tools.javac.comp.Env
                   this$0: com.sun.tools.javac.comp.Flow
                   constructor(arg0: com.sun.tools.javac.comp.Flow, arg1: com.sun.tools.javac.comp.Env)
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   protected trackable(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): boolean
               }
               class Flow$FlowKind extends java.lang.Enum<com.sun.tools.javac.comp.Flow$FlowKind> {
                   public static NORMAL: com.sun.tools.javac.comp.Flow$FlowKind
                   public static SPECULATIVE_LOOP: com.sun.tools.javac.comp.Flow$FlowKind
                   errKey: java.lang.String
                   isFinal<T>(...args: any[]): any
                   public static values(): com.sun.tools.javac.comp.Flow$FlowKind[]
                   valueOf<T>(...args: any[]): any
               }
               class Flow$BaseAnalyzer$JumpKind$1 extends com.sun.tools.javac.comp.Flow$BaseAnalyzer$JumpKind {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.tree.JCTree$Tag)
                   getTarget(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Flow$BaseAnalyzer$JumpKind$2 extends com.sun.tools.javac.comp.Flow$BaseAnalyzer$JumpKind {
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.tree.JCTree$Tag)
                   getTarget(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               abstract class Flow$BaseAnalyzer$JumpKind extends java.lang.Enum<com.sun.tools.javac.comp.Flow$BaseAnalyzer$JumpKind> {
                   public static BREAK: com.sun.tools.javac.comp.Flow$BaseAnalyzer$JumpKind
                   public static CONTINUE: com.sun.tools.javac.comp.Flow$BaseAnalyzer$JumpKind
                   treeTag: com.sun.tools.javac.tree.JCTree$Tag
                   public static values(): com.sun.tools.javac.comp.Flow$BaseAnalyzer$JumpKind[]
                   valueOf<T>(...args: any[]): any
                   getTarget(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.tree.JCTree$Tag, arg3: com.sun.tools.javac.comp.Flow$1)
               }
               class Flow$BaseAnalyzer$PendingExit {
                   tree: com.sun.tools.javac.tree.JCTree
                   constructor(arg0: com.sun.tools.javac.tree.JCTree)
                   resolveJump(): void
               }
               abstract class Flow$BaseAnalyzer$PendingExit> extends com.sun.tools.javac.tree.TreeScanner {
                   pendingExits: com.sun.tools.javac.util.ListBuffer<P>
                   constructor()
                   markDead(): void
                   recordExit(arg0: P): void
                   resolveContinues(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   resolveBreaks(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.util.ListBuffer<P>): boolean
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class Flow$AliveAnalyzer extends com.sun.tools.javac.comp.Flow$BaseAnalyzer<com.sun.tools.javac.comp.Flow$BaseAnalyzer$PendingExit> {
                   this$0: com.sun.tools.javac.comp.Flow
                   constructor(arg0: com.sun.tools.javac.comp.Flow)
                   markDead(): void
                   scanDef(arg0: com.sun.tools.javac.tree.JCTree): void
                   scanStat(arg0: com.sun.tools.javac.tree.JCTree): void
                   scanStats(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   analyzeTree<T>(...args: any[]): any
               }
               class Flow$FlowAnalyzer$FlowPendingExit extends com.sun.tools.javac.comp.Flow$BaseAnalyzer$PendingExit {
                   thrown: com.sun.tools.javac.code.Type
                   this$1: com.sun.tools.javac.comp.Flow$FlowAnalyzer
                   constructor(arg0: com.sun.tools.javac.comp.Flow$FlowAnalyzer, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.code.Type)
               }
               class Flow$FlowAnalyzer extends com.sun.tools.javac.comp.Flow$BaseAnalyzer<com.sun.tools.javac.comp.Flow$FlowAnalyzer$FlowPendingExit> {
                   preciseRethrowTypes: java.util.HashMap<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>>
                   classDef: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   thrown: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   caught: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   this$0: com.sun.tools.javac.comp.Flow
                   constructor(arg0: com.sun.tools.javac.comp.Flow)
                   markDead(): void
                   errorUncaught(): void
                   markThrown(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   checkCaughtType(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   analyzeTree<T>(...args: any[]): any
               }
               class Flow$LambdaFlowAnalyzer extends com.sun.tools.javac.comp.Flow$FlowAnalyzer {
                   inferredThrownTypes: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   inLambda: boolean
                   this$0: com.sun.tools.javac.comp.Flow
                   constructor(arg0: com.sun.tools.javac.comp.Flow)
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
               }
               class Flow$AssignAnalyzer$AssignPendingExit extends com.sun.tools.javac.comp.Flow$BaseAnalyzer$PendingExit {
                   inits: com.sun.tools.javac.util.Bits
                   uninits: com.sun.tools.javac.util.Bits
                   exit_inits: com.sun.tools.javac.util.Bits
                   exit_uninits: com.sun.tools.javac.util.Bits
                   this$1: com.sun.tools.javac.comp.Flow$AssignAnalyzer
                   public constructor(arg0: com.sun.tools.javac.comp.Flow$AssignAnalyzer, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.util.Bits, arg3: com.sun.tools.javac.util.Bits)
                   resolveJump(): void
               }
               class Flow$AssignAnalyzer extends com.sun.tools.javac.comp.Flow$BaseAnalyzer<com.sun.tools.javac.comp.Flow$AssignAnalyzer$AssignPendingExit> {
                   inits: com.sun.tools.javac.util.Bits
                   uninits: com.sun.tools.javac.util.Bits
                   uninitsTry: com.sun.tools.javac.util.Bits
                   initsWhenTrue: com.sun.tools.javac.util.Bits
                   initsWhenFalse: com.sun.tools.javac.util.Bits
                   uninitsWhenTrue: com.sun.tools.javac.util.Bits
                   uninitsWhenFalse: com.sun.tools.javac.util.Bits
                   protected vardecls: com.sun.tools.javac.tree.JCTree$JCVariableDecl[]
                   classDef: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   firstadr: int
                   protected nextadr: int
                   protected returnadr: int
                   unrefdResources: com.sun.tools.javac.code.Scope
                   flowKind: com.sun.tools.javac.comp.Flow$FlowKind
                   startPos: int
                   this$0: com.sun.tools.javac.comp.Flow
                   public constructor(arg0: com.sun.tools.javac.comp.Flow)
                   markDead(): void
                   protected trackable(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): boolean
                   isFinalUninitializedField(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): boolean
                   isFinalUninitializedStaticField(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): boolean
                   newVar(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   letInit<T>(...args: any[]): any
                   uninit(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): void
                   checkInit<T>(...args: any[]): any
                   split(arg0: boolean): void
                   protected merge(): void
                   scanExpr(arg0: com.sun.tools.javac.tree.JCTree): void
                   scanExprs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): void
                   scanCond(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   protected initParam(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   referenced(arg0: com.sun.tools.javac.code.Symbol): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   analyzeTree<T>(...args: any[]): any
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
               }
               class Flow$CaptureAnalyzer extends com.sun.tools.javac.comp.Flow$BaseAnalyzer<com.sun.tools.javac.comp.Flow$BaseAnalyzer$PendingExit> {
                   currentTree: com.sun.tools.javac.tree.JCTree
                   this$0: com.sun.tools.javac.comp.Flow
                   constructor(arg0: com.sun.tools.javac.comp.Flow)
                   markDead(): void
                   checkEffectivelyFinal(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$VarSymbol): void
                   letInit(arg0: com.sun.tools.javac.tree.JCTree): void
                   reportEffectivelyFinalError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   reportInnerClsNeedsFinalError(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   analyzeTree<T>(...args: any[]): any
               }
               class Flow$2 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class Flow {
                   protected static flowKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Flow>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Flow
                   public analyzeTree(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.TreeMaker): void
                   public analyzeLambda(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCLambda, arg2: com.sun.tools.javac.tree.TreeMaker, arg3: boolean): void
                   public analyzeLambdaThrownTypes(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCLambda, arg2: com.sun.tools.javac.tree.TreeMaker): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   static access$100(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.util.Log
                   static access$200(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.code.Lint
                   static access$202(arg0: com.sun.tools.javac.comp.Flow, arg1: com.sun.tools.javac.code.Lint): com.sun.tools.javac.code.Lint
                   static access$302(arg0: com.sun.tools.javac.comp.Flow, arg1: com.sun.tools.javac.comp.Env): com.sun.tools.javac.comp.Env
                   static access$402(arg0: com.sun.tools.javac.comp.Flow, arg1: com.sun.tools.javac.tree.TreeMaker): com.sun.tools.javac.tree.TreeMaker
                   static access$500(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.comp.Check
                   static access$600(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.util.Names
                   static access$400(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.tree.TreeMaker
                   static access$700(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.code.Types
                   static access$800(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.code.Symtab
                   static access$300(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.comp.Env
                   static access$900(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.comp.Resolve
                   static access$1000(arg0: com.sun.tools.javac.comp.Flow): boolean
                   static access$1100(arg0: com.sun.tools.javac.comp.Flow): boolean
                   static access$1200(arg0: com.sun.tools.javac.comp.Flow): boolean
                   static access$1300(arg0: com.sun.tools.javac.comp.Flow): boolean
                   static access$1400(arg0: com.sun.tools.javac.comp.Flow): com.sun.tools.javac.util.JCDiagnostic$Factory
               }
               class MemberEnter$1 {
                   processed: java.util.Set<com.sun.tools.javac.code.Symbol>
                   val$packge: com.sun.tools.javac.code.Symbol$PackageSymbol
                   val$origin: com.sun.tools.javac.code.Symbol$TypeSymbol
                   val$toScope: com.sun.tools.javac.code.Scope
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.code.Symbol$PackageSymbol, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol, arg3: com.sun.tools.javac.code.Scope)
                   importFrom(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): void
               }
               class MemberEnter$2 implements com.sun.tools.javac.comp.Annotate$Worker {
                   processed: java.util.Set<com.sun.tools.javac.code.Symbol>
                   val$tsym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   val$sourcefile: javax.tools.JavaFileObject
                   val$packge: com.sun.tools.javac.code.Symbol$PackageSymbol
                   val$toScope: com.sun.tools.javac.code.Scope
                   val$origin: com.sun.tools.javac.code.Symbol$TypeSymbol
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: javax.tools.JavaFileObject, arg3: com.sun.tools.javac.code.Symbol$PackageSymbol, arg4: com.sun.tools.javac.code.Scope, arg5: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   toString<T>(...args: any[]): any
                   importFrom(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): void
                   public run(): void
               }
               class MemberEnter$3 {
                   processed: java.util.Set<com.sun.tools.javac.code.Symbol>
                   val$name: com.sun.tools.javac.util.Name
                   val$packge: com.sun.tools.javac.code.Symbol$PackageSymbol
                   val$origin: com.sun.tools.javac.code.Symbol$TypeSymbol
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   val$toScope: com.sun.tools.javac.code.Scope
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.code.Symbol$PackageSymbol, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol, arg4: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg5: com.sun.tools.javac.code.Scope)
                   importFrom(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): void
               }
               class MemberEnter$4 implements com.sun.tools.javac.comp.Annotate$Worker {
                   processed: java.util.Set<com.sun.tools.javac.code.Symbol>
                   found: boolean
                   val$tsym: com.sun.tools.javac.code.Symbol$TypeSymbol
                   val$name: com.sun.tools.javac.util.Name
                   val$packge: com.sun.tools.javac.code.Symbol$PackageSymbol
                   val$origin: com.sun.tools.javac.code.Symbol$TypeSymbol
                   val$toScope: com.sun.tools.javac.code.Scope
                   val$env: com.sun.tools.javac.comp.Env
                   val$pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Symbol$PackageSymbol, arg4: com.sun.tools.javac.code.Symbol$TypeSymbol, arg5: com.sun.tools.javac.code.Scope, arg6: com.sun.tools.javac.comp.Env, arg7: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition)
                   toString<T>(...args: any[]): any
                   importFrom(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): void
                   public run(): void
               }
               class MemberEnter$InitTreeVisitor extends com.sun.tools.javac.tree.JCTree$Visitor {
                   constructor()
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   static access$300(arg0: com.sun.tools.javac.comp.MemberEnter$InitTreeVisitor): boolean
               }
               class MemberEnter$5 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$annotations: com.sun.tools.javac.util.List
                   val$s: com.sun.tools.javac.code.Symbol
                   val$localEnv: com.sun.tools.javac.comp.Env
                   val$deferPos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.comp.Env, arg4: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition)
                   toString<T>(...args: any[]): any
                   public run(): void
               }
               class MemberEnter$6 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$localEnv: com.sun.tools.javac.comp.Env
                   val$annotations: com.sun.tools.javac.util.List
                   val$s: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.util.List, arg3: com.sun.tools.javac.code.Symbol)
                   public run(): void
               }
               class MemberEnter$7 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$m: com.sun.tools.javac.code.Symbol$MethodSymbol
                   val$defaultValue: com.sun.tools.javac.tree.JCTree$JCExpression
                   val$localEnv: com.sun.tools.javac.comp.Env
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.comp.Env)
                   toString<T>(...args: any[]): any
                   public run(): void
               }
               class MemberEnter$8 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$localEnv: com.sun.tools.javac.comp.Env
                   val$defaultValue: com.sun.tools.javac.tree.JCTree$JCExpression
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.tree.JCTree$JCExpression)
                   public run(): void
               }
               class MemberEnter$TypeAnnotate$1 implements com.sun.tools.javac.comp.Annotate$Worker {
                   val$annotations: com.sun.tools.javac.util.List
                   val$deferPos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   this$1: com.sun.tools.javac.comp.MemberEnter$TypeAnnotate
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter$TypeAnnotate, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition)
                   toString<T>(...args: any[]): any
                   public run(): void
               }
               class MemberEnter$TypeAnnotate extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   public constructor(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition)
                   annotateTypeLater(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   static access$800(arg0: com.sun.tools.javac.comp.MemberEnter$TypeAnnotate): com.sun.tools.javac.code.Symbol
                   static access$900(arg0: com.sun.tools.javac.comp.MemberEnter$TypeAnnotate): com.sun.tools.javac.comp.Env
               }
               class MemberEnter$9 extends com.sun.tools.javac.code.Type$ErrorType {
                   val$interfaceExpected: boolean
                   val$tree: com.sun.tools.javac.tree.JCTree$JCExpression
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol, arg3: boolean, arg4: com.sun.tools.javac.tree.JCTree$JCExpression)
                   public getModelType(): com.sun.tools.javac.code.Type
               }
               class MemberEnter$Synthesizer$1 extends com.sun.tools.javac.code.Type$ErrorType {
                   val$actuals: com.sun.tools.javac.util.List
                   this$1: com.sun.tools.javac.comp.MemberEnter$Synthesizer
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter$Synthesizer, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol, arg3: com.sun.tools.javac.util.List)
                   getTypeArguments<T>(...args: any[]): any
               }
               class MemberEnter$Synthesizer$2 extends com.sun.tools.javac.code.Type$ErrorType {
                   this$1: com.sun.tools.javac.comp.MemberEnter$Synthesizer
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter$Synthesizer, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   getTypeArguments<T>(...args: any[]): any
               }
               class MemberEnter$Synthesizer extends com.sun.tools.javac.tree.JCTree$Visitor {
                   originalType: com.sun.tools.javac.code.Type
                   interfaceExpected: boolean
                   synthesizedSymbols: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ClassSymbol>
                   result: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.MemberEnter
                   constructor(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.code.Type, arg2: boolean)
                   visit<T>(...args: any[]): any
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   synthesizeClass(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol$ClassSymbol
                   synthesizeTyparams(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: int): void
               }
               class MemberEnter extends com.sun.tools.javac.tree.JCTree$Visitor implements com.sun.tools.javac.code.Symbol$Completer {
                   protected static memberEnterKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.MemberEnter>
                   static checkClash: boolean
                   allowTypeAnnos: boolean
                   allowRepeatedAnnos: boolean
                   halfcompleted: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   isFirst: boolean
                   completionEnabled: boolean
                   protected env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.MemberEnter
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   staticImportAccessible(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Symbol$PackageSymbol): boolean
                   signature(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg3: com.sun.tools.javac.tree.JCTree, arg4: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg6: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Type
                   memberEnter<T>(...args: any[]): any
                   finishClass(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitImport(arg0: com.sun.tools.javac.tree.JCTree$JCImport): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   methodEnv(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   checkType(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type, arg2: java.lang.String): void
                   checkReceiver(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   public needsLazyConstValue(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   initEnv(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public getMethodEnv(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   public getInitEnv(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   attribImportType(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.code.Type
                   annotateLater(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): void
                   annotateDefaultValueLater(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   public complete(arg0: com.sun.tools.javac.code.Symbol): void
                   public typeAnnotate(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): void
                   modelMissingTypes(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: boolean): com.sun.tools.javac.code.Type
                   DefaultConstructor(arg0: com.sun.tools.javac.tree.TreeMaker, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg6: long, arg7: boolean): com.sun.tools.javac.tree.JCTree
                   SuperCall(arg0: com.sun.tools.javac.tree.TreeMaker, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg3: boolean): com.sun.tools.javac.tree.JCTree$JCExpressionStatement
                   static access$000(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.code.Types
                   static access$100(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.comp.Check
                   static access$200(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.util.Log
                   static access$400(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.code.DeferredLintHandler
                   static access$500(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.code.Lint
                   static access$600(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.code.Symbol): void
                   static access$700(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   static access$1000(arg0: com.sun.tools.javac.comp.MemberEnter, arg1: com.sun.tools.javac.util.List, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.code.Symbol): void
                   static access$1100(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.comp.Annotate
                   static access$1200(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.code.Symtab
                   static access$1300(arg0: com.sun.tools.javac.comp.MemberEnter): com.sun.tools.javac.util.Names
               }
               class TypeEnvs {
                   protected static typeEnvsKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.TypeEnvs>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.TypeEnvs
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   get(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   put(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   remove(arg0: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   values(): java.util.Collection<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   clear(): void
               }
               class Todo$FileQueue extends java.util.AbstractQueue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> {
                   fileContents: java.util.LinkedList<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   this$0: com.sun.tools.javac.comp.Todo
                   constructor(arg0: com.sun.tools.javac.comp.Todo)
                   public iterator(): java.util.Iterator<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   public size(): int
                   offer<T>(...args: any[]): any
                   poll<T>(...args: any[]): any
                   peek<T>(...args: any[]): any
               }
               class Todo extends java.util.AbstractQueue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> {
                   protected static todoKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Todo>
                   contents: java.util.LinkedList<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   contentsByFile: java.util.LinkedList<java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>>
                   fileMap: java.util.Map<javax.tools.JavaFileObject, com.sun.tools.javac.comp.Todo$FileQueue>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Todo
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public append(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                   public iterator(): java.util.Iterator<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>
                   public size(): int
                   offer<T>(...args: any[]): any
                   poll<T>(...args: any[]): any
                   peek<T>(...args: any[]): any
                   public groupByFile(): java.util.Queue<java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>>
               }
               class CompileStates$CompileState extends java.lang.Enum<com.sun.tools.javac.comp.CompileStates$CompileState> {
                   public static INIT: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static PARSE: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static ENTER: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static PROCESS: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static ATTR: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static FLOW: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static TRANSTYPES: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static UNLAMBDA: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static LOWER: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static GENERATE: com.sun.tools.javac.comp.CompileStates$CompileState
                   public static values(): com.sun.tools.javac.comp.CompileStates$CompileState[]
                   valueOf<T>(...args: any[]): any
                   public isAfter(arg0: com.sun.tools.javac.comp.CompileStates$CompileState): boolean
                   public static max(arg0: com.sun.tools.javac.comp.CompileStates$CompileState, arg1: com.sun.tools.javac.comp.CompileStates$CompileState): com.sun.tools.javac.comp.CompileStates$CompileState
               }
               class CompileStates extends java.util.HashMap<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.comp.CompileStates$CompileState> {
                   protected static compileStatesKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.CompileStates>
                   protected context: com.sun.tools.javac.util.Context
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.CompileStates
                   public constructor(arg0: com.sun.tools.javac.util.Context)
                   public isDone(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.comp.CompileStates$CompileState): boolean
               }
               class TransTypes$1 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.comp.TransTypes
                   constructor(arg0: com.sun.tools.javac.comp.TransTypes)
                   accepts<T>(...args: any[]): any
               }
               class TransTypes$NeedsOverridBridgeFilter implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol> {
                   c: com.sun.tools.javac.code.Symbol$ClassSymbol
                   this$0: com.sun.tools.javac.comp.TransTypes
                   constructor(arg0: com.sun.tools.javac.comp.TransTypes, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol)
                   accepts<T>(...args: any[]): any
               }
               class TransTypes extends com.sun.tools.javac.tree.TreeTranslator {
                   protected static transTypesKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.TransTypes>
                   overridden: java.util.Map<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Symbol$MethodSymbol>
                   currentMethod: com.sun.tools.javac.tree.JCTree
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.TransTypes
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   cast(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree$JCExpression
                   coerce<T>(...args: any[]): any
                   retype(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree$JCExpression
                   translateArgs<T>(...args: any[]): any
                   addBridge(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol, arg3: com.sun.tools.javac.code.Symbol$ClassSymbol, arg4: boolean, arg5: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>): void
                   addBridgeIfNeeded(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol$ClassSymbol, arg3: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>): void
                   addBridges<T>(...args: any[]): any
                   translate<T>(...args: any[]): any
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitTypeIntersection(arg0: com.sun.tools.javac.tree.JCTree$JCTypeIntersection): void
                   translateClass(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   public translateTopLevelClass(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.TreeMaker): com.sun.tools.javac.tree.JCTree
                   static access$000(arg0: com.sun.tools.javac.comp.TransTypes): com.sun.tools.javac.code.Types
               }
               class Lower$ClassMap extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower)
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
               }
               abstract class Lower$BasicFreeVarCollector extends com.sun.tools.javac.tree.TreeScanner {
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower)
                   addFreeVars(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   visitSymbol(arg0: com.sun.tools.javac.code.Symbol): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
               }
               class Lower$FreeVarCollector extends com.sun.tools.javac.comp.Lower$BasicFreeVarCollector {
                   owner: com.sun.tools.javac.code.Symbol
                   clazz: com.sun.tools.javac.code.Symbol$ClassSymbol
                   fvs: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol)
                   addFreeVars(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   visitSymbol(arg0: com.sun.tools.javac.code.Symbol): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
               }
               class Lower$EnumMapping {
                   pos: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition
                   next: int
                   forEnum: com.sun.tools.javac.code.Symbol$TypeSymbol
                   mapVar: com.sun.tools.javac.code.Symbol$VarSymbol
                   values: java.util.Map<com.sun.tools.javac.code.Symbol$VarSymbol, java.lang.Integer>
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   forConstant(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): com.sun.tools.javac.tree.JCTree$JCLiteral
                   translate(): void
               }
               class Lower$1 extends com.sun.tools.javac.tree.TreeScanner {
                   currentClass: com.sun.tools.javac.code.Symbol$TypeSymbol
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower)
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
               }
               interface Lower$TreeBuilder {
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$2 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$builder: com.sun.tools.javac.comp.Lower$TreeBuilder
                   val$s: com.sun.tools.javac.tree.JCTree$JCFieldAccess
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.comp.Lower$TreeBuilder, arg2: com.sun.tools.javac.tree.JCTree$JCFieldAccess)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$3$1 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$indexed: com.sun.tools.javac.tree.JCTree
                   this$1: com.sun.tools.javac.comp.Lower$3
                   constructor(arg0: com.sun.tools.javac.comp.Lower$3, arg1: com.sun.tools.javac.tree.JCTree)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$3 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$i: com.sun.tools.javac.tree.JCTree$JCArrayAccess
                   val$builder: com.sun.tools.javac.comp.Lower$TreeBuilder
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.tree.JCTree$JCArrayAccess, arg2: com.sun.tools.javac.comp.Lower$TreeBuilder)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$4 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$expr2: com.sun.tools.javac.tree.JCTree
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.tree.JCTree)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$5 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$tree: com.sun.tools.javac.tree.JCTree$JCAssignOp
                   val$boxingReq: boolean
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.tree.JCTree$JCAssignOp, arg2: boolean)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$6$1 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$tmp1: com.sun.tools.javac.tree.JCTree
                   this$1: com.sun.tools.javac.comp.Lower$6
                   constructor(arg0: com.sun.tools.javac.comp.Lower$6, arg1: com.sun.tools.javac.tree.JCTree)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$6 implements com.sun.tools.javac.comp.Lower$TreeBuilder {
                   val$tree: com.sun.tools.javac.tree.JCTree$JCUnary
                   val$cast: boolean
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.tree.JCTree$JCUnary, arg2: boolean)
                   public build(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
               }
               class Lower$1Patcher extends com.sun.tools.javac.tree.TreeScanner {
                   val$src: com.sun.tools.javac.tree.JCTree
                   val$dest: com.sun.tools.javac.tree.JCTree
                   this$0: com.sun.tools.javac.comp.Lower
                   constructor()
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
               }
               class Lower$7 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
                   static $SwitchMap$com$sun$tools$javac$main$Option$PkgInfo: int[]
               }
               class Lower extends com.sun.tools.javac.tree.TreeTranslator {
                   protected static lowerKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Lower>
                   currentClass: com.sun.tools.javac.code.Symbol$ClassSymbol
                   translated: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>
                   attrEnv: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>
                   endPosTable: com.sun.tools.javac.tree.EndPosTable
                   classdefs: java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.tree.JCTree$JCClassDecl>
                   public prunedTree: java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>>
                   actualSymbols: java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol>
                   currentMethodDef: com.sun.tools.javac.tree.JCTree$JCMethodDecl
                   currentMethodSym: com.sun.tools.javac.code.Symbol$MethodSymbol
                   outermostClassDef: com.sun.tools.javac.tree.JCTree$JCClassDecl
                   outermostMemberDef: com.sun.tools.javac.tree.JCTree
                   lambdaTranslationMap: java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol>
                   classMap: com.sun.tools.javac.comp.Lower$ClassMap
                   freevarCache: java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>>
                   enumSwitchMap: java.util.Map<com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.comp.Lower$EnumMapping>
                   conflictsChecker: com.sun.tools.javac.tree.JCTree$Visitor
                   proxies: com.sun.tools.javac.code.Scope
                   twrVars: com.sun.tools.javac.code.Scope
                   outerThisStack: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.Lower
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   classDef(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   ownerToCopyFreeVarsFrom(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.code.Symbol$ClassSymbol
                   freevars(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>
                   mapForEnum(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.comp.Lower$EnumMapping
                   make_at(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): com.sun.tools.javac.tree.TreeMaker
                   makeLit(arg0: com.sun.tools.javac.code.Type, arg1: java.lang.Object): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeNull(): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeNewClass(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCNewClass
                   makeUnary(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCUnary
                   makeBinary(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCBinary
                   makeAssignop(arg0: com.sun.tools.javac.tree.JCTree$Tag, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCAssignOp
                   makeString(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeEmptyClass<T>(...args: any[]): any
                   checkConflicts(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>): void
                   swapAccessConstructorTag(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   accessName(arg0: int, arg1: int): com.sun.tools.javac.util.Name
                   accessSymbol(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.JCTree, arg3: boolean, arg4: boolean): com.sun.tools.javac.code.Symbol$MethodSymbol
                   accessBase(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree$JCExpression
                   needsPrivateAccess(arg0: com.sun.tools.javac.code.Symbol): boolean
                   needsProtectedAccess(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.tree.JCTree): boolean
                   accessClass(arg0: com.sun.tools.javac.code.Symbol, arg1: boolean, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.code.Symbol$ClassSymbol
                   access<T>(...args: any[]): any
                   accessConstructor(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol
                   accessConstructorTag(): com.sun.tools.javac.code.Symbol$ClassSymbol
                   makeAccessible(arg0: com.sun.tools.javac.code.Symbol): void
                   accessDef(arg0: int, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol, arg3: int): com.sun.tools.javac.tree.JCTree
                   accessConstructorDef(arg0: int, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Symbol$MethodSymbol): com.sun.tools.javac.tree.JCTree
                   proxyName(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.util.Name
                   freevarDefs<T>(...args: any[]): any
                   outerThisName(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.util.Name
                   outerThisDef<T>(...args: any[]): any
                   loadFreevars(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   loadFreevar(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$VarSymbol): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeThis(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeTwrTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): com.sun.tools.javac.tree.JCTree
                   makeOuterThis(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeOwnerThis(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: boolean): com.sun.tools.javac.tree.JCTree$JCExpression
                   makeOwnerThisN(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol, arg2: boolean): com.sun.tools.javac.tree.JCTree$JCExpression
                   initField(arg0: int, arg1: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree$JCStatement
                   initOuterThis(arg0: int): com.sun.tools.javac.tree.JCTree$JCStatement
                   classDollarSymBody(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.tree.JCTree$JCMethodDecl): com.sun.tools.javac.tree.JCTree$JCBlock
                   abstractRval<T>(...args: any[]): any
                   abstractLval(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Lower$TreeBuilder): com.sun.tools.javac.tree.JCTree
                   makeComma(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
                   translate<T>(...args: any[]): any
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitAnnotatedType(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotatedType): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   boxArgs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   boxIfNeeded<T extends com.sun.tools.javac.tree.JCTree>(arg0: T, arg1: com.sun.tools.javac.code.Type): T
                   boxPrimitive<T>(...args: any[]): any
                   unbox(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.tree.JCTree$JCExpression
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   lowerBoxedPostop(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): com.sun.tools.javac.tree.JCTree
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitEnumSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): com.sun.tools.javac.tree.JCTree
                   public visitStringSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): com.sun.tools.javac.tree.JCTree
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public translateTopLevelClass(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.TreeMaker): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   static access$000(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.util.Names
                   static access$100(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.jvm.Target
                   static access$200(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.jvm.ClassWriter
                   static access$300(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.code.Symbol$ClassSymbol
                   static access$400(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.code.Symtab
                   static access$500(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.code.Symbol, arg3: com.sun.tools.javac.code.Scope): void
                   static access$600(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.tree.TreeMaker
                   static access$700(arg0: com.sun.tools.javac.comp.Lower, arg1: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.util.List): com.sun.tools.javac.code.Symbol$MethodSymbol
                   static access$800(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.comp.Check
                   static access$900(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.comp.Resolve
                   static access$1000(arg0: com.sun.tools.javac.comp.Lower): com.sun.tools.javac.code.Types
               }
               class LambdaToMethod$KlassInfo {
                   this$0: com.sun.tools.javac.comp.LambdaToMethod
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl, arg2: com.sun.tools.javac.comp.LambdaToMethod$1)
                   static access$500(arg0: com.sun.tools.javac.comp.LambdaToMethod$KlassInfo): java.util.Map
                   static access$600(arg0: com.sun.tools.javac.comp.LambdaToMethod$KlassInfo, arg1: com.sun.tools.javac.tree.JCTree): void
                   static access$700(arg0: com.sun.tools.javac.comp.LambdaToMethod$KlassInfo): com.sun.tools.javac.util.ListBuffer
                   static access$1400(arg0: com.sun.tools.javac.comp.LambdaToMethod$KlassInfo): com.sun.tools.javac.code.Symbol$MethodSymbol
                   static access$1500(arg0: com.sun.tools.javac.comp.LambdaToMethod$KlassInfo): com.sun.tools.javac.code.Symbol$VarSymbol
                   static access$2000(arg0: com.sun.tools.javac.comp.LambdaToMethod$KlassInfo): com.sun.tools.javac.tree.JCTree$JCClassDecl
               }
               class LambdaToMethod$1LambdaBodyTranslator extends com.sun.tools.javac.tree.TreeTranslator {
                   val$isTarget_void: boolean
                   val$lambdaMethodDecl: com.sun.tools.javac.tree.JCTree$JCMethodDecl
                   val$restype: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.comp.LambdaToMethod
                   constructor()
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
               }
               class LambdaToMethod$MemberReferenceToLambda {
                   this$0: com.sun.tools.javac.comp.LambdaToMethod
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: com.sun.tools.javac.tree.JCTree$JCMemberReference, arg2: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$ReferenceTranslationContext, arg3: com.sun.tools.javac.code.Symbol)
                   lambda(): com.sun.tools.javac.tree.JCTree$JCLambda
                   addParametersReturnReceiver(): com.sun.tools.javac.code.Symbol$VarSymbol
                   getReceiverExpression(): com.sun.tools.javac.tree.JCTree$JCExpression
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$SyntheticMethodNameCounter {
                   this$1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor
                   getIndex(arg0: java.lang.StringBuilder): int
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.comp.LambdaToMethod$1)
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$1 extends com.sun.tools.javac.comp.Lower$BasicFreeVarCollector {
                   val$lambdaContext: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext
                   this$1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.comp.Lower, arg2: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext)
                   addFreeVars(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   visitSymbol(arg0: com.sun.tools.javac.code.Symbol): void
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$Frame {
                   tree: com.sun.tools.javac.tree.JCTree
                   locals: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>
                   this$1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor
                   public constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.tree.JCTree)
                   addLocal(arg0: com.sun.tools.javac.code.Symbol): void
               }
               abstract class JCTree$JCFunctionalExpression> {
                   tree: T
                   owner: com.sun.tools.javac.code.Symbol
                   depth: int
                   prev: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext<any>
                   bridges: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol>
                   this$1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor
                   constructor(arg0: T)
                   needsAltMetafactory(): boolean
                   isSerializable(): boolean
                   enclosingMethodName(): java.lang.String
                   syntheticMethodNameComponent(arg0: com.sun.tools.javac.util.Name): java.lang.String
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext$1 extends com.sun.tools.javac.code.Symbol$VarSymbol {
                   val$sym: com.sun.tools.javac.code.Symbol
                   this$2: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol, arg5: com.sun.tools.javac.code.Symbol)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext$2 extends com.sun.tools.javac.code.Symbol$VarSymbol {
                   val$sym: com.sun.tools.javac.code.Symbol
                   this$2: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol, arg5: com.sun.tools.javac.code.Symbol)
                   public baseSymbol(): com.sun.tools.javac.code.Symbol
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext extends com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext<com.sun.tools.javac.tree.JCTree$JCLambda> {
                   self: com.sun.tools.javac.code.Symbol
                   assignedTo: com.sun.tools.javac.code.Symbol
                   translatedSymbols: java.util.Map<com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind, java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol>>
                   translatedSym: com.sun.tools.javac.code.Symbol$MethodSymbol
                   syntheticParams: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   freeVarProcessedLocalClasses: java.util.Set<com.sun.tools.javac.code.Symbol>
                   methodReferenceReceiver: com.sun.tools.javac.tree.JCTree$JCExpression
                   this$1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.tree.JCTree$JCLambda)
                   translate<T>(...args: any[]): any
                   addSymbol(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind): void
                   getSymbolMap(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind): java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol>
                   complete(): void
                   generatedLambdaSig(): com.sun.tools.javac.code.Type
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor$ReferenceTranslationContext extends com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext<com.sun.tools.javac.tree.JCTree$JCMemberReference> {
                   isSuper: boolean
                   sigPolySym: com.sun.tools.javac.code.Symbol
                   this$1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.tree.JCTree$JCMemberReference)
                   referenceKind(): int
                   needsVarArgsConversion(): boolean
                   isArrayOp(): boolean
                   receiverAccessible(): boolean
                   isPrivateInOtherClass(): boolean
                   isSignaturePolymorphic(): boolean
                   interfaceParameterIsIntersectionType(): boolean
                   needsConversionToLambda(): boolean
                   generatedRefSig(): com.sun.tools.javac.code.Type
                   bridgedRefSig(): com.sun.tools.javac.code.Type
               }
               class LambdaToMethod$LambdaAnalyzerPreprocessor extends com.sun.tools.javac.tree.TreeTranslator {
                   this$0: com.sun.tools.javac.comp.LambdaToMethod
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod)
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   captureLocalClassDefs(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext): void
                   currentlyInClass(arg0: com.sun.tools.javac.code.Symbol): boolean
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   static access$300(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   static access$800(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.code.Symbol): boolean
                   static access$900(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: com.sun.tools.javac.tree.JCTree$JCFieldAccess): boolean
                   static access$2600(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext
                   static access$2700(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor, arg1: int, arg2: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.tree.JCTree
                   static access$2900(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.code.Symbol
                   static access$3000(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.util.List
                   static access$3200(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.tree.JCTree
                   static access$3408(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): int
                   static access$3500(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$SyntheticMethodNameCounter
                   static access$3600(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.util.List
                   static access$3700(arg0: com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor): com.sun.tools.javac.code.Symbol$ClassSymbol
               }
               class LambdaToMethod$LambdaSymbolKind extends java.lang.Enum<com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind> {
                   public static PARAM: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind
                   public static LOCAL_VAR: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind
                   public static CAPTURED_VAR: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind
                   public static CAPTURED_THIS: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind
                   public static CAPTURED_OUTER_THIS: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind
                   public static TYPE_VAR: com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind
                   public static values(): com.sun.tools.javac.comp.LambdaToMethod$LambdaSymbolKind[]
                   valueOf<T>(...args: any[]): any
               }
               class LambdaToMethod$L2MSignatureGenerator extends com.sun.tools.javac.code.Types$SignatureGenerator {
                   sb: java.lang.StringBuilder
                   this$0: com.sun.tools.javac.comp.LambdaToMethod
                   constructor(arg0: com.sun.tools.javac.comp.LambdaToMethod)
                   append<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
               }
               class LambdaToMethod$1 {
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$JCMemberReference$ReferenceKind: int[]
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
                   static $SwitchMap$com$sun$tools$javac$comp$LambdaToMethod$LambdaSymbolKind: int[]
               }
               class LambdaToMethod extends com.sun.tools.javac.tree.TreeTranslator {
                   public static FLAG_SERIALIZABLE: int
                   public static FLAG_MARKERS: int
                   public static FLAG_BRIDGES: int
                   protected static unlambdaKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.LambdaToMethod>
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.comp.LambdaToMethod
                   translate<T>(...args: any[]): any
                   public translateTopLevelClass(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.tree.TreeMaker): com.sun.tools.javac.tree.JCTree
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitLambda(arg0: com.sun.tools.javac.tree.JCTree$JCLambda): void
                   public visitReference(arg0: com.sun.tools.javac.tree.JCTree$JCMemberReference): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   makeNewClass<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.code.Symtab
                   static access$100(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.util.Names
                   static access$200(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol$MethodSymbol
                   static access$1000(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: long, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.code.Type, arg4: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol$VarSymbol
                   static access$1100(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.tree.TreeMaker
                   static access$1200(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.comp.Env
                   static access$1300(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.comp.TransTypes
                   static access$1600(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.code.Types
                   static access$1700(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.comp.Attr
                   static access$1800(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.util.List, arg3: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.List
                   static access$1900(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.code.Type): void
                   static access$2200(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.util.Log
                   static access$2300(arg0: com.sun.tools.javac.comp.LambdaToMethod): boolean
                   static access$2400(arg0: com.sun.tools.javac.comp.LambdaToMethod): java.util.Map
                   static access$2500(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.comp.Lower
                   static access$2800(arg0: com.sun.tools.javac.comp.LambdaToMethod): com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext
                   static access$3100(arg0: com.sun.tools.javac.comp.LambdaToMethod): boolean
                   static access$3300(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: com.sun.tools.javac.code.Type): java.lang.String
                   static access$3800(arg0: com.sun.tools.javac.comp.LambdaToMethod, arg1: com.sun.tools.javac.code.Symbol): int
               }
               class AttrContextEnv extends com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> {
                   public constructor(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.AttrContext)
               }

            }
            namespace jvm {
               class ClassFile$Version extends java.lang.Enum<com.sun.tools.javac.jvm.ClassFile$Version> {
                   public static V45_3: com.sun.tools.javac.jvm.ClassFile$Version
                   public static V49: com.sun.tools.javac.jvm.ClassFile$Version
                   public static V50: com.sun.tools.javac.jvm.ClassFile$Version
                   public static V51: com.sun.tools.javac.jvm.ClassFile$Version
                   public static V52: com.sun.tools.javac.jvm.ClassFile$Version
                   public major: int
                   public minor: int
                   public static values(): com.sun.tools.javac.jvm.ClassFile$Version[]
                   valueOf<T>(...args: any[]): any
               }
               class ClassFile$NameAndType {
                   name: com.sun.tools.javac.util.Name
                   uniqueType: com.sun.tools.javac.code.Types$UniqueType
                   types: com.sun.tools.javac.code.Types
                   constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Types)
                   setType(arg0: com.sun.tools.javac.code.Type): void
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class ClassFile {
                   public static JAVA_MAGIC: int
                   public static CONSTANT_Utf8: int
                   public static CONSTANT_Unicode: int
                   public static CONSTANT_Integer: int
                   public static CONSTANT_Float: int
                   public static CONSTANT_Long: int
                   public static CONSTANT_Double: int
                   public static CONSTANT_Class: int
                   public static CONSTANT_String: int
                   public static CONSTANT_Fieldref: int
                   public static CONSTANT_Methodref: int
                   public static CONSTANT_InterfaceMethodref: int
                   public static CONSTANT_NameandType: int
                   public static CONSTANT_MethodHandle: int
                   public static CONSTANT_MethodType: int
                   public static CONSTANT_InvokeDynamic: int
                   public static REF_getField: int
                   public static REF_getStatic: int
                   public static REF_putField: int
                   public static REF_putStatic: int
                   public static REF_invokeVirtual: int
                   public static REF_invokeStatic: int
                   public static REF_invokeSpecial: int
                   public static REF_newInvokeSpecial: int
                   public static REF_invokeInterface: int
                   public static MAX_PARAMETERS: int
                   public static MAX_DIMENSIONS: int
                   public static MAX_CODE: int
                   public static MAX_LOCALS: int
                   public static MAX_STACK: int
                   public constructor()
                   internalize<T>(...args: any[]): any
                   externalize<T>(...args: any[]): any
               }
               interface ByteCodes {
                   public static illegal: int
                   public static nop: int
                   public static aconst_null: int
                   public static iconst_m1: int
                   public static iconst_0: int
                   public static iconst_1: int
                   public static iconst_2: int
                   public static iconst_3: int
                   public static iconst_4: int
                   public static iconst_5: int
                   public static lconst_0: int
                   public static lconst_1: int
                   public static fconst_0: int
                   public static fconst_1: int
                   public static fconst_2: int
                   public static dconst_0: int
                   public static dconst_1: int
                   public static bipush: int
                   public static sipush: int
                   public static ldc1: int
                   public static ldc2: int
                   public static ldc2w: int
                   public static iload: int
                   public static lload: int
                   public static fload: int
                   public static dload: int
                   public static aload: int
                   public static iload_0: int
                   public static iload_1: int
                   public static iload_2: int
                   public static iload_3: int
                   public static lload_0: int
                   public static lload_1: int
                   public static lload_2: int
                   public static lload_3: int
                   public static fload_0: int
                   public static fload_1: int
                   public static fload_2: int
                   public static fload_3: int
                   public static dload_0: int
                   public static dload_1: int
                   public static dload_2: int
                   public static dload_3: int
                   public static aload_0: int
                   public static aload_1: int
                   public static aload_2: int
                   public static aload_3: int
                   public static iaload: int
                   public static laload: int
                   public static faload: int
                   public static daload: int
                   public static aaload: int
                   public static baload: int
                   public static caload: int
                   public static saload: int
                   public static istore: int
                   public static lstore: int
                   public static fstore: int
                   public static dstore: int
                   public static astore: int
                   public static istore_0: int
                   public static istore_1: int
                   public static istore_2: int
                   public static istore_3: int
                   public static lstore_0: int
                   public static lstore_1: int
                   public static lstore_2: int
                   public static lstore_3: int
                   public static fstore_0: int
                   public static fstore_1: int
                   public static fstore_2: int
                   public static fstore_3: int
                   public static dstore_0: int
                   public static dstore_1: int
                   public static dstore_2: int
                   public static dstore_3: int
                   public static astore_0: int
                   public static astore_1: int
                   public static astore_2: int
                   public static astore_3: int
                   public static iastore: int
                   public static lastore: int
                   public static fastore: int
                   public static dastore: int
                   public static aastore: int
                   public static bastore: int
                   public static castore: int
                   public static sastore: int
                   public static pop: int
                   public static pop2: int
                   public static dup: int
                   public static dup_x1: int
                   public static dup_x2: int
                   public static dup2: int
                   public static dup2_x1: int
                   public static dup2_x2: int
                   public static swap: int
                   public static iadd: int
                   public static ladd: int
                   public static fadd: int
                   public static dadd: int
                   public static isub: int
                   public static lsub: int
                   public static fsub: int
                   public static dsub: int
                   public static imul: int
                   public static lmul: int
                   public static fmul: int
                   public static dmul: int
                   public static idiv: int
                   public static ldiv: int
                   public static fdiv: int
                   public static ddiv: int
                   public static imod: int
                   public static lmod: int
                   public static fmod: int
                   public static dmod: int
                   public static ineg: int
                   public static lneg: int
                   public static fneg: int
                   public static dneg: int
                   public static ishl: int
                   public static lshl: int
                   public static ishr: int
                   public static lshr: int
                   public static iushr: int
                   public static lushr: int
                   public static iand: int
                   public static land: int
                   public static ior: int
                   public static lor: int
                   public static ixor: int
                   public static lxor: int
                   public static iinc: int
                   public static i2l: int
                   public static i2f: int
                   public static i2d: int
                   public static l2i: int
                   public static l2f: int
                   public static l2d: int
                   public static f2i: int
                   public static f2l: int
                   public static f2d: int
                   public static d2i: int
                   public static d2l: int
                   public static d2f: int
                   public static int2byte: int
                   public static int2char: int
                   public static int2short: int
                   public static lcmp: int
                   public static fcmpl: int
                   public static fcmpg: int
                   public static dcmpl: int
                   public static dcmpg: int
                   public static ifeq: int
                   public static ifne: int
                   public static iflt: int
                   public static ifge: int
                   public static ifgt: int
                   public static ifle: int
                   public static if_icmpeq: int
                   public static if_icmpne: int
                   public static if_icmplt: int
                   public static if_icmpge: int
                   public static if_icmpgt: int
                   public static if_icmple: int
                   public static if_acmpeq: int
                   public static if_acmpne: int
                   public static goto_: int
                   public static jsr: int
                   public static ret: int
                   public static tableswitch: int
                   public static lookupswitch: int
                   public static ireturn: int
                   public static lreturn: int
                   public static freturn: int
                   public static dreturn: int
                   public static areturn: int
                   public static return_: int
                   public static getstatic: int
                   public static putstatic: int
                   public static getfield: int
                   public static putfield: int
                   public static invokevirtual: int
                   public static invokespecial: int
                   public static invokestatic: int
                   public static invokeinterface: int
                   public static invokedynamic: int
                   public static new_: int
                   public static newarray: int
                   public static anewarray: int
                   public static arraylength: int
                   public static athrow: int
                   public static checkcast: int
                   public static instanceof_: int
                   public static monitorenter: int
                   public static monitorexit: int
                   public static wide: int
                   public static multianewarray: int
                   public static if_acmp_null: int
                   public static if_acmp_nonnull: int
                   public static goto_w: int
                   public static jsr_w: int
                   public static breakpoint: int
                   public static ByteCodeCount: int
                   public static string_add: int
                   public static bool_not: int
                   public static bool_and: int
                   public static bool_or: int
                   public static ishll: int
                   public static lshll: int
                   public static ishrl: int
                   public static lshrl: int
                   public static iushrl: int
                   public static lushrl: int
                   public static nullchk: int
                   public static error: int
                   public static dontgoto: int
                   public static preShift: int
                   public static preMask: int
                   public static INTcode: int
                   public static LONGcode: int
                   public static FLOATcode: int
                   public static DOUBLEcode: int
                   public static OBJECTcode: int
                   public static BYTEcode: int
                   public static CHARcode: int
                   public static SHORTcode: int
                   public static VOIDcode: int
                   public static TypeCodeCount: int
                   public static typecodeNames: java.lang.String[]
               }
               class ClassReader$1 implements com.sun.tools.javac.code.Symbol$Completer {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader)
                   public complete(arg0: com.sun.tools.javac.code.Symbol): void
               }
               class ClassReader$BadClassFile extends com.sun.tools.javac.code.Symbol$CompletionFailure {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   public constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.code.Symbol$TypeSymbol, arg2: javax.tools.JavaFileObject, arg3: com.sun.tools.javac.util.JCDiagnostic)
               }
               class ClassReader$2 extends com.sun.tools.javac.code.Type$ClassType {
                   completed: boolean
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.List, arg3: com.sun.tools.javac.code.Symbol$TypeSymbol)
                   getEnclosingType<T>(...args: any[]): any
                   public setEnclosingType(arg0: com.sun.tools.javac.code.Type): void
               }
               class ClassReader$AttributeKind extends java.lang.Enum<com.sun.tools.javac.jvm.ClassReader$AttributeKind> {
                   public static CLASS: com.sun.tools.javac.jvm.ClassReader$AttributeKind
                   public static MEMBER: com.sun.tools.javac.jvm.ClassReader$AttributeKind
                   public static values(): com.sun.tools.javac.jvm.ClassReader$AttributeKind[]
                   valueOf<T>(...args: any[]): any
               }
               abstract class ClassReader$AttributeReader {
                   protected name: com.sun.tools.javac.util.Name
                   protected version: com.sun.tools.javac.jvm.ClassFile$Version
                   protected kinds: java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind>
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   protected constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.jvm.ClassFile$Version, arg2: java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind>)
                   protected accepts(arg0: com.sun.tools.javac.jvm.ClassReader$AttributeKind): boolean
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$3 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$4 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$5 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$6 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$7 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$8 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$9 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$10 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$11 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$12 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$13 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected accepts(arg0: com.sun.tools.javac.jvm.ClassReader$AttributeKind): boolean
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$14 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$15 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$16 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$17 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$18 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$19 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$20 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$21 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$22 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$23 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               class ClassReader$24 extends com.sun.tools.javac.jvm.ClassReader$AttributeReader {
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.util.Name, arg2: com.sun.tools.javac.jvm.ClassFile$Version, arg3: java.util.Set)
                   protected read(arg0: com.sun.tools.javac.code.Symbol, arg1: int): void
               }
               interface ClassReader$ProxyVisitor extends com.sun.tools.javac.code.Attribute$Visitor {
                   public visitEnumAttributeProxy(arg0: com.sun.tools.javac.jvm.ClassReader$EnumAttributeProxy): void
                   public visitArrayAttributeProxy(arg0: com.sun.tools.javac.jvm.ClassReader$ArrayAttributeProxy): void
                   public visitCompoundAnnotationProxy(arg0: com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy): void
               }
               class ClassReader$EnumAttributeProxy extends com.sun.tools.javac.code.Attribute {
                   enumType: com.sun.tools.javac.code.Type
                   enumerator: com.sun.tools.javac.util.Name
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.Name)
                   public accept(arg0: com.sun.tools.javac.code.Attribute$Visitor): void
                   toString<T>(...args: any[]): any
               }
               class ClassReader$ArrayAttributeProxy extends com.sun.tools.javac.code.Attribute {
                   values: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute>
                   constructor(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute>)
                   public accept(arg0: com.sun.tools.javac.code.Attribute$Visitor): void
                   toString<T>(...args: any[]): any
               }
               class ClassReader$CompoundAnnotationProxy extends com.sun.tools.javac.code.Attribute {
                   values: com.sun.tools.javac.util.List<com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Attribute>>
                   public constructor(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Attribute>>)
                   public accept(arg0: com.sun.tools.javac.code.Attribute$Visitor): void
                   toString<T>(...args: any[]): any
               }
               class ClassReader$TypeAnnotationProxy {
                   compound: com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy
                   position: com.sun.tools.javac.code.TypeAnnotationPosition
                   public constructor(arg0: com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy, arg1: com.sun.tools.javac.code.TypeAnnotationPosition)
               }
               class ClassReader$AnnotationDeproxy implements com.sun.tools.javac.jvm.ClassReader$ProxyVisitor {
                   result: com.sun.tools.javac.code.Attribute
                   type: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader)
                   deproxyCompoundList(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>
                   deproxyCompound(arg0: com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy): com.sun.tools.javac.code.Attribute$Compound
                   findAccessMethod(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol$MethodSymbol
                   deproxy(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Attribute): com.sun.tools.javac.code.Attribute
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
                   public visitEnumAttributeProxy(arg0: com.sun.tools.javac.jvm.ClassReader$EnumAttributeProxy): void
                   public visitArrayAttributeProxy(arg0: com.sun.tools.javac.jvm.ClassReader$ArrayAttributeProxy): void
                   public visitCompoundAnnotationProxy(arg0: com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy): void
               }
               class ClassReader$AnnotationDefaultCompleter extends com.sun.tools.javac.jvm.ClassReader$AnnotationDeproxy implements com.sun.tools.javac.comp.Annotate$Worker {
                   sym: com.sun.tools.javac.code.Symbol$MethodSymbol
                   value: com.sun.tools.javac.code.Attribute
                   classFile: javax.tools.JavaFileObject
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   toString<T>(...args: any[]): any
                   constructor(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol, arg2: com.sun.tools.javac.code.Attribute)
                   public run(): void
               }
               class ClassReader$AnnotationCompleter extends com.sun.tools.javac.jvm.ClassReader$AnnotationDeproxy implements com.sun.tools.javac.comp.Annotate$Worker {
                   sym: com.sun.tools.javac.code.Symbol
                   l: com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy>
                   classFile: javax.tools.JavaFileObject
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   toString<T>(...args: any[]): any
                   constructor(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy>)
                   public run(): void
               }
               class ClassReader$TypeAnnotationCompleter extends com.sun.tools.javac.jvm.ClassReader$AnnotationCompleter {
                   proxies: com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$TypeAnnotationProxy>
                   this$0: com.sun.tools.javac.jvm.ClassReader
                   constructor(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$TypeAnnotationProxy>)
                   deproxyTypeCompoundList(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$TypeAnnotationProxy>): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>
                   public run(): void
               }
               interface ClassReader$SourceCompleter {
                   public complete(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
               }
               class ClassReader$SourceFileObject extends com.sun.tools.javac.file.BaseFileObject {
                   public constructor(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.util.Name)
                   public toUri(): java.net.URI
                   public getName(): java.lang.String
                   public getShortName(): java.lang.String
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public openInputStream(): java.io.InputStream
                   public openOutputStream(): java.io.OutputStream
                   getCharContent<T>(...args: any[]): any
                   public openReader(arg0: boolean): java.io.Reader
                   public openWriter(): java.io.Writer
                   public getLastModified(): long
                   public delete(): boolean
                   protected inferBinaryName(arg0: java.lang.Iterable<java.io.File>): java.lang.String
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class ClassReader$25 {
                   static $SwitchMap$com$sun$tools$javac$code$TargetType: int[]
                   static $SwitchMap$javax$tools$JavaFileObject$Kind: int[]
               }
               class ClassReader {
                   protected static classReaderKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.ClassReader>
                   public static INITIAL_BUFFER_SIZE: int
                   annotate: com.sun.tools.javac.comp.Annotate
                   verbose: boolean
                   checkClassFile: boolean
                   public readAllOfClassFile: boolean
                   allowGenerics: boolean
                   allowVarargs: boolean
                   allowAnnotations: boolean
                   allowSimplifiedVarargs: boolean
                   lintClassfile: boolean
                   public saveParameterNames: boolean
                   public preferSource: boolean
                   public profile: com.sun.tools.javac.jvm.Profile
                   log: com.sun.tools.javac.util.Log
                   syms: com.sun.tools.javac.code.Symtab
                   types: com.sun.tools.javac.code.Types
                   names: com.sun.tools.javac.util.Names
                   completionFailureName: com.sun.tools.javac.util.Name
                   diagFactory: com.sun.tools.javac.util.JCDiagnostic$Factory
                   public sourceCompleter: com.sun.tools.javac.jvm.ClassReader$SourceCompleter
                   protected typevars: com.sun.tools.javac.code.Scope
                   protected currentClassFile: javax.tools.JavaFileObject
                   protected currentOwner: com.sun.tools.javac.code.Symbol
                   buf: byte[]
                   protected bp: int
                   poolObj: java.lang.Object[]
                   poolIdx: int[]
                   majorVersion: int
                   minorVersion: int
                   parameterNameIndices: int[]
                   haveParameterNameIndices: boolean
                   sawMethodParameters: boolean
                   warnedAttrs: java.util.Set<com.sun.tools.javac.util.Name>
                   signature: byte[]
                   sigp: int
                   siglimit: int
                   sigEnterPhase: boolean
                   signatureBuffer: byte[]
                   sbp: int
                   protected CLASS_ATTRIBUTE: java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind>
                   protected MEMBER_ATTRIBUTE: java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind>
                   protected CLASS_OR_MEMBER_ATTRIBUTE: java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind>
                   protected attributeReaders: java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.jvm.ClassReader$AttributeReader>
                   protected currentLoc: javax.tools.JavaFileManager$Location
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.jvm.ClassReader
                   public init(arg0: com.sun.tools.javac.code.Symtab): void
                   protected constructor(arg0: com.sun.tools.javac.util.Context, arg1: boolean)
                   public badClassFile(arg0: java.lang.String, ...arg1: java.lang.Object[]): com.sun.tools.javac.jvm.ClassReader$BadClassFile
                   nextChar(): char
                   nextByte(): int
                   nextInt(): int
                   getChar(arg0: int): char
                   getInt(arg0: int): int
                   getLong(arg0: int): long
                   getFloat(arg0: int): float
                   getDouble(arg0: int): double
                   indexPool(): void
                   readPool(arg0: int): java.lang.Object
                   readType(arg0: int): com.sun.tools.javac.code.Type
                   readClassOrType(arg0: int): java.lang.Object
                   readTypeParams(arg0: int): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   readClassSymbol(arg0: int): com.sun.tools.javac.code.Symbol$ClassSymbol
                   readName(arg0: int): com.sun.tools.javac.util.Name
                   readNameAndType(arg0: int): com.sun.tools.javac.jvm.ClassFile$NameAndType
                   sigToType<T>(...args: any[]): any
                   classSigToType(): com.sun.tools.javac.code.Type
                   sigToTypes(arg0: char): com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>
                   sigToTypeParams<T>(...args: any[]): any
                   sigToTypeParam(): com.sun.tools.javac.code.Type
                   findTypeVar(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Type
                   unrecognized(arg0: com.sun.tools.javac.util.Name): void
                   protected readEnclosingMethodAttr(arg0: com.sun.tools.javac.code.Symbol): void
                   readMemberAttrs(arg0: com.sun.tools.javac.code.Symbol): void
                   readAttrs(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.jvm.ClassReader$AttributeKind): void
                   readClassAttrs(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   readCode(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.jvm.Code
                   attachAnnotations(arg0: com.sun.tools.javac.code.Symbol): void
                   attachParameterAnnotations(arg0: com.sun.tools.javac.code.Symbol): void
                   attachTypeAnnotations(arg0: com.sun.tools.javac.code.Symbol): void
                   attachAnnotationDefault(arg0: com.sun.tools.javac.code.Symbol): void
                   readTypeOrClassSymbol(arg0: int): com.sun.tools.javac.code.Type
                   readEnumType(arg0: int): com.sun.tools.javac.code.Type
                   readCompoundAnnotation(): com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy
                   readTypeAnnotation(): com.sun.tools.javac.jvm.ClassReader$TypeAnnotationProxy
                   readPosition(): com.sun.tools.javac.code.TypeAnnotationPosition
                   readAttributeValue(): com.sun.tools.javac.code.Attribute
                   readField(): com.sun.tools.javac.code.Symbol$VarSymbol
                   readMethod(): com.sun.tools.javac.code.Symbol$MethodSymbol
                   initParameterNames(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   setParameterNames(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Type): void
                   skipBytes(arg0: int): void
                   skipMember(): void
                   enterTypevars<T>(...args: any[]): any
                   readClass(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   readInnerClasses(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   adjustFieldFlags(arg0: long): long
                   adjustMethodFlags(arg0: long): long
                   adjustClassFlags(arg0: long): long
                   public defineClass(arg0: com.sun.tools.javac.util.Name, arg1: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.code.Symbol$ClassSymbol
                   enterClass<T>(...args: any[]): any
                   public loadClass(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.code.Symbol$ClassSymbol
                   public packageExists(arg0: com.sun.tools.javac.util.Name): boolean
                   enterPackage<T>(...args: any[]): any
                   protected includeClassFile(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: javax.tools.JavaFileObject): void
                   protected preferredFileObject(arg0: javax.tools.JavaFileObject, arg1: javax.tools.JavaFileObject): javax.tools.JavaFileObject
                   protected getPackageFileKinds(): java.util.EnumSet<javax.tools.JavaFileObject$Kind>
                   protected extraFileActions(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: javax.tools.JavaFileObject): void
                   static access$000(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: com.sun.tools.javac.code.Symbol): void
                   static access$100(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: javax.tools.JavaFileObject, arg2: com.sun.tools.javac.util.JCDiagnostic): com.sun.tools.javac.util.JCDiagnostic
                   static access$202(arg0: com.sun.tools.javac.jvm.ClassReader, arg1: boolean): boolean
               }
               class UninitializedType extends com.sun.tools.javac.code.Type$DelegatedType {
                   public offset: int
                   public static uninitializedThis(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.jvm.UninitializedType
                   public static uninitializedObject(arg0: com.sun.tools.javac.code.Type, arg1: int): com.sun.tools.javac.jvm.UninitializedType
                   initializedType(): com.sun.tools.javac.code.Type
               }
               class Pool$Method extends com.sun.tools.javac.code.Symbol$DelegatedSymbol<com.sun.tools.javac.code.Symbol$MethodSymbol> {
                   uniqueType: com.sun.tools.javac.code.Types$UniqueType
                   constructor(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.tools.javac.code.Types)
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class Pool$DynamicMethod extends com.sun.tools.javac.jvm.Pool$Method {
                   public uniqueStaticArgs: java.lang.Object[]
                   constructor(arg0: com.sun.tools.javac.code.Symbol$DynamicMethodSymbol, arg1: com.sun.tools.javac.code.Types)
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class Pool$Variable extends com.sun.tools.javac.code.Symbol$DelegatedSymbol<com.sun.tools.javac.code.Symbol$VarSymbol> {
                   uniqueType: com.sun.tools.javac.code.Types$UniqueType
                   constructor(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: com.sun.tools.javac.code.Types)
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class Pool$MethodHandle$1 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.util.Name> {
                   this$0: com.sun.tools.javac.jvm.Pool$MethodHandle
                   constructor(arg0: com.sun.tools.javac.jvm.Pool$MethodHandle)
                   accepts<T>(...args: any[]): any
               }
               class Pool$MethodHandle$2 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.util.Name> {
                   this$0: com.sun.tools.javac.jvm.Pool$MethodHandle
                   constructor(arg0: com.sun.tools.javac.jvm.Pool$MethodHandle)
                   accepts<T>(...args: any[]): any
               }
               class Pool$MethodHandle {
                   refKind: int
                   refSym: com.sun.tools.javac.code.Symbol
                   uniqueType: com.sun.tools.javac.code.Types$UniqueType
                   nonInitFilter: com.sun.tools.javac.util.Filter<com.sun.tools.javac.util.Name>
                   initFilter: com.sun.tools.javac.util.Filter<com.sun.tools.javac.util.Name>
                   public constructor(arg0: int, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.tools.javac.code.Types)
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
               }
               class Pool {
                   public static MAX_ENTRIES: int
                   public static MAX_STRING_LENGTH: int
                   pp: int
                   pool: java.lang.Object[]
                   indices: java.util.Map<java.lang.Object, java.lang.Integer>
                   types: com.sun.tools.javac.code.Types
                   constructor(...args: any[])
                   public numEntries(): int
                   public reset(): void
                   public put(arg0: java.lang.Object): int
                   makePoolValue(arg0: java.lang.Object): java.lang.Object
                   public get(arg0: java.lang.Object): int
               }
               class ClassWriter$CWSignatureGenerator extends com.sun.tools.javac.code.Types$SignatureGenerator {
                   sigbuf: com.sun.tools.javac.util.ByteBuffer
                   this$0: com.sun.tools.javac.jvm.ClassWriter
                   constructor(arg0: com.sun.tools.javac.jvm.ClassWriter, arg1: com.sun.tools.javac.code.Types)
                   public assembleSig(arg0: com.sun.tools.javac.code.Type): void
                   append<T>(...args: any[]): any
                   protected classReference(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   static access$200(arg0: com.sun.tools.javac.jvm.ClassWriter$CWSignatureGenerator): boolean
                   static access$300(arg0: com.sun.tools.javac.jvm.ClassWriter$CWSignatureGenerator): com.sun.tools.javac.util.Name
                   static access$400(arg0: com.sun.tools.javac.jvm.ClassWriter$CWSignatureGenerator): void
               }
               class ClassWriter$PoolOverflow extends java.lang.Exception {
                   public constructor()
               }
               class ClassWriter$StringOverflow extends java.lang.Exception {
                   public value: java.lang.String
                   public constructor(arg0: java.lang.String)
               }
               class ClassWriter$AttributeWriter implements com.sun.tools.javac.code.Attribute$Visitor {
                   this$0: com.sun.tools.javac.jvm.ClassWriter
                   constructor(arg0: com.sun.tools.javac.jvm.ClassWriter)
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
               }
               class ClassWriter$StackMapTableFrame$SameFrame extends com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame {
                   offsetDelta: int
                   constructor(arg0: int)
                   getFrameType(): int
                   write(arg0: com.sun.tools.javac.jvm.ClassWriter): void
               }
               class ClassWriter$StackMapTableFrame$SameLocals1StackItemFrame extends com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame {
                   offsetDelta: int
                   stack: com.sun.tools.javac.code.Type
                   constructor(arg0: int, arg1: com.sun.tools.javac.code.Type)
                   getFrameType(): int
                   write(arg0: com.sun.tools.javac.jvm.ClassWriter): void
               }
               class ClassWriter$StackMapTableFrame$ChopFrame extends com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame {
                   frameType: int
                   offsetDelta: int
                   constructor(arg0: int, arg1: int)
                   getFrameType(): int
                   write(arg0: com.sun.tools.javac.jvm.ClassWriter): void
               }
               class ClassWriter$StackMapTableFrame$AppendFrame extends com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame {
                   frameType: int
                   offsetDelta: int
                   locals: com.sun.tools.javac.code.Type[]
                   constructor(arg0: int, arg1: int, arg2: com.sun.tools.javac.code.Type[])
                   getFrameType(): int
                   write(arg0: com.sun.tools.javac.jvm.ClassWriter): void
               }
               class ClassWriter$StackMapTableFrame$FullFrame extends com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame {
                   offsetDelta: int
                   locals: com.sun.tools.javac.code.Type[]
                   stack: com.sun.tools.javac.code.Type[]
                   constructor(arg0: int, arg1: com.sun.tools.javac.code.Type[], arg2: com.sun.tools.javac.code.Type[])
                   getFrameType(): int
                   write(arg0: com.sun.tools.javac.jvm.ClassWriter): void
               }
               abstract class ClassWriter$StackMapTableFrame {
                   constructor()
                   getFrameType(): int
                   write(arg0: com.sun.tools.javac.jvm.ClassWriter): void
                   static getInstance(arg0: com.sun.tools.javac.jvm.Code$StackMapFrame, arg1: int, arg2: com.sun.tools.javac.code.Type[], arg3: com.sun.tools.javac.code.Types): com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame
                   static isInt(arg0: com.sun.tools.javac.code.Type): boolean
                   static isSameType(arg0: com.sun.tools.javac.code.Type, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.code.Types): boolean
                   static compare(arg0: com.sun.tools.javac.code.Type[], arg1: com.sun.tools.javac.code.Type[], arg2: com.sun.tools.javac.code.Types): int
               }
               class ClassWriter$1 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
                   static $SwitchMap$com$sun$tools$javac$code$Attribute$RetentionPolicy: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TargetType: int[]
                   static $SwitchMap$com$sun$tools$javac$jvm$Code$StackMapFormat: int[]
               }
               class ClassWriter extends com.sun.tools.javac.jvm.ClassFile {
                   protected static classWriterKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.ClassWriter>
                   debugstackmap: boolean
                   static DATA_BUF_SIZE: int
                   static POOL_BUF_SIZE: int
                   databuf: com.sun.tools.javac.util.ByteBuffer
                   poolbuf: com.sun.tools.javac.util.ByteBuffer
                   pool: com.sun.tools.javac.jvm.Pool
                   innerClasses: java.util.Set<com.sun.tools.javac.code.Symbol$ClassSymbol>
                   innerClassesQueue: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Symbol$ClassSymbol>
                   bootstrapMethods: java.util.Map<com.sun.tools.javac.jvm.Pool$DynamicMethod, com.sun.tools.javac.jvm.Pool$MethodHandle>
                   static SAME_FRAME_SIZE: int
                   static SAME_LOCALS_1_STACK_ITEM_EXTENDED: int
                   static SAME_FRAME_EXTENDED: int
                   static FULL_FRAME: int
                   static MAX_LOCAL_LENGTH_DIFF: int
                   awriter: com.sun.tools.javac.jvm.ClassWriter$AttributeWriter
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.jvm.ClassWriter
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public static flagNames(arg0: long): java.lang.String
                   putChar(arg0: com.sun.tools.javac.util.ByteBuffer, arg1: int, arg2: int): void
                   putInt(arg0: com.sun.tools.javac.util.ByteBuffer, arg1: int, arg2: int): void
                   typeSig(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Name
                   public xClassName(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.util.Name
                   writePool(arg0: com.sun.tools.javac.jvm.Pool): void
                   fieldName(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.util.Name
                   nameType(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.jvm.ClassFile$NameAndType
                   writeAttr(arg0: com.sun.tools.javac.util.Name): int
                   endAttr(arg0: int): void
                   beginAttrs(): int
                   endAttrs(arg0: int, arg1: int): void
                   writeEnclosingMethodAttribute<T>(...args: any[]): any
                   writeFlagAttrs(arg0: long): int
                   writeMemberAttrs(arg0: com.sun.tools.javac.code.Symbol): int
                   writeMethodParametersAttr(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): int
                   writeParameterAttrs(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): int
                   writeJavaAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>): int
                   writeTypeAnnotations(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>, arg1: boolean): int
                   writeCompoundAttribute(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   writeTypeAnnotation(arg0: com.sun.tools.javac.code.Attribute$TypeCompound): void
                   writePosition(arg0: com.sun.tools.javac.code.TypeAnnotationPosition): void
                   enterInner(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   writeInnerClasses(): void
                   writeBootstrapMethods(): void
                   writeField(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): void
                   writeMethod(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): void
                   writeCode(arg0: com.sun.tools.javac.jvm.Code): void
                   writeStackMap(arg0: com.sun.tools.javac.jvm.Code): void
                   writeStackMapType(arg0: com.sun.tools.javac.code.Type): void
                   writeFields(arg0: com.sun.tools.javac.code.Scope$Entry): void
                   writeMethods(arg0: com.sun.tools.javac.code.Scope$Entry): void
                   public writeClass(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): javax.tools.JavaFileObject
                   public writeClassFile(arg0: java.io.OutputStream, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   protected writeExtraClassAttributes(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): int
                   adjustFlags(arg0: long): int
                   getLastModified(arg0: javax.tools.FileObject): long
                   static access$000(arg0: com.sun.tools.javac.jvm.ClassWriter): com.sun.tools.javac.code.Types
                   static access$100(arg0: com.sun.tools.javac.jvm.ClassWriter): com.sun.tools.javac.util.Names
               }
               class Code$StackMapFormat$1 extends com.sun.tools.javac.jvm.Code$StackMapFormat {
                   constructor(arg0: java.lang.String, arg1: int)
                   getAttributeName(arg0: com.sun.tools.javac.util.Names): com.sun.tools.javac.util.Name
               }
               class Code$StackMapFormat$2 extends com.sun.tools.javac.jvm.Code$StackMapFormat {
                   constructor(arg0: java.lang.String, arg1: int)
                   getAttributeName(arg0: com.sun.tools.javac.util.Names): com.sun.tools.javac.util.Name
               }
               class Code$StackMapFormat extends java.lang.Enum<com.sun.tools.javac.jvm.Code$StackMapFormat> {
                   public static NONE: com.sun.tools.javac.jvm.Code$StackMapFormat
                   public static CLDC: com.sun.tools.javac.jvm.Code$StackMapFormat
                   public static JSR202: com.sun.tools.javac.jvm.Code$StackMapFormat
                   public static values(): com.sun.tools.javac.jvm.Code$StackMapFormat[]
                   valueOf<T>(...args: any[]): any
                   getAttributeName(arg0: com.sun.tools.javac.util.Names): com.sun.tools.javac.util.Name
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.jvm.Code$1)
               }
               class Code$StackMapFrame {
                   pc: int
                   locals: com.sun.tools.javac.code.Type[]
                   stack: com.sun.tools.javac.code.Type[]
                   constructor()
               }
               class Code$Chain {
                   public pc: int
                   state: com.sun.tools.javac.jvm.Code$State
                   public next: com.sun.tools.javac.jvm.Code$Chain
                   public constructor(arg0: int, arg1: com.sun.tools.javac.jvm.Code$Chain, arg2: com.sun.tools.javac.jvm.Code$State)
               }
               class Code$State implements java.lang.Cloneable {
                   defined: com.sun.tools.javac.util.Bits
                   stack: com.sun.tools.javac.code.Type[]
                   stacksize: int
                   locks: int[]
                   nlocks: int
                   this$0: com.sun.tools.javac.jvm.Code
                   constructor(arg0: com.sun.tools.javac.jvm.Code)
                   dup(): com.sun.tools.javac.jvm.Code$State
                   lock(arg0: int): void
                   unlock(arg0: int): void
                   push(arg0: com.sun.tools.javac.code.Type): void
                   pop1(): com.sun.tools.javac.code.Type
                   peek(): com.sun.tools.javac.code.Type
                   pop2(): com.sun.tools.javac.code.Type
                   pop<T>(...args: any[]): any
                   forceStackTop(arg0: com.sun.tools.javac.code.Type): void
                   markInitialized(arg0: com.sun.tools.javac.jvm.UninitializedType): void
                   join(arg0: com.sun.tools.javac.jvm.Code$State): com.sun.tools.javac.jvm.Code$State
                   error(): com.sun.tools.javac.code.Type
                   dump<T>(...args: any[]): any
               }
               class Code$LocalVar$Range {
                   start_pc: char
                   length: char
                   this$0: com.sun.tools.javac.jvm.Code$LocalVar
                   constructor(...args: any[])
                   closed(): boolean
                   toString<T>(...args: any[]): any
               }
               class Code$LocalVar {
                   sym: com.sun.tools.javac.code.Symbol$VarSymbol
                   reg: char
                   aliveRanges: java.util.List<com.sun.tools.javac.jvm.Code$LocalVar$Range>
                   constructor(arg0: com.sun.tools.javac.code.Symbol$VarSymbol)
                   public dup(): com.sun.tools.javac.jvm.Code$LocalVar
                   firstRange(): com.sun.tools.javac.jvm.Code$LocalVar$Range
                   lastRange(): com.sun.tools.javac.jvm.Code$LocalVar$Range
                   removeLastRange(): void
                   toString<T>(...args: any[]): any
                   public openRange(arg0: char): void
                   public closeRange(arg0: char): void
                   public hasOpenRange(): boolean
                   public isLastRangeInitialized(): boolean
                   public getWidestRange(): com.sun.tools.javac.jvm.Code$LocalVar$Range
               }
               class Code$Mneumonics {
                   static access$200(): java.lang.String[]
               }
               class Code$1 {
                   static $SwitchMap$com$sun$tools$javac$jvm$Code$StackMapFormat: int[]
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
               }
               class Code {
                   public debugCode: boolean
                   public needStackMap: boolean
                   types: com.sun.tools.javac.code.Types
                   syms: com.sun.tools.javac.code.Symtab
                   public max_stack: int
                   public max_locals: int
                   public code: byte[]
                   public cp: int
                   catchInfo: com.sun.tools.javac.util.ListBuffer<char[]>
                   lineInfo: com.sun.tools.javac.util.List<char[]>
                   public crt: com.sun.tools.javac.jvm.CRTable
                   public fatcode: boolean
                   state: com.sun.tools.javac.jvm.Code$State
                   public nextreg: int
                   pendingJumps: com.sun.tools.javac.jvm.Code$Chain
                   pendingStatPos: int
                   pendingStackMap: boolean
                   stackMap: com.sun.tools.javac.jvm.Code$StackMapFormat
                   varDebugInfo: boolean
                   lineDebugInfo: boolean
                   lineMap: com.sun.tools.javac.util.Position$LineMap
                   pool: com.sun.tools.javac.jvm.Pool
                   meth: com.sun.tools.javac.code.Symbol$MethodSymbol
                   stackMapBuffer: com.sun.tools.javac.jvm.Code$StackMapFrame[]
                   stackMapTableBuffer: com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame[]
                   stackMapBufferSize: int
                   lastStackMapPC: int
                   lastFrame: com.sun.tools.javac.jvm.Code$StackMapFrame
                   frameBeforeLast: com.sun.tools.javac.jvm.Code$StackMapFrame
                   static jsrReturnValue: com.sun.tools.javac.code.Type
                   lvar: com.sun.tools.javac.jvm.Code$LocalVar[]
                   varBuffer: com.sun.tools.javac.jvm.Code$LocalVar[]
                   varBufferSize: int
                   public checkLimits(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.util.Log): boolean
                   public constructor(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: boolean, arg2: com.sun.tools.javac.util.Position$LineMap, arg3: boolean, arg4: com.sun.tools.javac.jvm.Code$StackMapFormat, arg5: boolean, arg6: com.sun.tools.javac.jvm.CRTable, arg7: com.sun.tools.javac.code.Symtab, arg8: com.sun.tools.javac.code.Types, arg9: com.sun.tools.javac.jvm.Pool)
                   public static typecode(arg0: com.sun.tools.javac.code.Type): int
                   public static truncate(arg0: int): int
                   width<T>(...args: any[]): any
                   public static arraycode(arg0: com.sun.tools.javac.code.Type): int
                   public curCP(): int
                   public emit4(arg0: int): void
                   postop(): void
                   public emitLdc(arg0: int): void
                   public emitMultianewarray(arg0: int, arg1: int, arg2: com.sun.tools.javac.code.Type): void
                   public emitNewarray(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitAnewarray(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitInvokeinterface(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitInvokespecial(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitInvokestatic(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitInvokevirtual(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitInvokedynamic(arg0: int, arg1: com.sun.tools.javac.code.Type): void
                   public emitop0(arg0: int): void
                   public emitop1(arg0: int, arg1: int): void
                   emitop1w<T>(...args: any[]): any
                   public emitop2(arg0: int, arg1: int): void
                   public emitop4(arg0: int, arg1: int): void
                   public align(arg0: int): void
                   public put4(arg0: int, arg1: int): void
                   public get4(arg0: int): int
                   public isAlive(): boolean
                   public markDead(): void
                   entryPoint<T>(...args: any[]): any
                   public emitStackMap(): void
                   emitCLDCStackMap(arg0: int, arg1: int): void
                   emitStackMapFrame(arg0: int, arg1: int): void
                   getInitialFrame(): com.sun.tools.javac.jvm.Code$StackMapFrame
                   public static negate(arg0: int): int
                   public emitJump(arg0: int): int
                   public branch(arg0: int): com.sun.tools.javac.jvm.Code$Chain
                   resolve<T>(...args: any[]): any
                   public resolvePending(): void
                   public static mergeChains(arg0: com.sun.tools.javac.jvm.Code$Chain, arg1: com.sun.tools.javac.jvm.Code$Chain): com.sun.tools.javac.jvm.Code$Chain
                   public addCatch(arg0: char, arg1: char, arg2: char, arg3: char): void
                   public compressCatchTable(): void
                   public addLineNumber(arg0: char, arg1: char): void
                   public statBegin(arg0: int): void
                   public markStatBegin(): void
                   adjustAliveRanges(arg0: int, arg1: int): void
                   public getLVTSize(): int
                   setDefined<T>(...args: any[]): any
                   public setUndefined(arg0: int): void
                   public fillExceptionParameterPositions(): void
                   putVar(arg0: com.sun.tools.javac.jvm.Code$LocalVar): void
                   public newLocal(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): int
                   public newRegSegment(): void
                   public endScopes(arg0: int): void
                   public static mnem(arg0: int): java.lang.String
                   static access$100(arg0: com.sun.tools.javac.jvm.Code): boolean
               }
               class Target extends java.lang.Enum<com.sun.tools.javac.jvm.Target> {
                   public static JDK1_1: com.sun.tools.javac.jvm.Target
                   public static JDK1_2: com.sun.tools.javac.jvm.Target
                   public static JDK1_3: com.sun.tools.javac.jvm.Target
                   public static JDK1_4: com.sun.tools.javac.jvm.Target
                   public static JDK1_5: com.sun.tools.javac.jvm.Target
                   public static JDK1_6: com.sun.tools.javac.jvm.Target
                   public static JDK1_7: com.sun.tools.javac.jvm.Target
                   public static JDK1_8: com.sun.tools.javac.jvm.Target
                   public name: java.lang.String
                   public majorVersion: int
                   public minorVersion: int
                   public static DEFAULT: com.sun.tools.javac.jvm.Target
                   public static values(): com.sun.tools.javac.jvm.Target[]
                   valueOf<T>(...args: any[]): any
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.jvm.Target
                   public static MIN(): com.sun.tools.javac.jvm.Target
                   public static MAX(): com.sun.tools.javac.jvm.Target
                   public static lookup(arg0: java.lang.String): com.sun.tools.javac.jvm.Target
                   public requiresIproxy(): boolean
                   public initializeFieldsBeforeSuper(): boolean
                   public obeyBinaryCompatibility(): boolean
                   public arrayBinaryCompatibility(): boolean
                   public interfaceFieldsBinaryCompatibility(): boolean
                   public interfaceObjectOverridesBinaryCompatibility(): boolean
                   public usePrivateSyntheticFields(): boolean
                   public useInnerCacheClass(): boolean
                   public generateCLDCStackmap(): boolean
                   public generateStackMapTable(): boolean
                   public isPackageInfoSynthetic(): boolean
                   public generateEmptyAfterBig(): boolean
                   public useStringBuilder(): boolean
                   public useSyntheticFlag(): boolean
                   public useEnumFlag(): boolean
                   public useAnnotationFlag(): boolean
                   public useVarargsFlag(): boolean
                   public useBridgeFlag(): boolean
                   public syntheticNameChar(): char
                   public hasClassLiterals(): boolean
                   public hasInvokedynamic(): boolean
                   public hasMethodHandles(): boolean
                   public classLiteralsNoInit(): boolean
                   public hasInitCause(): boolean
                   public boxWithConstructors(): boolean
                   public hasIterable(): boolean
                   public hasEnclosingMethodAttribute(): boolean
               }
               class Profile$1 extends com.sun.tools.javac.jvm.Profile {
                   constructor(arg0: java.lang.String, arg1: int)
                   public isValid(arg0: com.sun.tools.javac.jvm.Target): boolean
               }
               class Profile extends java.lang.Enum<com.sun.tools.javac.jvm.Profile> {
                   public static COMPACT1: com.sun.tools.javac.jvm.Profile
                   public static COMPACT2: com.sun.tools.javac.jvm.Profile
                   public static COMPACT3: com.sun.tools.javac.jvm.Profile
                   public static DEFAULT: com.sun.tools.javac.jvm.Profile
                   public name: java.lang.String
                   public value: int
                   targets: java.util.Set<com.sun.tools.javac.jvm.Target>
                   public static values(): com.sun.tools.javac.jvm.Profile[]
                   valueOf<T>(...args: any[]): any
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.jvm.Profile
                   lookup<T>(...args: any[]): any
                   public isValid(arg0: com.sun.tools.javac.jvm.Target): boolean
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.jvm.Profile$1)
               }
               class CRTable$SourceComputer extends com.sun.tools.javac.tree.JCTree$Visitor {
                   result: com.sun.tools.javac.jvm.CRTable$SourceRange
                   this$0: com.sun.tools.javac.jvm.CRTable
                   constructor(arg0: com.sun.tools.javac.jvm.CRTable)
                   csp<T>(...args: any[]): any
                   public cspCases(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>): com.sun.tools.javac.jvm.CRTable$SourceRange
                   public cspCatchers(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>): com.sun.tools.javac.jvm.CRTable$SourceRange
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                   public visitTypeArray(arg0: com.sun.tools.javac.tree.JCTree$JCArrayTypeTree): void
                   public visitTypeApply(arg0: com.sun.tools.javac.tree.JCTree$JCTypeApply): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public visitTypeParameter(arg0: com.sun.tools.javac.tree.JCTree$JCTypeParameter): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitErroneous(arg0: com.sun.tools.javac.tree.JCTree$JCErroneous): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public startPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public endPos(arg0: com.sun.tools.javac.tree.JCTree): int
               }
               class CRTable$CRTEntry {
                   tree: java.lang.Object
                   flags: int
                   startPc: int
                   endPc: int
                   constructor(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int)
               }
               class CRTable$SourceRange {
                   startPos: int
                   endPos: int
                   constructor(...args: any[])
                   mergeWith(arg0: com.sun.tools.javac.jvm.CRTable$SourceRange): com.sun.tools.javac.jvm.CRTable$SourceRange
               }
               class CRTable implements com.sun.tools.javac.jvm.CRTFlags {
                   methodTree: com.sun.tools.javac.tree.JCTree$JCMethodDecl
                   public constructor(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl, arg1: com.sun.tools.javac.tree.EndPosTable)
                   public put(arg0: java.lang.Object, arg1: int, arg2: int, arg3: int): void
                   public writeCRT(arg0: com.sun.tools.javac.util.ByteBuffer, arg1: com.sun.tools.javac.util.Position$LineMap, arg2: com.sun.tools.javac.util.Log): int
                   public length(): int
                   static access$000(arg0: com.sun.tools.javac.jvm.CRTable): java.util.Map
                   static access$100(arg0: com.sun.tools.javac.jvm.CRTable): com.sun.tools.javac.tree.EndPosTable
               }
               interface CRTFlags {
                   public static CRT_STATEMENT: int
                   public static CRT_BLOCK: int
                   public static CRT_ASSIGNMENT: int
                   public static CRT_FLOW_CONTROLLER: int
                   public static CRT_FLOW_TARGET: int
                   public static CRT_INVOKE: int
                   public static CRT_CREATE: int
                   public static CRT_BRANCH_TRUE: int
                   public static CRT_BRANCH_FALSE: int
                   public static CRT_VALID_FLAGS: int
               }
               class JNIWriter$Mangle$Type {
                   public static CLASS: int
                   public static FIELDSTUB: int
                   public static FIELD: int
                   public static JNI: int
                   public static SIGNATURE: int
                   public static METHOD_JDK_1: int
                   public static METHOD_JNI_SHORT: int
                   public static METHOD_JNI_LONG: int
                   public constructor()
               }
               class JNIWriter$Mangle {
                   constructor(arg0: javax.lang.model.util.Elements, arg1: javax.lang.model.util.Types)
                   public mangle(arg0: java.lang.CharSequence, arg1: int): java.lang.String
                   public mangleMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.TypeElement, arg2: int): java.lang.String
                   public mangleChar(arg0: char): java.lang.String
               }
               class JNIWriter$TypeSignature$SignatureException extends java.lang.Exception {
                   constructor(arg0: java.lang.String)
               }
               class JNIWriter$TypeSignature$1 extends javax.lang.model.util.SimpleTypeVisitor8<javax.lang.model.element.Name, java.lang.Void> {
                   this$0: com.sun.tools.javac.jvm.JNIWriter$TypeSignature
                   constructor(arg0: com.sun.tools.javac.jvm.JNIWriter$TypeSignature)
                   visitArray<T>(...args: any[]): any
                   visitDeclared<T>(...args: any[]): any
                   visitPrimitive<T>(...args: any[]): any
                   visitNoType<T>(...args: any[]): any
                   visitTypeVariable<T>(...args: any[]): any
               }
               class JNIWriter$TypeSignature {
                   elems: javax.lang.model.util.Elements
                   public constructor(arg0: javax.lang.model.util.Elements)
                   getTypeSignature<T>(...args: any[]): any
                   dimensions(arg0: javax.lang.model.type.TypeMirror): int
                   qualifiedTypeName(arg0: javax.lang.model.type.TypeMirror): java.lang.String
               }
               class JNIWriter$1 {
                   static $SwitchMap$javax$lang$model$type$TypeKind: int[]
               }
               class JNIWriter {
                   protected static jniWriterKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.JNIWriter>
                   elements: com.sun.tools.javac.model.JavacElements
                   types: com.sun.tools.javac.model.JavacTypes
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.jvm.JNIWriter
                   public needsHeader(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                   write<T>(...args: any[]): any
                   protected writeStatics(arg0: java.io.Writer, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
                   getAllFields(arg0: javax.lang.model.element.TypeElement): java.util.List<javax.lang.model.element.VariableElement>
                   protected defineForStatic(arg0: javax.lang.model.element.TypeElement, arg1: javax.lang.model.element.VariableElement): java.lang.String
                   protected writeMethods(arg0: java.io.Writer, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: java.lang.String): void
                   signature(arg0: javax.lang.model.element.ExecutableElement): java.lang.String
                   protected jniType(arg0: javax.lang.model.type.TypeMirror): java.lang.String
                   protected fileTop(): java.lang.String
                   protected includes(): java.lang.String
                   protected cppGuardBegin(): java.lang.String
                   protected cppGuardEnd(): java.lang.String
                   protected guardBegin(arg0: java.lang.String): java.lang.String
                   protected guardEnd(arg0: java.lang.String): java.lang.String
                   protected print(arg0: java.io.Writer, arg1: java.lang.String): void
                   protected println(arg0: java.io.Writer, arg1: java.lang.String): void
               }
               class Items$1 extends com.sun.tools.javac.jvm.Items$Item {
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: int)
                   toString<T>(...args: any[]): any
               }
               abstract class Items$Item {
                   typecode: int
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: int)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   store(): void
                   invoke(): com.sun.tools.javac.jvm.Items$Item
                   duplicate(): void
                   drop(): void
                   stash(arg0: int): void
                   mkCond(): com.sun.tools.javac.jvm.Items$CondItem
                   coerce<T>(...args: any[]): any
                   width(): int
                   toString<T>(...args: any[]): any
               }
               class Items$StackItem extends com.sun.tools.javac.jvm.Items$Item {
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: int)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   duplicate(): void
                   drop(): void
                   stash(arg0: int): void
                   width(): int
                   toString<T>(...args: any[]): any
               }
               class Items$IndexedItem extends com.sun.tools.javac.jvm.Items$Item {
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.code.Type)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   store(): void
                   duplicate(): void
                   drop(): void
                   stash(arg0: int): void
                   width(): int
                   toString<T>(...args: any[]): any
               }
               class Items$SelfItem extends com.sun.tools.javac.jvm.Items$Item {
                   isSuper: boolean
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: boolean)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   toString<T>(...args: any[]): any
               }
               class Items$LocalItem extends com.sun.tools.javac.jvm.Items$Item {
                   reg: int
                   type: com.sun.tools.javac.code.Type
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.code.Type, arg2: int)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   store(): void
                   incr(arg0: int): void
                   toString<T>(...args: any[]): any
               }
               class Items$StaticItem extends com.sun.tools.javac.jvm.Items$Item {
                   member: com.sun.tools.javac.code.Symbol
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.code.Symbol)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   store(): void
                   invoke(): com.sun.tools.javac.jvm.Items$Item
                   toString<T>(...args: any[]): any
               }
               class Items$DynamicItem extends com.sun.tools.javac.jvm.Items$StaticItem {
                   static $assertionsDisabled: boolean
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.code.Symbol)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   store(): void
                   invoke(): com.sun.tools.javac.jvm.Items$Item
                   toString<T>(...args: any[]): any
               }
               class Items$MemberItem extends com.sun.tools.javac.jvm.Items$Item {
                   member: com.sun.tools.javac.code.Symbol
                   nonvirtual: boolean
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.code.Symbol, arg2: boolean)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   store(): void
                   invoke(): com.sun.tools.javac.jvm.Items$Item
                   duplicate(): void
                   drop(): void
                   stash(arg0: int): void
                   width(): int
                   toString<T>(...args: any[]): any
               }
               class Items$ImmediateItem extends com.sun.tools.javac.jvm.Items$Item {
                   value: java.lang.Object
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.code.Type, arg2: java.lang.Object)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   mkCond(): com.sun.tools.javac.jvm.Items$CondItem
                   coerce(arg0: int): com.sun.tools.javac.jvm.Items$Item
                   toString<T>(...args: any[]): any
               }
               class Items$AssignItem extends com.sun.tools.javac.jvm.Items$Item {
                   lhs: com.sun.tools.javac.jvm.Items$Item
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: com.sun.tools.javac.jvm.Items$Item)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   duplicate(): void
                   drop(): void
                   stash(arg0: int): void
                   width(): int
                   toString<T>(...args: any[]): any
               }
               class Items$CondItem extends com.sun.tools.javac.jvm.Items$Item {
                   trueJumps: com.sun.tools.javac.jvm.Code$Chain
                   falseJumps: com.sun.tools.javac.jvm.Code$Chain
                   opcode: int
                   tree: com.sun.tools.javac.tree.JCTree
                   this$0: com.sun.tools.javac.jvm.Items
                   constructor(arg0: com.sun.tools.javac.jvm.Items, arg1: int, arg2: com.sun.tools.javac.jvm.Code$Chain, arg3: com.sun.tools.javac.jvm.Code$Chain)
                   load(): com.sun.tools.javac.jvm.Items$Item
                   duplicate(): void
                   drop(): void
                   stash(arg0: int): void
                   mkCond(): com.sun.tools.javac.jvm.Items$CondItem
                   jumpTrue(): com.sun.tools.javac.jvm.Code$Chain
                   jumpFalse(): com.sun.tools.javac.jvm.Code$Chain
                   negate(): com.sun.tools.javac.jvm.Items$CondItem
                   width(): int
                   isTrue(): boolean
                   isFalse(): boolean
                   toString<T>(...args: any[]): any
               }
               class Items {
                   pool: com.sun.tools.javac.jvm.Pool
                   code: com.sun.tools.javac.jvm.Code
                   syms: com.sun.tools.javac.code.Symtab
                   types: com.sun.tools.javac.code.Types
                   public constructor(arg0: com.sun.tools.javac.jvm.Pool, arg1: com.sun.tools.javac.jvm.Code, arg2: com.sun.tools.javac.code.Symtab, arg3: com.sun.tools.javac.code.Types)
                   makeVoidItem(): com.sun.tools.javac.jvm.Items$Item
                   makeThisItem(): com.sun.tools.javac.jvm.Items$Item
                   makeSuperItem(): com.sun.tools.javac.jvm.Items$Item
                   makeStackItem(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.jvm.Items$Item
                   makeDynamicItem(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.jvm.Items$Item
                   makeIndexedItem(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.jvm.Items$Item
                   makeLocalItem(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): com.sun.tools.javac.jvm.Items$LocalItem
                   makeStaticItem(arg0: com.sun.tools.javac.code.Symbol): com.sun.tools.javac.jvm.Items$Item
                   makeMemberItem(arg0: com.sun.tools.javac.code.Symbol, arg1: boolean): com.sun.tools.javac.jvm.Items$Item
                   makeImmediateItem(arg0: com.sun.tools.javac.code.Type, arg1: java.lang.Object): com.sun.tools.javac.jvm.Items$Item
                   makeAssignItem(arg0: com.sun.tools.javac.jvm.Items$Item): com.sun.tools.javac.jvm.Items$Item
                   makeCondItem<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.jvm.Items): com.sun.tools.javac.jvm.Items$Item[]
               }
               class Gen$ClassReferenceVisitor extends com.sun.tools.javac.tree.JCTree$Visitor {
                   this$0: com.sun.tools.javac.jvm.Gen
                   constructor(arg0: com.sun.tools.javac.jvm.Gen)
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
               }
               class Gen$CodeSizeOverflow extends java.lang.RuntimeException {
                   public constructor()
               }
               class Gen$1 extends com.sun.tools.javac.jvm.Gen$GenFinalizer {
                   val$syncEnv: com.sun.tools.javac.comp.Env
                   val$lockVar: com.sun.tools.javac.jvm.Items$LocalItem
                   this$0: com.sun.tools.javac.jvm.Gen
                   constructor(arg0: com.sun.tools.javac.jvm.Gen, arg1: com.sun.tools.javac.comp.Env, arg2: com.sun.tools.javac.jvm.Items$LocalItem)
                   gen(): void
                   genLast(): void
               }
               class Gen$2 extends com.sun.tools.javac.jvm.Gen$GenFinalizer {
                   val$tree: com.sun.tools.javac.tree.JCTree$JCTry
                   val$tryEnv: com.sun.tools.javac.comp.Env
                   val$oldEnv: com.sun.tools.javac.comp.Env
                   this$0: com.sun.tools.javac.jvm.Gen
                   constructor(arg0: com.sun.tools.javac.jvm.Gen, arg1: com.sun.tools.javac.tree.JCTree$JCTry, arg2: com.sun.tools.javac.comp.Env, arg3: com.sun.tools.javac.comp.Env)
                   gen(): void
                   genLast(): void
                   hasFinalizer(): boolean
               }
               class Gen$1ComplexityScanner extends com.sun.tools.javac.tree.TreeScanner {
                   complexity: int
                   this$0: com.sun.tools.javac.jvm.Gen
                   constructor(arg0: com.sun.tools.javac.jvm.Gen)
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   public visitCase(arg0: com.sun.tools.javac.tree.JCTree$JCCase): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   public visitCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitAssert(arg0: com.sun.tools.javac.tree.JCTree$JCAssert): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
               }
               abstract class Gen$GenFinalizer {
                   this$0: com.sun.tools.javac.jvm.Gen
                   constructor(arg0: com.sun.tools.javac.jvm.Gen)
                   gen(): void
                   genLast(): void
                   hasFinalizer(): boolean
               }
               class Gen$GenContext {
                   exit: com.sun.tools.javac.jvm.Code$Chain
                   cont: com.sun.tools.javac.jvm.Code$Chain
                   finalize: com.sun.tools.javac.jvm.Gen$GenFinalizer
                   isSwitch: boolean
                   gaps: com.sun.tools.javac.util.ListBuffer<java.lang.Integer>
                   constructor()
                   addExit(arg0: com.sun.tools.javac.jvm.Code$Chain): void
                   addCont(arg0: com.sun.tools.javac.jvm.Code$Chain): void
               }
               class Gen$3 {
                   static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class Gen extends com.sun.tools.javac.tree.JCTree$Visitor {
                   protected static genKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.Gen>
                   endPosTable: com.sun.tools.javac.tree.EndPosTable
                   env: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>
                   pt: com.sun.tools.javac.code.Type
                   result: com.sun.tools.javac.jvm.Items$Item
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.jvm.Gen
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   loadIntConst(arg0: int): void
                   public static zero(arg0: int): int
                   public static one(arg0: int): int
                   emitMinusOne(arg0: int): void
                   binaryQualifier(arg0: com.sun.tools.javac.code.Symbol, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol
                   makeRef(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type): int
                   makeTemp(arg0: com.sun.tools.javac.code.Type): com.sun.tools.javac.jvm.Items$LocalItem
                   callMethod(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: com.sun.tools.javac.util.Name, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, arg4: boolean): void
                   genFinalizer(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): void
                   unwind(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>
                   endFinalizerGap(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): void
                   endFinalizerGaps(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): void
                   hasFinally(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): boolean
                   normalizeDefs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   normalizeMethod(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>): void
                   implementInterfaceMethods<T>(...args: any[]): any
                   public genDef(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): void
                   genStat<T>(...args: any[]): any
                   genStats<T>(...args: any[]): any
                   genCond<T>(...args: any[]): any
                   public genExpr(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.jvm.Items$Item
                   public genArgs(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   genMethod(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, arg2: boolean): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitSkip(arg0: com.sun.tools.javac.tree.JCTree$JCSkip): void
                   public visitBlock(arg0: com.sun.tools.javac.tree.JCTree$JCBlock): void
                   public visitDoLoop(arg0: com.sun.tools.javac.tree.JCTree$JCDoWhileLoop): void
                   public visitWhileLoop(arg0: com.sun.tools.javac.tree.JCTree$JCWhileLoop): void
                   public visitForLoop(arg0: com.sun.tools.javac.tree.JCTree$JCForLoop): void
                   public visitForeachLoop(arg0: com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop): void
                   public visitLabelled(arg0: com.sun.tools.javac.tree.JCTree$JCLabeledStatement): void
                   public visitSwitch(arg0: com.sun.tools.javac.tree.JCTree$JCSwitch): void
                   static qsort2(arg0: int[], arg1: int[], arg2: int, arg3: int): void
                   public visitSynchronized(arg0: com.sun.tools.javac.tree.JCTree$JCSynchronized): void
                   public visitTry(arg0: com.sun.tools.javac.tree.JCTree$JCTry): void
                   genTry(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>, arg2: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>): void
                   genCatch(arg0: com.sun.tools.javac.tree.JCTree$JCCatch, arg1: com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, arg2: int, arg3: int, arg4: com.sun.tools.javac.util.List<java.lang.Integer>): void
                   registerCatch(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: int, arg2: int, arg3: int, arg4: int): void
                   estimateCodeComplexity(arg0: com.sun.tools.javac.tree.JCTree): int
                   public visitIf(arg0: com.sun.tools.javac.tree.JCTree$JCIf): void
                   public visitExec(arg0: com.sun.tools.javac.tree.JCTree$JCExpressionStatement): void
                   public visitBreak(arg0: com.sun.tools.javac.tree.JCTree$JCBreak): void
                   public visitContinue(arg0: com.sun.tools.javac.tree.JCTree$JCContinue): void
                   public visitReturn(arg0: com.sun.tools.javac.tree.JCTree$JCReturn): void
                   public visitThrow(arg0: com.sun.tools.javac.tree.JCTree$JCThrow): void
                   public visitApply(arg0: com.sun.tools.javac.tree.JCTree$JCMethodInvocation): void
                   public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitNewArray(arg0: com.sun.tools.javac.tree.JCTree$JCNewArray): void
                   makeNewArray(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Type, arg2: int): com.sun.tools.javac.jvm.Items$Item
                   public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   makeStringBuffer(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): void
                   appendString(arg0: com.sun.tools.javac.tree.JCTree): void
                   getStringBufferAppend(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.code.Type): com.sun.tools.javac.code.Symbol
                   appendStrings(arg0: com.sun.tools.javac.tree.JCTree): void
                   bufferToString(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition): void
                   completeBinop(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree, arg2: com.sun.tools.javac.code.Symbol$OperatorSymbol): com.sun.tools.javac.jvm.Items$Item
                   public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                   public visitWildcard(arg0: com.sun.tools.javac.tree.JCTree$JCWildcard): void
                   public visitTypeTest(arg0: com.sun.tools.javac.tree.JCTree$JCInstanceOf): void
                   public visitIndexed(arg0: com.sun.tools.javac.tree.JCTree$JCArrayAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public isInvokeDynamic(arg0: com.sun.tools.javac.code.Symbol): boolean
                   public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                   public visitLetExpr(arg0: com.sun.tools.javac.tree.JCTree$LetExpr): void
                   public genClass(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, arg1: com.sun.tools.javac.tree.JCTree$JCClassDecl): boolean
                   static access$000(arg0: com.sun.tools.javac.jvm.Gen): com.sun.tools.javac.jvm.Pool
                   static access$100(arg0: com.sun.tools.javac.jvm.Gen): com.sun.tools.javac.jvm.Code
                   static access$200(arg0: com.sun.tools.javac.jvm.Gen): boolean
                   static access$300(arg0: com.sun.tools.javac.jvm.Gen): int
               }

            }
            namespace parser {
               class Tokens$TokenKind extends java.lang.Enum<com.sun.tools.javac.parser.Tokens$TokenKind> implements com.sun.tools.javac.api.Formattable , com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind> {
                   public static EOF: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ERROR: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static IDENTIFIER: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ABSTRACT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ASSERT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BOOLEAN: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BREAK: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BYTE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CASE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CATCH: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CHAR: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CLASS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CONST: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CONTINUE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static DEFAULT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static DO: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static DOUBLE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ELSE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ENUM: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static EXTENDS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static FINAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static FINALLY: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static FLOAT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static FOR: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GOTO: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static IF: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static IMPLEMENTS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static IMPORT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static INSTANCEOF: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static INT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static INTERFACE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LONG: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static NATIVE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static NEW: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PACKAGE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PRIVATE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PROTECTED: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PUBLIC: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static RETURN: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SHORT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static STATIC: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static STRICTFP: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SUPER: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SWITCH: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SYNCHRONIZED: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static THIS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static THROW: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static THROWS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static TRANSIENT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static TRY: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static VOID: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static VOLATILE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static WHILE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static INTLITERAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LONGLITERAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static FLOATLITERAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static DOUBLELITERAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CHARLITERAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static STRINGLITERAL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static TRUE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static FALSE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static NULL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static UNDERSCORE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ARROW: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static COLCOL: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LPAREN: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static RPAREN: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LBRACE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static RBRACE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LBRACKET: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static RBRACKET: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SEMI: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static COMMA: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static DOT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static ELLIPSIS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static EQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BANG: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static TILDE: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static QUES: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static COLON: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static EQEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LTEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GTEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BANGEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static AMPAMP: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BARBAR: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PLUSPLUS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SUBSUB: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PLUS: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SUB: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static STAR: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SLASH: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static AMP: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BAR: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CARET: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PERCENT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LTLT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GTGT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GTGTGT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PLUSEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SUBEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static STAREQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static SLASHEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static AMPEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static BAREQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CARETEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static PERCENTEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static LTLTEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GTGTEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static GTGTGTEQ: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static MONKEYS_AT: com.sun.tools.javac.parser.Tokens$TokenKind
                   public static CUSTOM: com.sun.tools.javac.parser.Tokens$TokenKind
                   public name: java.lang.String
                   public tag: com.sun.tools.javac.parser.Tokens$Token$Tag
                   public static values(): com.sun.tools.javac.parser.Tokens$TokenKind[]
                   valueOf<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public getKind(): java.lang.String
                   accepts<T>(...args: any[]): any
               }
               class Tokens$Comment$CommentStyle extends java.lang.Enum<com.sun.tools.javac.parser.Tokens$Comment$CommentStyle> {
                   public static LINE: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle
                   public static BLOCK: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle
                   public static JAVADOC: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle
                   public static values(): com.sun.tools.javac.parser.Tokens$Comment$CommentStyle[]
                   valueOf<T>(...args: any[]): any
               }
               interface Tokens$Comment {
                   public getText(): java.lang.String
                   public getSourcePos(arg0: int): int
                   public getStyle(): com.sun.tools.javac.parser.Tokens$Comment$CommentStyle
                   public isDeprecated(): boolean
               }
               class Tokens$Token$Tag extends java.lang.Enum<com.sun.tools.javac.parser.Tokens$Token$Tag> {
                   public static DEFAULT: com.sun.tools.javac.parser.Tokens$Token$Tag
                   public static NAMED: com.sun.tools.javac.parser.Tokens$Token$Tag
                   public static STRING: com.sun.tools.javac.parser.Tokens$Token$Tag
                   public static NUMERIC: com.sun.tools.javac.parser.Tokens$Token$Tag
                   public static values(): com.sun.tools.javac.parser.Tokens$Token$Tag[]
                   valueOf<T>(...args: any[]): any
               }
               class Tokens$Token {
                   public kind: com.sun.tools.javac.parser.Tokens$TokenKind
                   public pos: int
                   public endPos: int
                   public comments: com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>
                   constructor(arg0: com.sun.tools.javac.parser.Tokens$TokenKind, arg1: int, arg2: int, arg3: com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>)
                   split(arg0: com.sun.tools.javac.parser.Tokens): com.sun.tools.javac.parser.Tokens$Token[]
                   protected checkKind(): void
                   public name(): com.sun.tools.javac.util.Name
                   public stringVal(): java.lang.String
                   public radix(): int
                   public comment(arg0: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle): com.sun.tools.javac.parser.Tokens$Comment
                   public deprecatedFlag(): boolean
               }
               class Tokens$NamedToken extends com.sun.tools.javac.parser.Tokens$Token {
                   name<T>(...args: any[]): any
                   public constructor(arg0: com.sun.tools.javac.parser.Tokens$TokenKind, arg1: int, arg2: int, arg3: com.sun.tools.javac.util.Name, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>)
                   protected checkKind(): void
               }
               class Tokens$StringToken extends com.sun.tools.javac.parser.Tokens$Token {
                   stringVal<T>(...args: any[]): any
                   public constructor(arg0: com.sun.tools.javac.parser.Tokens$TokenKind, arg1: int, arg2: int, arg3: java.lang.String, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>)
                   protected checkKind(): void
               }
               class Tokens$NumericToken extends com.sun.tools.javac.parser.Tokens$StringToken {
                   radix<T>(...args: any[]): any
                   public constructor(arg0: com.sun.tools.javac.parser.Tokens$TokenKind, arg1: int, arg2: int, arg3: java.lang.String, arg4: int, arg5: com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>)
                   protected checkKind(): void
               }
               class Tokens$1 {
                   static $SwitchMap$com$sun$tools$javac$parser$Tokens$TokenKind: int[]
               }
               class Tokens {
                   public static tokensKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.parser.Tokens>
                   public static DUMMY: com.sun.tools.javac.parser.Tokens$Token
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.parser.Tokens
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   lookupKind<T>(...args: any[]): any
               }
               class ParserFactory {
                   protected static parserFactoryKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.parser.ParserFactory>
                   F: com.sun.tools.javac.tree.TreeMaker
                   docTreeMaker: com.sun.tools.javac.tree.DocTreeMaker
                   log: com.sun.tools.javac.util.Log
                   tokens: com.sun.tools.javac.parser.Tokens
                   source: com.sun.tools.javac.code.Source
                   names: com.sun.tools.javac.util.Names
                   options: com.sun.tools.javac.util.Options
                   scannerFactory: com.sun.tools.javac.parser.ScannerFactory
                   locale: java.util.Locale
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.parser.ParserFactory
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public newParser(arg0: java.lang.CharSequence, arg1: boolean, arg2: boolean, arg3: boolean): com.sun.tools.javac.parser.JavacParser
               }
               class ScannerFactory {
                   public static scannerFactoryKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.parser.ScannerFactory>
                   log: com.sun.tools.javac.util.Log
                   names: com.sun.tools.javac.util.Names
                   source: com.sun.tools.javac.code.Source
                   tokens: com.sun.tools.javac.parser.Tokens
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.parser.ScannerFactory
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   newScanner<T>(...args: any[]): any
               }
               interface JavacParser$ErrorRecoveryAction {
                   public doRecover(arg0: com.sun.tools.javac.parser.JavacParser): com.sun.tools.javac.tree.JCTree
               }
               class JavacParser$BasicErrorRecoveryAction$1 extends com.sun.tools.javac.parser.JavacParser$BasicErrorRecoveryAction {
                   constructor(arg0: java.lang.String, arg1: int)
                   public doRecover(arg0: com.sun.tools.javac.parser.JavacParser): com.sun.tools.javac.tree.JCTree
               }
               class JavacParser$BasicErrorRecoveryAction$2 extends com.sun.tools.javac.parser.JavacParser$BasicErrorRecoveryAction {
                   constructor(arg0: java.lang.String, arg1: int)
                   public doRecover(arg0: com.sun.tools.javac.parser.JavacParser): com.sun.tools.javac.tree.JCTree
               }
               abstract class JavacParser$BasicErrorRecoveryAction extends java.lang.Enum<com.sun.tools.javac.parser.JavacParser$BasicErrorRecoveryAction> implements com.sun.tools.javac.parser.JavacParser$ErrorRecoveryAction {
                   public static BLOCK_STMT: com.sun.tools.javac.parser.JavacParser$BasicErrorRecoveryAction
                   public static CATCH_CLAUSE: com.sun.tools.javac.parser.JavacParser$BasicErrorRecoveryAction
                   public static values(): com.sun.tools.javac.parser.JavacParser$BasicErrorRecoveryAction[]
                   valueOf<T>(...args: any[]): any
                   constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.javac.parser.JavacParser$1)
               }
               class JavacParser$1 implements com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind> {
                   this$0: com.sun.tools.javac.parser.JavacParser
                   constructor(arg0: com.sun.tools.javac.parser.JavacParser)
                   accepts<T>(...args: any[]): any
               }
               class JavacParser$ParensResult extends java.lang.Enum<com.sun.tools.javac.parser.JavacParser$ParensResult> {
                   public static CAST: com.sun.tools.javac.parser.JavacParser$ParensResult
                   public static EXPLICIT_LAMBDA: com.sun.tools.javac.parser.JavacParser$ParensResult
                   public static IMPLICIT_LAMBDA: com.sun.tools.javac.parser.JavacParser$ParensResult
                   public static PARENS: com.sun.tools.javac.parser.JavacParser$ParensResult
                   public static values(): com.sun.tools.javac.parser.JavacParser$ParensResult[]
                   valueOf<T>(...args: any[]): any
               }
               class JavacParser$SimpleEndPosTable extends com.sun.tools.javac.parser.JavacParser$AbstractEndPosTable {
                   constructor(arg0: com.sun.tools.javac.parser.JavacParser)
                   public storeEnd(arg0: com.sun.tools.javac.tree.JCTree, arg1: int): void
                   protected to<T extends com.sun.tools.javac.tree.JCTree>(arg0: T): T
                   protected toP<T extends com.sun.tools.javac.tree.JCTree>(arg0: T): T
                   public getEndPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public replaceTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree): int
               }
               class JavacParser$EmptyEndPosTable extends com.sun.tools.javac.parser.JavacParser$AbstractEndPosTable {
                   constructor(arg0: com.sun.tools.javac.parser.JavacParser)
                   public storeEnd(arg0: com.sun.tools.javac.tree.JCTree, arg1: int): void
                   protected to<T extends com.sun.tools.javac.tree.JCTree>(arg0: T): T
                   protected toP<T extends com.sun.tools.javac.tree.JCTree>(arg0: T): T
                   public getEndPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public replaceTree(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.tree.JCTree): int
               }
               abstract class JavacParser$AbstractEndPosTable implements com.sun.tools.javac.tree.EndPosTable {
                   protected parser: com.sun.tools.javac.parser.JavacParser
                   protected errorEndPos: int
                   public constructor(arg0: com.sun.tools.javac.parser.JavacParser)
                   protected to<T extends com.sun.tools.javac.tree.JCTree>(arg0: T): T
                   protected toP<T extends com.sun.tools.javac.tree.JCTree>(arg0: T): T
                   protected setErrorEndPos(arg0: int): void
                   protected setParser(arg0: com.sun.tools.javac.parser.JavacParser): void
               }
               class JavacParser$2 {
                   static $SwitchMap$com$sun$tools$javac$parser$Tokens$TokenKind: int[]
                   static $SwitchMap$com$sun$tools$javac$parser$JavacParser$ParensResult: int[]
                   static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
               }
               class JavacParser implements com.sun.tools.javac.parser.Parser {
                   protected S: com.sun.tools.javac.parser.Lexer
                   protected F: com.sun.tools.javac.tree.TreeMaker
                   allowGenerics: boolean
                   allowDiamond: boolean
                   allowMulticatch: boolean
                   allowVarargs: boolean
                   allowAsserts: boolean
                   allowEnums: boolean
                   allowForeach: boolean
                   allowStaticImport: boolean
                   allowAnnotations: boolean
                   allowTWR: boolean
                   allowStringFolding: boolean
                   allowLambda: boolean
                   allowMethodReferences: boolean
                   allowDefaultMethods: boolean
                   allowStaticInterfaceMethods: boolean
                   allowIntersectionTypesInCast: boolean
                   keepDocComments: boolean
                   keepLineMap: boolean
                   allowTypeAnnotations: boolean
                   allowAnnotationsAfterTypeParams: boolean
                   allowThisIdent: boolean
                   receiverParam: com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   static EXPR: int
                   static TYPE: int
                   static NOPARAMS: int
                   static TYPEARG: int
                   static DIAMOND: int
                   token<T>(...args: any[]): any
                   odStackSupply: java.util.ArrayList<com.sun.tools.javac.tree.JCTree$JCExpression[]>
                   opStackSupply: java.util.ArrayList<com.sun.tools.javac.parser.Tokens$Token[]>
                   LAX_IDENTIFIER: com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>
                   static $assertionsDisabled: boolean
                   protected constructor(arg0: com.sun.tools.javac.parser.ParserFactory, arg1: com.sun.tools.javac.parser.Lexer, arg2: boolean, arg3: boolean, arg4: boolean)
                   protected newEndPosTable(arg0: boolean): com.sun.tools.javac.parser.JavacParser$AbstractEndPosTable
                   protected newDocCommentTable(arg0: boolean, arg1: com.sun.tools.javac.parser.ParserFactory): com.sun.tools.javac.tree.DocCommentTable
                   public nextToken(): void
                   peekToken<T>(...args: any[]): any
                   public accept(arg0: com.sun.tools.javac.parser.Tokens$TokenKind): void
                   illegal<T>(...args: any[]): any
                   checkNoMods(arg0: long): void
                   attach(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.parser.Tokens$Comment): void
                   public getStartPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public getEndPos(arg0: com.sun.tools.javac.tree.JCTree): int
                   public ident(): com.sun.tools.javac.util.Name
                   public qualident(arg0: boolean): com.sun.tools.javac.tree.JCTree$JCExpression
                   literal<T>(...args: any[]): any
                   isZero(arg0: java.lang.String): boolean
                   strval(arg0: com.sun.tools.javac.util.Name): java.lang.String
                   public parseExpression(): com.sun.tools.javac.tree.JCTree$JCExpression
                   parseType<T>(...args: any[]): any
                   public unannotatedType(): com.sun.tools.javac.tree.JCTree$JCExpression
                   term<T>(...args: any[]): any
                   termRest(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   term1(): com.sun.tools.javac.tree.JCTree$JCExpression
                   term1Rest(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   term2(): com.sun.tools.javac.tree.JCTree$JCExpression
                   term2Rest(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: int): com.sun.tools.javac.tree.JCTree$JCExpression
                   protected foldStrings(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   merge(arg0: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree$JCLiteral>, arg1: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree$JCExpression>): boolean
                   protected term3(): com.sun.tools.javac.tree.JCTree$JCExpression
                   term3Rest(arg0: com.sun.tools.javac.tree.JCTree$JCExpression, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCExpression
                   isUnboundMemberRef(): boolean
                   analyzeParens(): com.sun.tools.javac.parser.JavacParser$ParensResult
                   lambdaExpressionOrStatement(arg0: boolean, arg1: boolean, arg2: int): com.sun.tools.javac.tree.JCTree$JCExpression
                   lambdaExpressionOrStatementRest(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: int): com.sun.tools.javac.tree.JCTree$JCExpression
                   lambdaStatement(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: int, arg2: int): com.sun.tools.javac.tree.JCTree$JCExpression
                   lambdaExpression(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, arg1: int): com.sun.tools.javac.tree.JCTree$JCExpression
                   superSuffix(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   basicType(): com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree
                   argumentsOpt(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   arguments<T>(...args: any[]): any
                   typeArgumentsOpt<T>(...args: any[]): any
                   typeArguments<T>(...args: any[]): any
                   typeArgument(): com.sun.tools.javac.tree.JCTree$JCExpression
                   bracketsSuffix(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   memberReferenceSuffix<T>(...args: any[]): any
                   creator(arg0: int, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>): com.sun.tools.javac.tree.JCTree$JCExpression
                   innerCreator(arg0: int, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg2: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   arrayCreatorRest(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   classCreatorRest(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, arg3: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCNewClass
                   arrayInitializer(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   public variableInitializer(): com.sun.tools.javac.tree.JCTree$JCExpression
                   parExpression(): com.sun.tools.javac.tree.JCTree$JCExpression
                   block<T>(...args: any[]): any
                   blockStatements(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>
                   parseStatementAsBlock(): com.sun.tools.javac.tree.JCTree$JCStatement
                   blockStatement(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>
                   public parseStatement(): com.sun.tools.javac.tree.JCTree$JCStatement
                   protected catchClause(): com.sun.tools.javac.tree.JCTree$JCCatch
                   catchTypes(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   switchBlockStatementGroups(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>
                   protected switchBlockStatementGroup(): com.sun.tools.javac.tree.JCTree$JCCase
                   moreStatementExpressions<T extends com.sun.tools.javac.util.ListBuffer<any super com.sun.tools.javac.tree.JCTree$JCExpressionStatement>>(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: T): T
                   forInit(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>
                   forUpdate(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement>
                   annotationsOpt(arg0: com.sun.tools.javac.tree.JCTree$Tag): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   typeAnnotationsOpt(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   modifiersOpt<T>(...args: any[]): any
                   mods(arg0: int, arg1: long, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>): com.sun.tools.javac.tree.JCTree$JCModifiers
                   annotation(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$Tag): com.sun.tools.javac.tree.JCTree$JCAnnotation
                   annotationFieldValuesOpt(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   annotationFieldValues(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   annotationFieldValue(): com.sun.tools.javac.tree.JCTree$JCExpression
                   annotationValue(): com.sun.tools.javac.tree.JCTree$JCExpression
                   public variableDeclarators<T extends com.sun.tools.javac.util.ListBuffer<any super com.sun.tools.javac.tree.JCTree$JCVariableDecl>>(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: T): T
                   variableDeclaratorsRest<T extends com.sun.tools.javac.util.ListBuffer<any super com.sun.tools.javac.tree.JCTree$JCVariableDecl>>(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCModifiers, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.Name, arg4: boolean, arg5: com.sun.tools.javac.parser.Tokens$Comment, arg6: T): T
                   variableDeclarator(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.tree.JCTree$JCExpression, arg2: boolean, arg3: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   variableDeclaratorRest(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCModifiers, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.Name, arg4: boolean, arg5: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   variableDeclaratorId<T>(...args: any[]): any
                   resources(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   protected resource(): com.sun.tools.javac.tree.JCTree
                   public parseCompilationUnit(): com.sun.tools.javac.tree.JCTree$JCCompilationUnit
                   importDeclaration(): com.sun.tools.javac.tree.JCTree
                   typeDeclaration(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree
                   classOrInterfaceOrEnumDeclaration(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree$JCStatement
                   protected classDeclaration(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   protected interfaceDeclaration(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   protected enumDeclaration(arg0: com.sun.tools.javac.tree.JCTree$JCModifiers, arg1: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree$JCClassDecl
                   enumBody(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   enumeratorDeclaration(arg0: com.sun.tools.javac.util.Name): com.sun.tools.javac.tree.JCTree
                   typeList(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   classOrInterfaceBody(arg0: com.sun.tools.javac.util.Name, arg1: boolean): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   protected classOrInterfaceBodyDeclaration(arg0: com.sun.tools.javac.util.Name, arg1: boolean): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   protected methodDeclaratorRest(arg0: int, arg1: com.sun.tools.javac.tree.JCTree$JCModifiers, arg2: com.sun.tools.javac.tree.JCTree$JCExpression, arg3: com.sun.tools.javac.util.Name, arg4: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, arg5: boolean, arg6: boolean, arg7: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.tree.JCTree
                   qualidentList(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>
                   typeParametersOpt(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>
                   typeParameter(): com.sun.tools.javac.tree.JCTree$JCTypeParameter
                   formalParameters<T>(...args: any[]): any
                   implicitParameters(arg0: boolean): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>
                   optFinal(arg0: long): com.sun.tools.javac.tree.JCTree$JCModifiers
                   formalParameter<T>(...args: any[]): any
                   protected implicitParameter(): com.sun.tools.javac.tree.JCTree$JCVariableDecl
                   error<T>(...args: any[]): any
                   warning(arg0: int, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   protected checkExprStat(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): com.sun.tools.javac.tree.JCTree$JCExpression
                   static prec(arg0: com.sun.tools.javac.parser.Tokens$TokenKind): int
                   static earlier(arg0: int, arg1: int): int
                   static optag(arg0: com.sun.tools.javac.parser.Tokens$TokenKind): com.sun.tools.javac.tree.JCTree$Tag
                   static unoptag(arg0: com.sun.tools.javac.parser.Tokens$TokenKind): com.sun.tools.javac.tree.JCTree$Tag
                   static typetag(arg0: com.sun.tools.javac.parser.Tokens$TokenKind): com.sun.tools.javac.code.TypeTag
                   checkGenerics(): void
                   checkVarargs(): void
                   checkForeach(): void
                   checkStaticImports(): void
                   checkAnnotations(): void
                   checkDiamond(): void
                   checkMulticatch(): void
                   checkTryWithResources(): void
                   checkLambda(): void
                   checkMethodReferences(): void
                   checkDefaultMethods(): void
                   checkIntersectionTypesInCast(): void
                   checkStaticInterfaceMethods(): void
                   checkTypeAnnotations(): void
                   checkAnnotationsAfterTypeParams(arg0: int): void
               }
               interface Parser {
                   public parseCompilationUnit(): com.sun.tools.javac.tree.JCTree$JCCompilationUnit
                   public parseExpression(): com.sun.tools.javac.tree.JCTree$JCExpression
                   public parseStatement(): com.sun.tools.javac.tree.JCTree$JCStatement
                   public parseType(): com.sun.tools.javac.tree.JCTree$JCExpression
               }
               class UnicodeReader> implements com.sun.tools.javac.parser.Tokens$Comment {
                   cs: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle
                   comment_reader: U
                   protected deprecatedFlag: boolean
                   protected scanned: boolean
                   protected constructor(arg0: U, arg1: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle)
                   public getText(): java.lang.String
                   public getSourcePos(arg0: int): int
                   public getStyle(): com.sun.tools.javac.parser.Tokens$Comment$CommentStyle
                   public isDeprecated(): boolean
                   protected scanDocComment(): void
               }
               class JavaTokenizer$1 {
                   static $SwitchMap$com$sun$tools$javac$parser$Tokens$Token$Tag: int[]
               }
               class JavaTokenizer {
                   protected tk: com.sun.tools.javac.parser.Tokens$TokenKind
                   protected radix: int
                   protected name: com.sun.tools.javac.util.Name
                   errPos<T>(...args: any[]): any
                   protected reader: com.sun.tools.javac.parser.UnicodeReader
                   protected fac: com.sun.tools.javac.parser.ScannerFactory
                   constructor(...args: any[])
                   protected lexError(arg0: int, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                   public readToken(): com.sun.tools.javac.parser.Tokens$Token
                   addComment(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>, arg1: com.sun.tools.javac.parser.Tokens$Comment): com.sun.tools.javac.util.List<com.sun.tools.javac.parser.Tokens$Comment>
                   protected processComment(arg0: int, arg1: int, arg2: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle): com.sun.tools.javac.parser.Tokens$Comment
                   protected processWhiteSpace(arg0: int, arg1: int): void
                   protected processLineTerminator(arg0: int, arg1: int): void
                   public getLineMap(): com.sun.tools.javac.util.Position$LineMap
               }
               class Scanner implements com.sun.tools.javac.parser.Lexer {
                   constructor(...args: any[])
                   token<T>(...args: any[]): any
                   public prevToken(): com.sun.tools.javac.parser.Tokens$Token
                   public nextToken(): void
                   public split(): com.sun.tools.javac.parser.Tokens$Token
                   public getLineMap(): com.sun.tools.javac.util.Position$LineMap
                   errPos<T>(...args: any[]): any
               }
               interface Lexer {
                   public nextToken(): void
                   token<T>(...args: any[]): any
                   public prevToken(): com.sun.tools.javac.parser.Tokens$Token
                   public split(): com.sun.tools.javac.parser.Tokens$Token
                   errPos<T>(...args: any[]): any
                   public getLineMap(): com.sun.tools.javac.util.Position$LineMap
               }
               class UnicodeReader {
                   protected buf: char[]
                   protected bp: int
                   protected buflen: int
                   protected ch: char
                   protected unicodeConversionBp: int
                   protected log: com.sun.tools.javac.util.Log
                   protected names: com.sun.tools.javac.util.Names
                   protected sbuf: char[]
                   protected sp: int
                   static surrogatesSupported: boolean
                   constructor(...args: any[])
                   protected scanChar(): void
                   protected scanCommentChar(): void
                   putChar<T>(...args: any[]): any
                   name(): com.sun.tools.javac.util.Name
                   chars(): java.lang.String
                   protected convertUnicode(): void
                   protected scanSurrogates(): char
                   protected digit(arg0: int, arg1: int): int
                   protected isUnicode(): boolean
                   protected skipChar(): void
                   protected peekChar(): char
                   getRawCharacters<T>(...args: any[]): any
               }
               class LazyDocCommentTable$Entry {
                   comment: com.sun.tools.javac.parser.Tokens$Comment
                   tree: com.sun.tools.javac.tree.DCTree$DCDocComment
                   constructor(arg0: com.sun.tools.javac.parser.Tokens$Comment)
               }
               class LazyDocCommentTable implements com.sun.tools.javac.tree.DocCommentTable {
                   fac: com.sun.tools.javac.parser.ParserFactory
                   diagSource: com.sun.tools.javac.util.DiagnosticSource
                   table: java.util.Map<com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.parser.LazyDocCommentTable$Entry>
                   constructor(arg0: com.sun.tools.javac.parser.ParserFactory)
                   public hasComment(arg0: com.sun.tools.javac.tree.JCTree): boolean
                   public getComment(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.parser.Tokens$Comment
                   public getCommentText(arg0: com.sun.tools.javac.tree.JCTree): java.lang.String
                   public getCommentTree(arg0: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.DCTree$DCDocComment
                   public putComment(arg0: com.sun.tools.javac.tree.JCTree, arg1: com.sun.tools.javac.parser.Tokens$Comment): void
               }
               class JavadocTokenizer$DocReader extends com.sun.tools.javac.parser.UnicodeReader {
                   col: int
                   startPos: int
                   pbuf: int[]
                   pp: int
                   constructor(arg0: com.sun.tools.javac.parser.ScannerFactory, arg1: char[], arg2: int, arg3: int)
                   protected convertUnicode(): void
                   protected scanCommentChar(): void
                   protected scanChar(): void
                   public putChar(arg0: char, arg1: boolean): void
               }
               class JavadocTokenizer$JavadocComment extends com.sun.tools.javac.parser.JavaTokenizer$BasicComment<com.sun.tools.javac.parser.JavadocTokenizer$DocReader> {
                   constructor(arg0: com.sun.tools.javac.parser.JavadocTokenizer$DocReader, arg1: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle)
                   public getText(): java.lang.String
                   public getSourcePos(arg0: int): int
                   protected scanDocComment(): void
               }
               class JavadocTokenizer extends com.sun.tools.javac.parser.JavaTokenizer {
                   constructor(...args: any[])
                   protected processComment(arg0: int, arg1: int, arg2: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle): com.sun.tools.javac.parser.Tokens$Comment
                   public getLineMap(): com.sun.tools.javac.util.Position$LineMap
               }
               class DocCommentParser$ParseException extends java.lang.Exception {
                   constructor(arg0: java.lang.String)
               }
               class DocCommentParser$TagParser$Kind extends java.lang.Enum<com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind> {
                   public static INLINE: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind
                   public static BLOCK: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind
                   public static values(): com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind[]
                   valueOf<T>(...args: any[]): any
               }
               abstract class DocCommentParser$TagParser {
                   kind: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind
                   treeKind: com.sun.source.doctree.DocTree$Kind
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg1: com.sun.source.doctree.DocTree$Kind)
                   getKind(): com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind
                   getTreeKind(): com.sun.source.doctree.DocTree$Kind
                   parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$1 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$2 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$3 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$4 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$5 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$6 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$7 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$8 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$9 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$10 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$11 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$12 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$13 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$14 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$15 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$16 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$17 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$18 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$19 extends com.sun.tools.javac.parser.DocCommentParser$TagParser {
                   this$0: com.sun.tools.javac.parser.DocCommentParser
                   constructor(arg0: com.sun.tools.javac.parser.DocCommentParser, arg1: com.sun.tools.javac.parser.DocCommentParser$TagParser$Kind, arg2: com.sun.source.doctree.DocTree$Kind)
                   public parse(arg0: int): com.sun.tools.javac.tree.DCTree
               }
               class DocCommentParser$20 {
                   static $SwitchMap$com$sun$source$doctree$DocTree$Kind: int[]
                   static $SwitchMap$com$sun$tools$javac$parser$DocCommentParser$TagParser$Kind: int[]
               }
               class DocCommentParser {
                   fac: com.sun.tools.javac.parser.ParserFactory
                   diagSource: com.sun.tools.javac.util.DiagnosticSource
                   comment: com.sun.tools.javac.parser.Tokens$Comment
                   m: com.sun.tools.javac.tree.DocTreeMaker
                   names: com.sun.tools.javac.util.Names
                   sentenceBreaker: java.text.BreakIterator
                   protected buf: char[]
                   protected bp: int
                   protected buflen: int
                   protected ch: char
                   textStart: int
                   lastNonWhite: int
                   newline: boolean
                   tagParsers: java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.parser.DocCommentParser$TagParser>
                   htmlBlockTags: java.util.Set<java.lang.String>
                   constructor(arg0: com.sun.tools.javac.parser.ParserFactory, arg1: com.sun.tools.javac.util.DiagnosticSource, arg2: com.sun.tools.javac.parser.Tokens$Comment)
                   parse(): com.sun.tools.javac.tree.DCTree$DCDocComment
                   nextChar(): void
                   protected blockContent(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   protected blockTags(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   protected blockTag(): com.sun.tools.javac.tree.DCTree
                   inlineTag<T>(...args: any[]): any
                   protected inlineText(): com.sun.tools.javac.tree.DCTree
                   protected reference(arg0: boolean): com.sun.tools.javac.tree.DCTree$DCReference
                   parseType(arg0: java.lang.String): com.sun.tools.javac.tree.JCTree
                   parseMember(arg0: java.lang.String): com.sun.tools.javac.util.Name
                   parseParams(arg0: java.lang.String): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>
                   protected identifier(): com.sun.tools.javac.tree.DCTree$DCIdentifier
                   protected quotedString(): com.sun.tools.javac.tree.DCTree$DCText
                   protected inlineContent(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   entity<T>(...args: any[]): any
                   protected html(): com.sun.tools.javac.tree.DCTree
                   protected htmlAttrs(): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree>
                   protected attrValueChar(arg0: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.DCTree>): void
                   protected addPendingText(arg0: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.DCTree>, arg1: int): void
                   protected erroneous(arg0: java.lang.String, arg1: int): com.sun.tools.javac.tree.DCTree$DCErroneous
                   getFirst<T>(...arg0: com.sun.tools.javac.util.List<T>[]): T
                   protected isIdentifierStart(arg0: char): boolean
                   protected readIdentifier(): com.sun.tools.javac.util.Name
                   protected readTagName(): com.sun.tools.javac.util.Name
                   protected isJavaIdentifierStart(arg0: char): boolean
                   protected readJavaIdentifier(): com.sun.tools.javac.util.Name
                   protected isDecimalDigit(arg0: char): boolean
                   protected isHexDigit(arg0: char): boolean
                   protected isUnquotedAttrValueTerminator(arg0: char): boolean
                   protected isWhitespace(arg0: char): boolean
                   protected skipWhitespace(): void
                   protected getSentenceBreak(arg0: java.lang.String): int
                   isSentenceBreak<T>(...args: any[]): any
                   newString(arg0: int, arg1: int): java.lang.String
               }

            }
            namespace processing {
               class JavacProcessingEnvironment$ServiceIterator implements java.util.Iterator<javax.annotation.processing.Processor> {
                   this$0: com.sun.tools.javac.processing.JavacProcessingEnvironment
                   constructor(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: java.lang.ClassLoader, arg2: com.sun.tools.javac.util.Log)
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
                   public close(): void
               }
               class JavacProcessingEnvironment$NameProcessIterator implements java.util.Iterator<javax.annotation.processing.Processor> {
                   nextProc: javax.annotation.processing.Processor
                   names: java.util.Iterator<java.lang.String>
                   processorCL: java.lang.ClassLoader
                   log: com.sun.tools.javac.util.Log
                   constructor(arg0: java.lang.String, arg1: java.lang.ClassLoader, arg2: com.sun.tools.javac.util.Log)
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
               }
               class JavacProcessingEnvironment$ProcessorState {
                   public processor: javax.annotation.processing.Processor
                   public contributed: boolean
                   constructor(arg0: javax.annotation.processing.Processor, arg1: com.sun.tools.javac.util.Log, arg2: com.sun.tools.javac.code.Source, arg3: javax.annotation.processing.ProcessingEnvironment)
                   public annotationSupported(arg0: java.lang.String): boolean
                   public removeSupportedOptions(arg0: java.util.Set<java.lang.String>): void
               }
               class JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator implements java.util.Iterator<com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState> {
                   psi: com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors
                   innerIter: java.util.Iterator<com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState>
                   onProcInterator: boolean
                   this$1: com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors
                   constructor(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors, arg1: com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors)
                   next<T>(...args: any[]): any
                   public hasNext(): boolean
                   public remove(): void
                   public runContributingProcs(arg0: javax.annotation.processing.RoundEnvironment): void
               }
               class JavacProcessingEnvironment$DiscoveredProcessors implements java.lang.Iterable<com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState> {
                   processorIterator: java.util.Iterator<javax.annotation.processing.Processor>
                   procStateList: java.util.ArrayList<com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState>
                   this$0: com.sun.tools.javac.processing.JavacProcessingEnvironment
                   iterator<T>(...args: any[]): any
                   constructor(arg0: java.util.Iterator<javax.annotation.processing.Processor>)
                   public close(): void
               }
               class JavacProcessingEnvironment$ComputeAnnotationSet extends javax.lang.model.util.ElementScanner8<java.util.Set<javax.lang.model.element.TypeElement>, java.util.Set<javax.lang.model.element.TypeElement>> {
                   elements: javax.lang.model.util.Elements
                   public constructor(arg0: javax.lang.model.util.Elements)
                   visitPackage<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
                   visitExecutable<T>(...args: any[]): any
                   addAnnotations(arg0: javax.lang.model.element.Element, arg1: java.util.Set<javax.lang.model.element.TypeElement>): void
                   scan<T>(...args: any[]): any
               }
               class JavacProcessingEnvironment$Round {
                   number: int
                   context: com.sun.tools.javac.util.Context
                   compiler: com.sun.tools.javac.main.JavaCompiler
                   log: com.sun.tools.javac.util.Log
                   deferredDiagnosticHandler: com.sun.tools.javac.util.Log$DeferredDiagnosticHandler
                   roots: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>
                   genClassFiles: java.util.Map<java.lang.String, javax.tools.JavaFileObject>
                   annotationsPresent: java.util.Set<javax.lang.model.element.TypeElement>
                   topLevelClasses: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ClassSymbol>
                   packageInfoFiles: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$PackageSymbol>
                   this$0: com.sun.tools.javac.processing.JavacProcessingEnvironment
                   constructor(arg0: com.sun.tools.javac.util.Context, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ClassSymbol>, arg3: com.sun.tools.javac.util.Log$DeferredDiagnosticHandler)
                   next(arg0: java.util.Set<javax.tools.JavaFileObject>, arg1: java.util.Map<java.lang.String, javax.tools.JavaFileObject>): com.sun.tools.javac.processing.JavacProcessingEnvironment$Round
                   finalCompiler(): com.sun.tools.javac.main.JavaCompiler
                   errorCount(): int
                   warningCount(): int
                   unrecoverableError(): boolean
                   findAnnotationsPresent(): void
                   run(arg0: boolean, arg1: boolean): void
                   showDiagnostics(arg0: boolean): void
               }
               class JavacProcessingEnvironment$1 extends com.sun.tools.javac.tree.TreeScanner {
                   constructor()
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
                   public visitNewClass(arg0: com.sun.tools.javac.tree.JCTree$JCNewClass): void
                   public visitAssignop(arg0: com.sun.tools.javac.tree.JCTree$JCAssignOp): void
                   public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                   public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                   public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                   public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
               }
               class JavacProcessingEnvironment$2 {
                   static $SwitchMap$javax$tools$Diagnostic$Kind: int[]
               }
               class JavacProcessingEnvironment implements javax.annotation.processing.ProcessingEnvironment , java.io.Closeable {
                   log: com.sun.tools.javac.util.Log
                   diags: com.sun.tools.javac.util.JCDiagnostic$Factory
                   source: com.sun.tools.javac.code.Source
                   public static noMatches: java.util.regex.Pattern
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.processing.JavacProcessingEnvironment
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public setProcessors(arg0: java.lang.Iterable<javax.annotation.processing.Processor>): void
                   public atLeastOneProcessor(): boolean
                   public doProcessing(arg0: com.sun.tools.javac.util.Context, arg1: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>, arg2: com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ClassSymbol>, arg3: java.lang.Iterable<com.sun.tools.javac.code.Symbol$PackageSymbol>, arg4: com.sun.tools.javac.util.Log$DeferredDiagnosticHandler): com.sun.tools.javac.main.JavaCompiler
                   public close(): void
                   public getOptions(): java.util.Map<java.lang.String, java.lang.String>
                   public getMessager(): javax.annotation.processing.Messager
                   public getFiler(): javax.annotation.processing.Filer
                   getElementUtils<T>(...args: any[]): any
                   getTypeUtils<T>(...args: any[]): any
                   public getSourceVersion(): javax.lang.model.SourceVersion
                   public getLocale(): java.util.Locale
                   public getSpecifiedPackages(): java.util.Set<com.sun.tools.javac.code.Symbol$PackageSymbol>
                   public static isValidImportString(arg0: java.lang.String): boolean
                   public static validImportStringToPattern(arg0: java.lang.String): java.util.regex.Pattern
                   public getContext(): com.sun.tools.javac.util.Context
                   public getProcessorClassLoader(): java.lang.ClassLoader
                   toString<T>(...args: any[]): any
                   public static isValidOptionName(arg0: java.lang.String): boolean
                   static access$000(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: java.lang.String, arg2: java.lang.Exception): java.util.Iterator
                   static access$100(arg0: java.lang.String, arg1: javax.annotation.processing.Processor, arg2: com.sun.tools.javac.util.Log): java.util.regex.Pattern
                   static access$200(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: javax.annotation.processing.Processor, arg2: java.util.Set, arg3: javax.annotation.processing.RoundEnvironment): boolean
                   static access$302(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: com.sun.tools.javac.util.Context): com.sun.tools.javac.util.Context
                   static access$400(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
                   static access$500(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
                   static access$600(arg0: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
                   static access$700(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
                   static access$800(arg0: com.sun.tools.javac.util.List, arg1: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
                   static access$900(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: com.sun.tools.javac.util.List): com.sun.tools.javac.util.List
                   static access$1000(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.processing.JavacMessager
                   static access$1100(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): boolean
                   static access$1200(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): boolean
                   static access$1300(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.model.JavacElements
                   static access$1400(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: javax.tools.JavaFileObject, arg2: javax.tools.JavaFileObject$Kind): boolean
                   static access$1500(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.api.MultiTaskListener
                   static access$1600(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.processing.JavacFiler
                   static access$1700(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors
                   static access$1800(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment, arg1: com.sun.tools.javac.util.Context, arg2: java.util.Set, arg3: com.sun.tools.javac.util.List, arg4: com.sun.tools.javac.util.List): void
                   static access$1900(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): boolean
                   static access$2000(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): boolean
                   static access$2100(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.util.JavacMessages
                   static access$2200(arg0: com.sun.tools.javac.processing.JavacProcessingEnvironment): com.sun.tools.javac.model.JavacTypes
               }
               class JavacFiler$FilerOutputFileObject extends javax.tools.ForwardingFileObject<javax.tools.FileObject> {
                   this$0: com.sun.tools.javac.processing.JavacFiler
                   constructor(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: java.lang.String, arg2: javax.tools.FileObject)
                   public openOutputStream(): java.io.OutputStream
                   public openWriter(): java.io.Writer
                   public openInputStream(): java.io.InputStream
                   public openReader(arg0: boolean): java.io.Reader
                   public getCharContent(arg0: boolean): java.lang.CharSequence
                   public delete(): boolean
               }
               class JavacFiler$FilerOutputJavaFileObject extends com.sun.tools.javac.processing.JavacFiler$FilerOutputFileObject implements javax.tools.JavaFileObject {
                   this$0: com.sun.tools.javac.processing.JavacFiler
                   constructor(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: java.lang.String, arg2: javax.tools.JavaFileObject)
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public getNestingKind(): javax.lang.model.element.NestingKind
                   public getAccessLevel(): javax.lang.model.element.Modifier
               }
               class JavacFiler$FilerInputFileObject extends javax.tools.ForwardingFileObject<javax.tools.FileObject> {
                   this$0: com.sun.tools.javac.processing.JavacFiler
                   constructor(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: javax.tools.FileObject)
                   public openOutputStream(): java.io.OutputStream
                   public openWriter(): java.io.Writer
                   public delete(): boolean
               }
               class JavacFiler$FilerInputJavaFileObject extends com.sun.tools.javac.processing.JavacFiler$FilerInputFileObject implements javax.tools.JavaFileObject {
                   this$0: com.sun.tools.javac.processing.JavacFiler
                   constructor(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: javax.tools.JavaFileObject)
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public getNestingKind(): javax.lang.model.element.NestingKind
                   public getAccessLevel(): javax.lang.model.element.Modifier
               }
               class JavacFiler$FilerOutputStream extends java.io.FilterOutputStream {
                   typeName: java.lang.String
                   fileObject: javax.tools.FileObject
                   closed: boolean
                   this$0: com.sun.tools.javac.processing.JavacFiler
                   constructor(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: java.lang.String, arg2: javax.tools.FileObject)
                   public close(): void
               }
               class JavacFiler$FilerWriter extends java.io.FilterWriter {
                   typeName: java.lang.String
                   fileObject: javax.tools.FileObject
                   closed: boolean
                   this$0: com.sun.tools.javac.processing.JavacFiler
                   constructor(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: java.lang.String, arg2: javax.tools.FileObject)
                   public close(): void
               }
               class JavacFiler$1 {
                   static $SwitchMap$javax$tools$JavaFileObject$Kind: int[]
               }
               class JavacFiler implements javax.annotation.processing.Filer , java.io.Closeable {
                   fileManager: javax.tools.JavaFileManager
                   log: com.sun.tools.javac.util.Log
                   context: com.sun.tools.javac.util.Context
                   lastRound: boolean
                   constructor(arg0: com.sun.tools.javac.util.Context)
                   public createSourceFile(arg0: java.lang.CharSequence, ...arg1: javax.lang.model.element.Element[]): javax.tools.JavaFileObject
                   public createClassFile(arg0: java.lang.CharSequence, ...arg1: javax.lang.model.element.Element[]): javax.tools.JavaFileObject
                   public createResource(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.CharSequence, arg2: java.lang.CharSequence, ...arg3: javax.lang.model.element.Element[]): javax.tools.FileObject
                   public getResource(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.CharSequence, arg2: java.lang.CharSequence): javax.tools.FileObject
                   public newFiles(): boolean
                   public getGeneratedSourceNames(): java.util.Set<java.lang.String>
                   public getGeneratedSourceFileObjects(): java.util.Set<javax.tools.JavaFileObject>
                   public getGeneratedClasses(): java.util.Map<java.lang.String, javax.tools.JavaFileObject>
                   public warnIfUnclosedFiles(): void
                   public newRound(arg0: com.sun.tools.javac.util.Context): void
                   setLastRound(arg0: boolean): void
                   public close(): void
                   public displayState(): void
                   toString<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.processing.JavacFiler, arg1: java.lang.String, arg2: javax.tools.FileObject): void
               }
               class JavacMessager$1 {
                   static $SwitchMap$javax$tools$Diagnostic$Kind: int[]
               }
               class JavacMessager implements javax.annotation.processing.Messager {
                   log: com.sun.tools.javac.util.Log
                   processingEnv: com.sun.tools.javac.processing.JavacProcessingEnvironment
                   errorCount<T>(...args: any[]): any
                   warningCount<T>(...args: any[]): any
                   constructor(arg0: com.sun.tools.javac.util.Context, arg1: com.sun.tools.javac.processing.JavacProcessingEnvironment)
                   printMessage<T>(...args: any[]): any
                   public printError(arg0: java.lang.String): void
                   public printWarning(arg0: java.lang.String): void
                   public printNotice(arg0: java.lang.String): void
                   public errorRaised(): boolean
                   public newRound(arg0: com.sun.tools.javac.util.Context): void
                   toString<T>(...args: any[]): any
               }
               class ServiceProxy$ServiceConfigurationError extends java.lang.Error {
                   static serialVersionUID: long
                   constructor(arg0: java.lang.String)
               }
               class ServiceProxy {
                   constructor()
                   public static hasService(arg0: java.lang.Class<any>, arg1: java.net.URL[]): boolean
               }
               class PrintingProcessor$PrintingElementVisitor$1 extends javax.lang.model.util.SimpleElementVisitor7<javax.lang.model.element.NestingKind, java.lang.Void> {
                   this$0: com.sun.tools.javac.processing.PrintingProcessor$PrintingElementVisitor
                   constructor(arg0: com.sun.tools.javac.processing.PrintingProcessor$PrintingElementVisitor)
                   visitType<T>(...args: any[]): any
               }
               class PrintingProcessor$PrintingElementVisitor extends javax.lang.model.util.SimpleElementVisitor8<com.sun.tools.javac.processing.PrintingProcessor$PrintingElementVisitor, java.lang.Boolean> {
                   indentation: int
                   writer: java.io.PrintWriter
                   elementUtils: javax.lang.model.util.Elements
                   public constructor(arg0: java.io.Writer, arg1: javax.lang.model.util.Elements)
                   defaultAction<T>(...args: any[]): any
                   visitExecutable<T>(...args: any[]): any
                   visitType<T>(...args: any[]): any
                   visitVariable<T>(...args: any[]): any
                   visitTypeParameter<T>(...args: any[]): any
                   visitPackage<T>(...args: any[]): any
                   public flush(): void
               }
               class PrintingProcessor$1 {
                   static $SwitchMap$javax$lang$model$element$ElementKind: int[]
               }
               class PrintingProcessor extends javax.annotation.processing.AbstractProcessor {
                   writer: java.io.PrintWriter
                   public constructor()
                   public setWriter(arg0: java.io.Writer): void
                   public process(arg0: java.util.Set<javax.lang.model.element.TypeElement>, arg1: javax.annotation.processing.RoundEnvironment): boolean
                   print(arg0: javax.lang.model.element.Element): void
               }
               class JavacRoundEnvironment$AnnotationSetScanner extends javax.lang.model.util.ElementScanner8<java.util.Set<javax.lang.model.element.Element>, javax.lang.model.element.TypeElement> {
                   annotatedElements: java.util.Set<javax.lang.model.element.Element>
                   this$0: com.sun.tools.javac.processing.JavacRoundEnvironment
                   constructor(arg0: java.util.Set<javax.lang.model.element.Element>)
                   visitType<T>(...args: any[]): any
                   visitExecutable<T>(...args: any[]): any
                   scan<T>(...args: any[]): any
               }
               class JavacRoundEnvironment implements javax.annotation.processing.RoundEnvironment {
                   constructor(arg0: boolean, arg1: boolean, arg2: java.util.Set<javax.lang.model.element.Element>, arg3: javax.annotation.processing.ProcessingEnvironment)
                   toString<T>(...args: any[]): any
                   public processingOver(): boolean
                   public errorRaised(): boolean
                   public getRootElements(): java.util.Set<javax.lang.model.element.Element>
                   getElementsAnnotatedWith<T>(...args: any[]): any
                   static access$000(arg0: com.sun.tools.javac.processing.JavacRoundEnvironment): javax.annotation.processing.ProcessingEnvironment
               }
               class AnnotationProcessingError extends java.lang.Error {
                   static serialVersionUID: long
                   constructor(arg0: java.lang.Throwable)
               }

            }
            namespace model {
               class JavacElements$1Vis extends com.sun.tools.javac.tree.JCTree$Visitor {
                   result: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>
                   this$0: com.sun.tools.javac.model.JavacElements
                   constructor(arg0: com.sun.tools.javac.model.JavacElements)
                   public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                   public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                   public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                   public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
               }
               class JavacElements$2Vis implements com.sun.tools.javac.code.Attribute$Visitor {
                   result: com.sun.tools.javac.tree.JCTree
                   val$tree: com.sun.tools.javac.tree.JCTree
                   val$findme: com.sun.tools.javac.code.Attribute$Compound
                   this$0: com.sun.tools.javac.model.JavacElements
                   constructor()
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
               }
               class JavacElements$1TS extends com.sun.tools.javac.tree.TreeScanner {
                   result: com.sun.tools.javac.tree.JCTree$JCExpression
                   val$tree: com.sun.tools.javac.tree.JCTree
                   val$sym: com.sun.tools.javac.code.Symbol$MethodSymbol
                   this$0: com.sun.tools.javac.model.JavacElements
                   constructor()
                   public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                   public visitAnnotation(arg0: com.sun.tools.javac.tree.JCTree$JCAnnotation): void
                   public visitAssign(arg0: com.sun.tools.javac.tree.JCTree$JCAssign): void
               }
               class JavacElements implements javax.lang.model.util.Elements {
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.model.JavacElements
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public setContext(arg0: com.sun.tools.javac.util.Context): void
                   getPackageElement<T>(...args: any[]): any
                   getTypeElement<T>(...args: any[]): any
                   getSourcePosition<T>(...args: any[]): any
                   public getTree(arg0: javax.lang.model.element.Element): com.sun.tools.javac.tree.JCTree
                   public getDocComment(arg0: javax.lang.model.element.Element): java.lang.String
                   public getPackageOf(arg0: javax.lang.model.element.Element): javax.lang.model.element.PackageElement
                   public isDeprecated(arg0: javax.lang.model.element.Element): boolean
                   getBinaryName<T>(...args: any[]): any
                   public getElementValuesWithDefaults(arg0: javax.lang.model.element.AnnotationMirror): java.util.Map<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Attribute>
                   getAllMembers<T>(...args: any[]): any
                   getAllAnnotationMirrors<T>(...args: any[]): any
                   public hides(arg0: javax.lang.model.element.Element, arg1: javax.lang.model.element.Element): boolean
                   public overrides(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.ExecutableElement, arg2: javax.lang.model.element.TypeElement): boolean
                   public getConstantExpression(arg0: java.lang.Object): java.lang.String
                   public printElements(arg0: java.io.Writer, ...arg1: javax.lang.model.element.Element[]): void
                   getName<T>(...args: any[]): any
                   public isFunctionalInterface(arg0: javax.lang.model.element.TypeElement): boolean
                   public getTreeAndTopLevel(arg0: javax.lang.model.element.Element, arg1: javax.lang.model.element.AnnotationMirror, arg2: javax.lang.model.element.AnnotationValue): com.sun.tools.javac.util.Pair<com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree$JCCompilationUnit>
                   static access$000(arg0: com.sun.tools.javac.model.JavacElements, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol, arg2: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree$JCExpression
                   static access$100(arg0: com.sun.tools.javac.model.JavacElements, arg1: com.sun.tools.javac.code.Attribute$Compound, arg2: com.sun.tools.javac.code.Attribute, arg3: com.sun.tools.javac.tree.JCTree): com.sun.tools.javac.tree.JCTree
                   static access$200(arg0: com.sun.tools.javac.model.JavacElements): com.sun.tools.javac.code.Types
               }
               class JavacTypes$1 {
                   static $SwitchMap$javax$lang$model$type$TypeKind: int[]
               }
               class JavacTypes implements javax.lang.model.util.Types {
                   public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javac.model.JavacTypes
                   protected constructor(arg0: com.sun.tools.javac.util.Context)
                   public setContext(arg0: com.sun.tools.javac.util.Context): void
                   public asElement(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.element.Element
                   public isSameType(arg0: javax.lang.model.type.TypeMirror, arg1: javax.lang.model.type.TypeMirror): boolean
                   public isSubtype(arg0: javax.lang.model.type.TypeMirror, arg1: javax.lang.model.type.TypeMirror): boolean
                   public isAssignable(arg0: javax.lang.model.type.TypeMirror, arg1: javax.lang.model.type.TypeMirror): boolean
                   public contains(arg0: javax.lang.model.type.TypeMirror, arg1: javax.lang.model.type.TypeMirror): boolean
                   public isSubsignature(arg0: javax.lang.model.type.ExecutableType, arg1: javax.lang.model.type.ExecutableType): boolean
                   public directSupertypes(arg0: javax.lang.model.type.TypeMirror): java.util.List<com.sun.tools.javac.code.Type>
                   public erasure(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.type.TypeMirror
                   public boxedClass(arg0: javax.lang.model.type.PrimitiveType): javax.lang.model.element.TypeElement
                   public unboxedType(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.type.PrimitiveType
                   public capture(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.type.TypeMirror
                   public getPrimitiveType(arg0: javax.lang.model.type.TypeKind): javax.lang.model.type.PrimitiveType
                   public getNullType(): javax.lang.model.type.NullType
                   public getNoType(arg0: javax.lang.model.type.TypeKind): javax.lang.model.type.NoType
                   public getArrayType(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.type.ArrayType
                   public getWildcardType(arg0: javax.lang.model.type.TypeMirror, arg1: javax.lang.model.type.TypeMirror): javax.lang.model.type.WildcardType
                   getDeclaredType<T>(...args: any[]): any
                   public asMemberOf(arg0: javax.lang.model.type.DeclaredType, arg1: javax.lang.model.element.Element): javax.lang.model.type.TypeMirror
                   public getOverriddenMethods(arg0: javax.lang.model.element.Element): java.util.Set<com.sun.tools.javac.code.Symbol$MethodSymbol>
               }
               class JavacSourcePosition {
                   sourcefile: javax.tools.JavaFileObject
                   pos: int
                   lineMap: com.sun.tools.javac.util.Position$LineMap
                   constructor(arg0: javax.tools.JavaFileObject, arg1: int, arg2: com.sun.tools.javac.util.Position$LineMap)
                   public getFile(): javax.tools.JavaFileObject
                   public getOffset(): int
                   public getLine(): int
                   public getColumn(): int
                   toString<T>(...args: any[]): any
               }
               class FilteredMemberList$1 implements java.util.Iterator<com.sun.tools.javac.code.Symbol> {
                   this$0: com.sun.tools.javac.model.FilteredMemberList
                   constructor(arg0: com.sun.tools.javac.model.FilteredMemberList)
                   public hasNext(): boolean
                   next<T>(...args: any[]): any
                   public remove(): void
               }
               class FilteredMemberList extends java.util.AbstractList<com.sun.tools.javac.code.Symbol> {
                   public constructor(arg0: com.sun.tools.javac.code.Scope)
                   public size(): int
                   get<T>(...args: any[]): any
                   public iterator(): java.util.Iterator<com.sun.tools.javac.code.Symbol>
                   static access$000(arg0: com.sun.tools.javac.model.FilteredMemberList): com.sun.tools.javac.code.Scope
                   static access$100(arg0: com.sun.tools.javac.code.Symbol): boolean
               }
               class AnnotationProxyMaker$ValueVisitor$1AnnotationTypeMismatchExceptionProxy extends sun.reflect.annotation.ExceptionProxy {
                   static serialVersionUID: long
                   method: java.lang.reflect.Method
                   val$attr: com.sun.tools.javac.code.Attribute
                   this$1: com.sun.tools.javac.model.AnnotationProxyMaker$ValueVisitor
                   constructor(arg0: java.lang.reflect.Method)
                   toString<T>(...args: any[]): any
                   protected generateException(): java.lang.RuntimeException
               }
               class AnnotationProxyMaker$ValueVisitor implements com.sun.tools.javac.code.Attribute$Visitor {
                   this$0: com.sun.tools.javac.model.AnnotationProxyMaker
                   constructor(arg0: com.sun.tools.javac.model.AnnotationProxyMaker, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol)
                   getValue(arg0: com.sun.tools.javac.code.Attribute): java.lang.Object
                   public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                   public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                   public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                   public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                   public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                   public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
               }
               class AnnotationProxyMaker$MirroredTypeExceptionProxy extends sun.reflect.annotation.ExceptionProxy {
                   static serialVersionUID: long
                   constructor(arg0: javax.lang.model.type.TypeMirror)
                   toString<T>(...args: any[]): any
                   public hashCode(): int
                   public equals(arg0: java.lang.Object): boolean
                   protected generateException(): java.lang.RuntimeException
               }
               class AnnotationProxyMaker$MirroredTypesExceptionProxy extends sun.reflect.annotation.ExceptionProxy {
                   static serialVersionUID: long
                   constructor(arg0: com.sun.tools.javac.util.List<javax.lang.model.type.TypeMirror>)
                   toString<T>(...args: any[]): any
                   public hashCode(): int
                   public equals(arg0: java.lang.Object): boolean
                   protected generateException(): java.lang.RuntimeException
               }
               class AnnotationProxyMaker {
                   public static generateAnnotation<A extends java.lang.annotation.Annotation>(arg0: com.sun.tools.javac.code.Attribute$Compound, arg1: java.lang.Class<A>): A
                   static access$000(arg0: com.sun.tools.javac.model.AnnotationProxyMaker): java.lang.Class
               }

            }
            namespace sym {
               class Profiles$MakefileProfiles$Package {
                   parent: com.sun.tools.javac.sym.Profiles$MakefileProfiles$Package
                   name: java.lang.String
                   subpackages: java.util.Map<java.lang.String, com.sun.tools.javac.sym.Profiles$MakefileProfiles$Package>
                   profile: int
                   includedTypes: java.util.Map<java.lang.String, java.lang.Integer>
                   excludedTypes: java.util.Map<java.lang.String, java.lang.Integer>
                   constructor(arg0: com.sun.tools.javac.sym.Profiles$MakefileProfiles$Package, arg1: java.lang.String)
                   getProfile<T>(...args: any[]): any
                   getName(): java.lang.String
                   getPackages(arg0: int, arg1: java.util.Set<java.lang.String>): void
               }
               class Profiles$MakefileProfiles extends com.sun.tools.javac.sym.Profiles {
                   packages: java.util.Map<java.lang.String, com.sun.tools.javac.sym.Profiles$MakefileProfiles$Package>
                   maxProfile: int
                   constructor(arg0: java.util.Properties)
                   public getProfileCount(): int
                   public getProfile(arg0: java.lang.String): int
                   public getPackages(arg0: int): java.util.Set<java.lang.String>
               }
               class Profiles$SimpleProfiles extends com.sun.tools.javac.sym.Profiles {
                   constructor(arg0: java.util.Properties)
                   public getProfileCount(): int
                   public getProfile(arg0: java.lang.String): int
                   public getPackages(arg0: int): java.util.Set<java.lang.String>
               }
               abstract class Profiles {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   public static read(arg0: java.io.File): com.sun.tools.javac.sym.Profiles
                   public getProfileCount(): int
                   public getProfile(arg0: java.lang.String): int
                   public getPackages(arg0: int): java.util.Set<java.lang.String>
               }
               class CreateSymbols extends javax.annotation.processing.AbstractProcessor {
                   public constructor()
                   static getLegacyPackages(): java.util.Set<java.lang.String>
                   public process(arg0: java.util.Set<javax.lang.model.element.TypeElement>, arg1: javax.annotation.processing.RoundEnvironment): boolean
                   createSymbols(): void
                   writeClass(arg0: com.sun.tools.javac.jvm.Pool, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: com.sun.tools.javac.jvm.ClassWriter): void
                   public getSupportedSourceVersion(): javax.lang.model.SourceVersion
                   public static main(...arg0: java.lang.String[]): void
               }

            }
            namespace nio {
               class PathFileObject$1 extends com.sun.tools.javac.nio.PathFileObject {
                   val$dir: java.nio.file.Path
                   val$path: java.nio.file.Path
                   constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path, arg2: java.nio.file.Path, arg3: java.nio.file.Path)
                   inferBinaryName(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.String
               }
               class PathFileObject$2 extends com.sun.tools.javac.nio.PathFileObject {
                   val$path: java.nio.file.Path
                   constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path, arg2: java.nio.file.Path)
                   inferBinaryName(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.String
               }
               class PathFileObject$3 extends com.sun.tools.javac.nio.PathFileObject {
                   val$relativePath: java.lang.String
                   constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path, arg2: java.lang.String)
                   inferBinaryName(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.String
               }
               class PathFileObject$4 extends com.sun.tools.javac.nio.PathFileObject {
                   val$path: java.nio.file.Path
                   constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path, arg2: java.nio.file.Path)
                   inferBinaryName(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.String
               }
               abstract class PathFileObject implements javax.tools.JavaFileObject {
                   static createDirectoryPathFileObject(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path, arg2: java.nio.file.Path): com.sun.tools.javac.nio.PathFileObject
                   static createJarPathFileObject(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path): com.sun.tools.javac.nio.PathFileObject
                   static createSiblingPathFileObject(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path, arg2: java.lang.String): com.sun.tools.javac.nio.PathFileObject
                   static createSimplePathFileObject(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path): com.sun.tools.javac.nio.PathFileObject
                   protected constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.nio.file.Path)
                   inferBinaryName(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.String
                   getPath(): java.nio.file.Path
                   public getKind(): javax.tools.JavaFileObject$Kind
                   public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                   public getNestingKind(): javax.lang.model.element.NestingKind
                   public getAccessLevel(): javax.lang.model.element.Modifier
                   public toUri(): java.net.URI
                   public getName(): java.lang.String
                   public openInputStream(): java.io.InputStream
                   public openOutputStream(): java.io.OutputStream
                   public openReader(arg0: boolean): java.io.Reader
                   public getCharContent(arg0: boolean): java.lang.CharSequence
                   public openWriter(): java.io.Writer
                   public getLastModified(): long
                   public delete(): boolean
                   public isSameFile(arg0: com.sun.tools.javac.nio.PathFileObject): boolean
                   public equals(arg0: java.lang.Object): boolean
                   public hashCode(): int
                   toString<T>(...args: any[]): any
                   toBinaryName<T>(...args: any[]): any
                   protected static removeExtension(arg0: java.lang.String): java.lang.String
               }
               class JavacPathFileManager$PathsForLocation extends java.util.LinkedHashSet<java.nio.file.Path> {
                   constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager$1)
               }
               class JavacPathFileManager$1 extends java.nio.file.SimpleFileVisitor<java.nio.file.Path> {
                   val$kinds: java.util.Set
                   val$pathDir: java.nio.file.Path
                   val$results: com.sun.tools.javac.util.ListBuffer
                   this$0: com.sun.tools.javac.nio.JavacPathFileManager
                   constructor(arg0: com.sun.tools.javac.nio.JavacPathFileManager, arg1: java.util.Set, arg2: java.nio.file.Path, arg3: com.sun.tools.javac.util.ListBuffer)
                   preVisitDirectory<T>(...args: any[]): any
                   visitFile<T>(...args: any[]): any
               }
               class JavacPathFileManager$2 {
                   static $SwitchMap$javax$tools$StandardLocation: int[]
               }
               class JavacPathFileManager extends com.sun.tools.javac.util.BaseFileManager implements com.sun.tools.javac.nio.PathFileManager {
                   protected defaultFileSystem: java.nio.file.FileSystem
                   public constructor(arg0: com.sun.tools.javac.util.Context, arg1: boolean, arg2: java.nio.charset.Charset)
                   public setContext(arg0: com.sun.tools.javac.util.Context): void
                   public getDefaultFileSystem(): java.nio.file.FileSystem
                   public setDefaultFileSystem(arg0: java.nio.file.FileSystem): void
                   public flush(): void
                   public close(): void
                   public getClassLoader(arg0: javax.tools.JavaFileManager$Location): java.lang.ClassLoader
                   public isDefaultBootClassPath(): boolean
                   public hasLocation(arg0: javax.tools.JavaFileManager$Location): boolean
                   public getLocation(arg0: javax.tools.JavaFileManager$Location): java.lang.Iterable<java.nio.file.Path>
                   public setLocation(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.Iterable<java.nio.file.Path>): void
                   public getPath(arg0: javax.tools.FileObject): java.nio.file.Path
                   public isSameFile(arg0: javax.tools.FileObject, arg1: javax.tools.FileObject): boolean
                   public list(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.util.Set<javax.tools.JavaFileObject$Kind>, arg3: boolean): java.lang.Iterable<javax.tools.JavaFileObject>
                   public getJavaFileObjectsFromPaths(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.Iterable<javax.tools.JavaFileObject>
                   public getJavaFileObjects(...arg0: java.nio.file.Path[]): java.lang.Iterable<javax.tools.JavaFileObject>
                   public getJavaFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind): javax.tools.JavaFileObject
                   public getFileForInput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.lang.String): javax.tools.FileObject
                   public getJavaFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: javax.tools.JavaFileObject$Kind, arg3: javax.tools.FileObject): javax.tools.JavaFileObject
                   public getFileForOutput(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.String, arg2: java.lang.String, arg3: javax.tools.FileObject): javax.tools.FileObject
                   public inferBinaryName(arg0: javax.tools.JavaFileManager$Location, arg1: javax.tools.JavaFileObject): java.lang.String
               }
               interface PathFileManager extends javax.tools.JavaFileManager {
                   public getDefaultFileSystem(): java.nio.file.FileSystem
                   public setDefaultFileSystem(arg0: java.nio.file.FileSystem): void
                   public getJavaFileObjectsFromPaths(arg0: java.lang.Iterable<java.nio.file.Path>): java.lang.Iterable<javax.tools.JavaFileObject>
                   public getJavaFileObjects(...arg0: java.nio.file.Path[]): java.lang.Iterable<javax.tools.JavaFileObject>
                   public getPath(arg0: javax.tools.FileObject): java.nio.file.Path
                   public getLocation(arg0: javax.tools.JavaFileManager$Location): java.lang.Iterable<java.nio.file.Path>
                   public setLocation(arg0: javax.tools.JavaFileManager$Location, arg1: java.lang.Iterable<java.nio.file.Path>): void
               }

            }
            class Main {
                public constructor()
                public static main(arg0: java.lang.String[]): void
                compile<T>(...args: any[]): any
            }
            namespace resources {
               class version extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class compiler extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class compiler_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class compiler_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javac extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javac_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javac_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class legacy extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }

         }
         namespace doclets {
            namespace internal {
               namespace toolkit {
                  namespace resources {
                     class doclets extends java.util.ListResourceBundle {
                         public constructor()
                         protected getContents(): java.lang.Object[][]
                     }
                     class doclets_ja extends java.util.ListResourceBundle {
                         public constructor()
                         protected getContents(): java.lang.Object[][]
                     }
                     class doclets_zh_CN extends java.util.ListResourceBundle {
                         public constructor()
                         protected getContents(): java.lang.Object[][]
                     }

                  }
                  namespace util {
                     namespace links {
                        interface LinkOutput {
                            public append(arg0: java.lang.Object): void
                            public insert(arg0: int, arg1: java.lang.Object): void
                        }
                        abstract class LinkInfo {
                            public classDoc: com.sun.javadoc.ClassDoc
                            public executableMemberDoc: com.sun.javadoc.ExecutableMemberDoc
                            public type: com.sun.javadoc.Type
                            public isVarArg: boolean
                            public isTypeBound: boolean
                            public isJava5DeclarationLocation: boolean
                            public label: com.sun.tools.doclets.internal.toolkit.Content
                            public isStrong: boolean
                            public includeTypeInClassLinkLabel: boolean
                            public includeTypeAsSepLink: boolean
                            public excludeTypeBounds: boolean
                            public excludeTypeParameterLinks: boolean
                            public excludeTypeBoundsLinks: boolean
                            public linkToSelf: boolean
                            public constructor()
                            protected newContent(): com.sun.tools.doclets.internal.toolkit.Content
                            public isLinkable(): boolean
                            public getClassLinkLabel(arg0: com.sun.tools.doclets.internal.toolkit.Configuration): com.sun.tools.doclets.internal.toolkit.Content
                        }
                        abstract class LinkFactory {
                            public constructor()
                            protected newContent(): com.sun.tools.doclets.internal.toolkit.Content
                            public getLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo): com.sun.tools.doclets.internal.toolkit.Content
                            protected getClassLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo): com.sun.tools.doclets.internal.toolkit.Content
                            protected getTypeParameterLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo, arg1: com.sun.javadoc.Type): com.sun.tools.doclets.internal.toolkit.Content
                            protected getTypeAnnotationLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo, arg1: com.sun.javadoc.AnnotationDesc): com.sun.tools.doclets.internal.toolkit.Content
                            getTypeParameterLinks<T>(...args: any[]): any
                            public getTypeAnnotationLinks(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo): com.sun.tools.doclets.internal.toolkit.Content
                        }

                     }
                     class ClassTree {
                         constructor(...args: any[])
                         public subclasses(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ClassDoc>
                         public subinterfaces(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ClassDoc>
                         public implementingclasses(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ClassDoc>
                         public subs(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): java.util.List<com.sun.javadoc.ClassDoc>
                         public allSubs(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): java.util.List<com.sun.javadoc.ClassDoc>
                         public baseclasses(): java.util.List<com.sun.javadoc.ClassDoc>
                         public baseinterfaces(): java.util.List<com.sun.javadoc.ClassDoc>
                         public baseEnums(): java.util.List<com.sun.javadoc.ClassDoc>
                         public baseAnnotationTypes(): java.util.List<com.sun.javadoc.ClassDoc>
                     }
                     class MetaKeywords {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         getMetaKeywords<T>(...args: any[]): any
                         protected getClassKeyword(arg0: com.sun.javadoc.ClassDoc): java.util.ArrayList<java.lang.String>
                         public getOverviewMetaKeywords(arg0: java.lang.String, arg1: java.lang.String): java.lang.String[]
                         protected getMemberKeywords(arg0: com.sun.javadoc.MemberDoc[]): java.util.ArrayList<java.lang.String>
                     }
                     class ClassDocCatalog {
                         constructor(...args: any[])
                         public addClassDoc(arg0: com.sun.javadoc.ClassDoc): void
                         allClasses<T>(...args: any[]): any
                         public packageNames(): java.lang.String[]
                         public isKnownPackage(arg0: java.lang.String): boolean
                         public errors(arg0: java.lang.String): com.sun.javadoc.ClassDoc[]
                         public exceptions(arg0: java.lang.String): com.sun.javadoc.ClassDoc[]
                         public enums(arg0: java.lang.String): com.sun.javadoc.ClassDoc[]
                         public annotationTypes(arg0: java.lang.String): com.sun.javadoc.ClassDoc[]
                         public interfaces(arg0: java.lang.String): com.sun.javadoc.ClassDoc[]
                         public ordinaryClasses(arg0: java.lang.String): com.sun.javadoc.ClassDoc[]
                     }
                     class MessageRetriever {
                         constructor(...args: any[])
                         public getText(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                         error<T>(...args: any[]): any
                         warning<T>(...args: any[]): any
                         notice<T>(...args: any[]): any
                     }
                     class Group$MapKeyComparator implements java.util.Comparator<java.lang.String> {
                         compare<T>(...args: any[]): any
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.Group$1)
                     }
                     class Group$1 {
                     }
                     class Group {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public checkPackageGroups(arg0: java.lang.String, arg1: java.lang.String): boolean
                         foundGroupFormat(arg0: java.util.Map<java.lang.String, any>, arg1: java.lang.String): boolean
                         public groupPackages(arg0: com.sun.javadoc.PackageDoc[]): java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.PackageDoc>>
                         regExpGroupName(arg0: java.lang.String): java.lang.String
                         getPkgList(arg0: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.PackageDoc>>, arg1: java.lang.String): java.util.List<com.sun.javadoc.PackageDoc>
                         public getGroupList(): java.util.List<java.lang.String>
                     }
                     class Extern$Item {
                         packageName: java.lang.String
                         path: java.lang.String
                         relative: boolean
                         this$0: com.sun.tools.doclets.internal.toolkit.util.Extern
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.Extern, arg1: java.lang.String, arg2: java.lang.String, arg3: boolean)
                         toString<T>(...args: any[]): any
                     }
                     class Extern$Fault extends java.lang.Exception {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.Extern
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.Extern, arg1: java.lang.String, arg2: java.lang.Exception)
                     }
                     class Extern {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public isExternal(arg0: com.sun.javadoc.ProgramElementDoc): boolean
                         getExternalLink<T>(...args: any[]): any
                         public link(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.javadoc.DocErrorReporter, arg3: boolean): boolean
                         public isUrl(arg0: java.lang.String): boolean
                         static access$000(arg0: com.sun.tools.doclets.internal.toolkit.util.Extern): java.util.Map
                         static access$002(arg0: com.sun.tools.doclets.internal.toolkit.util.Extern, arg1: java.util.Map): java.util.Map
                     }
                     class DocPath {
                         public static empty: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         parent<T>(...args: any[]): any
                         public static create(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static forClass(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static forName(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         forPackage<T>(...args: any[]): any
                         public static forRoot(arg0: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static relativePath(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         protected constructor(arg0: java.lang.String)
                         public equals(arg0: java.lang.Object): boolean
                         public hashCode(): int
                         public basename(): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         resolve<T>(...args: any[]): any
                         public invert(): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public isEmpty(): boolean
                         public fragment(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocLink
                         public query(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocLink
                         public getPath(): java.lang.String
                     }
                     class DocLink {
                         path: java.lang.String
                         query: java.lang.String
                         fragment<T>(...args: any[]): any
                         constructor(...args: any[])
                         toString<T>(...args: any[]): any
                     }
                     abstract class DocFile {
                         protected location: javax.tools.JavaFileManager$Location
                         protected path: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static createFileForDirectory(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public static createFileForInput(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public static createFileForOutput(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         list<T>(...args: any[]): any
                         constructor(...args: any[])
                         public openInputStream(): java.io.InputStream
                         public openOutputStream(): java.io.OutputStream
                         public openWriter(): java.io.Writer
                         public copyFile(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFile): void
                         public copyResource(arg0: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg1: boolean, arg2: boolean): void
                         public canRead(): boolean
                         public canWrite(): boolean
                         public exists(): boolean
                         public getName(): java.lang.String
                         public getPath(): java.lang.String
                         public isAbsolute(): boolean
                         public isDirectory(): boolean
                         public isFile(): boolean
                         public isSameFile(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFile): boolean
                         public mkdirs(): boolean
                         resolve<T>(...args: any[]): any
                         public resolveAgainst(arg0: javax.tools.JavaFileManager$Location): com.sun.tools.doclets.internal.toolkit.util.DocFile
                     }
                     class VisibleMemberMap$ClassMember {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: com.sun.javadoc.ProgramElementDoc)
                         public addMember(arg0: com.sun.javadoc.ProgramElementDoc): void
                         public isEqual(arg0: com.sun.javadoc.MethodDoc): boolean
                     }
                     class VisibleMemberMap$ClassMembers {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public getMembers(): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: com.sun.javadoc.ClassDoc, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap$1)
                         static access$100(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap$ClassMembers): void
                     }
                     class VisibleMemberMap$GetterSetter {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.javadoc.ProgramElementDoc)
                         public getGetter(): com.sun.javadoc.ProgramElementDoc
                         public getSetter(): com.sun.javadoc.ProgramElementDoc
                     }
                     class VisibleMemberMap$1 {
                     }
                     class VisibleMemberMap {
                         public static INNERCLASSES: int
                         public static ENUM_CONSTANTS: int
                         public static FIELDS: int
                         public static CONSTRUCTORS: int
                         public static METHODS: int
                         public static ANNOTATION_TYPE_FIELDS: int
                         public static ANNOTATION_TYPE_MEMBER_OPTIONAL: int
                         public static ANNOTATION_TYPE_MEMBER_REQUIRED: int
                         public static PROPERTIES: int
                         public static NUM_MEMBER_TYPES: int
                         public static STARTLEVEL: java.lang.String
                         public constructor(arg0: com.sun.javadoc.ClassDoc, arg1: int, arg2: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public getVisibleClassesList(): java.util.List<com.sun.javadoc.ClassDoc>
                         public getPropertyMemberDoc(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.javadoc.ProgramElementDoc
                         public getGetterForProperty(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.javadoc.ProgramElementDoc
                         public getSetterForProperty(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.javadoc.ProgramElementDoc
                         public getLeafClassMembers(arg0: com.sun.tools.doclets.internal.toolkit.Configuration): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public getMembersFor(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public noVisibleMembers(): boolean
                         static access$200(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap): java.util.Map
                         static access$300(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: java.util.List, arg2: java.lang.String): void
                         static access$400(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap): java.util.List
                         static access$500(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap): int
                         static access$602(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: boolean): boolean
                         static access$700(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: java.util.List, arg2: java.lang.String): void
                         static access$800(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap): com.sun.tools.doclets.internal.toolkit.Configuration
                         static access$900(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap): com.sun.javadoc.ClassDoc
                         static access$1000(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg1: com.sun.javadoc.ProgramElementDoc): java.lang.Object
                         static access$1100(arg0: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap): java.util.Map
                         static access$1200(): java.util.Map
                         static access$1300(): java.util.Map
                         static access$1400(): java.util.Map
                     }
                     class Util$TypeComparator implements java.util.Comparator<com.sun.javadoc.Type> {
                         compare<T>(...args: any[]): any
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.Util$1)
                     }
                     class Util$1 {
                     }
                     class Util {
                         public constructor()
                         public static excludeDeprecatedMembers(arg0: com.sun.javadoc.ProgramElementDoc[]): com.sun.javadoc.ProgramElementDoc[]
                         public static excludeDeprecatedMembersAsList(arg0: com.sun.javadoc.ProgramElementDoc[]): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public static toProgramElementDocArray(arg0: java.util.List<com.sun.javadoc.ProgramElementDoc>): com.sun.javadoc.ProgramElementDoc[]
                         public static nonPublicMemberFound(arg0: com.sun.javadoc.ProgramElementDoc[]): boolean
                         public static findMethod(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.MethodDoc): com.sun.javadoc.MethodDoc
                         public static executableMembersEqual(arg0: com.sun.javadoc.ExecutableMemberDoc, arg1: com.sun.javadoc.ExecutableMemberDoc): boolean
                         public static isCoreClass(arg0: com.sun.javadoc.ClassDoc): boolean
                         public static matches(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.javadoc.ProgramElementDoc): boolean
                         copyDocFiles<T>(...args: any[]): any
                         getAllInterfaces<T>(...args: any[]): any
                         public static quote(arg0: java.lang.String): java.lang.String
                         public static getPackageName(arg0: com.sun.javadoc.PackageDoc): java.lang.String
                         public static getPackageFileHeadName(arg0: com.sun.javadoc.PackageDoc): java.lang.String
                         public static replaceText(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): java.lang.String
                         public static isDocumentedAnnotation(arg0: com.sun.javadoc.AnnotationTypeDoc): boolean
                         public static isDeclarationAnnotation(arg0: com.sun.javadoc.AnnotationTypeDoc, arg1: boolean): boolean
                         public static isLinkable(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Configuration): boolean
                         public static getFirstVisibleSuperClass(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Configuration): com.sun.javadoc.Type
                         public static getFirstVisibleSuperClassCD(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Configuration): com.sun.javadoc.ClassDoc
                         public static getTypeName(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: com.sun.javadoc.ClassDoc, arg2: boolean): java.lang.String
                         public static replaceTabs(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: java.lang.String): java.lang.String
                         public static normalizeNewlines(arg0: java.lang.String): java.lang.String
                         public static setEnumDocumentation(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: com.sun.javadoc.ClassDoc): void
                         public static isDeprecated(arg0: com.sun.javadoc.Doc): boolean
                         public static propertyNameFromMethodName(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: java.lang.String): java.lang.String
                         public static filterOutPrivateClasses(arg0: com.sun.javadoc.ClassDoc[], arg1: boolean): com.sun.javadoc.ClassDoc[]
                         public static isJava5DeclarationElementType(arg0: com.sun.javadoc.FieldDoc): boolean
                     }
                     class TextTag implements com.sun.javadoc.Tag {
                         text<T>(...args: any[]): any
                         name<T>(...args: any[]): any
                         holder<T>(...args: any[]): any
                         public constructor(arg0: com.sun.javadoc.Doc, arg1: java.lang.String)
                         public kind(): java.lang.String
                         toString<T>(...args: any[]): any
                         public inlineTags(): com.sun.javadoc.Tag[]
                         public firstSentenceTags(): com.sun.javadoc.Tag[]
                         public position(): com.sun.javadoc.SourcePosition
                     }
                     class TaggedMethodFinder extends com.sun.tools.doclets.internal.toolkit.util.MethodFinder {
                         public constructor()
                         public isCorrectMethod(arg0: com.sun.javadoc.MethodDoc): boolean
                     }
                     abstract class MethodFinder {
                         public constructor()
                         isCorrectMethod(arg0: com.sun.javadoc.MethodDoc): boolean
                         public search(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.MethodDoc): com.sun.javadoc.MethodDoc
                         public searchInterfaces(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.MethodDoc): com.sun.javadoc.MethodDoc
                     }
                     class StandardDocFileFactory$StandardDocFile extends com.sun.tools.doclets.internal.toolkit.util.DocFile {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.StandardDocFileFactory
                         public openInputStream(): java.io.InputStream
                         public openOutputStream(): java.io.OutputStream
                         public openWriter(): java.io.Writer
                         public canRead(): boolean
                         public canWrite(): boolean
                         public exists(): boolean
                         public getName(): java.lang.String
                         public getPath(): java.lang.String
                         public isAbsolute(): boolean
                         public isDirectory(): boolean
                         public isFile(): boolean
                         public isSameFile(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFile): boolean
                         public list(): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                         public mkdirs(): boolean
                         resolve<T>(...args: any[]): any
                         public resolveAgainst(arg0: javax.tools.JavaFileManager$Location): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         toString<T>(...args: any[]): any
                         constructor(...args: any[])
                     }
                     class StandardDocFileFactory$1 {
                     }
                     class StandardDocFileFactory extends com.sun.tools.doclets.internal.toolkit.util.DocFileFactory {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public createFileForDirectory(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public createFileForInput(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public createFileForOutput(arg0: com.sun.tools.doclets.internal.toolkit.util.DocPath): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         list(arg0: javax.tools.JavaFileManager$Location, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                         static access$200(arg0: com.sun.tools.doclets.internal.toolkit.util.StandardDocFileFactory): java.io.File
                         static access$300(arg0: java.io.File, arg1: java.lang.String): java.io.File
                         static access$400(arg0: com.sun.tools.doclets.internal.toolkit.util.StandardDocFileFactory): javax.tools.StandardJavaFileManager
                     }
                     abstract class DocFileFactory {
                         protected configuration: com.sun.tools.doclets.internal.toolkit.Configuration
                         static getFactory(arg0: com.sun.tools.doclets.internal.toolkit.Configuration): com.sun.tools.doclets.internal.toolkit.util.DocFileFactory
                         protected constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         createFileForDirectory(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         createFileForInput(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         createFileForOutput(arg0: com.sun.tools.doclets.internal.toolkit.util.DocPath): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         list(arg0: javax.tools.JavaFileManager$Location, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                     }
                     class SimpleDocFileFactory$SimpleDocFile extends com.sun.tools.doclets.internal.toolkit.util.DocFile {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.SimpleDocFileFactory
                         public openInputStream(): java.io.InputStream
                         public openOutputStream(): java.io.OutputStream
                         public openWriter(): java.io.Writer
                         public canRead(): boolean
                         public canWrite(): boolean
                         public exists(): boolean
                         public getName(): java.lang.String
                         public getPath(): java.lang.String
                         public isAbsolute(): boolean
                         public isDirectory(): boolean
                         public isFile(): boolean
                         public isSameFile(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFile): boolean
                         public list(): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                         public mkdirs(): boolean
                         resolve<T>(...args: any[]): any
                         public resolveAgainst(arg0: javax.tools.JavaFileManager$Location): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         toString<T>(...args: any[]): any
                         constructor(...args: any[])
                     }
                     class SimpleDocFileFactory$1 {
                     }
                     class SimpleDocFileFactory extends com.sun.tools.doclets.internal.toolkit.util.DocFileFactory {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public createFileForDirectory(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public createFileForInput(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public createFileForOutput(arg0: com.sun.tools.doclets.internal.toolkit.util.DocPath): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         list(arg0: javax.tools.JavaFileManager$Location, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                     }
                     class PathDocFileFactory$StandardDocFile extends com.sun.tools.doclets.internal.toolkit.util.DocFile {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.PathDocFileFactory
                         public openInputStream(): java.io.InputStream
                         public openOutputStream(): java.io.OutputStream
                         public openWriter(): java.io.Writer
                         public canRead(): boolean
                         public canWrite(): boolean
                         public exists(): boolean
                         public getName(): java.lang.String
                         public getPath(): java.lang.String
                         public isAbsolute(): boolean
                         public isDirectory(): boolean
                         public isFile(): boolean
                         public isSameFile(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFile): boolean
                         public list(): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                         public mkdirs(): boolean
                         resolve<T>(...args: any[]): any
                         public resolveAgainst(arg0: javax.tools.JavaFileManager$Location): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         toString<T>(...args: any[]): any
                         constructor(...args: any[])
                     }
                     class PathDocFileFactory$1 {
                     }
                     class PathDocFileFactory extends com.sun.tools.doclets.internal.toolkit.util.DocFileFactory {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public createFileForDirectory(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public createFileForInput(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         public createFileForOutput(arg0: com.sun.tools.doclets.internal.toolkit.util.DocPath): com.sun.tools.doclets.internal.toolkit.util.DocFile
                         list(arg0: javax.tools.JavaFileManager$Location, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): java.lang.Iterable<com.sun.tools.doclets.internal.toolkit.util.DocFile>
                         static access$200(arg0: com.sun.tools.doclets.internal.toolkit.util.PathDocFileFactory): java.nio.file.Path
                         static access$300(arg0: com.sun.tools.doclets.internal.toolkit.util.PathDocFileFactory): com.sun.tools.javac.nio.PathFileManager
                     }
                     class PackageListWriter extends java.io.PrintWriter {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public static generate(arg0: com.sun.tools.doclets.internal.toolkit.Configuration): void
                         protected generatePackageListFile(arg0: com.sun.javadoc.RootDoc): void
                     }
                     class MethodTypes extends java.lang.Enum<com.sun.tools.doclets.internal.toolkit.util.MethodTypes> {
                         public static ALL: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static STATIC: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static INSTANCE: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static ABSTRACT: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static CONCRETE: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static DEFAULT: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static DEPRECATED: com.sun.tools.doclets.internal.toolkit.util.MethodTypes
                         public static values(): com.sun.tools.doclets.internal.toolkit.util.MethodTypes[]
                         valueOf<T>(...args: any[]): any
                         public value(): int
                         public resourceKey(): java.lang.String
                         public tabId(): java.lang.String
                         public isDefaultTab(): boolean
                     }
                     class IndexBuilder$DocComparator implements java.util.Comparator<com.sun.javadoc.Doc> {
                         this$0: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder
                         compare<T>(...args: any[]): any
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder, arg1: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder$1)
                     }
                     class IndexBuilder$1 {
                     }
                     class IndexBuilder {
                         elements<T>(...args: any[]): any
                         constructor(...args: any[])
                         protected sortIndexMap(): void
                         protected buildIndexMap(arg0: com.sun.javadoc.RootDoc): void
                         protected putMembersInIndexMap(arg0: com.sun.javadoc.ClassDoc): void
                         protected adjustIndexMap(arg0: com.sun.javadoc.Doc[]): void
                         protected shouldAddToIndexMap(arg0: com.sun.javadoc.Doc): boolean
                         public getIndexMap(): java.util.Map<java.lang.Character, java.util.List<com.sun.javadoc.Doc>>
                         public getMemberList(arg0: java.lang.Character): java.util.List<com.sun.javadoc.Doc>
                     }
                     class ImplementedMethods {
                         public constructor(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Configuration)
                         build<T>(...args: any[]): any
                         public getMethodHolder(arg0: com.sun.javadoc.MethodDoc): com.sun.javadoc.Type
                     }
                     class FatalError extends java.lang.Error {
                         public constructor()
                     }
                     class DocletConstants {
                         public static DEFAULT_TAB_STOP_LENGTH: int
                         public static NL: java.lang.String
                         public static DEFAULT_PACKAGE_NAME: java.lang.String
                         public static DEFAULT_PACKAGE_FILE_NAME: java.lang.String
                         public constructor()
                     }
                     class DocletAbortException extends java.lang.RuntimeException {
                         constructor(...args: any[])
                     }
                     class DocPaths {
                         public static ALLCLASSES_FRAME: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static ALLCLASSES_NOFRAME: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static CLASS_USE: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static CONSTANT_VALUES: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static DEPRECATED_LIST: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static DOC_FILES: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static HELP_DOC: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static INDEX: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static INDEX_ALL: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static INDEX_FILES: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static JAVASCRIPT: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static OVERVIEW_FRAME: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static OVERVIEW_SUMMARY: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static OVERVIEW_TREE: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static PACKAGE_FRAME: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static PACKAGE_LIST: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static PACKAGE_SUMMARY: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static PACKAGE_TREE: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static PACKAGE_USE: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static PROFILE_OVERVIEW_FRAME: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static RESOURCES: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static SERIALIZED_FORM: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static SOURCE_OUTPUT: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static STYLESHEET: com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public constructor()
                         public static indexN(arg0: int): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static profileFrame(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static profilePackageFrame(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static profilePackageSummary(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocPath
                         public static profileSummary(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocPath
                     }
                     class DocFinder$Input {
                         public element: com.sun.javadoc.ProgramElementDoc
                         public taglet: com.sun.tools.doclets.internal.toolkit.taglets.InheritableTaglet
                         public tagId: java.lang.String
                         public tag: com.sun.javadoc.Tag
                         public isFirstSentence: boolean
                         public isInheritDocTag: boolean
                         public isTypeVariableParamTag: boolean
                         constructor(...args: any[])
                         public copy(): com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input
                     }
                     class DocFinder$Output {
                         public holderTag: com.sun.javadoc.Tag
                         public holder: com.sun.javadoc.Doc
                         public inlineTags: com.sun.javadoc.Tag[]
                         public isValidInheritDocTag: boolean
                         public tagList: java.util.List<com.sun.javadoc.Tag>
                         public constructor()
                     }
                     class DocFinder {
                         public constructor()
                         public static search(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input): com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output
                     }
                     class DeprecatedAPIListBuilder {
                         public static NUM_TYPES: int
                         public static PACKAGE: int
                         public static INTERFACE: int
                         public static CLASS: int
                         public static ENUM: int
                         public static EXCEPTION: int
                         public static ERROR: int
                         public static ANNOTATION_TYPE: int
                         public static FIELD: int
                         public static METHOD: int
                         public static CONSTRUCTOR: int
                         public static ENUM_CONSTANT: int
                         public static ANNOTATION_TYPE_MEMBER: int
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public getList(arg0: int): java.util.List<com.sun.javadoc.Doc>
                         public hasDocumentation(arg0: int): boolean
                     }
                     class CommentedMethodFinder extends com.sun.tools.doclets.internal.toolkit.util.MethodFinder {
                         public constructor()
                         public isCorrectMethod(arg0: com.sun.javadoc.MethodDoc): boolean
                     }
                     class ClassUseMapper {
                         public classToPackage: java.util.Map<java.lang.String, java.util.Set<com.sun.javadoc.PackageDoc>>
                         public classToPackageAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.PackageDoc>>
                         public classToClass: java.util.Map<java.lang.String, java.util.Set<com.sun.javadoc.ClassDoc>>
                         public classToSubclass: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ClassDoc>>
                         public classToSubinterface: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ClassDoc>>
                         public classToImplementingClass: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ClassDoc>>
                         public classToField: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.FieldDoc>>
                         public classToMethodReturn: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.MethodDoc>>
                         public classToMethodArgs: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToMethodThrows: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToConstructorArgs: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToConstructorThrows: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToConstructorAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ConstructorDoc>>
                         public classToConstructorParamAnnotation: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToConstructorDocArgTypeParam: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToClassTypeParam: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ClassDoc>>
                         public classToClassAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ClassDoc>>
                         public classToExecMemberDocTypeParam: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.MethodDoc>>
                         public classToExecMemberDocArgTypeParam: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToExecMemberDocAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.MethodDoc>>
                         public classToExecMemberDocReturnTypeParam: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.MethodDoc>>
                         public classToExecMemberDocParamAnnotation: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ExecutableMemberDoc>>
                         public classToFieldDocTypeParam: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.FieldDoc>>
                         public annotationToFieldDoc: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.FieldDoc>>
                         public constructor(arg0: com.sun.javadoc.RootDoc, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassTree)
                     }

                  }
                  namespace taglets {
                     class TagletManager {
                         public static SIMPLE_TAGLET_OPT_SEPARATOR: char
                         public static ALT_SIMPLE_TAGLET_OPT_SEPARATOR: java.lang.String
                         public constructor(arg0: boolean, arg1: boolean, arg2: boolean, arg3: boolean, arg4: com.sun.tools.doclets.internal.toolkit.util.MessageRetriever)
                         addCustomTag<T>(...args: any[]): any
                         public getCustomTagNames(): java.util.Set<java.lang.String>
                         public addNewSimpleCustomTag(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public seenCustomTag(arg0: java.lang.String): void
                         public checkTags(arg0: com.sun.javadoc.Doc, arg1: com.sun.javadoc.Tag[], arg2: boolean): void
                         public getPackageCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getTypeCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getInlineCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getFieldCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getSerializedFormTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getCustomTaglets(arg0: com.sun.javadoc.Doc): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getConstructorCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getMethodCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         public getOverviewCustomTaglets(): com.sun.tools.doclets.internal.toolkit.taglets.Taglet[]
                         addStandardTaglet<T>(...args: any[]): any
                         public isKnownCustomTag(arg0: java.lang.String): boolean
                         public printReport(): void
                         public getTaglet(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.taglets.Taglet
                     }
                     interface Taglet {
                         public inField(): boolean
                         public inConstructor(): boolean
                         public inMethod(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                         public getName(): java.lang.String
                         getTagletOutput<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     abstract class TagletWriter {
                         protected isFirstSentence: boolean
                         protected constructor(arg0: boolean)
                         public getOutputInstance(): com.sun.tools.doclets.internal.toolkit.Content
                         protected codeTagOutput(arg0: com.sun.javadoc.Tag): com.sun.tools.doclets.internal.toolkit.Content
                         protected getDocRootOutput(): com.sun.tools.doclets.internal.toolkit.Content
                         protected deprecatedTagOutput(arg0: com.sun.javadoc.Doc): com.sun.tools.doclets.internal.toolkit.Content
                         protected literalTagOutput(arg0: com.sun.javadoc.Tag): com.sun.tools.doclets.internal.toolkit.Content
                         protected getMsgRetriever(): com.sun.tools.doclets.internal.toolkit.util.MessageRetriever
                         protected getParamHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                         protected paramTagOutput(arg0: com.sun.javadoc.ParamTag, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                         protected propertyTagOutput(arg0: com.sun.javadoc.Tag, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                         protected returnTagOutput(arg0: com.sun.javadoc.Tag): com.sun.tools.doclets.internal.toolkit.Content
                         protected seeTagOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.javadoc.SeeTag[]): com.sun.tools.doclets.internal.toolkit.Content
                         simpleTagOutput<T>(...args: any[]): any
                         protected getThrowsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                         throwsTagOutput<T>(...args: any[]): any
                         protected valueTagOutput(arg0: com.sun.javadoc.FieldDoc, arg1: java.lang.String, arg2: boolean): com.sun.tools.doclets.internal.toolkit.Content
                         public static genTagOuput(arg0: com.sun.tools.doclets.internal.toolkit.taglets.TagletManager, arg1: com.sun.javadoc.Doc, arg2: com.sun.tools.doclets.internal.toolkit.taglets.Taglet[], arg3: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter, arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                         public static getInlineTagOuput(arg0: com.sun.tools.doclets.internal.toolkit.taglets.TagletManager, arg1: com.sun.javadoc.Tag, arg2: com.sun.javadoc.Tag, arg3: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                         commentTagsToOutput<T>(...args: any[]): any
                         public configuration(): com.sun.tools.doclets.internal.toolkit.Configuration
                     }
                     interface InheritableTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.Taglet {
                         public inherit(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input, arg1: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output): void
                     }
                     class ValueTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseInlineTaglet {
                         public constructor()
                         public inMethod(): boolean
                         public inConstructor(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public getTagletOutput(arg0: com.sun.javadoc.Tag, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     abstract class BaseInlineTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet {
                         public constructor()
                         public isInlineTag(): boolean
                     }
                     abstract class BaseTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.Taglet {
                         protected name: java.lang.String
                         public constructor()
                         public inConstructor(): boolean
                         public inField(): boolean
                         public inMethod(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                         public getName(): java.lang.String
                         getTagletOutput<T>(...args: any[]): any
                     }
                     class ThrowsTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseExecutableMemberTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.InheritableTaglet {
                         public constructor()
                         public inherit(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input, arg1: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output): void
                         public getTagletOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                         protected throwsTagsOutput(arg0: com.sun.javadoc.ThrowsTag[], arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter, arg2: java.util.Set<java.lang.String>, arg3: boolean): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     abstract class BaseExecutableMemberTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet {
                         public constructor()
                         public inField(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                     }
                     class SimpleTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.InheritableTaglet {
                         public static EXCLUDED: java.lang.String
                         public static PACKAGE: java.lang.String
                         public static TYPE: java.lang.String
                         public static CONSTRUCTOR: java.lang.String
                         public static FIELD: java.lang.String
                         public static METHOD: java.lang.String
                         public static OVERVIEW: java.lang.String
                         public static ALL: java.lang.String
                         protected tagName: java.lang.String
                         protected header: java.lang.String
                         protected locations: java.lang.String
                         public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String)
                         public getName(): java.lang.String
                         public inConstructor(): boolean
                         public inField(): boolean
                         public inMethod(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                         public inherit(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input, arg1: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output): void
                         getTagletOutput<T>(...args: any[]): any
                     }
                     class SeeTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.InheritableTaglet {
                         public constructor()
                         public inherit(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input, arg1: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output): void
                         public getTagletOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class ReturnTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseExecutableMemberTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.InheritableTaglet {
                         public constructor()
                         public inherit(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input, arg1: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output): void
                         public inConstructor(): boolean
                         public getTagletOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class PropertySetterTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BasePropertyTaglet {
                         public constructor()
                         getText(arg0: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): java.lang.String
                     }
                     abstract class BasePropertyTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet {
                         public constructor()
                         getText(arg0: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): java.lang.String
                         public getTagletOutput(arg0: com.sun.javadoc.Tag, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                         public inConstructor(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                     }
                     class PropertyGetterTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BasePropertyTaglet {
                         public constructor()
                         getText(arg0: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): java.lang.String
                     }
                     class ParamTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.InheritableTaglet {
                         public constructor()
                         public inherit(arg0: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Input, arg1: com.sun.tools.doclets.internal.toolkit.util.DocFinder$Output): void
                         public inField(): boolean
                         public inMethod(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                         public getTagletOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class LiteralTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseInlineTaglet {
                         public constructor()
                         public static register(arg0: java.util.Map<java.lang.String, com.sun.tools.doclets.internal.toolkit.taglets.Taglet>): void
                         public getName(): java.lang.String
                         public getTagletOutput(arg0: com.sun.javadoc.Tag, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class LegacyTaglet implements com.sun.tools.doclets.internal.toolkit.taglets.Taglet {
                         public constructor(arg0: com.sun.tools.doclets.Taglet)
                         public inField(): boolean
                         public inConstructor(): boolean
                         public inMethod(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public isInlineTag(): boolean
                         public getName(): java.lang.String
                         getTagletOutput<T>(...args: any[]): any
                     }
                     class InheritDocTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseInlineTaglet {
                         public static INHERIT_DOC_INLINE_TAG: java.lang.String
                         public constructor()
                         public inField(): boolean
                         public inConstructor(): boolean
                         public inOverview(): boolean
                         public inPackage(): boolean
                         public inType(): boolean
                         public getTagletOutput(arg0: com.sun.javadoc.Tag, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class DocRootTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseInlineTaglet {
                         public constructor()
                         public getTagletOutput(arg0: com.sun.javadoc.Tag, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class DeprecatedTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseTaglet {
                         public constructor()
                         public getTagletOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }
                     class CodeTaglet extends com.sun.tools.doclets.internal.toolkit.taglets.BaseInlineTaglet {
                         public constructor()
                         public static register(arg0: java.util.Map<java.lang.String, com.sun.tools.doclets.internal.toolkit.taglets.Taglet>): void
                         public getName(): java.lang.String
                         public getTagletOutput(arg0: com.sun.javadoc.Tag, arg1: com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter): com.sun.tools.doclets.internal.toolkit.Content
                     }

                  }
                  namespace builders {
                     class BuilderFactory {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration)
                         public getConstantsSummaryBuider(): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getPackageSummaryBuilder(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getProfileSummaryBuilder(arg0: com.sun.tools.javac.jvm.Profile, arg1: com.sun.tools.javac.jvm.Profile, arg2: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getProfilePackageSummaryBuilder(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getClassBuilder(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ClassDoc, arg3: com.sun.tools.doclets.internal.toolkit.util.ClassTree): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getAnnotationTypeBuilder(arg0: com.sun.javadoc.AnnotationTypeDoc, arg1: com.sun.javadoc.Type, arg2: com.sun.javadoc.Type): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getMethodBuilder(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getAnnotationTypeFieldsBuilder(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getAnnotationTypeOptionalMemberBuilder(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getAnnotationTypeRequiredMemberBuilder(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getEnumConstantsBuilder(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getFieldBuilder(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getPropertyBuilder(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         public getConstructorBuilder(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                         getMemberSummaryBuilder<T>(...args: any[]): any
                         public getSerializedFormBuilder(): com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder
                     }
                     class AbstractBuilder$Context {
                         configuration: com.sun.tools.doclets.internal.toolkit.Configuration
                         containingPackagesSeen: java.util.Set<java.lang.String>
                         layoutParser: com.sun.tools.doclets.internal.toolkit.builders.LayoutParser
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: java.util.Set<java.lang.String>, arg2: com.sun.tools.doclets.internal.toolkit.builders.LayoutParser)
                     }
                     abstract class AbstractBuilder {
                         protected configuration: com.sun.tools.doclets.internal.toolkit.Configuration
                         protected containingPackagesSeen: java.util.Set<java.lang.String>
                         protected layoutParser: com.sun.tools.doclets.internal.toolkit.builders.LayoutParser
                         protected static DEBUG: boolean
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context)
                         public getName(): java.lang.String
                         build<T>(...args: any[]): any
                         protected buildChildren(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         protected invokeMethod(arg0: java.lang.String, arg1: java.lang.Class<any>[], arg2: java.lang.Object[]): void
                     }
                     class LayoutParser extends org.xml.sax.helpers.DefaultHandler {
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.Configuration): com.sun.tools.doclets.internal.toolkit.builders.LayoutParser
                         public parseXML(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.builders.XMLNode
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                     }
                     class XMLNode {
                         parent: com.sun.tools.doclets.internal.toolkit.builders.XMLNode
                         name: java.lang.String
                         attrs: java.util.Map<java.lang.String, java.lang.String>
                         children: java.util.List<com.sun.tools.doclets.internal.toolkit.builders.XMLNode>
                         constructor(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: java.lang.String)
                         toString<T>(...args: any[]): any
                     }
                     class SerializedFormBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static NAME: java.lang.String
                         protected currentMember: com.sun.javadoc.MemberDoc
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context): com.sun.tools.doclets.internal.toolkit.builders.SerializedFormBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildSerializedForm(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSerializedFormSummaries(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageSerializedForm(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageHeader(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassSerializedForm(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSerialUIDInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassContent(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSerializableMethods(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodSubHeader(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecatedMethodInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodDescription(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodTags(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldHeader(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldSerializationOverview(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSerializableFields(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldSubHeader(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSerialFieldTagsInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public static serialInclude(arg0: com.sun.javadoc.Doc): boolean
                     }
                     class PropertyBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.PropertyWriter): com.sun.tools.doclets.internal.toolkit.builders.PropertyBuilder
                         public getName(): java.lang.String
                         public members(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public getVisibleMemberMap(): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public hasMembersToDocument(): boolean
                         public buildPropertyDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPropertyComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.PropertyWriter
                     }
                     abstract class AbstractMemberBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context)
                         build<T>(...args: any[]): any
                         public hasMembersToDocument(): boolean
                     }
                     class ProfileSummaryBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static ROOT: java.lang.String
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.tools.javac.jvm.Profile, arg2: com.sun.tools.doclets.internal.toolkit.ProfileSummaryWriter): com.sun.tools.doclets.internal.toolkit.builders.ProfileSummaryBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildProfileDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildContent(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildInterfaceSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildEnumSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildExceptionSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildErrorSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class ProfilePackageSummaryBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static ROOT: java.lang.String
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.tools.doclets.internal.toolkit.ProfilePackageSummaryWriter, arg3: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.builders.ProfilePackageSummaryBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildPackageDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildContent(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildInterfaceSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildEnumSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildExceptionSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildErrorSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageDescription(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageTags(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class PackageSummaryBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static ROOT: java.lang.String
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.tools.doclets.internal.toolkit.PackageSummaryWriter): com.sun.tools.doclets.internal.toolkit.builders.PackageSummaryBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildPackageDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildContent(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildInterfaceSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildEnumSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildExceptionSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildErrorSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageDescription(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageTags(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class MethodBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.MethodWriter): com.sun.tools.doclets.internal.toolkit.builders.MethodBuilder
                         public getName(): java.lang.String
                         public members(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public getVisibleMemberMap(): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public hasMembersToDocument(): boolean
                         public buildMethodDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.MethodWriter
                     }
                     class MemberSummaryBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         public static NAME: java.lang.String
                         getInstance<T>(...args: any[]): any
                         public getName(): java.lang.String
                         public getVisibleMemberMap(arg0: int): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public getMemberSummaryWriter(arg0: int): com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter
                         public members(arg0: int): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public hasMembersToDocument(): boolean
                         public buildEnumConstantsSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeFieldsSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeOptionalMemberSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeRequiredMemberSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldsSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPropertiesSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildNestedClassesSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodsSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildConstructorsSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class FieldBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.FieldWriter): com.sun.tools.doclets.internal.toolkit.builders.FieldBuilder
                         public getName(): java.lang.String
                         public members(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public getVisibleMemberMap(): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public hasMembersToDocument(): boolean
                         public buildFieldDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.FieldWriter
                     }
                     class EnumConstantBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.EnumConstantWriter): com.sun.tools.doclets.internal.toolkit.builders.EnumConstantBuilder
                         public getName(): java.lang.String
                         public members(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public getVisibleMemberMap(): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public hasMembersToDocument(): boolean
                         public buildEnumConstant(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildEnumConstantComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.EnumConstantWriter
                     }
                     class ConstructorBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         public static NAME: java.lang.String
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.ConstructorWriter): com.sun.tools.doclets.internal.toolkit.builders.ConstructorBuilder
                         public getName(): java.lang.String
                         public hasMembersToDocument(): boolean
                         public members(arg0: com.sun.javadoc.ClassDoc): java.util.List<com.sun.javadoc.ProgramElementDoc>
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.ConstructorWriter
                         public buildConstructorDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildConstructorComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class ConstantsSummaryBuilder$ConstantFieldBuilder {
                         protected visibleMemberMapFields: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         protected visibleMemberMapEnumConst: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         protected classdoc: com.sun.javadoc.ClassDoc
                         this$0: com.sun.tools.doclets.internal.toolkit.builders.ConstantsSummaryBuilder
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.builders.ConstantsSummaryBuilder, arg1: com.sun.javadoc.ClassDoc)
                         protected buildMembersSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         protected members(): java.util.List<com.sun.javadoc.FieldDoc>
                     }
                     class ConstantsSummaryBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static ROOT: java.lang.String
                         public static MAX_CONSTANT_VALUE_INDEX_LENGTH: int
                         protected writer: com.sun.tools.doclets.internal.toolkit.ConstantsSummaryWriter
                         protected classDocsWithConstFields: java.util.Set<com.sun.javadoc.ClassDoc>
                         protected printedPackageHeaders: java.util.Set<java.lang.String>
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.tools.doclets.internal.toolkit.ConstantsSummaryWriter): com.sun.tools.doclets.internal.toolkit.builders.ConstantsSummaryBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildConstantSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildContents(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildConstantSummaries(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPackageHeader(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassConstantSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildConstantMembers(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class ClassBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static ROOT: java.lang.String
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildClassDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassTree(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTypeParamInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSuperInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildImplementedInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSubClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSubInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildInterfaceUsageInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFunctionalInterfaceInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildNestedClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassDescription(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildClassTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMemberSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMemberDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildEnumConstantsDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildFieldDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildPropertyDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildConstructorDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMethodDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }
                     class AnnotationTypeRequiredMemberBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         protected classDoc: com.sun.javadoc.ClassDoc
                         protected visibleMemberMap: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         protected writer: com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter
                         members<T>(...args: any[]): any
                         protected currentMemberIndex: int
                         protected constructor(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter, arg3: int)
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter): com.sun.tools.doclets.internal.toolkit.builders.AnnotationTypeRequiredMemberBuilder
                         public getName(): java.lang.String
                         public getVisibleMemberMap(): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public hasMembersToDocument(): boolean
                         public buildAnnotationTypeRequiredMember(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeMember(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMemberComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter
                     }
                     class AnnotationTypeOptionalMemberBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AnnotationTypeRequiredMemberBuilder {
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.AnnotationTypeOptionalMemberWriter): com.sun.tools.doclets.internal.toolkit.builders.AnnotationTypeOptionalMemberBuilder
                         public getName(): java.lang.String
                         public buildAnnotationTypeOptionalMember(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDefaultValueInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter
                     }
                     class AnnotationTypeFieldBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder {
                         protected classDoc: com.sun.javadoc.ClassDoc
                         protected visibleMemberMap: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         protected writer: com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter
                         members<T>(...args: any[]): any
                         protected currentMemberIndex: int
                         protected constructor(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter, arg3: int)
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter): com.sun.tools.doclets.internal.toolkit.builders.AnnotationTypeFieldBuilder
                         public getName(): java.lang.String
                         public getVisibleMemberMap(): com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap
                         public hasMembersToDocument(): boolean
                         public buildAnnotationTypeField(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeMember(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMemberComments(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public getWriter(): com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter
                     }
                     class AnnotationTypeBuilder extends com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder {
                         public static ROOT: java.lang.String
                         public static getInstance(arg0: com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder$Context, arg1: com.sun.javadoc.AnnotationTypeDoc, arg2: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.builders.AnnotationTypeBuilder
                         public build(): void
                         public getName(): java.lang.String
                         public buildAnnotationTypeDoc(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeSignature(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeDescription(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildMemberSummary(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeMemberDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeFieldDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeOptionalMemberDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                         public buildAnnotationTypeRequiredMemberDetails(arg0: com.sun.tools.doclets.internal.toolkit.builders.XMLNode, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                     }

                  }
                  class Configuration$Fault extends java.lang.Exception {
                      constructor(...args: any[])
                  }
                  abstract class Configuration {
                      protected builderFactory: com.sun.tools.doclets.internal.toolkit.builders.BuilderFactory
                      public tagletManager: com.sun.tools.doclets.internal.toolkit.taglets.TagletManager
                      public builderXMLPath: java.lang.String
                      public tagletpath: java.lang.String
                      public serialwarn: boolean
                      public sourcetab: int
                      public tabSpaces: java.lang.String
                      public linksource: boolean
                      public nosince: boolean
                      public copydocfilesubdirs: boolean
                      public charset: java.lang.String
                      public keywords: boolean
                      public metakeywords: com.sun.tools.doclets.internal.toolkit.util.MetaKeywords
                      protected excludedDocFileDirs: java.util.Set<java.lang.String>
                      protected excludedQualifiers: java.util.Set<java.lang.String>
                      public root: com.sun.javadoc.RootDoc
                      public destDirName: java.lang.String
                      public docFileDestDirName: java.lang.String
                      public docencoding: java.lang.String
                      public nocomment: boolean
                      public encoding: java.lang.String
                      public showauthor: boolean
                      public javafx: boolean
                      public showversion: boolean
                      public sourcepath: java.lang.String
                      public profilespath: java.lang.String
                      public showProfiles: boolean
                      public nodeprecated: boolean
                      public classDocCatalog: com.sun.tools.doclets.internal.toolkit.util.ClassDocCatalog
                      public message: com.sun.tools.doclets.internal.toolkit.util.MessageRetriever
                      public notimestamp: boolean
                      public group: com.sun.tools.doclets.internal.toolkit.util.Group
                      public extern: com.sun.tools.doclets.internal.toolkit.util.Extern
                      public profiles: com.sun.tools.javac.sym.Profiles
                      public profilePackages: java.util.Map<java.lang.String, com.sun.javadoc.PackageDoc[]>
                      public packages: com.sun.javadoc.PackageDoc[]
                      public getDocletSpecificBuildDate(): java.lang.String
                      public setSpecificDocletOptions(arg0: java.lang.String[][]): void
                      public getDocletSpecificMsg(): com.sun.tools.doclets.internal.toolkit.util.MessageRetriever
                      public constructor()
                      public getBuilderFactory(): com.sun.tools.doclets.internal.toolkit.builders.BuilderFactory
                      public optionLength(arg0: java.lang.String): int
                      public validOptions(arg0: java.lang.String[][], arg1: com.sun.javadoc.DocErrorReporter): boolean
                      setOptions<T>(...args: any[]): any
                      public static addTrailingFileSep(arg0: java.lang.String): java.lang.String
                      public generalValidOptions(arg0: java.lang.String[][], arg1: com.sun.javadoc.DocErrorReporter): boolean
                      public shouldDocumentProfile(arg0: java.lang.String): boolean
                      public shouldExcludeDocFileDir(arg0: java.lang.String): boolean
                      public shouldExcludeQualifier(arg0: java.lang.String): boolean
                      public getClassName(arg0: com.sun.javadoc.ClassDoc): java.lang.String
                      getText<T>(...args: any[]): any
                      public newContent(): com.sun.tools.doclets.internal.toolkit.Content
                      getResource<T>(...args: any[]): any
                      public isGeneratedDoc(arg0: com.sun.javadoc.ClassDoc): boolean
                      public getWriterFactory(): com.sun.tools.doclets.internal.toolkit.WriterFactory
                      public getBuilderXML(): java.io.InputStream
                      public getLocale(): java.util.Locale
                      public getFileManager(): javax.tools.JavaFileManager
                      public getMemberComparator(): java.util.Comparator<com.sun.javadoc.ProgramElementDoc>
                      public showMessage(arg0: com.sun.javadoc.SourcePosition, arg1: java.lang.String): boolean
                  }
                  abstract class Content {
                      public constructor()
                      toString<T>(...args: any[]): any
                      addContent<T>(...args: any[]): any
                      public write(arg0: java.io.Writer, arg1: boolean): boolean
                      public isEmpty(): boolean
                      public isValid(): boolean
                      public charCount(): int
                      protected static nullCheck<T>(arg0: T): T
                  }
                  interface WriterFactory {
                      public getConstantsSummaryWriter(): com.sun.tools.doclets.internal.toolkit.ConstantsSummaryWriter
                      public getPackageSummaryWriter(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.PackageSummaryWriter
                      public getProfileSummaryWriter(arg0: com.sun.tools.javac.jvm.Profile, arg1: com.sun.tools.javac.jvm.Profile, arg2: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.ProfileSummaryWriter
                      public getProfilePackageSummaryWriter(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.ProfilePackageSummaryWriter
                      public getClassWriter(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ClassDoc, arg3: com.sun.tools.doclets.internal.toolkit.util.ClassTree): com.sun.tools.doclets.internal.toolkit.ClassWriter
                      public getAnnotationTypeWriter(arg0: com.sun.javadoc.AnnotationTypeDoc, arg1: com.sun.javadoc.Type, arg2: com.sun.javadoc.Type): com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter
                      public getMethodWriter(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.MethodWriter
                      public getAnnotationTypeFieldWriter(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter
                      public getAnnotationTypeOptionalMemberWriter(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.AnnotationTypeOptionalMemberWriter
                      public getAnnotationTypeRequiredMemberWriter(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter
                      public getEnumConstantWriter(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.EnumConstantWriter
                      public getFieldWriter(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.FieldWriter
                      public getPropertyWriter(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.PropertyWriter
                      public getConstructorWriter(arg0: com.sun.tools.doclets.internal.toolkit.ClassWriter): com.sun.tools.doclets.internal.toolkit.ConstructorWriter
                      getMemberSummaryWriter<T>(...args: any[]): any
                      public getSerializedFormWriter(): com.sun.tools.doclets.internal.toolkit.SerializedFormWriter
                  }
                  interface ClassWriter {
                      public getHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassInfoTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addTypeParamInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSuperInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addImplementedInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSubClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSubInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInterfaceUsageInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addFunctionalInterfaceInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addNestedClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassSignature(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                      public getClassDoc(): com.sun.javadoc.ClassDoc
                      public getMemberSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberDetailsTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  interface AnnotationTypeWriter {
                      public getHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationInfoTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addAnnotationTypeSignature(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationTypeDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationTypeTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationTypeDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberDetailsTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                      public getAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                  }
                  interface ConstantsSummaryWriter {
                      public close(): void
                      public getHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addLinkToPackageContent(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String, arg2: java.util.Set<java.lang.String>, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getContentsList(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstantSummaries(): com.sun.tools.doclets.internal.toolkit.Content
                      public addPackageName(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassConstantHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addConstantMembers(arg0: com.sun.javadoc.ClassDoc, arg1: java.util.List<com.sun.javadoc.FieldDoc>, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  interface PackageSummaryWriter {
                      public getPackageHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageTags(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                  }
                  interface ProfileSummaryWriter {
                      public getProfileHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageSummaryHeader(arg0: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addProfileFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                  }
                  interface ProfilePackageSummaryWriter {
                      public getPackageHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageTags(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                  }
                  interface MethodWriter {
                      public getMethodDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodDocTreeHeader(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MethodDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.Type, arg1: com.sun.javadoc.MethodDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getMethodDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                  }
                  interface AnnotationTypeFieldWriter {
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addAnnotationFieldDetailsMarker(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationDocTreeHeader(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MemberDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                  }
                  interface AnnotationTypeOptionalMemberWriter extends com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter {
                      public addDefaultValueInfo(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  interface AnnotationTypeRequiredMemberWriter {
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addAnnotationDetailsMarker(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationDocTreeHeader(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MemberDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                  }
                  interface EnumConstantWriter {
                      public getEnumConstantsDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getEnumConstantsTreeHeader(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.FieldDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getEnumConstantsDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getEnumConstants(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                  }
                  interface FieldWriter {
                      public getFieldDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldDocTreeHeader(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.FieldDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getFieldDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                  }
                  interface PropertyWriter {
                      public getPropertyDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPropertyDocTreeHeader(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MethodDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getPropertyDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPropertyDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                  }
                  interface ConstructorWriter {
                      public getConstructorDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstructorDocTreeHeader(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.ConstructorDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getConstructorDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstructorDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public setFoundNonPubConstructor(arg0: boolean): void
                      public close(): void
                  }
                  interface MemberSummaryWriter {
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableTree(arg0: com.sun.javadoc.ClassDoc, arg1: java.util.List<com.sun.tools.doclets.internal.toolkit.Content>): com.sun.tools.doclets.internal.toolkit.Content
                      public addMemberSummary(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.javadoc.Tag[], arg3: java.util.List<com.sun.tools.doclets.internal.toolkit.Content>, arg4: int): void
                      public getInheritedSummaryHeader(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addInheritedMemberSummary(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: boolean, arg3: boolean, arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getInheritedSummaryLinksTree(): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                  }
                  interface SerializedFormWriter$SerialFieldWriter {
                      public getSerializableFieldsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldsContentHeader(arg0: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializableFields(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addMemberDeprecatedInfo(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      addMemberDescription<T>(...args: any[]): any
                      public addMemberTags(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addMemberHeader(arg0: com.sun.javadoc.ClassDoc, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public shouldPrintOverview(arg0: com.sun.javadoc.FieldDoc): boolean
                  }
                  interface SerializedFormWriter$SerialMethodWriter {
                      public getSerializableMethodsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodsContentHeader(arg0: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializableMethods(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getNoCustomizationMsg(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public addMemberHeader(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addDeprecatedMemberInfo(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addMemberDescription(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addMemberTags(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  interface SerializedFormWriter {
                      public getHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializedSummariesHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageSerializedHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassSerializedHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassHeader(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerialUIDInfoHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addSerialUIDInfo(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerialFieldWriter(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.SerializedFormWriter$SerialFieldWriter
                      public getSerialMethodWriter(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.SerializedFormWriter$SerialMethodWriter
                      public close(): void
                      public getSerializedContent(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  interface NestedClassWriter {
                      public close(): void
                  }
                  abstract class AbstractDoclet {
                      configuration<T>(...args: any[]): any
                      public constructor()
                      public start(arg0: com.sun.tools.doclets.internal.toolkit.AbstractDoclet, arg1: com.sun.javadoc.RootDoc): boolean
                      public static languageVersion(): com.sun.javadoc.LanguageVersion
                      protected generateOtherFiles(arg0: com.sun.javadoc.RootDoc, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassTree): void
                      protected generateProfileFiles(): void
                      protected generatePackageFiles(arg0: com.sun.tools.doclets.internal.toolkit.util.ClassTree): void
                      generateClassFiles<T>(...args: any[]): any
                  }

               }

            }
            namespace formats {
               namespace html {
                  namespace markup {
                     class StringContent extends com.sun.tools.doclets.internal.toolkit.Content {
                         constructor(...args: any[])
                         addContent<T>(...args: any[]): any
                         public isEmpty(): boolean
                         public charCount(): int
                         toString<T>(...args: any[]): any
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                     }
                     class RawHtml$State extends java.lang.Enum<com.sun.tools.doclets.formats.html.markup.RawHtml$State> {
                         public static TEXT: com.sun.tools.doclets.formats.html.markup.RawHtml$State
                         public static ENTITY: com.sun.tools.doclets.formats.html.markup.RawHtml$State
                         public static TAG: com.sun.tools.doclets.formats.html.markup.RawHtml$State
                         public static STRING: com.sun.tools.doclets.formats.html.markup.RawHtml$State
                         public static values(): com.sun.tools.doclets.formats.html.markup.RawHtml$State[]
                         valueOf<T>(...args: any[]): any
                     }
                     class RawHtml$1 {
                         static $SwitchMap$com$sun$tools$doclets$formats$html$markup$RawHtml$State: int[]
                     }
                     class RawHtml extends com.sun.tools.doclets.internal.toolkit.Content {
                         public static nbsp: com.sun.tools.doclets.internal.toolkit.Content
                         public constructor(arg0: java.lang.String)
                         addContent<T>(...args: any[]): any
                         public isEmpty(): boolean
                         toString<T>(...args: any[]): any
                         charCount<T>(...args: any[]): any
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                     }
                     class HtmlWriter {
                         protected winTitle: java.lang.String
                         protected configuration: com.sun.tools.doclets.internal.toolkit.Configuration
                         protected memberDetailsListPrinted: boolean
                         protected profileTableHeader: java.lang.String[]
                         protected packageTableHeader: java.lang.String[]
                         protected useTableSummary: java.lang.String
                         protected modifierTypeHeader: java.lang.String
                         public overviewLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public defaultPackageLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public packageLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public profileLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public useLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public prevLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public nextLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public prevclassLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public nextclassLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public summaryLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public detailLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public framesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public noframesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public treeLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public classLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public deprecatedLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public deprecatedPhrase: com.sun.tools.doclets.internal.toolkit.Content
                         public allclassesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public allpackagesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public allprofilesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public indexLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public helpLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public seeLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public descriptionLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public prevpackageLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public nextpackageLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public prevprofileLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public nextprofileLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public packagesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public profilesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public methodDetailsLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public annotationTypeDetailsLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public fieldDetailsLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public propertyDetailsLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public constructorDetailsLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public enumConstantsDetailsLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public specifiedByLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public overridesLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public descfrmClassLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public descfrmInterfaceLabel: com.sun.tools.doclets.internal.toolkit.Content
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                         public write(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                         public close(): void
                         getResource<T>(...args: any[]): any
                         public getNonBreakResource(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                         protected getWinTitleScript(): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         protected getFramesetJavaScript(): com.sun.tools.doclets.internal.toolkit.Content
                         public getBody(arg0: boolean, arg1: java.lang.String): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public generateMethodTypesScript(arg0: java.util.Map<java.lang.String, java.lang.Integer>, arg1: java.util.Set<com.sun.tools.doclets.internal.toolkit.util.MethodTypes>): void
                         public addStyles(arg0: com.sun.tools.doclets.formats.html.markup.HtmlStyle, arg1: java.lang.StringBuilder): void
                         public getTitle(): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public codeText(arg0: java.lang.String): java.lang.String
                         public getSpace(): com.sun.tools.doclets.internal.toolkit.Content
                         public getModifierTypeHeader(): java.lang.String
                     }
                     class HtmlTree$1 {
                         static $SwitchMap$com$sun$tools$doclets$formats$html$markup$HtmlTag: int[]
                     }
                     class HtmlTree extends com.sun.tools.doclets.internal.toolkit.Content {
                         public static EMPTY: com.sun.tools.doclets.internal.toolkit.Content
                         public static NONENCODING_CHARS: java.util.BitSet
                         constructor(...args: any[])
                         public addAttr(arg0: com.sun.tools.doclets.formats.html.markup.HtmlAttr, arg1: java.lang.String): void
                         public setTitle(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                         public addStyle(arg0: com.sun.tools.doclets.formats.html.markup.HtmlStyle): void
                         addContent<T>(...args: any[]): any
                         public charCount(): int
                         public static A(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         A_NAME<T>(...args: any[]): any
                         public static CAPTION(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public static CODE(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public static DD(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public static DL(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         DIV<T>(...args: any[]): any
                         public static DT(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         FRAME<T>(...args: any[]): any
                         public static FRAMESET(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         HEADING<T>(...args: any[]): any
                         public static HTML(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         LI<T>(...args: any[]): any
                         public static LINK(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         META<T>(...args: any[]): any
                         public static NOSCRIPT(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         P<T>(...args: any[]): any
                         public static SCRIPT(arg0: java.lang.String, arg1: java.lang.String): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public static SMALL(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         SPAN<T>(...args: any[]): any
                         public static TABLE(arg0: com.sun.tools.doclets.formats.html.markup.HtmlStyle, arg1: int, arg2: int, arg3: int, arg4: java.lang.String, arg5: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         TD<T>(...args: any[]): any
                         TH<T>(...args: any[]): any
                         public static TITLE(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public static TR(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public static UL(arg0: com.sun.tools.doclets.formats.html.markup.HtmlStyle, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.formats.html.markup.HtmlTree
                         public isEmpty(): boolean
                         public hasContent(): boolean
                         public hasAttrs(): boolean
                         public hasAttr(arg0: com.sun.tools.doclets.formats.html.markup.HtmlAttr): boolean
                         public isValid(): boolean
                         public isInline(): boolean
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                     }
                     class HtmlStyle extends java.lang.Enum<com.sun.tools.doclets.formats.html.markup.HtmlStyle> {
                         public static aboutLanguage: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static activeTableTab: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static altColor: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static bar: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static block: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static blockList: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static blockListLast: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static bottomNav: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static classUseContainer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static colFirst: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static colLast: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static colOne: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static constantsSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static constantValuesContainer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static contentContainer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static deprecatedContent: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static deprecatedLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static deprecatedSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static deprecationComment: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static description: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static descfrmTypeLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static details: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static docSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static emphasizedPhrase: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static header: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static horizontal: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static footer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static indexContainer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static indexHeader: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static inheritance: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static interfaceName: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static legalCopy: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static memberNameLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static memberNameLink: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static memberSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static nameValue: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static navBarCell1Rev: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static navList: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static overrideSpecifyLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static overviewSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static packageHierarchyLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static paramLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static returnLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static rowColor: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static seeLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static serializedFormContainer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static simpleTagLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static skipNav: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static sourceContainer: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static sourceLineNo: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static subNav: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static subNavList: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static subTitle: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static summary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static tabEnd: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static tableTab: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static throwsLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static title: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static topNav: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static typeNameLabel: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static typeNameLink: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static typeSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static useSummary: com.sun.tools.doclets.formats.html.markup.HtmlStyle
                         public static values(): com.sun.tools.doclets.formats.html.markup.HtmlStyle[]
                         valueOf<T>(...args: any[]): any
                     }
                     class HtmlTag$BlockType extends java.lang.Enum<com.sun.tools.doclets.formats.html.markup.HtmlTag$BlockType> {
                         public static BLOCK: com.sun.tools.doclets.formats.html.markup.HtmlTag$BlockType
                         public static INLINE: com.sun.tools.doclets.formats.html.markup.HtmlTag$BlockType
                         public static OTHER: com.sun.tools.doclets.formats.html.markup.HtmlTag$BlockType
                         public static values(): com.sun.tools.doclets.formats.html.markup.HtmlTag$BlockType[]
                         valueOf<T>(...args: any[]): any
                     }
                     class HtmlTag$EndTag extends java.lang.Enum<com.sun.tools.doclets.formats.html.markup.HtmlTag$EndTag> {
                         public static END: com.sun.tools.doclets.formats.html.markup.HtmlTag$EndTag
                         public static NOEND: com.sun.tools.doclets.formats.html.markup.HtmlTag$EndTag
                         public static values(): com.sun.tools.doclets.formats.html.markup.HtmlTag$EndTag[]
                         valueOf<T>(...args: any[]): any
                     }
                     class HtmlTag extends java.lang.Enum<com.sun.tools.doclets.formats.html.markup.HtmlTag> {
                         public static A: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static BLOCKQUOTE: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static BODY: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static BR: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static CAPTION: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static CENTER: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static CODE: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static DD: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static DIR: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static DIV: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static DL: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static DT: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static EM: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static FONT: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static FRAME: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static FRAMESET: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static H1: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static H2: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static H3: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static H4: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static H5: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static H6: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static HEAD: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static HR: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static HTML: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static I: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static IMG: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static LI: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static LISTING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static LINK: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static MENU: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static META: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static NOFRAMES: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static NOSCRIPT: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static OL: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static P: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static PRE: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static SCRIPT: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static SMALL: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static SPAN: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static STRONG: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static SUB: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TABLE: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TBODY: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TD: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TH: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TITLE: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TR: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static TT: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static UL: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public blockType: com.sun.tools.doclets.formats.html.markup.HtmlTag$BlockType
                         public endTag: com.sun.tools.doclets.formats.html.markup.HtmlTag$EndTag
                         public value: java.lang.String
                         public static values(): com.sun.tools.doclets.formats.html.markup.HtmlTag[]
                         valueOf<T>(...args: any[]): any
                         public endTagRequired(): boolean
                         toString<T>(...args: any[]): any
                     }
                     class HtmlAttr extends java.lang.Enum<com.sun.tools.doclets.formats.html.markup.HtmlAttr> {
                         public static ALT: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static BORDER: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static CELLPADDING: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static CELLSPACING: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static CLASS: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static CLEAR: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static COLS: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static CONTENT: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static HREF: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static HTTP_EQUIV: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static ID: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static LANG: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static NAME: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static ONLOAD: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static REL: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static ROWS: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static SCOPE: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static SCROLLING: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static SRC: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static SUMMARY: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static TARGET: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static TITLE: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static TYPE: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static WIDTH: com.sun.tools.doclets.formats.html.markup.HtmlAttr
                         public static values(): com.sun.tools.doclets.formats.html.markup.HtmlAttr[]
                         valueOf<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                     }
                     class HtmlDocument extends com.sun.tools.doclets.internal.toolkit.Content {
                         constructor(...args: any[])
                         addContent<T>(...args: any[]): any
                         public isEmpty(): boolean
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                     }
                     abstract class HtmlDocWriter extends com.sun.tools.doclets.formats.html.markup.HtmlWriter {
                         public static CONTENT_TYPE: java.lang.String
                         public constructor(arg0: com.sun.tools.doclets.internal.toolkit.Configuration, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                         public configuration(): com.sun.tools.doclets.internal.toolkit.Configuration
                         getHyperLink<T>(...args: any[]): any
                         getDocLink<T>(...args: any[]): any
                         public getName(arg0: java.lang.String): java.lang.String
                         public getPkgName(arg0: com.sun.javadoc.ClassDoc): java.lang.String
                         public getMemberDetailsListPrinted(): boolean
                         public printFramesetDocument(arg0: java.lang.String, arg1: boolean, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                         protected getGeneratedBy(arg0: boolean): com.sun.tools.doclets.formats.html.markup.Comment
                     }
                     class Comment extends com.sun.tools.doclets.internal.toolkit.Content {
                         public constructor(arg0: java.lang.String)
                         addContent<T>(...args: any[]): any
                         public isEmpty(): boolean
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                     }
                     class HtmlConstants {
                         public static START_OF_TOP_NAVBAR: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_BOTTOM_NAVBAR: com.sun.tools.doclets.internal.toolkit.Content
                         public static END_OF_TOP_NAVBAR: com.sun.tools.doclets.internal.toolkit.Content
                         public static END_OF_BOTTOM_NAVBAR: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_CLASS_DATA: com.sun.tools.doclets.internal.toolkit.Content
                         public static END_OF_CLASS_DATA: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_NESTED_CLASS_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ANNOTATION_TYPE_REQUIRED_MEMBER_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ANNOTATION_TYPE_FIELD_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_CONSTRUCTOR_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ENUM_CONSTANT_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_FIELD_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_PROPERTY_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_METHOD_SUMMARY: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ANNOTATION_TYPE_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ANNOTATION_TYPE_FIELD_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_METHOD_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_FIELD_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_PROPERTY_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_CONSTRUCTOR_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static START_OF_ENUM_CONSTANT_DETAILS: com.sun.tools.doclets.internal.toolkit.Content
                         public static TITLE_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static CLASS_PAGE_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static CONTENT_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static PACKAGE_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static PROFILE_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static SUMMARY_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static INHERITED_SUMMARY_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static DETAILS_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static SERIALIZED_MEMBER_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public static MEMBER_HEADING: com.sun.tools.doclets.formats.html.markup.HtmlTag
                         public constructor()
                     }
                     class DocType extends com.sun.tools.doclets.internal.toolkit.Content {
                         public static TRANSITIONAL: com.sun.tools.doclets.formats.html.markup.DocType
                         public static FRAMESET: com.sun.tools.doclets.formats.html.markup.DocType
                         addContent<T>(...args: any[]): any
                         public isEmpty(): boolean
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                     }
                     class ContentBuilder extends com.sun.tools.doclets.internal.toolkit.Content {
                         protected contents: java.util.List<com.sun.tools.doclets.internal.toolkit.Content>
                         public constructor()
                         addContent<T>(...args: any[]): any
                         public write(arg0: java.io.Writer, arg1: boolean): boolean
                         public isEmpty(): boolean
                         public charCount(): int
                     }

                  }
                  class SectionName extends java.lang.Enum<com.sun.tools.doclets.formats.html.SectionName> {
                      public static ANNOTATION_TYPE_ELEMENT_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static ANNOTATION_TYPE_FIELD_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static ANNOTATION_TYPE_FIELD_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static CONSTRUCTOR_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static CONSTRUCTOR_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static ENUM_CONSTANT_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static ENUM_CONSTANTS_INHERITANCE: com.sun.tools.doclets.formats.html.SectionName
                      public static ENUM_CONSTANT_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static FIELD_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static FIELDS_INHERITANCE: com.sun.tools.doclets.formats.html.SectionName
                      public static FIELD_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static METHOD_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static METHODS_INHERITANCE: com.sun.tools.doclets.formats.html.SectionName
                      public static METHOD_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static NAVBAR_BOTTOM: com.sun.tools.doclets.formats.html.SectionName
                      public static NAVBAR_BOTTOM_FIRSTROW: com.sun.tools.doclets.formats.html.SectionName
                      public static NAVBAR_TOP: com.sun.tools.doclets.formats.html.SectionName
                      public static NAVBAR_TOP_FIRSTROW: com.sun.tools.doclets.formats.html.SectionName
                      public static NESTED_CLASSES_INHERITANCE: com.sun.tools.doclets.formats.html.SectionName
                      public static NESTED_CLASS_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static OVERVIEW_DESCRIPTION: com.sun.tools.doclets.formats.html.SectionName
                      public static PACKAGE_DESCRIPTION: com.sun.tools.doclets.formats.html.SectionName
                      public static PROPERTY_DETAIL: com.sun.tools.doclets.formats.html.SectionName
                      public static PROPERTIES_INHERITANCE: com.sun.tools.doclets.formats.html.SectionName
                      public static PROPERTY_SUMMARY: com.sun.tools.doclets.formats.html.SectionName
                      public static SKIP_NAVBAR_BOTTOM: com.sun.tools.doclets.formats.html.SectionName
                      public static SKIP_NAVBAR_TOP: com.sun.tools.doclets.formats.html.SectionName
                      public static UNNAMED_PACKAGE_ANCHOR: com.sun.tools.doclets.formats.html.SectionName
                      public static values(): com.sun.tools.doclets.formats.html.SectionName[]
                      valueOf<T>(...args: any[]): any
                      public getName(): java.lang.String
                  }
                  class WriterFactoryImpl implements com.sun.tools.doclets.internal.toolkit.WriterFactory {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl)
                      public getConstantsSummaryWriter(): com.sun.tools.doclets.internal.toolkit.ConstantsSummaryWriter
                      public getPackageSummaryWriter(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.PackageSummaryWriter
                      public getProfileSummaryWriter(arg0: com.sun.tools.javac.jvm.Profile, arg1: com.sun.tools.javac.jvm.Profile, arg2: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.ProfileSummaryWriter
                      public getProfilePackageSummaryWriter(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.tools.javac.jvm.Profile): com.sun.tools.doclets.internal.toolkit.ProfilePackageSummaryWriter
                      public getClassWriter(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ClassDoc, arg3: com.sun.tools.doclets.internal.toolkit.util.ClassTree): com.sun.tools.doclets.internal.toolkit.ClassWriter
                      public getAnnotationTypeWriter(arg0: com.sun.javadoc.AnnotationTypeDoc, arg1: com.sun.javadoc.Type, arg2: com.sun.javadoc.Type): com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter
                      public getAnnotationTypeFieldWriter(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter
                      public getAnnotationTypeOptionalMemberWriter(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.AnnotationTypeOptionalMemberWriter
                      public getAnnotationTypeRequiredMemberWriter(arg0: com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter): com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter
                      getEnumConstantWriter<T>(...args: any[]): any
                      getFieldWriter<T>(...args: any[]): any
                      getPropertyWriter<T>(...args: any[]): any
                      getMethodWriter<T>(...args: any[]): any
                      getConstructorWriter<T>(...args: any[]): any
                      getMemberSummaryWriter<T>(...args: any[]): any
                      public getSerializedFormWriter(): com.sun.tools.doclets.internal.toolkit.SerializedFormWriter
                  }
                  class ConfigurationImpl$1 implements com.sun.tools.javadoc.JavaScriptScanner$Reporter {
                      val$opt: java.lang.String
                      this$0: com.sun.tools.doclets.formats.html.ConfigurationImpl
                      constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: java.lang.String)
                      public report(): void
                  }
                  class ConfigurationImpl extends com.sun.tools.doclets.internal.toolkit.Configuration {
                      public static BUILD_DATE: java.lang.String
                      public header: java.lang.String
                      public packagesheader: java.lang.String
                      public footer: java.lang.String
                      public doctitle: java.lang.String
                      public windowtitle: java.lang.String
                      public top: java.lang.String
                      public bottom: java.lang.String
                      public helpfile: java.lang.String
                      public stylesheetfile: java.lang.String
                      public docrootparent: java.lang.String
                      public nohelp: boolean
                      public splitindex: boolean
                      public createindex: boolean
                      public classuse: boolean
                      public createtree: boolean
                      public nodeprecatedlist: boolean
                      public nonavbar: boolean
                      public overview: boolean
                      public createoverview: boolean
                      public doclintOpts: java.util.Set<java.lang.String>
                      public standardmessage: com.sun.tools.doclets.internal.toolkit.util.MessageRetriever
                      public topFile: com.sun.tools.doclets.internal.toolkit.util.DocPath
                      public currentcd: com.sun.javadoc.ClassDoc
                      public constructor()
                      public getDocletSpecificBuildDate(): java.lang.String
                      public setSpecificDocletOptions(arg0: java.lang.String[][]): void
                      public optionLength(arg0: java.lang.String): int
                      public validOptions(arg0: java.lang.String[][], arg1: com.sun.javadoc.DocErrorReporter): boolean
                      public getDocletSpecificMsg(): com.sun.tools.doclets.internal.toolkit.util.MessageRetriever
                      protected setTopFile(arg0: com.sun.javadoc.RootDoc): void
                      protected getValidClass(arg0: com.sun.javadoc.ClassDoc[]): com.sun.javadoc.ClassDoc
                      protected checkForDeprecation(arg0: com.sun.javadoc.RootDoc): boolean
                      protected setCreateOverview(): void
                      public getWriterFactory(): com.sun.tools.doclets.internal.toolkit.WriterFactory
                      public getMemberComparator(): java.util.Comparator<com.sun.javadoc.ProgramElementDoc>
                      public getLocale(): java.util.Locale
                      public getFileManager(): javax.tools.JavaFileManager
                      public showMessage(arg0: com.sun.javadoc.SourcePosition, arg1: java.lang.String): boolean
                      public newContent(): com.sun.tools.doclets.internal.toolkit.Content
                      public isAllowScriptInComments(): boolean
                  }
                  class EnumConstantWriterImpl extends com.sun.tools.doclets.formats.html.AbstractMemberWriter implements com.sun.tools.doclets.internal.toolkit.EnumConstantWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      constructor(...args: any[])
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getEnumConstantsDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getEnumConstantsTreeHeader(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.FieldDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getEnumConstantsDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getEnumConstants(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public getMemberKind(): int
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      public setSummaryColumnStyle(arg0: com.sun.tools.doclets.formats.html.markup.HtmlTree): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  abstract class AbstractMemberWriter {
                      protected configuration: com.sun.tools.doclets.formats.html.ConfigurationImpl
                      protected writer: com.sun.tools.doclets.formats.html.SubWriterHolderWriter
                      protected classdoc: com.sun.javadoc.ClassDoc
                      protected typeMap: java.util.Map<java.lang.String, java.lang.Integer>
                      protected methodTypes: java.util.Set<com.sun.tools.doclets.internal.toolkit.util.MethodTypes>
                      public nodepr: boolean
                      protected printedSummaryHeader: boolean
                      constructor(...args: any[])
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      addSummaryLink<T>(...args: any[]): any
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      addNavDetailLink<T>(...args: any[]): any
                      protected addName(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected modifierString(arg0: com.sun.javadoc.MemberDoc): java.lang.String
                      protected typeString(arg0: com.sun.javadoc.MemberDoc): java.lang.String
                      protected addModifiers(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected makeSpace(arg0: int): java.lang.String
                      protected addModifierAndType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.javadoc.Type, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addDeprecatedInfo(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addComment(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected name(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String
                      protected getHead(arg0: com.sun.javadoc.MemberDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected isInherited(arg0: com.sun.javadoc.ProgramElementDoc): boolean
                      protected addDeprecatedAPI(arg0: java.util.List<com.sun.javadoc.Doc>, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addUseInfo(arg0: java.util.List<com.sun.javadoc.ProgramElementDoc>, arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavSummaryLink(arg0: java.util.List<any>, arg1: com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected serialWarning(arg0: com.sun.javadoc.SourcePosition, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                      public eligibleMembers(arg0: com.sun.javadoc.ProgramElementDoc[]): com.sun.javadoc.ProgramElementDoc[]
                      public addMemberSummary(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.javadoc.Tag[], arg3: java.util.List<com.sun.tools.doclets.internal.toolkit.Content>, arg4: int): void
                      public showTabs(): boolean
                      public setSummaryColumnStyle(arg0: com.sun.tools.doclets.formats.html.markup.HtmlTree): void
                      public addInheritedMemberSummary(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: boolean, arg3: boolean, arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getInheritedSummaryHeader(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public getInheritedSummaryLinksTree(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableTree(arg0: com.sun.javadoc.ClassDoc, arg1: java.util.List<com.sun.tools.doclets.internal.toolkit.Content>): com.sun.tools.doclets.internal.toolkit.Content
                      getMemberTree<T>(...args: any[]): any
                  }
                  class FieldWriterImpl extends com.sun.tools.doclets.formats.html.AbstractMemberWriter implements com.sun.tools.doclets.internal.toolkit.FieldWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      constructor(...args: any[])
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldDocTreeHeader(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.FieldDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getFieldDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public getMemberKind(): int
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class PropertyWriterImpl extends com.sun.tools.doclets.formats.html.AbstractMemberWriter implements com.sun.tools.doclets.internal.toolkit.PropertyWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.SubWriterHolderWriter, arg1: com.sun.javadoc.ClassDoc)
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPropertyDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPropertyDocTreeHeader(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MethodDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getPropertyDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPropertyDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public getMemberKind(): int
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class MethodWriterImpl extends com.sun.tools.doclets.formats.html.AbstractExecutableMemberWriter implements com.sun.tools.doclets.internal.toolkit.MethodWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      constructor(...args: any[])
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodDocTreeHeader(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MethodDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.Type, arg1: com.sun.javadoc.MethodDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getMethodDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public getMemberKind(): int
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected static addOverridden(arg0: com.sun.tools.doclets.formats.html.HtmlDocletWriter, arg1: com.sun.javadoc.Type, arg2: com.sun.javadoc.MethodDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected static addImplementsInfo(arg0: com.sun.tools.doclets.formats.html.HtmlDocletWriter, arg1: com.sun.javadoc.MethodDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addReturnType(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  abstract class AbstractExecutableMemberWriter extends com.sun.tools.doclets.formats.html.AbstractMemberWriter {
                      constructor(...args: any[])
                      protected addTypeParameters(arg0: com.sun.javadoc.ExecutableMemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getTypeParameters(arg0: com.sun.javadoc.ExecutableMemberDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addParam(arg0: com.sun.javadoc.ExecutableMemberDoc, arg1: com.sun.javadoc.Parameter, arg2: boolean, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addReceiverAnnotations(arg0: com.sun.javadoc.ExecutableMemberDoc, arg1: com.sun.javadoc.Type, arg2: com.sun.javadoc.AnnotationDesc[], arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      addParameters<T>(...args: any[]): any
                      protected addExceptions(arg0: com.sun.javadoc.ExecutableMemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: int): void
                      protected implementsMethodInIntfac(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.javadoc.ClassDoc[]): com.sun.javadoc.ClassDoc
                      protected getErasureAnchor(arg0: com.sun.javadoc.ExecutableMemberDoc): java.lang.String
                  }
                  class ConstructorWriterImpl extends com.sun.tools.doclets.formats.html.AbstractExecutableMemberWriter implements com.sun.tools.doclets.internal.toolkit.ConstructorWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      constructor(...args: any[])
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstructorDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstructorDocTreeHeader(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.ConstructorDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public setSummaryColumnStyle(arg0: com.sun.tools.doclets.formats.html.markup.HtmlTree): void
                      public addDeprecated(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.ConstructorDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getConstructorDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstructorDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public setFoundNonPubConstructor(arg0: boolean): void
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getMemberKind(): int
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  abstract class SubWriterHolderWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public addSummaryHeader(arg0: com.sun.tools.doclets.formats.html.AbstractMemberWriter, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getSummaryTableTree(arg0: com.sun.tools.doclets.formats.html.AbstractMemberWriter, arg1: com.sun.javadoc.ClassDoc, arg2: java.util.List<com.sun.tools.doclets.internal.toolkit.Content>, arg3: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getTableCaption(arg0: java.util.Set<com.sun.tools.doclets.internal.toolkit.util.MethodTypes>): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodTypeLinks(arg0: com.sun.tools.doclets.internal.toolkit.util.MethodTypes): com.sun.tools.doclets.internal.toolkit.Content
                      public addInheritedSummaryHeader(arg0: com.sun.tools.doclets.formats.html.AbstractMemberWriter, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      addIndexComment<T>(...args: any[]): any
                      public addSummaryType(arg0: com.sun.tools.doclets.formats.html.AbstractMemberWriter, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      addSummaryLinkComment<T>(...args: any[]): any
                      public addInheritedMemberSummary(arg0: com.sun.tools.doclets.formats.html.AbstractMemberWriter, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: boolean, arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      getMemberTree<T>(...args: any[]): any
                      public getMemberSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberDetailsTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class HtmlDocletWriter extends com.sun.tools.doclets.formats.html.markup.HtmlDocWriter {
                      public pathToRoot: com.sun.tools.doclets.internal.toolkit.util.DocPath
                      public path: com.sun.tools.doclets.internal.toolkit.util.DocPath
                      public filename: com.sun.tools.doclets.internal.toolkit.util.DocPath
                      configuration<T>(...args: any[]): any
                      protected printedAnnotationHeading: boolean
                      protected printedAnnotationFieldHeading: boolean
                      static blockTags: java.util.Set<java.lang.String>
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public replaceDocRootDir(arg0: java.lang.String): java.lang.String
                      public getAllClassesLinkScript(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      protected addTagsInfo(arg0: com.sun.javadoc.Doc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected hasSerializationOverviewTags(arg0: com.sun.javadoc.FieldDoc): boolean
                      public getTagletWriterInstance(arg0: boolean): com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter
                      public getTargetPackageLink(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getTargetProfilePackageLink(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content, arg3: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getTargetProfileLink(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getTypeNameForProfile(arg0: com.sun.javadoc.ClassDoc): java.lang.String
                      public isTypeInProfile(arg0: com.sun.javadoc.ClassDoc, arg1: int): boolean
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content, arg5: int): void
                      public printHtmlDocument(arg0: java.lang.String[], arg1: boolean, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getWindowTitle(arg0: java.lang.String): java.lang.String
                      public getUserHeaderFooter(arg0: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public addTop(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addBottom(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavLinks(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      getNavLinkNext<T>(...args: any[]): any
                      getNavLinkPrevious<T>(...args: any[]): any
                      protected addSummaryDetailLinks(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkContents(): com.sun.tools.doclets.internal.toolkit.Content
                      getNavLinkPackage<T>(...args: any[]): any
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      getNavShowLists<T>(...args: any[]): any
                      protected getNavHideLists(arg0: com.sun.tools.doclets.internal.toolkit.util.DocPath): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkMainTree(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClass(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkDeprecated(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClassIndex(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkIndex(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkHelp(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: java.lang.String[], arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getTableCaption(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      getMarkerAnchor<T>(...args: any[]): any
                      public getPackageName(arg0: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageLabel(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      protected addPackageDeprecatedAPI(arg0: java.util.List<com.sun.javadoc.Doc>, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      pathString<T>(...args: any[]): any
                      getPackageLink<T>(...args: any[]): any
                      public italicsClassName(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public addSrcLink(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl): com.sun.tools.doclets.internal.toolkit.Content
                      public getTypeParameterLinks(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl): com.sun.tools.doclets.internal.toolkit.Content
                      public getCrossClassLink(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content, arg3: boolean, arg4: java.lang.String, arg5: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public isClassLinkable(arg0: com.sun.javadoc.ClassDoc): boolean
                      public getCrossPackageLink(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.util.DocLink
                      public getQualifiedClassLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.Content
                      addPreQualifiedClassLink<T>(...args: any[]): any
                      public getPreQualifiedClassLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public addPreQualifiedStrongClassLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      getDocLink<T>(...args: any[]): any
                      check(arg0: java.lang.String): java.lang.String
                      getAnchor<T>(...args: any[]): any
                      public seeTagToContent(arg0: com.sun.javadoc.SeeTag): com.sun.tools.doclets.internal.toolkit.Content
                      addInlineComment<T>(...args: any[]): any
                      public addInlineDeprecatedComment(arg0: com.sun.javadoc.Doc, arg1: com.sun.javadoc.Tag, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      addSummaryComment<T>(...args: any[]): any
                      public addSummaryDeprecatedComment(arg0: com.sun.javadoc.Doc, arg1: com.sun.javadoc.Tag, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public commentTagsToContent(arg0: com.sun.javadoc.Tag, arg1: com.sun.javadoc.Doc, arg2: com.sun.javadoc.Tag[], arg3: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public static removeNonInlineHtmlTags(arg0: java.lang.String): java.lang.String
                      public getStyleSheetProperties(): com.sun.tools.doclets.formats.html.markup.HtmlTree
                      public getScriptProperties(): com.sun.tools.doclets.formats.html.markup.HtmlTree
                      public isCoreClass(arg0: com.sun.javadoc.ClassDoc): boolean
                      addAnnotationInfo<T>(...args: any[]): any
                      public addReceiverAnnotationInfo(arg0: com.sun.javadoc.ExecutableMemberDoc, arg1: com.sun.javadoc.AnnotationDesc[], arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotations(arg0: int, arg1: com.sun.javadoc.AnnotationDesc[], arg2: boolean, arg3: boolean): java.util.List<com.sun.tools.doclets.internal.toolkit.Content>
                  }
                  class LinkInfoImpl$Kind extends java.lang.Enum<com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind> {
                      public static DEFAULT: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static ALL_CLASSES_FRAME: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static MEMBER: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS_USE: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static INDEX: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CONSTANT_SUMMARY: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SERIALIZED_FORM: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SERIAL_MEMBER: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static PACKAGE: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SEE_TAG: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static VALUE_TAG: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static TREE: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static PACKAGE_FRAME: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS_HEADER: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS_SIGNATURE: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static RETURN_TYPE: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SUMMARY_RETURN_TYPE: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static EXECUTABLE_MEMBER_PARAM: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SUPER_INTERFACES: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static IMPLEMENTED_INTERFACES: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static IMPLEMENTED_CLASSES: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SUBINTERFACES: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static SUBCLASSES: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS_SIGNATURE_PARENT_NAME: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static METHOD_DOC_COPY: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static METHOD_SPECIFIED_BY: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static METHOD_OVERRIDES: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static ANNOTATION: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static FIELD_DOC_COPY: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS_TREE_PARENT: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static MEMBER_TYPE_PARAMS: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static CLASS_USE_HEADER: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static PROPERTY_DOC_COPY: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public static values(): com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind[]
                      valueOf<T>(...args: any[]): any
                  }
                  class LinkInfoImpl$1 {
                      static $SwitchMap$com$sun$tools$doclets$formats$html$LinkInfoImpl$Kind: int[]
                  }
                  class LinkInfoImpl extends com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo {
                      public configuration: com.sun.tools.doclets.formats.html.ConfigurationImpl
                      public context: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      where<T>(...args: any[]): any
                      styleName<T>(...args: any[]): any
                      target<T>(...args: any[]): any
                      constructor(...args: any[])
                      protected newContent(): com.sun.tools.doclets.internal.toolkit.Content
                      label<T>(...args: any[]): any
                      public strong(arg0: boolean): com.sun.tools.doclets.formats.html.LinkInfoImpl
                      public varargs(arg0: boolean): com.sun.tools.doclets.formats.html.LinkInfoImpl
                      public getContext(): com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind
                      public setContext(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind): void
                      public isLinkable(): boolean
                  }
                  class TreeWriter extends com.sun.tools.doclets.formats.html.AbstractTreeWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.tools.doclets.internal.toolkit.util.ClassTree)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassTree): void
                      public generateTreeFile(): void
                      protected addPackageTreeLinks(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  abstract class AbstractTreeWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      protected classtree: com.sun.tools.doclets.internal.toolkit.util.ClassTree
                      protected constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.tools.doclets.internal.toolkit.util.ClassTree)
                      protected addLevelInfo(arg0: com.sun.javadoc.ClassDoc, arg1: java.util.List<com.sun.javadoc.ClassDoc>, arg2: boolean, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addTree(arg0: java.util.List<com.sun.javadoc.ClassDoc>, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addExtendsImplements(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addPartialInfo(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class TagletWriterImpl extends com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.HtmlDocletWriter, arg1: boolean)
                      public getOutputInstance(): com.sun.tools.doclets.internal.toolkit.Content
                      protected codeTagOutput(arg0: com.sun.javadoc.Tag): com.sun.tools.doclets.internal.toolkit.Content
                      public getDocRootOutput(): com.sun.tools.doclets.internal.toolkit.Content
                      public deprecatedTagOutput(arg0: com.sun.javadoc.Doc): com.sun.tools.doclets.internal.toolkit.Content
                      protected literalTagOutput(arg0: com.sun.javadoc.Tag): com.sun.tools.doclets.internal.toolkit.Content
                      public getMsgRetriever(): com.sun.tools.doclets.internal.toolkit.util.MessageRetriever
                      public getParamHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public paramTagOutput(arg0: com.sun.javadoc.ParamTag, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public propertyTagOutput(arg0: com.sun.javadoc.Tag, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public returnTagOutput(arg0: com.sun.javadoc.Tag): com.sun.tools.doclets.internal.toolkit.Content
                      public seeTagOutput(arg0: com.sun.javadoc.Doc, arg1: com.sun.javadoc.SeeTag[]): com.sun.tools.doclets.internal.toolkit.Content
                      simpleTagOutput<T>(...args: any[]): any
                      public getThrowsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      throwsTagOutput<T>(...args: any[]): any
                      public valueTagOutput(arg0: com.sun.javadoc.FieldDoc, arg1: java.lang.String, arg2: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      commentTagsToOutput<T>(...args: any[]): any
                      public configuration(): com.sun.tools.doclets.internal.toolkit.Configuration
                  }
                  class SplitIndexWriter extends com.sun.tools.doclets.formats.html.AbstractIndexWriter {
                      protected prev: int
                      protected next: int
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder, arg3: int, arg4: int)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder): void
                      protected generateIndexFile(arg0: java.lang.Character): void
                      protected addLinksForIndexes(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class AbstractIndexWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      protected indexbuilder: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder
                      protected constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder)
                      protected getNavLinkIndex(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addContents(arg0: java.lang.Character, arg1: java.util.List<com.sun.javadoc.Doc>, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      addDescription<T>(...args: any[]): any
                      protected addClassInfo(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addComment(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addMemberDesc(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getMarkerAnchorForIndex(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getNameForIndex(arg0: java.lang.String): java.lang.String
                  }
                  class SourceToHTMLConverter {
                      public static convertRoot(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.RootDoc, arg2: com.sun.tools.doclets.internal.toolkit.util.DocPath): void
                      generate(): void
                      public convertPackage(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): void
                      public convertClass(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath): void
                      public getStyleSheetProperties(): com.sun.tools.doclets.formats.html.markup.HtmlTree
                      public static getAnchorName(arg0: com.sun.javadoc.Doc): java.lang.String
                  }
                  class SingleIndexWriter extends com.sun.tools.doclets.formats.html.AbstractIndexWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder): void
                      protected generateIndexFile(): void
                      protected addLinksForIndexes(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class SerializedFormWriterImpl extends com.sun.tools.doclets.formats.html.SubWriterHolderWriter implements com.sun.tools.doclets.internal.toolkit.SerializedFormWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl)
                      public getHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializedSummariesHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageSerializedHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassSerializedHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassHeader(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerialUIDInfoHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addSerialUIDInfo(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializedContent(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getSerialFieldWriter(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.SerializedFormWriter$SerialFieldWriter
                      public getSerialMethodWriter(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.SerializedFormWriter$SerialMethodWriter
                  }
                  class ProfileWriterImpl extends com.sun.tools.doclets.formats.html.HtmlDocletWriter implements com.sun.tools.doclets.internal.toolkit.ProfileSummaryWriter {
                      protected prevProfile: com.sun.tools.javac.jvm.Profile
                      protected nextProfile: com.sun.tools.javac.jvm.Profile
                      protected profile: com.sun.tools.javac.jvm.Profile
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.javac.jvm.Profile, arg2: com.sun.tools.javac.jvm.Profile, arg3: com.sun.tools.javac.jvm.Profile)
                      public getProfileHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageSummaryHeader(arg0: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public getPackageSummaryTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addProfileFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: com.sun.javadoc.PackageDoc): void
                      public getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class ProfilePackageWriterImpl extends com.sun.tools.doclets.formats.html.HtmlDocletWriter implements com.sun.tools.doclets.internal.toolkit.ProfilePackageSummaryWriter {
                      protected prev: com.sun.javadoc.PackageDoc
                      protected next: com.sun.javadoc.PackageDoc
                      protected packageDoc: com.sun.javadoc.PackageDoc
                      protected profileName: java.lang.String
                      protected profileValue: int
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.javadoc.PackageDoc, arg4: com.sun.tools.javac.jvm.Profile)
                      public getPackageHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getSummaryHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addPackageDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageTags(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class ProfilePackageIndexFrameWriter extends com.sun.tools.doclets.formats.html.AbstractProfileIndexWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: java.lang.String): void
                      protected addProfilePackagesList(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content, arg4: java.lang.String): void
                      protected getPackage(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavigationBarHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverviewHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilesList(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllClassesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllPackagesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllProfilesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  abstract class AbstractProfileIndexWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      protected profiles: com.sun.tools.javac.sym.Profiles
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      protected addNavigationBarHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverviewHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilesList(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilePackagesList(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content, arg4: java.lang.String): void
                      protected buildProfileIndexFile(arg0: java.lang.String, arg1: boolean): void
                      protected buildProfilePackagesIndexFile(arg0: java.lang.String, arg1: boolean, arg2: java.lang.String): void
                      protected addOverview(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addIndex(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilePackagesIndex(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: java.lang.String): void
                      protected addIndexContents(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilePackagesIndexContents(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content, arg4: java.lang.String): void
                      protected addConfigurationTitle(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkContents(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addAllClassesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllPackagesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllProfilesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class ProfilePackageFrameWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc, arg2: java.lang.String)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc, arg2: int): void
                      protected addClassListing(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: int): void
                      protected addClassKindListing(arg0: com.sun.javadoc.ClassDoc[], arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: com.sun.tools.doclets.internal.toolkit.Content, arg3: int): void
                  }
                  class ProfileIndexFrameWriter extends com.sun.tools.doclets.formats.html.AbstractProfileIndexWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl): void
                      protected addProfilesList(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getProfile(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavigationBarHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverviewHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllClassesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllPackagesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilePackagesList(arg0: com.sun.tools.javac.sym.Profiles, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content, arg4: java.lang.String): void
                  }
                  class PackageWriterImpl extends com.sun.tools.doclets.formats.html.HtmlDocletWriter implements com.sun.tools.doclets.internal.toolkit.PackageSummaryWriter {
                      protected prev: com.sun.javadoc.PackageDoc
                      protected next: com.sun.javadoc.PackageDoc
                      protected packageDoc: com.sun.javadoc.PackageDoc
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.javadoc.PackageDoc)
                      public getPackageHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getSummaryHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassesSummary(arg0: com.sun.javadoc.ClassDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageTags(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addPackageFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class PackageUseWriter extends com.sun.tools.doclets.formats.html.SubWriterHolderWriter {
                      pkgdoc: com.sun.javadoc.PackageDoc
                      usingPackageToUsedClasses: java.util.SortedMap<java.lang.String, java.util.Set<com.sun.javadoc.ClassDoc>>
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassUseMapper, arg2: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg3: com.sun.javadoc.PackageDoc)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassUseMapper, arg2: com.sun.javadoc.PackageDoc): void
                      protected generatePackageUseFile(): void
                      addPackageUse<T>(...args: any[]): any
                      protected addPackageList(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addClassList(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addClassRow(arg0: com.sun.javadoc.ClassDoc, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getPackageUseHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class PackageTreeWriter extends com.sun.tools.doclets.formats.html.AbstractTreeWriter {
                      protected packagedoc: com.sun.javadoc.PackageDoc
                      protected prev: com.sun.javadoc.PackageDoc
                      protected next: com.sun.javadoc.PackageDoc
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.javadoc.PackageDoc, arg4: com.sun.javadoc.PackageDoc)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc, arg2: com.sun.javadoc.PackageDoc, arg3: com.sun.javadoc.PackageDoc, arg4: boolean): void
                      protected generatePackageTreeFile(): void
                      protected getPackageTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addLinkToMainTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class PackageIndexWriter extends com.sun.tools.doclets.formats.html.AbstractPackageIndexWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl): void
                      protected addIndex(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilesList(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      addPackagesList<T>(...args: any[]): any
                      protected addOverviewHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverviewComment(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverview(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  abstract class AbstractPackageIndexWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      protected packages: com.sun.javadoc.PackageDoc[]
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      protected addNavigationBarHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverviewHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addPackagesList(arg0: com.sun.javadoc.PackageDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected buildPackageIndexFile(arg0: java.lang.String, arg1: boolean): void
                      protected addOverview(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addIndex(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addIndexContents(arg0: com.sun.javadoc.PackageDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addConfigurationTitle(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkContents(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addAllClassesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllProfilesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addProfilesList(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class PackageIndexFrameWriter extends com.sun.tools.doclets.formats.html.AbstractPackageIndexWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl): void
                      protected addPackagesList(arg0: com.sun.javadoc.PackageDoc[], arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getPackage(arg0: com.sun.javadoc.PackageDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavigationBarHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addOverviewHeader(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllClassesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addAllProfilesLink(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addNavigationBarFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class PackageFrameWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.PackageDoc): void
                      protected addClassListing(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addClassKindListing(arg0: com.sun.javadoc.ClassDoc[], arg1: com.sun.tools.doclets.internal.toolkit.Content, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class NestedClassWriterImpl extends com.sun.tools.doclets.formats.html.AbstractMemberWriter implements com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      constructor(...args: any[])
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public getMemberKind(): int
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class LinkOutputImpl implements com.sun.tools.doclets.internal.toolkit.util.links.LinkOutput {
                      public output: java.lang.StringBuilder
                      public constructor()
                      public append(arg0: java.lang.Object): void
                      public insert(arg0: int, arg1: java.lang.Object): void
                      toString<T>(...args: any[]): any
                  }
                  class LinkFactoryImpl extends com.sun.tools.doclets.internal.toolkit.util.links.LinkFactory {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.HtmlDocletWriter)
                      protected newContent(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getClassLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo): com.sun.tools.doclets.internal.toolkit.Content
                      protected getTypeParameterLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo, arg1: com.sun.javadoc.Type): com.sun.tools.doclets.internal.toolkit.Content
                      protected getTypeAnnotationLink(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo, arg1: com.sun.javadoc.AnnotationDesc): com.sun.tools.doclets.internal.toolkit.Content
                      public getTypeAnnotationLinks(arg0: com.sun.tools.doclets.internal.toolkit.util.links.LinkInfo): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class HtmlSerialMethodWriter extends com.sun.tools.doclets.formats.html.MethodWriterImpl implements com.sun.tools.doclets.internal.toolkit.SerializedFormWriter$SerialMethodWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.SubWriterHolderWriter, arg1: com.sun.javadoc.ClassDoc)
                      public getSerializableMethodsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getMethodsContentHeader(arg0: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializableMethods(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getNoCustomizationMsg(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public addMemberHeader(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addDeprecatedMemberInfo(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addMemberDescription(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addMemberTags(arg0: com.sun.javadoc.MethodDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class HtmlSerialFieldWriter extends com.sun.tools.doclets.formats.html.FieldWriterImpl implements com.sun.tools.doclets.internal.toolkit.SerializedFormWriter$SerialFieldWriter {
                      members<T>(...args: any[]): any
                      public constructor(arg0: com.sun.tools.doclets.formats.html.SubWriterHolderWriter, arg1: com.sun.javadoc.ClassDoc)
                      public getSerializableFieldsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getFieldsContentHeader(arg0: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public getSerializableFields(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addMemberHeader(arg0: com.sun.javadoc.ClassDoc, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addMemberDeprecatedInfo(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      addMemberDescription<T>(...args: any[]): any
                      public addMemberTags(arg0: com.sun.javadoc.FieldDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public shouldPrintOverview(arg0: com.sun.javadoc.FieldDoc): boolean
                  }
                  class HtmlDoclet extends com.sun.tools.doclets.internal.toolkit.AbstractDoclet {
                      configuration<T>(...args: any[]): any
                      public static sharedInstanceForOptions: com.sun.tools.doclets.formats.html.ConfigurationImpl
                      public constructor()
                      public static start(arg0: com.sun.javadoc.RootDoc): boolean
                      protected generateOtherFiles(arg0: com.sun.javadoc.RootDoc, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassTree): void
                      protected generateClassFiles(arg0: com.sun.javadoc.ClassDoc[], arg1: com.sun.tools.doclets.internal.toolkit.util.ClassTree): void
                      protected generateProfileFiles(): void
                      protected generatePackageFiles(arg0: com.sun.tools.doclets.internal.toolkit.util.ClassTree): void
                      public static optionLength(arg0: java.lang.String): int
                      public static validOptions(arg0: java.lang.String[][], arg1: com.sun.javadoc.DocErrorReporter): boolean
                  }
                  class HelpWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl): void
                      protected generateHelpFile(): void
                      protected addHelpFileContents(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkHelp(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class FrameOutputWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      noOfPackages: int
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl): void
                      protected generateFrameFile(): void
                      protected addFrameWarning(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getFrameDetails(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class DeprecatedListWriter extends com.sun.tools.doclets.formats.html.SubWriterHolderWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl): void
                      protected generateDeprecatedListFile(arg0: com.sun.tools.doclets.internal.toolkit.util.DeprecatedAPIListBuilder): void
                      public getContentsList(arg0: com.sun.tools.doclets.internal.toolkit.util.DeprecatedAPIListBuilder): com.sun.tools.doclets.internal.toolkit.Content
                      public getHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkDeprecated(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class ConstantsSummaryWriterImpl extends com.sun.tools.doclets.formats.html.HtmlDocletWriter implements com.sun.tools.doclets.internal.toolkit.ConstantsSummaryWriter {
                      configuration: com.sun.tools.doclets.formats.html.ConfigurationImpl
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl)
                      public getHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getContentsHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addLinkToPackageContent(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String, arg2: java.util.Set<java.lang.String>, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getContentsList(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstantSummaries(): com.sun.tools.doclets.internal.toolkit.Content
                      public addPackageName(arg0: com.sun.javadoc.PackageDoc, arg1: java.lang.String, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassConstantHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getConstantMembersHeader(arg0: com.sun.javadoc.ClassDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getClassName(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addConstantMembers(arg0: com.sun.javadoc.ClassDoc, arg1: java.util.List<com.sun.javadoc.FieldDoc>, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class ClassWriterImpl extends com.sun.tools.doclets.formats.html.SubWriterHolderWriter implements com.sun.tools.doclets.internal.toolkit.ClassWriter {
                      protected classDoc: com.sun.javadoc.ClassDoc
                      protected classtree: com.sun.tools.doclets.internal.toolkit.util.ClassTree
                      protected prev: com.sun.javadoc.ClassDoc
                      protected next: com.sun.javadoc.ClassDoc
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ClassDoc, arg3: com.sun.javadoc.ClassDoc, arg4: com.sun.tools.doclets.internal.toolkit.util.ClassTree)
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClass(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                      public getHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassInfoTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addClassSignature(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addClassTree(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTypeParamInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSubClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSubInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInterfaceUsageInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addImplementedInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addSuperInterfacesInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addNestedClassInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addFunctionalInterfaceInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public isFunctionalInterface(): boolean
                      public addClassDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addSummaryDetailLinks(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavSummaryLinks(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavDetailLinks(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavGap(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getClassDoc(): com.sun.javadoc.ClassDoc
                  }
                  class ClassUseWriter extends com.sun.tools.doclets.formats.html.SubWriterHolderWriter {
                      classdoc: com.sun.javadoc.ClassDoc
                      pkgToPackageAnnotations: java.util.Set<com.sun.javadoc.PackageDoc>
                      pkgToClassTypeParameter: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToClassAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodTypeParameter: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodArgTypeParameter: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodReturnTypeParameter: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodParameterAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToFieldTypeParameter: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToFieldAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToSubclass: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToSubinterface: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToImplementingClass: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToField: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodReturn: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodArgs: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToMethodThrows: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToConstructorAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToConstructorParameterAnnotations: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToConstructorArgs: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToConstructorArgTypeParameter: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgToConstructorThrows: java.util.Map<java.lang.String, java.util.List<com.sun.javadoc.ProgramElementDoc>>
                      pkgSet: java.util.SortedSet<com.sun.javadoc.PackageDoc>
                      methodSubWriter: com.sun.tools.doclets.formats.html.MethodWriterImpl
                      constrSubWriter: com.sun.tools.doclets.formats.html.ConstructorWriterImpl
                      fieldSubWriter: com.sun.tools.doclets.formats.html.FieldWriterImpl
                      classSubWriter: com.sun.tools.doclets.formats.html.NestedClassWriterImpl
                      classUseTableSummary: java.lang.String
                      subclassUseTableSummary: java.lang.String
                      subinterfaceUseTableSummary: java.lang.String
                      fieldUseTableSummary: java.lang.String
                      methodUseTableSummary: java.lang.String
                      constructorUseTableSummary: java.lang.String
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.ClassUseMapper, arg2: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg3: com.sun.javadoc.ClassDoc)
                      generate<T>(...args: any[]): any
                      protected generateClassUseFile(): void
                      addClassUse<T>(...args: any[]): any
                      protected addPackageList(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addPackageAnnotationList(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addClassList(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addPackageUse(arg0: com.sun.javadoc.PackageDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getClassUseHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClass(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class AnnotationTypeWriterImpl extends com.sun.tools.doclets.formats.html.SubWriterHolderWriter implements com.sun.tools.doclets.internal.toolkit.AnnotationTypeWriter {
                      protected annotationType: com.sun.javadoc.AnnotationTypeDoc
                      protected prev: com.sun.javadoc.Type
                      protected next: com.sun.javadoc.Type
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.javadoc.AnnotationTypeDoc, arg2: com.sun.javadoc.Type, arg3: com.sun.javadoc.Type)
                      protected getNavLinkPackage(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClass(): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavLinkClassUse(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkPrevious(): com.sun.tools.doclets.internal.toolkit.Content
                      public getNavLinkNext(): com.sun.tools.doclets.internal.toolkit.Content
                      public getHeader(arg0: java.lang.String): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationContentHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addFooter(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public printDocument(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationInfoTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addAnnotationTypeSignature(arg0: java.lang.String, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationTypeDescription(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationTypeTagInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationTypeDeprecationInfo(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavLinkTree(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addSummaryDetailLinks(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavSummaryLinks(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavSummaryLink(arg0: com.sun.tools.doclets.internal.toolkit.builders.MemberSummaryBuilder, arg1: java.lang.String, arg2: int, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavDetailLinks(): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavGap(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                  }
                  class AnnotationTypeRequiredMemberWriterImpl extends com.sun.tools.doclets.formats.html.AbstractMemberWriter implements com.sun.tools.doclets.internal.toolkit.AnnotationTypeRequiredMemberWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.SubWriterHolderWriter, arg1: com.sun.javadoc.AnnotationTypeDoc)
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addAnnotationDetailsMarker(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationDocTreeHeader(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MemberDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class AnnotationTypeOptionalMemberWriterImpl extends com.sun.tools.doclets.formats.html.AnnotationTypeRequiredMemberWriterImpl implements com.sun.tools.doclets.internal.toolkit.AnnotationTypeOptionalMemberWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.SubWriterHolderWriter, arg1: com.sun.javadoc.AnnotationTypeDoc)
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public addDefaultValueInfo(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public close(): void
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                  }
                  class AnnotationTypeFieldWriterImpl extends com.sun.tools.doclets.formats.html.AbstractMemberWriter implements com.sun.tools.doclets.internal.toolkit.AnnotationTypeFieldWriter , com.sun.tools.doclets.internal.toolkit.MemberSummaryWriter {
                      public constructor(arg0: com.sun.tools.doclets.formats.html.SubWriterHolderWriter, arg1: com.sun.javadoc.AnnotationTypeDoc)
                      public getMemberSummaryHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getMemberTreeHeader(): com.sun.tools.doclets.internal.toolkit.Content
                      public addAnnotationFieldDetailsMarker(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addAnnotationDetailsTreeHeader(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationDocTreeHeader(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getSignature(arg0: com.sun.javadoc.MemberDoc): com.sun.tools.doclets.internal.toolkit.Content
                      public addDeprecated(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addComments(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addTags(arg0: com.sun.javadoc.MemberDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getAnnotationDetails(arg0: com.sun.tools.doclets.internal.toolkit.Content): com.sun.tools.doclets.internal.toolkit.Content
                      public getAnnotationDoc(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      public close(): void
                      public addSummaryLabel(arg0: com.sun.tools.doclets.internal.toolkit.Content): void
                      public getTableSummary(): java.lang.String
                      public getCaption(): com.sun.tools.doclets.internal.toolkit.Content
                      public getSummaryTableHeader(arg0: com.sun.javadoc.ProgramElementDoc): java.lang.String[]
                      public addSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryAnchor(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      public addInheritedSummaryLabel(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryLink(arg0: com.sun.tools.doclets.formats.html.LinkInfoImpl$Kind, arg1: com.sun.javadoc.ClassDoc, arg2: com.sun.javadoc.ProgramElementDoc, arg3: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addInheritedSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: com.sun.javadoc.ProgramElementDoc, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected addSummaryType(arg0: com.sun.javadoc.ProgramElementDoc, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                      protected getDeprecatedLink(arg0: com.sun.javadoc.ProgramElementDoc): com.sun.tools.doclets.internal.toolkit.Content
                      protected getNavSummaryLink(arg0: com.sun.javadoc.ClassDoc, arg1: boolean): com.sun.tools.doclets.internal.toolkit.Content
                      protected addNavDetailLink(arg0: boolean, arg1: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  class AllClassesFrameWriter extends com.sun.tools.doclets.formats.html.HtmlDocletWriter {
                      protected indexbuilder: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder
                      BR: com.sun.tools.doclets.formats.html.markup.HtmlTree
                      public constructor(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.DocPath, arg2: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder)
                      public static generate(arg0: com.sun.tools.doclets.formats.html.ConfigurationImpl, arg1: com.sun.tools.doclets.internal.toolkit.util.IndexBuilder): void
                      protected buildAllClassesFile(arg0: boolean): void
                      protected addAllClasses(arg0: com.sun.tools.doclets.internal.toolkit.Content, arg1: boolean): void
                      protected addContents(arg0: java.util.List<com.sun.javadoc.Doc>, arg1: boolean, arg2: com.sun.tools.doclets.internal.toolkit.Content): void
                  }
                  namespace resources {
                     class standard extends java.util.ListResourceBundle {
                         public constructor()
                         protected getContents(): java.lang.Object[][]
                     }
                     class standard_ja extends java.util.ListResourceBundle {
                         public constructor()
                         protected getContents(): java.lang.Object[][]
                     }
                     class standard_zh_CN extends java.util.ListResourceBundle {
                         public constructor()
                         protected getContents(): java.lang.Object[][]
                     }

                  }

               }

            }
            namespace standard {
               class Standard {
                   public constructor()
                   public static optionLength(arg0: java.lang.String): int
                   public static start(arg0: com.sun.javadoc.RootDoc): boolean
                   public static validOptions(arg0: java.lang.String[][], arg1: com.sun.javadoc.DocErrorReporter): boolean
                   public static languageVersion(): com.sun.javadoc.LanguageVersion
               }

            }
            interface Taglet {
                public inField(): boolean
                public inConstructor(): boolean
                public inMethod(): boolean
                public inOverview(): boolean
                public inPackage(): boolean
                public inType(): boolean
                public isInlineTag(): boolean
                public getName(): java.lang.String
                toString<T>(...args: any[]): any
            }

         }
         namespace javap {
            class TypeAnnotationWriter$NoteKind extends java.lang.Enum<com.sun.tools.javap.TypeAnnotationWriter$NoteKind> {
                public static VISIBLE: com.sun.tools.javap.TypeAnnotationWriter$NoteKind
                public static INVISIBLE: com.sun.tools.javap.TypeAnnotationWriter$NoteKind
                public static values(): com.sun.tools.javap.TypeAnnotationWriter$NoteKind[]
                valueOf<T>(...args: any[]): any
            }
            class TypeAnnotationWriter$Note {
                public kind: com.sun.tools.javap.TypeAnnotationWriter$NoteKind
                public anno: com.sun.tools.classfile.TypeAnnotation
                constructor(arg0: com.sun.tools.javap.TypeAnnotationWriter$NoteKind, arg1: com.sun.tools.classfile.TypeAnnotation)
            }
            class TypeAnnotationWriter extends com.sun.tools.javap.InstructionDetailWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.TypeAnnotationWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                public reset(arg0: com.sun.tools.classfile.Code_attribute): void
                writeDetails(arg0: com.sun.tools.classfile.Instruction): void
            }
            class InstructionDetailWriter$Kind extends java.lang.Enum<com.sun.tools.javap.InstructionDetailWriter$Kind> {
                public static LOCAL_VARS: com.sun.tools.javap.InstructionDetailWriter$Kind
                public static LOCAL_VAR_TYPES: com.sun.tools.javap.InstructionDetailWriter$Kind
                public static SOURCE: com.sun.tools.javap.InstructionDetailWriter$Kind
                public static STACKMAPS: com.sun.tools.javap.InstructionDetailWriter$Kind
                public static TRY_BLOCKS: com.sun.tools.javap.InstructionDetailWriter$Kind
                public static TYPE_ANNOS: com.sun.tools.javap.InstructionDetailWriter$Kind
                option: java.lang.String
                public static values(): com.sun.tools.javap.InstructionDetailWriter$Kind[]
                valueOf<T>(...args: any[]): any
            }
            abstract class InstructionDetailWriter extends com.sun.tools.javap.BasicWriter {
                constructor(arg0: com.sun.tools.javap.Context)
                writeDetails(arg0: com.sun.tools.classfile.Instruction): void
                flush(): void
            }
            class BasicWriter$LineWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.BasicWriter$LineWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                protected print(arg0: java.lang.String): void
                protected println(): void
                protected indent(arg0: int): void
                protected tab(): void
                static access$002(arg0: com.sun.tools.javap.BasicWriter$LineWriter, arg1: boolean): boolean
            }
            class BasicWriter {
                protected messages: com.sun.tools.javap.Messages
                protected constructor(arg0: com.sun.tools.javap.Context)
                print<T>(...args: any[]): any
                println<T>(...args: any[]): any
                protected indent(arg0: int): void
                protected tab(): void
                protected setPendingNewline(arg0: boolean): void
                report<T>(...args: any[]): any
                protected space(arg0: int): java.lang.String
            }
            class Context {
                map: java.util.Map<java.lang.Class<any>, java.lang.Object>
                public constructor()
                public get<T>(arg0: java.lang.Class<T>): T
                public put<T>(arg0: java.lang.Class<T>, arg1: T): T
            }
            class AnnotationWriter$element_value_Writer implements com.sun.tools.classfile.Annotation$element_value$Visitor<java.lang.Void, java.lang.Boolean> {
                this$0: com.sun.tools.javap.AnnotationWriter
                constructor(arg0: com.sun.tools.javap.AnnotationWriter)
                public write(arg0: com.sun.tools.classfile.Annotation$element_value, arg1: boolean): void
                visitPrimitive<T>(...args: any[]): any
                visitEnum<T>(...args: any[]): any
                visitClass<T>(...args: any[]): any
                visitAnnotation<T>(...args: any[]): any
                visitArray<T>(...args: any[]): any
            }
            class AnnotationWriter$1 {
                static $SwitchMap$com$sun$tools$classfile$TypeAnnotation$TargetType: int[]
            }
            class AnnotationWriter extends com.sun.tools.javap.BasicWriter {
                ev_writer: com.sun.tools.javap.AnnotationWriter$element_value_Writer
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.AnnotationWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                write<T>(...args: any[]): any
                static access$000(arg0: com.sun.tools.javap.AnnotationWriter, arg1: int, arg2: boolean): void
            }
            class ClassWriter$JavaTypePrinter implements com.sun.tools.classfile.Type$Visitor<java.lang.StringBuilder, java.lang.StringBuilder> {
                isInterface: boolean
                this$0: com.sun.tools.javap.ClassWriter
                constructor(arg0: com.sun.tools.javap.ClassWriter, arg1: boolean)
                print(arg0: com.sun.tools.classfile.Type): java.lang.String
                printTypeArgs(arg0: java.util.List<com.sun.tools.classfile.Type$TypeParamType>): java.lang.String
                visitSimpleType<T>(...args: any[]): any
                visitArrayType<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitClassSigType<T>(...args: any[]): any
                visitClassType<T>(...args: any[]): any
                visitTypeParamType<T>(...args: any[]): any
                visitWildcardType<T>(...args: any[]): any
            }
            class ClassWriter$1 {
                static $SwitchMap$com$sun$tools$classfile$Type$WildcardType$Kind: int[]
            }
            class ClassWriter extends com.sun.tools.javap.BasicWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.ClassWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                setDigest(arg0: java.lang.String, arg1: byte[]): void
                setFile(arg0: java.net.URI): void
                setFileSize(arg0: int): void
                setLastModified(arg0: long): void
                protected getClassFile(): com.sun.tools.classfile.ClassFile
                protected setClassFile(arg0: com.sun.tools.classfile.ClassFile): void
                protected getMethod(): com.sun.tools.classfile.Method
                protected setMethod(arg0: com.sun.tools.classfile.Method): void
                public write(arg0: com.sun.tools.classfile.ClassFile): void
                protected writeFields(): void
                protected writeField(arg0: com.sun.tools.classfile.Field): void
                protected writeMethods(): void
                protected writeMethod(arg0: com.sun.tools.classfile.Method): void
                writeModifiers(arg0: java.util.Collection<java.lang.String>): void
                writeList(arg0: java.lang.String, arg1: java.util.Collection<any>, arg2: java.lang.String): void
                writeListIfNotEmpty(arg0: java.lang.String, arg1: java.util.List<any>, arg2: java.lang.String): void
                getSignature(arg0: com.sun.tools.classfile.Attributes): com.sun.tools.classfile.Signature_attribute
                adjustVarargs(arg0: com.sun.tools.classfile.AccessFlags, arg1: java.lang.String): java.lang.String
                getJavaName<T>(...args: any[]): any
                getJavaSuperclassName(arg0: com.sun.tools.classfile.ClassFile): java.lang.String
                getJavaInterfaceName(arg0: com.sun.tools.classfile.ClassFile, arg1: int): java.lang.String
                getJavaFieldType(arg0: com.sun.tools.classfile.Descriptor): java.lang.String
                getJavaReturnType(arg0: com.sun.tools.classfile.Descriptor): java.lang.String
                getJavaParameterTypes(arg0: com.sun.tools.classfile.Descriptor, arg1: com.sun.tools.classfile.AccessFlags): java.lang.String
                getJavaException(arg0: com.sun.tools.classfile.Exceptions_attribute, arg1: int): java.lang.String
                getValue(arg0: com.sun.tools.classfile.Descriptor): java.lang.String
                getFieldName(arg0: com.sun.tools.classfile.Field): java.lang.String
                getName(arg0: com.sun.tools.classfile.Method): java.lang.String
                getSourceFile(arg0: com.sun.tools.classfile.SourceFile_attribute): java.lang.String
                getConstantValue(arg0: com.sun.tools.classfile.Descriptor, arg1: int): java.lang.String
                static access$000(arg0: com.sun.tools.javap.ClassWriter): com.sun.tools.javap.Options
            }
            interface Messages {
                getMessage<T>(...args: any[]): any
            }
            class ConstantWriter$1 implements com.sun.tools.classfile.ConstantPool$Visitor<java.lang.Integer, java.lang.Void> {
                this$0: com.sun.tools.javap.ConstantWriter
                constructor(arg0: com.sun.tools.javap.ConstantWriter)
                visitClass<T>(...args: any[]): any
                visitDouble<T>(...args: any[]): any
                visitFieldref<T>(...args: any[]): any
                visitFloat<T>(...args: any[]): any
                visitInteger<T>(...args: any[]): any
                visitInterfaceMethodref<T>(...args: any[]): any
                visitInvokeDynamic<T>(...args: any[]): any
                visitLong<T>(...args: any[]): any
                visitNameAndType<T>(...args: any[]): any
                visitMethodref<T>(...args: any[]): any
                visitMethodHandle<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitString<T>(...args: any[]): any
                visitUtf8<T>(...args: any[]): any
            }
            class ConstantWriter$StringValueVisitor implements com.sun.tools.classfile.ConstantPool$Visitor<java.lang.String, java.lang.Void> {
                this$0: com.sun.tools.javap.ConstantWriter
                public visit(arg0: com.sun.tools.classfile.ConstantPool$CPInfo): java.lang.String
                visitClass<T>(...args: any[]): any
                getCheckedName<T>(...args: any[]): any
                visitDouble<T>(...args: any[]): any
                visitFieldref<T>(...args: any[]): any
                visitFloat<T>(...args: any[]): any
                visitInteger<T>(...args: any[]): any
                visitInterfaceMethodref<T>(...args: any[]): any
                visitInvokeDynamic<T>(...args: any[]): any
                visitLong<T>(...args: any[]): any
                visitNameAndType<T>(...args: any[]): any
                getType(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_NameAndType_info): java.lang.String
                visitMethodHandle<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitMethodref<T>(...args: any[]): any
                visitString<T>(...args: any[]): any
                visitUtf8<T>(...args: any[]): any
                visitRef(arg0: com.sun.tools.classfile.ConstantPool$CPRefInfo, arg1: java.lang.Void): java.lang.String
                getCheckedClassName(arg0: com.sun.tools.classfile.ConstantPool$CPRefInfo): java.lang.String
                constructor(arg0: com.sun.tools.javap.ConstantWriter, arg1: com.sun.tools.javap.ConstantWriter$1)
            }
            class ConstantWriter extends com.sun.tools.javap.BasicWriter {
                stringValueVisitor: com.sun.tools.javap.ConstantWriter$StringValueVisitor
                public static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.ConstantWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                writeConstantPool<T>(...args: any[]): any
                protected write(arg0: int): void
                cpTagName(arg0: com.sun.tools.classfile.ConstantPool$CPInfo): java.lang.String
                tagName(arg0: int): java.lang.String
                stringValue<T>(...args: any[]): any
                static access$100(arg0: java.lang.String): java.lang.String
                static access$200(arg0: com.sun.tools.javap.ConstantWriter): com.sun.tools.javap.ClassWriter
            }
            class Options {
                public help: boolean
                public verbose: boolean
                public version: boolean
                public fullVersion: boolean
                public showFlags: boolean
                public showLineAndLocalVariableTables: boolean
                public showAccess: int
                public accessOptions: java.util.Set<java.lang.String>
                public details: java.util.Set<com.sun.tools.javap.InstructionDetailWriter$Kind>
                public showDisassembled: boolean
                public showDescriptors: boolean
                public showAllAttrs: boolean
                public showConstants: boolean
                public sysInfo: boolean
                public showInnerClasses: boolean
                public indentWidth: int
                public tabColumn: int
                public static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.Options
                protected constructor(arg0: com.sun.tools.javap.Context)
                public checkAccess(arg0: com.sun.tools.classfile.AccessFlags): boolean
            }
            class AttributeWriter$StackMapTableWriter implements com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<java.lang.Void, java.lang.Void> {
                this$0: com.sun.tools.javap.AttributeWriter
                constructor(arg0: com.sun.tools.javap.AttributeWriter)
                public write(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame): void
                visit_same_frame<T>(...args: any[]): any
                visit_same_locals_1_stack_item_frame<T>(...args: any[]): any
                visit_same_locals_1_stack_item_frame_extended<T>(...args: any[]): any
                visit_chop_frame<T>(...args: any[]): any
                visit_same_frame_extended<T>(...args: any[]): any
                visit_append_frame<T>(...args: any[]): any
                visit_full_frame<T>(...args: any[]): any
                printHeader(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame, arg1: java.lang.String): void
                printMap(arg0: java.lang.String, arg1: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]): void
                mapTypeName(arg0: int): java.lang.String
            }
            class AttributeWriter extends com.sun.tools.javap.BasicWriter implements com.sun.tools.classfile.Attribute$Visitor<java.lang.Void, java.lang.Void> {
                public static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.AttributeWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                write<T>(...args: any[]): any
                visitDefault<T>(...args: any[]): any
                visitAnnotationDefault<T>(...args: any[]): any
                visitBootstrapMethods<T>(...args: any[]): any
                visitCharacterRangeTable<T>(...args: any[]): any
                visitCode<T>(...args: any[]): any
                visitCompilationID<T>(...args: any[]): any
                visitConstantValue<T>(...args: any[]): any
                visitDeprecated<T>(...args: any[]): any
                visitEnclosingMethod<T>(...args: any[]): any
                visitExceptions<T>(...args: any[]): any
                visitInnerClasses<T>(...args: any[]): any
                getInnerName(arg0: com.sun.tools.classfile.ConstantPool, arg1: com.sun.tools.classfile.InnerClasses_attribute$Info): java.lang.String
                visitLineNumberTable<T>(...args: any[]): any
                visitLocalVariableTable<T>(...args: any[]): any
                visitLocalVariableTypeTable<T>(...args: any[]): any
                visitMethodParameters<T>(...args: any[]): any
                visitRuntimeVisibleAnnotations<T>(...args: any[]): any
                visitRuntimeInvisibleAnnotations<T>(...args: any[]): any
                visitRuntimeVisibleTypeAnnotations<T>(...args: any[]): any
                visitRuntimeInvisibleTypeAnnotations<T>(...args: any[]): any
                visitRuntimeVisibleParameterAnnotations<T>(...args: any[]): any
                visitRuntimeInvisibleParameterAnnotations<T>(...args: any[]): any
                visitSignature<T>(...args: any[]): any
                getSignature(arg0: com.sun.tools.classfile.Signature_attribute): java.lang.String
                visitSourceDebugExtension<T>(...args: any[]): any
                visitSourceFile<T>(...args: any[]): any
                visitSourceID<T>(...args: any[]): any
                visitStackMap<T>(...args: any[]): any
                visitStackMapTable<T>(...args: any[]): any
                visitSynthetic<T>(...args: any[]): any
                static getJavaName(arg0: java.lang.String): java.lang.String
                toHex<T>(...args: any[]): any
                static access$000(arg0: com.sun.tools.javap.AttributeWriter): com.sun.tools.javap.ConstantWriter
            }
            class CodeWriter$1 implements com.sun.tools.classfile.Instruction$KindVisitor<java.lang.Void, java.lang.Integer> {
                this$0: com.sun.tools.javap.CodeWriter
                constructor(arg0: com.sun.tools.javap.CodeWriter)
                visitNoOperands<T>(...args: any[]): any
                visitArrayType<T>(...args: any[]): any
                visitBranch<T>(...args: any[]): any
                visitConstantPoolRef<T>(...args: any[]): any
                visitConstantPoolRefAndValue<T>(...args: any[]): any
                visitLocal<T>(...args: any[]): any
                visitLocalAndValue<T>(...args: any[]): any
                visitLookupSwitch<T>(...args: any[]): any
                visitTableSwitch<T>(...args: any[]): any
                visitValue<T>(...args: any[]): any
                visitUnknown<T>(...args: any[]): any
            }
            class CodeWriter extends com.sun.tools.javap.BasicWriter {
                instructionPrinter: com.sun.tools.classfile.Instruction$KindVisitor<java.lang.Void, java.lang.Integer>
                public static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.CodeWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                write(arg0: com.sun.tools.classfile.Code_attribute, arg1: com.sun.tools.classfile.ConstantPool): void
                public writeVerboseHeader(arg0: com.sun.tools.classfile.Code_attribute, arg1: com.sun.tools.classfile.ConstantPool): void
                public writeInstrs(arg0: com.sun.tools.classfile.Code_attribute): void
                public writeInstr(arg0: com.sun.tools.classfile.Instruction): void
                public writeExceptionTable(arg0: com.sun.tools.classfile.Code_attribute): void
                static access$000(arg0: com.sun.tools.javap.CodeWriter, arg1: int): void
            }
            class LocalVariableTableWriter$NoteKind$1 extends com.sun.tools.javap.LocalVariableTableWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.LocalVariableTable_attribute$Entry, arg1: int): boolean
            }
            class LocalVariableTableWriter$NoteKind$2 extends com.sun.tools.javap.LocalVariableTableWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.LocalVariableTable_attribute$Entry, arg1: int): boolean
            }
            abstract class LocalVariableTableWriter$NoteKind extends java.lang.Enum<com.sun.tools.javap.LocalVariableTableWriter$NoteKind> {
                public static START: com.sun.tools.javap.LocalVariableTableWriter$NoteKind
                public static END: com.sun.tools.javap.LocalVariableTableWriter$NoteKind
                public text: java.lang.String
                public static values(): com.sun.tools.javap.LocalVariableTableWriter$NoteKind[]
                valueOf<T>(...args: any[]): any
                public match(arg0: com.sun.tools.classfile.LocalVariableTable_attribute$Entry, arg1: int): boolean
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: com.sun.tools.javap.LocalVariableTableWriter$1)
            }
            class LocalVariableTableWriter$1 {
            }
            class LocalVariableTableWriter extends com.sun.tools.javap.InstructionDetailWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.LocalVariableTableWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                public reset(arg0: com.sun.tools.classfile.Code_attribute): void
                public writeDetails(arg0: com.sun.tools.classfile.Instruction): void
                public flush(): void
                public writeLocalVariables(arg0: int, arg1: com.sun.tools.javap.LocalVariableTableWriter$NoteKind): void
            }
            class LocalVariableTypeTableWriter$NoteKind$1 extends com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.LocalVariableTypeTable_attribute$Entry, arg1: int): boolean
            }
            class LocalVariableTypeTableWriter$NoteKind$2 extends com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.LocalVariableTypeTable_attribute$Entry, arg1: int): boolean
            }
            abstract class LocalVariableTypeTableWriter$NoteKind extends java.lang.Enum<com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind> {
                public static START: com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind
                public static END: com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind
                public text: java.lang.String
                public static values(): com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind[]
                valueOf<T>(...args: any[]): any
                public match(arg0: com.sun.tools.classfile.LocalVariableTypeTable_attribute$Entry, arg1: int): boolean
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: com.sun.tools.javap.LocalVariableTypeTableWriter$1)
            }
            class LocalVariableTypeTableWriter$1 {
            }
            class LocalVariableTypeTableWriter extends com.sun.tools.javap.InstructionDetailWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.LocalVariableTypeTableWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                public reset(arg0: com.sun.tools.classfile.Code_attribute): void
                public writeDetails(arg0: com.sun.tools.classfile.Instruction): void
                public flush(): void
                public writeLocalVariables(arg0: int, arg1: com.sun.tools.javap.LocalVariableTypeTableWriter$NoteKind): void
            }
            class SourceWriter extends com.sun.tools.javap.InstructionDetailWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.SourceWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                setFileManager(arg0: javax.tools.JavaFileManager): void
                public reset(arg0: com.sun.tools.classfile.ClassFile, arg1: com.sun.tools.classfile.Code_attribute): void
                public writeDetails(arg0: com.sun.tools.classfile.Instruction): void
                public hasSource(): boolean
            }
            class StackMapWriter$StackMapBuilder implements com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<java.lang.Integer, java.lang.Integer> {
                static $assertionsDisabled: boolean
                this$0: com.sun.tools.javap.StackMapWriter
                constructor(arg0: com.sun.tools.javap.StackMapWriter)
                visit_same_frame<T>(...args: any[]): any
                visit_same_locals_1_stack_item_frame<T>(...args: any[]): any
                visit_same_locals_1_stack_item_frame_extended<T>(...args: any[]): any
                visit_chop_frame<T>(...args: any[]): any
                visit_same_frame_extended<T>(...args: any[]): any
                visit_append_frame<T>(...args: any[]): any
                visit_full_frame<T>(...args: any[]): any
            }
            class StackMapWriter$StackMap {
                constructor(arg0: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[], arg1: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[])
                static access$000(arg0: com.sun.tools.javap.StackMapWriter$StackMap): com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
                static access$100(arg0: com.sun.tools.javap.StackMapWriter$StackMap): com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
            }
            class StackMapWriter$CustomVerificationTypeInfo extends com.sun.tools.classfile.StackMapTable_attribute$verification_type_info {
                public constructor(arg0: java.lang.String)
                static access$200(arg0: com.sun.tools.javap.StackMapWriter$CustomVerificationTypeInfo): java.lang.String
            }
            class StackMapWriter extends com.sun.tools.javap.InstructionDetailWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.StackMapWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                public reset(arg0: com.sun.tools.classfile.Code_attribute): void
                setStackMap(arg0: com.sun.tools.classfile.StackMapTable_attribute): void
                public writeInitialDetails(): void
                public writeDetails(arg0: com.sun.tools.classfile.Instruction): void
                print<T>(...args: any[]): any
                static access$300(arg0: com.sun.tools.javap.StackMapWriter): java.util.Map
                static access$400(arg0: com.sun.tools.javap.StackMapWriter): com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
            }
            class TryBlockWriter$NoteKind$1 extends com.sun.tools.javap.TryBlockWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.Code_attribute$Exception_data, arg1: int): boolean
            }
            class TryBlockWriter$NoteKind$2 extends com.sun.tools.javap.TryBlockWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.Code_attribute$Exception_data, arg1: int): boolean
            }
            class TryBlockWriter$NoteKind$3 extends com.sun.tools.javap.TryBlockWriter$NoteKind {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public match(arg0: com.sun.tools.classfile.Code_attribute$Exception_data, arg1: int): boolean
            }
            abstract class TryBlockWriter$NoteKind extends java.lang.Enum<com.sun.tools.javap.TryBlockWriter$NoteKind> {
                public static START: com.sun.tools.javap.TryBlockWriter$NoteKind
                public static END: com.sun.tools.javap.TryBlockWriter$NoteKind
                public static HANDLER: com.sun.tools.javap.TryBlockWriter$NoteKind
                public text: java.lang.String
                public static values(): com.sun.tools.javap.TryBlockWriter$NoteKind[]
                valueOf<T>(...args: any[]): any
                public match(arg0: com.sun.tools.classfile.Code_attribute$Exception_data, arg1: int): boolean
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: com.sun.tools.javap.TryBlockWriter$1)
            }
            class TryBlockWriter$1 {
            }
            class TryBlockWriter extends com.sun.tools.javap.InstructionDetailWriter {
                static instance(arg0: com.sun.tools.javap.Context): com.sun.tools.javap.TryBlockWriter
                protected constructor(arg0: com.sun.tools.javap.Context)
                public reset(arg0: com.sun.tools.classfile.Code_attribute): void
                public writeDetails(arg0: com.sun.tools.classfile.Instruction): void
                public writeTrys(arg0: com.sun.tools.classfile.Instruction, arg1: com.sun.tools.javap.TryBlockWriter$NoteKind): void
            }
            class Main {
                public constructor()
                public static main(arg0: java.lang.String[]): void
                public static run(arg0: java.lang.String[], arg1: java.io.PrintWriter): int
            }
            class JavapTask$BadArgs extends java.lang.Exception {
                static serialVersionUID: long
                key: java.lang.String
                args: java.lang.Object[]
                showUsage<T>(...args: any[]): any
                this$0: com.sun.tools.javap.JavapTask
                constructor(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, ...arg2: java.lang.Object[])
            }
            abstract class JavapTask$Option {
                hasArg: boolean
                aliases: java.lang.String[]
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                matches(arg0: java.lang.String): boolean
                ignoreRest(): boolean
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$1 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$2 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$3 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$4 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$5 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$6 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$7 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$8 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$9 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$10 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$11 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$12 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$13 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$14 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                matches(arg0: java.lang.String): boolean
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
                handleArg(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String): boolean
            }
            class JavapTask$15 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$16 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$17 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                matches(arg0: java.lang.String): boolean
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$18 extends com.sun.tools.javap.JavapTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                matches(arg0: java.lang.String): boolean
                process(arg0: com.sun.tools.javap.JavapTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavapTask$19 implements javax.tools.DiagnosticListener<javax.tools.JavaFileObject> {
                val$pw: java.io.PrintWriter
                this$0: com.sun.tools.javap.JavapTask
                constructor(arg0: com.sun.tools.javap.JavapTask, arg1: java.io.PrintWriter)
                public report(arg0: javax.tools.Diagnostic<javax.tools.JavaFileObject>): void
            }
            class JavapTask$20 implements javax.tools.JavaFileObject {
                val$uri: java.net.URI
                val$url: java.net.URL
                val$conn: java.net.URLConnection
                this$0: com.sun.tools.javap.JavapTask
                constructor(arg0: com.sun.tools.javap.JavapTask, arg1: java.net.URI, arg2: java.net.URL, arg3: java.net.URLConnection)
                public getKind(): javax.tools.JavaFileObject$Kind
                public isNameCompatible(arg0: java.lang.String, arg1: javax.tools.JavaFileObject$Kind): boolean
                public getNestingKind(): javax.lang.model.element.NestingKind
                public getAccessLevel(): javax.lang.model.element.Modifier
                public toUri(): java.net.URI
                public getName(): java.lang.String
                public openInputStream(): java.io.InputStream
                public openOutputStream(): java.io.OutputStream
                public openReader(arg0: boolean): java.io.Reader
                public getCharContent(arg0: boolean): java.lang.CharSequence
                public openWriter(): java.io.Writer
                public getLastModified(): long
                public delete(): boolean
            }
            class JavapTask$ClassFileInfo {
                public fo: javax.tools.JavaFileObject
                public cf: com.sun.tools.classfile.ClassFile
                public digest: byte[]
                public size: int
                constructor(arg0: javax.tools.JavaFileObject, arg1: com.sun.tools.classfile.ClassFile, arg2: byte[], arg3: int)
            }
            class JavapTask$21 implements javax.tools.Diagnostic<javax.tools.JavaFileObject> {
                val$kind: javax.tools.Diagnostic$Kind
                val$key: java.lang.String
                val$args: java.lang.Object[]
                this$0: com.sun.tools.javap.JavapTask
                constructor(arg0: com.sun.tools.javap.JavapTask, arg1: javax.tools.Diagnostic$Kind, arg2: java.lang.String, arg3: java.lang.Object[])
                public getKind(): javax.tools.Diagnostic$Kind
                getSource<T>(...args: any[]): any
                public getPosition(): long
                public getStartPosition(): long
                public getEndPosition(): long
                public getLineNumber(): long
                public getColumnNumber(): long
                public getCode(): java.lang.String
                public getMessage(arg0: java.util.Locale): java.lang.String
                toString<T>(...args: any[]): any
            }
            class JavapTask$SizeInputStream extends java.io.FilterInputStream {
                constructor(arg0: java.io.InputStream)
                size(): int
                read<T>(...args: any[]): any
            }
            class JavapTask$22 {
                static $SwitchMap$javax$tools$Diagnostic$Kind: int[]
            }
            class JavapTask implements com.sun.tools.javap.DisassemblerTool$DisassemblerTask , com.sun.tools.javap.Messages {
                static recognizedOptions: com.sun.tools.javap.JavapTask$Option[]
                static EXIT_OK: int
                static EXIT_ERROR: int
                static EXIT_CMDERR: int
                static EXIT_SYSERR: int
                static EXIT_ABNORMAL: int
                protected context: com.sun.tools.javap.Context
                fileManager: javax.tools.JavaFileManager
                defaultFileManager: javax.tools.JavaFileManager
                log: java.io.PrintWriter
                diagnosticListener: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>
                classes: java.util.List<java.lang.String>
                options: com.sun.tools.javap.Options
                task_locale: java.util.Locale
                bundles: java.util.Map<java.util.Locale, java.util.ResourceBundle>
                protected attributeFactory: com.sun.tools.classfile.Attribute$Factory
                constructor(...args: any[])
                public setLocale(arg0: java.util.Locale): void
                setLog<T>(...args: any[]): any
                setDiagnosticListener<T>(...args: any[]): any
                run<T>(...args: any[]): any
                public handleOptions(arg0: java.lang.String[]): void
                call<T>(...args: any[]): any
                protected writeClass(arg0: com.sun.tools.javap.ClassWriter, arg1: java.lang.String): int
                protected open(arg0: java.lang.String): javax.tools.JavaFileObject
                public read(arg0: javax.tools.JavaFileObject): com.sun.tools.javap.JavapTask$ClassFileInfo
                write<T>(...args: any[]): any
                protected setClassFile(arg0: com.sun.tools.classfile.ClassFile): void
                protected setMethod(arg0: com.sun.tools.classfile.Method): void
                getMessage<T>(...args: any[]): any
            }
            interface DisassemblerTool$DisassemblerTask extends java.util.concurrent.Callable<java.lang.Boolean> {
                public setLocale(arg0: java.util.Locale): void
                call<T>(...args: any[]): any
            }
            interface DisassemblerTool extends javax.tools.Tool , javax.tools.OptionChecker {
                public getTask(arg0: java.io.Writer, arg1: javax.tools.JavaFileManager, arg2: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg3: java.lang.Iterable<java.lang.String>, arg4: java.lang.Iterable<java.lang.String>): com.sun.tools.javap.DisassemblerTool$DisassemblerTask
                public getStandardFileManager(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.util.Locale, arg2: java.nio.charset.Charset): javax.tools.StandardJavaFileManager
            }
            class JavapFileManager extends com.sun.tools.javac.file.JavacFileManager {
                public static create(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.io.PrintWriter): com.sun.tools.javap.JavapFileManager
            }
            class InternalError extends java.lang.Error {
                public args: java.lang.Object[]
                constructor(...args: any[])
            }
            namespace resources {
               class version extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javap extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javap_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javap_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }

         }
         namespace classfile {
            class Annotation$InvalidAnnotation extends com.sun.tools.classfile.AttributeException {
                constructor(arg0: java.lang.String)
            }
            interface Annotation$element_value$Visitor<R, P> {
                public visitPrimitive(arg0: com.sun.tools.classfile.Annotation$Primitive_element_value, arg1: P): R
                public visitEnum(arg0: com.sun.tools.classfile.Annotation$Enum_element_value, arg1: P): R
                public visitClass(arg0: com.sun.tools.classfile.Annotation$Class_element_value, arg1: P): R
                public visitAnnotation(arg0: com.sun.tools.classfile.Annotation$Annotation_element_value, arg1: P): R
                public visitArray(arg0: com.sun.tools.classfile.Annotation$Array_element_value, arg1: P): R
            }
            abstract class Annotation$element_value {
                public tag: int
                public static read(arg0: com.sun.tools.classfile.ClassReader): com.sun.tools.classfile.Annotation$element_value
                protected constructor(arg0: int)
                public length(): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Annotation$element_value$Visitor<R, P>, arg1: P): R
            }
            class Annotation$Primitive_element_value extends com.sun.tools.classfile.Annotation$element_value {
                public const_value_index: int
                constructor(arg0: com.sun.tools.classfile.ClassReader, arg1: int)
                public length(): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Annotation$element_value$Visitor<R, P>, arg1: P): R
            }
            class Annotation$Enum_element_value extends com.sun.tools.classfile.Annotation$element_value {
                public type_name_index: int
                public const_name_index: int
                constructor(arg0: com.sun.tools.classfile.ClassReader, arg1: int)
                public length(): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Annotation$element_value$Visitor<R, P>, arg1: P): R
            }
            class Annotation$Class_element_value extends com.sun.tools.classfile.Annotation$element_value {
                public class_info_index: int
                constructor(arg0: com.sun.tools.classfile.ClassReader, arg1: int)
                public length(): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Annotation$element_value$Visitor<R, P>, arg1: P): R
            }
            class Annotation$Annotation_element_value extends com.sun.tools.classfile.Annotation$element_value {
                public annotation_value: com.sun.tools.classfile.Annotation
                constructor(arg0: com.sun.tools.classfile.ClassReader, arg1: int)
                public length(): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Annotation$element_value$Visitor<R, P>, arg1: P): R
            }
            class Annotation$Array_element_value extends com.sun.tools.classfile.Annotation$element_value {
                public num_values: int
                public values: com.sun.tools.classfile.Annotation$element_value[]
                constructor(arg0: com.sun.tools.classfile.ClassReader, arg1: int)
                public length(): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Annotation$element_value$Visitor<R, P>, arg1: P): R
            }
            class Annotation$element_value_pair {
                public element_name_index: int
                public value: com.sun.tools.classfile.Annotation$element_value
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public length(): int
            }
            class Annotation {
                public type_index: int
                public num_element_value_pairs: int
                public element_value_pairs: com.sun.tools.classfile.Annotation$element_value_pair[]
                constructor(...args: any[])
                public length(): int
            }
            class ConstantPool$InvalidIndex extends com.sun.tools.classfile.ConstantPoolException {
                constructor(arg0: int)
                public getMessage(): java.lang.String
            }
            class ConstantPool$UnexpectedEntry extends com.sun.tools.classfile.ConstantPoolException {
                public expected_tag: int
                public found_tag: int
                constructor(arg0: int, arg1: int, arg2: int)
                public getMessage(): java.lang.String
            }
            class ConstantPool$InvalidEntry extends com.sun.tools.classfile.ConstantPoolException {
                public tag: int
                constructor(arg0: int, arg1: int)
                public getMessage(): java.lang.String
            }
            class ConstantPool$EntryNotFound extends com.sun.tools.classfile.ConstantPoolException {
                public value: java.lang.Object
                constructor(arg0: java.lang.Object)
                public getMessage(): java.lang.String
            }
            class ConstantPool$RefKind extends java.lang.Enum<com.sun.tools.classfile.ConstantPool$RefKind> {
                public static REF_getField: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_getStatic: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_putField: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_putStatic: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_invokeVirtual: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_invokeStatic: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_invokeSpecial: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_newInvokeSpecial: com.sun.tools.classfile.ConstantPool$RefKind
                public static REF_invokeInterface: com.sun.tools.classfile.ConstantPool$RefKind
                public tag: int
                public name: java.lang.String
                public static values(): com.sun.tools.classfile.ConstantPool$RefKind[]
                valueOf<T>(...args: any[]): any
                static getRefkind(arg0: int): com.sun.tools.classfile.ConstantPool$RefKind
            }
            class ConstantPool$1$1 implements java.util.Iterator<com.sun.tools.classfile.ConstantPool$CPInfo> {
                this$1: com.sun.tools.classfile.ConstantPool$1
                constructor(arg0: com.sun.tools.classfile.ConstantPool$1)
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class ConstantPool$1 implements java.lang.Iterable<com.sun.tools.classfile.ConstantPool$CPInfo> {
                this$0: com.sun.tools.classfile.ConstantPool
                constructor(arg0: com.sun.tools.classfile.ConstantPool)
                public iterator(): java.util.Iterator<com.sun.tools.classfile.ConstantPool$CPInfo>
            }
            interface ConstantPool$Visitor<R, P> {
                public visitClass(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Class_info, arg1: P): R
                public visitDouble(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Double_info, arg1: P): R
                public visitFieldref(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Fieldref_info, arg1: P): R
                public visitFloat(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Float_info, arg1: P): R
                public visitInteger(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Integer_info, arg1: P): R
                public visitInterfaceMethodref(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_InterfaceMethodref_info, arg1: P): R
                public visitInvokeDynamic(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_InvokeDynamic_info, arg1: P): R
                public visitLong(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Long_info, arg1: P): R
                public visitNameAndType(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_NameAndType_info, arg1: P): R
                public visitMethodref(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Methodref_info, arg1: P): R
                public visitMethodHandle(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_MethodHandle_info, arg1: P): R
                public visitMethodType(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_MethodType_info, arg1: P): R
                public visitString(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_String_info, arg1: P): R
                public visitUtf8(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Utf8_info, arg1: P): R
            }
            abstract class ConstantPool$CPInfo {
                protected cp: com.sun.tools.classfile.ConstantPool
                constructor(...args: any[])
                public getTag(): int
                public size(): int
                public byteLength(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            abstract class ConstantPool$CPRefInfo extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public tag: int
                public class_index: int
                public name_and_type_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                public getClassInfo(): com.sun.tools.classfile.ConstantPool$CONSTANT_Class_info
                public getClassName(): java.lang.String
                public getNameAndTypeInfo(): com.sun.tools.classfile.ConstantPool$CONSTANT_NameAndType_info
            }
            class ConstantPool$CONSTANT_Class_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public name_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                public getName(): java.lang.String
                public getBaseName(): java.lang.String
                public getDimensionCount(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_Double_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public value: double
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                public size(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_Fieldref_info extends com.sun.tools.classfile.ConstantPool$CPRefInfo {
                constructor(...args: any[])
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_Float_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public value: float
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_Integer_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public value: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_InterfaceMethodref_info extends com.sun.tools.classfile.ConstantPool$CPRefInfo {
                constructor(...args: any[])
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_InvokeDynamic_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public bootstrap_method_attr_index: int
                public name_and_type_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
                public getNameAndTypeInfo(): com.sun.tools.classfile.ConstantPool$CONSTANT_NameAndType_info
            }
            class ConstantPool$CONSTANT_Long_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public value: long
                constructor(...args: any[])
                public getTag(): int
                public size(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_MethodHandle_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public reference_kind: com.sun.tools.classfile.ConstantPool$RefKind
                public reference_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
                public getCPRefInfo(): com.sun.tools.classfile.ConstantPool$CPRefInfo
            }
            class ConstantPool$CONSTANT_MethodType_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public descriptor_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
                public getType(): java.lang.String
            }
            class ConstantPool$CONSTANT_Methodref_info extends com.sun.tools.classfile.ConstantPool$CPRefInfo {
                constructor(...args: any[])
                toString<T>(...args: any[]): any
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool$CONSTANT_NameAndType_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public name_index: int
                public type_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                public getName(): java.lang.String
                public getType(): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class ConstantPool$CONSTANT_String_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public string_index: int
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                public getString(): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class ConstantPool$CONSTANT_Utf8_info$1SizeOutputStream extends java.io.OutputStream {
                size: int
                this$0: com.sun.tools.classfile.ConstantPool$CONSTANT_Utf8_info
                constructor(arg0: com.sun.tools.classfile.ConstantPool$CONSTANT_Utf8_info)
                public write(arg0: int): void
            }
            class ConstantPool$CONSTANT_Utf8_info extends com.sun.tools.classfile.ConstantPool$CPInfo {
                public value: java.lang.String
                constructor(...args: any[])
                public getTag(): int
                public byteLength(): int
                toString<T>(...args: any[]): any
                static isPrintableAscii(arg0: java.lang.String): boolean
                public accept<R, D>(arg0: com.sun.tools.classfile.ConstantPool$Visitor<R, D>, arg1: D): R
            }
            class ConstantPool {
                public static CONSTANT_Utf8: int
                public static CONSTANT_Integer: int
                public static CONSTANT_Float: int
                public static CONSTANT_Long: int
                public static CONSTANT_Double: int
                public static CONSTANT_Class: int
                public static CONSTANT_String: int
                public static CONSTANT_Fieldref: int
                public static CONSTANT_Methodref: int
                public static CONSTANT_InterfaceMethodref: int
                public static CONSTANT_NameAndType: int
                public static CONSTANT_MethodHandle: int
                public static CONSTANT_MethodType: int
                public static CONSTANT_InvokeDynamic: int
                constructor(...args: any[])
                public size(): int
                public byteLength(): int
                public get(arg0: int): com.sun.tools.classfile.ConstantPool$CPInfo
                public getUTF8Info(arg0: int): com.sun.tools.classfile.ConstantPool$CONSTANT_Utf8_info
                public getClassInfo(arg0: int): com.sun.tools.classfile.ConstantPool$CONSTANT_Class_info
                public getNameAndTypeInfo(arg0: int): com.sun.tools.classfile.ConstantPool$CONSTANT_NameAndType_info
                public getUTF8Value(arg0: int): java.lang.String
                public getUTF8Index(arg0: java.lang.String): int
                public entries(): java.lang.Iterable<com.sun.tools.classfile.ConstantPool$CPInfo>
                static access$000(arg0: com.sun.tools.classfile.ConstantPool): com.sun.tools.classfile.ConstantPool$CPInfo[]
                static access$100(arg0: com.sun.tools.classfile.ConstantPool, arg1: int, arg2: int): com.sun.tools.classfile.ConstantPool$CPInfo
            }
            class ClassReader {
                constructor(arg0: com.sun.tools.classfile.ClassFile, arg1: java.io.InputStream, arg2: com.sun.tools.classfile.Attribute$Factory)
                getClassFile(): com.sun.tools.classfile.ClassFile
                getConstantPool(): com.sun.tools.classfile.ConstantPool
                public readAttribute(): com.sun.tools.classfile.Attribute
                public readFully(arg0: byte[]): void
                public readUnsignedByte(): int
                public readUnsignedShort(): int
                public readInt(): int
                public readLong(): long
                public readFloat(): float
                public readDouble(): double
                public readUTF(): java.lang.String
            }
            class AttributeException extends java.lang.Exception {
                constructor(...args: any[])
            }
            class ConstantPoolException extends java.lang.Exception {
                public index: int
                constructor(arg0: int)
            }
            class AccessFlags$Kind extends java.lang.Enum<com.sun.tools.classfile.AccessFlags$Kind> {
                public static Class: com.sun.tools.classfile.AccessFlags$Kind
                public static InnerClass: com.sun.tools.classfile.AccessFlags$Kind
                public static Field: com.sun.tools.classfile.AccessFlags$Kind
                public static Method: com.sun.tools.classfile.AccessFlags$Kind
                public static values(): com.sun.tools.classfile.AccessFlags$Kind[]
                valueOf<T>(...args: any[]): any
            }
            class AccessFlags {
                public static ACC_PUBLIC: int
                public static ACC_PRIVATE: int
                public static ACC_PROTECTED: int
                public static ACC_STATIC: int
                public static ACC_FINAL: int
                public static ACC_SUPER: int
                public static ACC_SYNCHRONIZED: int
                public static ACC_VOLATILE: int
                public static ACC_BRIDGE: int
                public static ACC_TRANSIENT: int
                public static ACC_VARARGS: int
                public static ACC_NATIVE: int
                public static ACC_INTERFACE: int
                public static ACC_ABSTRACT: int
                public static ACC_STRICT: int
                public static ACC_SYNTHETIC: int
                public static ACC_ANNOTATION: int
                public static ACC_ENUM: int
                public static ACC_MANDATED: int
                public flags: int
                constructor(...args: any[])
                public ignore(arg0: int): com.sun.tools.classfile.AccessFlags
                public is(arg0: int): boolean
                public byteLength(): int
                public getClassModifiers(): java.util.Set<java.lang.String>
                public getClassFlags(): java.util.Set<java.lang.String>
                public getInnerClassModifiers(): java.util.Set<java.lang.String>
                public getInnerClassFlags(): java.util.Set<java.lang.String>
                public getFieldModifiers(): java.util.Set<java.lang.String>
                public getFieldFlags(): java.util.Set<java.lang.String>
                public getMethodModifiers(): java.util.Set<java.lang.String>
                public getMethodFlags(): java.util.Set<java.lang.String>
            }
            class ClassFile {
                public magic: int
                public minor_version: int
                public major_version: int
                public constant_pool: com.sun.tools.classfile.ConstantPool
                public access_flags: com.sun.tools.classfile.AccessFlags
                public this_class: int
                public super_class: int
                public interfaces: int[]
                public fields: com.sun.tools.classfile.Field[]
                public methods: com.sun.tools.classfile.Method[]
                public attributes: com.sun.tools.classfile.Attributes
                read<T>(...args: any[]): any
                constructor(...args: any[])
                public getName(): java.lang.String
                public getSuperclassName(): java.lang.String
                public getInterfaceName(arg0: int): java.lang.String
                public getAttribute(arg0: java.lang.String): com.sun.tools.classfile.Attribute
                public isClass(): boolean
                public isInterface(): boolean
                public byteLength(): int
            }
            class Attribute$Factory {
                public constructor()
                public createAttribute(arg0: com.sun.tools.classfile.ClassReader, arg1: int, arg2: byte[]): com.sun.tools.classfile.Attribute
                protected init(): void
            }
            interface Attribute$Visitor<R, P> {
                public visitBootstrapMethods(arg0: com.sun.tools.classfile.BootstrapMethods_attribute, arg1: P): R
                public visitDefault(arg0: com.sun.tools.classfile.DefaultAttribute, arg1: P): R
                public visitAnnotationDefault(arg0: com.sun.tools.classfile.AnnotationDefault_attribute, arg1: P): R
                public visitCharacterRangeTable(arg0: com.sun.tools.classfile.CharacterRangeTable_attribute, arg1: P): R
                public visitCode(arg0: com.sun.tools.classfile.Code_attribute, arg1: P): R
                public visitCompilationID(arg0: com.sun.tools.classfile.CompilationID_attribute, arg1: P): R
                public visitConstantValue(arg0: com.sun.tools.classfile.ConstantValue_attribute, arg1: P): R
                public visitDeprecated(arg0: com.sun.tools.classfile.Deprecated_attribute, arg1: P): R
                public visitEnclosingMethod(arg0: com.sun.tools.classfile.EnclosingMethod_attribute, arg1: P): R
                public visitExceptions(arg0: com.sun.tools.classfile.Exceptions_attribute, arg1: P): R
                public visitInnerClasses(arg0: com.sun.tools.classfile.InnerClasses_attribute, arg1: P): R
                public visitLineNumberTable(arg0: com.sun.tools.classfile.LineNumberTable_attribute, arg1: P): R
                public visitLocalVariableTable(arg0: com.sun.tools.classfile.LocalVariableTable_attribute, arg1: P): R
                public visitLocalVariableTypeTable(arg0: com.sun.tools.classfile.LocalVariableTypeTable_attribute, arg1: P): R
                public visitMethodParameters(arg0: com.sun.tools.classfile.MethodParameters_attribute, arg1: P): R
                public visitRuntimeVisibleAnnotations(arg0: com.sun.tools.classfile.RuntimeVisibleAnnotations_attribute, arg1: P): R
                public visitRuntimeInvisibleAnnotations(arg0: com.sun.tools.classfile.RuntimeInvisibleAnnotations_attribute, arg1: P): R
                public visitRuntimeVisibleParameterAnnotations(arg0: com.sun.tools.classfile.RuntimeVisibleParameterAnnotations_attribute, arg1: P): R
                public visitRuntimeInvisibleParameterAnnotations(arg0: com.sun.tools.classfile.RuntimeInvisibleParameterAnnotations_attribute, arg1: P): R
                public visitRuntimeVisibleTypeAnnotations(arg0: com.sun.tools.classfile.RuntimeVisibleTypeAnnotations_attribute, arg1: P): R
                public visitRuntimeInvisibleTypeAnnotations(arg0: com.sun.tools.classfile.RuntimeInvisibleTypeAnnotations_attribute, arg1: P): R
                public visitSignature(arg0: com.sun.tools.classfile.Signature_attribute, arg1: P): R
                public visitSourceDebugExtension(arg0: com.sun.tools.classfile.SourceDebugExtension_attribute, arg1: P): R
                public visitSourceFile(arg0: com.sun.tools.classfile.SourceFile_attribute, arg1: P): R
                public visitSourceID(arg0: com.sun.tools.classfile.SourceID_attribute, arg1: P): R
                public visitStackMap(arg0: com.sun.tools.classfile.StackMap_attribute, arg1: P): R
                public visitStackMapTable(arg0: com.sun.tools.classfile.StackMapTable_attribute, arg1: P): R
                public visitSynthetic(arg0: com.sun.tools.classfile.Synthetic_attribute, arg1: P): R
            }
            abstract class Attribute {
                public static AnnotationDefault: java.lang.String
                public static BootstrapMethods: java.lang.String
                public static CharacterRangeTable: java.lang.String
                public static Code: java.lang.String
                public static ConstantValue: java.lang.String
                public static CompilationID: java.lang.String
                public static Deprecated: java.lang.String
                public static EnclosingMethod: java.lang.String
                public static Exceptions: java.lang.String
                public static InnerClasses: java.lang.String
                public static LineNumberTable: java.lang.String
                public static LocalVariableTable: java.lang.String
                public static LocalVariableTypeTable: java.lang.String
                public static MethodParameters: java.lang.String
                public static RuntimeVisibleAnnotations: java.lang.String
                public static RuntimeInvisibleAnnotations: java.lang.String
                public static RuntimeVisibleParameterAnnotations: java.lang.String
                public static RuntimeInvisibleParameterAnnotations: java.lang.String
                public static RuntimeVisibleTypeAnnotations: java.lang.String
                public static RuntimeInvisibleTypeAnnotations: java.lang.String
                public static Signature: java.lang.String
                public static SourceDebugExtension: java.lang.String
                public static SourceFile: java.lang.String
                public static SourceID: java.lang.String
                public static StackMap: java.lang.String
                public static StackMapTable: java.lang.String
                public static Synthetic: java.lang.String
                public attribute_name_index: int
                public attribute_length: int
                public static read(arg0: com.sun.tools.classfile.ClassReader): com.sun.tools.classfile.Attribute
                protected constructor(arg0: int, arg1: int)
                public getName(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
                public byteLength(): int
            }
            class Field {
                public access_flags: com.sun.tools.classfile.AccessFlags
                public name_index: int
                public descriptor: com.sun.tools.classfile.Descriptor
                public attributes: com.sun.tools.classfile.Attributes
                constructor(...args: any[])
                public byteLength(): int
                public getName(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
            }
            class Method {
                public access_flags: com.sun.tools.classfile.AccessFlags
                public name_index: int
                public descriptor: com.sun.tools.classfile.Descriptor
                public attributes: com.sun.tools.classfile.Attributes
                constructor(...args: any[])
                public byteLength(): int
                public getName(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
            }
            class Attributes implements java.lang.Iterable<com.sun.tools.classfile.Attribute> {
                public attrs: com.sun.tools.classfile.Attribute[]
                public map: java.util.Map<java.lang.String, com.sun.tools.classfile.Attribute>
                constructor(...args: any[])
                public iterator(): java.util.Iterator<com.sun.tools.classfile.Attribute>
                get<T>(...args: any[]): any
                public getIndex(arg0: com.sun.tools.classfile.ConstantPool, arg1: java.lang.String): int
                public size(): int
                public byteLength(): int
            }
            class Descriptor$InvalidDescriptor extends com.sun.tools.classfile.DescriptorException {
                public desc: java.lang.String
                public index: int
                constructor(...args: any[])
                public getMessage(): java.lang.String
            }
            class Descriptor {
                public index: int
                constructor(...args: any[])
                public getValue(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getParameterCount(arg0: com.sun.tools.classfile.ConstantPool): int
                public getParameterTypes(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getReturnType(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getFieldType(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
            }
            class BootstrapMethods_attribute$BootstrapMethodSpecifier {
                public bootstrap_method_ref: int
                public bootstrap_arguments: int[]
                constructor(...args: any[])
                length(): int
            }
            class BootstrapMethods_attribute extends com.sun.tools.classfile.Attribute {
                public bootstrap_method_specifiers: com.sun.tools.classfile.BootstrapMethods_attribute$BootstrapMethodSpecifier[]
                constructor(...args: any[])
                public static length(arg0: com.sun.tools.classfile.BootstrapMethods_attribute$BootstrapMethodSpecifier[]): int
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            class DefaultAttribute extends com.sun.tools.classfile.Attribute {
                public info: byte[]
                public reason: java.lang.String
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            class AnnotationDefault_attribute extends com.sun.tools.classfile.Attribute {
                public default_value: com.sun.tools.classfile.Annotation$element_value
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class CharacterRangeTable_attribute$Entry {
                public start_pc: int
                public end_pc: int
                public character_range_start: int
                public character_range_end: int
                public flags: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public static length(): int
            }
            class CharacterRangeTable_attribute extends com.sun.tools.classfile.Attribute {
                public static CRT_STATEMENT: int
                public static CRT_BLOCK: int
                public static CRT_ASSIGNMENT: int
                public static CRT_FLOW_CONTROLLER: int
                public static CRT_FLOW_TARGET: int
                public static CRT_INVOKE: int
                public static CRT_CREATE: int
                public static CRT_BRANCH_TRUE: int
                public static CRT_BRANCH_FALSE: int
                public character_range_table: com.sun.tools.classfile.CharacterRangeTable_attribute$Entry[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class Code_attribute$InvalidIndex extends com.sun.tools.classfile.AttributeException {
                public index: int
                constructor(arg0: int)
                public getMessage(): java.lang.String
            }
            class Code_attribute$1$1 implements java.util.Iterator<com.sun.tools.classfile.Instruction> {
                current: com.sun.tools.classfile.Instruction
                pc: int
                next<T>(...args: any[]): any
                this$1: com.sun.tools.classfile.Code_attribute$1
                constructor(arg0: com.sun.tools.classfile.Code_attribute$1)
                public hasNext(): boolean
                public remove(): void
            }
            class Code_attribute$1 implements java.lang.Iterable<com.sun.tools.classfile.Instruction> {
                this$0: com.sun.tools.classfile.Code_attribute
                constructor(arg0: com.sun.tools.classfile.Code_attribute)
                public iterator(): java.util.Iterator<com.sun.tools.classfile.Instruction>
            }
            class Code_attribute$Exception_data {
                public start_pc: int
                public end_pc: int
                public handler_pc: int
                public catch_type: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
            }
            class Code_attribute extends com.sun.tools.classfile.Attribute {
                public max_stack: int
                public max_locals: int
                public code_length: int
                public code: byte[]
                public exception_table_length: int
                public exception_table: com.sun.tools.classfile.Code_attribute$Exception_data[]
                public attributes: com.sun.tools.classfile.Attributes
                constructor(arg0: com.sun.tools.classfile.ClassReader, arg1: int, arg2: int)
                public getByte(arg0: int): int
                public getUnsignedByte(arg0: int): int
                public getShort(arg0: int): int
                public getUnsignedShort(arg0: int): int
                public getInt(arg0: int): int
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
                public getInstructions(): java.lang.Iterable<com.sun.tools.classfile.Instruction>
            }
            class CompilationID_attribute extends com.sun.tools.classfile.Attribute {
                public compilationID_index: int
                constructor(...args: any[])
                getCompilationID(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class ConstantValue_attribute extends com.sun.tools.classfile.Attribute {
                public constantvalue_index: int
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class Deprecated_attribute extends com.sun.tools.classfile.Attribute {
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class EnclosingMethod_attribute extends com.sun.tools.classfile.Attribute {
                public class_index: int
                public method_index: int
                constructor(...args: any[])
                public getClassName(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getMethodName(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class Exceptions_attribute extends com.sun.tools.classfile.Attribute {
                public number_of_exceptions: int
                public exception_index_table: int[]
                constructor(...args: any[])
                public getException(arg0: int, arg1: com.sun.tools.classfile.ConstantPool): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class InnerClasses_attribute$Info {
                public inner_class_info_index: int
                public outer_class_info_index: int
                public inner_name_index: int
                public inner_class_access_flags: com.sun.tools.classfile.AccessFlags
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public getInnerClassInfo(arg0: com.sun.tools.classfile.ConstantPool): com.sun.tools.classfile.ConstantPool$CONSTANT_Class_info
                public getOuterClassInfo(arg0: com.sun.tools.classfile.ConstantPool): com.sun.tools.classfile.ConstantPool$CONSTANT_Class_info
                public getInnerName(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public static length(): int
            }
            class InnerClasses_attribute extends com.sun.tools.classfile.Attribute {
                public number_of_classes: int
                public classes: com.sun.tools.classfile.InnerClasses_attribute$Info[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class LineNumberTable_attribute$Entry {
                public start_pc: int
                public line_number: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public static length(): int
            }
            class LineNumberTable_attribute extends com.sun.tools.classfile.Attribute {
                public line_number_table_length: int
                public line_number_table: com.sun.tools.classfile.LineNumberTable_attribute$Entry[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class LocalVariableTable_attribute$Entry {
                public start_pc: int
                length<T>(...args: any[]): any
                public name_index: int
                public descriptor_index: int
                public index: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
            }
            class LocalVariableTable_attribute extends com.sun.tools.classfile.Attribute {
                public local_variable_table_length: int
                public local_variable_table: com.sun.tools.classfile.LocalVariableTable_attribute$Entry[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class LocalVariableTypeTable_attribute$Entry {
                public start_pc: int
                length<T>(...args: any[]): any
                public name_index: int
                public signature_index: int
                public index: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
            }
            class LocalVariableTypeTable_attribute extends com.sun.tools.classfile.Attribute {
                public local_variable_table_length: int
                public local_variable_table: com.sun.tools.classfile.LocalVariableTypeTable_attribute$Entry[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class MethodParameters_attribute$Entry {
                public name_index: int
                public flags: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public static length(): int
            }
            class MethodParameters_attribute extends com.sun.tools.classfile.Attribute {
                public method_parameter_table_length: int
                public method_parameter_table: com.sun.tools.classfile.MethodParameters_attribute$Entry[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class RuntimeVisibleAnnotations_attribute extends com.sun.tools.classfile.RuntimeAnnotations_attribute {
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            abstract class RuntimeAnnotations_attribute extends com.sun.tools.classfile.Attribute {
                public annotations: com.sun.tools.classfile.Annotation[]
                constructor(...args: any[])
            }
            class RuntimeInvisibleAnnotations_attribute extends com.sun.tools.classfile.RuntimeAnnotations_attribute {
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            class RuntimeVisibleParameterAnnotations_attribute extends com.sun.tools.classfile.RuntimeParameterAnnotations_attribute {
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            abstract class RuntimeParameterAnnotations_attribute extends com.sun.tools.classfile.Attribute {
                public parameter_annotations: com.sun.tools.classfile.Annotation[][]
                constructor(...args: any[])
            }
            class RuntimeInvisibleParameterAnnotations_attribute extends com.sun.tools.classfile.RuntimeParameterAnnotations_attribute {
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            class RuntimeVisibleTypeAnnotations_attribute extends com.sun.tools.classfile.RuntimeTypeAnnotations_attribute {
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            abstract class RuntimeTypeAnnotations_attribute extends com.sun.tools.classfile.Attribute {
                public annotations: com.sun.tools.classfile.TypeAnnotation[]
                constructor(...args: any[])
            }
            class RuntimeInvisibleTypeAnnotations_attribute extends com.sun.tools.classfile.RuntimeTypeAnnotations_attribute {
                constructor(...args: any[])
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            class Signature_attribute extends com.sun.tools.classfile.Attribute {
                public signature_index: int
                constructor(...args: any[])
                public getSignature(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getParsedSignature(): com.sun.tools.classfile.Signature
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class SourceDebugExtension_attribute extends com.sun.tools.classfile.Attribute {
                public debug_extension: byte[]
                constructor(...args: any[])
                public getValue(): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class SourceFile_attribute extends com.sun.tools.classfile.Attribute {
                public sourcefile_index: int
                constructor(...args: any[])
                public getSourceFile(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public accept<R, P>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, P>, arg1: P): R
            }
            class SourceID_attribute extends com.sun.tools.classfile.Attribute {
                public sourceID_index: int
                constructor(...args: any[])
                getSourceID(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class StackMap_attribute$stack_map_frame extends com.sun.tools.classfile.StackMapTable_attribute$full_frame {
                constructor(arg0: com.sun.tools.classfile.ClassReader)
            }
            class StackMap_attribute extends com.sun.tools.classfile.Attribute {
                public number_of_entries: int
                public entries: com.sun.tools.classfile.StackMap_attribute$stack_map_frame[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class StackMapTable_attribute$InvalidStackMap extends com.sun.tools.classfile.AttributeException {
                constructor(arg0: java.lang.String)
            }
            interface StackMapTable_attribute$stack_map_frame$Visitor<R, P> {
                public visit_same_frame(arg0: com.sun.tools.classfile.StackMapTable_attribute$same_frame, arg1: P): R
                public visit_same_locals_1_stack_item_frame(arg0: com.sun.tools.classfile.StackMapTable_attribute$same_locals_1_stack_item_frame, arg1: P): R
                public visit_same_locals_1_stack_item_frame_extended(arg0: com.sun.tools.classfile.StackMapTable_attribute$same_locals_1_stack_item_frame_extended, arg1: P): R
                public visit_chop_frame(arg0: com.sun.tools.classfile.StackMapTable_attribute$chop_frame, arg1: P): R
                public visit_same_frame_extended(arg0: com.sun.tools.classfile.StackMapTable_attribute$same_frame_extended, arg1: P): R
                public visit_append_frame(arg0: com.sun.tools.classfile.StackMapTable_attribute$append_frame, arg1: P): R
                public visit_full_frame(arg0: com.sun.tools.classfile.StackMapTable_attribute$full_frame, arg1: P): R
            }
            abstract class StackMapTable_attribute$stack_map_frame {
                public frame_type: int
                static read(arg0: com.sun.tools.classfile.ClassReader): com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame
                protected constructor(arg0: int)
                public length(): int
                public getOffsetDelta(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
            }
            class StackMapTable_attribute$same_frame extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                constructor(arg0: int)
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$same_locals_1_stack_item_frame extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                public stack: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
                constructor(arg0: int, arg1: com.sun.tools.classfile.ClassReader)
                public length(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$same_locals_1_stack_item_frame_extended extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                public offset_delta: int
                public stack: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
                constructor(arg0: int, arg1: com.sun.tools.classfile.ClassReader)
                public length(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$chop_frame extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                public offset_delta: int
                constructor(arg0: int, arg1: com.sun.tools.classfile.ClassReader)
                public length(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$same_frame_extended extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                public offset_delta: int
                constructor(arg0: int, arg1: com.sun.tools.classfile.ClassReader)
                public length(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$append_frame extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                public offset_delta: int
                public locals: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
                constructor(arg0: int, arg1: com.sun.tools.classfile.ClassReader)
                public length(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$full_frame extends com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame {
                public offset_delta: int
                public number_of_locals: int
                public locals: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
                public number_of_stack_items: int
                public stack: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info[]
                constructor(arg0: int, arg1: com.sun.tools.classfile.ClassReader)
                public length(): int
                public accept<R, D>(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<R, D>, arg1: D): R
                public getOffsetDelta(): int
            }
            class StackMapTable_attribute$verification_type_info {
                public static ITEM_Top: int
                public static ITEM_Integer: int
                public static ITEM_Float: int
                public static ITEM_Long: int
                public static ITEM_Double: int
                public static ITEM_Null: int
                public static ITEM_UninitializedThis: int
                public static ITEM_Object: int
                public static ITEM_Uninitialized: int
                public tag: int
                static read(arg0: com.sun.tools.classfile.ClassReader): com.sun.tools.classfile.StackMapTable_attribute$verification_type_info
                protected constructor(arg0: int)
                public length(): int
            }
            class StackMapTable_attribute$Object_variable_info extends com.sun.tools.classfile.StackMapTable_attribute$verification_type_info {
                public cpool_index: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public length(): int
            }
            class StackMapTable_attribute$Uninitialized_variable_info extends com.sun.tools.classfile.StackMapTable_attribute$verification_type_info {
                public offset: int
                constructor(arg0: com.sun.tools.classfile.ClassReader)
                public length(): int
            }
            class StackMapTable_attribute extends com.sun.tools.classfile.Attribute {
                public number_of_entries: int
                public entries: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame[]
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
                static length(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame[]): int
            }
            class Synthetic_attribute extends com.sun.tools.classfile.Attribute {
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Attribute$Visitor<R, D>, arg1: D): R
            }
            class DescriptorException extends java.lang.Exception {
                public constructor()
            }
            class Instruction$Kind extends java.lang.Enum<com.sun.tools.classfile.Instruction$Kind> {
                public static NO_OPERANDS: com.sun.tools.classfile.Instruction$Kind
                public static ATYPE: com.sun.tools.classfile.Instruction$Kind
                public static BRANCH: com.sun.tools.classfile.Instruction$Kind
                public static BRANCH_W: com.sun.tools.classfile.Instruction$Kind
                public static BYTE: com.sun.tools.classfile.Instruction$Kind
                public static CPREF: com.sun.tools.classfile.Instruction$Kind
                public static CPREF_W: com.sun.tools.classfile.Instruction$Kind
                public static CPREF_W_UBYTE: com.sun.tools.classfile.Instruction$Kind
                public static CPREF_W_UBYTE_ZERO: com.sun.tools.classfile.Instruction$Kind
                public static DYNAMIC: com.sun.tools.classfile.Instruction$Kind
                public static LOCAL: com.sun.tools.classfile.Instruction$Kind
                public static LOCAL_BYTE: com.sun.tools.classfile.Instruction$Kind
                public static SHORT: com.sun.tools.classfile.Instruction$Kind
                public static WIDE_NO_OPERANDS: com.sun.tools.classfile.Instruction$Kind
                public static WIDE_LOCAL: com.sun.tools.classfile.Instruction$Kind
                public static WIDE_CPREF_W: com.sun.tools.classfile.Instruction$Kind
                public static WIDE_CPREF_W_SHORT: com.sun.tools.classfile.Instruction$Kind
                public static WIDE_LOCAL_SHORT: com.sun.tools.classfile.Instruction$Kind
                public static UNKNOWN: com.sun.tools.classfile.Instruction$Kind
                public length: int
                public static values(): com.sun.tools.classfile.Instruction$Kind[]
                valueOf<T>(...args: any[]): any
            }
            interface Instruction$KindVisitor<R, P> {
                public visitNoOperands(arg0: com.sun.tools.classfile.Instruction, arg1: P): R
                public visitArrayType(arg0: com.sun.tools.classfile.Instruction, arg1: com.sun.tools.classfile.Instruction$TypeKind, arg2: P): R
                public visitBranch(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: P): R
                public visitConstantPoolRef(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: P): R
                public visitConstantPoolRefAndValue(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: int, arg3: P): R
                public visitLocal(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: P): R
                public visitLocalAndValue(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: int, arg3: P): R
                public visitLookupSwitch(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: int, arg3: int[], arg4: int[], arg5: P): R
                public visitTableSwitch(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: int, arg3: int, arg4: int[], arg5: P): R
                public visitValue(arg0: com.sun.tools.classfile.Instruction, arg1: int, arg2: P): R
                public visitUnknown(arg0: com.sun.tools.classfile.Instruction, arg1: P): R
            }
            class Instruction$TypeKind extends java.lang.Enum<com.sun.tools.classfile.Instruction$TypeKind> {
                public static T_BOOLEAN: com.sun.tools.classfile.Instruction$TypeKind
                public static T_CHAR: com.sun.tools.classfile.Instruction$TypeKind
                public static T_FLOAT: com.sun.tools.classfile.Instruction$TypeKind
                public static T_DOUBLE: com.sun.tools.classfile.Instruction$TypeKind
                public static T_BYTE: com.sun.tools.classfile.Instruction$TypeKind
                public static T_SHORT: com.sun.tools.classfile.Instruction$TypeKind
                public static T_INT: com.sun.tools.classfile.Instruction$TypeKind
                public static T_LONG: com.sun.tools.classfile.Instruction$TypeKind
                public value: int
                public name: java.lang.String
                public static values(): com.sun.tools.classfile.Instruction$TypeKind[]
                valueOf<T>(...args: any[]): any
                public static get(arg0: int): com.sun.tools.classfile.Instruction$TypeKind
            }
            class Instruction$1 {
                static $SwitchMap$com$sun$tools$classfile$Opcode: int[]
                static $SwitchMap$com$sun$tools$classfile$Instruction$Kind: int[]
            }
            class Instruction {
                public constructor(arg0: byte[], arg1: int)
                public getPC(): int
                public getByte(arg0: int): int
                public getUnsignedByte(arg0: int): int
                public getShort(arg0: int): int
                public getUnsignedShort(arg0: int): int
                public getInt(arg0: int): int
                public getOpcode(): com.sun.tools.classfile.Opcode
                public getMnemonic(): java.lang.String
                public length(): int
                public getKind(): com.sun.tools.classfile.Instruction$Kind
                public accept<R, P>(arg0: com.sun.tools.classfile.Instruction$KindVisitor<R, P>, arg1: P): R
            }
            class TypeAnnotation$Position$TypePathEntryKind extends java.lang.Enum<com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind> {
                public static ARRAY: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind
                public static INNER_TYPE: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind
                public static WILDCARD: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind
                public static TYPE_ARGUMENT: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind
                public tag: int
                public static values(): com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind[]
                valueOf<T>(...args: any[]): any
            }
            class TypeAnnotation$Position$TypePathEntry {
                public static bytesPerEntry: int
                public tag: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind
                public arg: int
                public static ARRAY: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry
                public static INNER_TYPE: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry
                public static WILDCARD: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry
                public constructor(arg0: com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntryKind, arg1: int)
                public static fromBinary(arg0: int, arg1: int): com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry
                toString<T>(...args: any[]): any
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
            }
            class TypeAnnotation$Position {
                public type: com.sun.tools.classfile.TypeAnnotation$TargetType
                public location: java.util.List<com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry>
                public pos: int
                public isValidOffset: boolean
                public offset: int
                public lvarOffset: int[]
                public lvarLength: int[]
                public lvarIndex: int[]
                public bound_index: int
                public parameter_index: int
                public type_index: int
                public exception_index: int
                public constructor()
                toString<T>(...args: any[]): any
                public emitToClassfile(): boolean
                public static getTypePathFromBinary(arg0: java.util.List<java.lang.Integer>): java.util.List<com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry>
                public static getBinaryFromTypePath(arg0: java.util.List<com.sun.tools.classfile.TypeAnnotation$Position$TypePathEntry>): java.util.List<java.lang.Integer>
            }
            class TypeAnnotation$TargetType extends java.lang.Enum<com.sun.tools.classfile.TypeAnnotation$TargetType> {
                public static CLASS_TYPE_PARAMETER: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_TYPE_PARAMETER: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static CLASS_EXTENDS: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static CLASS_TYPE_PARAMETER_BOUND: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_TYPE_PARAMETER_BOUND: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static FIELD: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_RETURN: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_RECEIVER: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_FORMAL_PARAMETER: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static THROWS: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static LOCAL_VARIABLE: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static RESOURCE_VARIABLE: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static EXCEPTION_PARAMETER: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static INSTANCEOF: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static NEW: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static CONSTRUCTOR_REFERENCE: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_REFERENCE: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static CAST: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_INVOCATION_TYPE_ARGUMENT: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static METHOD_REFERENCE_TYPE_ARGUMENT: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static UNKNOWN: com.sun.tools.classfile.TypeAnnotation$TargetType
                public static values(): com.sun.tools.classfile.TypeAnnotation$TargetType[]
                valueOf<T>(...args: any[]): any
                public isLocal(): boolean
                public targetTypeValue(): int
                public static isValidTargetTypeValue(arg0: int): boolean
                public static fromTargetTypeValue(arg0: int): com.sun.tools.classfile.TypeAnnotation$TargetType
            }
            class TypeAnnotation$1 {
                static $SwitchMap$com$sun$tools$classfile$TypeAnnotation$TargetType: int[]
            }
            class TypeAnnotation {
                public constant_pool: com.sun.tools.classfile.ConstantPool
                public position: com.sun.tools.classfile.TypeAnnotation$Position
                public annotation: com.sun.tools.classfile.Annotation
                constructor(...args: any[])
                public length(): int
                toString<T>(...args: any[]): any
            }
            interface Type$Visitor<R, P> {
                public visitSimpleType(arg0: com.sun.tools.classfile.Type$SimpleType, arg1: P): R
                public visitArrayType(arg0: com.sun.tools.classfile.Type$ArrayType, arg1: P): R
                public visitMethodType(arg0: com.sun.tools.classfile.Type$MethodType, arg1: P): R
                public visitClassSigType(arg0: com.sun.tools.classfile.Type$ClassSigType, arg1: P): R
                public visitClassType(arg0: com.sun.tools.classfile.Type$ClassType, arg1: P): R
                public visitTypeParamType(arg0: com.sun.tools.classfile.Type$TypeParamType, arg1: P): R
                public visitWildcardType(arg0: com.sun.tools.classfile.Type$WildcardType, arg1: P): R
            }
            class Type$SimpleType extends com.sun.tools.classfile.Type {
                public name: java.lang.String
                public constructor(arg0: java.lang.String)
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                public isPrimitiveType(): boolean
                toString<T>(...args: any[]): any
            }
            class Type$ArrayType extends com.sun.tools.classfile.Type {
                public elemType: com.sun.tools.classfile.Type
                public constructor(arg0: com.sun.tools.classfile.Type)
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class Type$MethodType extends com.sun.tools.classfile.Type {
                public typeParamTypes: java.util.List<com.sun.tools.classfile.Type$TypeParamType>
                public paramTypes: java.util.List<com.sun.tools.classfile.Type>
                public returnType: com.sun.tools.classfile.Type
                public throwsTypes: java.util.List<com.sun.tools.classfile.Type>
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class Type$ClassSigType extends com.sun.tools.classfile.Type {
                public typeParamTypes: java.util.List<com.sun.tools.classfile.Type$TypeParamType>
                public superclassType: com.sun.tools.classfile.Type
                public superinterfaceTypes: java.util.List<com.sun.tools.classfile.Type>
                public constructor(arg0: java.util.List<com.sun.tools.classfile.Type$TypeParamType>, arg1: com.sun.tools.classfile.Type, arg2: java.util.List<com.sun.tools.classfile.Type>)
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class Type$ClassType extends com.sun.tools.classfile.Type {
                public outerType: com.sun.tools.classfile.Type$ClassType
                public name: java.lang.String
                public typeArgs: java.util.List<com.sun.tools.classfile.Type>
                public constructor(arg0: com.sun.tools.classfile.Type$ClassType, arg1: java.lang.String, arg2: java.util.List<com.sun.tools.classfile.Type>)
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                public getBinaryName(): java.lang.String
                toString<T>(...args: any[]): any
                public isObject(): boolean
            }
            class Type$TypeParamType extends com.sun.tools.classfile.Type {
                public name: java.lang.String
                public classBound: com.sun.tools.classfile.Type
                public interfaceBounds: java.util.List<com.sun.tools.classfile.Type>
                public constructor(arg0: java.lang.String, arg1: com.sun.tools.classfile.Type, arg2: java.util.List<com.sun.tools.classfile.Type>)
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class Type$WildcardType$Kind extends java.lang.Enum<com.sun.tools.classfile.Type$WildcardType$Kind> {
                public static UNBOUNDED: com.sun.tools.classfile.Type$WildcardType$Kind
                public static EXTENDS: com.sun.tools.classfile.Type$WildcardType$Kind
                public static SUPER: com.sun.tools.classfile.Type$WildcardType$Kind
                public static values(): com.sun.tools.classfile.Type$WildcardType$Kind[]
                valueOf<T>(...args: any[]): any
            }
            class Type$WildcardType extends com.sun.tools.classfile.Type {
                public kind: com.sun.tools.classfile.Type$WildcardType$Kind
                public boundType: com.sun.tools.classfile.Type
                constructor(...args: any[])
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                toString<T>(...args: any[]): any
            }
            class Type$1 {
                static $SwitchMap$com$sun$tools$classfile$Type$WildcardType$Kind: int[]
            }
            abstract class Type {
                protected constructor()
                public isObject(): boolean
                public accept<R, D>(arg0: com.sun.tools.classfile.Type$Visitor<R, D>, arg1: D): R
                protected static append(arg0: java.lang.StringBuilder, arg1: java.lang.String, arg2: java.util.List<com.sun.tools.classfile.Type>, arg3: java.lang.String): void
                protected static appendIfNotEmpty(arg0: java.lang.StringBuilder, arg1: java.lang.String, arg2: java.util.List<com.sun.tools.classfile.Type>, arg3: java.lang.String): void
            }
            class Signature extends com.sun.tools.classfile.Descriptor {
                static $assertionsDisabled: boolean
                public constructor(arg0: int)
                public getType(arg0: com.sun.tools.classfile.ConstantPool): com.sun.tools.classfile.Type
                public getParameterCount(arg0: com.sun.tools.classfile.ConstantPool): int
                public getParameterTypes(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getReturnType(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
                public getFieldType(arg0: com.sun.tools.classfile.ConstantPool): java.lang.String
            }
            class Opcode$Set extends java.lang.Enum<com.sun.tools.classfile.Opcode$Set> {
                public static STANDARD: com.sun.tools.classfile.Opcode$Set
                public static PICOJAVA: com.sun.tools.classfile.Opcode$Set
                public static values(): com.sun.tools.classfile.Opcode$Set[]
                valueOf<T>(...args: any[]): any
            }
            class Opcode extends java.lang.Enum<com.sun.tools.classfile.Opcode> {
                public static NOP: com.sun.tools.classfile.Opcode
                public static ACONST_NULL: com.sun.tools.classfile.Opcode
                public static ICONST_M1: com.sun.tools.classfile.Opcode
                public static ICONST_0: com.sun.tools.classfile.Opcode
                public static ICONST_1: com.sun.tools.classfile.Opcode
                public static ICONST_2: com.sun.tools.classfile.Opcode
                public static ICONST_3: com.sun.tools.classfile.Opcode
                public static ICONST_4: com.sun.tools.classfile.Opcode
                public static ICONST_5: com.sun.tools.classfile.Opcode
                public static LCONST_0: com.sun.tools.classfile.Opcode
                public static LCONST_1: com.sun.tools.classfile.Opcode
                public static FCONST_0: com.sun.tools.classfile.Opcode
                public static FCONST_1: com.sun.tools.classfile.Opcode
                public static FCONST_2: com.sun.tools.classfile.Opcode
                public static DCONST_0: com.sun.tools.classfile.Opcode
                public static DCONST_1: com.sun.tools.classfile.Opcode
                public static BIPUSH: com.sun.tools.classfile.Opcode
                public static SIPUSH: com.sun.tools.classfile.Opcode
                public static LDC: com.sun.tools.classfile.Opcode
                public static LDC_W: com.sun.tools.classfile.Opcode
                public static LDC2_W: com.sun.tools.classfile.Opcode
                public static ILOAD: com.sun.tools.classfile.Opcode
                public static LLOAD: com.sun.tools.classfile.Opcode
                public static FLOAD: com.sun.tools.classfile.Opcode
                public static DLOAD: com.sun.tools.classfile.Opcode
                public static ALOAD: com.sun.tools.classfile.Opcode
                public static ILOAD_0: com.sun.tools.classfile.Opcode
                public static ILOAD_1: com.sun.tools.classfile.Opcode
                public static ILOAD_2: com.sun.tools.classfile.Opcode
                public static ILOAD_3: com.sun.tools.classfile.Opcode
                public static LLOAD_0: com.sun.tools.classfile.Opcode
                public static LLOAD_1: com.sun.tools.classfile.Opcode
                public static LLOAD_2: com.sun.tools.classfile.Opcode
                public static LLOAD_3: com.sun.tools.classfile.Opcode
                public static FLOAD_0: com.sun.tools.classfile.Opcode
                public static FLOAD_1: com.sun.tools.classfile.Opcode
                public static FLOAD_2: com.sun.tools.classfile.Opcode
                public static FLOAD_3: com.sun.tools.classfile.Opcode
                public static DLOAD_0: com.sun.tools.classfile.Opcode
                public static DLOAD_1: com.sun.tools.classfile.Opcode
                public static DLOAD_2: com.sun.tools.classfile.Opcode
                public static DLOAD_3: com.sun.tools.classfile.Opcode
                public static ALOAD_0: com.sun.tools.classfile.Opcode
                public static ALOAD_1: com.sun.tools.classfile.Opcode
                public static ALOAD_2: com.sun.tools.classfile.Opcode
                public static ALOAD_3: com.sun.tools.classfile.Opcode
                public static IALOAD: com.sun.tools.classfile.Opcode
                public static LALOAD: com.sun.tools.classfile.Opcode
                public static FALOAD: com.sun.tools.classfile.Opcode
                public static DALOAD: com.sun.tools.classfile.Opcode
                public static AALOAD: com.sun.tools.classfile.Opcode
                public static BALOAD: com.sun.tools.classfile.Opcode
                public static CALOAD: com.sun.tools.classfile.Opcode
                public static SALOAD: com.sun.tools.classfile.Opcode
                public static ISTORE: com.sun.tools.classfile.Opcode
                public static LSTORE: com.sun.tools.classfile.Opcode
                public static FSTORE: com.sun.tools.classfile.Opcode
                public static DSTORE: com.sun.tools.classfile.Opcode
                public static ASTORE: com.sun.tools.classfile.Opcode
                public static ISTORE_0: com.sun.tools.classfile.Opcode
                public static ISTORE_1: com.sun.tools.classfile.Opcode
                public static ISTORE_2: com.sun.tools.classfile.Opcode
                public static ISTORE_3: com.sun.tools.classfile.Opcode
                public static LSTORE_0: com.sun.tools.classfile.Opcode
                public static LSTORE_1: com.sun.tools.classfile.Opcode
                public static LSTORE_2: com.sun.tools.classfile.Opcode
                public static LSTORE_3: com.sun.tools.classfile.Opcode
                public static FSTORE_0: com.sun.tools.classfile.Opcode
                public static FSTORE_1: com.sun.tools.classfile.Opcode
                public static FSTORE_2: com.sun.tools.classfile.Opcode
                public static FSTORE_3: com.sun.tools.classfile.Opcode
                public static DSTORE_0: com.sun.tools.classfile.Opcode
                public static DSTORE_1: com.sun.tools.classfile.Opcode
                public static DSTORE_2: com.sun.tools.classfile.Opcode
                public static DSTORE_3: com.sun.tools.classfile.Opcode
                public static ASTORE_0: com.sun.tools.classfile.Opcode
                public static ASTORE_1: com.sun.tools.classfile.Opcode
                public static ASTORE_2: com.sun.tools.classfile.Opcode
                public static ASTORE_3: com.sun.tools.classfile.Opcode
                public static IASTORE: com.sun.tools.classfile.Opcode
                public static LASTORE: com.sun.tools.classfile.Opcode
                public static FASTORE: com.sun.tools.classfile.Opcode
                public static DASTORE: com.sun.tools.classfile.Opcode
                public static AASTORE: com.sun.tools.classfile.Opcode
                public static BASTORE: com.sun.tools.classfile.Opcode
                public static CASTORE: com.sun.tools.classfile.Opcode
                public static SASTORE: com.sun.tools.classfile.Opcode
                public static POP: com.sun.tools.classfile.Opcode
                public static POP2: com.sun.tools.classfile.Opcode
                public static DUP: com.sun.tools.classfile.Opcode
                public static DUP_X1: com.sun.tools.classfile.Opcode
                public static DUP_X2: com.sun.tools.classfile.Opcode
                public static DUP2: com.sun.tools.classfile.Opcode
                public static DUP2_X1: com.sun.tools.classfile.Opcode
                public static DUP2_X2: com.sun.tools.classfile.Opcode
                public static SWAP: com.sun.tools.classfile.Opcode
                public static IADD: com.sun.tools.classfile.Opcode
                public static LADD: com.sun.tools.classfile.Opcode
                public static FADD: com.sun.tools.classfile.Opcode
                public static DADD: com.sun.tools.classfile.Opcode
                public static ISUB: com.sun.tools.classfile.Opcode
                public static LSUB: com.sun.tools.classfile.Opcode
                public static FSUB: com.sun.tools.classfile.Opcode
                public static DSUB: com.sun.tools.classfile.Opcode
                public static IMUL: com.sun.tools.classfile.Opcode
                public static LMUL: com.sun.tools.classfile.Opcode
                public static FMUL: com.sun.tools.classfile.Opcode
                public static DMUL: com.sun.tools.classfile.Opcode
                public static IDIV: com.sun.tools.classfile.Opcode
                public static LDIV: com.sun.tools.classfile.Opcode
                public static FDIV: com.sun.tools.classfile.Opcode
                public static DDIV: com.sun.tools.classfile.Opcode
                public static IREM: com.sun.tools.classfile.Opcode
                public static LREM: com.sun.tools.classfile.Opcode
                public static FREM: com.sun.tools.classfile.Opcode
                public static DREM: com.sun.tools.classfile.Opcode
                public static INEG: com.sun.tools.classfile.Opcode
                public static LNEG: com.sun.tools.classfile.Opcode
                public static FNEG: com.sun.tools.classfile.Opcode
                public static DNEG: com.sun.tools.classfile.Opcode
                public static ISHL: com.sun.tools.classfile.Opcode
                public static LSHL: com.sun.tools.classfile.Opcode
                public static ISHR: com.sun.tools.classfile.Opcode
                public static LSHR: com.sun.tools.classfile.Opcode
                public static IUSHR: com.sun.tools.classfile.Opcode
                public static LUSHR: com.sun.tools.classfile.Opcode
                public static IAND: com.sun.tools.classfile.Opcode
                public static LAND: com.sun.tools.classfile.Opcode
                public static IOR: com.sun.tools.classfile.Opcode
                public static LOR: com.sun.tools.classfile.Opcode
                public static IXOR: com.sun.tools.classfile.Opcode
                public static LXOR: com.sun.tools.classfile.Opcode
                public static IINC: com.sun.tools.classfile.Opcode
                public static I2L: com.sun.tools.classfile.Opcode
                public static I2F: com.sun.tools.classfile.Opcode
                public static I2D: com.sun.tools.classfile.Opcode
                public static L2I: com.sun.tools.classfile.Opcode
                public static L2F: com.sun.tools.classfile.Opcode
                public static L2D: com.sun.tools.classfile.Opcode
                public static F2I: com.sun.tools.classfile.Opcode
                public static F2L: com.sun.tools.classfile.Opcode
                public static F2D: com.sun.tools.classfile.Opcode
                public static D2I: com.sun.tools.classfile.Opcode
                public static D2L: com.sun.tools.classfile.Opcode
                public static D2F: com.sun.tools.classfile.Opcode
                public static I2B: com.sun.tools.classfile.Opcode
                public static I2C: com.sun.tools.classfile.Opcode
                public static I2S: com.sun.tools.classfile.Opcode
                public static LCMP: com.sun.tools.classfile.Opcode
                public static FCMPL: com.sun.tools.classfile.Opcode
                public static FCMPG: com.sun.tools.classfile.Opcode
                public static DCMPL: com.sun.tools.classfile.Opcode
                public static DCMPG: com.sun.tools.classfile.Opcode
                public static IFEQ: com.sun.tools.classfile.Opcode
                public static IFNE: com.sun.tools.classfile.Opcode
                public static IFLT: com.sun.tools.classfile.Opcode
                public static IFGE: com.sun.tools.classfile.Opcode
                public static IFGT: com.sun.tools.classfile.Opcode
                public static IFLE: com.sun.tools.classfile.Opcode
                public static IF_ICMPEQ: com.sun.tools.classfile.Opcode
                public static IF_ICMPNE: com.sun.tools.classfile.Opcode
                public static IF_ICMPLT: com.sun.tools.classfile.Opcode
                public static IF_ICMPGE: com.sun.tools.classfile.Opcode
                public static IF_ICMPGT: com.sun.tools.classfile.Opcode
                public static IF_ICMPLE: com.sun.tools.classfile.Opcode
                public static IF_ACMPEQ: com.sun.tools.classfile.Opcode
                public static IF_ACMPNE: com.sun.tools.classfile.Opcode
                public static GOTO: com.sun.tools.classfile.Opcode
                public static JSR: com.sun.tools.classfile.Opcode
                public static RET: com.sun.tools.classfile.Opcode
                public static TABLESWITCH: com.sun.tools.classfile.Opcode
                public static LOOKUPSWITCH: com.sun.tools.classfile.Opcode
                public static IRETURN: com.sun.tools.classfile.Opcode
                public static LRETURN: com.sun.tools.classfile.Opcode
                public static FRETURN: com.sun.tools.classfile.Opcode
                public static DRETURN: com.sun.tools.classfile.Opcode
                public static ARETURN: com.sun.tools.classfile.Opcode
                public static RETURN: com.sun.tools.classfile.Opcode
                public static GETSTATIC: com.sun.tools.classfile.Opcode
                public static PUTSTATIC: com.sun.tools.classfile.Opcode
                public static GETFIELD: com.sun.tools.classfile.Opcode
                public static PUTFIELD: com.sun.tools.classfile.Opcode
                public static INVOKEVIRTUAL: com.sun.tools.classfile.Opcode
                public static INVOKESPECIAL: com.sun.tools.classfile.Opcode
                public static INVOKESTATIC: com.sun.tools.classfile.Opcode
                public static INVOKEINTERFACE: com.sun.tools.classfile.Opcode
                public static INVOKEDYNAMIC: com.sun.tools.classfile.Opcode
                public static NEW: com.sun.tools.classfile.Opcode
                public static NEWARRAY: com.sun.tools.classfile.Opcode
                public static ANEWARRAY: com.sun.tools.classfile.Opcode
                public static ARRAYLENGTH: com.sun.tools.classfile.Opcode
                public static ATHROW: com.sun.tools.classfile.Opcode
                public static CHECKCAST: com.sun.tools.classfile.Opcode
                public static INSTANCEOF: com.sun.tools.classfile.Opcode
                public static MONITORENTER: com.sun.tools.classfile.Opcode
                public static MONITOREXIT: com.sun.tools.classfile.Opcode
                public static MULTIANEWARRAY: com.sun.tools.classfile.Opcode
                public static IFNULL: com.sun.tools.classfile.Opcode
                public static IFNONNULL: com.sun.tools.classfile.Opcode
                public static GOTO_W: com.sun.tools.classfile.Opcode
                public static JSR_W: com.sun.tools.classfile.Opcode
                public static ILOAD_W: com.sun.tools.classfile.Opcode
                public static LLOAD_W: com.sun.tools.classfile.Opcode
                public static FLOAD_W: com.sun.tools.classfile.Opcode
                public static DLOAD_W: com.sun.tools.classfile.Opcode
                public static ALOAD_W: com.sun.tools.classfile.Opcode
                public static ISTORE_W: com.sun.tools.classfile.Opcode
                public static LSTORE_W: com.sun.tools.classfile.Opcode
                public static FSTORE_W: com.sun.tools.classfile.Opcode
                public static DSTORE_W: com.sun.tools.classfile.Opcode
                public static ASTORE_W: com.sun.tools.classfile.Opcode
                public static IINC_W: com.sun.tools.classfile.Opcode
                public static RET_W: com.sun.tools.classfile.Opcode
                public static LOAD_UBYTE: com.sun.tools.classfile.Opcode
                public static LOAD_BYTE: com.sun.tools.classfile.Opcode
                public static LOAD_CHAR: com.sun.tools.classfile.Opcode
                public static LOAD_SHORT: com.sun.tools.classfile.Opcode
                public static LOAD_WORD: com.sun.tools.classfile.Opcode
                public static RET_FROM_SUB: com.sun.tools.classfile.Opcode
                public static LOAD_CHAR_OE: com.sun.tools.classfile.Opcode
                public static LOAD_SHORT_OE: com.sun.tools.classfile.Opcode
                public static LOAD_WORD_OE: com.sun.tools.classfile.Opcode
                public static NCLOAD_UBYTE: com.sun.tools.classfile.Opcode
                public static NCLOAD_BYTE: com.sun.tools.classfile.Opcode
                public static NCLOAD_CHAR: com.sun.tools.classfile.Opcode
                public static NCLOAD_SHORT: com.sun.tools.classfile.Opcode
                public static NCLOAD_WORD: com.sun.tools.classfile.Opcode
                public static NCLOAD_CHAR_OE: com.sun.tools.classfile.Opcode
                public static NCLOAD_SHORT_OE: com.sun.tools.classfile.Opcode
                public static NCLOAD_WORD_OE: com.sun.tools.classfile.Opcode
                public static CACHE_FLUSH: com.sun.tools.classfile.Opcode
                public static STORE_BYTE: com.sun.tools.classfile.Opcode
                public static STORE_SHORT: com.sun.tools.classfile.Opcode
                public static STORE_WORD: com.sun.tools.classfile.Opcode
                public static STORE_SHORT_OE: com.sun.tools.classfile.Opcode
                public static STORE_WORD_OE: com.sun.tools.classfile.Opcode
                public static NCSTORE_BYTE: com.sun.tools.classfile.Opcode
                public static NCSTORE_SHORT: com.sun.tools.classfile.Opcode
                public static NCSTORE_WORD: com.sun.tools.classfile.Opcode
                public static NCSTORE_SHORT_OE: com.sun.tools.classfile.Opcode
                public static NCSTORE_WORD_OE: com.sun.tools.classfile.Opcode
                public static ZERO_LINE: com.sun.tools.classfile.Opcode
                public static ENTER_SYNC_METHOD: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_UBYTE: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_BYTE: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_CHAR: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_SHORT: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_WORD: com.sun.tools.classfile.Opcode
                public static PRIV_RET_FROM_TRAP: com.sun.tools.classfile.Opcode
                public static PRIV_READ_DCACHE_TAG: com.sun.tools.classfile.Opcode
                public static PRIV_READ_DCACHE_DATA: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_CHAR_OE: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_SHORT_OE: com.sun.tools.classfile.Opcode
                public static PRIV_LOAD_WORD_OE: com.sun.tools.classfile.Opcode
                public static PRIV_READ_ICACHE_TAG: com.sun.tools.classfile.Opcode
                public static PRIV_READ_ICACHE_DATA: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_UBYTE: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_BYTE: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_CHAR: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_SHORT: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_WORD: com.sun.tools.classfile.Opcode
                public static PRIV_POWERDOWN: com.sun.tools.classfile.Opcode
                public static PRIV_READ_SCACHE_DATA: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_CHAR_OE: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_SHORT_OE: com.sun.tools.classfile.Opcode
                public static PRIV_NCLOAD_WORD_OE: com.sun.tools.classfile.Opcode
                public static PRIV_CACHE_FLUSH: com.sun.tools.classfile.Opcode
                public static PRIV_CACHE_INDEX_FLUSH: com.sun.tools.classfile.Opcode
                public static PRIV_STORE_BYTE: com.sun.tools.classfile.Opcode
                public static PRIV_STORE_SHORT: com.sun.tools.classfile.Opcode
                public static PRIV_STORE_WORD: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_DCACHE_TAG: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_DCACHE_DATA: com.sun.tools.classfile.Opcode
                public static PRIV_STORE_SHORT_OE: com.sun.tools.classfile.Opcode
                public static PRIV_STORE_WORD_OE: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_ICACHE_TAG: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_ICACHE_DATA: com.sun.tools.classfile.Opcode
                public static PRIV_NCSTORE_BYTE: com.sun.tools.classfile.Opcode
                public static PRIV_NCSTORE_SHORT: com.sun.tools.classfile.Opcode
                public static PRIV_NCSTORE_WORD: com.sun.tools.classfile.Opcode
                public static PRIV_RESET: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_SCACHE_DATA: com.sun.tools.classfile.Opcode
                public static PRIV_NCSTORE_SHORT_OE: com.sun.tools.classfile.Opcode
                public static PRIV_NCSTORE_WORD_OE: com.sun.tools.classfile.Opcode
                public static PRIV_ZERO_LINE: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_0: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_1: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_2: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_3: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_4: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_5: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_6: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_7: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_8: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_9: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_10: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_11: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_12: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_13: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_14: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_15: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_16: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_17: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_18: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_19: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_20: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_21: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_22: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_23: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_24: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_25: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_26: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_27: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_28: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_29: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_30: com.sun.tools.classfile.Opcode
                public static PRIV_READ_REG_31: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_0: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_1: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_2: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_3: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_4: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_5: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_6: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_7: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_8: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_9: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_10: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_11: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_12: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_13: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_14: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_15: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_16: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_17: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_18: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_19: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_20: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_21: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_22: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_23: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_24: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_25: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_26: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_27: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_28: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_29: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_30: com.sun.tools.classfile.Opcode
                public static PRIV_WRITE_REG_31: com.sun.tools.classfile.Opcode
                public set: com.sun.tools.classfile.Opcode$Set
                public opcode: int
                public kind: com.sun.tools.classfile.Instruction$Kind
                public static WIDE: int
                public static NONPRIV: int
                public static PRIV: int
                public static values(): com.sun.tools.classfile.Opcode[]
                valueOf<T>(...args: any[]): any
                get<T>(...args: any[]): any
            }
            interface Dependency$Filter {
                public accepts(arg0: com.sun.tools.classfile.Dependency): boolean
            }
            interface Dependency$Finder {
                public findDependencies(arg0: com.sun.tools.classfile.ClassFile): java.lang.Iterable<com.sun.tools.classfile.Dependency>
            }
            interface Dependency$Location {
                public getName(): java.lang.String
                public getClassName(): java.lang.String
                public getPackageName(): java.lang.String
            }
            interface Dependency {
                public getOrigin(): com.sun.tools.classfile.Dependency$Location
                public getTarget(): com.sun.tools.classfile.Dependency$Location
            }
            class Dependencies$ClassFileNotFoundException extends java.lang.Exception {
                public className: java.lang.String
                constructor(...args: any[])
            }
            class Dependencies$ClassFileError extends java.lang.Error {
                public constructor(arg0: java.lang.Throwable)
            }
            interface Dependencies$ClassFileReader {
                public getClassFile(arg0: java.lang.String): com.sun.tools.classfile.ClassFile
            }
            interface Dependencies$Recorder {
                public addDependency(arg0: com.sun.tools.classfile.Dependency): void
            }
            class Dependencies$1 implements com.sun.tools.classfile.Dependencies$Recorder {
                val$results: java.util.Set
                this$0: com.sun.tools.classfile.Dependencies
                constructor(arg0: com.sun.tools.classfile.Dependencies, arg1: java.util.Set)
                public addDependency(arg0: com.sun.tools.classfile.Dependency): void
            }
            class Dependencies$SimpleLocation implements com.sun.tools.classfile.Dependency$Location {
                public constructor(arg0: java.lang.String)
                public getName(): java.lang.String
                public getClassName(): java.lang.String
                public getPackageName(): java.lang.String
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                toString<T>(...args: any[]): any
            }
            class Dependencies$SimpleDependency implements com.sun.tools.classfile.Dependency {
                public constructor(arg0: com.sun.tools.classfile.Dependency$Location, arg1: com.sun.tools.classfile.Dependency$Location)
                public getOrigin(): com.sun.tools.classfile.Dependency$Location
                public getTarget(): com.sun.tools.classfile.Dependency$Location
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                toString<T>(...args: any[]): any
            }
            class Dependencies$DefaultFilter implements com.sun.tools.classfile.Dependency$Filter {
                constructor()
                static instance(): com.sun.tools.classfile.Dependencies$DefaultFilter
                public accepts(arg0: com.sun.tools.classfile.Dependency): boolean
            }
            class Dependencies$TargetRegexFilter implements com.sun.tools.classfile.Dependency$Filter {
                constructor(arg0: java.util.regex.Pattern)
                public accepts(arg0: com.sun.tools.classfile.Dependency): boolean
            }
            class Dependencies$TargetPackageFilter implements com.sun.tools.classfile.Dependency$Filter {
                constructor(arg0: java.util.Set<java.lang.String>, arg1: boolean)
                public accepts(arg0: com.sun.tools.classfile.Dependency): boolean
            }
            class Dependencies$ClassDependencyFinder extends com.sun.tools.classfile.Dependencies$BasicDependencyFinder {
                constructor()
                public findDependencies(arg0: com.sun.tools.classfile.ClassFile): java.lang.Iterable<com.sun.tools.classfile.Dependency>
            }
            class Dependencies$APIDependencyFinder extends com.sun.tools.classfile.Dependencies$BasicDependencyFinder {
                constructor(arg0: int)
                public findDependencies(arg0: com.sun.tools.classfile.ClassFile): java.lang.Iterable<com.sun.tools.classfile.Dependency>
                checkAccess(arg0: com.sun.tools.classfile.AccessFlags): boolean
            }
            class Dependencies$BasicDependencyFinder$Visitor implements com.sun.tools.classfile.ConstantPool$Visitor<java.lang.Void, java.lang.Void> , com.sun.tools.classfile.Type$Visitor<java.lang.Void, java.lang.Void> {
                deps: java.util.Set<com.sun.tools.classfile.Dependency>
                this$0: com.sun.tools.classfile.Dependencies$BasicDependencyFinder
                constructor(arg0: com.sun.tools.classfile.Dependencies$BasicDependencyFinder, arg1: com.sun.tools.classfile.ClassFile)
                scan<T>(...args: any[]): any
                addClass(arg0: int): void
                addClasses(arg0: int[]): void
                visitClass<T>(...args: any[]): any
                visitDouble<T>(...args: any[]): any
                visitFieldref<T>(...args: any[]): any
                visitFloat<T>(...args: any[]): any
                visitInteger<T>(...args: any[]): any
                visitInterfaceMethodref<T>(...args: any[]): any
                visitInvokeDynamic<T>(...args: any[]): any
                visitLong<T>(...args: any[]): any
                visitMethodHandle<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitMethodref<T>(...args: any[]): any
                visitNameAndType<T>(...args: any[]): any
                visitString<T>(...args: any[]): any
                visitUtf8<T>(...args: any[]): any
                visitSimpleType<T>(...args: any[]): any
                visitArrayType<T>(...args: any[]): any
                visitClassSigType<T>(...args: any[]): any
                visitClassType<T>(...args: any[]): any
                visitTypeParamType<T>(...args: any[]): any
                visitWildcardType<T>(...args: any[]): any
            }
            abstract class Dependencies$BasicDependencyFinder implements com.sun.tools.classfile.Dependency$Finder {
                constructor()
                getLocation(arg0: java.lang.String): com.sun.tools.classfile.Dependency$Location
            }
            class Dependencies {
                static $assertionsDisabled: boolean
                public constructor()
                public static getDefaultFinder(): com.sun.tools.classfile.Dependency$Finder
                public static getAPIFinder(arg0: int): com.sun.tools.classfile.Dependency$Finder
                public static getClassDependencyFinder(): com.sun.tools.classfile.Dependency$Finder
                public getFinder(): com.sun.tools.classfile.Dependency$Finder
                public setFinder(arg0: com.sun.tools.classfile.Dependency$Finder): void
                public static getDefaultFilter(): com.sun.tools.classfile.Dependency$Filter
                public static getRegexFilter(arg0: java.util.regex.Pattern): com.sun.tools.classfile.Dependency$Filter
                public static getPackageFilter(arg0: java.util.Set<java.lang.String>, arg1: boolean): com.sun.tools.classfile.Dependency$Filter
                public getFilter(): com.sun.tools.classfile.Dependency$Filter
                public setFilter(arg0: com.sun.tools.classfile.Dependency$Filter): void
                findAllDependencies<T>(...args: any[]): any
            }
            interface ReferenceFinder$Filter {
                public accept(arg0: com.sun.tools.classfile.ConstantPool, arg1: com.sun.tools.classfile.ConstantPool$CPRefInfo): boolean
            }
            interface ReferenceFinder$Visitor {
                public visit(arg0: com.sun.tools.classfile.ClassFile, arg1: com.sun.tools.classfile.Method, arg2: java.util.List<com.sun.tools.classfile.ConstantPool$CPRefInfo>): void
            }
            class ReferenceFinder$1 implements com.sun.tools.classfile.ConstantPool$Visitor<java.lang.Boolean, com.sun.tools.classfile.ConstantPool> {
                this$0: com.sun.tools.classfile.ReferenceFinder
                constructor(arg0: com.sun.tools.classfile.ReferenceFinder)
                visitClass<T>(...args: any[]): any
                visitInterfaceMethodref<T>(...args: any[]): any
                visitMethodref<T>(...args: any[]): any
                visitFieldref<T>(...args: any[]): any
                visitDouble<T>(...args: any[]): any
                visitFloat<T>(...args: any[]): any
                visitInteger<T>(...args: any[]): any
                visitInvokeDynamic<T>(...args: any[]): any
                visitLong<T>(...args: any[]): any
                visitNameAndType<T>(...args: any[]): any
                visitMethodHandle<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitString<T>(...args: any[]): any
                visitUtf8<T>(...args: any[]): any
            }
            class ReferenceFinder$2 implements com.sun.tools.classfile.Instruction$KindVisitor<java.lang.Integer, java.util.List<java.lang.Integer>> {
                this$0: com.sun.tools.classfile.ReferenceFinder
                constructor(arg0: com.sun.tools.classfile.ReferenceFinder)
                visitNoOperands<T>(...args: any[]): any
                visitArrayType<T>(...args: any[]): any
                visitBranch<T>(...args: any[]): any
                visitConstantPoolRef<T>(...args: any[]): any
                visitConstantPoolRefAndValue<T>(...args: any[]): any
                visitLocal<T>(...args: any[]): any
                visitLocalAndValue<T>(...args: any[]): any
                visitLookupSwitch<T>(...args: any[]): any
                visitTableSwitch<T>(...args: any[]): any
                visitValue<T>(...args: any[]): any
                visitUnknown<T>(...args: any[]): any
            }
            class ReferenceFinder {
                public constructor(arg0: com.sun.tools.classfile.ReferenceFinder$Filter, arg1: com.sun.tools.classfile.ReferenceFinder$Visitor)
                public parse(arg0: com.sun.tools.classfile.ClassFile): boolean
                static access$000(arg0: com.sun.tools.classfile.ReferenceFinder): com.sun.tools.classfile.ReferenceFinder$Filter
            }
            class ClassWriter$ClassOutputStream extends java.io.ByteArrayOutputStream {
                public constructor()
                public writeByte(arg0: int): void
                public writeShort(arg0: int): void
                public writeInt(arg0: int): void
                public writeLong(arg0: long): void
                public writeFloat(arg0: float): void
                public writeDouble(arg0: double): void
                public writeUTF(arg0: java.lang.String): void
                public writeTo(arg0: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
            }
            class ClassWriter$ConstantPoolWriter implements com.sun.tools.classfile.ConstantPool$Visitor<java.lang.Integer, com.sun.tools.classfile.ClassWriter$ClassOutputStream> {
                protected constructor()
                protected write(arg0: com.sun.tools.classfile.ConstantPool$CPInfo, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): int
                visitClass<T>(...args: any[]): any
                visitDouble<T>(...args: any[]): any
                visitFieldref<T>(...args: any[]): any
                visitFloat<T>(...args: any[]): any
                visitInteger<T>(...args: any[]): any
                visitInterfaceMethodref<T>(...args: any[]): any
                visitInvokeDynamic<T>(...args: any[]): any
                visitLong<T>(...args: any[]): any
                visitNameAndType<T>(...args: any[]): any
                visitMethodHandle<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitMethodref<T>(...args: any[]): any
                visitString<T>(...args: any[]): any
                visitUtf8<T>(...args: any[]): any
                protected writeRef(arg0: com.sun.tools.classfile.ConstantPool$CPRefInfo, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): java.lang.Integer
            }
            class ClassWriter$AttributeWriter implements com.sun.tools.classfile.Attribute$Visitor<java.lang.Void, com.sun.tools.classfile.ClassWriter$ClassOutputStream> {
                protected sharedOut: com.sun.tools.classfile.ClassWriter$ClassOutputStream
                protected annotationWriter: com.sun.tools.classfile.ClassWriter$AnnotationWriter
                protected stackMapWriter: com.sun.tools.classfile.ClassWriter$StackMapTableWriter
                protected constructor()
                write<T>(...args: any[]): any
                visitDefault<T>(...args: any[]): any
                visitAnnotationDefault<T>(...args: any[]): any
                visitBootstrapMethods<T>(...args: any[]): any
                visitCharacterRangeTable<T>(...args: any[]): any
                protected writeCharacterRangeTableEntry(arg0: com.sun.tools.classfile.CharacterRangeTable_attribute$Entry, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visitCode<T>(...args: any[]): any
                protected writeExceptionTableEntry(arg0: com.sun.tools.classfile.Code_attribute$Exception_data, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visitCompilationID<T>(...args: any[]): any
                visitConstantValue<T>(...args: any[]): any
                visitDeprecated<T>(...args: any[]): any
                visitEnclosingMethod<T>(...args: any[]): any
                visitExceptions<T>(...args: any[]): any
                visitInnerClasses<T>(...args: any[]): any
                protected writeInnerClassesInfo(arg0: com.sun.tools.classfile.InnerClasses_attribute$Info, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visitLineNumberTable<T>(...args: any[]): any
                protected writeLineNumberTableEntry(arg0: com.sun.tools.classfile.LineNumberTable_attribute$Entry, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visitLocalVariableTable<T>(...args: any[]): any
                protected writeLocalVariableTableEntry(arg0: com.sun.tools.classfile.LocalVariableTable_attribute$Entry, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visitLocalVariableTypeTable<T>(...args: any[]): any
                protected writeLocalVariableTypeTableEntry(arg0: com.sun.tools.classfile.LocalVariableTypeTable_attribute$Entry, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visitMethodParameters<T>(...args: any[]): any
                visitRuntimeVisibleAnnotations<T>(...args: any[]): any
                visitRuntimeInvisibleAnnotations<T>(...args: any[]): any
                visitRuntimeVisibleTypeAnnotations<T>(...args: any[]): any
                visitRuntimeInvisibleTypeAnnotations<T>(...args: any[]): any
                visitRuntimeVisibleParameterAnnotations<T>(...args: any[]): any
                visitRuntimeInvisibleParameterAnnotations<T>(...args: any[]): any
                visitSignature<T>(...args: any[]): any
                visitSourceDebugExtension<T>(...args: any[]): any
                visitSourceFile<T>(...args: any[]): any
                visitSourceID<T>(...args: any[]): any
                visitStackMap<T>(...args: any[]): any
                visitStackMapTable<T>(...args: any[]): any
                visitSynthetic<T>(...args: any[]): any
                protected writeAccessFlags(arg0: com.sun.tools.classfile.AccessFlags, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
            }
            class ClassWriter$StackMapTableWriter implements com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame$Visitor<java.lang.Void, com.sun.tools.classfile.ClassWriter$ClassOutputStream> {
                protected constructor()
                public write(arg0: com.sun.tools.classfile.StackMapTable_attribute$stack_map_frame, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
                visit_same_frame<T>(...args: any[]): any
                visit_same_locals_1_stack_item_frame<T>(...args: any[]): any
                visit_same_locals_1_stack_item_frame_extended<T>(...args: any[]): any
                visit_chop_frame<T>(...args: any[]): any
                visit_same_frame_extended<T>(...args: any[]): any
                visit_append_frame<T>(...args: any[]): any
                visit_full_frame<T>(...args: any[]): any
                protected writeVerificationTypeInfo(arg0: com.sun.tools.classfile.StackMapTable_attribute$verification_type_info, arg1: com.sun.tools.classfile.ClassWriter$ClassOutputStream): void
            }
            class ClassWriter$AnnotationWriter implements com.sun.tools.classfile.Annotation$element_value$Visitor<java.lang.Void, com.sun.tools.classfile.ClassWriter$ClassOutputStream> {
                protected constructor()
                write<T>(...args: any[]): any
                visitPrimitive<T>(...args: any[]): any
                visitEnum<T>(...args: any[]): any
                visitClass<T>(...args: any[]): any
                visitAnnotation<T>(...args: any[]): any
                visitArray<T>(...args: any[]): any
            }
            class ClassWriter$1 {
                static $SwitchMap$com$sun$tools$classfile$TypeAnnotation$TargetType: int[]
            }
            class ClassWriter {
                protected classFile: com.sun.tools.classfile.ClassFile
                protected out: com.sun.tools.classfile.ClassWriter$ClassOutputStream
                protected attributeWriter: com.sun.tools.classfile.ClassWriter$AttributeWriter
                protected constantPoolWriter: com.sun.tools.classfile.ClassWriter$ConstantPoolWriter
                public constructor()
                write<T>(...args: any[]): any
                protected writeHeader(): void
                protected writeAccessFlags(arg0: com.sun.tools.classfile.AccessFlags): void
                protected writeAttributes(arg0: com.sun.tools.classfile.Attributes): void
                protected writeClassInfo(): void
                protected writeDescriptor(arg0: com.sun.tools.classfile.Descriptor): void
                protected writeConstantPool(): void
                protected writeFields(): void
                protected writeField(arg0: com.sun.tools.classfile.Field): void
                protected writeMethods(): void
                protected writeMethod(arg0: com.sun.tools.classfile.Method): void
            }
            class ClassTranslator implements com.sun.tools.classfile.ConstantPool$Visitor<com.sun.tools.classfile.ConstantPool$CPInfo, java.util.Map<java.lang.Object, java.lang.Object>> {
                public constructor()
                translate<T>(...args: any[]): any
                translateMethods(arg0: com.sun.tools.classfile.Method[], arg1: com.sun.tools.classfile.ConstantPool, arg2: java.util.Map<java.lang.Object, java.lang.Object>): com.sun.tools.classfile.Method[]
                translateAttributes(arg0: com.sun.tools.classfile.Attributes, arg1: com.sun.tools.classfile.ConstantPool, arg2: java.util.Map<java.lang.Object, java.lang.Object>): com.sun.tools.classfile.Attributes
                visitClass<T>(...args: any[]): any
                visitDouble<T>(...args: any[]): any
                visitFieldref<T>(...args: any[]): any
                visitFloat<T>(...args: any[]): any
                visitInteger<T>(...args: any[]): any
                visitInterfaceMethodref<T>(...args: any[]): any
                visitInvokeDynamic<T>(...args: any[]): any
                visitLong<T>(...args: any[]): any
                visitNameAndType<T>(...args: any[]): any
                visitMethodref<T>(...args: any[]): any
                visitMethodHandle<T>(...args: any[]): any
                visitMethodType<T>(...args: any[]): any
                visitString<T>(...args: any[]): any
                visitUtf8<T>(...args: any[]): any
            }

         }
         namespace jdeps {
            class Profile$PackageToProfile {
                static JAVAX_CRYPTO_PKGS: java.lang.String[]
                static map: java.util.Map<java.lang.String, com.sun.tools.jdeps.Profile>
                constructor()
            }
            class Profile extends java.lang.Enum<com.sun.tools.jdeps.Profile> {
                public static COMPACT1: com.sun.tools.jdeps.Profile
                public static COMPACT2: com.sun.tools.jdeps.Profile
                public static COMPACT3: com.sun.tools.jdeps.Profile
                public static FULL_JRE: com.sun.tools.jdeps.Profile
                name: java.lang.String
                profile: int
                packages: java.util.Set<java.lang.String>
                proprietaryPkgs: java.util.Set<java.lang.String>
                public static values(): com.sun.tools.jdeps.Profile[]
                valueOf<T>(...args: any[]): any
                public profileName(): java.lang.String
                public static getProfileCount(): int
                public static getProfile(arg0: java.lang.String): com.sun.tools.jdeps.Profile
                public static main(arg0: java.lang.String[]): void
            }
            class PlatformClassPath$1 extends java.nio.file.SimpleFileVisitor<java.nio.file.Path> {
                val$root: java.nio.file.Path
                val$ext: java.nio.file.Path
                val$result: java.util.List
                constructor(arg0: java.nio.file.Path, arg1: java.nio.file.Path, arg2: java.util.List)
                preVisitDirectory<T>(...args: any[]): any
                visitFile<T>(...args: any[]): any
            }
            class PlatformClassPath$JDKArchive extends com.sun.tools.jdeps.Archive {
                public static isProfileArchive(arg0: com.sun.tools.jdeps.Archive): boolean
                constructor(arg0: java.nio.file.Path)
                public isExported(arg0: java.lang.String): boolean
                public isExportedPackage(arg0: java.lang.String): boolean
                processJdkExported(arg0: com.sun.tools.classfile.ClassFile): void
            }
            class PlatformClassPath {
                constructor()
                static getArchives(): java.util.List<com.sun.tools.jdeps.Archive>
                static access$000(): java.util.List
            }
            interface Archive$Visitor {
                public visit(arg0: com.sun.tools.classfile.Dependency$Location, arg1: com.sun.tools.classfile.Dependency$Location): void
            }
            class Archive {
                protected deps: java.util.Map<com.sun.tools.classfile.Dependency$Location, java.util.Set<com.sun.tools.classfile.Dependency$Location>>
                public static getInstance(arg0: java.nio.file.Path): com.sun.tools.jdeps.Archive
                constructor(...args: any[])
                public reader(): com.sun.tools.jdeps.ClassFileReader
                public getName(): java.lang.String
                addClass<T>(...args: any[]): any
                public getClasses(): java.util.Set<com.sun.tools.classfile.Dependency$Location>
                public visitDependences(arg0: com.sun.tools.jdeps.Archive$Visitor): void
                public isEmpty(): boolean
                public getPathName(): java.lang.String
                toString<T>(...args: any[]): any
            }
            class ClassFileReader$1 implements java.lang.Iterable<com.sun.tools.classfile.ClassFile> {
                this$0: com.sun.tools.jdeps.ClassFileReader
                constructor(arg0: com.sun.tools.jdeps.ClassFileReader)
                public iterator(): java.util.Iterator<com.sun.tools.classfile.ClassFile>
            }
            class ClassFileReader$FileIterator implements java.util.Iterator<com.sun.tools.classfile.ClassFile> {
                count: int
                this$0: com.sun.tools.jdeps.ClassFileReader
                constructor(arg0: com.sun.tools.jdeps.ClassFileReader)
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class ClassFileReader$DirectoryReader$1 implements java.lang.Iterable<com.sun.tools.classfile.ClassFile> {
                val$iter: java.util.Iterator
                this$0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader
                constructor(arg0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader, arg1: java.util.Iterator)
                public iterator(): java.util.Iterator<com.sun.tools.classfile.ClassFile>
            }
            class ClassFileReader$DirectoryReader$2 extends java.nio.file.SimpleFileVisitor<java.nio.file.Path> {
                val$files: java.util.List
                this$0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader
                constructor(arg0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader, arg1: java.util.List)
                visitFile<T>(...args: any[]): any
            }
            class ClassFileReader$DirectoryReader$DirectoryIterator implements java.util.Iterator<com.sun.tools.classfile.ClassFile> {
                this$0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader
                constructor(arg0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader)
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class ClassFileReader$DirectoryReader extends com.sun.tools.jdeps.ClassFileReader {
                constructor(arg0: java.nio.file.Path)
                public getClassFile(arg0: java.lang.String): com.sun.tools.classfile.ClassFile
                public getClassFiles(): java.lang.Iterable<com.sun.tools.classfile.ClassFile>
                static access$000(arg0: com.sun.tools.jdeps.ClassFileReader$DirectoryReader, arg1: java.nio.file.Path): java.util.List
            }
            class ClassFileReader$JarFileReader$1 implements java.lang.Iterable<com.sun.tools.classfile.ClassFile> {
                val$iter: java.util.Iterator
                this$0: com.sun.tools.jdeps.ClassFileReader$JarFileReader
                constructor(arg0: com.sun.tools.jdeps.ClassFileReader$JarFileReader, arg1: java.util.Iterator)
                public iterator(): java.util.Iterator<com.sun.tools.classfile.ClassFile>
            }
            class ClassFileReader$JarFileReader extends com.sun.tools.jdeps.ClassFileReader {
                constructor(...args: any[])
                public getClassFile(arg0: java.lang.String): com.sun.tools.classfile.ClassFile
                protected readClassFile(arg0: java.util.jar.JarFile, arg1: java.util.jar.JarEntry): com.sun.tools.classfile.ClassFile
                public getClassFiles(): java.lang.Iterable<com.sun.tools.classfile.ClassFile>
            }
            class ClassFileReader$JarFileIterator implements java.util.Iterator<com.sun.tools.classfile.ClassFile> {
                protected reader: com.sun.tools.jdeps.ClassFileReader$JarFileReader
                protected entries: java.util.Enumeration<java.util.jar.JarEntry>
                protected jf: java.util.jar.JarFile
                nextEntry<T>(...args: any[]): any
                protected cf: com.sun.tools.classfile.ClassFile
                this$0: com.sun.tools.jdeps.ClassFileReader
                constructor(...args: any[])
                setJarFile(arg0: java.util.jar.JarFile): void
                public hasNext(): boolean
                next<T>(...args: any[]): any
                public remove(): void
            }
            class ClassFileReader {
                protected path: java.nio.file.Path
                protected baseFileName: java.lang.String
                skippedEntries<T>(...args: any[]): any
                newInstance<T>(...args: any[]): any
                protected constructor(arg0: java.nio.file.Path)
                public getFileName(): java.lang.String
                public getClassFile(arg0: java.lang.String): com.sun.tools.classfile.ClassFile
                public getClassFiles(): java.lang.Iterable<com.sun.tools.classfile.ClassFile>
                protected readClassFile(arg0: java.nio.file.Path): com.sun.tools.classfile.ClassFile
                toString<T>(...args: any[]): any
            }
            class Main {
                public constructor()
                public static main(...arg0: java.lang.String[]): void
                public static run(arg0: java.lang.String[], arg1: java.io.PrintWriter): int
            }
            class Analyzer$Type extends java.lang.Enum<com.sun.tools.jdeps.Analyzer$Type> {
                public static SUMMARY: com.sun.tools.jdeps.Analyzer$Type
                public static PACKAGE: com.sun.tools.jdeps.Analyzer$Type
                public static CLASS: com.sun.tools.jdeps.Analyzer$Type
                public static VERBOSE: com.sun.tools.jdeps.Analyzer$Type
                public static values(): com.sun.tools.jdeps.Analyzer$Type[]
                valueOf<T>(...args: any[]): any
            }
            interface Analyzer$Filter {
                public accepts(arg0: com.sun.tools.classfile.Dependency$Location, arg1: com.sun.tools.jdeps.Archive, arg2: com.sun.tools.classfile.Dependency$Location, arg3: com.sun.tools.jdeps.Archive): boolean
            }
            interface Analyzer$Visitor {
                public visitDependence(arg0: java.lang.String, arg1: com.sun.tools.jdeps.Archive, arg2: java.lang.String, arg3: com.sun.tools.jdeps.Archive): void
            }
            class Analyzer$ArchiveDeps implements com.sun.tools.jdeps.Archive$Visitor {
                protected archive: com.sun.tools.jdeps.Archive
                requires<T>(...args: any[]): any
                protected deps: java.util.Set<com.sun.tools.jdeps.Analyzer$Dep>
                protected level: com.sun.tools.jdeps.Analyzer$Type
                this$0: com.sun.tools.jdeps.Analyzer
                constructor(arg0: com.sun.tools.jdeps.Analyzer, arg1: com.sun.tools.jdeps.Archive, arg2: com.sun.tools.jdeps.Analyzer$Type)
                dependencies(): java.util.Set<com.sun.tools.jdeps.Analyzer$Dep>
                targetDependences(): java.util.Set<java.lang.String>
                getTargetProfile(arg0: com.sun.tools.jdeps.Archive): com.sun.tools.jdeps.Profile
                findArchive(arg0: com.sun.tools.classfile.Dependency$Location): com.sun.tools.jdeps.Archive
                public visit(arg0: com.sun.tools.classfile.Dependency$Location, arg1: com.sun.tools.classfile.Dependency$Location): void
                protected addDep(arg0: com.sun.tools.classfile.Dependency$Location, arg1: com.sun.tools.classfile.Dependency$Location): com.sun.tools.jdeps.Analyzer$Dep
            }
            class Analyzer$Dep implements java.lang.Comparable<com.sun.tools.jdeps.Analyzer$Dep> {
                origin<T>(...args: any[]): any
                originArchive<T>(...args: any[]): any
                target<T>(...args: any[]): any
                targetArchive<T>(...args: any[]): any
                this$0: com.sun.tools.jdeps.Analyzer
                constructor(arg0: com.sun.tools.jdeps.Analyzer, arg1: java.lang.String, arg2: com.sun.tools.jdeps.Archive, arg3: java.lang.String, arg4: com.sun.tools.jdeps.Archive)
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                compareTo<T>(...args: any[]): any
            }
            class Analyzer {
                public constructor(arg0: com.sun.tools.jdeps.Analyzer$Type, arg1: com.sun.tools.jdeps.Analyzer$Filter)
                public run(arg0: java.util.List<com.sun.tools.jdeps.Archive>): void
                public hasDependences(arg0: com.sun.tools.jdeps.Archive): boolean
                public dependences(arg0: com.sun.tools.jdeps.Archive): java.util.Set<java.lang.String>
                visitDependences<T>(...args: any[]): any
                static access$000(arg0: com.sun.tools.jdeps.Analyzer): java.util.Map
                static access$100(arg0: com.sun.tools.jdeps.Analyzer): com.sun.tools.jdeps.Archive
                static access$200(arg0: com.sun.tools.jdeps.Analyzer): com.sun.tools.jdeps.Analyzer$Filter
            }
            class JdepsTask$BadArgs extends java.lang.Exception {
                static serialVersionUID: long
                key: java.lang.String
                args: java.lang.Object[]
                showUsage<T>(...args: any[]): any
                constructor(arg0: java.lang.String, ...arg1: java.lang.Object[])
            }
            abstract class JdepsTask$Option {
                hasArg: boolean
                aliases: java.lang.String[]
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                isHidden(): boolean
                matches(arg0: java.lang.String): boolean
                ignoreRest(): boolean
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            abstract class JdepsTask$HiddenOption extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                isHidden(): boolean
            }
            class JdepsTask$1 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$2 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$3 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$4 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$5 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$6 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$7 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$8 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$9 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$10 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$11 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$12 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$13 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$14 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$15 extends com.sun.tools.jdeps.JdepsTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$16 extends com.sun.tools.jdeps.JdepsTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$17 extends com.sun.tools.jdeps.JdepsTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$18 extends com.sun.tools.jdeps.JdepsTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$19 extends com.sun.tools.jdeps.JdepsTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JdepsTask$20 implements com.sun.tools.jdeps.Analyzer$Filter {
                this$0: com.sun.tools.jdeps.JdepsTask
                constructor(arg0: com.sun.tools.jdeps.JdepsTask)
                public accepts(arg0: com.sun.tools.classfile.Dependency$Location, arg1: com.sun.tools.jdeps.Archive, arg2: com.sun.tools.classfile.Dependency$Location, arg3: com.sun.tools.jdeps.Archive): boolean
            }
            class JdepsTask$DependencyFilter implements com.sun.tools.classfile.Dependency$Filter {
                filter: com.sun.tools.classfile.Dependency$Filter
                filterPattern: java.util.regex.Pattern
                this$0: com.sun.tools.jdeps.JdepsTask
                constructor(arg0: com.sun.tools.jdeps.JdepsTask)
                public accepts(arg0: com.sun.tools.classfile.Dependency): boolean
            }
            class JdepsTask$Options {
                help: boolean
                version: boolean
                fullVersion: boolean
                showProfile: boolean
                showSummary: boolean
                apiOnly: boolean
                showLabel: boolean
                findJDKInternals: boolean
                nowarning: boolean
                verbose: com.sun.tools.jdeps.Analyzer$Type
                filterSamePackage: boolean
                filterSameArchive: boolean
                filterRegex: java.lang.String
                dotOutputDir: java.lang.String
                classpath: java.lang.String
                depth: int
                packageNames: java.util.Set<java.lang.String>
                regex: java.lang.String
                includePattern: java.util.regex.Pattern
                constructor(arg0: com.sun.tools.jdeps.JdepsTask$1)
            }
            class JdepsTask$ResourceBundleHelper {
                static versionRB: java.util.ResourceBundle
                static bundle: java.util.ResourceBundle
                static jdkinternals: java.util.ResourceBundle
            }
            class JdepsTask$RawOutputFormatter implements com.sun.tools.jdeps.Analyzer$Visitor {
                this$0: com.sun.tools.jdeps.JdepsTask
                constructor(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.io.PrintWriter)
                public visitDependence(arg0: java.lang.String, arg1: com.sun.tools.jdeps.Archive, arg2: java.lang.String, arg3: com.sun.tools.jdeps.Archive): void
            }
            class JdepsTask$RawSummaryFormatter implements com.sun.tools.jdeps.Analyzer$Visitor {
                this$0: com.sun.tools.jdeps.JdepsTask
                constructor(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.io.PrintWriter)
                public visitDependence(arg0: java.lang.String, arg1: com.sun.tools.jdeps.Archive, arg2: java.lang.String, arg3: com.sun.tools.jdeps.Archive): void
            }
            class JdepsTask$DotFileFormatter implements com.sun.tools.jdeps.Analyzer$Visitor , java.lang.AutoCloseable {
                this$0: com.sun.tools.jdeps.JdepsTask
                constructor(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.io.PrintWriter, arg2: com.sun.tools.jdeps.Archive)
                public close(): void
                public visitDependence(arg0: java.lang.String, arg1: com.sun.tools.jdeps.Archive, arg2: java.lang.String, arg3: com.sun.tools.jdeps.Archive): void
            }
            class JdepsTask$SummaryDotFile$1 implements com.sun.tools.jdeps.Analyzer$Visitor {
                this$1: com.sun.tools.jdeps.JdepsTask$SummaryDotFile
                constructor(arg0: com.sun.tools.jdeps.JdepsTask$SummaryDotFile)
                public visitDependence(arg0: java.lang.String, arg1: com.sun.tools.jdeps.Archive, arg2: java.lang.String, arg3: com.sun.tools.jdeps.Archive): void
                addLabel(arg0: java.lang.StringBuilder, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
            }
            class JdepsTask$SummaryDotFile implements com.sun.tools.jdeps.Analyzer$Visitor , java.lang.AutoCloseable {
                this$0: com.sun.tools.jdeps.JdepsTask
                constructor(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.io.PrintWriter, arg2: com.sun.tools.jdeps.Analyzer$Type)
                public close(): void
                public visitDependence(arg0: java.lang.String, arg1: com.sun.tools.jdeps.Archive, arg2: java.lang.String, arg3: com.sun.tools.jdeps.Archive): void
                getLabel(arg0: com.sun.tools.jdeps.Archive, arg1: com.sun.tools.jdeps.Archive): java.lang.String
                labelBuilder(): com.sun.tools.jdeps.Analyzer$Visitor
                static access$500(arg0: com.sun.tools.jdeps.JdepsTask$SummaryDotFile): java.util.Map
            }
            class JdepsTask {
                static recognizedOptions: com.sun.tools.jdeps.JdepsTask$Option[]
                static EXIT_OK: int
                static EXIT_ERROR: int
                static EXIT_CMDERR: int
                static EXIT_SYSERR: int
                static EXIT_ABNORMAL: int
                constructor()
                setLog(arg0: java.io.PrintWriter): void
                run(arg0: java.lang.String[]): int
                public handleOptions(arg0: java.lang.String[]): void
                static getMessage(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                static access$000(arg0: com.sun.tools.jdeps.JdepsTask): com.sun.tools.jdeps.JdepsTask$Options
                static access$200(arg0: com.sun.tools.jdeps.JdepsTask, arg1: com.sun.tools.jdeps.Archive): boolean
                static access$300(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: com.sun.tools.jdeps.Archive): java.lang.String
                static access$400(arg0: com.sun.tools.jdeps.JdepsTask, arg1: java.lang.String, arg2: com.sun.tools.jdeps.Archive, arg3: com.sun.tools.jdeps.Analyzer$Type): java.lang.String
            }
            namespace resources {
               class version extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class jdeps extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class jdeps_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class jdeps_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class jdkinternals extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }

         }
         namespace javah {
            class Util$Exit extends java.lang.Error {
                public exitValue: int
                public cause: java.lang.Throwable
                constructor(...args: any[])
            }
            class Util$1 implements javax.tools.Diagnostic<javax.tools.JavaFileObject> {
                val$code: java.lang.String
                val$kind: javax.tools.Diagnostic$Kind
                val$args: java.lang.Object[]
                this$0: com.sun.tools.javah.Util
                constructor(arg0: com.sun.tools.javah.Util, arg1: java.lang.String, arg2: javax.tools.Diagnostic$Kind, arg3: java.lang.Object[])
                public getCode(): java.lang.String
                public getColumnNumber(): long
                public getEndPosition(): long
                public getKind(): javax.tools.Diagnostic$Kind
                public getLineNumber(): long
                public getMessage(arg0: java.util.Locale): java.lang.String
                public getPosition(): long
                getSource<T>(...args: any[]): any
                public getStartPosition(): long
            }
            class Util {
                public verbose: boolean
                log<T>(...args: any[]): any
                public dl: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>
                constructor(arg0: java.io.PrintWriter, arg1: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>)
                public usage(): void
                public version(): void
                bug<T>(...args: any[]): any
                public error(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                static access$000(arg0: com.sun.tools.javah.Util, arg1: java.lang.String, arg2: java.lang.Object[]): java.lang.String
            }
            class TypeSignature$SignatureException extends java.lang.Exception {
                constructor(arg0: java.lang.String)
            }
            class TypeSignature$1 extends javax.lang.model.util.SimpleTypeVisitor8<javax.lang.model.element.Name, java.lang.Void> {
                this$0: com.sun.tools.javah.TypeSignature
                constructor(arg0: com.sun.tools.javah.TypeSignature)
                visitArray<T>(...args: any[]): any
                visitDeclared<T>(...args: any[]): any
                visitPrimitive<T>(...args: any[]): any
                visitNoType<T>(...args: any[]): any
                visitTypeVariable<T>(...args: any[]): any
            }
            class TypeSignature {
                elems: javax.lang.model.util.Elements
                public constructor(arg0: javax.lang.model.util.Elements)
                getTypeSignature<T>(...args: any[]): any
                dimensions(arg0: javax.lang.model.type.TypeMirror): int
                qualifiedTypeName(arg0: javax.lang.model.type.TypeMirror): java.lang.String
            }
            interface NativeHeaderTool$NativeHeaderTask extends java.util.concurrent.Callable<java.lang.Boolean> {
                public setLocale(arg0: java.util.Locale): void
                call<T>(...args: any[]): any
            }
            interface NativeHeaderTool extends javax.tools.Tool , javax.tools.OptionChecker {
                public getTask(arg0: java.io.Writer, arg1: javax.tools.JavaFileManager, arg2: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg3: java.lang.Iterable<java.lang.String>, arg4: java.lang.Iterable<java.lang.String>): com.sun.tools.javah.NativeHeaderTool$NativeHeaderTask
                public getStandardFileManager(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.util.Locale, arg2: java.nio.charset.Charset): javax.tools.StandardJavaFileManager
            }
            class Mangle$Type {
                public static CLASS: int
                public static FIELDSTUB: int
                public static FIELD: int
                public static JNI: int
                public static SIGNATURE: int
                public static METHOD_JDK_1: int
                public static METHOD_JNI_SHORT: int
                public static METHOD_JNI_LONG: int
                public constructor()
            }
            class Mangle {
                constructor(arg0: javax.lang.model.util.Elements, arg1: javax.lang.model.util.Types)
                public mangle(arg0: java.lang.CharSequence, arg1: int): java.lang.String
                public mangleMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.TypeElement, arg2: int): java.lang.String
                public mangleChar(arg0: char): java.lang.String
            }
            class Main {
                public constructor()
                public static main(arg0: java.lang.String[]): void
                public static run(arg0: java.lang.String[], arg1: java.io.PrintWriter): int
            }
            class LLNI$FieldDefsRes {
                public className: java.lang.String
                public parent: com.sun.tools.javah.LLNI$FieldDefsRes
                public s: java.lang.String
                public byteSize: int
                public bottomMost: boolean
                public printedOne: boolean
                constructor(arg0: javax.lang.model.element.TypeElement, arg1: com.sun.tools.javah.LLNI$FieldDefsRes, arg2: boolean)
            }
            class LLNI$1 extends javax.lang.model.util.SimpleTypeVisitor8<java.lang.Boolean, java.lang.Void> {
                this$0: com.sun.tools.javah.LLNI
                constructor(arg0: com.sun.tools.javah.LLNI)
                defaultAction<T>(...args: any[]): any
                visitArray<T>(...args: any[]): any
                visitPrimitive<T>(...args: any[]): any
            }
            class LLNI$2 {
                static $SwitchMap$javax$lang$model$type$TypeKind: int[]
            }
            class LLNI extends com.sun.tools.javah.Gen {
                protected innerDelim: char
                protected doneHandleTypes: java.util.Set<java.lang.String>
                fields: java.util.List<javax.lang.model.element.VariableElement>
                methods: java.util.List<javax.lang.model.element.ExecutableElement>
                constructor(arg0: boolean, arg1: com.sun.tools.javah.Util)
                protected getIncludes(): java.lang.String
                protected write(arg0: java.io.OutputStream, arg1: javax.lang.model.element.TypeElement): void
                protected generateDeclsForClass(arg0: java.io.PrintWriter, arg1: javax.lang.model.element.TypeElement, arg2: java.lang.String): void
                protected genHandleType(arg0: java.io.PrintWriter, arg1: java.lang.String): void
                protected mangleClassName(arg0: java.lang.String): java.lang.String
                protected forwardDecls(arg0: java.io.PrintWriter, arg1: javax.lang.model.element.TypeElement): void
                protected forwardDeclsFromSig(arg0: java.io.PrintWriter, arg1: java.lang.String): void
                protected structSectionForClass(arg0: java.io.PrintWriter, arg1: javax.lang.model.element.TypeElement, arg2: java.lang.String): void
                fieldDefs<T>(...args: any[]): any
                protected addStructMember(arg0: javax.lang.model.element.VariableElement, arg1: java.lang.String, arg2: boolean): java.lang.String
                protected addStaticStructMember(arg0: javax.lang.model.element.VariableElement, arg1: java.lang.String): java.lang.String
                protected methodSectionForClass(arg0: java.io.PrintWriter, arg1: javax.lang.model.element.TypeElement, arg2: java.lang.String): void
                protected methodDecls(arg0: javax.lang.model.element.TypeElement, arg1: java.lang.String): java.lang.String
                protected methodDecl(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.TypeElement, arg2: java.lang.String): java.lang.String
                protected needLongName(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.TypeElement): boolean
                protected jniMethodName(arg0: javax.lang.model.element.ExecutableElement, arg1: java.lang.String, arg2: boolean): java.lang.String
                protected jniType(arg0: javax.lang.model.type.TypeMirror): java.lang.String
                protected llniType(arg0: javax.lang.model.type.TypeMirror, arg1: boolean, arg2: boolean): java.lang.String
                protected cRcvrDecl(arg0: javax.lang.model.element.Element, arg1: java.lang.String): java.lang.String
                protected maskName(arg0: java.lang.String): java.lang.String
                protected llniFieldName(arg0: javax.lang.model.element.VariableElement): java.lang.String
                protected isLongOrDouble(arg0: javax.lang.model.type.TypeMirror): boolean
                protected nameToIdentifier(arg0: java.lang.String): java.lang.String
                protected isASCIILetterOrDigit(arg0: char): boolean
            }
            abstract class Gen {
                protected lineSep: java.lang.String
                protected processingEnvironment: javax.annotation.processing.ProcessingEnvironment
                protected types: javax.lang.model.util.Types
                protected elems: javax.lang.model.util.Elements
                protected mangler: com.sun.tools.javah.Mangle
                protected util: com.sun.tools.javah.Util
                protected classes: java.util.Set<javax.lang.model.element.TypeElement>
                protected fileManager: javax.tools.JavaFileManager
                protected outFile: javax.tools.JavaFileObject
                protected force: boolean
                protected constructor(arg0: com.sun.tools.javah.Util)
                protected write(arg0: java.io.OutputStream, arg1: javax.lang.model.element.TypeElement): void
                protected getIncludes(): java.lang.String
                public setFileManager(arg0: javax.tools.JavaFileManager): void
                public setOutFile(arg0: javax.tools.JavaFileObject): void
                public setClasses(arg0: java.util.Set<javax.lang.model.element.TypeElement>): void
                setProcessingEnvironment(arg0: javax.annotation.processing.ProcessingEnvironment): void
                public setForce(arg0: boolean): void
                protected wrapWriter(arg0: java.io.OutputStream): java.io.PrintWriter
                public run(): void
                protected readBytes(arg0: java.io.InputStream): byte[]
                protected defineForStatic(arg0: javax.lang.model.element.TypeElement, arg1: javax.lang.model.element.VariableElement): java.lang.String
                protected cppGuardBegin(): java.lang.String
                protected cppGuardEnd(): java.lang.String
                protected guardBegin(arg0: java.lang.String): java.lang.String
                protected guardEnd(arg0: java.lang.String): java.lang.String
                protected writeFileTop(arg0: java.io.OutputStream): void
                protected baseFileName(arg0: java.lang.CharSequence): java.lang.String
                protected getFileObject(arg0: java.lang.CharSequence): javax.tools.FileObject
                protected getFileSuffix(): java.lang.String
                getAllFields(arg0: javax.lang.model.element.TypeElement): java.util.List<javax.lang.model.element.VariableElement>
                signature(arg0: javax.lang.model.element.ExecutableElement): java.lang.String
            }
            class JavahTool implements com.sun.tools.javah.NativeHeaderTool {
                public constructor()
                public getTask(arg0: java.io.Writer, arg1: javax.tools.JavaFileManager, arg2: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg3: java.lang.Iterable<java.lang.String>, arg4: java.lang.Iterable<java.lang.String>): com.sun.tools.javah.NativeHeaderTool$NativeHeaderTask
                public getStandardFileManager(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.util.Locale, arg2: java.nio.charset.Charset): javax.tools.StandardJavaFileManager
                public run(arg0: java.io.InputStream, arg1: java.io.OutputStream, arg2: java.io.OutputStream, ...arg3: java.lang.String[]): int
                public getSourceVersions(): java.util.Set<javax.lang.model.SourceVersion>
                public isSupportedOption(arg0: java.lang.String): int
            }
            class JavahTask$BadArgs extends java.lang.Exception {
                key: java.lang.String
                args: java.lang.Object[]
                showUsage<T>(...args: any[]): any
                this$0: com.sun.tools.javah.JavahTask
                constructor(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, ...arg2: java.lang.Object[])
            }
            abstract class JavahTask$Option {
                hasArg: boolean
                aliases: java.lang.String[]
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                isHidden(): boolean
                matches(arg0: java.lang.String): boolean
                ignoreRest(): boolean
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            abstract class JavahTask$HiddenOption extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                isHidden(): boolean
            }
            class JavahTask$1 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$2 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$3 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$4 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$5 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$6 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$7 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$8 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$9 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$10 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$11 extends com.sun.tools.javah.JavahTask$Option {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$12 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$13 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$14 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$15 extends com.sun.tools.javah.JavahTask$HiddenOption {
                constructor(arg0: boolean, ...arg1: java.lang.String[])
                matches(arg0: java.lang.String): boolean
                process(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class JavahTask$16 implements javax.tools.DiagnosticListener<javax.tools.JavaFileObject> {
                val$pw: java.io.PrintWriter
                this$0: com.sun.tools.javah.JavahTask
                constructor(arg0: com.sun.tools.javah.JavahTask, arg1: java.io.PrintWriter)
                public report(arg0: javax.tools.Diagnostic<javax.tools.JavaFileObject>): void
            }
            class JavahTask$17 implements javax.tools.Diagnostic<javax.tools.JavaFileObject> {
                val$key: java.lang.String
                val$args: java.lang.Object[]
                this$0: com.sun.tools.javah.JavahTask
                constructor(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.Object[])
                public getKind(): javax.tools.Diagnostic$Kind
                getSource<T>(...args: any[]): any
                public getPosition(): long
                public getStartPosition(): long
                public getEndPosition(): long
                public getLineNumber(): long
                public getColumnNumber(): long
                public getCode(): java.lang.String
                public getMessage(arg0: java.util.Locale): java.lang.String
            }
            class JavahTask$JavahProcessor$1 extends javax.lang.model.util.SimpleTypeVisitor8<java.lang.Void, javax.lang.model.util.Types> {
                this$1: com.sun.tools.javah.JavahTask$JavahProcessor
                constructor(arg0: com.sun.tools.javah.JavahTask$JavahProcessor)
                visitArray<T>(...args: any[]): any
                visitDeclared<T>(...args: any[]): any
            }
            class JavahTask$JavahProcessor extends javax.annotation.processing.AbstractProcessor {
                this$0: com.sun.tools.javah.JavahTask
                constructor(arg0: com.sun.tools.javah.JavahTask, arg1: com.sun.tools.javah.Gen)
                public getSupportedSourceVersion(): javax.lang.model.SourceVersion
                public init(arg0: javax.annotation.processing.ProcessingEnvironment): void
                public process(arg0: java.util.Set<javax.lang.model.element.TypeElement>, arg1: javax.annotation.processing.RoundEnvironment): boolean
                static access$100(arg0: com.sun.tools.javah.JavahTask$JavahProcessor): com.sun.tools.javah.Util$Exit
            }
            class JavahTask implements com.sun.tools.javah.NativeHeaderTool$NativeHeaderTask {
                static recognizedOptions: com.sun.tools.javah.JavahTask$Option[]
                ofile: java.io.File
                odir: java.io.File
                bootcp: java.lang.String
                usercp: java.lang.String
                classes: java.util.List<java.lang.String>
                verbose: boolean
                noArgs: boolean
                help: boolean
                trace: boolean
                version: boolean
                fullVersion: boolean
                jni: boolean
                llni: boolean
                doubleAlign: boolean
                force: boolean
                javac_extras: java.util.Set<java.lang.String>
                log: java.io.PrintWriter
                fileManager: javax.tools.JavaFileManager
                diagnosticListener: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>
                task_locale: java.util.Locale
                bundles: java.util.Map<java.util.Locale, java.util.ResourceBundle>
                constructor(...args: any[])
                public setLocale(arg0: java.util.Locale): void
                setLog<T>(...args: any[]): any
                static getPrintWriterForStream(arg0: java.io.OutputStream): java.io.PrintWriter
                static getPrintWriterForWriter(arg0: java.io.Writer): java.io.PrintWriter
                setDiagnosticListener<T>(...args: any[]): any
                run<T>(...args: any[]): any
                public handleOptions(arg0: java.lang.String[]): void
                call<T>(...args: any[]): any
                static getDefaultFileManager(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.io.PrintWriter): javax.tools.StandardJavaFileManager
                static access$000(arg0: com.sun.tools.javah.JavahTask, arg1: java.lang.String, arg2: java.lang.Object[]): java.lang.String
                static access$200(arg0: com.sun.tools.javah.JavahTask, arg1: java.util.Locale, arg2: java.lang.String, arg3: java.lang.Object[]): java.lang.String
            }
            class JavahFileManager extends com.sun.tools.javac.file.JavacFileManager {
                static create(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.io.PrintWriter): com.sun.tools.javah.JavahFileManager
            }
            class JNI$1 {
                static $SwitchMap$javax$lang$model$type$TypeKind: int[]
            }
            class JNI extends com.sun.tools.javah.Gen {
                constructor(arg0: com.sun.tools.javah.Util)
                public getIncludes(): java.lang.String
                public write(arg0: java.io.OutputStream, arg1: javax.lang.model.element.TypeElement): void
                protected jniType(arg0: javax.lang.model.type.TypeMirror): java.lang.String
            }
            class InternalError extends java.lang.Error {
                constructor(arg0: java.lang.String, arg1: java.lang.Throwable)
            }
            namespace resources {
               class version extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class l10n extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class l10n_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class l10n_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }

         }
         namespace javadoc {
            class DocEnv {
                protected static docEnvKey: com.sun.tools.javac.util.Context$Key<com.sun.tools.javadoc.DocEnv>
                doclocale: com.sun.tools.javadoc.DocLocale
                syms: com.sun.tools.javac.code.Symtab
                reader: com.sun.tools.javadoc.JavadocClassReader
                enter: com.sun.tools.javadoc.JavadocEnter
                externalizableSym: com.sun.tools.javac.code.Symbol
                protected showAccess: com.sun.tools.javadoc.ModifierFilter
                breakiterator: boolean
                quiet: boolean
                chk: com.sun.tools.javac.comp.Check
                types: com.sun.tools.javac.code.Types
                fileManager: javax.tools.JavaFileManager
                context: com.sun.tools.javac.util.Context
                doclint: com.sun.tools.doclint.DocLint
                javaScriptScanner: com.sun.tools.javadoc.JavaScriptScanner
                treePaths: java.util.WeakHashMap<com.sun.tools.javac.tree.JCTree, com.sun.source.util.TreePath>
                docClasses: boolean
                protected legacyDoclet: boolean
                protected source: com.sun.tools.javac.code.Source
                protected packageMap: java.util.Map<com.sun.tools.javac.code.Symbol$PackageSymbol, com.sun.tools.javadoc.PackageDocImpl>
                protected classMap: java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javadoc.ClassDocImpl>
                protected fieldMap: java.util.Map<com.sun.tools.javac.code.Symbol$VarSymbol, com.sun.tools.javadoc.FieldDocImpl>
                protected methodMap: java.util.Map<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javadoc.ExecutableMemberDocImpl>
                static $assertionsDisabled: boolean
                public static instance(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javadoc.DocEnv
                protected constructor(arg0: com.sun.tools.javac.util.Context)
                public setSilent(arg0: boolean): void
                public lookupClass(arg0: java.lang.String): com.sun.tools.javadoc.ClassDocImpl
                public loadClass(arg0: java.lang.String): com.sun.tools.javadoc.ClassDocImpl
                public lookupPackage(arg0: java.lang.String): com.sun.tools.javadoc.PackageDocImpl
                getClassSymbol(arg0: java.lang.String): com.sun.tools.javac.code.Symbol$ClassSymbol
                public setLocale(arg0: java.lang.String): void
                shouldDocument<T>(...args: any[]): any
                protected isVisible(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                printError<T>(...args: any[]): any
                error<T>(...args: any[]): any
                printWarning<T>(...args: any[]): any
                warning<T>(...args: any[]): any
                printNotice<T>(...args: any[]): any
                notice<T>(...args: any[]): any
                public exit(): void
                public getPackageDoc(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol): com.sun.tools.javadoc.PackageDocImpl
                makePackageDoc(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: com.sun.source.util.TreePath): void
                public getClassDoc(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): com.sun.tools.javadoc.ClassDocImpl
                protected makeClassDoc(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: com.sun.source.util.TreePath): void
                isAnnotationType<T>(...args: any[]): any
                public getFieldDoc(arg0: com.sun.tools.javac.code.Symbol$VarSymbol): com.sun.tools.javadoc.FieldDocImpl
                protected makeFieldDoc(arg0: com.sun.tools.javac.code.Symbol$VarSymbol, arg1: com.sun.source.util.TreePath): void
                protected makeMethodDoc(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.source.util.TreePath): void
                public getMethodDoc(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): com.sun.tools.javadoc.MethodDocImpl
                protected makeConstructorDoc(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.source.util.TreePath): void
                public getConstructorDoc(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): com.sun.tools.javadoc.ConstructorDocImpl
                protected makeAnnotationTypeElementDoc(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol, arg1: com.sun.source.util.TreePath): void
                public getAnnotationTypeElementDoc(arg0: com.sun.tools.javac.code.Symbol$MethodSymbol): com.sun.tools.javadoc.AnnotationTypeElementDocImpl
                getParameterizedType(arg0: com.sun.tools.javac.code.Type$ClassType): com.sun.tools.javadoc.ParameterizedTypeImpl
                getTreePath<T>(...args: any[]): any
                public setEncoding(arg0: java.lang.String): void
                public getEncoding(): java.lang.String
                static translateModifiers(arg0: long): int
                initDoclint(arg0: java.util.Collection<java.lang.String>, arg1: java.util.Collection<java.lang.String>): void
                initJavaScriptScanner(arg0: boolean): com.sun.tools.javadoc.JavaScriptScanner
                showTagMessages(): boolean
            }
            class Messager$1 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.util.Log> {
                val$programName: java.lang.String
                constructor(arg0: java.lang.String)
                make<T>(...args: any[]): any
            }
            class Messager$2 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.util.Log> {
                val$programName: java.lang.String
                val$errWriter: java.io.PrintWriter
                val$warnWriter: java.io.PrintWriter
                val$noticeWriter: java.io.PrintWriter
                constructor(arg0: java.lang.String, arg1: java.io.PrintWriter, arg2: java.io.PrintWriter, arg3: java.io.PrintWriter)
                make<T>(...args: any[]): any
            }
            class Messager$ExitJavadoc extends java.lang.Error {
                this$0: com.sun.tools.javadoc.Messager
                public constructor(arg0: com.sun.tools.javadoc.Messager)
            }
            class Messager$3 {
                static $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType: int[]
            }
            class Messager extends com.sun.tools.javac.util.Log implements com.sun.javadoc.DocErrorReporter {
                public static NOPOS: com.sun.javadoc.SourcePosition
                programName: java.lang.String
                static defaultErrWriter: java.io.PrintWriter
                static defaultWarnWriter: java.io.PrintWriter
                static defaultNoticeWriter: java.io.PrintWriter
                public static instance0(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javadoc.Messager
                preRegister<T>(...args: any[]): any
                constructor(...args: any[])
                public setLocale(arg0: java.util.Locale): void
                getText(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                printError<T>(...args: any[]): any
                printWarning<T>(...args: any[]): any
                printNotice<T>(...args: any[]): any
                public error(arg0: com.sun.javadoc.SourcePosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                public warning(arg0: com.sun.javadoc.SourcePosition, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                public notice(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                public nerrors(): int
                public nwarnings(): int
                public exitNotice(): void
                public exit(): void
            }
            class DocLocale {
                localeName: java.lang.String
                locale: java.util.Locale
                collator: java.text.Collator
                static sentenceTerminators: java.lang.String[]
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: java.lang.String, arg2: boolean)
                localeSpecificFirstSentence(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String): java.lang.String
            }
            class JavadocClassReader$1 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.jvm.ClassReader> {
                constructor()
                make<T>(...args: any[]): any
            }
            class JavadocClassReader extends com.sun.tools.javac.jvm.ClassReader {
                public static instance0(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javadoc.JavadocClassReader
                public static preRegister(arg0: com.sun.tools.javac.util.Context): void
                public constructor(arg0: com.sun.tools.javac.util.Context)
                protected getPackageFileKinds(): java.util.EnumSet<javax.tools.JavaFileObject$Kind>
                protected extraFileActions(arg0: com.sun.tools.javac.code.Symbol$PackageSymbol, arg1: javax.tools.JavaFileObject): void
            }
            class JavadocEnter$1 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.comp.Enter> {
                constructor()
                make<T>(...args: any[]): any
            }
            class JavadocEnter extends com.sun.tools.javac.comp.Enter {
                messager: com.sun.tools.javadoc.Messager
                docenv: com.sun.tools.javadoc.DocEnv
                public static instance0(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javadoc.JavadocEnter
                public static preRegister(arg0: com.sun.tools.javac.util.Context): void
                protected constructor(arg0: com.sun.tools.javac.util.Context)
                public main(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>): void
                public visitTopLevel(arg0: com.sun.tools.javac.tree.JCTree$JCCompilationUnit): void
                public visitClassDef(arg0: com.sun.tools.javac.tree.JCTree$JCClassDecl): void
                protected duplicateClass(arg0: com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol): void
            }
            class ModifierFilter {
                public static PACKAGE: long
                public static ALL_ACCESS: long
                constructor(...args: any[])
                public checkModifier(arg0: int): boolean
            }
            interface JavaScriptScanner$Reporter {
                public report(): void
            }
            class JavaScriptScanner$ParseException extends java.lang.Exception {
                constructor(arg0: java.lang.String)
            }
            class JavaScriptScanner$WhitespaceRetentionPolicy extends java.lang.Enum<com.sun.tools.javadoc.JavaScriptScanner$WhitespaceRetentionPolicy> {
                public static RETAIN_ALL: com.sun.tools.javadoc.JavaScriptScanner$WhitespaceRetentionPolicy
                public static REMOVE_FIRST_SPACE: com.sun.tools.javadoc.JavaScriptScanner$WhitespaceRetentionPolicy
                public static REMOVE_ALL: com.sun.tools.javadoc.JavaScriptScanner$WhitespaceRetentionPolicy
                public static values(): com.sun.tools.javadoc.JavaScriptScanner$WhitespaceRetentionPolicy[]
                valueOf<T>(...args: any[]): any
            }
            class JavaScriptScanner$TagParser$Kind extends java.lang.Enum<com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind> {
                public static INLINE: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind
                public static BLOCK: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind
                public static values(): com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind[]
                valueOf<T>(...args: any[]): any
            }
            abstract class JavaScriptScanner$TagParser {
                kind: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind
                name: java.lang.String
                constructor(...args: any[])
                getKind(): com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind
                getName(): java.lang.String
                parse(arg0: int): void
            }
            class JavaScriptScanner$1 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$2 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String, arg3: boolean)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$3 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$4 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$5 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$6 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$7 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$8 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$9 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$10 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$11 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String, arg3: boolean)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$12 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$13 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$14 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$15 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$16 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$17 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$18 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$19 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$20 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$21 extends com.sun.tools.javadoc.JavaScriptScanner$TagParser {
                this$0: com.sun.tools.javadoc.JavaScriptScanner
                constructor(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$TagParser$Kind, arg2: java.lang.String)
                public parse(arg0: int): void
            }
            class JavaScriptScanner$22 {
                static $SwitchMap$com$sun$tools$javadoc$JavaScriptScanner$TagParser$Kind: int[]
                static $SwitchMap$com$sun$tools$javadoc$JavaScriptScanner$WhitespaceRetentionPolicy: int[]
            }
            class JavaScriptScanner {
                protected buf: char[]
                protected bp: int
                protected buflen: int
                protected ch: char
                tagParsers: java.util.Map<java.lang.String, com.sun.tools.javadoc.JavaScriptScanner$TagParser>
                eventAttrs: java.util.Set<java.lang.String>
                uriAttrs: java.util.Set<java.lang.String>
                public constructor()
                public parse(arg0: java.lang.String, arg1: com.sun.tools.javadoc.JavaScriptScanner$Reporter): void
                nextChar(): void
                protected blockContent(): void
                protected blockTags(): void
                protected blockTag(): void
                inlineTag<T>(...args: any[]): any
                protected reference(arg0: boolean): void
                protected identifier(): void
                protected quotedString(): void
                protected inlineWord(): void
                entity<T>(...args: any[]): any
                protected html(): void
                protected htmlAttrs(): void
                protected attrValueChar(arg0: java.lang.Void): void
                protected isIdentifierStart(arg0: char): boolean
                protected readIdentifier(): java.lang.String
                protected readAttributeName(): java.lang.String
                protected readTagName(): java.lang.String
                protected isJavaIdentifierStart(arg0: char): boolean
                protected readJavaIdentifier(): java.lang.String
                protected isDecimalDigit(arg0: char): boolean
                protected isHexDigit(arg0: char): boolean
                protected isUnquotedAttrValueTerminator(arg0: char): boolean
                protected isWhitespace(arg0: char): boolean
                protected skipWhitespace(): void
                newString(arg0: int, arg1: int): java.lang.String
                static access$000(arg0: com.sun.tools.javadoc.JavaScriptScanner, arg1: com.sun.tools.javadoc.JavaScriptScanner$WhitespaceRetentionPolicy): void
                static access$100(arg0: com.sun.tools.javadoc.JavaScriptScanner): void
                static access$200(arg0: com.sun.tools.javadoc.JavaScriptScanner): boolean
            }
            class ClassDocImpl extends com.sun.tools.javadoc.ProgramElementDocImpl implements com.sun.javadoc.ClassDoc {
                public type: com.sun.tools.javac.code.Type$ClassType
                protected tsym: com.sun.tools.javac.code.Symbol$ClassSymbol
                isIncluded<T>(...args: any[]): any
                constructor(...args: any[])
                public getElementType(): com.sun.javadoc.Type
                getFlags<T>(...args: any[]): any
                static isAnnotationType(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                protected getContainingClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                public isClass(): boolean
                public isOrdinaryClass(): boolean
                public isEnum(): boolean
                public isInterface(): boolean
                public isException(): boolean
                public isError(): boolean
                public isThrowable(): boolean
                public isAbstract(): boolean
                public isSynthetic(): boolean
                public containingPackage(): com.sun.javadoc.PackageDoc
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                public typeName(): java.lang.String
                public qualifiedTypeName(): java.lang.String
                public simpleTypeName(): java.lang.String
                toString<T>(...args: any[]): any
                static getClassName(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol, arg1: boolean): java.lang.String
                static classToString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: boolean): java.lang.String
                static isGeneric(arg0: com.sun.tools.javac.code.Symbol$ClassSymbol): boolean
                public typeParameters(): com.sun.javadoc.TypeVariable[]
                public typeParamTags(): com.sun.javadoc.ParamTag[]
                public modifiers(): java.lang.String
                public modifierSpecifier(): int
                public superclass(): com.sun.javadoc.ClassDoc
                public superclassType(): com.sun.javadoc.Type
                public subclassOf(arg0: com.sun.javadoc.ClassDoc): boolean
                public interfaces(): com.sun.javadoc.ClassDoc[]
                public interfaceTypes(): com.sun.javadoc.Type[]
                fields<T>(...args: any[]): any
                public enumConstants(): com.sun.javadoc.FieldDoc[]
                methods<T>(...args: any[]): any
                constructors<T>(...args: any[]): any
                addAllClasses(arg0: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javadoc.ClassDocImpl>, arg1: boolean): void
                innerClasses<T>(...args: any[]): any
                public findClass(arg0: java.lang.String): com.sun.javadoc.ClassDoc
                public findMethod(arg0: java.lang.String, arg1: java.lang.String[]): com.sun.tools.javadoc.MethodDocImpl
                public findConstructor(arg0: java.lang.String, arg1: java.lang.String[]): com.sun.javadoc.ConstructorDoc
                public findField(arg0: java.lang.String): com.sun.javadoc.FieldDoc
                public importedClasses(): com.sun.javadoc.ClassDoc[]
                public importedPackages(): com.sun.javadoc.PackageDoc[]
                public dimension(): java.lang.String
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public asWildcardType(): com.sun.javadoc.WildcardType
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                public isPrimitive(): boolean
                public isSerializable(): boolean
                public isExternalizable(): boolean
                public serializationMethods(): com.sun.javadoc.MethodDoc[]
                public serializableFields(): com.sun.javadoc.FieldDoc[]
                public definesSerializableFields(): boolean
                isRuntimeException(): boolean
                public position(): com.sun.javadoc.SourcePosition
            }
            abstract class ProgramElementDocImpl extends com.sun.tools.javadoc.DocImpl implements com.sun.javadoc.ProgramElementDoc {
                tree: com.sun.tools.javac.tree.JCTree
                lineMap: com.sun.tools.javac.util.Position$LineMap
                protected constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.source.util.TreePath)
                setTreePath(arg0: com.sun.source.util.TreePath): void
                protected getContainingClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                protected getFlags(): long
                protected getModifiers(): int
                public containingClass(): com.sun.javadoc.ClassDoc
                public containingPackage(): com.sun.javadoc.PackageDoc
                public modifierSpecifier(): int
                public modifiers(): java.lang.String
                public annotations(): com.sun.javadoc.AnnotationDesc[]
                public isPublic(): boolean
                public isProtected(): boolean
                public isPrivate(): boolean
                public isPackagePrivate(): boolean
                public isStatic(): boolean
                public isFinal(): boolean
                generateKey(): java.text.CollationKey
            }
            class DocImpl$1 implements com.sun.tools.javadoc.JavaScriptScanner$Reporter {
                this$0: com.sun.tools.javadoc.DocImpl
                constructor(arg0: com.sun.tools.javadoc.DocImpl)
                public report(): void
            }
            abstract class DocImpl implements com.sun.javadoc.Doc , java.lang.Comparable<java.lang.Object> {
                protected env: com.sun.tools.javadoc.DocEnv
                protected treePath: com.sun.source.util.TreePath
                documentation<T>(...args: any[]): any
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.source.util.TreePath)
                comment(): com.sun.tools.javadoc.Comment
                public commentText(): java.lang.String
                tags<T>(...args: any[]): any
                public seeTags(): com.sun.javadoc.SeeTag[]
                public inlineTags(): com.sun.javadoc.Tag[]
                public firstSentenceTags(): com.sun.javadoc.Tag[]
                readHTMLDocumentation(arg0: java.io.InputStream, arg1: javax.tools.FileObject): java.lang.String
                public getRawCommentText(): java.lang.String
                public setRawCommentText(arg0: java.lang.String): void
                setTreePath(arg0: com.sun.source.util.TreePath): void
                key(): java.text.CollationKey
                generateKey(): java.text.CollationKey
                toString<T>(...args: any[]): any
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                public compareTo(arg0: java.lang.Object): int
                public isField(): boolean
                public isEnumConstant(): boolean
                public isConstructor(): boolean
                public isMethod(): boolean
                public isAnnotationTypeElement(): boolean
                public isInterface(): boolean
                public isException(): boolean
                public isError(): boolean
                public isEnum(): boolean
                public isAnnotationType(): boolean
                public isOrdinaryClass(): boolean
                public isClass(): boolean
                public isIncluded(): boolean
                public position(): com.sun.javadoc.SourcePosition
            }
            class PackageDocImpl extends com.sun.tools.javadoc.DocImpl implements com.sun.javadoc.PackageDoc {
                protected sym: com.sun.tools.javac.code.Symbol$PackageSymbol
                public docPath: javax.tools.FileObject
                isIncluded<T>(...args: any[]): any
                setDocPath<T>(...args: any[]): any
                constructor(...args: any[])
                setTree(arg0: com.sun.tools.javac.tree.JCTree): void
                public setTreePath(arg0: com.sun.source.util.TreePath): void
                protected documentation(): java.lang.String
                public addAllClassesTo(arg0: com.sun.tools.javac.util.ListBuffer<com.sun.tools.javadoc.ClassDocImpl>): void
                allClasses<T>(...args: any[]): any
                public ordinaryClasses(): com.sun.javadoc.ClassDoc[]
                public exceptions(): com.sun.javadoc.ClassDoc[]
                public errors(): com.sun.javadoc.ClassDoc[]
                public enums(): com.sun.javadoc.ClassDoc[]
                public interfaces(): com.sun.javadoc.ClassDoc[]
                public annotationTypes(): com.sun.javadoc.AnnotationTypeDoc[]
                public annotations(): com.sun.javadoc.AnnotationDesc[]
                public findClass(arg0: java.lang.String): com.sun.javadoc.ClassDoc
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                public position(): com.sun.javadoc.SourcePosition
            }
            class FieldDocImpl extends com.sun.tools.javadoc.MemberDocImpl implements com.sun.javadoc.FieldDoc {
                protected sym: com.sun.tools.javac.code.Symbol$VarSymbol
                constructor(...args: any[])
                protected getFlags(): long
                protected getContainingClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                public type(): com.sun.javadoc.Type
                public constantValue(): java.lang.Object
                constantValueExpression<T>(...args: any[]): any
                public isIncluded(): boolean
                public isField(): boolean
                public isEnumConstant(): boolean
                public isTransient(): boolean
                public isVolatile(): boolean
                public isSynthetic(): boolean
                public serialFieldTags(): com.sun.javadoc.SerialFieldTag[]
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                public position(): com.sun.javadoc.SourcePosition
            }
            abstract class MemberDocImpl extends com.sun.tools.javadoc.ProgramElementDocImpl implements com.sun.javadoc.MemberDoc {
                public constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol, arg2: com.sun.source.util.TreePath)
                public isSynthetic(): boolean
            }
            abstract class ExecutableMemberDocImpl extends com.sun.tools.javadoc.MemberDocImpl implements com.sun.javadoc.ExecutableMemberDoc {
                protected sym: com.sun.tools.javac.code.Symbol$MethodSymbol
                constructor(...args: any[])
                protected getFlags(): long
                protected getContainingClass(): com.sun.tools.javac.code.Symbol$ClassSymbol
                public isNative(): boolean
                public isSynchronized(): boolean
                public isVarArgs(): boolean
                public isSynthetic(): boolean
                public isIncluded(): boolean
                public throwsTags(): com.sun.javadoc.ThrowsTag[]
                public paramTags(): com.sun.javadoc.ParamTag[]
                public typeParamTags(): com.sun.javadoc.ParamTag[]
                public thrownExceptions(): com.sun.javadoc.ClassDoc[]
                public thrownExceptionTypes(): com.sun.javadoc.Type[]
                public parameters(): com.sun.javadoc.Parameter[]
                public receiverType(): com.sun.javadoc.Type
                public typeParameters(): com.sun.javadoc.TypeVariable[]
                public signature(): java.lang.String
                public flatSignature(): java.lang.String
                protected typeParametersString(): java.lang.String
                generateKey(): java.text.CollationKey
                public position(): com.sun.javadoc.SourcePosition
            }
            class MethodDocImpl extends com.sun.tools.javadoc.ExecutableMemberDocImpl implements com.sun.javadoc.MethodDoc {
                constructor(...args: any[])
                public isMethod(): boolean
                public isDefault(): boolean
                public isAbstract(): boolean
                public returnType(): com.sun.javadoc.Type
                public overriddenClass(): com.sun.javadoc.ClassDoc
                public overriddenType(): com.sun.javadoc.Type
                public overriddenMethod(): com.sun.javadoc.MethodDoc
                public overrides(arg0: com.sun.javadoc.MethodDoc): boolean
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                toString<T>(...args: any[]): any
            }
            class ConstructorDocImpl extends com.sun.tools.javadoc.ExecutableMemberDocImpl implements com.sun.javadoc.ConstructorDoc {
                constructor(...args: any[])
                public isConstructor(): boolean
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                toString<T>(...args: any[]): any
            }
            class AnnotationTypeElementDocImpl extends com.sun.tools.javadoc.MethodDocImpl implements com.sun.javadoc.AnnotationTypeElementDoc {
                constructor(...args: any[])
                public isAnnotationTypeElement(): boolean
                public isMethod(): boolean
                public isAbstract(): boolean
                public defaultValue(): com.sun.javadoc.AnnotationValue
            }
            class ParameterizedTypeImpl extends com.sun.tools.javadoc.AbstractTypeImpl implements com.sun.javadoc.ParameterizedType {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type)
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public typeArguments(): com.sun.javadoc.Type[]
                public superclassType(): com.sun.javadoc.Type
                public interfaceTypes(): com.sun.javadoc.Type[]
                public containingType(): com.sun.javadoc.Type
                public typeName(): java.lang.String
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                toString<T>(...args: any[]): any
                static parameterizedTypeToString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type$ClassType, arg2: boolean): java.lang.String
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public asWildcardType(): com.sun.javadoc.WildcardType
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public isPrimitive(): boolean
                public dimension(): java.lang.String
                public qualifiedName(): java.lang.String
                public name(): java.lang.String
                public simpleTypeName(): java.lang.String
                public getElementType(): com.sun.javadoc.Type
                public qualifiedTypeName(): java.lang.String
            }
            abstract class AbstractTypeImpl implements com.sun.javadoc.Type {
                protected env: com.sun.tools.javadoc.DocEnv
                protected type: com.sun.tools.javac.code.Type
                protected constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type)
                public typeName(): java.lang.String
                public qualifiedTypeName(): java.lang.String
                public getElementType(): com.sun.javadoc.Type
                public simpleTypeName(): java.lang.String
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                toString<T>(...args: any[]): any
                public dimension(): java.lang.String
                public isPrimitive(): boolean
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public asWildcardType(): com.sun.javadoc.WildcardType
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
            }
            class SerializedForm {
                methods<T>(...args: any[]): any
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol$ClassSymbol, arg2: com.sun.tools.javadoc.ClassDocImpl)
                fields(): com.sun.javadoc.FieldDoc[]
                definesSerializableFields(): boolean
            }
            class Comment$1CommentStringParser {
                val$commentString: java.lang.String
                val$holder: com.sun.tools.javadoc.DocImpl
                this$0: com.sun.tools.javadoc.Comment
                constructor()
                parseCommentStateMachine(): void
                parseCommentComponent(arg0: java.lang.String, arg1: int, arg2: int): void
                warnIfEmpty(arg0: java.lang.String, arg1: java.lang.String): void
            }
            class Comment {
                constructor(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String)
                commentText(): java.lang.String
                tags<T>(...args: any[]): any
                throwsTags(): com.sun.javadoc.ThrowsTag[]
                paramTags(): com.sun.javadoc.ParamTag[]
                typeParamTags(): com.sun.javadoc.ParamTag[]
                seeTags(): com.sun.javadoc.SeeTag[]
                serialFieldTags(): com.sun.javadoc.SerialFieldTag[]
                static getInlineTags(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String): com.sun.javadoc.Tag[]
                static firstSentenceTags(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String): com.sun.javadoc.Tag[]
                toString<T>(...args: any[]): any
                static access$002(arg0: com.sun.tools.javadoc.Comment, arg1: java.lang.String): java.lang.String
                static access$100(arg0: com.sun.tools.javadoc.Comment): com.sun.tools.javac.util.ListBuffer
                static access$200(arg0: com.sun.tools.javadoc.Comment): com.sun.tools.javadoc.DocEnv
            }
            namespace api {
               class JavadocTool implements javax.tools.DocumentationTool {
                   public constructor()
                   getTask<T>(...args: any[]): any
                   public getStandardFileManager(arg0: javax.tools.DiagnosticListener<any super javax.tools.JavaFileObject>, arg1: java.util.Locale, arg2: java.nio.charset.Charset): javax.tools.StandardJavaFileManager
                   public run(arg0: java.io.InputStream, arg1: java.io.OutputStream, arg2: java.io.OutputStream, ...arg3: java.lang.String[]): int
                   public getSourceVersions(): java.util.Set<javax.lang.model.SourceVersion>
                   public isSupportedOption(arg0: java.lang.String): int
               }
               class JavadocTaskImpl implements javax.tools.DocumentationTool$DocumentationTask {
                   public constructor(arg0: com.sun.tools.javac.util.Context, arg1: java.lang.Class<any>, arg2: java.lang.Iterable<java.lang.String>, arg3: java.lang.Iterable<javax.tools.JavaFileObject>)
                   public setLocale(arg0: java.util.Locale): void
                   call<T>(...args: any[]): any
               }

            }
            class WildcardTypeImpl extends com.sun.tools.javadoc.AbstractTypeImpl implements com.sun.javadoc.WildcardType {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type$WildcardType)
                public extendsBounds(): com.sun.javadoc.Type[]
                public superBounds(): com.sun.javadoc.Type[]
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asWildcardType(): com.sun.javadoc.WildcardType
                public typeName(): java.lang.String
                public qualifiedTypeName(): java.lang.String
                public simpleTypeName(): java.lang.String
                toString<T>(...args: any[]): any
                static wildcardTypeToString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type$WildcardType, arg2: boolean): java.lang.String
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public isPrimitive(): boolean
                public dimension(): java.lang.String
                public qualifiedName(): java.lang.String
                public name(): java.lang.String
                public getElementType(): com.sun.javadoc.Type
            }
            class TypeVariableImpl extends com.sun.tools.javadoc.AbstractTypeImpl implements com.sun.javadoc.TypeVariable {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type$TypeVar)
                public bounds(): com.sun.javadoc.Type[]
                public owner(): com.sun.javadoc.ProgramElementDoc
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                toString<T>(...args: any[]): any
                static typeVarToString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type$TypeVar, arg2: boolean): java.lang.String
                public annotations(): com.sun.javadoc.AnnotationDesc[]
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asWildcardType(): com.sun.javadoc.WildcardType
                public isPrimitive(): boolean
                public dimension(): java.lang.String
                public qualifiedName(): java.lang.String
                public name(): java.lang.String
                public simpleTypeName(): java.lang.String
                public getElementType(): com.sun.javadoc.Type
                public qualifiedTypeName(): java.lang.String
                public typeName(): java.lang.String
            }
            class TypeMaker$ArrayTypeImpl implements com.sun.javadoc.Type {
                arrayType: com.sun.tools.javac.code.Type
                env: com.sun.tools.javadoc.DocEnv
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type)
                public getElementType(): com.sun.javadoc.Type
                public dimension(): java.lang.String
                public typeName(): java.lang.String
                public qualifiedTypeName(): java.lang.String
                public simpleTypeName(): java.lang.String
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public asWildcardType(): com.sun.javadoc.WildcardType
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public isPrimitive(): boolean
                toString<T>(...args: any[]): any
            }
            class TypeMaker$1 {
                static $SwitchMap$com$sun$tools$javac$code$TypeTag: int[]
            }
            class TypeMaker {
                public constructor()
                getType<T>(...args: any[]): any
                getTypes<T>(...args: any[]): any
                public static getTypeName(arg0: com.sun.tools.javac.code.Type, arg1: boolean): java.lang.String
                static getTypeString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type, arg2: boolean): java.lang.String
                static typeParametersString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol, arg2: boolean): java.lang.String
                static typeArgumentsString(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type$ClassType, arg2: boolean): java.lang.String
            }
            class ToolOption$1 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$2 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$3 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$4 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$5 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$6 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$7 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$8 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$9 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$10 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$11 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$12 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$13 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$14 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$15 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$16 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$17 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$18 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$19 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$20 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$21 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$22 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: boolean)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String): void
            }
            class ToolOption$23 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$24 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            class ToolOption$25 extends com.sun.tools.javadoc.ToolOption {
                constructor(arg0: java.lang.String, arg1: int, arg2: java.lang.String)
                public process(arg0: com.sun.tools.javadoc.ToolOption$Helper): void
            }
            abstract class ToolOption$Helper {
                options: com.sun.tools.javac.util.ListBuffer<java.lang.String[]>
                subPackages: com.sun.tools.javac.util.ListBuffer<java.lang.String>
                excludedPackages: com.sun.tools.javac.util.ListBuffer<java.lang.String>
                compOpts: com.sun.tools.javac.util.Options
                encoding: java.lang.String
                breakiterator: boolean
                quiet: boolean
                docClasses: boolean
                rejectWarnings: boolean
                promptOnError: boolean
                docLocale: java.lang.String
                showAccess: com.sun.tools.javadoc.ModifierFilter
                constructor()
                usage(): void
                Xusage(): void
                usageError(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
                protected addToList(arg0: com.sun.tools.javac.util.ListBuffer<java.lang.String>, arg1: java.lang.String): void
                protected setFilter(arg0: long): void
                static access$100(arg0: com.sun.tools.javadoc.ToolOption$Helper, arg1: java.lang.String, arg2: java.lang.String): void
            }
            class ToolOption extends java.lang.Enum<com.sun.tools.javadoc.ToolOption> {
                public static BOOTCLASSPATH: com.sun.tools.javadoc.ToolOption
                public static CLASSPATH: com.sun.tools.javadoc.ToolOption
                public static CP: com.sun.tools.javadoc.ToolOption
                public static EXTDIRS: com.sun.tools.javadoc.ToolOption
                public static SOURCEPATH: com.sun.tools.javadoc.ToolOption
                public static SYSCLASSPATH: com.sun.tools.javadoc.ToolOption
                public static ENCODING: com.sun.tools.javadoc.ToolOption
                public static SOURCE: com.sun.tools.javadoc.ToolOption
                public static XMAXERRS: com.sun.tools.javadoc.ToolOption
                public static XMAXWARNS: com.sun.tools.javadoc.ToolOption
                public static DOCLET: com.sun.tools.javadoc.ToolOption
                public static DOCLETPATH: com.sun.tools.javadoc.ToolOption
                public static SUBPACKAGES: com.sun.tools.javadoc.ToolOption
                public static EXCLUDE: com.sun.tools.javadoc.ToolOption
                public static PACKAGE: com.sun.tools.javadoc.ToolOption
                public static PRIVATE: com.sun.tools.javadoc.ToolOption
                public static PROTECTED: com.sun.tools.javadoc.ToolOption
                public static PUBLIC: com.sun.tools.javadoc.ToolOption
                public static PROMPT: com.sun.tools.javadoc.ToolOption
                public static QUIET: com.sun.tools.javadoc.ToolOption
                public static VERBOSE: com.sun.tools.javadoc.ToolOption
                public static XWERROR: com.sun.tools.javadoc.ToolOption
                public static BREAKITERATOR: com.sun.tools.javadoc.ToolOption
                public static LOCALE: com.sun.tools.javadoc.ToolOption
                public static OVERVIEW: com.sun.tools.javadoc.ToolOption
                public static XCLASSES: com.sun.tools.javadoc.ToolOption
                public static HELP: com.sun.tools.javadoc.ToolOption
                public static X: com.sun.tools.javadoc.ToolOption
                public opt: java.lang.String
                public hasArg: boolean
                public static values(): com.sun.tools.javadoc.ToolOption[]
                valueOf<T>(...args: any[]): any
                process<T>(...args: any[]): any
                static get(arg0: java.lang.String): com.sun.tools.javadoc.ToolOption
                constructor(...args: any[])
            }
            class ThrowsTagImpl extends com.sun.tools.javadoc.TagImpl implements com.sun.javadoc.ThrowsTag {
                constructor(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String, arg2: java.lang.String)
                public exceptionName(): java.lang.String
                public exceptionComment(): java.lang.String
                public exception(): com.sun.javadoc.ClassDoc
                public exceptionType(): com.sun.javadoc.Type
                public kind(): java.lang.String
                public inlineTags(): com.sun.javadoc.Tag[]
            }
            class TagImpl implements com.sun.javadoc.Tag {
                text<T>(...args: any[]): any
                name<T>(...args: any[]): any
                holder<T>(...args: any[]): any
                constructor(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String, arg2: java.lang.String)
                public kind(): java.lang.String
                docenv(): com.sun.tools.javadoc.DocEnv
                divideAtWhite(): java.lang.String[]
                toString<T>(...args: any[]): any
                public inlineTags(): com.sun.javadoc.Tag[]
                public firstSentenceTags(): com.sun.javadoc.Tag[]
                public position(): com.sun.javadoc.SourcePosition
            }
            class Start extends com.sun.tools.javadoc.ToolOption$Helper {
                constructor(...args: any[])
                usage<T>(...args: any[]): any
                Xusage<T>(...args: any[]): any
                begin<T>(...args: any[]): any
                usageError(arg0: java.lang.String, ...arg1: java.lang.Object[]): void
            }
            class DocletInvoker$DocletInvokeException extends java.lang.Exception {
                constructor(arg0: com.sun.tools.javadoc.DocletInvoker$1)
            }
            class DocletInvoker$1 {
            }
            class DocletInvoker {
                constructor(...args: any[])
                public start(arg0: com.sun.javadoc.RootDoc): boolean
                public optionLength(arg0: java.lang.String): int
                public validOptions(arg0: com.sun.tools.javac.util.List<java.lang.String[]>): boolean
                public languageVersion(): com.sun.javadoc.LanguageVersion
            }
            class SourcePositionImpl implements com.sun.javadoc.SourcePosition {
                filename: javax.tools.FileObject
                position: int
                lineMap: com.sun.tools.javac.util.Position$LineMap
                public file(): java.io.File
                public fileObject(): javax.tools.FileObject
                public line(): int
                public column(): int
                public static make(arg0: javax.tools.FileObject, arg1: int, arg2: com.sun.tools.javac.util.Position$LineMap): com.sun.javadoc.SourcePosition
                toString<T>(...args: any[]): any
            }
            class SerialFieldTagImpl extends com.sun.tools.javadoc.TagImpl implements com.sun.javadoc.SerialFieldTag , java.lang.Comparable<java.lang.Object> {
                constructor(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String, arg2: java.lang.String)
                key(): java.lang.String
                mapToFieldDocImpl(arg0: com.sun.tools.javadoc.FieldDocImpl): void
                public fieldName(): java.lang.String
                public fieldType(): java.lang.String
                public fieldTypeDoc(): com.sun.javadoc.ClassDoc
                getMatchingField(): com.sun.tools.javadoc.FieldDocImpl
                public description(): java.lang.String
                public kind(): java.lang.String
                toString<T>(...args: any[]): any
                public compareTo(arg0: java.lang.Object): int
            }
            class SeeTagImpl$1 extends com.sun.tools.javac.code.Printer {
                count: int
                val$messages: com.sun.tools.javac.util.JavacMessages
                this$0: com.sun.tools.javadoc.SeeTagImpl
                constructor(arg0: com.sun.tools.javadoc.SeeTagImpl, arg1: com.sun.tools.javac.util.JavacMessages)
                protected localize(arg0: java.util.Locale, arg1: java.lang.String, ...arg2: java.lang.Object[]): java.lang.String
                protected capturedVarId(arg0: com.sun.tools.javac.code.Type$CapturedType, arg1: java.util.Locale): java.lang.String
            }
            class SeeTagImpl$ParameterParseMachine {
                static START: int
                static TYPE: int
                static NAME: int
                static TNSPACE: int
                static ARRAYDECORATION: int
                static ARRAYSPACE: int
                parameters: java.lang.String
                typeId: java.lang.StringBuilder
                paramList: com.sun.tools.javac.util.ListBuffer<java.lang.String>
                this$0: com.sun.tools.javadoc.SeeTagImpl
                constructor(arg0: com.sun.tools.javadoc.SeeTagImpl, arg1: java.lang.String)
                public parseParameters(): java.lang.String[]
                addTypeToParamList(): void
            }
            class SeeTagImpl extends com.sun.tools.javadoc.TagImpl implements com.sun.javadoc.SeeTag , com.sun.tools.javac.util.LayoutCharacters {
                label<T>(...args: any[]): any
                constructor(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String, arg2: java.lang.String)
                public referencedClassName(): java.lang.String
                public referencedPackage(): com.sun.javadoc.PackageDoc
                public referencedClass(): com.sun.javadoc.ClassDoc
                public referencedMemberName(): java.lang.String
                public referencedMember(): com.sun.javadoc.MemberDoc
                public kind(): java.lang.String
            }
            class RootDocImpl extends com.sun.tools.javadoc.DocImpl implements com.sun.javadoc.RootDoc {
                constructor(...args: any[])
                public options(): java.lang.String[][]
                public specifiedPackages(): com.sun.javadoc.PackageDoc[]
                public specifiedClasses(): com.sun.javadoc.ClassDoc[]
                public classes(): com.sun.javadoc.ClassDoc[]
                public classNamed(arg0: java.lang.String): com.sun.javadoc.ClassDoc
                public packageNamed(arg0: java.lang.String): com.sun.javadoc.PackageDoc
                public name(): java.lang.String
                public qualifiedName(): java.lang.String
                public isIncluded(): boolean
                printError<T>(...args: any[]): any
                printWarning<T>(...args: any[]): any
                printNotice<T>(...args: any[]): any
                protected documentation(): java.lang.String
                public position(): com.sun.javadoc.SourcePosition
                public getLocale(): java.util.Locale
                public getFileManager(): javax.tools.JavaFileManager
                public initDocLint(arg0: java.util.Collection<java.lang.String>, arg1: java.util.Collection<java.lang.String>): void
                public initJavaScriptScanner(arg0: boolean): com.sun.tools.javadoc.JavaScriptScanner
                public isFunctionalInterface(arg0: com.sun.javadoc.AnnotationDesc): boolean
                public showTagMessages(): boolean
            }
            class PrimitiveType implements com.sun.javadoc.Type {
                static voidType: com.sun.tools.javadoc.PrimitiveType
                static booleanType: com.sun.tools.javadoc.PrimitiveType
                static byteType: com.sun.tools.javadoc.PrimitiveType
                static charType: com.sun.tools.javadoc.PrimitiveType
                static shortType: com.sun.tools.javadoc.PrimitiveType
                static intType: com.sun.tools.javadoc.PrimitiveType
                static longType: com.sun.tools.javadoc.PrimitiveType
                static floatType: com.sun.tools.javadoc.PrimitiveType
                static doubleType: com.sun.tools.javadoc.PrimitiveType
                static errorType: com.sun.tools.javadoc.PrimitiveType
                constructor(arg0: java.lang.String)
                public typeName(): java.lang.String
                public getElementType(): com.sun.javadoc.Type
                public qualifiedTypeName(): java.lang.String
                public simpleTypeName(): java.lang.String
                public dimension(): java.lang.String
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public asWildcardType(): com.sun.javadoc.WildcardType
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                toString<T>(...args: any[]): any
                public isPrimitive(): boolean
            }
            class ParameterImpl implements com.sun.javadoc.Parameter {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol$VarSymbol)
                public type(): com.sun.javadoc.Type
                public name(): java.lang.String
                public typeName(): java.lang.String
                toString<T>(...args: any[]): any
                public annotations(): com.sun.javadoc.AnnotationDesc[]
            }
            class ParamTagImpl extends com.sun.tools.javadoc.TagImpl implements com.sun.javadoc.ParamTag {
                constructor(arg0: com.sun.tools.javadoc.DocImpl, arg1: java.lang.String, arg2: java.lang.String)
                public parameterName(): java.lang.String
                public parameterComment(): java.lang.String
                public kind(): java.lang.String
                public isTypeParameter(): boolean
                toString<T>(...args: any[]): any
                public inlineTags(): com.sun.javadoc.Tag[]
            }
            class Main {
                public static main(...arg0: java.lang.String[]): void
                execute<T>(...args: any[]): any
            }
            class JavadocTool extends com.sun.tools.javac.main.JavaCompiler {
                docenv: com.sun.tools.javadoc.DocEnv
                messager: com.sun.tools.javadoc.Messager
                javadocReader: com.sun.tools.javadoc.JavadocClassReader
                javadocEnter: com.sun.tools.javadoc.JavadocEnter
                uniquefiles: java.util.Set<javax.tools.JavaFileObject>
                static surrogatesSupported: boolean
                protected constructor(arg0: com.sun.tools.javac.util.Context)
                protected keepComments(): boolean
                public static make0(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javadoc.JavadocTool
                public getRootDocImpl(arg0: java.lang.String, arg1: java.lang.String, arg2: com.sun.tools.javadoc.ModifierFilter, arg3: com.sun.tools.javac.util.List<java.lang.String>, arg4: com.sun.tools.javac.util.List<java.lang.String[]>, arg5: java.lang.Iterable<javax.tools.JavaFileObject>, arg6: boolean, arg7: com.sun.tools.javac.util.List<java.lang.String>, arg8: com.sun.tools.javac.util.List<java.lang.String>, arg9: boolean, arg10: boolean, arg11: boolean): com.sun.tools.javadoc.RootDocImpl
                isValidPackageName(arg0: java.lang.String): boolean
                public static isValidClassName(arg0: java.lang.String): boolean
                listClasses(arg0: com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>): com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCClassDecl>
            }
            class JavadocTodo$1 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.comp.Todo> {
                constructor()
                make<T>(...args: any[]): any
            }
            class JavadocTodo extends com.sun.tools.javac.comp.Todo {
                public static preRegister(arg0: com.sun.tools.javac.util.Context): void
                protected constructor(arg0: com.sun.tools.javac.util.Context)
                public append(arg0: com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>): void
                offer<T>(...args: any[]): any
            }
            class JavadocMemberEnter$1 implements com.sun.tools.javac.util.Context$Factory<com.sun.tools.javac.comp.MemberEnter> {
                constructor()
                make<T>(...args: any[]): any
            }
            class JavadocMemberEnter$MaybeConstantExpressionScanner extends com.sun.tools.javac.tree.JCTree$Visitor {
                maybeConstantExpr: boolean
                public containsNonConstantExpression(arg0: com.sun.tools.javac.tree.JCTree$JCExpression): boolean
                public scan(arg0: com.sun.tools.javac.tree.JCTree): void
                public visitTree(arg0: com.sun.tools.javac.tree.JCTree): void
                public visitBinary(arg0: com.sun.tools.javac.tree.JCTree$JCBinary): void
                public visitConditional(arg0: com.sun.tools.javac.tree.JCTree$JCConditional): void
                public visitIdent(arg0: com.sun.tools.javac.tree.JCTree$JCIdent): void
                public visitLiteral(arg0: com.sun.tools.javac.tree.JCTree$JCLiteral): void
                public visitParens(arg0: com.sun.tools.javac.tree.JCTree$JCParens): void
                public visitSelect(arg0: com.sun.tools.javac.tree.JCTree$JCFieldAccess): void
                public visitTypeCast(arg0: com.sun.tools.javac.tree.JCTree$JCTypeCast): void
                public visitTypeIdent(arg0: com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree): void
                public visitUnary(arg0: com.sun.tools.javac.tree.JCTree$JCUnary): void
                constructor(arg0: com.sun.tools.javadoc.JavadocMemberEnter$1)
            }
            class JavadocMemberEnter$2 {
                static $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag: int[]
            }
            class JavadocMemberEnter extends com.sun.tools.javac.comp.MemberEnter {
                docenv: com.sun.tools.javadoc.DocEnv
                public static instance0(arg0: com.sun.tools.javac.util.Context): com.sun.tools.javadoc.JavadocMemberEnter
                public static preRegister(arg0: com.sun.tools.javac.util.Context): void
                protected constructor(arg0: com.sun.tools.javac.util.Context)
                public visitMethodDef(arg0: com.sun.tools.javac.tree.JCTree$JCMethodDecl): void
                public visitVarDef(arg0: com.sun.tools.javac.tree.JCTree$JCVariableDecl): void
            }
            class AnnotationValueImpl$ValueVisitor implements com.sun.tools.javac.code.Attribute$Visitor {
                public value: java.lang.Object
                this$0: com.sun.tools.javadoc.AnnotationValueImpl
                public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
                constructor(arg0: com.sun.tools.javadoc.AnnotationValueImpl, arg1: com.sun.tools.javadoc.AnnotationValueImpl$1)
            }
            class AnnotationValueImpl$ToStringVisitor implements com.sun.tools.javac.code.Attribute$Visitor {
                this$0: com.sun.tools.javadoc.AnnotationValueImpl
                toString<T>(...args: any[]): any
                public visitConstant(arg0: com.sun.tools.javac.code.Attribute$Constant): void
                public visitClass(arg0: com.sun.tools.javac.code.Attribute$Class): void
                public visitEnum(arg0: com.sun.tools.javac.code.Attribute$Enum): void
                public visitCompound(arg0: com.sun.tools.javac.code.Attribute$Compound): void
                public visitArray(arg0: com.sun.tools.javac.code.Attribute$Array): void
                public visitError(arg0: com.sun.tools.javac.code.Attribute$Error): void
                constructor(arg0: com.sun.tools.javadoc.AnnotationValueImpl, arg1: com.sun.tools.javadoc.AnnotationValueImpl$1)
            }
            class AnnotationValueImpl$1 {
            }
            class AnnotationValueImpl implements com.sun.javadoc.AnnotationValue {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Attribute)
                public value(): java.lang.Object
                toString<T>(...args: any[]): any
                static access$100(arg0: com.sun.tools.javadoc.AnnotationValueImpl): com.sun.tools.javadoc.DocEnv
            }
            class AnnotationTypeDocImpl extends com.sun.tools.javadoc.ClassDocImpl implements com.sun.javadoc.AnnotationTypeDoc {
                constructor(...args: any[])
                public isAnnotationType(): boolean
                public isInterface(): boolean
                public methods(arg0: boolean): com.sun.javadoc.MethodDoc[]
                public elements(): com.sun.javadoc.AnnotationTypeElementDoc[]
            }
            class AnnotationDescImpl$ElementValuePairImpl implements com.sun.javadoc.AnnotationDesc$ElementValuePair {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Symbol$MethodSymbol, arg2: com.sun.tools.javac.code.Attribute)
                public element(): com.sun.javadoc.AnnotationTypeElementDoc
                public value(): com.sun.javadoc.AnnotationValue
                toString<T>(...args: any[]): any
            }
            class AnnotationDescImpl implements com.sun.javadoc.AnnotationDesc {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Attribute$Compound)
                public annotationType(): com.sun.javadoc.AnnotationTypeDoc
                public elementValues(): com.sun.javadoc.AnnotationDesc$ElementValuePair[]
                public isSynthesized(): boolean
                toString<T>(...args: any[]): any
            }
            class AnnotatedTypeImpl extends com.sun.tools.javadoc.AbstractTypeImpl implements com.sun.javadoc.AnnotatedType {
                constructor(arg0: com.sun.tools.javadoc.DocEnv, arg1: com.sun.tools.javac.code.Type)
                public annotations(): com.sun.javadoc.AnnotationDesc[]
                public underlyingType(): com.sun.javadoc.Type
                public asAnnotatedType(): com.sun.javadoc.AnnotatedType
                toString<T>(...args: any[]): any
                public typeName(): java.lang.String
                public qualifiedTypeName(): java.lang.String
                public simpleTypeName(): java.lang.String
                public dimension(): java.lang.String
                public isPrimitive(): boolean
                public asClassDoc(): com.sun.javadoc.ClassDoc
                public asTypeVariable(): com.sun.javadoc.TypeVariable
                public asWildcardType(): com.sun.javadoc.WildcardType
                public asParameterizedType(): com.sun.javadoc.ParameterizedType
                public asAnnotationTypeDoc(): com.sun.javadoc.AnnotationTypeDoc
                public qualifiedName(): java.lang.String
                public name(): java.lang.String
                public getElementType(): com.sun.javadoc.Type
            }
            namespace resources {
               class version extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javadoc extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javadoc_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class javadoc_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }

         }
         namespace doclint {
            class DocLint$BadArgs extends java.lang.Exception {
                code: java.lang.String
                args: java.lang.Object[]
                this$0: com.sun.tools.doclint.DocLint
                constructor(arg0: com.sun.tools.doclint.DocLint, arg1: java.lang.String, ...arg2: java.lang.Object[])
            }
            class DocLint$1 extends com.sun.tools.doclint.DocLint$DeclScanner {
                this$0: com.sun.tools.doclint.DocLint
                constructor(arg0: com.sun.tools.doclint.DocLint)
                visitDecl(arg0: com.sun.source.tree.Tree, arg1: javax.lang.model.element.Name): void
            }
            class DocLint$2 extends com.sun.tools.doclint.DocLint$DeclScanner {
                this$0: com.sun.tools.doclint.DocLint
                constructor(arg0: com.sun.tools.doclint.DocLint)
                visitDecl(arg0: com.sun.source.tree.Tree, arg1: javax.lang.model.element.Name): void
            }
            class DocLint$3 implements com.sun.source.util.TaskListener {
                todo: java.util.Queue<com.sun.source.tree.CompilationUnitTree>
                val$ds: com.sun.tools.doclint.DocLint$DeclScanner
                this$0: com.sun.tools.doclint.DocLint
                constructor(arg0: com.sun.tools.doclint.DocLint, arg1: com.sun.tools.doclint.DocLint$DeclScanner)
                public started(arg0: com.sun.source.util.TaskEvent): void
                public finished(arg0: com.sun.source.util.TaskEvent): void
            }
            abstract class DocLint$DeclScanner extends com.sun.source.util.TreePathScanner<java.lang.Void, java.lang.Void> {
                constructor()
                visitDecl(arg0: com.sun.source.tree.Tree, arg1: javax.lang.model.element.Name): void
                visitCompilationUnit<T>(...args: any[]): any
                visitClass<T>(...args: any[]): any
                visitMethod<T>(...args: any[]): any
                visitVariable<T>(...args: any[]): any
            }
            class DocLint$4 {
                static $SwitchMap$com$sun$source$util$TaskEvent$Kind: int[]
            }
            class DocLint implements com.sun.source.util.Plugin {
                public static XMSGS_OPTION: java.lang.String
                public static XMSGS_CUSTOM_PREFIX: java.lang.String
                public static XIMPLICIT_HEADERS: java.lang.String
                public static XCUSTOM_TAGS_PREFIX: java.lang.String
                public static TAGS_SEPARATOR: java.lang.String
                javacBootClassPath: java.util.List<java.io.File>
                javacClassPath: java.util.List<java.io.File>
                javacSourcePath: java.util.List<java.io.File>
                javacOpts: java.util.List<java.lang.String>
                javacFiles: java.util.List<java.io.File>
                needHelp: boolean
                env: com.sun.tools.doclint.Env
                checker: com.sun.tools.doclint.Checker
                public constructor()
                public static main(...arg0: java.lang.String[]): void
                run<T>(...args: any[]): any
                processArgs(...arg0: java.lang.String[]): void
                showHelp(arg0: java.io.PrintWriter): void
                splitPath(arg0: java.lang.String): java.util.List<java.io.File>
                public getName(): java.lang.String
                init<T>(...args: any[]): any
                public scan(arg0: com.sun.source.util.TreePath): void
                public reportStats(arg0: java.io.PrintWriter): void
                public static isValidOption(arg0: java.lang.String): boolean
                static access$000(arg0: com.sun.tools.doclint.DocLint, arg1: java.lang.String, arg2: java.lang.Object[]): java.lang.String
            }
            class Env$AccessKind extends java.lang.Enum<com.sun.tools.doclint.Env$AccessKind> {
                public static PRIVATE: com.sun.tools.doclint.Env$AccessKind
                public static PACKAGE: com.sun.tools.doclint.Env$AccessKind
                public static PROTECTED: com.sun.tools.doclint.Env$AccessKind
                public static PUBLIC: com.sun.tools.doclint.Env$AccessKind
                public static values(): com.sun.tools.doclint.Env$AccessKind[]
                valueOf<T>(...args: any[]): any
                static accepts(arg0: java.lang.String): boolean
                static of(arg0: java.util.Set<javax.lang.model.element.Modifier>): com.sun.tools.doclint.Env$AccessKind
            }
            class Env {
                messages: com.sun.tools.doclint.Messages
                implicitHeaderLevel: int
                customTags: java.util.Set<java.lang.String>
                trees: com.sun.source.util.DocTrees
                elements: javax.lang.model.util.Elements
                types: javax.lang.model.util.Types
                java_lang_Error: javax.lang.model.type.TypeMirror
                java_lang_RuntimeException: javax.lang.model.type.TypeMirror
                java_lang_Throwable: javax.lang.model.type.TypeMirror
                java_lang_Void: javax.lang.model.type.TypeMirror
                currPath: com.sun.source.util.TreePath
                currElement: javax.lang.model.element.Element
                currDocComment: com.sun.source.doctree.DocCommentTree
                currAccess: com.sun.tools.doclint.Env$AccessKind
                currOverriddenMethods: java.util.Set<javax.lang.model.element.ExecutableElement>
                constructor()
                init<T>(...args: any[]): any
                setImplicitHeaders(arg0: int): void
                setCustomTags(arg0: java.lang.String): void
                setCurrent(arg0: com.sun.source.util.TreePath, arg1: com.sun.source.doctree.DocCommentTree): void
                getAccessKind(): com.sun.tools.doclint.Env$AccessKind
                getPos(arg0: com.sun.source.util.TreePath): long
                getStartPos(arg0: com.sun.source.util.TreePath): long
            }
            class HtmlTag$1 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, arg4: java.util.Set, ...arg5: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$2 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, ...arg4: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$3 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, arg4: java.util.Set, ...arg5: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$4 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, arg4: java.util.Set, ...arg5: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$5 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, arg4: java.util.Set, ...arg5: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$6 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, arg4: java.util.Set, ...arg5: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$7 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, ...arg4: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$8 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, ...arg4: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$9 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, ...arg4: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$10 extends com.sun.tools.doclint.HtmlTag {
                constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.doclint.HtmlTag$BlockType, arg3: com.sun.tools.doclint.HtmlTag$EndKind, arg4: java.util.Set, ...arg5: com.sun.tools.doclint.HtmlTag$AttrMap[])
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
            }
            class HtmlTag$BlockType extends java.lang.Enum<com.sun.tools.doclint.HtmlTag$BlockType> {
                public static BLOCK: com.sun.tools.doclint.HtmlTag$BlockType
                public static INLINE: com.sun.tools.doclint.HtmlTag$BlockType
                public static LIST_ITEM: com.sun.tools.doclint.HtmlTag$BlockType
                public static TABLE_ITEM: com.sun.tools.doclint.HtmlTag$BlockType
                public static OTHER: com.sun.tools.doclint.HtmlTag$BlockType
                public static values(): com.sun.tools.doclint.HtmlTag$BlockType[]
                valueOf<T>(...args: any[]): any
            }
            class HtmlTag$EndKind extends java.lang.Enum<com.sun.tools.doclint.HtmlTag$EndKind> {
                public static NONE: com.sun.tools.doclint.HtmlTag$EndKind
                public static OPTIONAL: com.sun.tools.doclint.HtmlTag$EndKind
                public static REQUIRED: com.sun.tools.doclint.HtmlTag$EndKind
                public static values(): com.sun.tools.doclint.HtmlTag$EndKind[]
                valueOf<T>(...args: any[]): any
            }
            class HtmlTag$Flag extends java.lang.Enum<com.sun.tools.doclint.HtmlTag$Flag> {
                public static ACCEPTS_BLOCK: com.sun.tools.doclint.HtmlTag$Flag
                public static ACCEPTS_INLINE: com.sun.tools.doclint.HtmlTag$Flag
                public static EXPECT_CONTENT: com.sun.tools.doclint.HtmlTag$Flag
                public static NO_NEST: com.sun.tools.doclint.HtmlTag$Flag
                public static values(): com.sun.tools.doclint.HtmlTag$Flag[]
                valueOf<T>(...args: any[]): any
            }
            class HtmlTag$Attr extends java.lang.Enum<com.sun.tools.doclint.HtmlTag$Attr> {
                public static ABBR: com.sun.tools.doclint.HtmlTag$Attr
                public static ALIGN: com.sun.tools.doclint.HtmlTag$Attr
                public static ALT: com.sun.tools.doclint.HtmlTag$Attr
                public static AXIS: com.sun.tools.doclint.HtmlTag$Attr
                public static BGCOLOR: com.sun.tools.doclint.HtmlTag$Attr
                public static BORDER: com.sun.tools.doclint.HtmlTag$Attr
                public static CELLSPACING: com.sun.tools.doclint.HtmlTag$Attr
                public static CELLPADDING: com.sun.tools.doclint.HtmlTag$Attr
                public static CHAR: com.sun.tools.doclint.HtmlTag$Attr
                public static CHAROFF: com.sun.tools.doclint.HtmlTag$Attr
                public static CLEAR: com.sun.tools.doclint.HtmlTag$Attr
                public static CLASS: com.sun.tools.doclint.HtmlTag$Attr
                public static COLOR: com.sun.tools.doclint.HtmlTag$Attr
                public static COLSPAN: com.sun.tools.doclint.HtmlTag$Attr
                public static COMPACT: com.sun.tools.doclint.HtmlTag$Attr
                public static FACE: com.sun.tools.doclint.HtmlTag$Attr
                public static FRAME: com.sun.tools.doclint.HtmlTag$Attr
                public static HEADERS: com.sun.tools.doclint.HtmlTag$Attr
                public static HEIGHT: com.sun.tools.doclint.HtmlTag$Attr
                public static HREF: com.sun.tools.doclint.HtmlTag$Attr
                public static HSPACE: com.sun.tools.doclint.HtmlTag$Attr
                public static ID: com.sun.tools.doclint.HtmlTag$Attr
                public static NAME: com.sun.tools.doclint.HtmlTag$Attr
                public static NOWRAP: com.sun.tools.doclint.HtmlTag$Attr
                public static REVERSED: com.sun.tools.doclint.HtmlTag$Attr
                public static ROWSPAN: com.sun.tools.doclint.HtmlTag$Attr
                public static RULES: com.sun.tools.doclint.HtmlTag$Attr
                public static SCOPE: com.sun.tools.doclint.HtmlTag$Attr
                public static SIZE: com.sun.tools.doclint.HtmlTag$Attr
                public static SPACE: com.sun.tools.doclint.HtmlTag$Attr
                public static SRC: com.sun.tools.doclint.HtmlTag$Attr
                public static START: com.sun.tools.doclint.HtmlTag$Attr
                public static STYLE: com.sun.tools.doclint.HtmlTag$Attr
                public static SUMMARY: com.sun.tools.doclint.HtmlTag$Attr
                public static TARGET: com.sun.tools.doclint.HtmlTag$Attr
                public static TYPE: com.sun.tools.doclint.HtmlTag$Attr
                public static VALIGN: com.sun.tools.doclint.HtmlTag$Attr
                public static VALUE: com.sun.tools.doclint.HtmlTag$Attr
                public static VSPACE: com.sun.tools.doclint.HtmlTag$Attr
                public static WIDTH: com.sun.tools.doclint.HtmlTag$Attr
                static index: java.util.Map<java.lang.String, com.sun.tools.doclint.HtmlTag$Attr>
                public static values(): com.sun.tools.doclint.HtmlTag$Attr[]
                valueOf<T>(...args: any[]): any
                public getText(): java.lang.String
            }
            class HtmlTag$AttrKind extends java.lang.Enum<com.sun.tools.doclint.HtmlTag$AttrKind> {
                public static INVALID: com.sun.tools.doclint.HtmlTag$AttrKind
                public static OBSOLETE: com.sun.tools.doclint.HtmlTag$AttrKind
                public static USE_CSS: com.sun.tools.doclint.HtmlTag$AttrKind
                public static OK: com.sun.tools.doclint.HtmlTag$AttrKind
                public static values(): com.sun.tools.doclint.HtmlTag$AttrKind[]
                valueOf<T>(...args: any[]): any
            }
            class HtmlTag$AttrMap extends java.util.EnumMap<com.sun.tools.doclint.HtmlTag$Attr, com.sun.tools.doclint.HtmlTag$AttrKind> {
                constructor()
            }
            class HtmlTag$11 {
                static $SwitchMap$com$sun$tools$doclint$HtmlTag: int[]
                static $SwitchMap$com$sun$tools$doclint$HtmlTag$BlockType: int[]
            }
            class HtmlTag extends java.lang.Enum<com.sun.tools.doclint.HtmlTag> {
                public static A: com.sun.tools.doclint.HtmlTag
                public static B: com.sun.tools.doclint.HtmlTag
                public static BIG: com.sun.tools.doclint.HtmlTag
                public static BLOCKQUOTE: com.sun.tools.doclint.HtmlTag
                public static BODY: com.sun.tools.doclint.HtmlTag
                public static BR: com.sun.tools.doclint.HtmlTag
                public static CAPTION: com.sun.tools.doclint.HtmlTag
                public static CENTER: com.sun.tools.doclint.HtmlTag
                public static CITE: com.sun.tools.doclint.HtmlTag
                public static CODE: com.sun.tools.doclint.HtmlTag
                public static DD: com.sun.tools.doclint.HtmlTag
                public static DFN: com.sun.tools.doclint.HtmlTag
                public static DIV: com.sun.tools.doclint.HtmlTag
                public static DL: com.sun.tools.doclint.HtmlTag
                public static DT: com.sun.tools.doclint.HtmlTag
                public static EM: com.sun.tools.doclint.HtmlTag
                public static FONT: com.sun.tools.doclint.HtmlTag
                public static FRAME: com.sun.tools.doclint.HtmlTag
                public static FRAMESET: com.sun.tools.doclint.HtmlTag
                public static H1: com.sun.tools.doclint.HtmlTag
                public static H2: com.sun.tools.doclint.HtmlTag
                public static H3: com.sun.tools.doclint.HtmlTag
                public static H4: com.sun.tools.doclint.HtmlTag
                public static H5: com.sun.tools.doclint.HtmlTag
                public static H6: com.sun.tools.doclint.HtmlTag
                public static HEAD: com.sun.tools.doclint.HtmlTag
                public static HR: com.sun.tools.doclint.HtmlTag
                public static HTML: com.sun.tools.doclint.HtmlTag
                public static I: com.sun.tools.doclint.HtmlTag
                public static IMG: com.sun.tools.doclint.HtmlTag
                public static LI: com.sun.tools.doclint.HtmlTag
                public static LINK: com.sun.tools.doclint.HtmlTag
                public static MENU: com.sun.tools.doclint.HtmlTag
                public static META: com.sun.tools.doclint.HtmlTag
                public static NOFRAMES: com.sun.tools.doclint.HtmlTag
                public static NOSCRIPT: com.sun.tools.doclint.HtmlTag
                public static OL: com.sun.tools.doclint.HtmlTag
                public static P: com.sun.tools.doclint.HtmlTag
                public static PRE: com.sun.tools.doclint.HtmlTag
                public static SCRIPT: com.sun.tools.doclint.HtmlTag
                public static SMALL: com.sun.tools.doclint.HtmlTag
                public static SPAN: com.sun.tools.doclint.HtmlTag
                public static STRONG: com.sun.tools.doclint.HtmlTag
                public static SUB: com.sun.tools.doclint.HtmlTag
                public static SUP: com.sun.tools.doclint.HtmlTag
                public static TABLE: com.sun.tools.doclint.HtmlTag
                public static TBODY: com.sun.tools.doclint.HtmlTag
                public static TD: com.sun.tools.doclint.HtmlTag
                public static TFOOT: com.sun.tools.doclint.HtmlTag
                public static TH: com.sun.tools.doclint.HtmlTag
                public static THEAD: com.sun.tools.doclint.HtmlTag
                public static TITLE: com.sun.tools.doclint.HtmlTag
                public static TR: com.sun.tools.doclint.HtmlTag
                public static TT: com.sun.tools.doclint.HtmlTag
                public static U: com.sun.tools.doclint.HtmlTag
                public static UL: com.sun.tools.doclint.HtmlTag
                public static VAR: com.sun.tools.doclint.HtmlTag
                public blockType: com.sun.tools.doclint.HtmlTag$BlockType
                public endKind: com.sun.tools.doclint.HtmlTag$EndKind
                public flags: java.util.Set<com.sun.tools.doclint.HtmlTag$Flag>
                public static values(): com.sun.tools.doclint.HtmlTag[]
                valueOf<T>(...args: any[]): any
                public accepts(arg0: com.sun.tools.doclint.HtmlTag): boolean
                public acceptsText(): boolean
                public getText(): java.lang.String
                public getAttr(arg0: javax.lang.model.element.Name): com.sun.tools.doclint.HtmlTag$Attr
                public getAttrKind(arg0: javax.lang.model.element.Name): com.sun.tools.doclint.HtmlTag$AttrKind
                static get(arg0: javax.lang.model.element.Name): com.sun.tools.doclint.HtmlTag
                constructor(...args: any[])
            }
            class Messages$Group extends java.lang.Enum<com.sun.tools.doclint.Messages$Group> {
                public static ACCESSIBILITY: com.sun.tools.doclint.Messages$Group
                public static HTML: com.sun.tools.doclint.Messages$Group
                public static MISSING: com.sun.tools.doclint.Messages$Group
                public static SYNTAX: com.sun.tools.doclint.Messages$Group
                public static REFERENCE: com.sun.tools.doclint.Messages$Group
                public static values(): com.sun.tools.doclint.Messages$Group[]
                valueOf<T>(...args: any[]): any
                optName(): java.lang.String
                notOptName(): java.lang.String
                static accepts(arg0: java.lang.String): boolean
            }
            class Messages$Options {
                map: java.util.Map<java.lang.String, com.sun.tools.doclint.Env$AccessKind>
                static isValidOptions(arg0: java.lang.String): boolean
                constructor(arg0: com.sun.tools.doclint.Messages$Stats)
                isEnabled(arg0: com.sun.tools.doclint.Messages$Group, arg1: com.sun.tools.doclint.Env$AccessKind): boolean
                setOptions(arg0: java.lang.String): void
            }
            class Messages$Stats$Table$1 implements java.util.Comparator<java.lang.Integer> {
                constructor()
                compare<T>(...args: any[]): any
            }
            class Messages$Stats$Table {
                put(arg0: java.lang.String, arg1: int): void
                print(arg0: java.io.PrintWriter): void
                constructor(arg0: com.sun.tools.doclint.Messages$1)
            }
            class Messages$Stats {
                public static OPT: java.lang.String
                public static NO_CODE: java.lang.String
                bundle: java.util.ResourceBundle
                groupCounts: int[]
                dkindCounts: int[]
                codeCounts: java.util.Map<java.lang.String, java.lang.Integer>
                constructor(arg0: java.util.ResourceBundle)
                setEnabled(arg0: boolean): void
                record(arg0: com.sun.tools.doclint.Messages$Group, arg1: javax.tools.Diagnostic$Kind, arg2: java.lang.String): void
                report(arg0: java.io.PrintWriter): void
            }
            class Messages$1 {
            }
            class Messages {
                bundle: java.util.ResourceBundle
                env: com.sun.tools.doclint.Env
                constructor(arg0: com.sun.tools.doclint.Env)
                error(arg0: com.sun.tools.doclint.Messages$Group, arg1: com.sun.source.doctree.DocTree, arg2: java.lang.String, ...arg3: java.lang.Object[]): void
                warning(arg0: com.sun.tools.doclint.Messages$Group, arg1: com.sun.source.doctree.DocTree, arg2: java.lang.String, ...arg3: java.lang.Object[]): void
                setOptions(arg0: java.lang.String): void
                setStatsEnabled(arg0: boolean): void
                reportStats(arg0: java.io.PrintWriter): void
                report<T>(...args: any[]): any
                localize(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
            }
            class Checker$Flag extends java.lang.Enum<com.sun.tools.doclint.Checker$Flag> {
                public static TABLE_HAS_CAPTION: com.sun.tools.doclint.Checker$Flag
                public static HAS_ELEMENT: com.sun.tools.doclint.Checker$Flag
                public static HAS_INLINE_TAG: com.sun.tools.doclint.Checker$Flag
                public static HAS_TEXT: com.sun.tools.doclint.Checker$Flag
                public static REPORTED_BAD_INLINE: com.sun.tools.doclint.Checker$Flag
                public static values(): com.sun.tools.doclint.Checker$Flag[]
                valueOf<T>(...args: any[]): any
            }
            class Checker$TagStackItem {
                tree: com.sun.source.doctree.DocTree
                tag: com.sun.tools.doclint.HtmlTag
                attrs: java.util.Set<com.sun.tools.doclint.HtmlTag$Attr>
                flags: java.util.Set<com.sun.tools.doclint.Checker$Flag>
                constructor(arg0: com.sun.source.doctree.DocTree, arg1: com.sun.tools.doclint.HtmlTag)
                toString<T>(...args: any[]): any
            }
            class Checker$1 {
                static $SwitchMap$javax$lang$model$type$TypeKind: int[]
                static $SwitchMap$javax$lang$model$element$ElementKind: int[]
                static $SwitchMap$com$sun$tools$doclint$HtmlTag: int[]
                static $SwitchMap$com$sun$source$doctree$DocTree$Kind: int[]
                static $SwitchMap$com$sun$tools$doclint$HtmlTag$BlockType: int[]
                static $SwitchMap$com$sun$tools$doclint$HtmlTag$AttrKind: int[]
                static $SwitchMap$com$sun$tools$doclint$HtmlTag$Attr: int[]
            }
            class Checker extends com.sun.source.util.DocTreePathScanner<java.lang.Void, java.lang.Void> {
                env: com.sun.tools.doclint.Env
                foundParams: java.util.Set<javax.lang.model.element.Element>
                foundThrows: java.util.Set<javax.lang.model.type.TypeMirror>
                foundAnchors: java.util.Map<javax.lang.model.element.Element, java.util.Set<java.lang.String>>
                foundInheritDoc: boolean
                foundReturn: boolean
                constructor(arg0: com.sun.tools.doclint.Env)
                public scan(arg0: com.sun.source.doctree.DocCommentTree, arg1: com.sun.source.util.TreePath): java.lang.Void
                visitDocComment<T>(...args: any[]): any
                visitText<T>(...args: any[]): any
                visitEntity<T>(...args: any[]): any
                checkAllowsText(arg0: com.sun.source.doctree.DocTree): void
                visitStartElement<T>(...args: any[]): any
                visitEndElement<T>(...args: any[]): any
                warnIfEmpty<T>(...args: any[]): any
                visitAttribute<T>(...args: any[]): any
                visitAuthor<T>(...args: any[]): any
                visitDocRoot<T>(...args: any[]): any
                visitInheritDoc<T>(...args: any[]): any
                visitLink<T>(...args: any[]): any
                visitLiteral<T>(...args: any[]): any
                visitParam<T>(...args: any[]): any
                visitReference<T>(...args: any[]): any
                visitReturn<T>(...args: any[]): any
                visitSerialData<T>(...args: any[]): any
                visitSerialField<T>(...args: any[]): any
                visitSince<T>(...args: any[]): any
                visitThrows<T>(...args: any[]): any
                visitUnknownBlockTag<T>(...args: any[]): any
                visitUnknownInlineTag<T>(...args: any[]): any
                visitValue<T>(...args: any[]): any
                visitVersion<T>(...args: any[]): any
                visitErroneous<T>(...args: any[]): any
                markEnclosingTag(arg0: com.sun.tools.doclint.Checker$Flag): void
                toString<T>(...args: any[]): any
                hasNonWhitespace(arg0: com.sun.source.doctree.TextTree): boolean
            }
            class Entity extends java.lang.Enum<com.sun.tools.doclint.Entity> {
                public static nbsp: com.sun.tools.doclint.Entity
                public static iexcl: com.sun.tools.doclint.Entity
                public static cent: com.sun.tools.doclint.Entity
                public static pound: com.sun.tools.doclint.Entity
                public static curren: com.sun.tools.doclint.Entity
                public static yen: com.sun.tools.doclint.Entity
                public static brvbar: com.sun.tools.doclint.Entity
                public static sect: com.sun.tools.doclint.Entity
                public static uml: com.sun.tools.doclint.Entity
                public static copy: com.sun.tools.doclint.Entity
                public static ordf: com.sun.tools.doclint.Entity
                public static laquo: com.sun.tools.doclint.Entity
                public static not: com.sun.tools.doclint.Entity
                public static shy: com.sun.tools.doclint.Entity
                public static reg: com.sun.tools.doclint.Entity
                public static macr: com.sun.tools.doclint.Entity
                public static deg: com.sun.tools.doclint.Entity
                public static plusmn: com.sun.tools.doclint.Entity
                public static sup2: com.sun.tools.doclint.Entity
                public static sup3: com.sun.tools.doclint.Entity
                public static acute: com.sun.tools.doclint.Entity
                public static micro: com.sun.tools.doclint.Entity
                public static para: com.sun.tools.doclint.Entity
                public static middot: com.sun.tools.doclint.Entity
                public static cedil: com.sun.tools.doclint.Entity
                public static sup1: com.sun.tools.doclint.Entity
                public static ordm: com.sun.tools.doclint.Entity
                public static raquo: com.sun.tools.doclint.Entity
                public static frac14: com.sun.tools.doclint.Entity
                public static frac12: com.sun.tools.doclint.Entity
                public static frac34: com.sun.tools.doclint.Entity
                public static iquest: com.sun.tools.doclint.Entity
                public static Agrave: com.sun.tools.doclint.Entity
                public static Aacute: com.sun.tools.doclint.Entity
                public static Acirc: com.sun.tools.doclint.Entity
                public static Atilde: com.sun.tools.doclint.Entity
                public static Auml: com.sun.tools.doclint.Entity
                public static Aring: com.sun.tools.doclint.Entity
                public static AElig: com.sun.tools.doclint.Entity
                public static Ccedil: com.sun.tools.doclint.Entity
                public static Egrave: com.sun.tools.doclint.Entity
                public static Eacute: com.sun.tools.doclint.Entity
                public static Ecirc: com.sun.tools.doclint.Entity
                public static Euml: com.sun.tools.doclint.Entity
                public static Igrave: com.sun.tools.doclint.Entity
                public static Iacute: com.sun.tools.doclint.Entity
                public static Icirc: com.sun.tools.doclint.Entity
                public static Iuml: com.sun.tools.doclint.Entity
                public static ETH: com.sun.tools.doclint.Entity
                public static Ntilde: com.sun.tools.doclint.Entity
                public static Ograve: com.sun.tools.doclint.Entity
                public static Oacute: com.sun.tools.doclint.Entity
                public static Ocirc: com.sun.tools.doclint.Entity
                public static Otilde: com.sun.tools.doclint.Entity
                public static Ouml: com.sun.tools.doclint.Entity
                public static times: com.sun.tools.doclint.Entity
                public static Oslash: com.sun.tools.doclint.Entity
                public static Ugrave: com.sun.tools.doclint.Entity
                public static Uacute: com.sun.tools.doclint.Entity
                public static Ucirc: com.sun.tools.doclint.Entity
                public static Uuml: com.sun.tools.doclint.Entity
                public static Yacute: com.sun.tools.doclint.Entity
                public static THORN: com.sun.tools.doclint.Entity
                public static szlig: com.sun.tools.doclint.Entity
                public static agrave: com.sun.tools.doclint.Entity
                public static aacute: com.sun.tools.doclint.Entity
                public static acirc: com.sun.tools.doclint.Entity
                public static atilde: com.sun.tools.doclint.Entity
                public static auml: com.sun.tools.doclint.Entity
                public static aring: com.sun.tools.doclint.Entity
                public static aelig: com.sun.tools.doclint.Entity
                public static ccedil: com.sun.tools.doclint.Entity
                public static egrave: com.sun.tools.doclint.Entity
                public static eacute: com.sun.tools.doclint.Entity
                public static ecirc: com.sun.tools.doclint.Entity
                public static euml: com.sun.tools.doclint.Entity
                public static igrave: com.sun.tools.doclint.Entity
                public static iacute: com.sun.tools.doclint.Entity
                public static icirc: com.sun.tools.doclint.Entity
                public static iuml: com.sun.tools.doclint.Entity
                public static eth: com.sun.tools.doclint.Entity
                public static ntilde: com.sun.tools.doclint.Entity
                public static ograve: com.sun.tools.doclint.Entity
                public static oacute: com.sun.tools.doclint.Entity
                public static ocirc: com.sun.tools.doclint.Entity
                public static otilde: com.sun.tools.doclint.Entity
                public static ouml: com.sun.tools.doclint.Entity
                public static divide: com.sun.tools.doclint.Entity
                public static oslash: com.sun.tools.doclint.Entity
                public static ugrave: com.sun.tools.doclint.Entity
                public static uacute: com.sun.tools.doclint.Entity
                public static ucirc: com.sun.tools.doclint.Entity
                public static uuml: com.sun.tools.doclint.Entity
                public static yacute: com.sun.tools.doclint.Entity
                public static thorn: com.sun.tools.doclint.Entity
                public static yuml: com.sun.tools.doclint.Entity
                public static fnof: com.sun.tools.doclint.Entity
                public static Alpha: com.sun.tools.doclint.Entity
                public static Beta: com.sun.tools.doclint.Entity
                public static Gamma: com.sun.tools.doclint.Entity
                public static Delta: com.sun.tools.doclint.Entity
                public static Epsilon: com.sun.tools.doclint.Entity
                public static Zeta: com.sun.tools.doclint.Entity
                public static Eta: com.sun.tools.doclint.Entity
                public static Theta: com.sun.tools.doclint.Entity
                public static Iota: com.sun.tools.doclint.Entity
                public static Kappa: com.sun.tools.doclint.Entity
                public static Lambda: com.sun.tools.doclint.Entity
                public static Mu: com.sun.tools.doclint.Entity
                public static Nu: com.sun.tools.doclint.Entity
                public static Xi: com.sun.tools.doclint.Entity
                public static Omicron: com.sun.tools.doclint.Entity
                public static Pi: com.sun.tools.doclint.Entity
                public static Rho: com.sun.tools.doclint.Entity
                public static Sigma: com.sun.tools.doclint.Entity
                public static Tau: com.sun.tools.doclint.Entity
                public static Upsilon: com.sun.tools.doclint.Entity
                public static Phi: com.sun.tools.doclint.Entity
                public static Chi: com.sun.tools.doclint.Entity
                public static Psi: com.sun.tools.doclint.Entity
                public static Omega: com.sun.tools.doclint.Entity
                public static alpha: com.sun.tools.doclint.Entity
                public static beta: com.sun.tools.doclint.Entity
                public static gamma: com.sun.tools.doclint.Entity
                public static delta: com.sun.tools.doclint.Entity
                public static epsilon: com.sun.tools.doclint.Entity
                public static zeta: com.sun.tools.doclint.Entity
                public static eta: com.sun.tools.doclint.Entity
                public static theta: com.sun.tools.doclint.Entity
                public static iota: com.sun.tools.doclint.Entity
                public static kappa: com.sun.tools.doclint.Entity
                public static lambda: com.sun.tools.doclint.Entity
                public static mu: com.sun.tools.doclint.Entity
                public static nu: com.sun.tools.doclint.Entity
                public static xi: com.sun.tools.doclint.Entity
                public static omicron: com.sun.tools.doclint.Entity
                public static pi: com.sun.tools.doclint.Entity
                public static rho: com.sun.tools.doclint.Entity
                public static sigmaf: com.sun.tools.doclint.Entity
                public static sigma: com.sun.tools.doclint.Entity
                public static tau: com.sun.tools.doclint.Entity
                public static upsilon: com.sun.tools.doclint.Entity
                public static phi: com.sun.tools.doclint.Entity
                public static chi: com.sun.tools.doclint.Entity
                public static psi: com.sun.tools.doclint.Entity
                public static omega: com.sun.tools.doclint.Entity
                public static thetasym: com.sun.tools.doclint.Entity
                public static upsih: com.sun.tools.doclint.Entity
                public static piv: com.sun.tools.doclint.Entity
                public static bull: com.sun.tools.doclint.Entity
                public static hellip: com.sun.tools.doclint.Entity
                public static prime: com.sun.tools.doclint.Entity
                public static Prime: com.sun.tools.doclint.Entity
                public static oline: com.sun.tools.doclint.Entity
                public static frasl: com.sun.tools.doclint.Entity
                public static weierp: com.sun.tools.doclint.Entity
                public static image: com.sun.tools.doclint.Entity
                public static real: com.sun.tools.doclint.Entity
                public static trade: com.sun.tools.doclint.Entity
                public static alefsym: com.sun.tools.doclint.Entity
                public static larr: com.sun.tools.doclint.Entity
                public static uarr: com.sun.tools.doclint.Entity
                public static rarr: com.sun.tools.doclint.Entity
                public static darr: com.sun.tools.doclint.Entity
                public static harr: com.sun.tools.doclint.Entity
                public static crarr: com.sun.tools.doclint.Entity
                public static lArr: com.sun.tools.doclint.Entity
                public static uArr: com.sun.tools.doclint.Entity
                public static rArr: com.sun.tools.doclint.Entity
                public static dArr: com.sun.tools.doclint.Entity
                public static hArr: com.sun.tools.doclint.Entity
                public static forall: com.sun.tools.doclint.Entity
                public static part: com.sun.tools.doclint.Entity
                public static exist: com.sun.tools.doclint.Entity
                public static empty: com.sun.tools.doclint.Entity
                public static nabla: com.sun.tools.doclint.Entity
                public static isin: com.sun.tools.doclint.Entity
                public static notin: com.sun.tools.doclint.Entity
                public static ni: com.sun.tools.doclint.Entity
                public static prod: com.sun.tools.doclint.Entity
                public static sum: com.sun.tools.doclint.Entity
                public static minus: com.sun.tools.doclint.Entity
                public static lowast: com.sun.tools.doclint.Entity
                public static radic: com.sun.tools.doclint.Entity
                public static prop: com.sun.tools.doclint.Entity
                public static infin: com.sun.tools.doclint.Entity
                public static ang: com.sun.tools.doclint.Entity
                public static and: com.sun.tools.doclint.Entity
                public static or: com.sun.tools.doclint.Entity
                public static cap: com.sun.tools.doclint.Entity
                public static cup: com.sun.tools.doclint.Entity
                public static _int: com.sun.tools.doclint.Entity
                public static there4: com.sun.tools.doclint.Entity
                public static sim: com.sun.tools.doclint.Entity
                public static cong: com.sun.tools.doclint.Entity
                public static asymp: com.sun.tools.doclint.Entity
                public static ne: com.sun.tools.doclint.Entity
                public static equiv: com.sun.tools.doclint.Entity
                public static le: com.sun.tools.doclint.Entity
                public static ge: com.sun.tools.doclint.Entity
                public static sub: com.sun.tools.doclint.Entity
                public static sup: com.sun.tools.doclint.Entity
                public static nsub: com.sun.tools.doclint.Entity
                public static sube: com.sun.tools.doclint.Entity
                public static supe: com.sun.tools.doclint.Entity
                public static oplus: com.sun.tools.doclint.Entity
                public static otimes: com.sun.tools.doclint.Entity
                public static perp: com.sun.tools.doclint.Entity
                public static sdot: com.sun.tools.doclint.Entity
                public static lceil: com.sun.tools.doclint.Entity
                public static rceil: com.sun.tools.doclint.Entity
                public static lfloor: com.sun.tools.doclint.Entity
                public static rfloor: com.sun.tools.doclint.Entity
                public static lang: com.sun.tools.doclint.Entity
                public static rang: com.sun.tools.doclint.Entity
                public static loz: com.sun.tools.doclint.Entity
                public static spades: com.sun.tools.doclint.Entity
                public static clubs: com.sun.tools.doclint.Entity
                public static hearts: com.sun.tools.doclint.Entity
                public static diams: com.sun.tools.doclint.Entity
                public static quot: com.sun.tools.doclint.Entity
                public static amp: com.sun.tools.doclint.Entity
                public static lt: com.sun.tools.doclint.Entity
                public static gt: com.sun.tools.doclint.Entity
                public static OElig: com.sun.tools.doclint.Entity
                public static oelig: com.sun.tools.doclint.Entity
                public static Scaron: com.sun.tools.doclint.Entity
                public static scaron: com.sun.tools.doclint.Entity
                public static Yuml: com.sun.tools.doclint.Entity
                public static circ: com.sun.tools.doclint.Entity
                public static tilde: com.sun.tools.doclint.Entity
                public static ensp: com.sun.tools.doclint.Entity
                public static emsp: com.sun.tools.doclint.Entity
                public static thinsp: com.sun.tools.doclint.Entity
                public static zwnj: com.sun.tools.doclint.Entity
                public static zwj: com.sun.tools.doclint.Entity
                public static lrm: com.sun.tools.doclint.Entity
                public static rlm: com.sun.tools.doclint.Entity
                public static ndash: com.sun.tools.doclint.Entity
                public static mdash: com.sun.tools.doclint.Entity
                public static lsquo: com.sun.tools.doclint.Entity
                public static rsquo: com.sun.tools.doclint.Entity
                public static sbquo: com.sun.tools.doclint.Entity
                public static ldquo: com.sun.tools.doclint.Entity
                public static rdquo: com.sun.tools.doclint.Entity
                public static bdquo: com.sun.tools.doclint.Entity
                public static dagger: com.sun.tools.doclint.Entity
                public static Dagger: com.sun.tools.doclint.Entity
                public static permil: com.sun.tools.doclint.Entity
                public static lsaquo: com.sun.tools.doclint.Entity
                public static rsaquo: com.sun.tools.doclint.Entity
                public static euro: com.sun.tools.doclint.Entity
                code: int
                public static values(): com.sun.tools.doclint.Entity[]
                valueOf<T>(...args: any[]): any
                isValid<T>(...args: any[]): any
            }
            namespace resources {
               class doclint extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class doclint_ja extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }
               class doclint_zh_CN extends java.util.ListResourceBundle {
                   public constructor()
                   protected getContents(): java.lang.Object[][]
               }

            }

         }
         namespace internal {
            namespace xjc {
               namespace reader {
                  namespace xmlschema {
                     namespace bindinfo {
                        class BIClass extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public static NAME: javax.xml.namespace.QName
                            protected constructor()
                            public getClassName(): java.lang.String
                            public getUserSpecifiedImplClass(): java.lang.String
                            public getExistingClassRef(): java.lang.String
                            public getRecursive(): java.lang.String
                            public getJavadoc(): java.lang.String
                            public getName(): javax.xml.namespace.QName
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        abstract class AbstractDeclarationImpl implements com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration {
                            loc: org.xml.sax.Locator
                            protected parent: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo
                            constructor(...args: any[])
                            public getLocation(): org.xml.sax.Locator
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            protected getOwner(): com.sun.xml.internal.xsom.XSComponent
                            protected getBuilder(): com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                            protected getCodeModel(): com.sun.codemodel.internal.JCodeModel
                            public isAcknowledged(): boolean
                            public onSetOwner(): void
                            public getChildren(): java.util.Collection<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration>
                            public markAsAcknowledged(): void
                        }
                        interface BIDeclaration {
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getName(): javax.xml.namespace.QName
                            public getLocation(): org.xml.sax.Locator
                            public markAsAcknowledged(): void
                            public isAcknowledged(): boolean
                            public onSetOwner(): void
                            public getChildren(): java.util.Collection<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration>
                        }
                        class BIEnum$BIEnumMember2 extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIEnumMember {
                            value: java.lang.String
                            constructor()
                        }
                        class BIEnum extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public className: java.lang.String
                            public ref: java.lang.String
                            public javadoc: java.lang.String
                            public members: java.util.Map<java.lang.String, com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIEnumMember>
                            public static NAME: javax.xml.namespace.QName
                            public constructor()
                            public isMapped(): boolean
                            public getName(): javax.xml.namespace.QName
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BindInfo$Documentation {
                            contents: java.util.List<java.lang.Object>
                            addAll(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo$Documentation): void
                        }
                        class BindInfo$AppInfo {
                            contents: java.util.List<java.lang.Object>
                            public addTo(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                        }
                        class BindInfo$1 extends java.io.FilterWriter {
                            buf: char[]
                            this$0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo, arg1: java.io.Writer)
                            write<T>(...args: any[]): any
                        }
                        class BindInfo implements java.lang.Iterable<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration> {
                            public static empty: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo
                            public static bindingFileSchema: com.sun.tools.internal.xjc.SchemaCache
                            public constructor()
                            public isPointless(): boolean
                            setAppinfo(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo$AppInfo): void
                            public getSourceLocation(): org.xml.sax.Locator
                            public setOwner(arg0: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder, arg1: com.sun.xml.internal.xsom.XSComponent): void
                            public getOwner(): com.sun.xml.internal.xsom.XSComponent
                            public getBuilder(): com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                            public addDecl(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration): void
                            get<T>(...args: any[]): any
                            public getDecls(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration[]
                            public getDocumentation(): java.lang.String
                            public absorb(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public size(): int
                            public iterator(): java.util.Iterator<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration>
                            public toCustomizationList(): com.sun.tools.internal.xjc.model.CCustomizations
                            public static getCustomizationContext(): javax.xml.bind.JAXBContext
                            public static getCustomizationUnmarshaller(): javax.xml.bind.Unmarshaller
                        }
                        class BIEnumMember extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public name: java.lang.String
                            public javadoc: java.lang.String
                            public static NAME: javax.xml.namespace.QName
                            protected constructor()
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIGlobalBinding$UnderscoreBinding extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$UnderscoreBinding> {
                            public static WORD_SEPARATOR: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$UnderscoreBinding
                            public static CHAR_IN_WORD: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$UnderscoreBinding
                            nc: com.sun.xml.internal.bind.api.impl.NameConverter
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$UnderscoreBinding[]
                            valueOf<T>(...args: any[]): any
                        }
                        class BIGlobalBinding$TypeSubstitutionElement {
                            type: java.lang.String
                        }
                        class BIGlobalBinding$ClassNameBean {
                            name: java.lang.String
                            clazz: com.sun.codemodel.internal.JDefinedClass
                            constructor()
                            getClazz(arg0: com.sun.codemodel.internal.ClassType): com.sun.codemodel.internal.JDefinedClass
                        }
                        class BIGlobalBinding$ClassNameAdapter extends com.sun.tools.internal.xjc.util.ReadOnlyAdapter<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$ClassNameBean, java.lang.String> {
                            constructor()
                            unmarshal<T>(...args: any[]): any
                        }
                        class BIGlobalBinding$GlobalStandardConversion extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion$User {
                            xmlType: javax.xml.namespace.QName
                            constructor()
                            public equals(arg0: java.lang.Object): boolean
                            public hashCode(): int
                        }
                        class BIGlobalBinding$GlobalVendorConversion extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion$UserAdapter {
                            xmlType: javax.xml.namespace.QName
                            constructor()
                            public equals(arg0: java.lang.Object): boolean
                            public hashCode(): int
                        }
                        class BIGlobalBinding extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public nameConverter: com.sun.xml.internal.bind.api.impl.NameConverter
                            isJavaNamingConventionEnabled<T>(...args: any[]): any
                            simpleTypeSubstitution: boolean
                            generateEnumMemberName: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode
                            codeGenerationStrategy: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy
                            superClass: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$ClassNameBean
                            superInterface: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$ClassNameBean
                            simpleMode: java.lang.String
                            treatRestrictionLikeNewType: java.lang.String
                            generateElementClass: boolean
                            generateMixedExtensions: boolean
                            generateElementProperty: java.lang.Boolean
                            choiceContentProperty: boolean
                            optionalProperty: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode
                            defaultEnumMemberSizeCap: int
                            flattenClasses: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.LocalScoping
                            noMarshaller: java.lang.String
                            noUnmarshaller: java.lang.String
                            noValidator: java.lang.String
                            noValidatingUnmarshaller: java.lang.String
                            typeSubstitution: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$TypeSubstitutionElement
                            public static NAME: javax.xml.namespace.QName
                            setUnderscoreBinding(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$UnderscoreBinding): void
                            getUnderscoreBinding(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding$UnderscoreBinding
                            public getSuperClass(): com.sun.codemodel.internal.JDefinedClass
                            public getSuperInterface(): com.sun.codemodel.internal.JDefinedClass
                            public getDefaultProperty(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIProperty
                            public getSerializable(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISerializable
                            public isGenerateElementClass(): boolean
                            public isGenerateMixedExtensions(): boolean
                            public isChoiceContentPropertyEnabled(): boolean
                            public getDefaultEnumMemberSizeCap(): int
                            public isSimpleMode(): boolean
                            public isRestrictionFreshType(): boolean
                            public getEnumMemberMode(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode
                            public isSimpleTypeSubstitution(): boolean
                            public getCodeGenerationStrategy(): com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy
                            public getFlattenClasses(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.LocalScoping
                            public errorCheck(): void
                            setGenerateIsSetMethod(arg0: boolean): void
                            setXjcSerializable(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISerializable): void
                            public onSetOwner(): void
                            public constructor()
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public dispatchGlobalConversions(arg0: com.sun.xml.internal.xsom.XSSchemaSet): void
                            canBeMappedToTypeSafeEnum<T>(...args: any[]): any
                            public getName(): javax.xml.namespace.QName
                            public isEqual(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding): boolean
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIDom extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            type: java.lang.String
                            public static NAME: javax.xml.namespace.QName
                            public constructor()
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIProperty$1 extends com.sun.xml.internal.xsom.util.XSFinder {
                            this$0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIProperty
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIProperty)
                            attributeDecl<T>(...args: any[]): any
                            attributeUse<T>(...args: any[]): any
                            schema<T>(...args: any[]): any
                        }
                        class BIProperty$2 implements com.sun.xml.internal.xsom.visitor.XSFunction<com.sun.xml.internal.xsom.XSComponent> {
                            constructor()
                            attributeUse<T>(...args: any[]): any
                            particle<T>(...args: any[]): any
                            schema<T>(...args: any[]): any
                            attributeDecl<T>(...args: any[]): any
                            wildcard<T>(...args: any[]): any
                            modelGroupDecl<T>(...args: any[]): any
                            modelGroup<T>(...args: any[]): any
                            elementDecl<T>(...args: any[]): any
                            complexType<T>(...args: any[]): any
                            simpleType<T>(...args: any[]): any
                            attGroupDecl<T>(...args: any[]): any
                            empty<T>(...args: any[]): any
                            annotation<T>(...args: any[]): any
                            facet<T>(...args: any[]): any
                            notation<T>(...args: any[]): any
                            identityConstraint<T>(...args: any[]): any
                            xpath<T>(...args: any[]): any
                        }
                        class BIProperty$BaseTypeBean {
                            conv: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion
                            name: java.lang.String
                        }
                        class BIProperty$3 {
                            static $SwitchMap$com$sun$tools$internal$xjc$reader$RawTypeSet$Mode: int[]
                            static $SwitchMap$com$sun$tools$internal$xjc$reader$xmlschema$bindinfo$OptionalPropertyMode: int[]
                        }
                        class BIProperty extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public static NAME: javax.xml.namespace.QName
                            constructor(...args: any[])
                            public getChildren(): java.util.Collection<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration>
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getPropertyName(arg0: boolean): java.lang.String
                            public getJavadoc(): java.lang.String
                            public getBaseType(): com.sun.codemodel.internal.JType
                            getCollectionType(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.CollectionTypeAttribute
                            setGenerateIsSetMethod(arg0: boolean): void
                            public getOptionalPropertyMode(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode
                            public isConstantProperty(): boolean
                            public createValueProperty(arg0: java.lang.String, arg1: boolean, arg2: com.sun.xml.internal.xsom.XSComponent, arg3: com.sun.tools.internal.xjc.model.TypeUse, arg4: javax.xml.namespace.QName): com.sun.tools.internal.xjc.model.CValuePropertyInfo
                            public createAttributeProperty(arg0: com.sun.xml.internal.xsom.XSAttributeUse, arg1: com.sun.tools.internal.xjc.model.TypeUse): com.sun.tools.internal.xjc.model.CAttributePropertyInfo
                            public createElementProperty(arg0: java.lang.String, arg1: boolean, arg2: com.sun.xml.internal.xsom.XSParticle, arg3: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.model.CElementPropertyInfo
                            public createDummyExtendedMixedReferenceProperty(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.model.CReferencePropertyInfo
                            public createContentExtendedMixedReferenceProperty(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.model.CReferencePropertyInfo
                            public createReferenceProperty(arg0: java.lang.String, arg1: boolean, arg2: com.sun.xml.internal.xsom.XSComponent, arg3: com.sun.tools.internal.xjc.reader.RawTypeSet, arg4: boolean, arg5: boolean, arg6: boolean, arg7: boolean): com.sun.tools.internal.xjc.model.CReferencePropertyInfo
                            public createElementOrReferenceProperty(arg0: java.lang.String, arg1: boolean, arg2: com.sun.xml.internal.xsom.XSParticle, arg3: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.model.CPropertyInfo
                            public markAsAcknowledged(): void
                            protected getDefault(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIProperty
                            public static getCustomization(arg0: com.sun.xml.internal.xsom.XSComponent): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIProperty
                            public getName(): javax.xml.namespace.QName
                            public getConv(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion
                            public onSetOwner(): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BISerializable {
                            public uid: java.lang.Long
                            public constructor()
                        }
                        class EnumMemberMode extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode> {
                            public static SKIP: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode
                            public static ERROR: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode
                            public static GENERATE: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode[]
                            valueOf<T>(...args: any[]): any
                            public getModeWithEnum(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.EnumMemberMode
                        }
                        class LocalScoping extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.LocalScoping> {
                            public static NESTED: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.LocalScoping
                            public static TOPLEVEL: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.LocalScoping
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.LocalScoping[]
                            valueOf<T>(...args: any[]): any
                        }
                        class CollectionTypeAttribute {
                            collectionType: java.lang.String
                            constructor()
                            get(arg0: com.sun.tools.internal.xjc.model.Model): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                        }
                        class OptionalPropertyMode extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode> {
                            public static PRIMITIVE: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode
                            public static WRAPPER: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode
                            public static ISSET: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.OptionalPropertyMode[]
                            valueOf<T>(...args: any[]): any
                        }
                        class BIConversion$Static extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion {
                            public constructor(arg0: org.xml.sax.Locator, arg1: com.sun.tools.internal.xjc.model.TypeUse)
                            public getTypeUse(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIConversion$User extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion {
                            public static NAME: javax.xml.namespace.QName
                            constructor(...args: any[])
                            public getTypeUse(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIConversion$UserAdapter extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion {
                            public constructor()
                            public getTypeUse(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        abstract class BIConversion extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public static NAME: javax.xml.namespace.QName
                            constructor(...args: any[])
                            public getTypeUse(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class Messages extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.Messages> {
                            public static ERR_CANNOT_BE_BOUND_TO_SIMPLETYPE: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.Messages
                            public static ERR_UNDEFINED_SIMPLE_TYPE: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.Messages
                            public static ERR_ILLEGAL_FIXEDATTR: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.Messages
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.Messages[]
                            valueOf<T>(...args: any[]): any
                            format(...arg0: java.lang.Object[]): java.lang.String
                        }
                        class ForkingFilter extends org.xml.sax.helpers.XMLFilterImpl {
                            constructor(...args: any[])
                            public getSideHandler(): org.xml.sax.ContentHandler
                            public setDocumentLocator(arg0: org.xml.sax.Locator): void
                            public getDocumentLocator(): org.xml.sax.Locator
                            public startDocument(): void
                            public endDocument(): void
                            public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                            public endPrefixMapping(arg0: java.lang.String): void
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public startForking(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes, arg4: org.xml.sax.ContentHandler): void
                            public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public characters(arg0: char[], arg1: int, arg2: int): void
                            public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                        }
                        class DomHandlerEx$DomAndLocation {
                            public element: org.w3c.dom.Element
                            public loc: org.xml.sax.Locator
                            public constructor(arg0: org.w3c.dom.Element, arg1: org.xml.sax.Locator)
                        }
                        class DomHandlerEx$ResultImpl$1 extends org.xml.sax.helpers.XMLFilterImpl {
                            this$0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.DomHandlerEx$ResultImpl
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.DomHandlerEx$ResultImpl)
                            public setDocumentLocator(arg0: org.xml.sax.Locator): void
                        }
                        class DomHandlerEx$ResultImpl extends javax.xml.transform.sax.SAXResult {
                            s2d: com.sun.xml.internal.bind.marshaller.SAX2DOMEx
                            location: org.xml.sax.Locator
                            constructor()
                        }
                        class DomHandlerEx implements javax.xml.bind.annotation.DomHandler<com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.DomHandlerEx$DomAndLocation, com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.DomHandlerEx$ResultImpl> {
                            constructor()
                            createUnmarshaller<T>(...args: any[]): any
                            getElement<T>(...args: any[]): any
                            marshal<T>(...args: any[]): any
                        }
                        class BIXSubstitutable extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public static NAME: javax.xml.namespace.QName
                            public constructor()
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIXPluginCustomization extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public element: org.w3c.dom.Element
                            public constructor(arg0: org.w3c.dom.Element, arg1: org.xml.sax.Locator)
                            public onSetOwner(): void
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIXDom extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDom {
                            type: java.lang.String
                            public constructor()
                        }
                        class BISchemaBinding$NameRules {
                            typeName: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$NamingRule
                            elementName: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$NamingRule
                            attributeName: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$NamingRule
                            modelGroupName: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$NamingRule
                            anonymousTypeName: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$NamingRule
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$1)
                        }
                        class BISchemaBinding$PackageInfo {
                            name: java.lang.String
                            javadoc: java.lang.String
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$1)
                        }
                        class BISchemaBinding$NamingRule {
                            constructor(...args: any[])
                            public mangle(arg0: java.lang.String): java.lang.String
                        }
                        class BISchemaBinding$1 {
                        }
                        class BISchemaBinding extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public map: boolean
                            public static NAME: javax.xml.namespace.QName
                            public constructor()
                            public mangleClassName(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.XSComponent): java.lang.String
                            public mangleAnonymousTypeClassName(arg0: java.lang.String): java.lang.String
                            public getPackageName(): java.lang.String
                            public getJavadoc(): java.lang.String
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                            static access$000(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BISchemaBinding$NamingRule
                        }
                        class BIInlineBinaryData extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public static NAME: javax.xml.namespace.QName
                            public constructor()
                            public static handle(arg0: com.sun.xml.internal.xsom.XSComponent, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): void
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class BIFactoryMethod extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AbstractDeclarationImpl {
                            public name: java.lang.String
                            public static NAME: javax.xml.namespace.QName
                            public constructor()
                            public static handle(arg0: com.sun.xml.internal.xsom.XSComponent, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): void
                            public getName(): javax.xml.namespace.QName
                            public markAsAcknowledged(): void
                            public getChildren(): java.util.Collection
                            public onSetOwner(): void
                            public setParent(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo): void
                            public getLocation(): org.xml.sax.Locator
                        }
                        class AnnotationParserFactoryImpl$1$1 extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.ForkingFilter {
                            val$errorHandler: org.xml.sax.ErrorHandler
                            this$1: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl$1
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl$1, arg1: org.xml.sax.ContentHandler, arg2: org.xml.sax.ErrorHandler)
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                        }
                        class AnnotationParserFactoryImpl$1 extends com.sun.xml.internal.xsom.parser.AnnotationParser {
                            this$0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl)
                            public getContentHandler(arg0: com.sun.xml.internal.xsom.parser.AnnotationContext, arg1: java.lang.String, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): org.xml.sax.ContentHandler
                            getResult<T>(...args: any[]): any
                        }
                        class AnnotationParserFactoryImpl$ValidatorProtecter extends org.xml.sax.helpers.XMLFilterImpl {
                            public constructor(arg0: org.xml.sax.ContentHandler)
                            public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                        }
                        class AnnotationParserFactoryImpl implements com.sun.xml.internal.xsom.parser.AnnotationParserFactory {
                            public constructor(arg0: com.sun.tools.internal.xjc.Options)
                            public create(): com.sun.xml.internal.xsom.parser.AnnotationParser
                            static access$000(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl): com.sun.tools.internal.xjc.Options
                            static access$100(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl): javax.xml.validation.ValidatorHandler
                            static access$102(arg0: com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.AnnotationParserFactoryImpl, arg1: javax.xml.validation.ValidatorHandler): javax.xml.validation.ValidatorHandler
                        }

                     }
                     namespace parser {
                        class XMLSchemaInternalizationLogic$ReferenceFinder extends com.sun.tools.internal.xjc.reader.internalizer.AbstractReferenceFinderImpl {
                            constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                            protected findExternalResource(arg0: java.lang.String, arg1: java.lang.String, arg2: org.xml.sax.Attributes): java.lang.String
                        }
                        class XMLSchemaInternalizationLogic implements com.sun.tools.internal.xjc.reader.internalizer.InternalizationLogic {
                            public constructor()
                            public createExternalReferenceFinder(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest): org.xml.sax.helpers.XMLFilterImpl
                            public checkIfValidTargetNode(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: org.w3c.dom.Element, arg2: org.w3c.dom.Element): boolean
                            public refineTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                        }
                        class SchemaConstraintChecker$1 implements org.w3c.dom.ls.LSResourceResolver {
                            val$entityResolver: org.xml.sax.EntityResolver
                            constructor(arg0: org.xml.sax.EntityResolver)
                            public resolveResource(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): org.w3c.dom.ls.LSInput
                        }
                        class SchemaConstraintChecker {
                            public constructor()
                            public static check(arg0: org.xml.sax.InputSource[], arg1: com.sun.tools.internal.xjc.ErrorReceiver, arg2: org.xml.sax.EntityResolver, arg3: boolean): boolean
                            public static main(arg0: java.lang.String[]): void
                        }
                        class Messages {
                            static ERR_UNACKNOWLEDGED_CUSTOMIZATION: java.lang.String
                            static WARN_INCORRECT_URI: java.lang.String
                            static WARN_UNABLE_TO_CHECK_CORRECTNESS: java.lang.String
                            constructor()
                            static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                        }
                        class LSInputSAXWrapper implements org.w3c.dom.ls.LSInput {
                            static $assertionsDisabled: boolean
                            public constructor(arg0: org.xml.sax.InputSource)
                            public getCharacterStream(): java.io.Reader
                            public setCharacterStream(arg0: java.io.Reader): void
                            public getByteStream(): java.io.InputStream
                            public setByteStream(arg0: java.io.InputStream): void
                            public getStringData(): java.lang.String
                            public setStringData(arg0: java.lang.String): void
                            public getSystemId(): java.lang.String
                            public setSystemId(arg0: java.lang.String): void
                            public getPublicId(): java.lang.String
                            public setPublicId(arg0: java.lang.String): void
                            public getBaseURI(): java.lang.String
                            public setBaseURI(arg0: java.lang.String): void
                            public getEncoding(): java.lang.String
                            public setEncoding(arg0: java.lang.String): void
                            public getCertifiedText(): boolean
                            public setCertifiedText(arg0: boolean): void
                        }
                        class IncorrectNamespaceURIChecker extends org.xml.sax.helpers.XMLFilterImpl {
                            public constructor(arg0: org.xml.sax.ErrorHandler)
                            public endDocument(): void
                            public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                            public endPrefixMapping(arg0: java.lang.String): void
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public setDocumentLocator(arg0: org.xml.sax.Locator): void
                        }
                        class CustomizationContextChecker extends org.xml.sax.helpers.XMLFilterImpl {
                            public constructor(arg0: org.xml.sax.ErrorHandler)
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                            public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                            public setDocumentLocator(arg0: org.xml.sax.Locator): void
                        }

                     }
                     namespace ct {
                        class ComplexTypeFieldBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent {
                            static $assertionsDisabled: boolean
                            public constructor()
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                            public recordBindingMode(arg0: com.sun.xml.internal.xsom.XSComplexType, arg1: com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode): void
                            protected getBindingMode(arg0: com.sun.xml.internal.xsom.XSComplexType): com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode
                        }
                        abstract class CTBuilder {
                            protected builder: com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeFieldBuilder
                            protected selector: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector
                            protected simpleTypeBuilder: com.sun.tools.internal.xjc.reader.xmlschema.SimpleTypeBuilder
                            protected errorReceiver: com.sun.tools.internal.xjc.ErrorReceiver
                            protected green: com.sun.tools.internal.xjc.reader.xmlschema.BindGreen
                            protected schemas: com.sun.xml.internal.xsom.XSSchemaSet
                            protected bgmBuilder: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                            constructor()
                            isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class ComplexTypeBindingMode extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode> {
                            public static NORMAL: com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode
                            public static FALLBACK_CONTENT: com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode
                            public static FALLBACK_REST: com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode
                            public static FALLBACK_EXTENSION: com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.ct.ComplexTypeBindingMode[]
                            valueOf<T>(...args: any[]): any
                        }
                        class STDerivedComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            static $assertionsDisabled: boolean
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class RestrictedComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            static $assertionsDisabled: boolean
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class MultiWildcardComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class MixedExtendedComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.AbstractExtendedComplexTypeBuilder {
                            static $assertionsDisabled: boolean
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class AbstractExtendedComplexTypeBuilder$1 implements com.sun.xml.internal.xsom.visitor.XSTermFunction<com.sun.xml.internal.rngom.nc.NameClass> {
                            this$0: com.sun.tools.internal.xjc.reader.xmlschema.ct.AbstractExtendedComplexTypeBuilder
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ct.AbstractExtendedComplexTypeBuilder)
                            wildcard<T>(...args: any[]): any
                            modelGroupDecl<T>(...args: any[]): any
                            modelGroup<T>(...args: any[]): any
                            elementDecl<T>(...args: any[]): any
                        }
                        abstract class AbstractExtendedComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            protected characteristicNameClasses: java.util.Map<com.sun.xml.internal.xsom.XSComplexType, com.sun.xml.internal.rngom.nc.NameClass[]>
                            protected contentModelNameClassBuilder: com.sun.xml.internal.xsom.visitor.XSTermFunction<com.sun.xml.internal.rngom.nc.NameClass>
                            constructor()
                            protected checkCollision(arg0: com.sun.xml.internal.rngom.nc.NameClass, arg1: com.sun.xml.internal.rngom.nc.NameClass, arg2: com.sun.xml.internal.xsom.XSComplexType): boolean
                            protected getLastRestrictedType(arg0: com.sun.xml.internal.xsom.XSComplexType): com.sun.xml.internal.xsom.XSComplexType
                            protected checkIfExtensionSafe(arg0: com.sun.xml.internal.xsom.XSComplexType, arg1: com.sun.xml.internal.xsom.XSComplexType): boolean
                            static access$000(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ct.AbstractExtendedComplexTypeBuilder, arg1: com.sun.xml.internal.xsom.XSDeclaration): com.sun.xml.internal.rngom.nc.NameClass
                        }
                        class MixedComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class Messages extends java.lang.Enum<com.sun.tools.internal.xjc.reader.xmlschema.ct.Messages> {
                            public static ERR_NO_FURTHER_EXTENSION: com.sun.tools.internal.xjc.reader.xmlschema.ct.Messages
                            public static values(): com.sun.tools.internal.xjc.reader.xmlschema.ct.Messages[]
                            valueOf<T>(...args: any[]): any
                            toString<T>(...args: any[]): any
                            public format(...arg0: java.lang.Object[]): java.lang.String
                        }
                        class FreshComplexTypeBuilder$1 implements com.sun.xml.internal.xsom.visitor.XSContentTypeVisitor {
                            val$ct: com.sun.xml.internal.xsom.XSComplexType
                            this$0: com.sun.tools.internal.xjc.reader.xmlschema.ct.FreshComplexTypeBuilder
                            constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ct.FreshComplexTypeBuilder, arg1: com.sun.xml.internal.xsom.XSComplexType)
                            public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                            public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                            public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                        }
                        class FreshComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class ExtendedComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.AbstractExtendedComplexTypeBuilder {
                            static $assertionsDisabled: boolean
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }
                        class ChoiceContentComplexTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.ct.CTBuilder {
                            constructor()
                            public isApplicable(arg0: com.sun.xml.internal.xsom.XSComplexType): boolean
                            public build(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                        }

                     }
                     class BGMBuilder$1 extends com.sun.xml.internal.xsom.util.XSFinder {
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder)
                         attributeUse<T>(...args: any[]): any
                         simpleType<T>(...args: any[]): any
                         wildcard<T>(...args: any[]): any
                     }
                     class BGMBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent {
                         public inExtensionMode: boolean
                         public defaultPackage1: java.lang.String
                         public defaultPackage2: java.lang.String
                         public model: com.sun.tools.internal.xjc.model.Model
                         public fieldRendererFactory: com.sun.tools.internal.xjc.generator.bean.field.FieldRendererFactory
                         public static build(arg0: com.sun.xml.internal.xsom.XSSchemaSet, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.tools.internal.xjc.ErrorReceiver, arg3: com.sun.tools.internal.xjc.Options): com.sun.tools.internal.xjc.model.Model
                         protected constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: boolean, arg3: com.sun.tools.internal.xjc.generator.bean.field.FieldRendererFactory, arg4: java.util.List<com.sun.tools.internal.xjc.Plugin>)
                         public getGlobalBinding(): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIGlobalBinding
                         public getParticleBinder(): com.sun.tools.internal.xjc.reader.xmlschema.ParticleBinder
                         public getNameConverter(): com.sun.xml.internal.bind.api.impl.NameConverter
                         public getOrCreateBindInfo(arg0: com.sun.xml.internal.xsom.XSComponent): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo
                         public getBindInfo(arg0: com.sun.xml.internal.xsom.XSComponent): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BindInfo
                         protected getLocalDomCustomization(arg0: com.sun.xml.internal.xsom.XSParticle): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDom
                         public ying(arg0: com.sun.xml.internal.xsom.XSComponent, arg1: com.sun.xml.internal.xsom.XSComponent): void
                         public getIdentityTransformer(): javax.xml.transform.Transformer
                         public getReferer(arg0: com.sun.xml.internal.xsom.XSType): java.util.Set<com.sun.xml.internal.xsom.XSComponent>
                         public static getName(arg0: com.sun.xml.internal.xsom.XSDeclaration): javax.xml.namespace.QName
                         public deriveName(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.XSComponent): java.lang.String
                         public isGenerateMixedExtensions(): boolean
                     }
                     abstract class BindingComponent {
                         protected constructor()
                         protected getErrorReporter(): com.sun.tools.internal.xjc.reader.xmlschema.ErrorReporter
                         protected getClassSelector(): com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector
                     }
                     class BindGreen extends com.sun.tools.internal.xjc.reader.xmlschema.ColorBinder {
                         public constructor()
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attContainer(arg0: com.sun.xml.internal.xsom.XSAttContainer): void
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                     }
                     abstract class ColorBinder extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent implements com.sun.xml.internal.xsom.visitor.XSVisitor {
                         protected builder: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         protected selector: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector
                         constructor()
                         protected getCurrentBean(): com.sun.tools.internal.xjc.model.CClassInfo
                         protected getCurrentRoot(): com.sun.xml.internal.xsom.XSComponent
                         protected createSimpleTypeProperty(arg0: com.sun.xml.internal.xsom.XSSimpleType, arg1: java.lang.String): void
                         public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                         public schema(arg0: com.sun.xml.internal.xsom.XSSchema): void
                         public facet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                         public notation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                         public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                         public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): void
                     }
                     class BindPurple extends com.sun.tools.internal.xjc.reader.xmlschema.ColorBinder {
                         public constructor()
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                     }
                     class RefererFinder implements com.sun.xml.internal.xsom.visitor.XSVisitor {
                         constructor()
                         public getReferer(arg0: com.sun.xml.internal.xsom.XSComponent): java.util.Set<com.sun.xml.internal.xsom.XSComponent>
                         public schemaSet(arg0: com.sun.xml.internal.xsom.XSSchemaSet): void
                         public schema(arg0: com.sun.xml.internal.xsom.XSSchema): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public facet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                         public notation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                         public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                         public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                     }
                     class ParticleBinder$1 implements com.sun.xml.internal.xsom.visitor.XSTermVisitor {
                         val$repeated: boolean
                         val$name: java.lang.StringBuilder
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.ParticleBinder
                         constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ParticleBinder, arg1: boolean, arg2: java.lang.StringBuilder)
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                     }
                     abstract class ParticleBinder {
                         protected builder: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         protected constructor()
                         build<T>(...args: any[]): any
                         public checkFallback(arg0: com.sun.xml.internal.xsom.XSParticle): boolean
                         protected getCurrentBean(): com.sun.tools.internal.xjc.model.CClassInfo
                         protected getLocalPropCustomization(arg0: com.sun.xml.internal.xsom.XSParticle): com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIProperty
                         protected getLocalCustomization<T extends com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIDeclaration>(arg0: com.sun.xml.internal.xsom.XSParticle, arg1: java.lang.Class<T>): T
                         protected computeLabel(arg0: com.sun.xml.internal.xsom.XSParticle): java.lang.String
                         makeJavaName<T>(...args: any[]): any
                         protected getSpecDefaultName(arg0: com.sun.xml.internal.xsom.XSModelGroup, arg1: boolean): java.lang.String
                         protected getErrorReporter(): com.sun.tools.internal.xjc.reader.xmlschema.ErrorReporter
                         protected getClassSelector(): com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector
                     }
                     class ErrorReporter extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent {
                         public constructor()
                         error(arg0: org.xml.sax.Locator, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                         warning(arg0: org.xml.sax.Locator, arg1: java.lang.String, ...arg2: java.lang.Object[]): void
                     }
                     class ClassSelector$Binding {
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: com.sun.tools.internal.xjc.model.CTypeInfo)
                         build(): void
                         static access$700(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector$Binding): com.sun.tools.internal.xjc.model.CTypeInfo
                     }
                     class ClassSelector extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent {
                         boundElements: java.util.Map<com.sun.xml.internal.xsom.XSComponent, com.sun.tools.internal.xjc.model.CElementInfo>
                         static $assertionsDisabled: boolean
                         public constructor()
                         public getClassScope(): com.sun.tools.internal.xjc.model.CClassInfoParent
                         public pushClassScope(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent): void
                         public popClassScope(): void
                         public getCurrentRoot(): com.sun.xml.internal.xsom.XSComponent
                         public getCurrentBean(): com.sun.tools.internal.xjc.model.CClassInfo
                         public isBound(arg0: com.sun.xml.internal.xsom.XSElementDecl, arg1: com.sun.xml.internal.xsom.XSComponent): com.sun.tools.internal.xjc.model.CElement
                         bindToType<T>(...args: any[]): any
                         _bindToClass(arg0: com.sun.xml.internal.xsom.XSComponent, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: boolean): com.sun.tools.internal.xjc.model.CTypeInfo
                         public executeTasks(): void
                         public queueBuild(arg0: com.sun.xml.internal.xsom.XSComponent, arg1: com.sun.tools.internal.xjc.model.CElement): void
                         public getPackage(arg0: java.lang.String): com.sun.codemodel.internal.JPackage
                         static access$000(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector): java.util.Set
                         static access$100(): java.lang.String[]
                         static access$200(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector, arg1: com.sun.xml.internal.xsom.XSComponent): boolean
                         static access$300(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector, arg1: com.sun.tools.internal.xjc.model.CClassInfo, arg2: com.sun.xml.internal.xsom.XSComponent): void
                         static access$400(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector): com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         static access$500(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector): com.sun.xml.internal.xsom.XSComponent
                         static access$600(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector): com.sun.tools.internal.xjc.model.CClassInfo
                         static access$502(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector, arg1: com.sun.xml.internal.xsom.XSComponent): com.sun.xml.internal.xsom.XSComponent
                         static access$602(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector, arg1: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.model.CClassInfo
                     }
                     interface ClassBinder extends com.sun.xml.internal.xsom.visitor.XSFunction<com.sun.tools.internal.xjc.model.CElement> {
                     }
                     class SimpleTypeBuilder$1 implements com.sun.xml.internal.xsom.visitor.XSSimpleTypeFunction<com.sun.tools.internal.xjc.model.TypeUse> {
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.SimpleTypeBuilder
                         constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.SimpleTypeBuilder)
                         listSimpleType<T>(...args: any[]): any
                         unionSimpleType<T>(...args: any[]): any
                         restrictionSimpleType<T>(...args: any[]): any
                     }
                     class SimpleTypeBuilder$2 {
                         static $SwitchMap$com$sun$tools$internal$xjc$reader$xmlschema$bindinfo$EnumMemberMode: int[]
                     }
                     class SimpleTypeBuilder extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent {
                         protected builder: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         public refererStack: java.util.Stack<com.sun.xml.internal.xsom.XSComponent>
                         public static builtinConversions: java.util.Map<java.lang.String, com.sun.tools.internal.xjc.model.TypeUse>
                         public composer: com.sun.xml.internal.xsom.visitor.XSSimpleTypeFunction<com.sun.tools.internal.xjc.model.TypeUse>
                         static $assertionsDisabled: boolean
                         public constructor()
                         public build(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                         public buildDef(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                         public getReferer(): com.sun.xml.internal.xsom.XSComponent
                         compose(arg0: com.sun.xml.internal.xsom.XSSimpleType): com.sun.tools.internal.xjc.model.TypeUse
                         public static canBeMappedToTypeSafeEnum(arg0: com.sun.xml.internal.xsom.XSSimpleType): boolean
                         public isAcknowledgedXmimeContentTypes(arg0: com.sun.xml.internal.xsom.XSComponent): boolean
                     }
                     class WildcardNameClassBuilder implements com.sun.xml.internal.xsom.visitor.XSWildcardFunction<com.sun.xml.internal.rngom.nc.NameClass> {
                         static $assertionsDisabled: boolean
                         public static build(arg0: com.sun.xml.internal.xsom.XSWildcard): com.sun.xml.internal.rngom.nc.NameClass
                         any<T>(...args: any[]): any
                         other<T>(...args: any[]): any
                         union<T>(...args: any[]): any
                     }
                     class UnusedCustomizationChecker extends com.sun.tools.internal.xjc.reader.xmlschema.BindingComponent implements com.sun.xml.internal.xsom.visitor.XSVisitor , com.sun.xml.internal.xsom.visitor.XSSimpleTypeVisitor {
                         constructor()
                         run(): void
                         public annotation(arg0: com.sun.xml.internal.xsom.XSAnnotation): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public schema(arg0: com.sun.xml.internal.xsom.XSSchema): void
                         public facet(arg0: com.sun.xml.internal.xsom.XSFacet): void
                         public notation(arg0: com.sun.xml.internal.xsom.XSNotation): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                         public listSimpleType(arg0: com.sun.xml.internal.xsom.XSListSimpleType): void
                         public restrictionSimpleType(arg0: com.sun.xml.internal.xsom.XSRestrictionSimpleType): void
                         public unionSimpleType(arg0: com.sun.xml.internal.xsom.XSUnionSimpleType): void
                         public identityConstraint(arg0: com.sun.xml.internal.xsom.XSIdentityConstraint): void
                         public xpath(arg0: com.sun.xml.internal.xsom.XSXPath): void
                     }
                     class RawTypeSetBuilder$WildcardRef extends com.sun.tools.internal.xjc.reader.RawTypeSet$Ref {
                         constructor(...args: any[])
                         protected toTypeRef(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): com.sun.tools.internal.xjc.model.CTypeRef
                         protected toElementRef(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): void
                         protected canBeType(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                         protected isListOfValues(): boolean
                         protected id(): com.sun.xml.internal.bind.v2.model.core.ID
                     }
                     class RawTypeSetBuilder$CClassRef extends com.sun.tools.internal.xjc.reader.RawTypeSet$Ref {
                         public target: com.sun.tools.internal.xjc.model.CClass
                         public decl: com.sun.xml.internal.xsom.XSElementDecl
                         constructor(arg0: com.sun.xml.internal.xsom.XSElementDecl, arg1: com.sun.tools.internal.xjc.model.CClass)
                         protected toTypeRef(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): com.sun.tools.internal.xjc.model.CTypeRef
                         protected toElementRef(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): void
                         protected canBeType(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                         protected isListOfValues(): boolean
                         protected id(): com.sun.xml.internal.bind.v2.model.core.ID
                     }
                     class RawTypeSetBuilder$CElementInfoRef extends com.sun.tools.internal.xjc.reader.RawTypeSet$Ref {
                         public target: com.sun.tools.internal.xjc.model.CElementInfo
                         public decl: com.sun.xml.internal.xsom.XSElementDecl
                         static $assertionsDisabled: boolean
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.RawTypeSetBuilder
                         constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.RawTypeSetBuilder, arg1: com.sun.xml.internal.xsom.XSElementDecl, arg2: com.sun.tools.internal.xjc.model.CElementInfo)
                         protected toTypeRef(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): com.sun.tools.internal.xjc.model.CTypeRef
                         protected toElementRef(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): void
                         protected canBeType(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                         protected isListOfValues(): boolean
                         protected id(): com.sun.xml.internal.bind.v2.model.core.ID
                         protected getExpectedMimeType(): javax.activation.MimeType
                     }
                     class RawTypeSetBuilder$XmlTypeRef extends com.sun.tools.internal.xjc.reader.RawTypeSet$Ref {
                         public constructor(arg0: com.sun.xml.internal.xsom.XSElementDecl)
                         protected toTypeRef(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): com.sun.tools.internal.xjc.model.CTypeRef
                         protected toElementRef(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): void
                         protected canBeType(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                         protected isListOfValues(): boolean
                         protected id(): com.sun.xml.internal.bind.v2.model.core.ID
                         protected getExpectedMimeType(): javax.activation.MimeType
                     }
                     class RawTypeSetBuilder implements com.sun.xml.internal.xsom.visitor.XSTermVisitor {
                         protected builder: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         public static build(arg0: com.sun.xml.internal.xsom.XSParticle, arg1: boolean): com.sun.tools.internal.xjc.reader.RawTypeSet
                         public constructor()
                         public getRefs(): java.util.Set<com.sun.tools.internal.xjc.reader.RawTypeSet$Ref>
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                     }
                     class MultiplicityCounter implements com.sun.xml.internal.xsom.visitor.XSTermFunction<com.sun.tools.internal.xjc.model.Multiplicity> {
                         public static theInstance: com.sun.tools.internal.xjc.reader.xmlschema.MultiplicityCounter
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): com.sun.tools.internal.xjc.model.Multiplicity
                         wildcard<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                     }
                     class Messages {
                         static WARN_NO_GLOBAL_ELEMENT: java.lang.String
                         public static WARN_UNUSED_EXPECTED_CONTENT_TYPES: java.lang.String
                         static ERR_MULTIPLE_SCHEMA_BINDINGS: java.lang.String
                         static ERR_MULTIPLE_SCHEMA_BINDINGS_LOCATION: java.lang.String
                         static JAVADOC_HEADING: java.lang.String
                         static ERR_RESERVED_CLASS_NAME: java.lang.String
                         static ERR_CLASS_NAME_IS_REQUIRED: java.lang.String
                         static ERR_INCORRECT_CLASS_NAME: java.lang.String
                         static ERR_INCORRECT_PACKAGE_NAME: java.lang.String
                         static ERR_CANNOT_BE_TYPE_SAFE_ENUM: java.lang.String
                         static ERR_CANNOT_BE_TYPE_SAFE_ENUM_LOCATION: java.lang.String
                         static ERR_NO_ENUM_NAME_AVAILABLE: java.lang.String
                         static ERR_NO_ENUM_FACET: java.lang.String
                         static ERR_ILLEGAL_EXPECTED_MIME_TYPE: java.lang.String
                         static ERR_DATATYPE_ERROR: java.lang.String
                         static ERR_UNABLE_TO_GENERATE_NAME_FROM_MODELGROUP: java.lang.String
                         static ERR_INCORRECT_FIXED_VALUE: java.lang.String
                         static ERR_INCORRECT_DEFAULT_VALUE: java.lang.String
                         static ERR_CONFLICT_BETWEEN_USERTYPE_AND_ACTUALTYPE_ATTUSE: java.lang.String
                         static ERR_CONFLICT_BETWEEN_USERTYPE_AND_ACTUALTYPE_ATTUSE_SOURCE: java.lang.String
                         static ERR_UNNESTED_JAVATYPE_CUSTOMIZATION_ON_SIMPLETYPE: java.lang.String
                         static JAVADOC_NIL_PROPERTY: java.lang.String
                         static JAVADOC_LINE_UNKNOWN: java.lang.String
                         static JAVADOC_VALUEOBJECT_PROPERTY: java.lang.String
                         static MSG_COLLISION_INFO: java.lang.String
                         static MSG_UNKNOWN_FILE: java.lang.String
                         static MSG_LINE_X_OF_Y: java.lang.String
                         static MSG_FALLBACK_JAVADOC: java.lang.String
                         static ERR_ENUM_MEMBER_NAME_COLLISION: java.lang.String
                         static ERR_ENUM_MEMBER_NAME_COLLISION_RELATED: java.lang.String
                         static ERR_CANNOT_GENERATE_ENUM_NAME: java.lang.String
                         static WARN_ENUM_MEMBER_SIZE_CAP: java.lang.String
                         public static ERR_UNACKNOWLEDGED_CUSTOMIZATION: java.lang.String
                         public static ERR_UNACKNOWLEDGED_CUSTOMIZATION_LOCATION: java.lang.String
                         public static ERR_MULTIPLE_GLOBAL_BINDINGS: java.lang.String
                         public static ERR_MULTIPLE_GLOBAL_BINDINGS_OTHER: java.lang.String
                         public static ERR_REFERENCE_TO_NONEXPORTED_CLASS: java.lang.String
                         public static ERR_REFERENCE_TO_NONEXPORTED_CLASS_MAP_FALSE: java.lang.String
                         public static ERR_REFERENCE_TO_NONEXPORTED_CLASS_REFERER: java.lang.String
                         static WARN_DEFAULT_VALUE_PRIMITIVE_TYPE: java.lang.String
                         public constructor()
                         public static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                     }
                     class GWildcardElement extends com.sun.tools.internal.xjc.reader.xmlschema.GElement {
                         constructor()
                         toString<T>(...args: any[]): any
                         getPropertyNameSeed(): java.lang.String
                         public merge(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public isStrict(): boolean
                     }
                     abstract class GElement extends com.sun.tools.internal.xjc.reader.gbind.Element {
                         particles: java.util.Set<com.sun.xml.internal.xsom.XSParticle>
                         constructor()
                         getPropertyNameSeed(): java.lang.String
                     }
                     class GElementImpl extends com.sun.tools.internal.xjc.reader.xmlschema.GElement {
                         public tagName: javax.xml.namespace.QName
                         public decl: com.sun.xml.internal.xsom.XSElementDecl
                         public constructor(arg0: javax.xml.namespace.QName, arg1: com.sun.xml.internal.xsom.XSElementDecl)
                         toString<T>(...args: any[]): any
                         getPropertyNameSeed(): java.lang.String
                     }
                     class ExpressionParticleBinder extends com.sun.tools.internal.xjc.reader.xmlschema.ParticleBinder {
                         static $assertionsDisabled: boolean
                         constructor()
                         public build(arg0: com.sun.xml.internal.xsom.XSParticle, arg1: java.util.Collection<com.sun.xml.internal.xsom.XSParticle>): void
                         public checkFallback(arg0: com.sun.xml.internal.xsom.XSParticle): boolean
                     }
                     class ExpressionBuilder implements com.sun.xml.internal.xsom.visitor.XSTermFunction<com.sun.tools.internal.xjc.reader.gbind.Expression> {
                         static $assertionsDisabled: boolean
                         public static createTree(arg0: com.sun.xml.internal.xsom.XSParticle): com.sun.tools.internal.xjc.reader.gbind.Expression
                         wildcard<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): com.sun.tools.internal.xjc.reader.gbind.Expression
                     }
                     class DefaultParticleBinder$Checker$NameCollisionChecker {
                         this$1: com.sun.tools.internal.xjc.reader.xmlschema.DefaultParticleBinder$Checker
                         check(arg0: com.sun.xml.internal.xsom.XSParticle): com.sun.tools.internal.xjc.reader.xmlschema.CollisionInfo
                         readSuperClass(arg0: com.sun.tools.internal.xjc.model.CClassInfo): void
                         constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.DefaultParticleBinder$Checker, arg1: com.sun.tools.internal.xjc.reader.xmlschema.DefaultParticleBinder$1)
                     }
                     class DefaultParticleBinder$Checker implements com.sun.xml.internal.xsom.visitor.XSTermVisitor {
                         public markedParticles: java.util.Map<com.sun.xml.internal.xsom.XSParticle, java.lang.String>
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.DefaultParticleBinder
                         constructor(arg0: java.util.Collection<com.sun.xml.internal.xsom.XSParticle>)
                         hasNameCollision(): boolean
                         getCollisionInfo(): com.sun.tools.internal.xjc.reader.xmlschema.CollisionInfo
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         readSuperClass(arg0: com.sun.tools.internal.xjc.model.CClassInfo): void
                         static access$100(arg0: com.sun.tools.internal.xjc.reader.xmlschema.DefaultParticleBinder$Checker, arg1: com.sun.xml.internal.xsom.XSParticle): java.lang.String
                     }
                     class DefaultParticleBinder$Builder implements com.sun.xml.internal.xsom.visitor.XSTermVisitor {
                         static $assertionsDisabled: boolean
                         this$0: com.sun.tools.internal.xjc.reader.xmlschema.DefaultParticleBinder
                         constructor(arg0: java.util.Map<com.sun.xml.internal.xsom.XSParticle, java.lang.String>)
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                     }
                     class DefaultParticleBinder$1 {
                     }
                     class DefaultParticleBinder extends com.sun.tools.internal.xjc.reader.xmlschema.ParticleBinder {
                         constructor()
                         public build(arg0: com.sun.xml.internal.xsom.XSParticle, arg1: java.util.Collection<com.sun.xml.internal.xsom.XSParticle>): void
                         public checkFallback(arg0: com.sun.xml.internal.xsom.XSParticle): boolean
                     }
                     class CollisionInfo {
                         public constructor(arg0: java.lang.String, arg1: org.xml.sax.Locator, arg2: org.xml.sax.Locator)
                         toString<T>(...args: any[]): any
                     }
                     class DefaultClassBinder implements com.sun.tools.internal.xjc.reader.xmlschema.ClassBinder {
                         protected builder: com.sun.tools.internal.xjc.reader.xmlschema.BGMBuilder
                         protected selector: com.sun.tools.internal.xjc.reader.xmlschema.ClassSelector
                         protected schemas: com.sun.xml.internal.xsom.XSSchemaSet
                         static $assertionsDisabled: boolean
                         constructor()
                         attGroupDecl<T>(...args: any[]): any
                         attributeDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         complexType<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                         empty<T>(...args: any[]): any
                         identityConstraint<T>(...args: any[]): any
                         xpath<T>(...args: any[]): any
                         attributeUse<T>(...args: any[]): any
                         simpleType<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         wildcard<T>(...args: any[]): any
                         annotation<T>(...args: any[]): any
                         notation<T>(...args: any[]): any
                         facet<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                     }
                     abstract class ClassBinderFilter implements com.sun.tools.internal.xjc.reader.xmlschema.ClassBinder {
                         protected constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassBinder)
                         annotation<T>(...args: any[]): any
                         attGroupDecl<T>(...args: any[]): any
                         attributeDecl<T>(...args: any[]): any
                         attributeUse<T>(...args: any[]): any
                         complexType<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                         facet<T>(...args: any[]): any
                         notation<T>(...args: any[]): any
                         simpleType<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         empty<T>(...args: any[]): any
                         wildcard<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                         identityConstraint<T>(...args: any[]): any
                         xpath<T>(...args: any[]): any
                     }
                     class BindYellow extends com.sun.tools.internal.xjc.reader.xmlschema.ColorBinder {
                         public constructor()
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                     }
                     class BindRed extends com.sun.tools.internal.xjc.reader.xmlschema.ColorBinder {
                         public constructor()
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                     }
                     class BindBlue extends com.sun.tools.internal.xjc.reader.xmlschema.ColorBinder {
                         constructor()
                         public complexType(arg0: com.sun.xml.internal.xsom.XSComplexType): void
                         public elementDecl(arg0: com.sun.xml.internal.xsom.XSElementDecl): void
                         public wildcard(arg0: com.sun.xml.internal.xsom.XSWildcard): void
                         public attGroupDecl(arg0: com.sun.xml.internal.xsom.XSAttGroupDecl): void
                         public attributeDecl(arg0: com.sun.xml.internal.xsom.XSAttributeDecl): void
                         public attributeUse(arg0: com.sun.xml.internal.xsom.XSAttributeUse): void
                         public modelGroupDecl(arg0: com.sun.xml.internal.xsom.XSModelGroupDecl): void
                         public modelGroup(arg0: com.sun.xml.internal.xsom.XSModelGroup): void
                         public particle(arg0: com.sun.xml.internal.xsom.XSParticle): void
                         public empty(arg0: com.sun.xml.internal.xsom.XSContentType): void
                         public simpleType(arg0: com.sun.xml.internal.xsom.XSSimpleType): void
                     }
                     class Abstractifier extends com.sun.tools.internal.xjc.reader.xmlschema.ClassBinderFilter {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.xmlschema.ClassBinder)
                         complexType<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                     }

                  }
                  namespace dtd {
                     namespace bindinfo {
                        class Messages {
                            static ERR_UNDEFINED_FIELD: java.lang.String
                            constructor()
                            static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                        }
                        class DTDExtensionBindingChecker extends com.sun.tools.internal.xjc.reader.AbstractExtensionBindingChecker {
                            public constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler)
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                        }
                        class DOMUtil {
                            public constructor()
                            getAttribute<T>(...args: any[]): any
                            getElement<T>(...args: any[]): any
                            getChildElements<T>(...args: any[]): any
                        }
                        class DOMLocator$1 implements org.xml.sax.Locator {
                            val$e: org.w3c.dom.Element
                            constructor(arg0: org.w3c.dom.Element)
                            public getLineNumber(): int
                            public getColumnNumber(): int
                            public getSystemId(): java.lang.String
                            public getPublicId(): java.lang.String
                        }
                        class DOMLocator {
                            constructor()
                            public static setLocationInfo(arg0: org.w3c.dom.Element, arg1: org.xml.sax.Locator): void
                            public static getLocationInfo(arg0: org.w3c.dom.Element): org.xml.sax.Locator
                        }
                        class DOMBuilder extends com.sun.xml.internal.bind.marshaller.SAX2DOMEx {
                            public constructor(arg0: javax.xml.parsers.DocumentBuilderFactory)
                            public setDocumentLocator(arg0: org.xml.sax.Locator): void
                            public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                        }
                        class BindInfo {
                            protected errorReceiver: com.sun.tools.internal.xjc.ErrorReceiver
                            model: com.sun.tools.internal.xjc.model.Model
                            codeModel: com.sun.codemodel.internal.JCodeModel
                            classFactory: com.sun.tools.internal.xjc.util.CodeModelClassFactory
                            constructor(...args: any[])
                            public getSerialVersionUID(): java.lang.Long
                            public getSuperClass(): com.sun.codemodel.internal.JClass
                            public getSuperInterface(): com.sun.codemodel.internal.JClass
                            public getTargetPackage(): com.sun.codemodel.internal.JPackage
                            public conversion(arg0: java.lang.String): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion
                            public element(arg0: java.lang.String): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIElement
                            public elements(): java.util.Collection<com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIElement>
                            public interfaces(): java.util.Collection<com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIInterface>
                        }
                        interface BIConversion {
                            public name(): java.lang.String
                            public getTransducer(): com.sun.tools.internal.xjc.model.TypeUse
                        }
                        class BIElement {
                            parent: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BindInfo
                            public clazz: com.sun.tools.internal.xjc.model.CClassInfo
                            constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BindInfo, arg1: org.w3c.dom.Element)
                            public getLocation(): org.xml.sax.Locator
                            public name(): java.lang.String
                            public isClass(): boolean
                            public isRoot(): boolean
                            public getClassName(): java.lang.String
                            public declareConstructors(arg0: com.sun.tools.internal.xjc.model.CClassInfo): void
                            public getConversion(): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion
                            public conversion(arg0: java.lang.String): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion
                            public getContents(): java.util.List<com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIContent>
                            public attribute(arg0: java.lang.String): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIAttribute
                            public getRest(): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIContent
                            public getSourceLocation(): org.xml.sax.Locator
                        }
                        class BIInterface {
                            constructor(arg0: org.w3c.dom.Element)
                            public name(): java.lang.String
                            public members(): java.lang.String[]
                            public fields(): java.lang.String[]
                            public getSourceLocation(): org.xml.sax.Locator
                        }
                        class BIContent {
                            protected element: org.w3c.dom.Element
                            protected parent: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIElement
                            public getRealization(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getPropertyName(): java.lang.String
                            public getType(): com.sun.codemodel.internal.JClass
                            static create(arg0: org.w3c.dom.Element, arg1: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIElement): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIContent
                        }
                        class BIAttribute {
                            constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIElement, arg1: org.w3c.dom.Element)
                            public name(): java.lang.String
                            public getConversion(): com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion
                            public getRealization(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getPropertyName(): java.lang.String
                        }
                        class BIConstructor {
                            constructor(arg0: org.w3c.dom.Element)
                            public createDeclaration(arg0: com.sun.tools.internal.xjc.model.CClassInfo): void
                            public getSourceLocation(): org.xml.sax.Locator
                        }
                        class BIUserConversion implements com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion {
                            constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BindInfo, arg1: org.w3c.dom.Element)
                            static addBuiltinConversions(arg0: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BindInfo, arg1: java.util.Map<java.lang.String, com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion>): void
                            public getSourceLocation(): org.xml.sax.Locator
                            public name(): java.lang.String
                            public getTransducer(): com.sun.tools.internal.xjc.model.TypeUse
                        }
                        class BIEnumeration implements com.sun.tools.internal.xjc.reader.dtd.bindinfo.BIConversion {
                            public name(): java.lang.String
                            public getTransducer(): com.sun.tools.internal.xjc.model.TypeUse
                            create<T>(...args: any[]): any
                        }

                     }
                     class Term$1 extends com.sun.tools.internal.xjc.reader.dtd.Term {
                         constructor()
                         normalize(arg0: java.util.List<com.sun.tools.internal.xjc.reader.dtd.Block>, arg1: boolean): void
                         addAllElements(arg0: com.sun.tools.internal.xjc.reader.dtd.Block): void
                         isOptional(): boolean
                         isRepeated(): boolean
                     }
                     abstract class Term {
                         static EMPTY: com.sun.tools.internal.xjc.reader.dtd.Term
                         constructor()
                         normalize(arg0: java.util.List<com.sun.tools.internal.xjc.reader.dtd.Block>, arg1: boolean): void
                         addAllElements(arg0: com.sun.tools.internal.xjc.reader.dtd.Block): void
                         isOptional(): boolean
                         isRepeated(): boolean
                     }
                     class Block {
                         isOptional: boolean
                         isRepeated: boolean
                         elements: java.util.Set<com.sun.tools.internal.xjc.reader.dtd.Element>
                         constructor(arg0: boolean, arg1: boolean)
                     }
                     class Element extends com.sun.tools.internal.xjc.reader.dtd.Term implements java.lang.Comparable<com.sun.tools.internal.xjc.reader.dtd.Element> {
                         name: java.lang.String
                         isReferenced: boolean
                         attributes: java.util.List<com.sun.tools.internal.xjc.model.CPropertyInfo>
                         static $assertionsDisabled: boolean
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.TDTDReader, arg1: java.lang.String)
                         normalize(arg0: java.util.List<com.sun.tools.internal.xjc.reader.dtd.Block>, arg1: boolean): void
                         addAllElements(arg0: com.sun.tools.internal.xjc.reader.dtd.Block): void
                         isOptional(): boolean
                         isRepeated(): boolean
                         define(arg0: short, arg1: com.sun.tools.internal.xjc.reader.dtd.Term, arg2: org.xml.sax.Locator): void
                         getClassInfo(): com.sun.tools.internal.xjc.model.CClassInfo
                         bind(): void
                         compareTo<T>(...args: any[]): any
                     }
                     class TDTDReader$1 implements com.sun.tools.internal.xjc.reader.dtd.TDTDReader$InterfaceAcceptor {
                         val$intf: com.sun.codemodel.internal.JDefinedClass
                         this$0: com.sun.tools.internal.xjc.reader.dtd.TDTDReader
                         constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.TDTDReader, arg1: com.sun.codemodel.internal.JDefinedClass)
                         public implement(arg0: com.sun.codemodel.internal.JClass): void
                     }
                     class TDTDReader$2 implements com.sun.tools.internal.xjc.reader.dtd.TDTDReader$InterfaceAcceptor {
                         val$ci: com.sun.tools.internal.xjc.model.CClassInfo
                         this$0: com.sun.tools.internal.xjc.reader.dtd.TDTDReader
                         constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.TDTDReader, arg1: com.sun.tools.internal.xjc.model.CClassInfo)
                         public implement(arg0: com.sun.codemodel.internal.JClass): void
                     }
                     interface TDTDReader$InterfaceAcceptor {
                         public implement(arg0: com.sun.codemodel.internal.JClass): void
                     }
                     class TDTDReader extends com.sun.xml.internal.dtdparser.DTDHandlerBase {
                         bindInfo: com.sun.tools.internal.xjc.reader.dtd.bindinfo.BindInfo
                         model: com.sun.tools.internal.xjc.model.Model
                         static $assertionsDisabled: boolean
                         public static parse(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.InputSource, arg2: com.sun.tools.internal.xjc.ErrorReceiver, arg3: com.sun.tools.internal.xjc.Options): com.sun.tools.internal.xjc.model.Model
                         protected constructor(arg0: com.sun.tools.internal.xjc.ErrorReceiver, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.InputSource)
                         public startDTD(arg0: com.sun.xml.internal.dtdparser.InputEntity): void
                         public endDTD(): void
                         getTargetPackage(): com.sun.codemodel.internal.JPackage
                         public attributeDecl(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: short, arg5: java.lang.String): void
                         protected createAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String[], arg4: short, arg5: java.lang.String): com.sun.tools.internal.xjc.model.CPropertyInfo
                         getOrCreateElement(arg0: java.lang.String): com.sun.tools.internal.xjc.reader.dtd.Element
                         public startContentModel(arg0: java.lang.String, arg1: short): void
                         public endContentModel(arg0: java.lang.String, arg1: short): void
                         public startModelGroup(): void
                         public endModelGroup(arg0: short): void
                         public connector(arg0: short): void
                         public childElement(arg0: java.lang.String, arg1: short): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                         error<T>(...args: any[]): any
                         public fatalError(arg0: org.xml.sax.SAXParseException): void
                         public warning(arg0: org.xml.sax.SAXParseException): void
                     }
                     class ModelGroup$Kind extends java.lang.Enum<com.sun.tools.internal.xjc.reader.dtd.ModelGroup$Kind> {
                         public static CHOICE: com.sun.tools.internal.xjc.reader.dtd.ModelGroup$Kind
                         public static SEQUENCE: com.sun.tools.internal.xjc.reader.dtd.ModelGroup$Kind
                         public static values(): com.sun.tools.internal.xjc.reader.dtd.ModelGroup$Kind[]
                         valueOf<T>(...args: any[]): any
                     }
                     class ModelGroup$1 {
                         static $SwitchMap$com$sun$tools$internal$xjc$reader$dtd$ModelGroup$Kind: int[]
                     }
                     class ModelGroup extends com.sun.tools.internal.xjc.reader.dtd.Term {
                         kind: com.sun.tools.internal.xjc.reader.dtd.ModelGroup$Kind
                         static $assertionsDisabled: boolean
                         constructor()
                         normalize(arg0: java.util.List<com.sun.tools.internal.xjc.reader.dtd.Block>, arg1: boolean): void
                         addAllElements(arg0: com.sun.tools.internal.xjc.reader.dtd.Block): void
                         isOptional(): boolean
                         isRepeated(): boolean
                         setKind(arg0: short): void
                         addTerm(arg0: com.sun.tools.internal.xjc.reader.dtd.Term): void
                         wrapUp(): com.sun.tools.internal.xjc.reader.dtd.Term
                     }
                     class Occurence extends com.sun.tools.internal.xjc.reader.dtd.Term {
                         term: com.sun.tools.internal.xjc.reader.dtd.Term
                         isOptional<T>(...args: any[]): any
                         isRepeated<T>(...args: any[]): any
                         constructor(arg0: com.sun.tools.internal.xjc.reader.dtd.Term, arg1: boolean, arg2: boolean)
                         static wrap(arg0: com.sun.tools.internal.xjc.reader.dtd.Term, arg1: int): com.sun.tools.internal.xjc.reader.dtd.Term
                         normalize(arg0: java.util.List<com.sun.tools.internal.xjc.reader.dtd.Block>, arg1: boolean): void
                         addAllElements(arg0: com.sun.tools.internal.xjc.reader.dtd.Block): void
                     }
                     class Messages {
                         public static ERR_NO_ROOT_ELEMENT: java.lang.String
                         public static ERR_UNDEFINED_ELEMENT_IN_BINDINFO: java.lang.String
                         public static ERR_CONVERSION_FOR_NON_VALUE_ELEMENT: java.lang.String
                         public static ERR_CONTENT_PROPERTY_PARTICLE_MISMATCH: java.lang.String
                         public static ERR_CONTENT_PROPERTY_DECLARATION_TOO_SHORT: java.lang.String
                         public static ERR_BINDINFO_NON_EXISTENT_ELEMENT_DECLARATION: java.lang.String
                         public static ERR_BINDINFO_NON_EXISTENT_INTERFACE_MEMBER: java.lang.String
                         constructor()
                         static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                     }

                  }
                  namespace internalizer {
                     interface InternalizationLogic {
                         public createExternalReferenceFinder(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest): org.xml.sax.helpers.XMLFilterImpl
                         public checkIfValidTargetNode(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: org.w3c.dom.Element, arg2: org.w3c.dom.Element): boolean
                         public refineTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                     }
                     interface DOMForest$Handler extends org.xml.sax.ContentHandler {
                         public getDocument(): org.w3c.dom.Document
                     }
                     abstract class DOMForest$HandlerImpl extends org.xml.sax.helpers.XMLFilterImpl implements com.sun.tools.internal.xjc.reader.internalizer.DOMForest$Handler {
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest$1)
                     }
                     class DOMForest$1 extends com.sun.tools.internal.xjc.reader.internalizer.DOMForest$HandlerImpl {
                         val$dom: org.w3c.dom.Document
                         this$0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: org.w3c.dom.Document)
                         public getDocument(): org.w3c.dom.Document
                     }
                     class DOMForest$2 extends org.xml.sax.helpers.XMLFilterImpl {
                         this$0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                         parse<T>(...args: any[]): any
                     }
                     class DOMForest {
                         public locatorTable: com.sun.tools.internal.xjc.reader.internalizer.LocatorTable
                         public outerMostBindings: java.util.Set<org.w3c.dom.Element>
                         protected logic: com.sun.tools.internal.xjc.reader.internalizer.InternalizationLogic
                         constructor(...args: any[])
                         public get(arg0: java.lang.String): org.w3c.dom.Document
                         public getRootDocuments(): java.util.Set<java.lang.String>
                         public getOneDocument(): org.w3c.dom.Document
                         public checkSchemaCorrectness(arg0: com.sun.tools.internal.xjc.ErrorReceiver): boolean
                         public getSystemId(arg0: org.w3c.dom.Document): java.lang.String
                         parse<T>(...args: any[]): any
                         public getParserHandler(arg0: java.lang.String, arg1: boolean): com.sun.tools.internal.xjc.reader.internalizer.DOMForest$Handler
                         public transform(arg0: boolean): com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet
                         public weakSchemaCorrectnessCheck(arg0: javax.xml.validation.SchemaFactory): void
                         public createSAXSource(arg0: java.lang.String): javax.xml.transform.sax.SAXSource
                         public createParser(): com.sun.xml.internal.xsom.parser.XMLParser
                         public getEntityResolver(): org.xml.sax.EntityResolver
                         public setEntityResolver(arg0: org.xml.sax.EntityResolver): void
                         public getErrorHandler(): com.sun.tools.internal.xjc.ErrorReceiver
                         public setErrorHandler(arg0: com.sun.tools.internal.xjc.ErrorReceiver): void
                         public listDocuments(): org.w3c.dom.Document[]
                         public listSystemIDs(): java.lang.String[]
                         public dump(arg0: java.io.OutputStream): void
                     }
                     class LocatorTable {
                         public constructor()
                         public storeStartLocation(arg0: org.w3c.dom.Element, arg1: org.xml.sax.Locator): void
                         public storeEndLocation(arg0: org.w3c.dom.Element, arg1: org.xml.sax.Locator): void
                         public getStartLocation(arg0: org.w3c.dom.Element): org.xml.sax.Locator
                         public getEndLocation(arg0: org.w3c.dom.Element): org.xml.sax.Locator
                     }
                     class SCDBasedBindingSet$Target {
                         this$0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet
                         addBinidng(arg0: org.w3c.dom.Element): void
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet, arg1: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target, arg2: org.w3c.dom.Element, arg3: com.sun.xml.internal.xsom.SCD, arg4: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$1)
                         static access$700(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target, arg1: java.util.Collection): void
                     }
                     class SCDBasedBindingSet$1 {
                     }
                     class SCDBasedBindingSet {
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                         createNewTarget(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target, arg1: org.w3c.dom.Element, arg2: com.sun.xml.internal.xsom.SCD): com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target
                         public apply(arg0: com.sun.xml.internal.xsom.XSSchemaSet, arg1: com.sun.tools.internal.xjc.ErrorReceiver): void
                         static access$000(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet): com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target
                         static access$002(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet, arg1: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target): com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet$Target
                         static access$100(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet, arg1: org.w3c.dom.Element, arg2: java.lang.String): void
                         static access$200(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet): com.sun.tools.internal.xjc.ErrorReceiver
                         static access$300(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet): com.sun.tools.internal.xjc.util.ForkContentHandler
                         static access$400(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet): com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                         static access$500(arg0: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet): javax.xml.bind.UnmarshallerHandler
                     }
                     abstract class AbstractReferenceFinderImpl extends org.xml.sax.helpers.XMLFilterImpl {
                         protected parent: com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                         protected constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                         protected findExternalResource(arg0: java.lang.String, arg1: java.lang.String, arg2: org.xml.sax.Attributes): java.lang.String
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                     }
                     class WhitespaceStripper extends org.xml.sax.helpers.XMLFilterImpl {
                         constructor(...args: any[])
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                     }
                     class VersionChecker extends org.xml.sax.helpers.XMLFilterImpl {
                         constructor(...args: any[])
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endDocument(): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                     }
                     class NamespaceContextImpl implements javax.xml.namespace.NamespaceContext {
                         public constructor(arg0: org.w3c.dom.Element)
                         public getNamespaceURI(arg0: java.lang.String): java.lang.String
                         public getPrefix(arg0: java.lang.String): java.lang.String
                         public getPrefixes(arg0: java.lang.String): java.util.Iterator
                     }
                     class Messages {
                         static ERR_INCORRECT_SCHEMA_REFERENCE: java.lang.String
                         static ERR_XPATH_EVAL: java.lang.String
                         static NO_XPATH_EVAL_TO_NO_TARGET: java.lang.String
                         static NO_XPATH_EVAL_TOO_MANY_TARGETS: java.lang.String
                         static NO_XPATH_EVAL_TO_NON_ELEMENT: java.lang.String
                         static XPATH_EVAL_TO_NON_SCHEMA_ELEMENT: java.lang.String
                         static SCD_NOT_ENABLED: java.lang.String
                         static ERR_SCD_EVAL: java.lang.String
                         static ERR_SCD_EVALUATED_EMPTY: java.lang.String
                         static ERR_SCD_MATCHED_MULTIPLE_NODES: java.lang.String
                         static ERR_SCD_MATCHED_MULTIPLE_NODES_FIRST: java.lang.String
                         static ERR_SCD_MATCHED_MULTIPLE_NODES_SECOND: java.lang.String
                         static CONTEXT_NODE_IS_NOT_ELEMENT: java.lang.String
                         static ERR_INCORRECT_VERSION: java.lang.String
                         static ERR_VERSION_NOT_FOUND: java.lang.String
                         static TWO_VERSION_ATTRIBUTES: java.lang.String
                         static ORPHANED_CUSTOMIZATION: java.lang.String
                         static ERR_UNABLE_TO_PARSE: java.lang.String
                         static ERR_FILENAME_IS_NOT_URI: java.lang.String
                         static ERR_GENERAL_SCHEMA_CORRECTNESS_ERROR: java.lang.String
                         static DOMFOREST_INPUTSOURCE_IOEXCEPTION: java.lang.String
                         constructor()
                         static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                     }
                     class Internalizer {
                         static transform(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: boolean, arg2: boolean): com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet
                     }
                     class DOMForestScanner$LocationResolver extends org.xml.sax.helpers.XMLFilterImpl implements org.xml.sax.Locator {
                         this$0: com.sun.tools.internal.xjc.reader.internalizer.DOMForestScanner
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForestScanner, arg1: com.sun.xml.internal.bind.unmarshaller.DOMScanner)
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public getColumnNumber(): int
                         public getLineNumber(): int
                         public getPublicId(): java.lang.String
                         public getSystemId(): java.lang.String
                     }
                     class DOMForestScanner {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                         scan<T>(...args: any[]): any
                         static access$000(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForestScanner): com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                     }
                     class DOMForestParser implements com.sun.xml.internal.xsom.parser.XMLParser {
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: com.sun.xml.internal.xsom.parser.XMLParser)
                         public parse(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.ContentHandler, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): void
                     }
                     class DOMBuilder extends com.sun.xml.internal.bind.marshaller.SAX2DOMEx {
                         public constructor(arg0: org.w3c.dom.Document, arg1: com.sun.tools.internal.xjc.reader.internalizer.LocatorTable, arg2: java.util.Set)
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                     }
                     class ContextClassloaderLocal$1 implements java.security.PrivilegedAction {
                         constructor()
                         public run(): java.lang.Object
                     }
                     abstract class ContextClassloaderLocal<V> {
                         constructor()
                         public get(): V
                         public set(arg0: V): void
                         protected initialValue(): V
                     }
                     class ContentHandlerNamespacePrefixAdapter extends org.xml.sax.helpers.XMLFilterImpl {
                         constructor(...args: any[])
                         public getFeature(arg0: java.lang.String): boolean
                         public setFeature(arg0: java.lang.String, arg1: boolean): void
                         public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                     }

                  }
                  class RawTypeSet$Mode extends java.lang.Enum<com.sun.tools.internal.xjc.reader.RawTypeSet$Mode> {
                      public static SHOULD_BE_TYPEREF: com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                      public static CAN_BE_TYPEREF: com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                      public static MUST_BE_REFERENCE: com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                      public static values(): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode[]
                      valueOf<T>(...args: any[]): any
                      or(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet$Mode): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                  }
                  abstract class RawTypeSet$Ref {
                      public constructor()
                      protected toTypeRef(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): com.sun.tools.internal.xjc.model.CTypeRef
                      protected toElementRef(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): void
                      protected canBeType(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                      protected isListOfValues(): boolean
                      protected id(): com.sun.xml.internal.bind.v2.model.core.ID
                      protected getExpectedMimeType(): javax.activation.MimeType
                  }
                  class RawTypeSet {
                      public refs: java.util.Set<com.sun.tools.internal.xjc.reader.RawTypeSet$Ref>
                      public canBeTypeRefs: com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                      public mul: com.sun.tools.internal.xjc.model.Multiplicity
                      static $assertionsDisabled: boolean
                      public constructor(arg0: java.util.Set<com.sun.tools.internal.xjc.reader.RawTypeSet$Ref>, arg1: com.sun.tools.internal.xjc.model.Multiplicity)
                      public getCollectionMode(): com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode
                      public isRequired(): boolean
                      addTo<T>(...args: any[]): any
                      public id(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getExpectedMimeType(): javax.activation.MimeType
                  }
                  namespace gbind {
                     abstract class Element extends com.sun.tools.internal.xjc.reader.gbind.Expression implements com.sun.tools.internal.xjc.reader.gbind.ElementSet {
                         foreEdges: java.util.Set<com.sun.tools.internal.xjc.reader.gbind.Element>
                         backEdges: java.util.Set<com.sun.tools.internal.xjc.reader.gbind.Element>
                         prevPostOrder: com.sun.tools.internal.xjc.reader.gbind.Element
                         static $assertionsDisabled: boolean
                         protected constructor()
                         lastSet(): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         isNullable(): boolean
                         isSource(): boolean
                         isSink(): boolean
                         buildDAG(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): void
                         public addNext(arg0: com.sun.tools.internal.xjc.reader.gbind.Element): void
                         public contains(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): boolean
                         public iterator(): java.util.Iterator<com.sun.tools.internal.xjc.reader.gbind.Element>
                         assignDfsPostOrder(arg0: com.sun.tools.internal.xjc.reader.gbind.Element): com.sun.tools.internal.xjc.reader.gbind.Element
                         public buildStronglyConnectedComponents(arg0: java.util.List<com.sun.tools.internal.xjc.reader.gbind.ConnectedComponent>): void
                         public hasSelfLoop(): boolean
                         checkCutSet(arg0: com.sun.tools.internal.xjc.reader.gbind.ConnectedComponent, arg1: java.util.Set<com.sun.tools.internal.xjc.reader.gbind.Element>): boolean
                     }
                     class Expression$1 extends com.sun.tools.internal.xjc.reader.gbind.Expression {
                         constructor()
                         lastSet(): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         isNullable(): boolean
                         buildDAG(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): void
                         toString<T>(...args: any[]): any
                     }
                     abstract class Expression {
                         public static EPSILON: com.sun.tools.internal.xjc.reader.gbind.Expression
                         public constructor()
                         lastSet(): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         isNullable(): boolean
                         buildDAG(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): void
                     }
                     class ElementSet$1 implements com.sun.tools.internal.xjc.reader.gbind.ElementSet {
                         constructor()
                         public addNext(arg0: com.sun.tools.internal.xjc.reader.gbind.Element): void
                         public contains(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): boolean
                         public iterator(): java.util.Iterator<com.sun.tools.internal.xjc.reader.gbind.Element>
                     }
                     interface ElementSet extends java.lang.Iterable<com.sun.tools.internal.xjc.reader.gbind.Element> {
                         public static EMPTY_SET: com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         public addNext(arg0: com.sun.tools.internal.xjc.reader.gbind.Element): void
                         public contains(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): boolean
                     }
                     class ConnectedComponent implements java.lang.Iterable<com.sun.tools.internal.xjc.reader.gbind.Element> {
                         isRequired<T>(...args: any[]): any
                         static $assertionsDisabled: boolean
                         public constructor()
                         public isCollection(): boolean
                         add(arg0: com.sun.tools.internal.xjc.reader.gbind.Element): void
                         public iterator(): java.util.Iterator<com.sun.tools.internal.xjc.reader.gbind.Element>
                         toString<T>(...args: any[]): any
                     }
                     class SourceNode extends com.sun.tools.internal.xjc.reader.gbind.Element {
                         public constructor()
                         toString<T>(...args: any[]): any
                         isSource(): boolean
                     }
                     class SinkNode extends com.sun.tools.internal.xjc.reader.gbind.Element {
                         public constructor()
                         toString<T>(...args: any[]): any
                         isSink(): boolean
                     }
                     class Sequence extends com.sun.tools.internal.xjc.reader.gbind.Expression {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.gbind.Expression, arg1: com.sun.tools.internal.xjc.reader.gbind.Expression)
                         lastSet(): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         isNullable(): boolean
                         buildDAG(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): void
                         toString<T>(...args: any[]): any
                     }
                     class OneOrMore extends com.sun.tools.internal.xjc.reader.gbind.Expression {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.gbind.Expression)
                         lastSet(): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         isNullable(): boolean
                         buildDAG(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): void
                         toString<T>(...args: any[]): any
                     }
                     class Graph implements java.lang.Iterable<com.sun.tools.internal.xjc.reader.gbind.ConnectedComponent> {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.gbind.Expression)
                         public iterator(): java.util.Iterator<com.sun.tools.internal.xjc.reader.gbind.ConnectedComponent>
                         toString<T>(...args: any[]): any
                     }
                     class ElementSets$MultiValueSet extends java.util.LinkedHashSet<com.sun.tools.internal.xjc.reader.gbind.Element> implements com.sun.tools.internal.xjc.reader.gbind.ElementSet {
                         static $assertionsDisabled: boolean
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet, arg1: com.sun.tools.internal.xjc.reader.gbind.ElementSet)
                         public contains(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): boolean
                         public addNext(arg0: com.sun.tools.internal.xjc.reader.gbind.Element): void
                     }
                     class ElementSets {
                         public constructor()
                         public static union(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet, arg1: com.sun.tools.internal.xjc.reader.gbind.ElementSet): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                     }
                     class Choice extends com.sun.tools.internal.xjc.reader.gbind.Expression {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.gbind.Expression, arg1: com.sun.tools.internal.xjc.reader.gbind.Expression)
                         isNullable(): boolean
                         lastSet(): com.sun.tools.internal.xjc.reader.gbind.ElementSet
                         buildDAG(arg0: com.sun.tools.internal.xjc.reader.gbind.ElementSet): void
                         toString<T>(...args: any[]): any
                     }

                  }
                  namespace relaxng {
                     class TypeUseBinder implements com.sun.xml.internal.rngom.digested.DPatternVisitor<com.sun.tools.internal.xjc.model.TypeUse> {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler)
                         onGrammar<T>(...args: any[]): any
                         onChoice<T>(...args: any[]): any
                         onData<T>(...args: any[]): any
                         onValue<T>(...args: any[]): any
                         onInterleave<T>(...args: any[]): any
                         onGroup<T>(...args: any[]): any
                         onNotAllowed<T>(...args: any[]): any
                         onEmpty<T>(...args: any[]): any
                         onList<T>(...args: any[]): any
                         onOneOrMore<T>(...args: any[]): any
                         onZeroOrMore<T>(...args: any[]): any
                         onOptional<T>(...args: any[]): any
                         onRef<T>(...args: any[]): any
                         onText<T>(...args: any[]): any
                         onAttribute<T>(...args: any[]): any
                         onElement<T>(...args: any[]): any
                         onMixed<T>(...args: any[]): any
                     }
                     class RELAXNGCompiler$1 extends com.sun.xml.internal.rngom.digested.DPatternWalker {
                         this$0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler
                         constructor(arg0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler)
                         onRef<T>(...args: any[]): any
                         onElement<T>(...args: any[]): any
                     }
                     class RELAXNGCompiler {
                         grammar: com.sun.xml.internal.rngom.digested.DPattern
                         defs: java.util.Set<com.sun.xml.internal.rngom.digested.DDefine>
                         opts: com.sun.tools.internal.xjc.Options
                         model: com.sun.tools.internal.xjc.model.Model
                         pkg: com.sun.codemodel.internal.JPackage
                         datatypes: java.util.Map<java.lang.String, com.sun.tools.internal.xjc.reader.relaxng.DatatypeLib>
                         classes: java.util.Map<com.sun.xml.internal.rngom.digested.DPattern, com.sun.tools.internal.xjc.model.CTypeInfo[]>
                         bindQueue: java.util.Map<com.sun.tools.internal.xjc.model.CClassInfo, com.sun.xml.internal.rngom.digested.DPattern>
                         typeUseBinder: com.sun.tools.internal.xjc.reader.relaxng.TypeUseBinder
                         public static build(arg0: com.sun.xml.internal.rngom.digested.DPattern, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.tools.internal.xjc.Options): com.sun.tools.internal.xjc.model.Model
                         public constructor(arg0: com.sun.xml.internal.rngom.digested.DPattern, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.tools.internal.xjc.Options)
                         static access$000(arg0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler, arg1: com.sun.xml.internal.rngom.digested.DElementPattern): void
                     }
                     class DatatypeLib {
                         public nsUri: java.lang.String
                         public static BUILTIN: com.sun.tools.internal.xjc.reader.relaxng.DatatypeLib
                         public static XMLSCHEMA: com.sun.tools.internal.xjc.reader.relaxng.DatatypeLib
                         public constructor(arg0: java.lang.String)
                         get(arg0: java.lang.String): com.sun.tools.internal.xjc.model.TypeUse
                     }
                     class TypePatternBinder extends com.sun.xml.internal.rngom.digested.DPatternWalker {
                         constructor()
                         reset(): void
                         onRef<T>(...args: any[]): any
                         onChoice<T>(...args: any[]): any
                         onAttribute<T>(...args: any[]): any
                         onList<T>(...args: any[]): any
                         onMixed<T>(...args: any[]): any
                         onOneOrMore<T>(...args: any[]): any
                         onZeroOrMore<T>(...args: any[]): any
                         onOptional<T>(...args: any[]): any
                     }
                     class RawTypeSetBuilder$CClassInfoRef extends com.sun.tools.internal.xjc.reader.RawTypeSet$Ref {
                         static $assertionsDisabled: boolean
                         constructor(arg0: com.sun.tools.internal.xjc.model.CClassInfo)
                         protected id(): com.sun.xml.internal.bind.v2.model.core.ID
                         protected isListOfValues(): boolean
                         protected canBeType(arg0: com.sun.tools.internal.xjc.reader.RawTypeSet): com.sun.tools.internal.xjc.reader.RawTypeSet$Mode
                         protected toElementRef(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): void
                         protected toTypeRef(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): com.sun.tools.internal.xjc.model.CTypeRef
                     }
                     class RawTypeSetBuilder extends com.sun.xml.internal.rngom.digested.DPatternWalker {
                         static $assertionsDisabled: boolean
                         public static build(arg0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler, arg1: com.sun.xml.internal.rngom.digested.DPattern, arg2: com.sun.tools.internal.xjc.model.Multiplicity): com.sun.tools.internal.xjc.reader.RawTypeSet
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler, arg1: com.sun.tools.internal.xjc.model.Multiplicity)
                         onAttribute<T>(...args: any[]): any
                         onElement<T>(...args: any[]): any
                         onZeroOrMore<T>(...args: any[]): any
                         onOneOrMore<T>(...args: any[]): any
                     }
                     class RELAXNGInternalizationLogic$ReferenceFinder extends com.sun.tools.internal.xjc.reader.internalizer.AbstractReferenceFinderImpl {
                         constructor(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                         protected findExternalResource(arg0: java.lang.String, arg1: java.lang.String, arg2: org.xml.sax.Attributes): java.lang.String
                     }
                     class RELAXNGInternalizationLogic implements com.sun.tools.internal.xjc.reader.internalizer.InternalizationLogic {
                         public constructor()
                         public createExternalReferenceFinder(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest): org.xml.sax.helpers.XMLFilterImpl
                         public checkIfValidTargetNode(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: org.w3c.dom.Element, arg2: org.w3c.dom.Element): boolean
                         public refineTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                     }
                     class NameCalculator extends com.sun.xml.internal.rngom.digested.DPatternWalker {
                         constructor()
                     }
                     class DefineFinder extends com.sun.xml.internal.rngom.digested.DPatternWalker {
                         public defs: java.util.Set<com.sun.xml.internal.rngom.digested.DDefine>
                         constructor()
                         onGrammar<T>(...args: any[]): any
                         onRef<T>(...args: any[]): any
                     }
                     class ContentModelBinder extends com.sun.xml.internal.rngom.digested.DPatternWalker {
                         public constructor(arg0: com.sun.tools.internal.xjc.reader.relaxng.RELAXNGCompiler, arg1: com.sun.tools.internal.xjc.model.CClassInfo)
                         onMixed<T>(...args: any[]): any
                         onChoice<T>(...args: any[]): any
                         onOptional<T>(...args: any[]): any
                         onZeroOrMore<T>(...args: any[]): any
                         onOneOrMore<T>(...args: any[]): any
                         onAttribute<T>(...args: any[]): any
                     }
                     class BindStyle extends java.lang.Enum<com.sun.tools.internal.xjc.reader.relaxng.BindStyle> {
                         public static TYPE: com.sun.tools.internal.xjc.reader.relaxng.BindStyle
                         public static ELEMENT: com.sun.tools.internal.xjc.reader.relaxng.BindStyle
                         public static values(): com.sun.tools.internal.xjc.reader.relaxng.BindStyle[]
                         valueOf<T>(...args: any[]): any
                     }

                  }
                  abstract class AbstractExtensionBindingChecker extends com.sun.tools.internal.xjc.util.SubtreeCutter {
                      protected nsSupport: org.xml.sax.helpers.NamespaceSupport
                      protected enabledExtensions: java.util.Set<java.lang.String>
                      protected schemaLanguage: java.lang.String
                      protected allowExtensions: boolean
                      public constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler)
                      protected checkAndEnable(arg0: java.lang.String): void
                      protected verifyTagName(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                      protected isSupportedExtension(arg0: java.lang.String): boolean
                      protected isRecognizableExtension(arg0: java.lang.String): boolean
                      public setDocumentLocator(arg0: org.xml.sax.Locator): void
                      public startDocument(): void
                      public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                      public endPrefixMapping(arg0: java.lang.String): void
                      protected error(arg0: java.lang.String): org.xml.sax.SAXParseException
                      protected warning(arg0: java.lang.String): void
                  }
                  class Util {
                      public constructor()
                      public static getFileOrURL(arg0: java.lang.String): java.lang.Object
                      public static getInputSource(arg0: java.lang.String): org.xml.sax.InputSource
                      public static escapeSpace(arg0: java.lang.String): java.lang.String
                  }
                  class TypeUtil$1 implements java.util.Comparator<com.sun.codemodel.internal.JType> {
                      constructor()
                      compare<T>(...args: any[]): any
                  }
                  class TypeUtil {
                      static $assertionsDisabled: boolean
                      public constructor()
                      getCommonBaseType<T>(...args: any[]): any
                      public static getType(arg0: com.sun.codemodel.internal.JCodeModel, arg1: java.lang.String, arg2: com.sun.tools.internal.xjc.ErrorReceiver, arg3: org.xml.sax.Locator): com.sun.codemodel.internal.JType
                  }
                  class Ring {
                      static $assertionsDisabled: boolean
                      add<T>(...args: any[]): any
                      get<T>(...args: any[]): any
                      public static begin(): com.sun.tools.internal.xjc.reader.Ring
                      public static end(arg0: com.sun.tools.internal.xjc.reader.Ring): void
                  }
                  class ModelChecker {
                      public constructor()
                      public check(): void
                  }
                  class Messages extends java.lang.Enum<com.sun.tools.internal.xjc.reader.Messages> {
                      public static DUPLICATE_PROPERTY: com.sun.tools.internal.xjc.reader.Messages
                      public static DUPLICATE_ELEMENT: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_UNDECLARED_PREFIX: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_UNEXPECTED_EXTENSION_BINDING_PREFIXES: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_UNSUPPORTED_EXTENSION: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_SUPPORTED_EXTENSION_IGNORED: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_RELEVANT_LOCATION: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_CLASS_NOT_FOUND: com.sun.tools.internal.xjc.reader.Messages
                      public static PROPERTY_CLASS_IS_RESERVED: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_VENDOR_EXTENSION_DISALLOWED_IN_STRICT_MODE: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_ILLEGAL_CUSTOMIZATION_TAGNAME: com.sun.tools.internal.xjc.reader.Messages
                      public static ERR_PLUGIN_NOT_ENABLED: com.sun.tools.internal.xjc.reader.Messages
                      public static values(): com.sun.tools.internal.xjc.reader.Messages[]
                      valueOf<T>(...args: any[]): any
                      toString<T>(...args: any[]): any
                      public format(...arg0: java.lang.Object[]): java.lang.String
                  }
                  class ExtensionBindingChecker extends com.sun.tools.internal.xjc.reader.AbstractExtensionBindingChecker {
                      public constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler)
                      public startDocument(): void
                      public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                  }
                  class Const {
                      public static XMLNS_URI: java.lang.String
                      public static JAXB_NSURI: java.lang.String
                      public static XJC_EXTENSION_URI: java.lang.String
                      public static RELAXNG_URI: java.lang.String
                      public static DTD: java.lang.String
                      public static EXPECTED_CONTENT_TYPES: java.lang.String
                      public constructor()
                  }

               }
               namespace runtime {
                  class ZeroOneBooleanAdapter extends javax.xml.bind.annotation.adapters.XmlAdapter<java.lang.String, java.lang.Boolean> {
                      public constructor()
                      unmarshal<T>(...args: any[]): any
                      marshal<T>(...args: any[]): any
                  }
                  class JAXBContextFactory$1 implements java.security.PrivilegedAction {
                      val$c: java.lang.Class
                      constructor(arg0: java.lang.Class)
                      public run(): java.lang.Object
                  }
                  class JAXBContextFactory {
                      public constructor()
                      createContext<T>(...args: any[]): any
                  }

               }
               namespace util {
                  class CodeModelClassFactory {
                      public constructor(arg0: com.sun.tools.internal.xjc.ErrorReceiver)
                      createClass<T>(...args: any[]): any
                      createInterface<T>(...args: any[]): any
                  }
                  class Util {
                      getSystemProperty<T>(...args: any[]): any
                      public static equals(arg0: org.xml.sax.Locator, arg1: org.xml.sax.Locator): boolean
                  }
                  abstract class SubtreeCutter extends org.xml.sax.helpers.XMLFilterImpl {
                      public constructor()
                      public startDocument(): void
                      public isCutting(): boolean
                      public startCutting(): void
                      public setContentHandler(arg0: org.xml.sax.ContentHandler): void
                      public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                      public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                  }
                  class StringCutter {
                      public constructor(arg0: java.lang.String, arg1: boolean)
                      public skip(arg0: java.lang.String): void
                      public next(arg0: java.lang.String): java.lang.String
                      public until(arg0: java.lang.String): java.lang.String
                      public peek(): char
                      public length(): int
                  }
                  abstract class ReadOnlyAdapter<OnTheWire, InMemory> extends javax.xml.bind.annotation.adapters.XmlAdapter<OnTheWire, InMemory> {
                      public constructor()
                      public marshal(arg0: InMemory): OnTheWire
                  }
                  class NullStream extends java.io.OutputStream {
                      public constructor()
                      write<T>(...args: any[]): any
                      public close(): void
                      public flush(): void
                  }
                  class NamespaceContextAdapter implements javax.xml.namespace.NamespaceContext {
                      public constructor(arg0: com.sun.xml.internal.xsom.XmlString)
                      public getNamespaceURI(arg0: java.lang.String): java.lang.String
                      public getPrefix(arg0: java.lang.String): java.lang.String
                      public getPrefixes(arg0: java.lang.String): java.util.Iterator
                  }
                  class MimeTypeRange {
                      public majorType: java.lang.String
                      public subType: java.lang.String
                      public parameters: java.util.Map<java.lang.String, java.lang.String>
                      public q: float
                      public static ALL: com.sun.tools.internal.xjc.util.MimeTypeRange
                      public static parseRanges(arg0: java.lang.String): java.util.List<com.sun.tools.internal.xjc.util.MimeTypeRange>
                      public constructor(arg0: java.lang.String)
                      public toMimeType(): javax.activation.MimeType
                      toString<T>(...args: any[]): any
                      public static merge(arg0: java.util.Collection<com.sun.tools.internal.xjc.util.MimeTypeRange>): com.sun.tools.internal.xjc.util.MimeTypeRange
                      public static main(arg0: java.lang.String[]): void
                  }
                  class Messages {
                      static ERR_CLASSNAME_COLLISION: java.lang.String
                      static ERR_CLASSNAME_COLLISION_SOURCE: java.lang.String
                      static ERR_INVALID_CLASSNAME: java.lang.String
                      static ERR_CASE_SENSITIVITY_COLLISION: java.lang.String
                      static ERR_CHAMELEON_SCHEMA_GONE_WILD: java.lang.String
                      constructor()
                      static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
                  }
                  class ForkEntityResolver implements org.xml.sax.EntityResolver {
                      public constructor(arg0: org.xml.sax.EntityResolver, arg1: org.xml.sax.EntityResolver)
                      public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
                  }
                  class ForkContentHandler implements org.xml.sax.ContentHandler {
                      public constructor(arg0: org.xml.sax.ContentHandler, arg1: org.xml.sax.ContentHandler)
                      public static create(arg0: org.xml.sax.ContentHandler[]): org.xml.sax.ContentHandler
                      public setDocumentLocator(arg0: org.xml.sax.Locator): void
                      public startDocument(): void
                      public endDocument(): void
                      public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                      public endPrefixMapping(arg0: java.lang.String): void
                      public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                      public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                      public characters(arg0: char[], arg1: int, arg2: int): void
                      public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                      public processingInstruction(arg0: java.lang.String, arg1: java.lang.String): void
                      public skippedEntity(arg0: java.lang.String): void
                  }
                  class ErrorReceiverFilter extends com.sun.tools.internal.xjc.ErrorReceiver {
                      constructor(...args: any[])
                      public setErrorReceiver(arg0: com.sun.tools.internal.xjc.api.ErrorListener): void
                      public hadError(): boolean
                      public info(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                  }
                  class DOMUtils {
                      public constructor()
                      public static getFirstChildElement(arg0: org.w3c.dom.Element, arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.Element
                      getChildElements<T>(...args: any[]): any
                      public static getElementText(arg0: org.w3c.dom.Element): java.lang.String
                      getElement<T>(...args: any[]): any
                      public static getElements(arg0: org.w3c.dom.NodeList): org.w3c.dom.Element[]
                  }

               }
               namespace generator {
                  namespace bean {
                     namespace field {
                        interface FieldRenderer {
                            public generate(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class FieldRendererFactory {
                            public constructor()
                            public getDefault(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getArray(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getRequiredUnboxed(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getSingle(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getSinglePrimitiveAccess(): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getList(arg0: com.sun.codemodel.internal.JClass): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getContentList(arg0: com.sun.codemodel.internal.JClass): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getDummyList(arg0: com.sun.codemodel.internal.JClass): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                            public getConst(arg0: com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer): com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                        }
                        class UntypedListFieldRenderer implements com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer {
                            constructor(...args: any[])
                            public generate(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class UntypedListField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.UntypedListField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.UntypedListField, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class UntypedListField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo, arg2: com.sun.codemodel.internal.JClass)
                            protected getCoreListType(): com.sun.codemodel.internal.JClass
                            public generateAccessors(): void
                            create<T>(...args: any[]): any
                            public getRawType(): com.sun.codemodel.internal.JType
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.UntypedListField): com.sun.codemodel.internal.JMethod
                        }
                        abstract class AbstractListField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField$Accessor {
                            protected field: com.sun.codemodel.internal.JFieldRef
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.AbstractListField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.AbstractListField, arg1: com.sun.codemodel.internal.JExpression)
                            protected unbox(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                            protected box(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                            protected ref(arg0: boolean): com.sun.codemodel.internal.JExpression
                            public count(): com.sun.codemodel.internal.JExpression
                            public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                        }
                        abstract class AbstractListField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField {
                            protected field: com.sun.codemodel.internal.JFieldVar
                            protected primitiveType: com.sun.codemodel.internal.JPrimitiveType
                            protected listT: com.sun.codemodel.internal.JClass
                            static $assertionsDisabled: boolean
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo, arg2: boolean)
                            protected generate(): void
                            protected fixNullRef(arg0: com.sun.codemodel.internal.JBlock): void
                            public getRawType(): com.sun.codemodel.internal.JType
                            protected getCoreListType(): com.sun.codemodel.internal.JClass
                            protected generateAccessors(): void
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.AbstractListField): com.sun.codemodel.internal.JMethod
                            static access$100(arg0: com.sun.tools.internal.xjc.generator.bean.field.AbstractListField): void
                        }
                        abstract class AbstractField$Accessor implements com.sun.tools.internal.xjc.outline.FieldAccessor {
                            protected $target: com.sun.codemodel.internal.JExpression
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.AbstractField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.AbstractField, arg1: com.sun.codemodel.internal.JExpression)
                            public owner(): com.sun.tools.internal.xjc.outline.FieldOutline
                            public getPropertyInfo(): com.sun.tools.internal.xjc.model.CPropertyInfo
                        }
                        class AbstractField$1TypeList extends java.util.ArrayList<com.sun.codemodel.internal.JType> {
                            val$aspect: com.sun.tools.internal.xjc.outline.Aspect
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.AbstractField
                            constructor()
                            add<T>(...args: any[]): any
                        }
                        abstract class AbstractField implements com.sun.tools.internal.xjc.outline.FieldOutline {
                            protected outline: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl
                            protected prop: com.sun.tools.internal.xjc.model.CPropertyInfo
                            protected codeModel: com.sun.codemodel.internal.JCodeModel
                            protected implType: com.sun.codemodel.internal.JType
                            protected exposedType: com.sun.codemodel.internal.JType
                            static $assertionsDisabled: boolean
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo)
                            public parent(): com.sun.tools.internal.xjc.outline.ClassOutline
                            public getPropertyInfo(): com.sun.tools.internal.xjc.model.CPropertyInfo
                            protected annotate(arg0: com.sun.codemodel.internal.JAnnotatable): void
                            protected getOptions(): com.sun.tools.internal.xjc.Options
                            protected generateField(arg0: com.sun.codemodel.internal.JType): com.sun.codemodel.internal.JFieldVar
                            protected castToImplType(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                            protected getType(arg0: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                            protected listPossibleTypes(arg0: com.sun.tools.internal.xjc.model.CPropertyInfo): java.util.List<java.lang.Object>
                        }
                        class UnboxedField$1 extends com.sun.tools.internal.xjc.generator.bean.field.AbstractFieldWithVar$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.UnboxedField
                            constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.UnboxedField, arg1: com.sun.codemodel.internal.JExpression)
                            public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                        }
                        class UnboxedField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractFieldWithVar {
                            static $assertionsDisabled: boolean
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo)
                            protected getType(arg0: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                            protected getFieldType(): com.sun.codemodel.internal.JType
                            public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                        }
                        abstract class AbstractFieldWithVar$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField$Accessor {
                            protected $ref: com.sun.codemodel.internal.JFieldRef
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.AbstractFieldWithVar
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.AbstractFieldWithVar, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        abstract class AbstractFieldWithVar extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField {
                            constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo)
                            protected createField(): void
                            protected getGetterMethod(): java.lang.String
                            protected getFieldType(): com.sun.codemodel.internal.JType
                            protected ref(): com.sun.codemodel.internal.JFieldVar
                            public getRawType(): com.sun.codemodel.internal.JType
                        }
                        class SinglePrimitiveAccessField extends com.sun.tools.internal.xjc.generator.bean.field.SingleField {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo)
                        }
                        class SingleField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractFieldWithVar$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.SingleField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.SingleField, arg1: com.sun.codemodel.internal.JExpression)
                            public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                        }
                        class SingleField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractFieldWithVar {
                            static $assertionsDisabled: boolean
                            constructor(...args: any[])
                            public getFieldType(): com.sun.codemodel.internal.JType
                            public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                        }
                        class NoExtendedContentField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.NoExtendedContentField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.NoExtendedContentField, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class NoExtendedContentField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo, arg2: com.sun.codemodel.internal.JClass)
                            protected getCoreListType(): com.sun.codemodel.internal.JClass
                            public generateAccessors(): void
                            create<T>(...args: any[]): any
                            protected getType(arg0: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                            public getRawType(): com.sun.codemodel.internal.JType
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.NoExtendedContentField): com.sun.codemodel.internal.JMethod
                        }
                        class Messages extends java.lang.Enum<com.sun.tools.internal.xjc.generator.bean.field.Messages> {
                            public static DEFAULT_GETTER_JAVADOC: com.sun.tools.internal.xjc.generator.bean.field.Messages
                            public static DEFAULT_SETTER_JAVADOC: com.sun.tools.internal.xjc.generator.bean.field.Messages
                            public static values(): com.sun.tools.internal.xjc.generator.bean.field.Messages[]
                            valueOf<T>(...args: any[]): any
                            toString<T>(...args: any[]): any
                            public format(...arg0: java.lang.Object[]): java.lang.String
                        }
                        class IsSetFieldRenderer implements com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer {
                            public constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer, arg1: boolean, arg2: boolean)
                            public generate(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class IsSetField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.IsSetField
                            constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.IsSetField, arg1: com.sun.codemodel.internal.JExpression)
                            public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class IsSetField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo, arg2: com.sun.tools.internal.xjc.outline.FieldOutline, arg3: boolean, arg4: boolean)
                            public getRawType(): com.sun.codemodel.internal.JType
                            public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.IsSetField): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class GenericFieldRenderer implements com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer {
                            public constructor(arg0: java.lang.Class)
                            public generate(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class DummyListField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.DummyListField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.DummyListField, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class DummyListField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo, arg2: com.sun.codemodel.internal.JClass)
                            protected annotate(arg0: com.sun.codemodel.internal.JAnnotatable): void
                            protected getCoreListType(): com.sun.codemodel.internal.JClass
                            public generateAccessors(): void
                            create<T>(...args: any[]): any
                            public getRawType(): com.sun.codemodel.internal.JType
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.DummyListField): com.sun.codemodel.internal.JMethod
                        }
                        class DefaultFieldRenderer implements com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer {
                            constructor(...args: any[])
                            public generate(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class ContentListField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.ContentListField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.ContentListField, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class ContentListField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo, arg2: com.sun.codemodel.internal.JClass)
                            protected getCoreListType(): com.sun.codemodel.internal.JClass
                            public generateAccessors(): void
                            create<T>(...args: any[]): any
                            protected getType(arg0: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                            public getRawType(): com.sun.codemodel.internal.JType
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.ContentListField): com.sun.codemodel.internal.JMethod
                        }
                        class ConstFieldRenderer implements com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer {
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer)
                            public generate(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                        }
                        class ConstField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.ConstField
                            constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.ConstField, arg1: com.sun.codemodel.internal.JExpression)
                            public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class ConstField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractField {
                            static $assertionsDisabled: boolean
                            constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo)
                            public getRawType(): com.sun.codemodel.internal.JType
                            public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                        }
                        class ArrayField$Accessor extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField$Accessor {
                            this$0: com.sun.tools.internal.xjc.generator.bean.field.ArrayField
                            protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.field.ArrayField, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                        }
                        class ArrayField extends com.sun.tools.internal.xjc.generator.bean.field.AbstractListField {
                            constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.model.CPropertyInfo)
                            protected generateArray(): void
                            public generateAccessors(): void
                            public getRawType(): com.sun.codemodel.internal.JType
                            protected getCoreListType(): com.sun.codemodel.internal.JClass
                            create<T>(...args: any[]): any
                            protected castToImplTypeArray(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                            static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.field.ArrayField): com.sun.codemodel.internal.JMethod
                            static access$100(arg0: com.sun.tools.internal.xjc.generator.bean.field.ArrayField): com.sun.codemodel.internal.JMethod
                        }

                     }
                     class ImplStructureStrategy$1$1 extends com.sun.tools.internal.xjc.generator.bean.MethodWriter {
                         val$target: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl
                         this$0: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$1
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$1, arg1: com.sun.tools.internal.xjc.outline.ClassOutline, arg2: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl)
                         public addParameter(arg0: com.sun.codemodel.internal.JType, arg1: java.lang.String): com.sun.codemodel.internal.JVar
                         public declareMethod(arg0: com.sun.codemodel.internal.JType, arg1: java.lang.String): com.sun.codemodel.internal.JMethod
                         public javadoc(): com.sun.codemodel.internal.JDocComment
                     }
                     class ImplStructureStrategy$1 extends com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy {
                         static $assertionsDisabled: boolean
                         constructor(arg0: java.lang.String, arg1: int)
                         protected createClasses(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$Result
                         protected getPackage(arg0: com.sun.codemodel.internal.JPackage, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JPackage
                         protected createMethodWriter(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl): com.sun.tools.internal.xjc.generator.bean.MethodWriter
                         protected _extends(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl): void
                     }
                     class ImplStructureStrategy$2$1 extends com.sun.tools.internal.xjc.generator.bean.MethodWriter {
                         val$target: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl
                         this$0: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$2
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$2, arg1: com.sun.tools.internal.xjc.outline.ClassOutline, arg2: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl)
                         public addParameter(arg0: com.sun.codemodel.internal.JType, arg1: java.lang.String): com.sun.codemodel.internal.JVar
                         public declareMethod(arg0: com.sun.codemodel.internal.JType, arg1: java.lang.String): com.sun.codemodel.internal.JMethod
                         public javadoc(): com.sun.codemodel.internal.JDocComment
                     }
                     class ImplStructureStrategy$2 extends com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy {
                         static $assertionsDisabled: boolean
                         constructor(arg0: java.lang.String, arg1: int)
                         protected createClasses(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$Result
                         protected getPackage(arg0: com.sun.codemodel.internal.JPackage, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JPackage
                         protected createMethodWriter(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl): com.sun.tools.internal.xjc.generator.bean.MethodWriter
                         protected _extends(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl): void
                     }
                     class ImplStructureStrategy$Result {
                         public exposed: com.sun.codemodel.internal.JDefinedClass
                         public implementation: com.sun.codemodel.internal.JDefinedClass
                         public constructor(arg0: com.sun.codemodel.internal.JDefinedClass, arg1: com.sun.codemodel.internal.JDefinedClass)
                     }
                     class ImplStructureStrategy$3 {
                         static $SwitchMap$com$sun$tools$internal$xjc$outline$Aspect: int[]
                     }
                     abstract class ImplStructureStrategy extends java.lang.Enum<com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy> {
                         public static BEAN_ONLY: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy
                         public static INTF_AND_IMPL: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy
                         public static values(): com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy[]
                         valueOf<T>(...args: any[]): any
                         protected createClasses(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$Result
                         protected getPackage(arg0: com.sun.codemodel.internal.JPackage, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JPackage
                         protected createMethodWriter(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl): com.sun.tools.internal.xjc.generator.bean.MethodWriter
                         protected _extends(arg0: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl, arg1: com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl): void
                         constructor(arg0: java.lang.String, arg1: int, arg2: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy$1)
                     }
                     abstract class ObjectFactoryGenerator {
                         public constructor()
                         populate<T>(...args: any[]): any
                         public getObjectFactory(): com.sun.codemodel.internal.JDefinedClass
                     }
                     class ClassOutlineImpl extends com.sun.tools.internal.xjc.outline.ClassOutline {
                         public createMethodWriter(): com.sun.tools.internal.xjc.generator.bean.MethodWriter
                         _package<T>(...args: any[]): any
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.CClassInfo, arg2: com.sun.codemodel.internal.JDefinedClass, arg3: com.sun.codemodel.internal.JDefinedClass, arg4: com.sun.codemodel.internal.JClass)
                         parent<T>(...args: any[]): any
                     }
                     abstract class MethodWriter {
                         protected codeModel: com.sun.codemodel.internal.JCodeModel
                         protected constructor(arg0: com.sun.tools.internal.xjc.outline.ClassOutline)
                         declareMethod<T>(...args: any[]): any
                         public javadoc(): com.sun.codemodel.internal.JDocComment
                         addParameter<T>(...args: any[]): any
                     }
                     class BeanGenerator$1 implements com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<com.sun.codemodel.internal.JClassContainer> {
                         this$0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator)
                         onBean<T>(...args: any[]): any
                         onElement<T>(...args: any[]): any
                         onPackage<T>(...args: any[]): any
                     }
                     class BeanGenerator$2 implements com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<com.sun.codemodel.internal.JClassContainer> {
                         this$0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator)
                         onBean<T>(...args: any[]): any
                         onElement<T>(...args: any[]): any
                         onPackage<T>(...args: any[]): any
                     }
                     class BeanGenerator$3 extends com.sun.tools.internal.xjc.outline.EnumOutline {
                         this$0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.CEnumLeafInfo, arg2: com.sun.codemodel.internal.JDefinedClass)
                         public parent(): com.sun.tools.internal.xjc.outline.Outline
                     }
                     class BeanGenerator$4 extends com.sun.tools.internal.xjc.outline.EnumConstantOutline {
                         this$0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.CEnumConstant, arg2: com.sun.codemodel.internal.JEnumConstant)
                     }
                     class BeanGenerator$5 {
                         static $SwitchMap$com$sun$tools$internal$xjc$generator$bean$ImplStructureStrategy: int[]
                         static $SwitchMap$com$sun$tools$internal$xjc$outline$Aspect: int[]
                         static $SwitchMap$com$sun$xml$internal$bind$v2$model$core$ID: int[]
                     }
                     class BeanGenerator implements com.sun.tools.internal.xjc.outline.Outline {
                         elements: java.util.Map<com.sun.tools.internal.xjc.model.CElementInfo, com.sun.tools.internal.xjc.generator.bean.ElementOutlineImpl>
                         static $assertionsDisabled: boolean
                         public static generate(arg0: com.sun.tools.internal.xjc.model.Model, arg1: com.sun.tools.internal.xjc.ErrorReceiver): com.sun.tools.internal.xjc.outline.Outline
                         public getModel(): com.sun.tools.internal.xjc.model.Model
                         public getCodeModel(): com.sun.codemodel.internal.JCodeModel
                         public getContainer(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JClassContainer
                         public resolve(arg0: com.sun.tools.internal.xjc.model.CTypeRef, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                         public getUsedPackages(arg0: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JPackage[]
                         public getErrorReceiver(): com.sun.tools.internal.xjc.ErrorReceiver
                         public getClassFactory(): com.sun.tools.internal.xjc.util.CodeModelClassFactory
                         getPackageContext<T>(...args: any[]): any
                         public getClasses(): java.util.Collection<com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl>
                         getClazz<T>(...args: any[]): any
                         getElement<T>(...args: any[]): any
                         public getEnum(arg0: com.sun.tools.internal.xjc.model.CEnumLeafInfo): com.sun.tools.internal.xjc.outline.EnumOutline
                         public getEnums(): java.util.Collection<com.sun.tools.internal.xjc.outline.EnumOutline>
                         public getAllPackageContexts(): java.lang.Iterable<com.sun.tools.internal.xjc.outline.PackageOutline>
                         public getField(arg0: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                         public generateAdapterIfNecessary(arg0: com.sun.tools.internal.xjc.model.CPropertyInfo, arg1: com.sun.codemodel.internal.JAnnotatable): void
                         public addRuntime(arg0: java.lang.Class): com.sun.codemodel.internal.JClass
                         public generateStaticClass(arg0: java.lang.Class, arg1: com.sun.codemodel.internal.JPackage): com.sun.codemodel.internal.JClass
                         static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator): com.sun.tools.internal.xjc.model.Model
                     }
                     class PackageOutlineImpl$1 implements com.sun.tools.internal.xjc.model.CPropertyVisitor<java.lang.Void> {
                         this$0: com.sun.tools.internal.xjc.generator.bean.PackageOutlineImpl
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.PackageOutlineImpl)
                         onElement<T>(...args: any[]): any
                         onReference<T>(...args: any[]): any
                         onAttribute<T>(...args: any[]): any
                         onValue<T>(...args: any[]): any
                     }
                     class PackageOutlineImpl$2 {
                         static $SwitchMap$com$sun$tools$internal$xjc$generator$bean$ImplStructureStrategy: int[]
                     }
                     class PackageOutlineImpl implements com.sun.tools.internal.xjc.outline.PackageOutline {
                         classes: java.util.Set<com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl>
                         static $assertionsDisabled: boolean
                         public getMostUsedNamespaceURI(): java.lang.String
                         public getAttributeFormDefault(): javax.xml.bind.annotation.XmlNsForm
                         public getElementFormDefault(): javax.xml.bind.annotation.XmlNsForm
                         public _package(): com.sun.codemodel.internal.JPackage
                         public objectFactoryGenerator(): com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGenerator
                         public getClasses(): java.util.Set<com.sun.tools.internal.xjc.generator.bean.ClassOutlineImpl>
                         public objectFactory(): com.sun.codemodel.internal.JDefinedClass
                         protected constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.Model, arg2: com.sun.codemodel.internal.JPackage)
                         public calcDefaultValues(): void
                         static access$000(arg0: com.sun.tools.internal.xjc.generator.bean.PackageOutlineImpl): java.util.HashMap
                         static access$100(arg0: com.sun.tools.internal.xjc.generator.bean.PackageOutlineImpl, arg1: java.util.HashMap, arg2: javax.xml.namespace.QName): void
                     }
                     class ElementOutlineImpl extends com.sun.tools.internal.xjc.outline.ElementOutline {
                         parent<T>(...args: any[]): any
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.CElementInfo)
                     }
                     class PublicObjectFactoryGenerator extends com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGeneratorImpl {
                         public constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.Model, arg2: com.sun.codemodel.internal.JPackage)
                         populate<T>(...args: any[]): any
                     }
                     abstract class ObjectFactoryGeneratorImpl extends com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGenerator {
                         public getObjectFactory(): com.sun.codemodel.internal.JDefinedClass
                         public constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.Model, arg2: com.sun.codemodel.internal.JPackage)
                         populate<T>(...args: any[]): any
                     }
                     class PrivateObjectFactoryGenerator extends com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGeneratorImpl {
                         public constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.Model, arg2: com.sun.codemodel.internal.JPackage)
                         populate<T>(...args: any[]): any
                     }
                     class Messages extends java.lang.Enum<com.sun.tools.internal.xjc.generator.bean.Messages> {
                         public static METHOD_COLLISION: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static ERR_UNUSABLE_NAME: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static ERR_KEYNAME_COLLISION: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static ERR_NAME_COLLISION: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static ILLEGAL_CONSTRUCTOR_PARAM: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static OBJECT_FACTORY_CONFLICT: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static OBJECT_FACTORY_CONFLICT_RELATED: com.sun.tools.internal.xjc.generator.bean.Messages
                         public static values(): com.sun.tools.internal.xjc.generator.bean.Messages[]
                         valueOf<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                         public format(...arg0: java.lang.Object[]): java.lang.String
                     }
                     class DualObjectFactoryGenerator extends com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGenerator {
                         public publicOFG: com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGenerator
                         public privateOFG: com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGenerator
                         constructor(arg0: com.sun.tools.internal.xjc.generator.bean.BeanGenerator, arg1: com.sun.tools.internal.xjc.model.Model, arg2: com.sun.codemodel.internal.JPackage)
                         populate<T>(...args: any[]): any
                         public getObjectFactory(): com.sun.codemodel.internal.JDefinedClass
                     }

                  }
                  namespace annotation {
                     namespace spec {
                        interface XmlTypeWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlType> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlTypeWriter
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlTypeWriter
                            public propOrder(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlTypeWriter
                            factoryClass<T>(...args: any[]): any
                            public factoryMethod(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlTypeWriter
                        }
                        interface XmlElementsWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlElements> {
                            public value(): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWriter
                        }
                        interface XmlElementWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlElement> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWriter
                            type<T>(...args: any[]): any
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWriter
                            public defaultValue(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWriter
                            public required(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWriter
                            public nillable(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWriter
                        }
                        interface XmlValueWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlValue> {
                        }
                        interface XmlTransientWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlTransient> {
                        }
                        interface XmlSeeAlsoWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlSeeAlso> {
                            value<T>(...args: any[]): any
                        }
                        interface XmlSchemaWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlSchema> {
                            public location(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaWriter
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaWriter
                            public xmlns(): com.sun.tools.internal.xjc.generator.annotation.spec.XmlNsWriter
                            public elementFormDefault(arg0: javax.xml.bind.annotation.XmlNsForm): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaWriter
                            public attributeFormDefault(arg0: javax.xml.bind.annotation.XmlNsForm): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaWriter
                        }
                        interface XmlNsWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlNs> {
                            public prefix(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlNsWriter
                            public namespaceURI(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlNsWriter
                        }
                        interface XmlSchemaTypesWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlSchemaTypes> {
                            public value(): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaTypeWriter
                        }
                        interface XmlSchemaTypeWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlSchemaType> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaTypeWriter
                            type<T>(...args: any[]): any
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlSchemaTypeWriter
                        }
                        interface XmlRootElementWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlRootElement> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlRootElementWriter
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlRootElementWriter
                        }
                        interface XmlRegistryWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlRegistry> {
                        }
                        interface XmlMixedWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlMixed> {
                        }
                        interface XmlMimeTypeWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlMimeType> {
                            public value(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlMimeTypeWriter
                        }
                        interface XmlListWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlList> {
                        }
                        interface XmlJavaTypeAdapterWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter> {
                            type<T>(...args: any[]): any
                            value<T>(...args: any[]): any
                        }
                        interface XmlInlineBinaryDataWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlInlineBinaryData> {
                        }
                        interface XmlIDWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlID> {
                        }
                        interface XmlIDREFWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlIDREF> {
                        }
                        interface XmlEnumWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlEnum> {
                            value<T>(...args: any[]): any
                        }
                        interface XmlEnumValueWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlEnumValue> {
                            public value(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlEnumValueWriter
                        }
                        interface XmlElementWrapperWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlElementWrapper> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWrapperWriter
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWrapperWriter
                            public required(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWrapperWriter
                            public nillable(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementWrapperWriter
                        }
                        interface XmlElementRefsWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlElementRefs> {
                            public value(): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementRefWriter
                        }
                        interface XmlElementRefWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlElementRef> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementRefWriter
                            type<T>(...args: any[]): any
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementRefWriter
                            public required(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementRefWriter
                        }
                        interface XmlElementDeclWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlElementDecl> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementDeclWriter
                            scope<T>(...args: any[]): any
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementDeclWriter
                            public defaultValue(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementDeclWriter
                            public substitutionHeadNamespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementDeclWriter
                            public substitutionHeadName(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlElementDeclWriter
                        }
                        interface XmlAttributeWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlAttribute> {
                            public name(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlAttributeWriter
                            public namespace(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.annotation.spec.XmlAttributeWriter
                            public required(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlAttributeWriter
                        }
                        interface XmlAttachmentRefWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlAttachmentRef> {
                        }
                        interface XmlAnyElementWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlAnyElement> {
                            value<T>(...args: any[]): any
                            public lax(arg0: boolean): com.sun.tools.internal.xjc.generator.annotation.spec.XmlAnyElementWriter
                        }
                        interface XmlAnyAttributeWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlAnyAttribute> {
                        }
                        interface XmlAccessorTypeWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlAccessorType> {
                            public value(arg0: javax.xml.bind.annotation.XmlAccessType): com.sun.tools.internal.xjc.generator.annotation.spec.XmlAccessorTypeWriter
                        }
                        interface XmlAccessorOrderWriter extends com.sun.codemodel.internal.JAnnotationWriter<javax.xml.bind.annotation.XmlAccessorOrder> {
                            public value(arg0: javax.xml.bind.annotation.XmlAccessOrder): com.sun.tools.internal.xjc.generator.annotation.spec.XmlAccessorOrderWriter
                        }

                     }

                  }
                  namespace util {
                     class WhitespaceNormalizer$1 extends com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer {
                         constructor()
                         public generate(arg0: com.sun.codemodel.internal.JCodeModel, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                     }
                     class WhitespaceNormalizer$2 extends com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer {
                         constructor()
                         public generate(arg0: com.sun.codemodel.internal.JCodeModel, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                     }
                     class WhitespaceNormalizer$3 extends com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer {
                         constructor()
                         public generate(arg0: com.sun.codemodel.internal.JCodeModel, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                     }
                     abstract class WhitespaceNormalizer {
                         public static PRESERVE: com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer
                         public static REPLACE: com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer
                         public static COLLAPSE: com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer
                         public constructor()
                         public generate(arg0: com.sun.codemodel.internal.JCodeModel, arg1: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JExpression
                         public static parse(arg0: java.lang.String): com.sun.tools.internal.xjc.generator.util.WhitespaceNormalizer
                     }
                     abstract class LazyBlockReference implements com.sun.tools.internal.xjc.generator.util.BlockReference {
                         public constructor()
                         protected create(): com.sun.codemodel.internal.JBlock
                         public get(arg0: boolean): com.sun.codemodel.internal.JBlock
                     }
                     interface BlockReference {
                         public get(arg0: boolean): com.sun.codemodel.internal.JBlock
                     }
                     class ExistingBlockReference implements com.sun.tools.internal.xjc.generator.util.BlockReference {
                         public constructor(arg0: com.sun.codemodel.internal.JBlock)
                         public get(arg0: boolean): com.sun.codemodel.internal.JBlock
                     }

                  }

               }
               namespace api {
                  namespace util {
                     class ToolsJarNotFoundException extends java.lang.Exception {
                         public toolsJar: java.io.File
                         public constructor(arg0: java.io.File)
                     }
                     class Messages extends java.lang.Enum<com.sun.tools.internal.xjc.api.util.Messages> {
                         public static TOOLS_JAR_NOT_FOUND: com.sun.tools.internal.xjc.api.util.Messages
                         public static values(): com.sun.tools.internal.xjc.api.util.Messages[]
                         valueOf<T>(...args: any[]): any
                         toString<T>(...args: any[]): any
                         public format(...arg0: java.lang.Object[]): java.lang.String
                     }
                     class FilerCodeWriter extends com.sun.codemodel.internal.CodeWriter {
                         public constructor(arg0: javax.annotation.processing.Filer)
                         public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
                         public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
                         public close(): void
                     }
                     class ApClassLoader extends java.net.URLClassLoader {
                         public constructor(arg0: java.lang.ClassLoader, arg1: java.lang.String[])
                         public loadClass(arg0: java.lang.String): java.lang.Class
                         protected findClass(arg0: java.lang.String): java.lang.Class
                     }

                  }
                  interface ErrorListener extends com.sun.xml.internal.bind.api.ErrorListener {
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                  }
                  interface ClassNameAllocator {
                      public assignClassName(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                  }
                  class SpecVersion extends java.lang.Enum<com.sun.tools.internal.xjc.api.SpecVersion> {
                      public static V2_0: com.sun.tools.internal.xjc.api.SpecVersion
                      public static V2_1: com.sun.tools.internal.xjc.api.SpecVersion
                      public static V2_2: com.sun.tools.internal.xjc.api.SpecVersion
                      public static LATEST: com.sun.tools.internal.xjc.api.SpecVersion
                      public static values(): com.sun.tools.internal.xjc.api.SpecVersion[]
                      valueOf<T>(...args: any[]): any
                      public isLaterThan(arg0: com.sun.tools.internal.xjc.api.SpecVersion): boolean
                      public static parse(arg0: java.lang.String): com.sun.tools.internal.xjc.api.SpecVersion
                  }
                  namespace impl {
                     namespace s2j {
                        class TypeAndAnnotationImpl implements com.sun.tools.internal.xjc.api.TypeAndAnnotation {
                            public constructor(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.model.TypeUse)
                            public getTypeClass(): com.sun.codemodel.internal.JType
                            public annotate(arg0: com.sun.codemodel.internal.JAnnotatable): void
                            toString<T>(...args: any[]): any
                            public equals(arg0: java.lang.Object): boolean
                            public hashCode(): int
                        }
                        class SchemaCompilerImpl$1 implements org.w3c.dom.ls.LSResourceResolver {
                            this$0: com.sun.tools.internal.xjc.api.impl.s2j.SchemaCompilerImpl
                            constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.SchemaCompilerImpl)
                            public resolveResource(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): org.w3c.dom.ls.LSInput
                        }
                        class SchemaCompilerImpl extends com.sun.tools.internal.xjc.ErrorReceiver implements com.sun.tools.internal.xjc.api.SchemaCompiler {
                            protected opts: com.sun.tools.internal.xjc.Options
                            protected forest: com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                            public constructor()
                            public getOptions(): com.sun.tools.internal.xjc.Options
                            public getParserHandler(arg0: java.lang.String): org.xml.sax.ContentHandler
                            parseSchema<T>(...args: any[]): any
                            public setTargetVersion(arg0: com.sun.tools.internal.xjc.api.SpecVersion): void
                            public setEntityResolver(arg0: org.xml.sax.EntityResolver): void
                            public setDefaultPackageName(arg0: java.lang.String): void
                            public forcePackageName(arg0: java.lang.String): void
                            public setClassNameAllocator(arg0: com.sun.tools.internal.xjc.api.ClassNameAllocator): void
                            public resetSchema(): void
                            bind<T>(...args: any[]): any
                            public setErrorListener(arg0: com.sun.tools.internal.xjc.api.ErrorListener): void
                            public info(arg0: org.xml.sax.SAXParseException): void
                            public warning(arg0: org.xml.sax.SAXParseException): void
                            public error(arg0: org.xml.sax.SAXParseException): void
                            public fatalError(arg0: org.xml.sax.SAXParseException): void
                        }
                        class JAXBModelImpl implements com.sun.tools.internal.xjc.api.S2JJAXBModel {
                            outline: com.sun.tools.internal.xjc.outline.Outline
                            constructor(arg0: com.sun.tools.internal.xjc.outline.Outline)
                            public generateCode(arg0: com.sun.tools.internal.xjc.Plugin[], arg1: com.sun.tools.internal.xjc.api.ErrorListener): com.sun.codemodel.internal.JCodeModel
                            public getAllObjectFactories(): java.util.List<com.sun.codemodel.internal.JClass>
                            public get(arg0: javax.xml.namespace.QName): com.sun.tools.internal.xjc.api.Mapping
                            public getMappings(): java.util.Collection<com.sun.tools.internal.xjc.api.Mapping>
                            public getJavaType(arg0: javax.xml.namespace.QName): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                            public getClassList(): java.util.List<java.lang.String>
                        }
                        class PropertyImpl implements com.sun.tools.internal.xjc.api.Property {
                            protected fr: com.sun.tools.internal.xjc.outline.FieldOutline
                            elementName<T>(...args: any[]): any
                            protected parent: com.sun.tools.internal.xjc.api.Mapping
                            protected codeModel: com.sun.codemodel.internal.JCodeModel
                            constructor(arg0: com.sun.tools.internal.xjc.api.Mapping, arg1: com.sun.tools.internal.xjc.outline.FieldOutline, arg2: javax.xml.namespace.QName)
                            public name(): java.lang.String
                            public rawName(): javax.xml.namespace.QName
                            public type(): com.sun.codemodel.internal.JType
                        }
                        class ElementSingleAdapter$FieldAccessorImpl extends com.sun.tools.internal.xjc.api.impl.s2j.ElementAdapter$FieldAccessorImpl {
                            this$0: com.sun.tools.internal.xjc.api.impl.s2j.ElementSingleAdapter
                            public constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.ElementSingleAdapter, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class ElementSingleAdapter extends com.sun.tools.internal.xjc.api.impl.s2j.ElementAdapter {
                            public constructor(arg0: com.sun.tools.internal.xjc.outline.FieldOutline, arg1: com.sun.tools.internal.xjc.model.CElementInfo)
                            public getRawType(): com.sun.codemodel.internal.JType
                            public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                        }
                        abstract class ElementAdapter$FieldAccessorImpl implements com.sun.tools.internal.xjc.outline.FieldAccessor {
                            acc: com.sun.tools.internal.xjc.outline.FieldAccessor
                            this$0: com.sun.tools.internal.xjc.api.impl.s2j.ElementAdapter
                            public constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.ElementAdapter, arg1: com.sun.codemodel.internal.JExpression)
                            public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                            public hasSetValue(): com.sun.codemodel.internal.JExpression
                            public owner(): com.sun.tools.internal.xjc.outline.FieldOutline
                            public getPropertyInfo(): com.sun.tools.internal.xjc.model.CPropertyInfo
                            protected createJAXBElement(arg0: com.sun.codemodel.internal.JExpression): com.sun.codemodel.internal.JInvocation
                        }
                        abstract class ElementAdapter implements com.sun.tools.internal.xjc.outline.FieldOutline {
                            protected core: com.sun.tools.internal.xjc.outline.FieldOutline
                            protected ei: com.sun.tools.internal.xjc.model.CElementInfo
                            public constructor(arg0: com.sun.tools.internal.xjc.outline.FieldOutline, arg1: com.sun.tools.internal.xjc.model.CElementInfo)
                            public parent(): com.sun.tools.internal.xjc.outline.ClassOutline
                            public getPropertyInfo(): com.sun.tools.internal.xjc.model.CPropertyInfo
                            protected outline(): com.sun.tools.internal.xjc.outline.Outline
                            protected codeModel(): com.sun.codemodel.internal.JCodeModel
                        }
                        class ElementMappingImpl extends com.sun.tools.internal.xjc.api.impl.s2j.AbstractMappingImpl<com.sun.tools.internal.xjc.model.CElementInfo> {
                            protected constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.JAXBModelImpl, arg1: com.sun.tools.internal.xjc.model.CElementInfo)
                            public getType(): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                            public calcDrilldown(): java.util.List<com.sun.tools.internal.xjc.api.Property>
                        }
                        abstract class CElement> implements com.sun.tools.internal.xjc.api.Mapping {
                            protected parent: com.sun.tools.internal.xjc.api.impl.s2j.JAXBModelImpl
                            protected clazz: InfoT
                            protected constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.JAXBModelImpl, arg1: InfoT)
                            public getElement(): javax.xml.namespace.QName
                            public getClazz(): java.lang.String
                            public getWrapperStyleDrilldown(): java.util.List<com.sun.tools.internal.xjc.api.Property>
                            protected calcDrilldown(): java.util.List<com.sun.tools.internal.xjc.api.Property>
                            protected buildDrilldown(arg0: com.sun.tools.internal.xjc.model.CClassInfo): java.util.List<com.sun.tools.internal.xjc.api.Property>
                        }
                        class ElementCollectionAdapter$FieldAccessorImpl extends com.sun.tools.internal.xjc.api.impl.s2j.ElementAdapter$FieldAccessorImpl {
                            this$0: com.sun.tools.internal.xjc.api.impl.s2j.ElementCollectionAdapter
                            public constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.ElementCollectionAdapter, arg1: com.sun.codemodel.internal.JExpression)
                            public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                            public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                        }
                        class ElementCollectionAdapter extends com.sun.tools.internal.xjc.api.impl.s2j.ElementAdapter {
                            public constructor(arg0: com.sun.tools.internal.xjc.outline.FieldOutline, arg1: com.sun.tools.internal.xjc.model.CElementInfo)
                            public getRawType(): com.sun.codemodel.internal.JType
                            public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                            static access$000(arg0: com.sun.tools.internal.xjc.api.impl.s2j.ElementCollectionAdapter): com.sun.codemodel.internal.JType
                        }
                        class DowngradingErrorHandler implements org.xml.sax.ErrorHandler {
                            public constructor(arg0: org.xml.sax.ErrorHandler)
                            public warning(arg0: org.xml.sax.SAXParseException): void
                            public error(arg0: org.xml.sax.SAXParseException): void
                            public fatalError(arg0: org.xml.sax.SAXParseException): void
                        }
                        class BeanMappingImpl extends com.sun.tools.internal.xjc.api.impl.s2j.AbstractMappingImpl<com.sun.tools.internal.xjc.model.CClassInfo> {
                            static $assertionsDisabled: boolean
                            constructor(arg0: com.sun.tools.internal.xjc.api.impl.s2j.JAXBModelImpl, arg1: com.sun.tools.internal.xjc.model.CClassInfo)
                            public getType(): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                            public getTypeClass(): java.lang.String
                            public calcDrilldown(): java.util.List<com.sun.tools.internal.xjc.api.Property>
                        }

                     }

                  }
                  interface TypeAndAnnotation {
                      public getTypeClass(): com.sun.codemodel.internal.JType
                      public annotate(arg0: com.sun.codemodel.internal.JAnnotatable): void
                      public equals(arg0: java.lang.Object): boolean
                  }
                  interface SchemaCompiler {
                      public getParserHandler(arg0: java.lang.String): org.xml.sax.ContentHandler
                      parseSchema<T>(...args: any[]): any
                      public setTargetVersion(arg0: com.sun.tools.internal.xjc.api.SpecVersion): void
                      public setErrorListener(arg0: com.sun.tools.internal.xjc.api.ErrorListener): void
                      public setEntityResolver(arg0: org.xml.sax.EntityResolver): void
                      public setDefaultPackageName(arg0: java.lang.String): void
                      public forcePackageName(arg0: java.lang.String): void
                      public setClassNameAllocator(arg0: com.sun.tools.internal.xjc.api.ClassNameAllocator): void
                      public resetSchema(): void
                      public bind(): com.sun.tools.internal.xjc.api.S2JJAXBModel
                      public getOptions(): com.sun.tools.internal.xjc.Options
                  }
                  interface S2JJAXBModel extends com.sun.tools.internal.xjc.api.JAXBModel {
                      public get(arg0: javax.xml.namespace.QName): com.sun.tools.internal.xjc.api.Mapping
                      public getAllObjectFactories(): java.util.List<com.sun.codemodel.internal.JClass>
                      public getMappings(): java.util.Collection<com.sun.tools.internal.xjc.api.Mapping>
                      public getJavaType(arg0: javax.xml.namespace.QName): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                      public generateCode(arg0: com.sun.tools.internal.xjc.Plugin[], arg1: com.sun.tools.internal.xjc.api.ErrorListener): com.sun.codemodel.internal.JCodeModel
                  }
                  interface JAXBModel {
                      public getClassList(): java.util.List<java.lang.String>
                  }
                  interface Mapping {
                      public getElement(): javax.xml.namespace.QName
                      public getType(): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                      public getWrapperStyleDrilldown(): java.util.List<com.sun.tools.internal.xjc.api.Property>
                  }
                  interface Property {
                      public name(): java.lang.String
                      public type(): com.sun.codemodel.internal.JType
                      public elementName(): javax.xml.namespace.QName
                      public rawName(): javax.xml.namespace.QName
                  }
                  class XJC {
                      public constructor()
                      public static createSchemaCompiler(): com.sun.tools.internal.xjc.api.SchemaCompiler
                      public static getDefaultPackageName(arg0: java.lang.String): java.lang.String
                  }
                  class Reference {
                      public type: javax.lang.model.type.TypeMirror
                      public annotations: javax.lang.model.element.Element
                      constructor(...args: any[])
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                  }
                  interface JavaCompiler {
                      public bind(arg0: java.util.Collection<com.sun.tools.internal.xjc.api.Reference>, arg1: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.api.Reference>, arg2: java.lang.String, arg3: javax.annotation.processing.ProcessingEnvironment): com.sun.tools.internal.xjc.api.J2SJAXBModel
                  }
                  interface J2SJAXBModel extends com.sun.tools.internal.xjc.api.JAXBModel {
                      public getXmlTypeName(arg0: com.sun.tools.internal.xjc.api.Reference): javax.xml.namespace.QName
                      public generateSchema(arg0: javax.xml.bind.SchemaOutputResolver, arg1: com.sun.tools.internal.xjc.api.ErrorListener): void
                      public generateEpisodeFile(arg0: javax.xml.transform.Result): void
                  }

               }
               namespace addon {
                  namespace episode {
                     class PluginImpl$1 implements com.sun.xml.internal.xsom.visitor.XSFunction<java.lang.String> {
                         constructor()
                         complexType<T>(...args: any[]): any
                         simpleType<T>(...args: any[]): any
                         elementDecl<T>(...args: any[]): any
                         annotation<T>(...args: any[]): any
                         attGroupDecl<T>(...args: any[]): any
                         attributeDecl<T>(...args: any[]): any
                         attributeUse<T>(...args: any[]): any
                         schema<T>(...args: any[]): any
                         facet<T>(...args: any[]): any
                         notation<T>(...args: any[]): any
                         identityConstraint<T>(...args: any[]): any
                         xpath<T>(...args: any[]): any
                         particle<T>(...args: any[]): any
                         empty<T>(...args: any[]): any
                         wildcard<T>(...args: any[]): any
                         modelGroupDecl<T>(...args: any[]): any
                         modelGroup<T>(...args: any[]): any
                     }
                     class PluginImpl$OutlineAdaptor$OutlineType$1 implements com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType$BindingsBuilder {
                         constructor()
                         public build(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor, arg1: com.sun.xml.internal.bind.v2.schemagen.episode.Bindings): void
                     }
                     class PluginImpl$OutlineAdaptor$OutlineType$2 implements com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType$BindingsBuilder {
                         constructor()
                         public build(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor, arg1: com.sun.xml.internal.bind.v2.schemagen.episode.Bindings): void
                     }
                     interface PluginImpl$OutlineAdaptor$OutlineType$BindingsBuilder {
                         public build(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor, arg1: com.sun.xml.internal.bind.v2.schemagen.episode.Bindings): void
                     }
                     class PluginImpl$OutlineAdaptor$OutlineType extends java.lang.Enum<com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType> {
                         public static CLASS: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType
                         public static ENUM: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType
                         public static values(): com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType[]
                         valueOf<T>(...args: any[]): any
                         static access$800(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType): com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType$BindingsBuilder
                     }
                     class PluginImpl$OutlineAdaptor {
                         public constructor(arg0: com.sun.xml.internal.xsom.XSComponent, arg1: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor$OutlineType, arg2: java.lang.String, arg3: java.lang.String)
                         static access$000(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor): com.sun.xml.internal.xsom.XSComponent
                         static access$500(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor, arg1: com.sun.xml.internal.bind.v2.schemagen.episode.Bindings): void
                         static access$600(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor): java.lang.String
                         static access$900(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor): java.lang.String
                     }
                     class PluginImpl$PerSchemaOutlineAdaptors {
                         constructor(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$1)
                         static access$200(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$PerSchemaOutlineAdaptors, arg1: com.sun.tools.internal.xjc.addon.episode.PluginImpl$OutlineAdaptor): void
                         static access$300(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$PerSchemaOutlineAdaptors): java.util.Set
                         static access$400(arg0: com.sun.tools.internal.xjc.addon.episode.PluginImpl$PerSchemaOutlineAdaptors): java.util.List
                     }
                     class PluginImpl extends com.sun.tools.internal.xjc.Plugin {
                         public constructor()
                         public getOptionName(): java.lang.String
                         public getUsage(): java.lang.String
                         public parseArgument(arg0: com.sun.tools.internal.xjc.Options, arg1: java.lang.String[], arg2: int): int
                         public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
                         static access$700(): com.sun.xml.internal.xsom.visitor.XSFunction
                     }

                  }
                  namespace sync {
                     class SynchronizedMethodAddOn extends com.sun.tools.internal.xjc.Plugin {
                         public constructor()
                         public getOptionName(): java.lang.String
                         public getUsage(): java.lang.String
                         public parseArgument(arg0: com.sun.tools.internal.xjc.Options, arg1: java.lang.String[], arg2: int): int
                         public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
                     }

                  }
                  namespace locator {
                     class SourceLocationAddOn extends com.sun.tools.internal.xjc.Plugin {
                         public constructor()
                         public getOptionName(): java.lang.String
                         public getUsage(): java.lang.String
                         public parseArgument(arg0: com.sun.tools.internal.xjc.Options, arg1: java.lang.String[], arg2: int): int
                         public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
                     }

                  }
                  namespace code_injector {
                     class PluginImpl extends com.sun.tools.internal.xjc.Plugin {
                         public constructor()
                         public getOptionName(): java.lang.String
                         public getCustomizationURIs(): java.util.List<java.lang.String>
                         public isCustomizationTagName(arg0: java.lang.String, arg1: java.lang.String): boolean
                         public getUsage(): java.lang.String
                         public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
                     }
                     class Const {
                         public static NS: java.lang.String
                         public constructor()
                     }

                  }
                  namespace at_generated {
                     class PluginImpl extends com.sun.tools.internal.xjc.Plugin {
                         public constructor()
                         public getOptionName(): java.lang.String
                         public getUsage(): java.lang.String
                         public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
                     }

                  }
                  namespace accessors {
                     class PluginImpl extends com.sun.tools.internal.xjc.Plugin {
                         public constructor()
                         public getOptionName(): java.lang.String
                         public getUsage(): java.lang.String
                         public parseArgument(arg0: com.sun.tools.internal.xjc.Options, arg1: java.lang.String[], arg2: int): int
                         public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
                     }

                  }

               }
               namespace writer {
                  class SignatureWriter$1 implements java.util.Comparator<com.sun.codemodel.internal.JPackage> {
                      this$0: com.sun.tools.internal.xjc.writer.SignatureWriter
                      constructor(arg0: com.sun.tools.internal.xjc.writer.SignatureWriter)
                      compare<T>(...args: any[]): any
                  }
                  class SignatureWriter {
                      public static write(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: java.io.Writer): void
                  }

               }
               namespace outline {
                  interface Outline {
                      public getModel(): com.sun.tools.internal.xjc.model.Model
                      public getCodeModel(): com.sun.codemodel.internal.JCodeModel
                      public getField(arg0: com.sun.tools.internal.xjc.model.CPropertyInfo): com.sun.tools.internal.xjc.outline.FieldOutline
                      public getPackageContext(arg0: com.sun.codemodel.internal.JPackage): com.sun.tools.internal.xjc.outline.PackageOutline
                      public getClasses(): java.util.Collection<com.sun.tools.internal.xjc.outline.ClassOutline>
                      public getClazz(arg0: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.outline.ClassOutline
                      public getElement(arg0: com.sun.tools.internal.xjc.model.CElementInfo): com.sun.tools.internal.xjc.outline.ElementOutline
                      public getEnum(arg0: com.sun.tools.internal.xjc.model.CEnumLeafInfo): com.sun.tools.internal.xjc.outline.EnumOutline
                      public getEnums(): java.util.Collection<com.sun.tools.internal.xjc.outline.EnumOutline>
                      public getAllPackageContexts(): java.lang.Iterable<com.sun.tools.internal.xjc.outline.PackageOutline>
                      public getClassFactory(): com.sun.tools.internal.xjc.util.CodeModelClassFactory
                      public getErrorReceiver(): com.sun.tools.internal.xjc.ErrorReceiver
                      public getContainer(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JClassContainer
                      public resolve(arg0: com.sun.tools.internal.xjc.model.CTypeRef, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                      public addRuntime(arg0: java.lang.Class): com.sun.codemodel.internal.JClass
                  }
                  abstract class ClassOutline {
                      public target: com.sun.tools.internal.xjc.model.CClassInfo
                      public ref: com.sun.codemodel.internal.JDefinedClass
                      public implClass: com.sun.codemodel.internal.JDefinedClass
                      public implRef: com.sun.codemodel.internal.JClass
                      public parent(): com.sun.tools.internal.xjc.outline.Outline
                      public _package(): com.sun.tools.internal.xjc.outline.PackageOutline
                      protected constructor(arg0: com.sun.tools.internal.xjc.model.CClassInfo, arg1: com.sun.codemodel.internal.JDefinedClass, arg2: com.sun.codemodel.internal.JClass, arg3: com.sun.codemodel.internal.JDefinedClass)
                      public getDeclaredFields(): com.sun.tools.internal.xjc.outline.FieldOutline[]
                      public getSuperClass(): com.sun.tools.internal.xjc.outline.ClassOutline
                  }
                  interface FieldOutline {
                      public parent(): com.sun.tools.internal.xjc.outline.ClassOutline
                      public getPropertyInfo(): com.sun.tools.internal.xjc.model.CPropertyInfo
                      public getRawType(): com.sun.codemodel.internal.JType
                      public create(arg0: com.sun.codemodel.internal.JExpression): com.sun.tools.internal.xjc.outline.FieldAccessor
                  }
                  interface PackageOutline {
                      public _package(): com.sun.codemodel.internal.JPackage
                      public objectFactory(): com.sun.codemodel.internal.JDefinedClass
                      public objectFactoryGenerator(): com.sun.tools.internal.xjc.generator.bean.ObjectFactoryGenerator
                      public getClasses(): java.util.Set<com.sun.tools.internal.xjc.outline.ClassOutline>
                      public getMostUsedNamespaceURI(): java.lang.String
                      public getElementFormDefault(): javax.xml.bind.annotation.XmlNsForm
                      public getAttributeFormDefault(): javax.xml.bind.annotation.XmlNsForm
                  }
                  abstract class ElementOutline {
                      public target: com.sun.tools.internal.xjc.model.CElementInfo
                      public implClass: com.sun.codemodel.internal.JDefinedClass
                      public parent(): com.sun.tools.internal.xjc.outline.Outline
                      public _package(): com.sun.tools.internal.xjc.outline.PackageOutline
                      protected constructor(arg0: com.sun.tools.internal.xjc.model.CElementInfo, arg1: com.sun.codemodel.internal.JDefinedClass)
                  }
                  abstract class EnumOutline {
                      public target: com.sun.tools.internal.xjc.model.CEnumLeafInfo
                      public clazz: com.sun.codemodel.internal.JDefinedClass
                      public constants: java.util.List<com.sun.tools.internal.xjc.outline.EnumConstantOutline>
                      public _package(): com.sun.tools.internal.xjc.outline.PackageOutline
                      public parent(): com.sun.tools.internal.xjc.outline.Outline
                      protected constructor(arg0: com.sun.tools.internal.xjc.model.CEnumLeafInfo, arg1: com.sun.codemodel.internal.JDefinedClass)
                  }
                  class Aspect extends java.lang.Enum<com.sun.tools.internal.xjc.outline.Aspect> {
                      public static EXPOSED: com.sun.tools.internal.xjc.outline.Aspect
                      public static IMPLEMENTATION: com.sun.tools.internal.xjc.outline.Aspect
                      public static values(): com.sun.tools.internal.xjc.outline.Aspect[]
                      valueOf<T>(...args: any[]): any
                  }
                  interface FieldAccessor {
                      public toRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: com.sun.codemodel.internal.JVar): void
                      public fromRawValue(arg0: com.sun.codemodel.internal.JBlock, arg1: java.lang.String, arg2: com.sun.codemodel.internal.JExpression): void
                      public unsetValues(arg0: com.sun.codemodel.internal.JBlock): void
                      public hasSetValue(): com.sun.codemodel.internal.JExpression
                      public owner(): com.sun.tools.internal.xjc.outline.FieldOutline
                      public getPropertyInfo(): com.sun.tools.internal.xjc.model.CPropertyInfo
                  }
                  abstract class EnumConstantOutline {
                      public target: com.sun.tools.internal.xjc.model.CEnumConstant
                      public constRef: com.sun.codemodel.internal.JEnumConstant
                      protected constructor(arg0: com.sun.tools.internal.xjc.model.CEnumConstant, arg1: com.sun.codemodel.internal.JEnumConstant)
                  }

               }
               namespace model {
                  class Model$1 implements java.lang.Iterable<com.sun.tools.internal.xjc.model.CElementInfo> {
                      this$0: com.sun.tools.internal.xjc.model.Model
                      constructor(arg0: com.sun.tools.internal.xjc.model.Model)
                      public iterator(): java.util.Iterator<com.sun.tools.internal.xjc.model.CElementInfo>
                  }
                  class Model implements com.sun.xml.internal.bind.v2.model.core.TypeInfoSet<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass, java.lang.Void, java.lang.Void> , com.sun.tools.internal.xjc.model.CCustomizable {
                      customizations: com.sun.tools.internal.xjc.model.CCustomizations
                      public schemaComponent: com.sun.xml.internal.xsom.XSSchemaSet
                      public codeModel: com.sun.codemodel.internal.JCodeModel
                      public options: com.sun.tools.internal.xjc.Options
                      public serializable: boolean
                      public serialVersionUID: java.lang.Long
                      public rootClass: com.sun.codemodel.internal.JClass
                      public rootInterface: com.sun.codemodel.internal.JClass
                      public strategy: com.sun.tools.internal.xjc.generator.bean.ImplStructureStrategy
                      allocator: com.sun.tools.internal.xjc.model.ClassNameAllocatorWrapper
                      public defaultSymbolSpace: com.sun.tools.internal.xjc.model.SymbolSpace
                      static EMPTY_LOCATOR: org.xml.sax.Locator
                      static $assertionsDisabled: boolean
                      public constructor(arg0: com.sun.tools.internal.xjc.Options, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.xml.internal.bind.api.impl.NameConverter, arg3: com.sun.tools.internal.xjc.api.ClassNameAllocator, arg4: com.sun.xml.internal.xsom.XSSchemaSet)
                      public setNameConverter(arg0: com.sun.xml.internal.bind.api.impl.NameConverter): void
                      public getNameConverter(): com.sun.xml.internal.bind.api.impl.NameConverter
                      public isPackageLevelAnnotations(): boolean
                      public setPackageLevelAnnotations(arg0: boolean): void
                      public getSymbolSpace(arg0: java.lang.String): com.sun.tools.internal.xjc.model.SymbolSpace
                      public generateCode(arg0: com.sun.tools.internal.xjc.Options, arg1: com.sun.tools.internal.xjc.ErrorReceiver): com.sun.tools.internal.xjc.outline.Outline
                      public createTopLevelBindings(): java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.model.CClassInfo>
                      public getNavigator(): com.sun.xml.internal.bind.v2.model.nav.Navigator<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass, java.lang.Void, java.lang.Void>
                      getTypeInfo<T>(...args: any[]): any
                      getAnyTypeInfo<T>(...args: any[]): any
                      public beans(): java.util.Map<com.sun.tools.internal.xjc.model.nav.NClass, com.sun.tools.internal.xjc.model.CClassInfo>
                      public enums(): java.util.Map<com.sun.tools.internal.xjc.model.nav.NClass, com.sun.tools.internal.xjc.model.CEnumLeafInfo>
                      public typeUses(): java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.model.TypeUse>
                      public arrays(): java.util.Map<com.sun.tools.internal.xjc.model.nav.NType, any extends com.sun.tools.internal.xjc.model.CArrayInfo>
                      public builtins(): java.util.Map<com.sun.tools.internal.xjc.model.nav.NType, any extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo>
                      getClassInfo<T>(...args: any[]): any
                      getElementInfo<T>(...args: any[]): any
                      getElementMappings<T>(...args: any[]): any
                      public getAllElements(): java.lang.Iterable<com.sun.tools.internal.xjc.model.CElementInfo>
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                      public getLocator(): org.xml.sax.Locator
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getXmlNs(arg0: java.lang.String): java.util.Map<java.lang.String, java.lang.String>
                      public getSchemaLocations(): java.util.Map<java.lang.String, java.lang.String>
                      public getElementFormDefault(arg0: java.lang.String): javax.xml.bind.annotation.XmlNsForm
                      public getAttributeFormDefault(arg0: java.lang.String): javax.xml.bind.annotation.XmlNsForm
                      public dump(arg0: javax.xml.transform.Result): void
                      add<T>(...args: any[]): any
                      public getPackage(arg0: com.sun.codemodel.internal.JPackage): com.sun.tools.internal.xjc.model.CClassInfoParent$Package
                      static access$000(arg0: com.sun.tools.internal.xjc.model.Model): java.util.Map
                  }
                  namespace nav {
                     interface NType {
                         public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                         public isBoxedType(): boolean
                         public fullName(): java.lang.String
                     }
                     interface NClass extends com.sun.tools.internal.xjc.model.nav.NType {
                         toType<T>(...args: any[]): any
                         public isAbstract(): boolean
                     }
                     class Utils$1 implements java.security.PrivilegedAction<java.lang.reflect.Method> {
                         val$refNav: java.lang.Class
                         constructor(arg0: java.lang.Class)
                         run<T>(...args: any[]): any
                     }
                     class Utils {
                         static REFLECTION_NAVIGATOR: com.sun.xml.internal.bind.v2.model.nav.Navigator<java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Field, java.lang.reflect.Method>
                     }
                     class NavigatorImpl$1 implements com.sun.xml.internal.bind.v2.runtime.Location {
                         val$c: com.sun.tools.internal.xjc.model.nav.NClass
                         this$0: com.sun.tools.internal.xjc.model.nav.NavigatorImpl
                         constructor(arg0: com.sun.tools.internal.xjc.model.nav.NavigatorImpl, arg1: com.sun.tools.internal.xjc.model.nav.NClass)
                         toString<T>(...args: any[]): any
                     }
                     class NavigatorImpl implements com.sun.xml.internal.bind.v2.model.nav.Navigator<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass, java.lang.Void, java.lang.Void> {
                         public static theInstance: com.sun.tools.internal.xjc.model.nav.NavigatorImpl
                         getSuperClass<T>(...args: any[]): any
                         getBaseClass<T>(...args: any[]): any
                         getClassName<T>(...args: any[]): any
                         getTypeName<T>(...args: any[]): any
                         getClassShortName<T>(...args: any[]): any
                         getDeclaredFields<T>(...args: any[]): any
                         getDeclaredField<T>(...args: any[]): any
                         getDeclaredMethods<T>(...args: any[]): any
                         getDeclaringClassForField<T>(...args: any[]): any
                         getDeclaringClassForMethod<T>(...args: any[]): any
                         getFieldType<T>(...args: any[]): any
                         getFieldName<T>(...args: any[]): any
                         getMethodName<T>(...args: any[]): any
                         getReturnType<T>(...args: any[]): any
                         getMethodParameters<T>(...args: any[]): any
                         isStaticMethod<T>(...args: any[]): any
                         isFinalMethod<T>(...args: any[]): any
                         isSubClassOf<T>(...args: any[]): any
                         ref<T>(...args: any[]): any
                         use<T>(...args: any[]): any
                         asDecl<T>(...args: any[]): any
                         isArray<T>(...args: any[]): any
                         isArrayButNotByteArray<T>(...args: any[]): any
                         getComponentType<T>(...args: any[]): any
                         getTypeArgument<T>(...args: any[]): any
                         isParameterizedType<T>(...args: any[]): any
                         isPrimitive<T>(...args: any[]): any
                         getPrimitive<T>(...args: any[]): any
                         create<T>(...args: any[]): any
                         createParameterizedType<T>(...args: any[]): any
                         getClassLocation<T>(...args: any[]): any
                         getFieldLocation<T>(...args: any[]): any
                         getMethodLocation<T>(...args: any[]): any
                         hasDefaultConstructor<T>(...args: any[]): any
                         isStaticField<T>(...args: any[]): any
                         isPublicMethod<T>(...args: any[]): any
                         isPublicField<T>(...args: any[]): any
                         isEnum<T>(...args: any[]): any
                         erasure<T>(...args: any[]): any
                         isAbstract<T>(...args: any[]): any
                         isFinal<T>(...args: any[]): any
                         getEnumConstants<T>(...args: any[]): any
                         getVoidType<T>(...args: any[]): any
                         getPackageName<T>(...args: any[]): any
                         loadObjectFactory<T>(...args: any[]): any
                         isBridgeMethod<T>(...args: any[]): any
                         isOverriding<T>(...args: any[]): any
                         isInterface<T>(...args: any[]): any
                         isTransient<T>(...args: any[]): any
                         isInnerClass<T>(...args: any[]): any
                         isSameType<T>(...args: any[]): any
                     }
                     class NParameterizedType implements com.sun.tools.internal.xjc.model.nav.NClass {
                         rawType: com.sun.tools.internal.xjc.model.nav.NClass
                         args: com.sun.tools.internal.xjc.model.nav.NType[]
                         static $assertionsDisabled: boolean
                         constructor(arg0: com.sun.tools.internal.xjc.model.nav.NClass, arg1: com.sun.tools.internal.xjc.model.nav.NType[])
                         toType<T>(...args: any[]): any
                         public isAbstract(): boolean
                         public isBoxedType(): boolean
                         public fullName(): java.lang.String
                     }
                     class NClassByJClass implements com.sun.tools.internal.xjc.model.nav.NClass {
                         clazz: com.sun.codemodel.internal.JClass
                         constructor(arg0: com.sun.codemodel.internal.JClass)
                         toType<T>(...args: any[]): any
                         public isAbstract(): boolean
                         public isBoxedType(): boolean
                         public fullName(): java.lang.String
                     }
                     class EagerNType implements com.sun.tools.internal.xjc.model.nav.NType {
                         t: java.lang.reflect.Type
                         static $assertionsDisabled: boolean
                         public constructor(arg0: java.lang.reflect.Type)
                         public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                         public equals(arg0: java.lang.Object): boolean
                         public isBoxedType(): boolean
                         public hashCode(): int
                         public fullName(): java.lang.String
                     }
                     class EagerNClass extends com.sun.tools.internal.xjc.model.nav.EagerNType implements com.sun.tools.internal.xjc.model.nav.NClass {
                         c: java.lang.Class
                         public constructor(arg0: java.lang.Class)
                         public isBoxedType(): boolean
                         toType<T>(...args: any[]): any
                         public isAbstract(): boolean
                         public fullName(): java.lang.String
                         public hashCode(): int
                         public equals(arg0: java.lang.Object): boolean
                     }

                  }
                  interface CCustomizable {
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getLocator(): org.xml.sax.Locator
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                  }
                  abstract class CPropertyInfo implements com.sun.xml.internal.bind.v2.model.core.PropertyInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.CCustomizable {
                      public locator: org.xml.sax.Locator
                      public baseType: com.sun.codemodel.internal.JType
                      public javadoc: java.lang.String
                      inlineBinaryData<T>(...args: any[]): any
                      public realization: com.sun.tools.internal.xjc.generator.bean.field.FieldRenderer
                      public defaultValue: com.sun.tools.internal.xjc.model.CDefaultValue
                      static $assertionsDisabled: boolean
                      protected constructor(arg0: java.lang.String, arg1: boolean, arg2: com.sun.xml.internal.xsom.XSComponent, arg3: com.sun.tools.internal.xjc.model.CCustomizations, arg4: org.xml.sax.Locator)
                      setParent(arg0: com.sun.tools.internal.xjc.model.CClassInfo): void
                      parent<T>(...args: any[]): any
                      public getLocator(): org.xml.sax.Locator
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                      getAdapter<T>(...args: any[]): any
                      getName<T>(...args: any[]): any
                      public setName(arg0: boolean, arg1: java.lang.String): void
                      public displayName(): java.lang.String
                      public isCollection(): boolean
                      public ref(): java.util.Collection<com.sun.tools.internal.xjc.model.CTypeInfo>
                      public isUnboxable(): boolean
                      public isOptionalPrimitive(): boolean
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public accept<V>(arg0: com.sun.tools.internal.xjc.model.CPropertyVisitor<V>): V
                      protected static needsExplicitTypeName(arg0: com.sun.tools.internal.xjc.model.TypeUse, arg1: javax.xml.namespace.QName): boolean
                      public collectElementNames(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.model.CPropertyInfo>): javax.xml.namespace.QName
                      public readAnnotation<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A
                      public hasAnnotation(arg0: java.lang.Class<java.lang.annotation.Annotation>): boolean
                  }
                  class CClassInfo$1 implements com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<java.lang.String> {
                      constructor()
                      onBean<T>(...args: any[]): any
                      onElement<T>(...args: any[]): any
                      onPackage<T>(...args: any[]): any
                  }
                  class CClassInfo$2 implements java.util.Iterator<com.sun.tools.internal.xjc.model.CClassInfo> {
                      cur: com.sun.tools.internal.xjc.model.CClassInfo
                      this$0: com.sun.tools.internal.xjc.model.CClassInfo
                      constructor(arg0: com.sun.tools.internal.xjc.model.CClassInfo)
                      public hasNext(): boolean
                      next<T>(...args: any[]): any
                      public remove(): void
                  }
                  class CClassInfo$3 {
                      static $SwitchMap$com$sun$tools$internal$xjc$outline$Aspect: int[]
                  }
                  class CClassInfo extends com.sun.tools.internal.xjc.model.AbstractCElement implements com.sun.xml.internal.bind.v2.model.core.ClassInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.CClassInfoParent , com.sun.tools.internal.xjc.model.CClass , com.sun.tools.internal.xjc.model.nav.NClass {
                      public javadoc: java.lang.String
                      public shortName: java.lang.String
                      public model: com.sun.tools.internal.xjc.model.Model
                      static $assertionsDisabled: boolean
                      constructor(...args: any[])
                      hasAttributeWildcard<T>(...args: any[]): any
                      public hasSubClasses(): boolean
                      public declaresAttributeWildcard(): boolean
                      public inheritsAttributeWildcard(): boolean
                      getClazz<T>(...args: any[]): any
                      getScope<T>(...args: any[]): any
                      public getName(): java.lang.String
                      public getSqueezedName(): java.lang.String
                      public getProperties(): java.util.List<com.sun.tools.internal.xjc.model.CPropertyInfo>
                      public hasValueProperty(): boolean
                      getProperty<T>(...args: any[]): any
                      public hasProperties(): boolean
                      public isElement(): boolean
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public asElement(): com.sun.xml.internal.bind.v2.model.core.Element<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass>
                      public isOrdered(): boolean
                      public isFinal(): boolean
                      public setOrdered(arg0: boolean): void
                      public getElementName(): javax.xml.namespace.QName
                      public getTypeName(): javax.xml.namespace.QName
                      public isSimpleType(): boolean
                      public fullName(): java.lang.String
                      public parent(): com.sun.tools.internal.xjc.model.CClassInfoParent
                      public setUserSpecifiedImplClass(arg0: java.lang.String): void
                      public getUserSpecifiedImplClass(): java.lang.String
                      public addProperty(arg0: com.sun.tools.internal.xjc.model.CPropertyInfo): void
                      public setBaseClass(arg0: com.sun.tools.internal.xjc.model.CClass): void
                      getBaseClass<T>(...args: any[]): any
                      public getRefBaseClass(): com.sun.tools.internal.xjc.model.CClassRef
                      public listSubclasses(): java.util.Iterator<com.sun.tools.internal.xjc.model.CClassInfo>
                      getSubstitutionHead<T>(...args: any[]): any
                      public _implements(arg0: com.sun.codemodel.internal.JClass): void
                      public addConstructor(...arg0: java.lang.String[]): void
                      public getConstructors(): java.util.Collection<com.sun.tools.internal.xjc.model.Constructor>
                      public accept<T>(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<T>): T
                      public getOwnerPackage(): com.sun.codemodel.internal.JPackage
                      getType<T>(...args: any[]): any
                      toType<T>(...args: any[]): any
                      public isBoxedType(): boolean
                      toString<T>(...args: any[]): any
                      public setAbstract(): void
                      public isAbstract(): boolean
                      public getLocator(): org.xml.sax.Locator
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getExpectedMimeType(): javax.activation.MimeType
                      static access$000(arg0: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.model.CClassInfoParent
                      static access$100(arg0: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.model.CClassInfo
                      static access$200(arg0: com.sun.tools.internal.xjc.model.CClassInfo): com.sun.tools.internal.xjc.model.CClassInfo
                  }
                  abstract class AbstractCElement extends com.sun.tools.internal.xjc.model.AbstractCTypeInfoImpl implements com.sun.tools.internal.xjc.model.CElement {
                      protected constructor(arg0: com.sun.tools.internal.xjc.model.Model, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: org.xml.sax.Locator, arg3: com.sun.tools.internal.xjc.model.CCustomizations)
                      public getLocator(): org.xml.sax.Locator
                      public isAbstract(): boolean
                      public setAbstract(): void
                  }
                  abstract class AbstractCTypeInfoImpl implements com.sun.tools.internal.xjc.model.CTypeInfo {
                      protected constructor(arg0: com.sun.tools.internal.xjc.model.Model, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: com.sun.tools.internal.xjc.model.CCustomizations)
                      public isCollection(): boolean
                      public getAdapterUse(): com.sun.tools.internal.xjc.model.CAdapter
                      public idUse(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                      public canBeReferencedByIDREF(): boolean
                      public getExpectedMimeType(): javax.activation.MimeType
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public getUpstream(): com.sun.xml.internal.bind.v2.model.annotation.Locatable
                      public getLocation(): com.sun.xml.internal.bind.v2.runtime.Location
                  }
                  interface CTypeInfo extends com.sun.xml.internal.bind.v2.model.core.TypeInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.CCustomizable {
                      public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                  }
                  interface CElement extends com.sun.tools.internal.xjc.model.CTypeInfo , com.sun.xml.internal.bind.v2.model.core.Element<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      public setAbstract(): void
                      public isAbstract(): boolean
                  }
                  interface CClassInfoParent$Visitor<T> {
                      public onBean(arg0: com.sun.tools.internal.xjc.model.CClassInfo): T
                      public onPackage(arg0: com.sun.codemodel.internal.JPackage): T
                      public onElement(arg0: com.sun.tools.internal.xjc.model.CElementInfo): T
                  }
                  class CClassInfoParent$Package implements com.sun.tools.internal.xjc.model.CClassInfoParent {
                      public pkg: com.sun.codemodel.internal.JPackage
                      public constructor(arg0: com.sun.codemodel.internal.JPackage)
                      public fullName(): java.lang.String
                      public accept<T>(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<T>): T
                      public getOwnerPackage(): com.sun.codemodel.internal.JPackage
                  }
                  interface CClassInfoParent {
                      public fullName(): java.lang.String
                      public accept<T>(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<T>): T
                      public getOwnerPackage(): com.sun.codemodel.internal.JPackage
                  }
                  interface CClass extends com.sun.tools.internal.xjc.model.CNonElement , com.sun.tools.internal.xjc.model.CElement {
                  }
                  interface CNonElement extends com.sun.xml.internal.bind.v2.model.core.NonElement<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.TypeUse , com.sun.tools.internal.xjc.model.CTypeInfo {
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public isCollection(): boolean
                      public getAdapterUse(): com.sun.tools.internal.xjc.model.CAdapter
                  }
                  interface TypeUse {
                      public isCollection(): boolean
                      public getAdapterUse(): com.sun.tools.internal.xjc.model.CAdapter
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public idUse(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getExpectedMimeType(): javax.activation.MimeType
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CElementPropertyInfo$1 extends java.util.AbstractList<com.sun.tools.internal.xjc.model.CNonElement> {
                      this$0: com.sun.tools.internal.xjc.model.CElementPropertyInfo
                      constructor(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo)
                      get<T>(...args: any[]): any
                      public size(): int
                  }
                  class CElementPropertyInfo$CollectionMode extends java.lang.Enum<com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode> {
                      public static NOT_REPEATED: com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode
                      public static REPEATED_ELEMENT: com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode
                      public static REPEATED_VALUE: com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode
                      public static values(): com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode[]
                      valueOf<T>(...args: any[]): any
                      public isRepeated(): boolean
                      static access$000(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode): boolean
                      static access$100(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode): boolean
                  }
                  class CElementPropertyInfo extends com.sun.tools.internal.xjc.model.CPropertyInfo implements com.sun.xml.internal.bind.v2.model.core.ElementPropertyInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      static $assertionsDisabled: boolean
                      public constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.xjc.model.CElementPropertyInfo$CollectionMode, arg2: com.sun.xml.internal.bind.v2.model.core.ID, arg3: javax.activation.MimeType, arg4: com.sun.xml.internal.xsom.XSComponent, arg5: com.sun.tools.internal.xjc.model.CCustomizations, arg6: org.xml.sax.Locator, arg7: boolean)
                      public id(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getTypes(): java.util.List<com.sun.tools.internal.xjc.model.CTypeRef>
                      ref<T>(...args: any[]): any
                      public getSchemaType(): javax.xml.namespace.QName
                      public getXmlName(): javax.xml.namespace.QName
                      public isCollectionRequired(): boolean
                      public isCollectionNillable(): boolean
                      public isRequired(): boolean
                      public isValueList(): boolean
                      public isUnboxable(): boolean
                      public isOptionalPrimitive(): boolean
                      public accept<V>(arg0: com.sun.tools.internal.xjc.model.CPropertyVisitor<V>): V
                      getAdapter<T>(...args: any[]): any
                      public setAdapter(arg0: com.sun.tools.internal.xjc.model.CAdapter): void
                      public kind(): com.sun.xml.internal.bind.v2.model.core.PropertyKind
                      public getExpectedMimeType(): javax.activation.MimeType
                      public collectElementNames(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.model.CPropertyInfo>): javax.xml.namespace.QName
                  }
                  class CElementInfo extends com.sun.tools.internal.xjc.model.AbstractCElement implements com.sun.xml.internal.bind.v2.model.core.ElementInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.nav.NType , com.sun.tools.internal.xjc.model.CClassInfoParent {
                      public parent: com.sun.tools.internal.xjc.model.CClassInfoParent
                      static $assertionsDisabled: boolean
                      constructor(...args: any[])
                      public initContentType(arg0: com.sun.tools.internal.xjc.model.TypeUse, arg1: com.sun.xml.internal.xsom.XSElementDecl, arg2: com.sun.xml.internal.xsom.XmlString): void
                      public getDefaultValue(): java.lang.String
                      public _package(): com.sun.codemodel.internal.JPackage
                      getContentType<T>(...args: any[]): any
                      getContentInMemoryType<T>(...args: any[]): any
                      getProperty<T>(...args: any[]): any
                      getScope<T>(...args: any[]): any
                      getType<T>(...args: any[]): any
                      public getElementName(): javax.xml.namespace.QName
                      public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                      public getSqueezedName(): java.lang.String
                      getSubstitutionHead<T>(...args: any[]): any
                      public getSubstitutionMembers(): java.util.Collection<com.sun.tools.internal.xjc.model.CElementInfo>
                      public setSubstitutionHead(arg0: com.sun.tools.internal.xjc.model.CElementInfo): void
                      public isBoxedType(): boolean
                      public fullName(): java.lang.String
                      public accept<T>(arg0: com.sun.tools.internal.xjc.model.CClassInfoParent$Visitor<T>): T
                      public getOwnerPackage(): com.sun.codemodel.internal.JPackage
                      public shortName(): java.lang.String
                      public hasClass(): boolean
                      public setAbstract(): void
                      public isAbstract(): boolean
                      public getLocator(): org.xml.sax.Locator
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getExpectedMimeType(): javax.activation.MimeType
                  }
                  class CEnumLeafInfo implements com.sun.xml.internal.bind.v2.model.core.EnumLeafInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.nav.NClass , com.sun.tools.internal.xjc.model.CNonElement {
                      public model: com.sun.tools.internal.xjc.model.Model
                      public parent: com.sun.tools.internal.xjc.model.CClassInfoParent
                      public shortName: java.lang.String
                      public base: com.sun.tools.internal.xjc.model.CNonElement
                      public members: java.util.Collection<com.sun.tools.internal.xjc.model.CEnumConstant>
                      public javadoc: java.lang.String
                      public constructor(arg0: com.sun.tools.internal.xjc.model.Model, arg1: javax.xml.namespace.QName, arg2: com.sun.tools.internal.xjc.model.CClassInfoParent, arg3: java.lang.String, arg4: com.sun.tools.internal.xjc.model.CNonElement, arg5: java.util.Collection<com.sun.tools.internal.xjc.model.CEnumConstant>, arg6: com.sun.xml.internal.xsom.XSComponent, arg7: com.sun.tools.internal.xjc.model.CCustomizations, arg8: org.xml.sax.Locator)
                      public getLocator(): org.xml.sax.Locator
                      public getTypeName(): javax.xml.namespace.QName
                      getType<T>(...args: any[]): any
                      public canBeReferencedByIDREF(): boolean
                      public isElement(): boolean
                      public getElementName(): javax.xml.namespace.QName
                      public asElement(): com.sun.xml.internal.bind.v2.model.core.Element<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass>
                      getClazz<T>(...args: any[]): any
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                      toType<T>(...args: any[]): any
                      public isAbstract(): boolean
                      public isBoxedType(): boolean
                      public fullName(): java.lang.String
                      public isPrimitive(): boolean
                      public isSimpleType(): boolean
                      public needsValueField(): boolean
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public isCollection(): boolean
                      public getAdapterUse(): com.sun.tools.internal.xjc.model.CAdapter
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public idUse(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getExpectedMimeType(): javax.activation.MimeType
                      getConstants<T>(...args: any[]): any
                      public getBaseType(): com.sun.xml.internal.bind.v2.model.core.NonElement<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass>
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getUpstream(): com.sun.xml.internal.bind.v2.model.annotation.Locatable
                      public getLocation(): com.sun.xml.internal.bind.v2.runtime.Location
                  }
                  class CTypeRef implements com.sun.xml.internal.bind.v2.model.core.TypeRef<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      typeName: javax.xml.namespace.QName
                      public defaultValue: com.sun.xml.internal.xsom.XmlString
                      static $assertionsDisabled: boolean
                      constructor(...args: any[])
                      public getTypeName(): javax.xml.namespace.QName
                      public static getSimpleTypeName(arg0: com.sun.xml.internal.xsom.XSElementDecl): javax.xml.namespace.QName
                      getTarget<T>(...args: any[]): any
                      public getTagName(): javax.xml.namespace.QName
                      public isNillable(): boolean
                      public getDefaultValue(): java.lang.String
                      public isLeaf(): boolean
                      public getSource(): com.sun.xml.internal.bind.v2.model.core.PropertyInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass>
                  }
                  class CCustomizations extends java.util.ArrayList<com.sun.tools.internal.xjc.model.CPluginCustomization> {
                      next: com.sun.tools.internal.xjc.model.CCustomizations
                      public static EMPTY: com.sun.tools.internal.xjc.model.CCustomizations
                      static $assertionsDisabled: boolean
                      constructor(...args: any[])
                      setParent(arg0: com.sun.tools.internal.xjc.model.Model, arg1: com.sun.tools.internal.xjc.model.CCustomizable): void
                      public getOwner(): com.sun.tools.internal.xjc.model.CCustomizable
                      find<T>(...args: any[]): any
                      public static merge(arg0: com.sun.tools.internal.xjc.model.CCustomizations, arg1: com.sun.tools.internal.xjc.model.CCustomizations): com.sun.tools.internal.xjc.model.CCustomizations
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                  }
                  class CPluginCustomization {
                      public element: org.w3c.dom.Element
                      public locator: org.xml.sax.Locator
                      public markAsAcknowledged(): void
                      public constructor(arg0: org.w3c.dom.Element, arg1: org.xml.sax.Locator)
                      public isAcknowledged(): boolean
                  }
                  class ClassNameAllocatorWrapper$1 implements com.sun.tools.internal.xjc.api.ClassNameAllocator {
                      this$0: com.sun.tools.internal.xjc.model.ClassNameAllocatorWrapper
                      constructor(arg0: com.sun.tools.internal.xjc.model.ClassNameAllocatorWrapper)
                      public assignClassName(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                  }
                  class ClassNameAllocatorWrapper implements com.sun.tools.internal.xjc.api.ClassNameAllocator {
                      constructor(arg0: com.sun.tools.internal.xjc.api.ClassNameAllocator)
                      assignClassName<T>(...args: any[]): any
                  }
                  class SymbolSpace {
                      public constructor(arg0: com.sun.codemodel.internal.JCodeModel)
                      public getType(): com.sun.codemodel.internal.JType
                      public setType(arg0: com.sun.codemodel.internal.JType): void
                      toString<T>(...args: any[]): any
                  }
                  abstract class CBuiltinLeafInfo$Builtin extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo {
                      constructor(...args: any[])
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getType(): java.lang.Object
                  }
                  class CBuiltinLeafInfo$NoConstantBuiltin extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      public constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$1 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$2 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$3 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$4 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$5 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$6 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$7 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$8 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$9 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$10 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$11 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class CBuiltinLeafInfo$12 extends com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$Builtin {
                      constructor(arg0: java.lang.Class, arg1: java.lang.String)
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  abstract class CBuiltinLeafInfo implements com.sun.tools.internal.xjc.model.CNonElement , com.sun.xml.internal.bind.v2.model.core.BuiltinLeafInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.xml.internal.bind.v2.model.core.LeafInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.xml.internal.bind.v2.runtime.Location {
                      public static LEAVES: java.util.Map<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.CBuiltinLeafInfo>
                      public static ANYTYPE: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static STRING: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static BOOLEAN: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static INT: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static LONG: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static BYTE: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static SHORT: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static FLOAT: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static DOUBLE: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static QNAME: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static CALENDAR: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static DURATION: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static BIG_INTEGER: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static BIG_DECIMAL: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static BASE64_BYTE_ARRAY: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static DATA_HANDLER: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static IMAGE: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static XML_SOURCE: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo
                      public static HEXBIN_BYTE_ARRAY: com.sun.tools.internal.xjc.model.TypeUse
                      public static TOKEN: com.sun.tools.internal.xjc.model.TypeUse
                      public static NORMALIZED_STRING: com.sun.tools.internal.xjc.model.TypeUse
                      public static ID: com.sun.tools.internal.xjc.model.TypeUse
                      public static BOOLEAN_ZERO_OR_ONE: com.sun.tools.internal.xjc.model.TypeUse
                      public static IDREF: com.sun.tools.internal.xjc.model.TypeUse
                      public static STRING_LIST: com.sun.tools.internal.xjc.model.TypeUse
                      public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                      public isCollection(): boolean
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public idUse(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getExpectedMimeType(): javax.activation.MimeType
                      public getAdapterUse(): com.sun.tools.internal.xjc.model.CAdapter
                      public getLocator(): org.xml.sax.Locator
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                      public makeCollection(): com.sun.tools.internal.xjc.model.TypeUse
                      public makeAdapted(arg0: java.lang.Class<javax.xml.bind.annotation.adapters.XmlAdapter>, arg1: boolean): com.sun.tools.internal.xjc.model.TypeUse
                      public makeMimeTyped(arg0: javax.activation.MimeType): com.sun.tools.internal.xjc.model.TypeUse
                      public isElement(): boolean
                      public getElementName(): javax.xml.namespace.QName
                      public asElement(): com.sun.xml.internal.bind.v2.model.core.Element<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass>
                      getType<T>(...args: any[]): any
                      public getTypeNames(): javax.xml.namespace.QName[]
                      public canBeReferencedByIDREF(): boolean
                      public getTypeName(): javax.xml.namespace.QName
                      public getUpstream(): com.sun.xml.internal.bind.v2.model.annotation.Locatable
                      public getLocation(): com.sun.xml.internal.bind.v2.runtime.Location
                      public isSimpleType(): boolean
                      constructor(arg0: com.sun.tools.internal.xjc.model.nav.NType, arg1: com.sun.xml.internal.bind.v2.model.core.ID, arg2: javax.xml.namespace.QName[], arg3: com.sun.tools.internal.xjc.model.CBuiltinLeafInfo$1)
                  }
                  class CArrayInfo extends com.sun.tools.internal.xjc.model.AbstractCTypeInfoImpl implements com.sun.xml.internal.bind.v2.model.core.ArrayInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.CNonElement , com.sun.tools.internal.xjc.model.nav.NType {
                      static $assertionsDisabled: boolean
                      public constructor(arg0: com.sun.tools.internal.xjc.model.Model, arg1: com.sun.tools.internal.xjc.model.CNonElement, arg2: com.sun.xml.internal.xsom.XSComponent, arg3: com.sun.tools.internal.xjc.model.CCustomizations)
                      getItemType<T>(...args: any[]): any
                      public getTypeName(): javax.xml.namespace.QName
                      public isSimpleType(): boolean
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                      getType<T>(...args: any[]): any
                      public isBoxedType(): boolean
                      public fullName(): java.lang.String
                      public getLocator(): org.xml.sax.Locator
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getExpectedMimeType(): javax.activation.MimeType
                  }
                  class CDefaultValue$1 extends com.sun.tools.internal.xjc.model.CDefaultValue {
                      val$typeUse: com.sun.tools.internal.xjc.model.TypeUse
                      val$defaultValue: com.sun.xml.internal.xsom.XmlString
                      constructor(arg0: com.sun.tools.internal.xjc.model.TypeUse, arg1: com.sun.xml.internal.xsom.XmlString)
                      public compute(arg0: com.sun.tools.internal.xjc.outline.Outline): com.sun.codemodel.internal.JExpression
                  }
                  abstract class CDefaultValue {
                      public constructor()
                      public compute(arg0: com.sun.tools.internal.xjc.outline.Outline): com.sun.codemodel.internal.JExpression
                      public static create(arg0: com.sun.tools.internal.xjc.model.TypeUse, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.tools.internal.xjc.model.CDefaultValue
                  }
                  class CAdapter$1 extends com.sun.tools.internal.xjc.model.nav.EagerNClass {
                      val$adapter: java.lang.Class
                      constructor(arg0: java.lang.Class, arg1: java.lang.Class)
                      toType<T>(...args: any[]): any
                      public fullName(): java.lang.String
                  }
                  class CAdapter extends com.sun.xml.internal.bind.v2.model.core.Adapter<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      constructor(...args: any[])
                      static getRef(arg0: java.lang.Class<javax.xml.bind.annotation.adapters.XmlAdapter>, arg1: boolean): com.sun.tools.internal.xjc.model.nav.NClass
                      public getAdapterClass(arg0: com.sun.tools.internal.xjc.outline.Outline): com.sun.codemodel.internal.JClass
                      public isWhitespaceAdapter(): boolean
                      public getAdapterIfKnown(): java.lang.Class<javax.xml.bind.annotation.adapters.XmlAdapter>
                  }
                  interface CPropertyVisitor<V> {
                      public onElement(arg0: com.sun.tools.internal.xjc.model.CElementPropertyInfo): V
                      public onAttribute(arg0: com.sun.tools.internal.xjc.model.CAttributePropertyInfo): V
                      public onValue(arg0: com.sun.tools.internal.xjc.model.CValuePropertyInfo): V
                      public onReference(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): V
                  }
                  class CClassRef extends com.sun.tools.internal.xjc.model.AbstractCElement implements com.sun.tools.internal.xjc.model.nav.NClass , com.sun.tools.internal.xjc.model.CClass {
                      static $assertionsDisabled: boolean
                      constructor(...args: any[])
                      public setAbstract(): void
                      public isAbstract(): boolean
                      getType<T>(...args: any[]): any
                      toType<T>(...args: any[]): any
                      public fullName(): java.lang.String
                      public getTypeName(): javax.xml.namespace.QName
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      getSubstitutionHead<T>(...args: any[]): any
                      getScope<T>(...args: any[]): any
                      public getElementName(): javax.xml.namespace.QName
                      public isBoxedType(): boolean
                      public isSimpleType(): boolean
                      public getLocator(): org.xml.sax.Locator
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getExpectedMimeType(): javax.activation.MimeType
                  }
                  class Constructor {
                      public fields: java.lang.String[]
                      public constructor(arg0: java.lang.String[])
                  }
                  class CEnumConstant implements com.sun.xml.internal.bind.v2.model.core.EnumConstant<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> , com.sun.tools.internal.xjc.model.CCustomizable {
                      public name: java.lang.String
                      public javadoc: java.lang.String
                      static $assertionsDisabled: boolean
                      public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.xml.internal.xsom.XSComponent, arg4: com.sun.tools.internal.xjc.model.CCustomizations, arg5: org.xml.sax.Locator)
                      getEnclosingClass<T>(...args: any[]): any
                      setParent(arg0: com.sun.tools.internal.xjc.model.CEnumLeafInfo): void
                      public getLexicalValue(): java.lang.String
                      public getName(): java.lang.String
                      public getSchemaComponent(): com.sun.xml.internal.xsom.XSComponent
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getLocator(): org.xml.sax.Locator
                  }
                  class CAttributePropertyInfo extends com.sun.tools.internal.xjc.model.CSingleTypePropertyInfo implements com.sun.xml.internal.bind.v2.model.core.AttributePropertyInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      public constructor(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: com.sun.tools.internal.xjc.model.CCustomizations, arg3: org.xml.sax.Locator, arg4: javax.xml.namespace.QName, arg5: com.sun.tools.internal.xjc.model.TypeUse, arg6: javax.xml.namespace.QName, arg7: boolean)
                      public isRequired(): boolean
                      public getXmlName(): javax.xml.namespace.QName
                      public isUnboxable(): boolean
                      public isOptionalPrimitive(): boolean
                      public accept<V>(arg0: com.sun.tools.internal.xjc.model.CPropertyVisitor<V>): V
                      public kind(): com.sun.xml.internal.bind.v2.model.core.PropertyKind
                      public getSchemaType(): javax.xml.namespace.QName
                      public getTarget(): com.sun.xml.internal.bind.v2.model.core.NonElement
                      public getSource(): com.sun.xml.internal.bind.v2.model.core.PropertyInfo
                  }
                  abstract class CSingleTypePropertyInfo extends com.sun.tools.internal.xjc.model.CPropertyInfo {
                      protected type: com.sun.tools.internal.xjc.model.TypeUse
                      static $assertionsDisabled: boolean
                      protected constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.xjc.model.TypeUse, arg2: javax.xml.namespace.QName, arg3: com.sun.xml.internal.xsom.XSComponent, arg4: com.sun.tools.internal.xjc.model.CCustomizations, arg5: org.xml.sax.Locator)
                      public getSchemaType(): javax.xml.namespace.QName
                      public id(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getExpectedMimeType(): javax.activation.MimeType
                      ref<T>(...args: any[]): any
                      public getTarget(): com.sun.tools.internal.xjc.model.CNonElement
                      getAdapter<T>(...args: any[]): any
                      public getSource(): com.sun.tools.internal.xjc.model.CSingleTypePropertyInfo
                  }
                  class CValuePropertyInfo extends com.sun.tools.internal.xjc.model.CSingleTypePropertyInfo implements com.sun.xml.internal.bind.v2.model.core.ValuePropertyInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      public constructor(arg0: java.lang.String, arg1: com.sun.xml.internal.xsom.XSComponent, arg2: com.sun.tools.internal.xjc.model.CCustomizations, arg3: org.xml.sax.Locator, arg4: com.sun.tools.internal.xjc.model.TypeUse, arg5: javax.xml.namespace.QName)
                      public kind(): com.sun.xml.internal.bind.v2.model.core.PropertyKind
                      public accept<V>(arg0: com.sun.tools.internal.xjc.model.CPropertyVisitor<V>): V
                      public getSchemaType(): javax.xml.namespace.QName
                      public getSource(): com.sun.xml.internal.bind.v2.model.core.PropertyInfo
                      public getTarget(): com.sun.xml.internal.bind.v2.model.core.NonElement
                  }
                  class CReferencePropertyInfo$1RefList extends java.util.HashSet<com.sun.tools.internal.xjc.model.CTypeInfo> {
                      this$0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo
                      constructor(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo)
                      public addAll(arg0: java.util.Collection<com.sun.tools.internal.xjc.model.CTypeInfo>): boolean
                  }
                  class CReferencePropertyInfo extends com.sun.tools.internal.xjc.model.CPropertyInfo implements com.sun.xml.internal.bind.v2.model.core.ReferencePropertyInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      public constructor(arg0: java.lang.String, arg1: boolean, arg2: boolean, arg3: boolean, arg4: com.sun.xml.internal.xsom.XSComponent, arg5: com.sun.tools.internal.xjc.model.CCustomizations, arg6: org.xml.sax.Locator, arg7: boolean, arg8: boolean, arg9: boolean)
                      ref<T>(...args: any[]): any
                      public getElements(): java.util.Set<com.sun.tools.internal.xjc.model.CElement>
                      public isMixed(): boolean
                      public isDummy(): boolean
                      public isContent(): boolean
                      public isMixedExtendedCust(): boolean
                      public getXmlName(): javax.xml.namespace.QName
                      public isUnboxable(): boolean
                      public isOptionalPrimitive(): boolean
                      public accept<V>(arg0: com.sun.tools.internal.xjc.model.CPropertyVisitor<V>): V
                      getAdapter<T>(...args: any[]): any
                      public kind(): com.sun.xml.internal.bind.v2.model.core.PropertyKind
                      public id(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getWildcard(): com.sun.xml.internal.bind.v2.model.core.WildcardMode
                      public setWildcard(arg0: com.sun.xml.internal.bind.v2.model.core.WildcardMode): void
                      getDOMHandler<T>(...args: any[]): any
                      public getExpectedMimeType(): javax.activation.MimeType
                      public isCollectionNillable(): boolean
                      public isCollectionRequired(): boolean
                      public getSchemaType(): javax.xml.namespace.QName
                      public isRequired(): boolean
                      public collectElementNames(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.model.CPropertyInfo>): javax.xml.namespace.QName
                      static access$000(arg0: com.sun.tools.internal.xjc.model.CReferencePropertyInfo): java.util.Set
                  }
                  class Multiplicity {
                      public min: java.math.BigInteger
                      public max: java.math.BigInteger
                      public static ZERO: com.sun.tools.internal.xjc.model.Multiplicity
                      public static ONE: com.sun.tools.internal.xjc.model.Multiplicity
                      public static OPTIONAL: com.sun.tools.internal.xjc.model.Multiplicity
                      public static STAR: com.sun.tools.internal.xjc.model.Multiplicity
                      public static PLUS: com.sun.tools.internal.xjc.model.Multiplicity
                      create<T>(...args: any[]): any
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                      public isUnique(): boolean
                      public isOptional(): boolean
                      public isAtMostOnce(): boolean
                      public isZero(): boolean
                      public includes(arg0: com.sun.tools.internal.xjc.model.Multiplicity): boolean
                      public getMaxString(): java.lang.String
                      toString<T>(...args: any[]): any
                      public static choice(arg0: com.sun.tools.internal.xjc.model.Multiplicity, arg1: com.sun.tools.internal.xjc.model.Multiplicity): com.sun.tools.internal.xjc.model.Multiplicity
                      public static group(arg0: com.sun.tools.internal.xjc.model.Multiplicity, arg1: com.sun.tools.internal.xjc.model.Multiplicity): com.sun.tools.internal.xjc.model.Multiplicity
                      public static multiply(arg0: com.sun.tools.internal.xjc.model.Multiplicity, arg1: com.sun.tools.internal.xjc.model.Multiplicity): com.sun.tools.internal.xjc.model.Multiplicity
                      public static oneOrMore(arg0: com.sun.tools.internal.xjc.model.Multiplicity): com.sun.tools.internal.xjc.model.Multiplicity
                      public makeOptional(): com.sun.tools.internal.xjc.model.Multiplicity
                      public makeRepeated(): com.sun.tools.internal.xjc.model.Multiplicity
                  }
                  class TypeUseImpl implements com.sun.tools.internal.xjc.model.TypeUse {
                      public constructor(arg0: com.sun.tools.internal.xjc.model.CNonElement, arg1: boolean, arg2: com.sun.xml.internal.bind.v2.model.core.ID, arg3: javax.activation.MimeType, arg4: com.sun.tools.internal.xjc.model.CAdapter)
                      public isCollection(): boolean
                      public getInfo(): com.sun.tools.internal.xjc.model.CNonElement
                      public getAdapterUse(): com.sun.tools.internal.xjc.model.CAdapter
                      public idUse(): com.sun.xml.internal.bind.v2.model.core.ID
                      public getExpectedMimeType(): javax.activation.MimeType
                      public equals(arg0: java.lang.Object): boolean
                      public hashCode(): int
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                  }
                  class TypeUseFactory {
                      static $assertionsDisabled: boolean
                      public static makeID(arg0: com.sun.tools.internal.xjc.model.TypeUse, arg1: com.sun.xml.internal.bind.v2.model.core.ID): com.sun.tools.internal.xjc.model.TypeUse
                      public static makeMimeTyped(arg0: com.sun.tools.internal.xjc.model.TypeUse, arg1: javax.activation.MimeType): com.sun.tools.internal.xjc.model.TypeUse
                      public static makeCollection(arg0: com.sun.tools.internal.xjc.model.TypeUse): com.sun.tools.internal.xjc.model.TypeUse
                      adapt<T>(...args: any[]): any
                  }
                  interface Populatable {
                      public populate(arg0: com.sun.tools.internal.xjc.model.Model, arg1: com.sun.tools.internal.xjc.outline.Outline): void
                  }
                  class CWildcardTypeInfo extends com.sun.tools.internal.xjc.model.AbstractCTypeInfoImpl implements com.sun.xml.internal.bind.v2.model.core.WildcardTypeInfo<com.sun.tools.internal.xjc.model.nav.NType, com.sun.tools.internal.xjc.model.nav.NClass> {
                      public static INSTANCE: com.sun.tools.internal.xjc.model.CWildcardTypeInfo
                      public toType(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.outline.Aspect): com.sun.codemodel.internal.JType
                      getType<T>(...args: any[]): any
                      public getLocator(): org.xml.sax.Locator
                      public createConstant(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.xml.internal.xsom.XmlString): com.sun.codemodel.internal.JExpression
                      public getCustomizations(): com.sun.tools.internal.xjc.model.CCustomizations
                      public getExpectedMimeType(): javax.activation.MimeType
                  }
                  class AutoClassNameAllocator implements com.sun.tools.internal.xjc.api.ClassNameAllocator {
                      public constructor(arg0: com.sun.tools.internal.xjc.api.ClassNameAllocator)
                      public assignClassName(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                  }

               }
               abstract class ErrorReceiver implements org.xml.sax.ErrorHandler , com.sun.tools.internal.xjc.api.ErrorListener {
                   public constructor()
                   error<T>(...args: any[]): any
                   warning<T>(...args: any[]): any
                   public fatalError(arg0: org.xml.sax.SAXParseException): void
                   public pollAbort(): void
                   public info(arg0: org.xml.sax.SAXParseException): void
                   public debug(arg0: java.lang.String): void
                   protected getLocationString(arg0: org.xml.sax.SAXParseException): java.lang.String
               }
               class Options$1 implements com.sun.tools.internal.xjc.api.ClassNameAllocator {
                   this$0: com.sun.tools.internal.xjc.Options
                   constructor(arg0: com.sun.tools.internal.xjc.Options)
                   public assignClassName(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
               }
               class Options {
                   public debugMode: boolean
                   public verbose: boolean
                   public quiet: boolean
                   public readOnly: boolean
                   public noFileHeader: boolean
                   public enableIntrospection: boolean
                   public contentForWildcard: boolean
                   public encoding: java.lang.String
                   public disableXmlSecurity: boolean
                   public strictCheck: boolean
                   public runtime14: boolean
                   public automaticNameConflictResolution: boolean
                   public static STRICT: int
                   public static EXTENSION: int
                   public compatibilityMode: int
                   public target: com.sun.tools.internal.xjc.api.SpecVersion
                   public targetDir: java.io.File
                   public entityResolver: org.xml.sax.EntityResolver
                   public defaultPackage: java.lang.String
                   public defaultPackage2: java.lang.String
                   public proxyAuth: java.lang.String
                   public activePlugins: java.util.List<com.sun.tools.internal.xjc.Plugin>
                   public pluginURIs: java.util.Set<java.lang.String>
                   public classNameAllocator: com.sun.tools.internal.xjc.api.ClassNameAllocator
                   public packageLevelAnnotations: boolean
                   public classpaths: java.util.List<java.net.URL>
                   public isExtensionMode(): boolean
                   public constructor()
                   public getFieldRendererFactory(): com.sun.tools.internal.xjc.generator.bean.field.FieldRendererFactory
                   public setFieldRendererFactory(arg0: com.sun.tools.internal.xjc.generator.bean.field.FieldRendererFactory, arg1: com.sun.tools.internal.xjc.Plugin): void
                   public getNameConverter(): com.sun.xml.internal.bind.api.impl.NameConverter
                   public setNameConverter(arg0: com.sun.xml.internal.bind.api.impl.NameConverter, arg1: com.sun.tools.internal.xjc.Plugin): void
                   public getAllPlugins(): java.util.List<com.sun.tools.internal.xjc.Plugin>
                   public getSchemaLanguage(): com.sun.tools.internal.xjc.Language
                   public setSchemaLanguage(arg0: com.sun.tools.internal.xjc.Language): void
                   public getGrammars(): org.xml.sax.InputSource[]
                   addGrammar<T>(...args: any[]): any
                   public addGrammarRecursive(arg0: java.io.File): void
                   public getBindFiles(): org.xml.sax.InputSource[]
                   addBindFile<T>(...args: any[]): any
                   public addBindFileRecursive(arg0: java.io.File): void
                   public getUserClassLoader(arg0: java.lang.ClassLoader): java.lang.ClassLoader
                   public parseArgument(arg0: java.lang.String[], arg1: int): int
                   public requireArgument(arg0: java.lang.String, arg1: java.lang.String[], arg2: int): java.lang.String
                   public addCatalog(arg0: java.io.File): void
                   public parseArguments(arg0: java.lang.String[]): void
                   public scanEpisodeFile(arg0: java.io.File): void
                   public guessSchemaLanguage(): com.sun.tools.internal.xjc.Language
                   createCodeWriter<T>(...args: any[]): any
                   public getPrologComment(): java.lang.String
                   public static getBuildID(): java.lang.String
                   public static normalizeSystemId(arg0: java.lang.String): java.lang.String
               }
               class AbortException extends java.lang.RuntimeException {
                   public constructor()
               }
               class Language extends java.lang.Enum<com.sun.tools.internal.xjc.Language> {
                   public static DTD: com.sun.tools.internal.xjc.Language
                   public static XMLSCHEMA: com.sun.tools.internal.xjc.Language
                   public static RELAXNG: com.sun.tools.internal.xjc.Language
                   public static RELAXNG_COMPACT: com.sun.tools.internal.xjc.Language
                   public static WSDL: com.sun.tools.internal.xjc.Language
                   public static values(): com.sun.tools.internal.xjc.Language[]
                   valueOf<T>(...args: any[]): any
               }
               abstract class Plugin {
                   public constructor()
                   public getOptionName(): java.lang.String
                   public getUsage(): java.lang.String
                   public parseArgument(arg0: com.sun.tools.internal.xjc.Options, arg1: java.lang.String[], arg2: int): int
                   public getCustomizationURIs(): java.util.List<java.lang.String>
                   public isCustomizationTagName(arg0: java.lang.String, arg1: java.lang.String): boolean
                   public onActivated(arg0: com.sun.tools.internal.xjc.Options): void
                   public postProcessModel(arg0: com.sun.tools.internal.xjc.model.Model, arg1: org.xml.sax.ErrorHandler): void
                   public run(arg0: com.sun.tools.internal.xjc.outline.Outline, arg1: com.sun.tools.internal.xjc.Options, arg2: org.xml.sax.ErrorHandler): boolean
               }
               class BadCommandLineException extends java.lang.Exception {
                   static $assertionsDisabled: boolean
                   constructor(...args: any[])
                   public initOptions(arg0: com.sun.tools.internal.xjc.Options): void
                   public getOptions(): com.sun.tools.internal.xjc.Options
               }
               class SchemaCache {
                   public constructor(arg0: java.net.URL)
                   public newValidator(): javax.xml.validation.ValidatorHandler
               }
               abstract class XJCListener implements com.sun.tools.internal.xjc.api.ErrorListener {
                   public constructor()
                   generatedFile<T>(...args: any[]): any
                   public message(arg0: java.lang.String): void
                   public compiled(arg0: com.sun.tools.internal.xjc.outline.Outline): void
                   public isCanceled(): boolean
               }
               class XJCFacade {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   public static parseVersion(arg0: java.lang.String): java.lang.String
               }
               class SecureLoader$1 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   constructor()
                   run<T>(...args: any[]): any
               }
               class SecureLoader$2 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   val$c: java.lang.Class
                   constructor(arg0: java.lang.Class)
                   run<T>(...args: any[]): any
               }
               class SecureLoader$3 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   constructor()
                   run<T>(...args: any[]): any
               }
               class SecureLoader$4 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   val$cl: java.lang.ClassLoader
                   constructor(arg0: java.lang.ClassLoader)
                   run<T>(...args: any[]): any
               }
               class SecureLoader$5 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   val$cl: java.lang.ClassLoader
                   constructor(arg0: java.lang.ClassLoader)
                   run<T>(...args: any[]): any
               }
               class SecureLoader {
                   constructor()
                   static getContextClassLoader(): java.lang.ClassLoader
                   static getClassClassLoader(arg0: java.lang.Class): java.lang.ClassLoader
                   static getSystemClassLoader(): java.lang.ClassLoader
                   static setContextClassLoader(arg0: java.lang.ClassLoader): void
                   static getParentClassLoader(arg0: java.lang.ClassLoader): java.lang.ClassLoader
               }
               class ProgressCodeWriter extends com.sun.codemodel.internal.writer.FilterCodeWriter {
                   public constructor(arg0: com.sun.codemodel.internal.CodeWriter, arg1: com.sun.tools.internal.xjc.XJCListener, arg2: int)
                   public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
                   public openBinary(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.OutputStream
               }
               class ModelLoader$XMLSchemaParser implements com.sun.xml.internal.xsom.parser.XMLParser {
                   this$0: com.sun.tools.internal.xjc.ModelLoader
                   public parse(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.ContentHandler, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): void
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader, arg1: com.sun.xml.internal.xsom.parser.XMLParser, arg2: com.sun.tools.internal.xjc.ModelLoader$1)
               }
               class ModelLoader$1 implements org.xml.sax.EntityResolver {
                   val$forest: com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                   this$0: com.sun.tools.internal.xjc.ModelLoader
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader, arg1: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                   public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
               }
               class ModelLoader$SpeculationFailure extends java.lang.Error {
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader$1)
               }
               class ModelLoader$SpeculationChecker extends org.xml.sax.helpers.XMLFilterImpl {
                   public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader$1)
               }
               class ModelLoader$2 implements com.sun.xml.internal.xsom.parser.XMLParser {
                   this$0: com.sun.tools.internal.xjc.ModelLoader
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader)
                   public parse(arg0: org.xml.sax.InputSource, arg1: org.xml.sax.ContentHandler, arg2: org.xml.sax.ErrorHandler, arg3: org.xml.sax.EntityResolver): void
               }
               class ModelLoader$3$1 extends org.xml.sax.helpers.XMLFilterImpl {
                   this$1: com.sun.tools.internal.xjc.ModelLoader$3
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader$3)
                   public parse(arg0: org.xml.sax.InputSource): void
               }
               class ModelLoader$3 implements com.sun.xml.internal.rngom.xml.sax.XMLReaderCreator {
                   val$forest: com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                   this$0: com.sun.tools.internal.xjc.ModelLoader
                   constructor(arg0: com.sun.tools.internal.xjc.ModelLoader, arg1: com.sun.tools.internal.xjc.reader.internalizer.DOMForest)
                   public createXMLReader(): org.xml.sax.XMLReader
               }
               class ModelLoader$4 {
                   static $SwitchMap$com$sun$tools$internal$xjc$Language: int[]
               }
               class ModelLoader {
                   public static load(arg0: com.sun.tools.internal.xjc.Options, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.tools.internal.xjc.ErrorReceiver): com.sun.tools.internal.xjc.model.Model
                   public constructor(arg0: com.sun.tools.internal.xjc.Options, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.tools.internal.xjc.ErrorReceiver)
                   public buildDOMForest(arg0: com.sun.tools.internal.xjc.reader.internalizer.InternalizationLogic): com.sun.tools.internal.xjc.reader.internalizer.DOMForest
                   public loadXMLSchema(): com.sun.xml.internal.xsom.XSSchemaSet
                   public annotateXMLSchema(arg0: com.sun.xml.internal.xsom.XSSchemaSet): com.sun.tools.internal.xjc.model.Model
                   createXSOMParser<T>(...args: any[]): any
                   public createXSOM(arg0: com.sun.tools.internal.xjc.reader.internalizer.DOMForest, arg1: com.sun.tools.internal.xjc.reader.internalizer.SCDBasedBindingSet): com.sun.xml.internal.xsom.XSSchemaSet
                   static access$000(arg0: com.sun.tools.internal.xjc.ModelLoader): com.sun.tools.internal.xjc.Options
                   static access$100(arg0: com.sun.tools.internal.xjc.ModelLoader): com.sun.tools.internal.xjc.util.ErrorReceiverFilter
               }
               class Messages {
                   static UNKNOWN_LOCATION: java.lang.String
                   static LINE_X_OF_Y: java.lang.String
                   static UNKNOWN_FILE: java.lang.String
                   static DRIVER_PUBLIC_USAGE: java.lang.String
                   static DRIVER_PRIVATE_USAGE: java.lang.String
                   static ADDON_USAGE: java.lang.String
                   static EXPERIMENTAL_LANGUAGE_WARNING: java.lang.String
                   static NON_EXISTENT_DIR: java.lang.String
                   static MISSING_MODE_OPERAND: java.lang.String
                   static MISSING_PROXY: java.lang.String
                   static MISSING_PROXYFILE: java.lang.String
                   static NO_SUCH_FILE: java.lang.String
                   static ILLEGAL_PROXY: java.lang.String
                   static ILLEGAL_TARGET_VERSION: java.lang.String
                   static MISSING_OPERAND: java.lang.String
                   static MISSING_PROXYHOST: java.lang.String
                   static MISSING_PROXYPORT: java.lang.String
                   static STACK_OVERFLOW: java.lang.String
                   static UNRECOGNIZED_MODE: java.lang.String
                   static UNRECOGNIZED_PARAMETER: java.lang.String
                   static UNSUPPORTED_ENCODING: java.lang.String
                   static MISSING_GRAMMAR: java.lang.String
                   static PARSING_SCHEMA: java.lang.String
                   static PARSE_FAILED: java.lang.String
                   static COMPILING_SCHEMA: java.lang.String
                   static FAILED_TO_GENERATE_CODE: java.lang.String
                   static FILE_PROLOG_COMMENT: java.lang.String
                   static DATE_FORMAT: java.lang.String
                   static TIME_FORMAT: java.lang.String
                   static AT: java.lang.String
                   static VERSION: java.lang.String
                   static FULLVERSION: java.lang.String
                   static BUILD_ID: java.lang.String
                   static ERROR_MSG: java.lang.String
                   static WARNING_MSG: java.lang.String
                   static INFO_MSG: java.lang.String
                   static ERR_NOT_A_BINDING_FILE: java.lang.String
                   static ERR_TOO_MANY_SCHEMA: java.lang.String
                   static ERR_BINDING_FILE_NOT_SUPPORTED_FOR_RNC: java.lang.String
                   static DEFAULT_VERSION: java.lang.String
                   static DEFAULT_PACKAGE_WARNING: java.lang.String
                   static NOT_A_VALID_FILENAME: java.lang.String
                   static FAILED_TO_PARSE: java.lang.String
                   static NOT_A_FILE_NOR_URL: java.lang.String
                   static FIELD_RENDERER_CONFLICT: java.lang.String
                   static NAME_CONVERTER_CONFLICT: java.lang.String
                   static FAILED_TO_LOAD: java.lang.String
                   static PLUGIN_LOAD_FAILURE: java.lang.String
                   public constructor()
                   public static format(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.lang.String
               }
               class Driver$1 extends java.lang.Thread {
                   val$args: java.lang.String[]
                   val$ex: java.lang.Throwable[]
                   constructor(arg0: java.lang.String[], arg1: java.lang.Throwable[])
                   public run(): void
               }
               class Driver$1Listener extends com.sun.tools.internal.xjc.XJCListener {
                   cer: com.sun.tools.internal.xjc.ConsoleErrorReporter
                   val$out: java.io.PrintStream
                   val$status: java.io.PrintStream
                   constructor()
                   public generatedFile(arg0: java.lang.String, arg1: int, arg2: int): void
                   public message(arg0: java.lang.String): void
                   public error(arg0: org.xml.sax.SAXParseException): void
                   public fatalError(arg0: org.xml.sax.SAXParseException): void
                   public warning(arg0: org.xml.sax.SAXParseException): void
                   public info(arg0: org.xml.sax.SAXParseException): void
               }
               class Driver$2 extends com.sun.tools.internal.xjc.util.ErrorReceiverFilter {
                   val$opt: com.sun.tools.internal.xjc.Driver$OptionsEx
                   val$hadWarning: boolean[]
                   val$listener: com.sun.tools.internal.xjc.XJCListener
                   constructor(arg0: com.sun.tools.internal.xjc.api.ErrorListener, arg1: com.sun.tools.internal.xjc.Driver$OptionsEx, arg2: boolean[], arg3: com.sun.tools.internal.xjc.XJCListener)
                   public info(arg0: org.xml.sax.SAXParseException): void
                   public warning(arg0: org.xml.sax.SAXParseException): void
                   public pollAbort(): void
               }
               class Driver$Mode extends java.lang.Enum<com.sun.tools.internal.xjc.Driver$Mode> {
                   public static CODE: com.sun.tools.internal.xjc.Driver$Mode
                   public static SIGNATURE: com.sun.tools.internal.xjc.Driver$Mode
                   public static FOREST: com.sun.tools.internal.xjc.Driver$Mode
                   public static DRYRUN: com.sun.tools.internal.xjc.Driver$Mode
                   public static ZIP: com.sun.tools.internal.xjc.Driver$Mode
                   public static GBIND: com.sun.tools.internal.xjc.Driver$Mode
                   public static values(): com.sun.tools.internal.xjc.Driver$Mode[]
                   valueOf<T>(...args: any[]): any
               }
               class Driver$OptionsEx extends com.sun.tools.internal.xjc.Options {
                   protected mode: com.sun.tools.internal.xjc.Driver$Mode
                   public noNS: boolean
                   constructor()
                   public parseArgument(arg0: java.lang.String[], arg1: int): int
               }
               class Driver$WeAreDone extends com.sun.tools.internal.xjc.BadCommandLineException {
                   constructor(arg0: com.sun.tools.internal.xjc.Driver$1)
               }
               class Driver$3 {
                   static $SwitchMap$com$sun$tools$internal$xjc$Driver$Mode: int[]
               }
               class Driver {
                   static $assertionsDisabled: boolean
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   run<T>(...args: any[]): any
                   public static getBuildID(): java.lang.String
                   public static usage(arg0: com.sun.tools.internal.xjc.Options, arg1: boolean): void
                   static access$000(arg0: java.lang.String[]): void
               }
               class ConsoleErrorReporter extends com.sun.tools.internal.xjc.ErrorReceiver {
                   constructor(...args: any[])
                   public warning(arg0: org.xml.sax.SAXParseException): void
                   public error(arg0: org.xml.sax.SAXParseException): void
                   public fatalError(arg0: org.xml.sax.SAXParseException): void
                   public info(arg0: org.xml.sax.SAXParseException): void
                   public hadError(): boolean
               }
               class ClassLoaderBuilder {
                   public static noHack: boolean
                   constructor()
                   protected static createProtectiveClassLoader(arg0: java.lang.ClassLoader, arg1: java.lang.String): java.lang.ClassLoader
               }

            }
            namespace jxc {
               namespace gen {
                  namespace config {
                     class Schema extends com.sun.tools.internal.jxc.gen.config.NGCCHandler {
                         protected $runtime: com.sun.tools.internal.jxc.NGCCRuntimeEx
                         protected $uri: java.lang.String
                         protected $localName: java.lang.String
                         protected $qname: java.lang.String
                         public getRuntime(): com.sun.tools.internal.jxc.gen.config.NGCCRuntime
                         constructor(...args: any[])
                         public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public text(arg0: java.lang.String): void
                         public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                         public accepted(): boolean
                         public getNamespace(): java.lang.String
                         public getLocation(): java.io.File
                     }
                     abstract class NGCCHandler implements com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver {
                         protected _parent: com.sun.tools.internal.jxc.gen.config.NGCCHandler
                         protected _source: com.sun.tools.internal.jxc.gen.config.NGCCEventSource
                         protected _cookie: int
                         protected constructor(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventSource, arg1: com.sun.tools.internal.jxc.gen.config.NGCCHandler, arg2: int)
                         protected getRuntime(): com.sun.tools.internal.jxc.gen.config.NGCCRuntime
                         protected onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                         public spawnChildFromEnterElement(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                         public spawnChildFromEnterAttribute(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public spawnChildFromLeaveElement(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public spawnChildFromLeaveAttribute(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public spawnChildFromText(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String): void
                         public revertToParentFromEnterElement(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: org.xml.sax.Attributes): void
                         public revertToParentFromLeaveElement(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                         public revertToParentFromEnterAttribute(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                         public revertToParentFromLeaveAttribute(arg0: java.lang.Object, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                         public revertToParentFromText(arg0: java.lang.Object, arg1: int, arg2: java.lang.String): void
                         public unexpectedEnterElement(arg0: java.lang.String): void
                         public unexpectedLeaveElement(arg0: java.lang.String): void
                         public unexpectedEnterAttribute(arg0: java.lang.String): void
                         public unexpectedLeaveAttribute(arg0: java.lang.String): void
                     }
                     interface NGCCEventReceiver {
                         public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public text(arg0: java.lang.String): void
                         public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                     }
                     class NGCCRuntime implements org.xml.sax.ContentHandler , com.sun.tools.internal.jxc.gen.config.NGCCEventSource {
                         static IMPOSSIBLE: java.lang.String
                         public constructor()
                         public setRootHandler(arg0: com.sun.tools.internal.jxc.gen.config.NGCCHandler): void
                         public reset(): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                         public getLocator(): org.xml.sax.Locator
                         public getCurrentAttributes(): org.xml.sax.Attributes
                         public replace(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver): int
                         public processList(arg0: java.lang.String): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public onEnterElementConsumed(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public onLeaveElementConsumed(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                         public getAttributeIndex(arg0: java.lang.String, arg1: java.lang.String): int
                         public consumeAttribute(arg0: int): void
                         public startPrefixMapping(arg0: java.lang.String, arg1: java.lang.String): void
                         public endPrefixMapping(arg0: java.lang.String): void
                         public skippedEntity(arg0: java.lang.String): void
                         public processingInstruction(arg0: java.lang.String, arg1: java.lang.String): void
                         public endDocument(): void
                         public startDocument(): void
                         public sendEnterAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendEnterElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                         public sendLeaveAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendLeaveElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendText(arg0: int, arg1: java.lang.String): void
                         public redirectSubtree(arg0: org.xml.sax.ContentHandler, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
                         protected unexpectedX(arg0: java.lang.String): void
                         public trace(arg0: java.lang.String): void
                         public traceln(arg0: java.lang.String): void
                     }
                     interface NGCCEventSource {
                         public replace(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver): int
                         public sendEnterElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                         public sendLeaveElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendEnterAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendLeaveAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendText(arg0: int, arg1: java.lang.String): void
                     }
                     class AttributesImpl implements org.xml.sax.Attributes {
                         length: int
                         data: java.lang.String[]
                         constructor(...args: any[])
                         public getLength(): int
                         public getURI(arg0: int): java.lang.String
                         public getLocalName(arg0: int): java.lang.String
                         public getQName(arg0: int): java.lang.String
                         getType<T>(...args: any[]): any
                         getValue<T>(...args: any[]): any
                         getIndex<T>(...args: any[]): any
                         public clear(): void
                         public setAttributes(arg0: org.xml.sax.Attributes): void
                         public addAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
                         public setAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void
                         public removeAttribute(arg0: int): void
                         public setURI(arg0: int, arg1: java.lang.String): void
                         public setLocalName(arg0: int, arg1: java.lang.String): void
                         public setQName(arg0: int, arg1: java.lang.String): void
                         public setType(arg0: int, arg1: java.lang.String): void
                         public setValue(arg0: int, arg1: java.lang.String): void
                     }
                     abstract class NGCCInterleaveFilter implements com.sun.tools.internal.jxc.gen.config.NGCCEventSource , com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver {
                         protected _receivers: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver[]
                         protected constructor(arg0: com.sun.tools.internal.jxc.gen.config.NGCCHandler, arg1: int)
                         protected setHandlers(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver[]): void
                         public replace(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver): int
                         public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public text(arg0: java.lang.String): void
                         protected findReceiverOfElement(arg0: java.lang.String, arg1: java.lang.String): int
                         protected findReceiverOfAttribute(arg0: java.lang.String, arg1: java.lang.String): int
                         protected findReceiverOfText(): int
                         public joinByEnterElement(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                         public joinByLeaveElement(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public joinByEnterAttribute(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public joinByLeaveAttribute(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public joinByText(arg0: com.sun.tools.internal.jxc.gen.config.NGCCEventReceiver, arg1: java.lang.String): void
                         public sendEnterAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendEnterElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.Attributes): void
                         public sendLeaveAttribute(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendLeaveElement(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void
                         public sendText(arg0: int, arg1: java.lang.String): void
                     }
                     class Config extends com.sun.tools.internal.jxc.gen.config.NGCCHandler {
                         protected $runtime: com.sun.tools.internal.jxc.NGCCRuntimeEx
                         protected $uri: java.lang.String
                         protected $localName: java.lang.String
                         protected $qname: java.lang.String
                         public getRuntime(): com.sun.tools.internal.jxc.gen.config.NGCCRuntime
                         constructor(...args: any[])
                         public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public text(arg0: java.lang.String): void
                         public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                         public accepted(): boolean
                         public getClasses(): com.sun.tools.internal.jxc.gen.config.Classes
                         public getBaseDir(): java.io.File
                         public getSchema(): java.util.List
                     }
                     class Classes extends com.sun.tools.internal.jxc.gen.config.NGCCHandler {
                         protected $runtime: com.sun.tools.internal.jxc.NGCCRuntimeEx
                         protected $uri: java.lang.String
                         protected $localName: java.lang.String
                         protected $qname: java.lang.String
                         public getRuntime(): com.sun.tools.internal.jxc.gen.config.NGCCRuntime
                         constructor(...args: any[])
                         public enterElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public leaveElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public enterAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public leaveAttribute(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public text(arg0: java.lang.String): void
                         public onChildCompleted(arg0: java.lang.Object, arg1: int, arg2: boolean): void
                         public accepted(): boolean
                         public getIncludes(): java.util.List
                         public getExcludes(): java.util.List
                     }

                  }

               }
               namespace ap {
                  class SecureLoader$1 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                      constructor()
                      run<T>(...args: any[]): any
                  }
                  class SecureLoader$2 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                      val$c: java.lang.Class
                      constructor(arg0: java.lang.Class)
                      run<T>(...args: any[]): any
                  }
                  class SecureLoader$3 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                      constructor()
                      run<T>(...args: any[]): any
                  }
                  class SecureLoader {
                      constructor()
                      static getContextClassLoader(): java.lang.ClassLoader
                      static getClassClassLoader(arg0: java.lang.Class): java.lang.ClassLoader
                      static getSystemClassLoader(): java.lang.ClassLoader
                  }
                  class SchemaGenerator$1 extends javax.xml.bind.SchemaOutputResolver {
                      this$0: com.sun.tools.internal.jxc.ap.SchemaGenerator
                      constructor(arg0: com.sun.tools.internal.jxc.ap.SchemaGenerator)
                      public createOutput(arg0: java.lang.String, arg1: java.lang.String): javax.xml.transform.Result
                  }
                  class SchemaGenerator extends javax.annotation.processing.AbstractProcessor {
                      constructor(...args: any[])
                      public setEpisodeFile(arg0: java.io.File): void
                      public process(arg0: java.util.Set<javax.lang.model.element.TypeElement>, arg1: javax.annotation.processing.RoundEnvironment): boolean
                      public getSupportedSourceVersion(): javax.lang.model.SourceVersion
                      static access$000(arg0: com.sun.tools.internal.jxc.ap.SchemaGenerator): java.util.Map
                      static access$100(arg0: com.sun.tools.internal.jxc.ap.SchemaGenerator): javax.annotation.processing.ProcessingEnvironment
                      static access$200(arg0: com.sun.tools.internal.jxc.ap.SchemaGenerator): javax.annotation.processing.ProcessingEnvironment
                  }
                  class Options {
                      public static DISABLE_XML_SECURITY: java.lang.String
                      public classpath: java.lang.String
                      public targetDir: java.io.File
                      public episodeFile: java.io.File
                      public encoding: java.lang.String
                      public arguments: java.util.List<java.lang.String>
                      public constructor()
                      public parseArguments(arg0: java.lang.String[]): void
                      public isDisableXmlSecurity(): boolean
                  }
                  class Messages extends java.lang.Enum<com.sun.tools.internal.jxc.ap.Messages> {
                      public static NON_EXISTENT_FILE: com.sun.tools.internal.jxc.ap.Messages
                      public static UNRECOGNIZED_PARAMETER: com.sun.tools.internal.jxc.ap.Messages
                      public static OPERAND_MISSING: com.sun.tools.internal.jxc.ap.Messages
                      public static values(): com.sun.tools.internal.jxc.ap.Messages[]
                      valueOf<T>(...args: any[]): any
                      toString<T>(...args: any[]): any
                      public format(...arg0: java.lang.Object[]): java.lang.String
                  }
                  class InlineAnnotationReaderImpl extends com.sun.xml.internal.bind.v2.model.annotation.AbstractInlineAnnotationReaderImpl<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, javax.lang.model.element.VariableElement, javax.lang.model.element.ExecutableElement> {
                      public static theInstance: com.sun.tools.internal.jxc.ap.InlineAnnotationReaderImpl
                      static $assertionsDisabled: boolean
                      getClassAnnotation<T>(...args: any[]): any
                      getFieldAnnotation<T>(...args: any[]): any
                      hasFieldAnnotation<T>(...args: any[]): any
                      hasClassAnnotation<T>(...args: any[]): any
                      getAllFieldAnnotations<T>(...args: any[]): any
                      getMethodAnnotation<T>(...args: any[]): any
                      hasMethodAnnotation<T>(...args: any[]): any
                      getAllMethodAnnotations<T>(...args: any[]): any
                      getMethodParameterAnnotation<T>(...args: any[]): any
                      getPackageAnnotation<T>(...args: any[]): any
                      getClassValue<T>(...args: any[]): any
                      getClassArrayValue<T>(...args: any[]): any
                      fullName<T>(...args: any[]): any
                  }
                  class ErrorReceiverImpl extends com.sun.tools.internal.xjc.ErrorReceiver {
                      constructor(...args: any[])
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                  }
                  class Const extends java.lang.Enum<com.sun.tools.internal.jxc.ap.Const> {
                      public static CONFIG_FILE_OPTION: com.sun.tools.internal.jxc.ap.Const
                      public static DEBUG_OPTION: com.sun.tools.internal.jxc.ap.Const
                      public static values(): com.sun.tools.internal.jxc.ap.Const[]
                      valueOf<T>(...args: any[]): any
                      public getValue(): java.lang.String
                  }
                  class AnnotationParser extends javax.annotation.processing.AbstractProcessor {
                      public constructor()
                      public init(arg0: javax.annotation.processing.ProcessingEnvironment): void
                      public process(arg0: java.util.Set<javax.lang.model.element.TypeElement>, arg1: javax.annotation.processing.RoundEnvironment): boolean
                      public getSupportedSourceVersion(): javax.lang.model.SourceVersion
                  }

               }
               namespace model {
                  namespace nav {
                     class ApNavigator$1 implements javax.lang.model.type.TypeMirror {
                         constructor()
                         public accept<R, P>(arg0: javax.lang.model.type.TypeVisitor<R, P>, arg1: P): R
                         public getKind(): javax.lang.model.type.TypeKind
                         public getAnnotationMirrors(): java.util.List<javax.lang.model.element.AnnotationMirror>
                         public getAnnotation<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A
                         public getAnnotationsByType<A extends java.lang.annotation.Annotation>(arg0: java.lang.Class<A>): A[]
                     }
                     class ApNavigator$2 implements com.sun.xml.internal.bind.v2.runtime.Location {
                         val$treePath: com.sun.source.util.TreePath
                         val$name: java.lang.String
                         this$0: com.sun.tools.internal.jxc.model.nav.ApNavigator
                         constructor(arg0: com.sun.tools.internal.jxc.model.nav.ApNavigator, arg1: com.sun.source.util.TreePath, arg2: java.lang.String)
                         toString<T>(...args: any[]): any
                     }
                     class ApNavigator$3 extends javax.lang.model.util.SimpleTypeVisitor6<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement> {
                         this$0: com.sun.tools.internal.jxc.model.nav.ApNavigator
                         constructor(arg0: com.sun.tools.internal.jxc.model.nav.ApNavigator)
                         visitDeclared<T>(...args: any[]): any
                         visitTypeVariable<T>(...args: any[]): any
                         visitArray<T>(...args: any[]): any
                         visitWildcard<T>(...args: any[]): any
                         defaultAction<T>(...args: any[]): any
                     }
                     class ApNavigator implements com.sun.xml.internal.bind.v2.model.nav.Navigator<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, javax.lang.model.element.VariableElement, javax.lang.model.element.ExecutableElement> {
                         static $assertionsDisabled: boolean
                         public constructor(arg0: javax.annotation.processing.ProcessingEnvironment)
                         getSuperClass<T>(...args: any[]): any
                         getBaseClass<T>(...args: any[]): any
                         getClassName<T>(...args: any[]): any
                         getTypeName<T>(...args: any[]): any
                         getClassShortName<T>(...args: any[]): any
                         getDeclaredFields<T>(...args: any[]): any
                         getDeclaredField<T>(...args: any[]): any
                         getDeclaredMethods<T>(...args: any[]): any
                         getDeclaringClassForField<T>(...args: any[]): any
                         getDeclaringClassForMethod<T>(...args: any[]): any
                         getFieldType<T>(...args: any[]): any
                         getFieldName<T>(...args: any[]): any
                         getMethodName<T>(...args: any[]): any
                         getReturnType<T>(...args: any[]): any
                         getMethodParameters<T>(...args: any[]): any
                         isStaticMethod<T>(...args: any[]): any
                         isFinalMethod<T>(...args: any[]): any
                         isSubClassOf<T>(...args: any[]): any
                         ref<T>(...args: any[]): any
                         use<T>(...args: any[]): any
                         asDecl<T>(...args: any[]): any
                         erasure<T>(...args: any[]): any
                         isAbstract<T>(...args: any[]): any
                         isFinal<T>(...args: any[]): any
                         getEnumConstants<T>(...args: any[]): any
                         getVoidType<T>(...args: any[]): any
                         getPackageName<T>(...args: any[]): any
                         loadObjectFactory<T>(...args: any[]): any
                         isBridgeMethod<T>(...args: any[]): any
                         isOverriding<T>(...args: any[]): any
                         isInterface<T>(...args: any[]): any
                         isTransient<T>(...args: any[]): any
                         isInnerClass<T>(...args: any[]): any
                         isSameType<T>(...args: any[]): any
                         isArray<T>(...args: any[]): any
                         isArrayButNotByteArray<T>(...args: any[]): any
                         getComponentType<T>(...args: any[]): any
                         getTypeArgument<T>(...args: any[]): any
                         isParameterizedType<T>(...args: any[]): any
                         isPrimitive<T>(...args: any[]): any
                         getPrimitive<T>(...args: any[]): any
                         getClassLocation<T>(...args: any[]): any
                         getFieldLocation<T>(...args: any[]): any
                         getMethodLocation<T>(...args: any[]): any
                         hasDefaultConstructor<T>(...args: any[]): any
                         isStaticField<T>(...args: any[]): any
                         isPublicMethod<T>(...args: any[]): any
                         isPublicField<T>(...args: any[]): any
                         isEnum<T>(...args: any[]): any
                         static access$000(arg0: com.sun.tools.internal.jxc.model.nav.ApNavigator): javax.annotation.processing.ProcessingEnvironment
                     }

                  }

               }
               class NGCCRuntimeEx extends com.sun.tools.internal.jxc.gen.config.NGCCRuntime {
                   public constructor(arg0: org.xml.sax.ErrorHandler)
                   public getBaseDir(arg0: java.lang.String): java.io.File
                   public getIncludePatterns(arg0: java.util.List<java.lang.String>): java.util.List<java.util.regex.Pattern>
                   public getExcludePatterns(arg0: java.util.List<java.lang.String>): java.util.List
                   protected unexpectedX(arg0: java.lang.String): void
               }
               namespace api {
                  namespace impl {
                     namespace j2s {
                        class JavaCompilerImpl$ErrorHandlerImpl implements com.sun.xml.internal.bind.v2.model.core.ErrorHandler {
                            public constructor(arg0: javax.annotation.processing.Messager)
                            public error(arg0: com.sun.xml.internal.bind.v2.runtime.IllegalAnnotationException): void
                        }
                        class JavaCompilerImpl implements com.sun.tools.internal.xjc.api.JavaCompiler {
                            public constructor()
                            public bind(arg0: java.util.Collection<com.sun.tools.internal.xjc.api.Reference>, arg1: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.api.Reference>, arg2: java.lang.String, arg3: javax.annotation.processing.ProcessingEnvironment): com.sun.tools.internal.xjc.api.J2SJAXBModel
                        }
                        class JAXBModelImpl implements com.sun.tools.internal.xjc.api.J2SJAXBModel {
                            static $assertionsDisabled: boolean
                            public constructor(arg0: com.sun.xml.internal.bind.v2.model.core.TypeInfoSet<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, javax.lang.model.element.VariableElement, javax.lang.model.element.ExecutableElement>, arg1: com.sun.xml.internal.bind.v2.model.annotation.AnnotationReader<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, javax.lang.model.element.VariableElement, javax.lang.model.element.ExecutableElement>, arg2: java.util.Collection<com.sun.tools.internal.xjc.api.Reference>, arg3: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.xjc.api.Reference>)
                            public getClassList(): java.util.List<java.lang.String>
                            public getXmlTypeName(arg0: com.sun.tools.internal.xjc.api.Reference): javax.xml.namespace.QName
                            public generateSchema(arg0: javax.xml.bind.SchemaOutputResolver, arg1: com.sun.tools.internal.xjc.api.ErrorListener): void
                            public generateEpisodeFile(arg0: javax.xml.transform.Result): void
                        }

                     }

                  }
                  class JXC {
                      public constructor()
                      public static createJavaCompiler(): com.sun.tools.internal.xjc.api.JavaCompiler
                  }

               }
               class SecureLoader$1 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   constructor()
                   run<T>(...args: any[]): any
               }
               class SecureLoader$2 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   val$c: java.lang.Class
                   constructor(arg0: java.lang.Class)
                   run<T>(...args: any[]): any
               }
               class SecureLoader$3 implements java.security.PrivilegedAction<java.lang.ClassLoader> {
                   constructor()
                   run<T>(...args: any[]): any
               }
               class SecureLoader {
                   constructor()
                   static getContextClassLoader(): java.lang.ClassLoader
                   static getClassClassLoader(arg0: java.lang.Class): java.lang.ClassLoader
                   static getSystemClassLoader(): java.lang.ClassLoader
               }
               class SchemaGeneratorFacade {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
               }
               class SchemaGenerator$Runner {
                   public constructor()
                   public static compile(arg0: java.lang.String[], arg1: java.io.File): boolean
               }
               class SchemaGenerator$JavacOptions {
                   public static parse(arg0: javax.tools.OptionChecker, arg1: javax.tools.OptionChecker, ...arg2: java.lang.String[]): com.sun.tools.internal.jxc.SchemaGenerator$JavacOptions
                   public getRecognizedOptions(): java.util.List<java.lang.String>
                   public getFiles(): java.util.List<java.io.File>
                   public getClassNames(): java.util.List<java.lang.String>
                   public getUnrecognizedOptions(): java.util.List<java.lang.String>
                   toString<T>(...args: any[]): any
               }
               class SchemaGenerator {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   run<T>(...args: any[]): any
               }
               class Messages extends java.lang.Enum<com.sun.tools.internal.jxc.Messages> {
                   public static UNEXPECTED_NGCC_TOKEN: com.sun.tools.internal.jxc.Messages
                   public static BASEDIR_DOESNT_EXIST: com.sun.tools.internal.jxc.Messages
                   public static USAGE: com.sun.tools.internal.jxc.Messages
                   public static FULLVERSION: com.sun.tools.internal.jxc.Messages
                   public static VERSION: com.sun.tools.internal.jxc.Messages
                   public static values(): com.sun.tools.internal.jxc.Messages[]
                   valueOf<T>(...args: any[]): any
                   toString<T>(...args: any[]): any
                   public format(...arg0: java.lang.Object[]): java.lang.String
               }
               class ConfigReader$SchemaOutputResolverImpl extends javax.xml.bind.SchemaOutputResolver {
                   static $assertionsDisabled: boolean
                   public createOutput(arg0: java.lang.String, arg1: java.lang.String): javax.xml.transform.Result
                   public constructor(arg0: java.io.File)
                   public addSchemaInfo(arg0: java.lang.String, arg1: java.io.File): void
               }
               class ConfigReader {
                   public constructor(arg0: javax.annotation.processing.ProcessingEnvironment, arg1: java.util.Collection<javax.lang.model.element.TypeElement>, arg2: java.io.File, arg3: org.xml.sax.ErrorHandler)
                   public getClassesToBeIncluded(): java.util.Collection<com.sun.tools.internal.xjc.api.Reference>
                   public getSchemaOutputResolver(): javax.xml.bind.SchemaOutputResolver
               }

            }
            namespace ws {
               namespace wsdl {
                  namespace parser {
                     class WhitespaceStripper extends org.xml.sax.helpers.XMLFilterImpl {
                         constructor(...args: any[])
                         public characters(arg0: char[], arg1: int, arg2: int): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public ignorableWhitespace(arg0: char[], arg1: int, arg2: int): void
                     }
                     class WSDLParser {
                         constructor(...args: any[])
                         public addParserListener(arg0: com.sun.tools.internal.ws.wsdl.framework.ParserListener): void
                         public parse(): com.sun.tools.internal.ws.wsdl.document.WSDLDocument
                         public getDOMForest(): com.sun.tools.internal.ws.wsdl.parser.MetadataFinder
                     }
                     class MetadataFinder$WSEntityResolver implements org.xml.sax.EntityResolver {
                         options: com.sun.tools.internal.ws.wscompile.WsimportOptions
                         errorReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiver
                         public constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
                         protected finalize(): void
                     }
                     class MetadataFinder$HttpClientVerifier implements javax.net.ssl.HostnameVerifier {
                         public verify(arg0: java.lang.String, arg1: javax.net.ssl.SSLSession): boolean
                         constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder$1)
                     }
                     class MetadataFinder$1 {
                     }
                     class MetadataFinder extends com.sun.tools.internal.ws.wsdl.parser.DOMForest {
                         public isMexMetadata: boolean
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.InternalizationLogic, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public parseWSDL(): void
                         public getRootWSDL(): java.lang.String
                         public getRootWSDLs(): java.util.Set<java.lang.String>
                     }
                     interface DOMForest$Handler extends org.xml.sax.ContentHandler {
                         public getDocument(): org.w3c.dom.Document
                     }
                     class DOMForest {
                         protected rootDocuments: java.util.Set<java.lang.String>
                         protected externalReferences: java.util.Set<java.lang.String>
                         protected core: java.util.Map<java.lang.String, org.w3c.dom.Document>
                         protected errorReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiver
                         protected inlinedSchemaElements: java.util.List<org.w3c.dom.Element>
                         public locatorTable: com.sun.tools.internal.xjc.reader.internalizer.LocatorTable
                         protected entityResolver: org.xml.sax.EntityResolver
                         public outerMostBindings: java.util.Set<org.w3c.dom.Element>
                         protected logic: com.sun.tools.internal.ws.wsdl.parser.InternalizationLogic
                         protected options: com.sun.tools.internal.ws.wscompile.WsimportOptions
                         protected resolvedCache: java.util.Map<java.lang.String, java.lang.String>
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.InternalizationLogic, arg1: org.xml.sax.EntityResolver, arg2: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg3: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getInlinedSchemaElement(): java.util.List<org.w3c.dom.Element>
                         parse<T>(...args: any[]): any
                         public getReferencedEntityMap(): java.util.Map<java.lang.String, java.lang.String>
                         public addExternalReferences(arg0: java.lang.String): void
                         public getExternalReferences(): java.util.Set<java.lang.String>
                         isExtensionMode(): boolean
                         public get(arg0: java.lang.String): org.w3c.dom.Document
                         public listSystemIDs(): java.lang.String[]
                         public getSystemId(arg0: org.w3c.dom.Document): java.lang.String
                         public getFirstRootDocument(): java.lang.String
                         public getRootDocuments(): java.util.Set<java.lang.String>
                         public dump(arg0: java.io.OutputStream): void
                     }
                     interface InternalizationLogic {
                         public createExternalReferenceFinder(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest): org.xml.sax.helpers.XMLFilterImpl
                         public checkIfValidTargetNode(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest, arg1: org.w3c.dom.Element, arg2: org.w3c.dom.Element): boolean
                         public refineSchemaTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                         public refineWSDLTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                     }
                     class WSDLInternalizationLogic$ReferenceFinder extends com.sun.tools.internal.ws.wsdl.parser.AbstractReferenceFinderImpl {
                         constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest)
                         protected findExternalResource(arg0: java.lang.String, arg1: java.lang.String, arg2: org.xml.sax.Attributes): java.lang.String
                     }
                     class WSDLInternalizationLogic implements com.sun.tools.internal.ws.wsdl.parser.InternalizationLogic {
                         public constructor()
                         public createExternalReferenceFinder(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest): org.xml.sax.helpers.XMLFilterImpl
                         public checkIfValidTargetNode(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest, arg1: org.w3c.dom.Element, arg2: org.w3c.dom.Element): boolean
                         public refineSchemaTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                         public refineWSDLTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                     }
                     abstract class AbstractReferenceFinderImpl extends org.xml.sax.helpers.XMLFilterImpl {
                         protected parent: com.sun.tools.internal.ws.wsdl.parser.DOMForest
                         static $assertionsDisabled: boolean
                         protected constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest)
                         protected findExternalResource(arg0: java.lang.String, arg1: java.lang.String, arg2: org.xml.sax.Attributes): java.lang.String
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                     }
                     class W3CAddressingMetadataExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getNamespaceURI(): java.lang.String
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     abstract class AbstractExtensionHandler extends com.sun.tools.internal.ws.api.wsdl.TWSDLExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>)
                         public getExtensionHandlers(): java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>
                         public doHandleExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected handleMIMEPartExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class W3CAddressingExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler {
                         constructor(...args: any[])
                         public getNamespaceURI(): java.lang.String
                         protected getWSDLExtensionQName(): javax.xml.namespace.QName
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class VersionChecker extends org.xml.sax.helpers.XMLFilterImpl {
                         constructor(...args: any[])
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endDocument(): void
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                     }
                     class Util {
                         public constructor()
                         public static getRequiredAttribute(arg0: org.w3c.dom.Element, arg1: java.lang.String): java.lang.String
                         public static verifyTag(arg0: org.w3c.dom.Element, arg1: java.lang.String): void
                         verifyTagNS<T>(...args: any[]): any
                         public static isTagName(arg0: org.w3c.dom.Element, arg1: javax.xml.namespace.QName): boolean
                         public static verifyTagNSRootElement(arg0: org.w3c.dom.Element, arg1: javax.xml.namespace.QName): void
                         public static nextElementIgnoringCharacterContent(arg0: java.util.Iterator): org.w3c.dom.Element
                         public static nextElement(arg0: java.util.Iterator): org.w3c.dom.Element
                         public static processSystemIdWithBase(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                         fail<T>(...args: any[]): any
                     }
                     class SOAPExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>)
                         public getNamespaceURI(): java.lang.String
                         public handleDefinitionsExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleTypesExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected getSOAPBinding(arg0: org.xml.sax.Locator): com.sun.tools.internal.ws.wsdl.document.soap.SOAPBinding
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOperationExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected handleMIMEPartExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected handleInputOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleServiceExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortTypeExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected getBodyQName(): javax.xml.namespace.QName
                         protected getHeaderQName(): javax.xml.namespace.QName
                         protected getHeaderfaultQName(): javax.xml.namespace.QName
                         protected getOperationQName(): javax.xml.namespace.QName
                         protected getFaultQName(): javax.xml.namespace.QName
                         protected getAddressQName(): javax.xml.namespace.QName
                         protected getBindingQName(): javax.xml.namespace.QName
                     }
                     class SOAPEntityReferenceValidator implements com.sun.tools.internal.ws.wsdl.framework.EntityReferenceValidator {
                         public constructor()
                         public isValid(arg0: com.sun.tools.internal.ws.wsdl.framework.Kind, arg1: javax.xml.namespace.QName): boolean
                     }
                     class SOAP12ExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.SOAPExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>)
                         public getNamespaceURI(): java.lang.String
                         protected getAddressQName(): javax.xml.namespace.QName
                         protected getBindingQName(): javax.xml.namespace.QName
                         protected getSOAPBinding(arg0: org.xml.sax.Locator): com.sun.tools.internal.ws.wsdl.document.soap.SOAPBinding
                         protected getBodyQName(): javax.xml.namespace.QName
                         protected getFaultQName(): javax.xml.namespace.QName
                         protected getHeaderfaultQName(): javax.xml.namespace.QName
                         protected getHeaderQName(): javax.xml.namespace.QName
                         protected getOperationQName(): javax.xml.namespace.QName
                     }
                     class Policy15ExtensionHandler extends com.sun.tools.internal.ws.api.wsdl.TWSDLExtensionHandler {
                         public constructor()
                         public getNamespaceURI(): java.lang.String
                         public handlePortTypeExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleDefinitionsExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOperationExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleServiceExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class Policy12ExtensionHandler extends com.sun.tools.internal.ws.api.wsdl.TWSDLExtensionHandler {
                         public constructor()
                         public getNamespaceURI(): java.lang.String
                         public handlePortTypeExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleDefinitionsExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOperationExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleServiceExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class NamespaceContextImpl implements javax.xml.namespace.NamespaceContext {
                         public constructor(arg0: org.w3c.dom.Element)
                         public getNamespaceURI(arg0: java.lang.String): java.lang.String
                         public getPrefix(arg0: java.lang.String): java.lang.String
                         public getPrefixes(arg0: java.lang.String): java.util.Iterator
                     }
                     class MemberSubmissionAddressingExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.W3CAddressingExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver, arg2: boolean)
                         public getNamespaceURI(): java.lang.String
                         protected getWSDLExtensionQName(): javax.xml.namespace.QName
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class MIMEExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>)
                         public getNamespaceURI(): java.lang.String
                         public doHandleExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected handleInputOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected handleMIMEPartExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         protected parseMIMEContent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: org.w3c.dom.Element): com.sun.tools.internal.ws.wsdl.document.mime.MIMEContent
                         protected parseMIMEXml(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: org.w3c.dom.Element): com.sun.tools.internal.ws.wsdl.document.mime.MIMEXml
                     }
                     class JAXWSBindingExtensionHandler$1 extends com.sun.tools.internal.ws.wsdl.parser.ContextClassloaderLocal<javax.xml.xpath.XPathFactory> {
                         constructor()
                         initialValue<T>(...args: any[]): any
                     }
                     class JAXWSBindingExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>)
                         public getNamespaceURI(): java.lang.String
                         public handleDefinitionsExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortTypeExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOperationExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleServiceExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class ContextClassloaderLocal$1 implements java.security.PrivilegedAction {
                         constructor()
                         public run(): java.lang.Object
                     }
                     abstract class ContextClassloaderLocal<V> {
                         constructor()
                         public get(): V
                         public set(arg0: V): void
                         protected initialValue(): V
                     }
                     class Internalizer$1 extends com.sun.tools.internal.ws.wsdl.parser.ContextClassloaderLocal<javax.xml.xpath.XPathFactory> {
                         constructor()
                         initialValue<T>(...args: any[]): any
                     }
                     class Internalizer$2 implements javax.xml.namespace.NamespaceContext {
                         this$0: com.sun.tools.internal.ws.wsdl.parser.Internalizer
                         constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.Internalizer)
                         public getNamespaceURI(arg0: java.lang.String): java.lang.String
                         public getPrefix(arg0: java.lang.String): java.lang.String
                         public getPrefixes(arg0: java.lang.String): java.util.Iterator
                     }
                     class Internalizer {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public transform(): void
                         public refineSchemaTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                         public refineWSDLTarget(arg0: org.w3c.dom.Element): org.w3c.dom.Element
                         static fixNull(arg0: java.lang.String): java.lang.String
                     }
                     class HTTPExtensionHandler extends com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler {
                         public constructor(arg0: java.util.Map<java.lang.String, com.sun.tools.internal.ws.wsdl.parser.AbstractExtensionHandler>)
                         public getNamespaceURI(): java.lang.String
                         public handleDefinitionsExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleTypesExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOperationExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleServiceExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortTypeExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     class DOMForestScanner$LocationResolver extends org.xml.sax.helpers.XMLFilterImpl implements org.xml.sax.Locator {
                         this$0: com.sun.tools.internal.ws.wsdl.parser.DOMForestScanner
                         constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForestScanner, arg1: com.sun.xml.internal.bind.unmarshaller.DOMScanner)
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public getColumnNumber(): int
                         public getLineNumber(): int
                         public getPublicId(): java.lang.String
                         public getSystemId(): java.lang.String
                     }
                     class DOMForestScanner {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest)
                         scan<T>(...args: any[]): any
                         static access$000(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForestScanner): com.sun.tools.internal.ws.wsdl.parser.DOMForest
                     }
                     class DOMForestParser implements com.sun.xml.internal.xsom.parser.XMLParser {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest, arg1: com.sun.xml.internal.xsom.parser.XMLParser)
                         parse<T>(...args: any[]): any
                     }
                     class DOMBuilder extends com.sun.xml.internal.bind.marshaller.SAX2DOMEx implements org.xml.sax.ext.LexicalHandler {
                         public constructor(arg0: org.w3c.dom.Document, arg1: com.sun.tools.internal.xjc.reader.internalizer.LocatorTable, arg2: java.util.Set)
                         public setDocumentLocator(arg0: org.xml.sax.Locator): void
                         public startElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: org.xml.sax.Attributes): void
                         public endElement(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public startDTD(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): void
                         public endDTD(): void
                         public startEntity(arg0: java.lang.String): void
                         public endEntity(arg0: java.lang.String): void
                         public startCDATA(): void
                         public endCDATA(): void
                         public comment(arg0: char[], arg1: int, arg2: int): void
                     }
                     interface Constants {
                         public static TAG_BINDING: java.lang.String
                         public static TAG_DEFINITIONS: java.lang.String
                         public static TAG_DOCUMENTATION: java.lang.String
                         public static TAG_MESSAGE: java.lang.String
                         public static TAG_PART: java.lang.String
                         public static TAG_PORT_TYPE: java.lang.String
                         public static TAG_TYPES: java.lang.String
                         public static TAG_OPERATION: java.lang.String
                         public static TAG_INPUT: java.lang.String
                         public static TAG_OUTPUT: java.lang.String
                         public static TAG_FAULT: java.lang.String
                         public static TAG_SERVICE: java.lang.String
                         public static TAG_PORT: java.lang.String
                         public static TAG_: java.lang.String
                         public static ATTR_ELEMENT: java.lang.String
                         public static ATTR_NAME: java.lang.String
                         public static ATTR_REQUIRED: java.lang.String
                         public static ATTR_TARGET_NAMESPACE: java.lang.String
                         public static ATTR_TYPE: java.lang.String
                         public static ATTR_MESSAGE: java.lang.String
                         public static ATTR_BINDING: java.lang.String
                         public static ATTR_LOCATION: java.lang.String
                         public static ATTR_TRANSPORT: java.lang.String
                         public static ATTR_STYLE: java.lang.String
                         public static ATTR_USE: java.lang.String
                         public static ATTR_NAMESPACE: java.lang.String
                         public static ATTR_ENCODING_STYLE: java.lang.String
                         public static ATTR_PART: java.lang.String
                         public static ATTR_PARTS: java.lang.String
                         public static ATTR_SOAP_ACTION: java.lang.String
                         public static ATTR_PARAMETER_ORDER: java.lang.String
                         public static ATTR_VERB: java.lang.String
                         public static ATTR_ID: java.lang.String
                         public static ATTR_VERSION: java.lang.String
                         public static ATTR_ATTRIBUTE_FORM_DEFAULT: java.lang.String
                         public static ATTR_BLOCK_DEFAULT: java.lang.String
                         public static ATTR_ELEMENT_FORM_DEFAULT: java.lang.String
                         public static ATTR_FINAL_DEFAULT: java.lang.String
                         public static ATTR_ABSTRACT: java.lang.String
                         public static ATTR_NILLABLE: java.lang.String
                         public static ATTR_DEFAULT: java.lang.String
                         public static ATTR_FIXED: java.lang.String
                         public static ATTR_FORM: java.lang.String
                         public static ATTR_BLOCK: java.lang.String
                         public static ATTR_FINAL: java.lang.String
                         public static ATTR_REF: java.lang.String
                         public static ATTR_SUBSTITUTION_GROUP: java.lang.String
                         public static ATTR_MIN_OCCURS: java.lang.String
                         public static ATTR_MAX_OCCURS: java.lang.String
                         public static ATTR_PROCESS_CONTENTS: java.lang.String
                         public static ATTR_MIXED: java.lang.String
                         public static ATTR_BASE: java.lang.String
                         public static ATTR_VALUE: java.lang.String
                         public static ATTR_XPATH: java.lang.String
                         public static ATTR_SCHEMA_LOCATION: java.lang.String
                         public static ATTR_REFER: java.lang.String
                         public static ATTR_ITEM_TYPE: java.lang.String
                         public static ATTR_PUBLIC: java.lang.String
                         public static ATTR_SYSTEM: java.lang.String
                         public static ATTR_MEMBER_TYPES: java.lang.String
                         public static ATTR_: java.lang.String
                         public static ATTRVALUE_RPC: java.lang.String
                         public static ATTRVALUE_DOCUMENT: java.lang.String
                         public static ATTRVALUE_LITERAL: java.lang.String
                         public static ATTRVALUE_ENCODED: java.lang.String
                         public static ATTRVALUE_QUALIFIED: java.lang.String
                         public static ATTRVALUE_UNQUALIFIED: java.lang.String
                         public static ATTRVALUE_ALL: java.lang.String
                         public static ATTRVALUE_SUBSTITUTION: java.lang.String
                         public static ATTRVALUE_EXTENSION: java.lang.String
                         public static ATTRVALUE_RESTRICTION: java.lang.String
                         public static ATTRVALUE_LIST: java.lang.String
                         public static ATTRVALUE_UNION: java.lang.String
                         public static ATTRVALUE_UNBOUNDED: java.lang.String
                         public static ATTRVALUE_PROHIBITED: java.lang.String
                         public static ATTRVALUE_OPTIONAL: java.lang.String
                         public static ATTRVALUE_REQUIRED: java.lang.String
                         public static ATTRVALUE_LAX: java.lang.String
                         public static ATTRVALUE_SKIP: java.lang.String
                         public static ATTRVALUE_STRICT: java.lang.String
                         public static ATTRVALUE_ANY: java.lang.String
                         public static ATTRVALUE_LOCAL: java.lang.String
                         public static ATTRVALUE_OTHER: java.lang.String
                         public static ATTRVALUE_TARGET_NAMESPACE: java.lang.String
                         public static ATTRVALUE_: java.lang.String
                         public static NS_XML: java.lang.String
                         public static NS_XMLNS: java.lang.String
                         public static NS_WSDL: java.lang.String
                         public static NS_WSDL_SOAP: java.lang.String
                         public static NS_WSDL_SOAP12: java.lang.String
                         public static NS_WSDL_HTTP: java.lang.String
                         public static NS_WSDL_MIME: java.lang.String
                         public static NS_XSD: java.lang.String
                         public static NS_XSI: java.lang.String
                         public static NS_: java.lang.String
                         public static XMLNS: java.lang.String
                         public static TRUE: java.lang.String
                         public static FALSE: java.lang.String
                     }

                  }
                  namespace framework {
                     interface ParserListener {
                         public ignoringExtension(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity, arg1: javax.xml.namespace.QName, arg2: javax.xml.namespace.QName): void
                         public doneParsingEntity(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                     }
                     class AbstractDocument$LocallyValidatingAction implements com.sun.tools.internal.ws.wsdl.framework.EntityAction {
                         public constructor()
                         public perform(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                         public getException(): com.sun.tools.internal.ws.wsdl.framework.ValidationException
                     }
                     abstract class AbstractDocument {
                         protected forest: com.sun.tools.internal.ws.wsdl.parser.DOMForest
                         protected errReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiver
                         protected constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getSystemId(): java.lang.String
                         public setSystemId(arg0: java.lang.String): void
                         public addIncludedDocument(arg0: java.lang.String): void
                         public isIncludedDocument(arg0: java.lang.String): boolean
                         public addIncludedEntity(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                         public addImportedDocument(arg0: java.lang.String): void
                         public isImportedDocument(arg0: java.lang.String): boolean
                         public addImportedEntity(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public getMap(arg0: com.sun.tools.internal.ws.wsdl.framework.Kind): java.util.Map
                         public define(arg0: com.sun.tools.internal.ws.wsdl.framework.GloballyKnown): void
                         public find(arg0: com.sun.tools.internal.ws.wsdl.framework.Kind, arg1: javax.xml.namespace.QName): com.sun.tools.internal.ws.wsdl.framework.GloballyKnown
                         public validateLocally(): void
                         public validate(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceValidator): void
                         protected getRoot(): com.sun.tools.internal.ws.wsdl.framework.Entity
                     }
                     class TWSDLParserContextImpl implements com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.DOMForest, arg1: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument, arg2: java.util.ArrayList<com.sun.tools.internal.ws.wsdl.framework.ParserListener>, arg3: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getDocument(): com.sun.tools.internal.ws.wsdl.framework.AbstractDocument
                         public getFollowImports(): boolean
                         public setFollowImports(arg0: boolean): void
                         public push(): void
                         public pop(): void
                         public getNamespaceURI(arg0: java.lang.String): java.lang.String
                         public getPrefixes(): java.lang.Iterable<java.lang.String>
                         public getDefaultNamespaceURI(): java.lang.String
                         public registerNamespaces(arg0: org.w3c.dom.Element): void
                         public getLocation(arg0: org.w3c.dom.Element): org.xml.sax.Locator
                         public translateQualifiedName(arg0: org.xml.sax.Locator, arg1: java.lang.String): javax.xml.namespace.QName
                         public fireIgnoringExtension(arg0: org.w3c.dom.Element, arg1: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                         public fireDoneParsingEntity(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                         public pushWSDLLocation(): void
                         public popWSDLLocation(): void
                         public setWSDLLocation(arg0: java.lang.String): void
                         public getWSDLLocation(): java.lang.String
                     }
                     abstract class Entity implements com.sun.tools.internal.ws.wsdl.framework.Elemental {
                         protected errorReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiver
                         public constructor(arg0: org.xml.sax.Locator)
                         public setErrorReceiver(arg0: com.sun.tools.internal.ws.wscompile.ErrorReceiver): void
                         public getLocator(): org.xml.sax.Locator
                         public getProperty(arg0: java.lang.String): java.lang.Object
                         public setProperty(arg0: java.lang.String, arg1: java.lang.Object): void
                         public removeProperty(arg0: java.lang.String): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public validateThis(): void
                         failValidation<T>(...args: any[]): any
                     }
                     interface Elemental {
                         public getElementName(): javax.xml.namespace.QName
                         public getLocator(): org.xml.sax.Locator
                     }
                     interface Defining extends com.sun.tools.internal.ws.wsdl.framework.Elemental {
                         public getTargetNamespaceURI(): java.lang.String
                     }
                     abstract class GlobalEntity extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.wsdl.framework.GloballyKnown {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Defining, arg1: org.xml.sax.Locator, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getDefining(): com.sun.tools.internal.ws.wsdl.framework.Defining
                     }
                     interface GloballyKnown extends com.sun.tools.internal.ws.wsdl.framework.Elemental {
                         public getName(): java.lang.String
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getDefining(): com.sun.tools.internal.ws.wsdl.framework.Defining
                     }
                     interface ExtensionVisitor {
                         public preVisit(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public postVisit(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                     }
                     interface EntityReferenceValidator {
                         public isValid(arg0: com.sun.tools.internal.ws.wsdl.framework.Kind, arg1: javax.xml.namespace.QName): boolean
                     }
                     interface EntityAction {
                         public perform(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                     }
                     class Kind {
                         public constructor(arg0: java.lang.String)
                         public getName(): java.lang.String
                     }
                     class WSDLLocation$LocationContext {
                         setLocation(arg0: java.lang.String): void
                         getLocation(): java.lang.String
                         constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.WSDLLocation$1)
                     }
                     class WSDLLocation$1 {
                     }
                     class WSDLLocation {
                         constructor()
                         public push(): void
                         public pop(): void
                         public reset(): void
                         public getLocation(): java.lang.String
                         public setLocation(arg0: java.lang.String): void
                     }
                     class ExtensibilityHelper {
                         public constructor()
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitor): void
                     }
                     interface QNameAction {
                         public perform(arg0: javax.xml.namespace.QName): void
                     }
                     interface EntityReferenceAction {
                         public perform(arg0: com.sun.tools.internal.ws.wsdl.framework.Kind, arg1: javax.xml.namespace.QName): void
                     }
                     abstract class ExtensionImpl extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtension {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitor): void
                     }
                     class ValidationException extends com.sun.xml.internal.ws.util.exception.JAXWSExceptionBase {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }
                     class ParseException extends com.sun.xml.internal.ws.util.exception.JAXWSExceptionBase {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }
                     class NoSuchEntityException extends com.sun.tools.internal.ws.wsdl.framework.ValidationException {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }
                     interface Identifiable extends com.sun.tools.internal.ws.wsdl.framework.Elemental {
                         public getID(): java.lang.String
                     }
                     class ExternalEntityReference {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument, arg1: com.sun.tools.internal.ws.wsdl.framework.Kind, arg2: javax.xml.namespace.QName)
                         public getDocument(): com.sun.tools.internal.ws.wsdl.framework.AbstractDocument
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getName(): javax.xml.namespace.QName
                         public resolve(): com.sun.tools.internal.ws.wsdl.framework.GloballyKnown
                     }
                     class ExtensionVisitorBase implements com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitor {
                         public constructor()
                         public preVisit(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public postVisit(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                     }
                     class DuplicateEntityException extends com.sun.tools.internal.ws.wsdl.framework.ValidationException {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }

                  }
                  namespace document {
                     class WSDLDocument$GloballyValidatingAction implements com.sun.tools.internal.ws.wsdl.framework.EntityAction , com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument, arg1: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceValidator)
                         perform<T>(...args: any[]): any
                         public getException(): com.sun.tools.internal.ws.wsdl.framework.ValidationException
                     }
                     class WSDLDocument extends com.sun.tools.internal.ws.wsdl.framework.AbstractDocument {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getDefinitions(): com.sun.tools.internal.ws.wsdl.document.Definitions
                         public setDefinitions(arg0: com.sun.tools.internal.ws.wsdl.document.Definitions): void
                         public getAllServiceQNames(): javax.xml.namespace.QName[]
                         public getAllPortQNames(): javax.xml.namespace.QName[]
                         public getPortQNames(arg0: java.lang.String): javax.xml.namespace.QName[]
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validate(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceValidator): void
                         protected getRoot(): com.sun.tools.internal.ws.wsdl.framework.Entity
                     }
                     class Definitions extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.wsdl.framework.Defining , com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument, arg1: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getTargetNamespaceURI(): java.lang.String
                         public setTargetNamespaceURI(arg0: java.lang.String): void
                         public setTypes(arg0: com.sun.tools.internal.ws.wsdl.document.Types): void
                         public getTypes(): com.sun.tools.internal.ws.wsdl.document.Types
                         add<T>(...args: any[]): any
                         public addServiceOveride(arg0: com.sun.tools.internal.ws.wsdl.document.Service): void
                         public imports(): java.util.Iterator
                         public messages(): java.util.Iterator
                         public portTypes(): java.util.Iterator
                         public bindings(): java.util.Iterator
                         public services(): java.util.Iterator<com.sun.tools.internal.ws.wsdl.document.Service>
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public resolveBindings(): java.util.Map
                         public getElementName(): javax.xml.namespace.QName
                     }
                     class Message extends com.sun.tools.internal.ws.wsdl.framework.GlobalEntity {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Defining, arg1: org.xml.sax.Locator, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public add(arg0: com.sun.tools.internal.ws.wsdl.document.MessagePart): void
                         public parts(): java.util.Iterator<com.sun.tools.internal.ws.wsdl.document.MessagePart>
                         public getParts(): java.util.List<com.sun.tools.internal.ws.wsdl.document.MessagePart>
                         public getPart(arg0: java.lang.String): com.sun.tools.internal.ws.wsdl.document.MessagePart
                         public numParts(): int
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                     }
                     class MessagePart extends com.sun.tools.internal.ws.wsdl.framework.Entity {
                         public static SOAP_BODY_BINDING: int
                         public static SOAP_HEADER_BINDING: int
                         public static SOAP_HEADERFAULT_BINDING: int
                         public static SOAP_FAULT_BINDING: int
                         public static WSDL_MIME_BINDING: int
                         public static PART_NOT_BOUNDED: int
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getDescriptor(): javax.xml.namespace.QName
                         public setDescriptor(arg0: javax.xml.namespace.QName): void
                         public getDescriptorKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public setDescriptorKind(arg0: com.sun.tools.internal.ws.wsdl.framework.Kind): void
                         public getElementName(): javax.xml.namespace.QName
                         public getBindingExtensibilityElementKind(): int
                         public setBindingExtensibilityElementKind(arg0: int): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public setMode(arg0: javax.jws.WebParam$Mode): void
                         public getMode(): javax.jws.WebParam$Mode
                         public isINOUT(): boolean
                         public isIN(): boolean
                         public isOUT(): boolean
                         public setReturn(arg0: boolean): void
                         public isReturn(): boolean
                     }
                     class PortType extends com.sun.tools.internal.ws.wsdl.framework.GlobalEntity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Defining, arg1: org.xml.sax.Locator, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public add(arg0: com.sun.tools.internal.ws.wsdl.document.Operation): void
                         public operations(): java.util.Iterator
                         public getOperationsNamed(arg0: java.lang.String): java.util.Set
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                     }
                     class Operation extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLOperation {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getUniqueKey(): java.lang.String
                         public getStyle(): com.sun.tools.internal.ws.wsdl.document.OperationStyle
                         public setStyle(arg0: com.sun.tools.internal.ws.wsdl.document.OperationStyle): void
                         public getInput(): com.sun.tools.internal.ws.wsdl.document.Input
                         public setInput(arg0: com.sun.tools.internal.ws.wsdl.document.Input): void
                         public getOutput(): com.sun.tools.internal.ws.wsdl.document.Output
                         public setOutput(arg0: com.sun.tools.internal.ws.wsdl.document.Output): void
                         public addFault(arg0: com.sun.tools.internal.ws.wsdl.document.Fault): void
                         public faults(): java.lang.Iterable<com.sun.tools.internal.ws.wsdl.document.Fault>
                         public getParameterOrder(): java.lang.String
                         public setParameterOrder(arg0: java.lang.String): void
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public getFaults(): java.util.Map<java.lang.String, com.sun.codemodel.internal.JClass>
                         public putFault(arg0: java.lang.String, arg1: com.sun.codemodel.internal.JClass): void
                     }
                     class Binding extends com.sun.tools.internal.ws.wsdl.framework.GlobalEntity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Defining, arg1: org.xml.sax.Locator, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public add(arg0: com.sun.tools.internal.ws.wsdl.document.BindingOperation): void
                         public operations(): java.util.Iterator
                         public getPortType(): javax.xml.namespace.QName
                         public setPortType(arg0: javax.xml.namespace.QName): void
                         public resolvePortType(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument): com.sun.tools.internal.ws.wsdl.document.PortType
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                     }
                     class BindingOperation extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getUniqueKey(): java.lang.String
                         public getStyle(): com.sun.tools.internal.ws.wsdl.document.OperationStyle
                         public setStyle(arg0: com.sun.tools.internal.ws.wsdl.document.OperationStyle): void
                         public getInput(): com.sun.tools.internal.ws.wsdl.document.BindingInput
                         public setInput(arg0: com.sun.tools.internal.ws.wsdl.document.BindingInput): void
                         public getOutput(): com.sun.tools.internal.ws.wsdl.document.BindingOutput
                         public setOutput(arg0: com.sun.tools.internal.ws.wsdl.document.BindingOutput): void
                         public addFault(arg0: com.sun.tools.internal.ws.wsdl.document.BindingFault): void
                         public faults(): java.lang.Iterable<com.sun.tools.internal.ws.wsdl.document.BindingFault>
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                     }
                     class Import extends com.sun.tools.internal.ws.wsdl.framework.Entity {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getNamespace(): java.lang.String
                         public setNamespace(arg0: java.lang.String): void
                         public getLocation(): java.lang.String
                         public setLocation(arg0: java.lang.String): void
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                     }
                     class Service extends com.sun.tools.internal.ws.wsdl.framework.GlobalEntity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Defining, arg1: org.xml.sax.Locator, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public add(arg0: com.sun.tools.internal.ws.wsdl.document.Port): void
                         public ports(): java.util.Iterator<com.sun.tools.internal.ws.wsdl.document.Port>
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                     }
                     class Port extends com.sun.tools.internal.ws.wsdl.framework.GlobalEntity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Defining, arg1: org.xml.sax.Locator, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getService(): com.sun.tools.internal.ws.wsdl.document.Service
                         public setService(arg0: com.sun.tools.internal.ws.wsdl.document.Service): void
                         public getBinding(): javax.xml.namespace.QName
                         public setBinding(arg0: javax.xml.namespace.QName): void
                         public resolveBinding(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument): com.sun.tools.internal.ws.wsdl.document.Binding
                         public getKind(): com.sun.tools.internal.ws.wsdl.framework.Kind
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public getElementName(): javax.xml.namespace.QName
                     }
                     class Documentation {
                         public constructor(arg0: java.lang.String)
                         public getContent(): java.lang.String
                         public setContent(arg0: java.lang.String): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                     }
                     interface WSDLDocumentVisitor extends com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitor {
                         preVisit<T>(...args: any[]): any
                         postVisit<T>(...args: any[]): any
                         visit<T>(...args: any[]): any
                     }
                     class Types extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         accept<T>(...args: any[]): any
                         public validateThis(): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                     }
                     class OperationStyle {
                         public static ONE_WAY: com.sun.tools.internal.ws.wsdl.document.OperationStyle
                         public static REQUEST_RESPONSE: com.sun.tools.internal.ws.wsdl.document.OperationStyle
                         public static SOLICIT_RESPONSE: com.sun.tools.internal.ws.wsdl.document.OperationStyle
                         public static NOTIFICATION: com.sun.tools.internal.ws.wsdl.document.OperationStyle
                     }
                     class Input extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getMessage(): javax.xml.namespace.QName
                         public setMessage(arg0: javax.xml.namespace.QName): void
                         public resolveMessage(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument): com.sun.tools.internal.ws.wsdl.document.Message
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public getNamespaceURI(): java.lang.String
                         public getNameValue(): java.lang.String
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getAction(): java.lang.String
                         public setAction(arg0: java.lang.String): void
                     }
                     class Output extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getMessage(): javax.xml.namespace.QName
                         public setMessage(arg0: javax.xml.namespace.QName): void
                         public resolveMessage(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument): com.sun.tools.internal.ws.wsdl.document.Message
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public getNamespaceURI(): java.lang.String
                         public getNameValue(): java.lang.String
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getAction(): java.lang.String
                         public setAction(arg0: java.lang.String): void
                     }
                     class Fault extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getMessage(): javax.xml.namespace.QName
                         public setMessage(arg0: javax.xml.namespace.QName): void
                         public resolveMessage(arg0: com.sun.tools.internal.ws.wsdl.framework.AbstractDocument): com.sun.tools.internal.ws.wsdl.document.Message
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                         public withAllEntityReferencesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityReferenceAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                         public getAction(): java.lang.String
                         public setAction(arg0: java.lang.String): void
                     }
                     class BindingInput extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                     }
                     class BindingOutput extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                     }
                     class BindingFault extends com.sun.tools.internal.ws.wsdl.framework.Entity implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public constructor(arg0: org.xml.sax.Locator)
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getElementName(): javax.xml.namespace.QName
                         public getDocumentation(): com.sun.tools.internal.ws.wsdl.document.Documentation
                         public setDocumentation(arg0: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                         public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                         public accept(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocumentVisitor): void
                         public validateThis(): void
                         public setParent(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): void
                     }
                     namespace soap {
                        class SOAPStyle {
                            public static RPC: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                            public static DOCUMENT: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                        }
                        class SOAPUse {
                            public static LITERAL: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                            public static ENCODED: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                        }
                        class SOAPBinding extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getTransport(): java.lang.String
                            public setTransport(arg0: java.lang.String): void
                            public getStyle(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                            public setStyle(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle): void
                            public isDocument(): boolean
                            public isRPC(): boolean
                            public validateThis(): void
                        }
                        class SOAPHeader extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public add(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPHeaderFault): void
                            public faults(): java.util.Iterator
                            public getElementName(): javax.xml.namespace.QName
                            public getNamespace(): java.lang.String
                            public setNamespace(arg0: java.lang.String): void
                            public getUse(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                            public setUse(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse): void
                            public isEncoded(): boolean
                            public isLiteral(): boolean
                            public getEncodingStyle(): java.lang.String
                            public setEncodingStyle(arg0: java.lang.String): void
                            public getPart(): java.lang.String
                            public setMessage(arg0: javax.xml.namespace.QName): void
                            public getMessage(): javax.xml.namespace.QName
                            public setPart(arg0: java.lang.String): void
                            public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                            public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                            public accept(arg0: com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitor): void
                            public validateThis(): void
                        }
                        class SOAPHeaderFault extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getNamespace(): java.lang.String
                            public setNamespace(arg0: java.lang.String): void
                            public getUse(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                            public setUse(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse): void
                            public isEncoded(): boolean
                            public isLiteral(): boolean
                            public getEncodingStyle(): java.lang.String
                            public setEncodingStyle(arg0: java.lang.String): void
                            public getPart(): java.lang.String
                            public setMessage(arg0: javax.xml.namespace.QName): void
                            public getMessage(): javax.xml.namespace.QName
                            public setPart(arg0: java.lang.String): void
                            public withAllQNamesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.QNameAction): void
                            public validateThis(): void
                        }
                        class SOAPOperation extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getSOAPAction(): java.lang.String
                            public setSOAPAction(arg0: java.lang.String): void
                            public getStyle(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                            public setStyle(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle): void
                            public isDocument(): boolean
                            public isRPC(): boolean
                            public validateThis(): void
                        }
                        class SOAPFault extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                            public getNamespace(): java.lang.String
                            public setNamespace(arg0: java.lang.String): void
                            public getUse(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                            public setUse(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse): void
                            public isEncoded(): boolean
                            public isLiteral(): boolean
                            public getEncodingStyle(): java.lang.String
                            public setEncodingStyle(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        interface SOAPConstants {
                            public static URI_ENVELOPE: java.lang.String
                            public static NS_WSDL_SOAP: java.lang.String
                            public static NS_SOAP_ENCODING: java.lang.String
                            public static URI_SOAP_TRANSPORT_HTTP: java.lang.String
                            public static QNAME_ADDRESS: javax.xml.namespace.QName
                            public static QNAME_BINDING: javax.xml.namespace.QName
                            public static QNAME_BODY: javax.xml.namespace.QName
                            public static QNAME_FAULT: javax.xml.namespace.QName
                            public static QNAME_HEADER: javax.xml.namespace.QName
                            public static QNAME_HEADERFAULT: javax.xml.namespace.QName
                            public static QNAME_OPERATION: javax.xml.namespace.QName
                            public static QNAME_MUSTUNDERSTAND: javax.xml.namespace.QName
                            public static QNAME_TYPE_ARRAY: javax.xml.namespace.QName
                            public static QNAME_ATTR_GROUP_COMMON_ATTRIBUTES: javax.xml.namespace.QName
                            public static QNAME_ATTR_ARRAY_TYPE: javax.xml.namespace.QName
                            public static QNAME_ATTR_OFFSET: javax.xml.namespace.QName
                            public static QNAME_ATTR_POSITION: javax.xml.namespace.QName
                            public static QNAME_TYPE_BASE64: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_STRING: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NORMALIZED_STRING: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_TOKEN: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_BYTE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_BYTE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_BASE64_BINARY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_HEX_BINARY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NON_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NON_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_INT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_INT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_LONG: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_LONG: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_SHORT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_SHORT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DECIMAL: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_FLOAT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DOUBLE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_BOOLEAN: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_TIME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DATE_TIME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DURATION: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DATE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_MONTH: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_YEAR: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_YEAR_MONTH: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_DAY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_MONTH_DAY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NAME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_QNAME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NCNAME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ANY_URI: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ID: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_IDREF: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_IDREFS: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ENTITY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ENTITIES: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NOTATION: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NMTOKEN: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NMTOKENS: javax.xml.namespace.QName
                            public static QNAME_TYPE_STRING: javax.xml.namespace.QName
                            public static QNAME_TYPE_NORMALIZED_STRING: javax.xml.namespace.QName
                            public static QNAME_TYPE_TOKEN: javax.xml.namespace.QName
                            public static QNAME_TYPE_BYTE: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_BYTE: javax.xml.namespace.QName
                            public static QNAME_TYPE_BASE64_BINARY: javax.xml.namespace.QName
                            public static QNAME_TYPE_HEX_BINARY: javax.xml.namespace.QName
                            public static QNAME_TYPE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NON_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NON_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_INT: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_INT: javax.xml.namespace.QName
                            public static QNAME_TYPE_LONG: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_LONG: javax.xml.namespace.QName
                            public static QNAME_TYPE_SHORT: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_SHORT: javax.xml.namespace.QName
                            public static QNAME_TYPE_DECIMAL: javax.xml.namespace.QName
                            public static QNAME_TYPE_FLOAT: javax.xml.namespace.QName
                            public static QNAME_TYPE_DOUBLE: javax.xml.namespace.QName
                            public static QNAME_TYPE_BOOLEAN: javax.xml.namespace.QName
                            public static QNAME_TYPE_TIME: javax.xml.namespace.QName
                            public static QNAME_TYPE_DATE_TIME: javax.xml.namespace.QName
                            public static QNAME_TYPE_DURATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_DATE: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_MONTH: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_YEAR: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_YEAR_MONTH: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_DAY: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_MONTH_DAY: javax.xml.namespace.QName
                            public static QNAME_TYPE_NAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_QNAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_NCNAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_ANY_URI: javax.xml.namespace.QName
                            public static QNAME_TYPE_ID: javax.xml.namespace.QName
                            public static QNAME_TYPE_IDREF: javax.xml.namespace.QName
                            public static QNAME_TYPE_IDREFS: javax.xml.namespace.QName
                            public static QNAME_TYPE_ENTITY: javax.xml.namespace.QName
                            public static QNAME_TYPE_ENTITIES: javax.xml.namespace.QName
                            public static QNAME_TYPE_NOTATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_NMTOKEN: javax.xml.namespace.QName
                            public static QNAME_TYPE_NMTOKENS: javax.xml.namespace.QName
                            public static QNAME_TYPE_LANGUAGE: javax.xml.namespace.QName
                            public static QNAME_ATTR_ID: javax.xml.namespace.QName
                            public static QNAME_ATTR_HREF: javax.xml.namespace.QName
                        }
                        class SOAPBody extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getNamespace(): java.lang.String
                            public setNamespace(arg0: java.lang.String): void
                            public getUse(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                            public setUse(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse): void
                            public isEncoded(): boolean
                            public isLiteral(): boolean
                            public getEncodingStyle(): java.lang.String
                            public setEncodingStyle(arg0: java.lang.String): void
                            public getParts(): java.lang.String
                            public setParts(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        class SOAPAddress extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getLocation(): java.lang.String
                            public setLocation(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        interface SOAP12Constants {
                            public static NS_WSDL_SOAP: java.lang.String
                            public static NS_SOAP_ENCODING: java.lang.String
                            public static URI_SOAP_TRANSPORT_HTTP: java.lang.String
                            public static QNAME_ADDRESS: javax.xml.namespace.QName
                            public static QNAME_BINDING: javax.xml.namespace.QName
                            public static QNAME_BODY: javax.xml.namespace.QName
                            public static QNAME_FAULT: javax.xml.namespace.QName
                            public static QNAME_HEADER: javax.xml.namespace.QName
                            public static QNAME_HEADERFAULT: javax.xml.namespace.QName
                            public static QNAME_OPERATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_ARRAY: javax.xml.namespace.QName
                            public static QNAME_ATTR_GROUP_COMMON_ATTRIBUTES: javax.xml.namespace.QName
                            public static QNAME_ATTR_ARRAY_TYPE: javax.xml.namespace.QName
                            public static QNAME_ATTR_ITEM_TYPE: javax.xml.namespace.QName
                            public static QNAME_ATTR_ARRAY_SIZE: javax.xml.namespace.QName
                            public static QNAME_ATTR_OFFSET: javax.xml.namespace.QName
                            public static QNAME_ATTR_POSITION: javax.xml.namespace.QName
                            public static QNAME_TYPE_BASE64: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_STRING: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NORMALIZED_STRING: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_TOKEN: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_BYTE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_BYTE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_BASE64_BINARY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_HEX_BINARY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NON_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NON_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_INT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_INT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_LONG: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_LONG: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_SHORT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_UNSIGNED_SHORT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DECIMAL: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_FLOAT: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DOUBLE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_BOOLEAN: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_TIME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DATE_TIME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DURATION: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_DATE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_MONTH: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_YEAR: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_YEAR_MONTH: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_DAY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_G_MONTH_DAY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NAME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_QNAME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NCNAME: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ANY_URI: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ID: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_IDREF: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_IDREFS: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ENTITY: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_ENTITIES: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NOTATION: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NMTOKEN: javax.xml.namespace.QName
                            public static QNAME_ELEMENT_NMTOKENS: javax.xml.namespace.QName
                            public static QNAME_TYPE_STRING: javax.xml.namespace.QName
                            public static QNAME_TYPE_NORMALIZED_STRING: javax.xml.namespace.QName
                            public static QNAME_TYPE_TOKEN: javax.xml.namespace.QName
                            public static QNAME_TYPE_BYTE: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_BYTE: javax.xml.namespace.QName
                            public static QNAME_TYPE_BASE64_BINARY: javax.xml.namespace.QName
                            public static QNAME_TYPE_HEX_BINARY: javax.xml.namespace.QName
                            public static QNAME_TYPE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NON_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NON_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_INT: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_INT: javax.xml.namespace.QName
                            public static QNAME_TYPE_LONG: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_LONG: javax.xml.namespace.QName
                            public static QNAME_TYPE_SHORT: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_SHORT: javax.xml.namespace.QName
                            public static QNAME_TYPE_DECIMAL: javax.xml.namespace.QName
                            public static QNAME_TYPE_FLOAT: javax.xml.namespace.QName
                            public static QNAME_TYPE_DOUBLE: javax.xml.namespace.QName
                            public static QNAME_TYPE_BOOLEAN: javax.xml.namespace.QName
                            public static QNAME_TYPE_TIME: javax.xml.namespace.QName
                            public static QNAME_TYPE_DATE_TIME: javax.xml.namespace.QName
                            public static QNAME_TYPE_DURATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_DATE: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_MONTH: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_YEAR: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_YEAR_MONTH: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_DAY: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_MONTH_DAY: javax.xml.namespace.QName
                            public static QNAME_TYPE_NAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_QNAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_NCNAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_ANY_URI: javax.xml.namespace.QName
                            public static QNAME_TYPE_ID: javax.xml.namespace.QName
                            public static QNAME_TYPE_IDREF: javax.xml.namespace.QName
                            public static QNAME_TYPE_IDREFS: javax.xml.namespace.QName
                            public static QNAME_TYPE_ENTITY: javax.xml.namespace.QName
                            public static QNAME_TYPE_ENTITIES: javax.xml.namespace.QName
                            public static QNAME_TYPE_NOTATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_NMTOKEN: javax.xml.namespace.QName
                            public static QNAME_TYPE_NMTOKENS: javax.xml.namespace.QName
                            public static QNAME_TYPE_LANGUAGE: javax.xml.namespace.QName
                            public static QNAME_ATTR_ID: javax.xml.namespace.QName
                            public static QNAME_ATTR_HREF: javax.xml.namespace.QName
                        }
                        class SOAP12Binding extends com.sun.tools.internal.ws.wsdl.document.soap.SOAPBinding {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                        }

                     }
                     namespace mime {
                        class MIMEContent extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getPart(): java.lang.String
                            public setPart(arg0: java.lang.String): void
                            public getType(): java.lang.String
                            public setType(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        class MIMEXml extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getPart(): java.lang.String
                            public setPart(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        class MIMEPart extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl implements com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                            public getNameValue(): java.lang.String
                            public getNamespaceURI(): java.lang.String
                            public getWSDLElementName(): javax.xml.namespace.QName
                            public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                            public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                            public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                            public validateThis(): void
                        }
                        class MIMEMultipartRelated extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public add(arg0: com.sun.tools.internal.ws.wsdl.document.mime.MIMEPart): void
                            public getParts(): java.lang.Iterable<com.sun.tools.internal.ws.wsdl.document.mime.MIMEPart>
                            public withAllSubEntitiesDo(arg0: com.sun.tools.internal.ws.wsdl.framework.EntityAction): void
                            public accept(arg0: com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitor): void
                            public validateThis(): void
                        }
                        interface MIMEConstants {
                            public static NS_WSDL_MIME: java.lang.String
                            public static QNAME_CONTENT: javax.xml.namespace.QName
                            public static QNAME_MULTIPART_RELATED: javax.xml.namespace.QName
                            public static QNAME_PART: javax.xml.namespace.QName
                            public static QNAME_MIME_XML: javax.xml.namespace.QName
                        }

                     }
                     namespace jaxws {
                        class JAXWSBinding extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public validateThis(): void
                            public getElementName(): javax.xml.namespace.QName
                            public getWSDLElementName(): javax.xml.namespace.QName
                            public addExtension(arg0: com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl): void
                            public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl>
                            public isEnableAsyncMapping(): java.lang.Boolean
                            public setEnableAsyncMapping(arg0: java.lang.Boolean): void
                            public isEnableMimeContentMapping(): java.lang.Boolean
                            public setEnableMimeContentMapping(arg0: java.lang.Boolean): void
                            public isEnableWrapperStyle(): java.lang.Boolean
                            public setEnableWrapperStyle(arg0: java.lang.Boolean): void
                            public getJaxwsPackage(): com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName
                            public setJaxwsPackage(arg0: com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName): void
                            public getNode(): java.lang.String
                            public setNode(arg0: java.lang.String): void
                            public getVersion(): java.lang.String
                            public setVersion(arg0: java.lang.String): void
                            public getWsdlLocation(): java.lang.String
                            public setWsdlLocation(arg0: java.lang.String): void
                            public getWsdlNamespace(): java.lang.String
                            public setWsdlNamespace(arg0: java.lang.String): void
                            public getJaxbBindings(): java.util.Set<org.w3c.dom.Element>
                            public addJaxbBindings(arg0: org.w3c.dom.Element): void
                            public isProvider(): java.lang.Boolean
                            public setProvider(arg0: java.lang.Boolean): void
                            public getMethodName(): com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName
                            public setMethodName(arg0: com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName): void
                            public parameters(): java.util.Iterator<com.sun.tools.internal.ws.wsdl.document.jaxws.Parameter>
                            public addParameter(arg0: com.sun.tools.internal.ws.wsdl.document.jaxws.Parameter): void
                            public getParameterName(arg0: java.lang.String, arg1: java.lang.String, arg2: javax.xml.namespace.QName, arg3: boolean): java.lang.String
                            public getClassName(): com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName
                            public setClassName(arg0: com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName): void
                        }
                        class CustomName {
                            constructor(...args: any[])
                            public getJavaDoc(): java.lang.String
                            public setJavaDoc(arg0: java.lang.String): void
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                        }
                        class Parameter {
                            public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: javax.xml.namespace.QName, arg3: java.lang.String)
                            public getMessageName(): java.lang.String
                            public setMessageName(arg0: java.lang.String): void
                            public getElement(): javax.xml.namespace.QName
                            public setElement(arg0: javax.xml.namespace.QName): void
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                            public getPart(): java.lang.String
                            public setPart(arg0: java.lang.String): void
                        }
                        interface JAXWSBindingsConstants {
                            public static NS_JAXWS_BINDINGS: java.lang.String
                            public static NS_JAXB_BINDINGS: java.lang.String
                            public static NS_XJC_BINDINGS: java.lang.String
                            public static JAXWS_BINDINGS: javax.xml.namespace.QName
                            public static WSDL_LOCATION_ATTR: java.lang.String
                            public static NODE_ATTR: java.lang.String
                            public static VERSION_ATTR: java.lang.String
                            public static PACKAGE: javax.xml.namespace.QName
                            public static NAME_ATTR: java.lang.String
                            public static JAVADOC: javax.xml.namespace.QName
                            public static ENABLE_WRAPPER_STYLE: javax.xml.namespace.QName
                            public static ENABLE_ASYNC_MAPPING: javax.xml.namespace.QName
                            public static ENABLE_ADDITIONAL_SOAPHEADER_MAPPING: javax.xml.namespace.QName
                            public static ENABLE_MIME_CONTENT: javax.xml.namespace.QName
                            public static PROVIDER: javax.xml.namespace.QName
                            public static CLASS: javax.xml.namespace.QName
                            public static METHOD: javax.xml.namespace.QName
                            public static PARAMETER: javax.xml.namespace.QName
                            public static PART_ATTR: java.lang.String
                            public static ELEMENT_ATTR: java.lang.String
                            public static EXCEPTION: javax.xml.namespace.QName
                            public static JAXB_BINDINGS: javax.xml.namespace.QName
                            public static JAXB_BINDING_VERSION: java.lang.String
                            public static XSD_APPINFO: javax.xml.namespace.QName
                            public static XSD_ANNOTATION: javax.xml.namespace.QName
                        }
                        class Exception {
                            constructor(...args: any[])
                            public getClassName(): com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName
                            public setClassName(arg0: com.sun.tools.internal.ws.wsdl.document.jaxws.CustomName): void
                        }

                     }
                     namespace schema {
                        class SchemaKinds {
                            public static XSD_ATTRIBUTE: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_ATTRIBUTE_GROUP: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_CONSTRAINT: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_ELEMENT: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_GROUP: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_IDENTITY_CONSTRAINT: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_NOTATION: com.sun.tools.internal.ws.wsdl.framework.Kind
                            public static XSD_TYPE: com.sun.tools.internal.ws.wsdl.framework.Kind
                        }
                        interface SchemaConstants {
                            public static NS_XMLNS: java.lang.String
                            public static NS_XSD: java.lang.String
                            public static NS_XSI: java.lang.String
                            public static QNAME_ALL: javax.xml.namespace.QName
                            public static QNAME_ANNOTATION: javax.xml.namespace.QName
                            public static QNAME_ANY: javax.xml.namespace.QName
                            public static QNAME_ANY_ATTRIBUTE: javax.xml.namespace.QName
                            public static QNAME_ATTRIBUTE: javax.xml.namespace.QName
                            public static QNAME_ATTRIBUTE_GROUP: javax.xml.namespace.QName
                            public static QNAME_CHOICE: javax.xml.namespace.QName
                            public static QNAME_COMPLEX_CONTENT: javax.xml.namespace.QName
                            public static QNAME_COMPLEX_TYPE: javax.xml.namespace.QName
                            public static QNAME_ELEMENT: javax.xml.namespace.QName
                            public static QNAME_ENUMERATION: javax.xml.namespace.QName
                            public static QNAME_EXTENSION: javax.xml.namespace.QName
                            public static QNAME_FIELD: javax.xml.namespace.QName
                            public static QNAME_FRACTION_DIGITS: javax.xml.namespace.QName
                            public static QNAME_GROUP: javax.xml.namespace.QName
                            public static QNAME_IMPORT: javax.xml.namespace.QName
                            public static QNAME_INCLUDE: javax.xml.namespace.QName
                            public static QNAME_KEY: javax.xml.namespace.QName
                            public static QNAME_KEYREF: javax.xml.namespace.QName
                            public static QNAME_LENGTH: javax.xml.namespace.QName
                            public static QNAME_LIST: javax.xml.namespace.QName
                            public static QNAME_MAX_EXCLUSIVE: javax.xml.namespace.QName
                            public static QNAME_MAX_INCLUSIVE: javax.xml.namespace.QName
                            public static QNAME_MAX_LENGTH: javax.xml.namespace.QName
                            public static QNAME_MIN_EXCLUSIVE: javax.xml.namespace.QName
                            public static QNAME_MIN_INCLUSIVE: javax.xml.namespace.QName
                            public static QNAME_MIN_LENGTH: javax.xml.namespace.QName
                            public static QNAME_NOTATION: javax.xml.namespace.QName
                            public static QNAME_RESTRICTION: javax.xml.namespace.QName
                            public static QNAME_PATTERN: javax.xml.namespace.QName
                            public static QNAME_PRECISION: javax.xml.namespace.QName
                            public static QNAME_REDEFINE: javax.xml.namespace.QName
                            public static QNAME_SCALE: javax.xml.namespace.QName
                            public static QNAME_SCHEMA: javax.xml.namespace.QName
                            public static QNAME_SELECTOR: javax.xml.namespace.QName
                            public static QNAME_SEQUENCE: javax.xml.namespace.QName
                            public static QNAME_SIMPLE_CONTENT: javax.xml.namespace.QName
                            public static QNAME_SIMPLE_TYPE: javax.xml.namespace.QName
                            public static QNAME_TOTAL_DIGITS: javax.xml.namespace.QName
                            public static QNAME_UNIQUE: javax.xml.namespace.QName
                            public static QNAME_UNION: javax.xml.namespace.QName
                            public static QNAME_WHITE_SPACE: javax.xml.namespace.QName
                            public static QNAME_TYPE_STRING: javax.xml.namespace.QName
                            public static QNAME_TYPE_NORMALIZED_STRING: javax.xml.namespace.QName
                            public static QNAME_TYPE_TOKEN: javax.xml.namespace.QName
                            public static QNAME_TYPE_BYTE: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_BYTE: javax.xml.namespace.QName
                            public static QNAME_TYPE_BASE64_BINARY: javax.xml.namespace.QName
                            public static QNAME_TYPE_HEX_BINARY: javax.xml.namespace.QName
                            public static QNAME_TYPE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NON_NEGATIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_NON_POSITIVE_INTEGER: javax.xml.namespace.QName
                            public static QNAME_TYPE_INT: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_INT: javax.xml.namespace.QName
                            public static QNAME_TYPE_LONG: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_LONG: javax.xml.namespace.QName
                            public static QNAME_TYPE_SHORT: javax.xml.namespace.QName
                            public static QNAME_TYPE_UNSIGNED_SHORT: javax.xml.namespace.QName
                            public static QNAME_TYPE_DECIMAL: javax.xml.namespace.QName
                            public static QNAME_TYPE_FLOAT: javax.xml.namespace.QName
                            public static QNAME_TYPE_DOUBLE: javax.xml.namespace.QName
                            public static QNAME_TYPE_BOOLEAN: javax.xml.namespace.QName
                            public static QNAME_TYPE_TIME: javax.xml.namespace.QName
                            public static QNAME_TYPE_DATE_TIME: javax.xml.namespace.QName
                            public static QNAME_TYPE_DURATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_DATE: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_MONTH: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_YEAR: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_YEAR_MONTH: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_DAY: javax.xml.namespace.QName
                            public static QNAME_TYPE_G_MONTH_DAY: javax.xml.namespace.QName
                            public static QNAME_TYPE_NAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_QNAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_NCNAME: javax.xml.namespace.QName
                            public static QNAME_TYPE_ANY_URI: javax.xml.namespace.QName
                            public static QNAME_TYPE_ID: javax.xml.namespace.QName
                            public static QNAME_TYPE_IDREF: javax.xml.namespace.QName
                            public static QNAME_TYPE_IDREFS: javax.xml.namespace.QName
                            public static QNAME_TYPE_ENTITY: javax.xml.namespace.QName
                            public static QNAME_TYPE_ENTITIES: javax.xml.namespace.QName
                            public static QNAME_TYPE_NOTATION: javax.xml.namespace.QName
                            public static QNAME_TYPE_NMTOKEN: javax.xml.namespace.QName
                            public static QNAME_TYPE_NMTOKENS: javax.xml.namespace.QName
                            public static QNAME_TYPE_LANGUAGE: javax.xml.namespace.QName
                            public static QNAME_TYPE_URTYPE: javax.xml.namespace.QName
                            public static QNAME_TYPE_SIMPLE_URTYPE: javax.xml.namespace.QName
                        }

                     }
                     namespace http {
                        class HTTPUrlReplacement extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public validateThis(): void
                        }
                        class HTTPUrlEncoded extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public validateThis(): void
                        }
                        class HTTPOperation extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getLocation(): java.lang.String
                            public setLocation(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        interface HTTPConstants {
                            public static NS_WSDL_HTTP: java.lang.String
                            public static QNAME_ADDRESS: javax.xml.namespace.QName
                            public static QNAME_BINDING: javax.xml.namespace.QName
                            public static QNAME_OPERATION: javax.xml.namespace.QName
                            public static QNAME_URL_ENCODED: javax.xml.namespace.QName
                            public static QNAME_URL_REPLACEMENT: javax.xml.namespace.QName
                        }
                        class HTTPBinding extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getVerb(): java.lang.String
                            public setVerb(arg0: java.lang.String): void
                            public validateThis(): void
                        }
                        class HTTPAddress extends com.sun.tools.internal.ws.wsdl.framework.ExtensionImpl {
                            public constructor(arg0: org.xml.sax.Locator)
                            public getElementName(): javax.xml.namespace.QName
                            public getLocation(): java.lang.String
                            public setLocation(arg0: java.lang.String): void
                            public validateThis(): void
                        }

                     }
                     class WSDLDocumentVisitorBase extends com.sun.tools.internal.ws.wsdl.framework.ExtensionVisitorBase {
                         public constructor()
                         preVisit<T>(...args: any[]): any
                         postVisit<T>(...args: any[]): any
                         visit<T>(...args: any[]): any
                     }
                     interface WSDLConstants {
                         public static NS_XMLNS: java.lang.String
                         public static NS_WSDL: java.lang.String
                         public static QNAME_BINDING: javax.xml.namespace.QName
                         public static QNAME_DEFINITIONS: javax.xml.namespace.QName
                         public static QNAME_DOCUMENTATION: javax.xml.namespace.QName
                         public static QNAME_FAULT: javax.xml.namespace.QName
                         public static QNAME_IMPORT: javax.xml.namespace.QName
                         public static QNAME_INPUT: javax.xml.namespace.QName
                         public static QNAME_MESSAGE: javax.xml.namespace.QName
                         public static QNAME_OPERATION: javax.xml.namespace.QName
                         public static QNAME_OUTPUT: javax.xml.namespace.QName
                         public static QNAME_PART: javax.xml.namespace.QName
                         public static QNAME_PORT: javax.xml.namespace.QName
                         public static QNAME_PORT_TYPE: javax.xml.namespace.QName
                         public static QNAME_SERVICE: javax.xml.namespace.QName
                         public static QNAME_TYPES: javax.xml.namespace.QName
                         public static QNAME_ATTR_ARRAY_TYPE: javax.xml.namespace.QName
                     }
                     class Kinds {
                         public static BINDING: com.sun.tools.internal.ws.wsdl.framework.Kind
                         public static MESSAGE: com.sun.tools.internal.ws.wsdl.framework.Kind
                         public static PORT: com.sun.tools.internal.ws.wsdl.framework.Kind
                         public static PORT_TYPE: com.sun.tools.internal.ws.wsdl.framework.Kind
                         public static SERVICE: com.sun.tools.internal.ws.wsdl.framework.Kind
                     }

                  }

               }
               namespace resources {
                  class WsdlMessages {
                      public constructor()
                      public static localizablePARSING_ELEMENT_EXPECTED(): com.sun.istack.internal.localization.Localizable
                      public static PARSING_ELEMENT_EXPECTED(): java.lang.String
                      public static localizableENTITY_NOT_FOUND_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ENTITY_NOT_FOUND_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_UNABLE_TO_GET_METADATA(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_UNABLE_TO_GET_METADATA(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_PARSE_FAILED(): com.sun.istack.internal.localization.Localizable
                      public static PARSING_PARSE_FAILED(): java.lang.String
                      public static localizablePARSING_INVALID_ATTRIBUTE_VALUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_ATTRIBUTE_VALUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_INVALID_ATTRIBUTE_VALUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_INVALID_ATTRIBUTE_VALUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_TAG(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_TAG(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableENTITY_NOT_FOUND_PORT_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ENTITY_NOT_FOUND_PORT_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_MISSING_REQUIRED_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_MISSING_REQUIRED_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_INVALID_ELEMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_INVALID_ELEMENT(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_TWO_VERSION_ATTRIBUTES(): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_TWO_VERSION_ATTRIBUTES(): java.lang.String
                      public static localizableVALIDATION_DUPLICATE_PART_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_DUPLICATE_PART_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_WSDL_ELEMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_WSDL_ELEMENT(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_NON_WHITESPACE_TEXT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_NON_WHITESPACE_TEXT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_TARGET_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_TARGET_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_SAX_EXCEPTION_WITH_SYSTEM_ID(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_SAX_EXCEPTION_WITH_SYSTEM_ID(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_REQUIRED_EXTENSIBILITY_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_REQUIRED_EXTENSIBILITY_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableENTITY_NOT_FOUND_BY_ID(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ENTITY_NOT_FOUND_BY_ID(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_EXCLUSIVE_ATTRIBUTES(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_EXCLUSIVE_ATTRIBUTES(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_MISSING_REQUIRED_SUB_ENTITY(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_MISSING_REQUIRED_SUB_ENTITY(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_INCORRECT_VERSION(): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_INCORRECT_VERSION(): java.lang.String
                      public static localizableLOCALIZED_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static LOCALIZED_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableENTITY_DUPLICATE_WITH_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ENTITY_DUPLICATE_WITH_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_ONLY_ONE_OF_ELEMENT_OR_TYPE_REQUIRED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_ONLY_ONE_OF_ELEMENT_OR_TYPE_REQUIRED(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_UNSUPPORTED_USE_ENCODED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_UNSUPPORTED_USE_ENCODED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_INCORRECT_ROOT_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INCORRECT_ROOT_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
                      public static localizableTRY_WITH_MEX(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static TRY_WITH_MEX(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_MISSING_REQUIRED_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_MISSING_REQUIRED_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_IO_EXCEPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_IO_EXCEPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_X_PATH_EVAULATES_TO_TOO_MANY_TARGETS(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_X_PATH_EVAULATES_TO_TOO_MANY_TARGETS(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSER_NOT_A_BINDING_FILE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSER_NOT_A_BINDING_FILE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_UNKNOWN_NAMESPACE_PREFIX(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_UNKNOWN_NAMESPACE_PREFIX(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_FACTORY_CONFIG_EXCEPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_FACTORY_CONFIG_EXCEPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_MISSING_REQUIRED_PROPERTY(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_MISSING_REQUIRED_PROPERTY(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_OPERATION_STYLE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_OPERATION_STYLE(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_X_PATH_EVALUATION_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_X_PATH_EVALUATION_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_INVALID_SUB_ENTITY(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_INVALID_SUB_ENTITY(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_SHOULD_NOT_HAPPEN(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_SHOULD_NOT_HAPPEN(arg0: java.lang.Object): java.lang.String
                      public static localizableABSTRACT_REFERENCE_FINDER_IMPL_UNABLE_TO_PARSE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ABSTRACT_REFERENCE_FINDER_IMPL_UNABLE_TO_PARSE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWARNING_FAULT_EMPTY_ACTION(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WARNING_FAULT_EMPTY_ACTION(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_EXTENSION_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_EXTENSION_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_X_PATH_EVALUATES_TO_NON_ELEMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_X_PATH_EVALUATES_TO_NON_ELEMENT(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_X_PATH_EVALUATES_TO_NO_TARGET(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_X_PATH_EVALUATES_TO_NO_TARGET(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_SAX_EXCEPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_SAX_EXCEPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableINVALID_CUSTOMIZATION_NAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INVALID_CUSTOMIZATION_NAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_INVALID_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_INVALID_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_PARSER_CONFIG_EXCEPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_PARSER_CONFIG_EXCEPTION(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_ONLY_ONE_TYPES_ALLOWED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_ONLY_ONE_TYPES_ALLOWED(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_URI(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_URI(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_INCORRECT_TARGET_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_INCORRECT_TARGET_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableENTITY_NOT_FOUND_BY_Q_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ENTITY_NOT_FOUND_BY_Q_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableINVALID_WSDL(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INVALID_WSDL(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
                      public static localizablePARSING_UNKNOWN_IMPORTED_DOCUMENT_TYPE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_UNKNOWN_IMPORTED_DOCUMENT_TYPE(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_IO_EXCEPTION_WITH_SYSTEM_ID(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_IO_EXCEPTION_WITH_SYSTEM_ID(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_AMBIGUOUS_NAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_AMBIGUOUS_NAME(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_WSDL_NOT_DEFAULT_NAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_WSDL_NOT_DEFAULT_NAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_UNKNOWN_EXTENSIBILITY_ELEMENT_OR_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_UNKNOWN_EXTENSIBILITY_ELEMENT_OR_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_DUPLICATED_ELEMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_DUPLICATED_ELEMENT(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_TARGET_NOT_AN_ELEMENT(): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_TARGET_NOT_AN_ELEMENT(): java.lang.String
                      public static localizableWARNING_INPUT_OUTPUT_EMPTY_ACTION(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WARNING_INPUT_OUTPUT_EMPTY_ACTION(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_INVALID_TAG_NS(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object, arg4: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_INVALID_TAG_NS(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object, arg4: java.lang.Object): java.lang.String
                      public static localizableINVALID_WSDL_WITH_DOOC(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INVALID_WSDL_WITH_DOOC(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_NOT_AWSDL(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_NOT_AWSDL(arg0: java.lang.Object): java.lang.String
                      public static localizableENTITY_DUPLICATE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static ENTITY_DUPLICATE(arg0: java.lang.Object): java.lang.String
                      public static localizableWARNING_WSI_R_2004(): com.sun.istack.internal.localization.Localizable
                      public static WARNING_WSI_R_2004(): java.lang.String
                      public static localizableWARNING_WSI_R_2003(): com.sun.istack.internal.localization.Localizable
                      public static WARNING_WSI_R_2003(): java.lang.String
                      public static localizableWARNING_WSI_R_2002(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WARNING_WSI_R_2002(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_ELEMENT_OR_TYPE_REQUIRED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_ELEMENT_OR_TYPE_REQUIRED(arg0: java.lang.Object): java.lang.String
                      public static localizableWARNING_WSI_R_2001(): com.sun.istack.internal.localization.Localizable
                      public static WARNING_WSI_R_2001(): java.lang.String
                      public static localizableFILE_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static FILE_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableVALIDATION_INVALID_SIMPLE_TYPE_IN_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static VALIDATION_INVALID_SIMPLE_TYPE_IN_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizablePARSING_ONLY_ONE_DOCUMENTATION_ALLOWED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_ONLY_ONE_DOCUMENTATION_ALLOWED(arg0: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_VERSION_NOT_PRESENT(): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_VERSION_NOT_PRESENT(): java.lang.String
                      public static localizableFAILED_NOSERVICE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static FAILED_NOSERVICE(arg0: java.lang.Object): java.lang.String
                      public static localizablePARSING_TOO_MANY_ELEMENTS(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static PARSING_TOO_MANY_ELEMENTS(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableINTERNALIZER_INCORRECT_SCHEMA_REFERENCE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INTERNALIZER_INCORRECT_SCHEMA_REFERENCE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                  }
                  class WscompileMessages {
                      public constructor()
                      public static localizableWSIMPORT_ARCHIVING_ARTIFACTS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_ARCHIVING_ARTIFACTS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_CLASS_MUST_BE_IMPLEMENTATION_CLASS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_CLASS_MUST_BE_IMPLEMENTATION_CLASS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_FULLVERSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_FULLVERSION(arg0: java.lang.Object): java.lang.String
                      public static localizableWRAPPER_TASK_LOADING_INCORRECT_API(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WRAPPER_TASK_LOADING_INCORRECT_API(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_WSDLLOCATION_CLIENTJAR(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_WSDLLOCATION_CLIENTJAR(): java.lang.String
                      public static localizableWSIMPORT_VERSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_VERSION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_CLASS_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_CLASS_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_HTTP_REDIRECT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_HTTP_REDIRECT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_AUTH_INFO_NEEDED(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_AUTH_INFO_NEEDED(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSGEN_USAGE_EXAMPLES(): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_USAGE_EXAMPLES(): java.lang.String
                      public static localizableWSIMPORT_FETCHING_METADATA(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_FETCHING_METADATA(): java.lang.String
                      public static localizableWSGEN_INVALID_PROTOCOL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_INVALID_PROTOCOL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_USAGE_EXAMPLES(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_USAGE_EXAMPLES(): java.lang.String
                      public static localizableINVOKER_NEED_ENDORSED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static INVOKER_NEED_ENDORSED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_MISSING_FILE(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_MISSING_FILE(): java.lang.String
                      public static localizableWSIMPORT_USAGE_EXTENSIONS(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_USAGE_EXTENSIONS(): java.lang.String
                      public static localizableWSIMPORT_USAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_USAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_USAGE_EXTENSIONS(): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_USAGE_EXTENSIONS(): java.lang.String
                      public static localizablePLEASE(): com.sun.istack.internal.localization.Localizable
                      public static PLEASE(): java.lang.String
                      public static localizableWSCOMPILE_EXISTING_OPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_EXISTING_OPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_PARSING_WSDL(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_PARSING_WSDL(): java.lang.String
                      public static localizableWSGEN_MISSING_FILE(): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_MISSING_FILE(): java.lang.String
                      public static localizableWSIMPORT_HELP(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_HELP(arg0: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_PROTOCOL_WITHOUT_EXTENSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_PROTOCOL_WITHOUT_EXTENSION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_COMPILING_CODE(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_COMPILING_CODE(): java.lang.String
                      public static localizableWSIMPORT_READING_AUTH_FILE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_READING_AUTH_FILE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_UNSUPPORTED_ENCODING(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_UNSUPPORTED_ENCODING(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_NO_WEBSERVICES_CLASS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_NO_WEBSERVICES_CLASS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_ARCHIVE_ARTIFACT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_ARCHIVE_ARTIFACT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_NO_SUCH_DIRECTORY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_NO_SUCH_DIRECTORY(arg0: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_INFO(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_INFO(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_MAX_REDIRECT_ATTEMPT(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_MAX_REDIRECT_ATTEMPT(): java.lang.String
                      public static localizableWSIMPORT_WARNING_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_WARNING_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_INVALID_OPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_INVALID_OPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_ERROR_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_ERROR_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_GENERATING_CODE(): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_GENERATING_CODE(): java.lang.String
                      public static localizableWSGEN(): com.sun.istack.internal.localization.Localizable
                      public static WSGEN(): java.lang.String
                      public static localizableWSIMPORT_NOT_A_FILE_NOR_URL(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_NOT_A_FILE_NOR_URL(arg0: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_WARNING(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_WARNING(arg0: java.lang.Object): java.lang.String
                      public static localizableWRAPPER_TASK_NEED_ENDORSED(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WRAPPER_TASK_NEED_ENDORSED(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_NO_SUCH_JAXB_OPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_NO_SUCH_JAXB_OPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_VERSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_VERSION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_AUTH_FILE_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_AUTH_FILE_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_DEBUG_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_DEBUG_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_COULD_NOT_CREATE_FILE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_COULD_NOT_CREATE_FILE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_WSDL_ARG_NO_GENWSDL(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_WSDL_ARG_NO_GENWSDL(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_HELP(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_HELP(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_INFO_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_INFO_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_INLINE_SCHEMAS_ONLY_WITH_WSDL(): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_INLINE_SCHEMAS_ONLY_WITH_WSDL(): java.lang.String
                      public static localizableWSGEN_SOAP_12_WITHOUT_EXTENSION(): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_SOAP_12_WITHOUT_EXTENSION(): java.lang.String
                      public static localizableWSIMPORT_ILLEGAL_AUTH_INFO(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_ILLEGAL_AUTH_INFO(arg0: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_COMPILATION_FAILED(): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_COMPILATION_FAILED(): java.lang.String
                      public static localizableWSCOMPILE_MISSING_OPTION_ARGUMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_MISSING_OPTION_ARGUMENT(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_DOCUMENT_DOWNLOAD(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_DOCUMENT_DOWNLOAD(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSGEN_CANNOT_GEN_WSDL_FOR_NON_SOAP_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_CANNOT_GEN_WSDL_FOR_NON_SOAP_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSCOMPILE_DUPLICATE_OPTION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSCOMPILE_DUPLICATE_OPTION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_FAILED_TO_PARSE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_FAILED_TO_PARSE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_NO_WSDL(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_NO_WSDL(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_AUTH_INFO_LINENO(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_AUTH_INFO_LINENO(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSGEN_SERVICENAME_MISSING_LOCALNAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_SERVICENAME_MISSING_LOCALNAME(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_USAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_USAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_SERVICENAME_MISSING_NAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_SERVICENAME_MISSING_NAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_INVALID_TRANSPORT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_INVALID_TRANSPORT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSGEN_CANNOT_GEN_WSDL_FOR_SOAP_12_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_CANNOT_GEN_WSDL_FOR_SOAP_12_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_ILLEGAL_TARGET_VERSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_ILLEGAL_TARGET_VERSION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_ILLEGAL_PROXY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_ILLEGAL_PROXY(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_PORTNAME_MISSING_LOCALNAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_PORTNAME_MISSING_LOCALNAME(arg0: java.lang.Object): java.lang.String
                      public static localizableWSGEN_PORTNAME_MISSING_NAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSGEN_PORTNAME_MISSING_NAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSIMPORT_FULLVERSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSIMPORT_FULLVERSION(arg0: java.lang.Object): java.lang.String
                  }
                  class WebserviceapMessages {
                      public constructor()
                      public static localizableWEBSERVICEAP_ENDPOINTINTERFACES_DO_NOT_MATCH(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ENDPOINTINTERFACES_DO_NOT_MATCH(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INVALID_WEBMETHOD_ELEMENT_WITH_EXCLUDE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INVALID_WEBMETHOD_ELEMENT_WITH_EXCLUDE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_SEI_CANNOT_CONTAIN_CONSTANT_VALUES(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_SEI_CANNOT_CONTAIN_CONSTANT_VALUES(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INVALID_SOAPBINDING_PARAMETERSTYLE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INVALID_SOAPBINDING_PARAMETERSTYLE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_RPC_LITERAL_PARAMETERS_MUST_HAVE_WEBPARAM(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_RPC_LITERAL_PARAMETERS_MUST_HAVE_WEBPARAM(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_EXCEPTION_BEAN_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_EXCEPTION_BEAN_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_AND_WEBSERVICEPROVIDER(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_AND_WEBSERVICEPROVIDER(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_NO_DEFAULT_CONSTRUCTOR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_NO_DEFAULT_CONSTRUCTOR(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOC_BARE_NO_OUT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOC_BARE_NO_OUT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_FAILED_TO_PARSE_HANDLERCHAIN_FILE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_FAILED_TO_PARSE_HANDLERCHAIN_FILE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_JAVA_TYPE_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_JAVA_TYPE_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ONEWAY_OPERATION_CANNOT_DECLARE_EXCEPTIONS(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ONEWAY_OPERATION_CANNOT_DECLARE_EXCEPTIONS(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_METHOD_IS_STATIC_OR_FINAL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_METHOD_IS_STATIC_OR_FINAL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ONEWAY_OPERATION_CANNOT_HAVE_RETURN_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ONEWAY_OPERATION_CANNOT_HAVE_RETURN_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WARNING(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WARNING(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_RESPONSE_WRAPPER_BEAN_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_RESPONSE_WRAPPER_BEAN_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ENDPOINTINTERFACE_ON_INTERFACE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ENDPOINTINTERFACE_ON_INTERFACE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ONEWAY_AND_OUT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ONEWAY_AND_OUT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_RPC_LITERAL_WEBPARAMS_MUST_SPECIFY_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_RPC_LITERAL_WEBPARAMS_MUST_SPECIFY_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INVALID_SEI_ANNOTATION_ELEMENT_EXCLUDE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INVALID_SEI_ANNOTATION_ELEMENT_EXCLUDE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_CLASS_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_CLASS_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ENDPOINTINTEFACE_PLUS_ELEMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ENDPOINTINTEFACE_PLUS_ELEMENT(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_CANNOT_COMBINE_HANDLERCHAIN_SOAPMESSAGEHANDLERS(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_CANNOT_COMBINE_HANDLERCHAIN_SOAPMESSAGEHANDLERS(): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_CLASS_IS_INNERCLASS_NOT_STATIC(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_CLASS_IS_INNERCLASS_NOT_STATIC(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_NON_IN_PARAMETERS_MUST_BE_HOLDER(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_NON_IN_PARAMETERS_MUST_BE_HOLDER(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INVALID_SEI_ANNOTATION_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INVALID_SEI_ANNOTATION_ELEMENT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_SUCCEEDED(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_SUCCEEDED(): java.lang.String
                      public static localizableWEBSERVICEAP_DOC_BARE_AND_NO_ONE_IN(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOC_BARE_AND_NO_ONE_IN(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_METHOD_IS_ABSTRACT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_METHOD_IS_ABSTRACT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOCUMENT_LITERAL_BARE_METHOD_RETURN_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOCUMENT_LITERAL_BARE_METHOD_RETURN_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_NO_WEBSERVICE_ENDPOINT_FOUND(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_NO_WEBSERVICE_ENDPOINT_FOUND(): java.lang.String
                      public static localizableWEBSERVICEAP_FILE_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_FILE_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INVALID_HANDLERCHAIN_FILE_NOHANDLER_CONFIG(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INVALID_HANDLERCHAIN_FILE_NOHANDLER_CONFIG(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_HEADER_PARAMETERS_MUST_HAVE_WEBPARAM_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_HEADER_PARAMETERS_MUST_HAVE_WEBPARAM_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_RETURN_TYPE_CANNOT_IMPLEMENT_REMOTE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_RETURN_TYPE_CANNOT_IMPLEMENT_REMOTE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ENDPOINTINTEFACE_PLUS_ANNOTATION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ENDPOINTINTEFACE_PLUS_ANNOTATION(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_HOLDER_PARAMETERS_MUST_NOT_BE_IN_ONLY(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_HOLDER_PARAMETERS_MUST_NOT_BE_IN_ONLY(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOCUMENT_LITERAL_BARE_MUST_HAVE_ONLY_ONE_IN_PARAMETER(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOCUMENT_LITERAL_BARE_MUST_HAVE_ONLY_ONE_IN_PARAMETER(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOC_BARE_RETURN_AND_OUT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOC_BARE_RETURN_AND_OUT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_PARAMETER_TYPES_CANNOT_IMPLEMENT_REMOTE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_PARAMETER_TYPES_CANNOT_IMPLEMENT_REMOTE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_COMPILATION_FAILED(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_COMPILATION_FAILED(): java.lang.String
                      public static localizableWEBSERVICEAP_MODEL_ALREADY_EXISTS(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_MODEL_ALREADY_EXISTS(): java.lang.String
                      public static localizableWEBSERVICEAP_COULD_NOT_FIND_TYPEDECL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_COULD_NOT_FIND_TYPEDECL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_CLASS_NOT_PUBLIC(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_CLASS_NOT_PUBLIC(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOCUMENT_LITERAL_BARE_METHOD_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOCUMENT_LITERAL_BARE_METHOD_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_RPC_SOAPBINDING_NOT_ALLOWED_ON_METHOD(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_RPC_SOAPBINDING_NOT_ALLOWED_ON_METHOD(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_NO_PACKAGE_CLASS_MUST_HAVE_TARGETNAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_NO_PACKAGE_CLASS_MUST_HAVE_TARGETNAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ENDPOINTINTERFACE_HAS_NO_WEBSERVICE_ANNOTATION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ENDPOINTINTERFACE_HAS_NO_WEBSERVICE_ANNOTATION(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INFO(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INFO(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_RPC_LITERAL_MUST_NOT_BE_BARE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_RPC_LITERAL_MUST_NOT_BE_BARE(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_COULD_NOT_FIND_HANDLERCHAIN(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_COULD_NOT_FIND_HANDLERCHAIN(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_RPC_ENCODED_NOT_SUPPORTED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_RPC_ENCODED_NOT_SUPPORTED(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ENDPOINTINTERFACE_CLASS_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ENDPOINTINTERFACE_CLASS_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_NOT_IMPLEMENTED(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_NOT_IMPLEMENTED(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_PARSING_JAVAC_OPTIONS_ERROR(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_PARSING_JAVAC_OPTIONS_ERROR(): java.lang.String
                      public static localizableWEBSERVICE_ENCODED_NOT_SUPPORTED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICE_ENCODED_NOT_SUPPORTED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_HANDLERCLASS_NOTSPECIFIED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_HANDLERCLASS_NOTSPECIFIED(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_FAILED_TO_FIND_HANDLERCHAIN_FILE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_FAILED_TO_FIND_HANDLERCHAIN_FILE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOC_BARE_NO_RETURN_AND_NO_OUT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOC_BARE_NO_RETURN_AND_NO_OUT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_CLASS_IS_ABSTRACT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_CLASS_IS_ABSTRACT(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INIT_PARAM_FORMAT_ERROR(): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INIT_PARAM_FORMAT_ERROR(): java.lang.String
                      public static localizableWEBSERVICEAP_MIXED_BINDING_STYLE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_MIXED_BINDING_STYLE(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_NOT_ANNOTATED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_NOT_ANNOTATED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ONEWAY_OPERATION_CANNOT_HAVE_HOLDERS(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ONEWAY_OPERATION_CANNOT_HAVE_HOLDERS(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOCUMENT_LITERAL_BARE_CANNOT_HAVE_MORE_THAN_ONE_OUT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOCUMENT_LITERAL_BARE_CANNOT_HAVE_MORE_THAN_ONE_OUT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_INVALID_SEI_ANNOTATION(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_INVALID_SEI_ANNOTATION(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_OPERATION_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_OPERATION_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_WEBSERVICE_CLASS_IS_FINAL(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_WEBSERVICE_CLASS_IS_FINAL(arg0: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOCUMENT_LITERAL_BARE_MUST_HAVE_ONE_IN_OR_OUT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOCUMENT_LITERAL_BARE_MUST_HAVE_ONE_IN_OR_OUT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_METHOD_REQUEST_WRAPPER_BEAN_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_METHOD_REQUEST_WRAPPER_BEAN_NAME_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_DOCUMENT_BARE_HOLDER_PARAMETERS_MUST_NOT_BE_INOUT(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_DOCUMENT_BARE_HOLDER_PARAMETERS_MUST_NOT_BE_INOUT(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWEBSERVICEAP_ONEWAY_AND_NOT_ONE_IN(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WEBSERVICEAP_ONEWAY_AND_NOT_ONE_IN(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                  }
                  class UtilMessages {
                      public constructor()
                      public static localizableSAX_2_DOM_NOTSUPPORTED_CREATEELEMENT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static SAX_2_DOM_NOTSUPPORTED_CREATEELEMENT(arg0: java.lang.Object): java.lang.String
                      public static localizableNULL_NAMESPACE_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static NULL_NAMESPACE_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableHOLDER_VALUEFIELD_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static HOLDER_VALUEFIELD_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                  }
                  class ProcessorMessages {
                      public constructor()
                  }
                  class ModelerMessages {
                      public constructor()
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_INVALID_SCHEMA_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_INVALID_SCHEMA_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_PARAMETERORDER_PARAMETER(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_PARAMETERORDER_PARAMETER(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_NO_SOAP_FAULT_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_NO_SOAP_FAULT_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NONCONFORMING_WSDL_IMPORT(): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NONCONFORMING_WSDL_IMPORT(): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_OUTPUT_SOAP_BODY_MISSING_NAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_OUTPUT_SOAP_BODY_MISSING_NAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_FAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_FAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_INPUT_MISSING_SOAP_BODY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_INPUT_MISSING_SOAP_BODY(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_SOAP_BINDING_NON_HTTP_TRANSPORT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_SOAP_BINDING_NON_HTTP_TRANSPORT(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_UNSUPPORTED_BINDING_MIME(): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_UNSUPPORTED_BINDING_MIME(): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_FAULT_NO_ELEMENT_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_FAULT_NO_ELEMENT_ATTRIBUTE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_NON_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_NON_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_HEADERFAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_HEADERFAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_DIFFERENT_PART(): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_DIFFERENT_PART(): java.lang.String
                      public static localizableWSDLMODELER_ERROR_PART_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_ERROR_PART_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_HEADER_MESSAGE_PART_MUST_HAVE_ELEMENT_DESCRIPTOR(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_HEADER_MESSAGE_PART_MUST_HAVE_ELEMENT_DESCRIPTOR(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_OPERATION_NAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_OPERATION_NAME(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_OUTPUT_MISSING_SOAP_FAULT(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_OUTPUT_MISSING_SOAP_FAULT(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_ELEMENT_MESSAGE_PART(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_ELEMENT_MESSAGE_PART(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODLER_WARNING_OPERATION_USE(): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODLER_WARNING_OPERATION_USE(): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_NON_SOAP_PORT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_NON_SOAP_PORT(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_MESSAGE_HAS_MORE_THAN_ONE_PART(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_MESSAGE_HAS_MORE_THAN_ONE_PART(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NO_SERVICE_DEFINITIONS_FOUND(): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NO_SERVICE_DEFINITIONS_FOUND(): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_FAULT_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_FAULT_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_JAXB_JAVATYPE_NOTFOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_JAXB_JAVATYPE_NOTFOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_PORT_SOAP_BINDING_MIXED_STYLE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_PORT_SOAP_BINDING_MIXED_STYLE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_DOCLITOPERATION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_DOCLITOPERATION(arg0: java.lang.Object): java.lang.String
                      public static localizableMODELER_NESTED_MODEL_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODELER_NESTED_MODEL_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_DUPLICATE_FAULT_SOAP_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_DUPLICATE_FAULT_SOAP_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_WRONG_SOAP_FAULT_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_WRONG_SOAP_FAULT_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_NOT_LITERAL(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_NOT_LITERAL(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_DOCUMENT_STYLE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_DOCUMENT_STYLE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_FAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_FAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_RPCLITOPERATION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_RPCLITOPERATION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOM_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOM_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_MEMBER_SUBMISSION_ADDRESSING_USED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_MEMBER_SUBMISSION_ADDRESSING_USED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_BINDING_OPERATION_MULTIPLE_PART_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_BINDING_OPERATION_MULTIPLE_PART_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_PORT_SOAP_BINDING_12(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_PORT_SOAP_BINDING_12(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_PORT_TYPE_FAULT_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_PORT_TYPE_FAULT_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_PART_NAME_NOT_ALLOWED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_PART_NAME_NOT_ALLOWED(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_MIME_PART_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_MIME_PART_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_OPERATION_MORE_THAN_ONE_PART_IN_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_OPERATION_MORE_THAN_ONE_PART_IN_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_NON_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_NON_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_FAULT_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_FAULT_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_EMPTY_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_EMPTY_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_RPCLIT_UNKOWNSCHEMATYPE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_RPCLIT_UNKOWNSCHEMATYPE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_BODY_PARTS_ATTRIBUTE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_BODY_PARTS_ATTRIBUTE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_NON_UNIQUE_BODY_ERROR(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_NON_UNIQUE_BODY_ERROR(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_SOAP_BINDING_MIXED_STYLE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_SOAP_BINDING_MIXED_STYLE(arg0: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_MISSING_TYPE_ATTRIBUTE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_MISSING_TYPE_ATTRIBUTE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_EMPTY_INPUT_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_EMPTY_INPUT_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NO_PORTS_IN_SERVICE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NO_PORTS_IN_SERVICE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_PARAMETER_ORDER_TOO_MANY_UNMENTIONED_PARTS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_PARAMETER_ORDER_TOO_MANY_UNMENTIONED_PARTS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_INPUT_SOAP_BODY_MISSING_NAMESPACE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_INPUT_SOAP_BODY_MISSING_NAMESPACE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_RESPONSEBEAN_NOTFOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_RESPONSEBEAN_NOTFOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_20_RPCENC_NOT_SUPPORTED(): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_20_RPCENC_NOT_SUPPORTED(): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_PART_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_PART_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_MESSAGE_PART_MUST_HAVE_ELEMENT_DESCRIPTOR(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_MESSAGE_PART_MUST_HAVE_ELEMENT_DESCRIPTOR(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_ERROR_PARTS_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_ERROR_PARTS_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_FAULT_NOT_ENCODED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_FAULT_NOT_ENCODED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_NOT_SUPPORTED_STYLE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_NOT_SUPPORTED_STYLE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_MULTIPLE_PART_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_MULTIPLE_PART_BINDING(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_MULTIPLE_MATCHING_OPERATIONS(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_MULTIPLE_MATCHING_OPERATIONS(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOMIZED_OPERATION_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOMIZED_OPERATION_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_INPUT_HEADER_MISSING_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_INPUT_HEADER_MISSING_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_MISSING_INPUT_NAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_MISSING_INPUT_NAME(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_NON_SOAP_PORT_NO_ADDRESS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_NON_SOAP_PORT_NO_ADDRESS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_RESULT_IS_IN_OUT_PARAMETER(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_RESULT_IS_IN_OUT_PARAMETER(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_HEADER_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_HEADER_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_ELEMENT_PART_INVALID_ELEMENT_MIME_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_ELEMENT_PART_INVALID_ELEMENT_MIME_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_HEADER_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_HEADER_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_MESAGE_PART_ELEMENT_KIND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_MESAGE_PART_ELEMENT_KIND(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_NOT_ENCODED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_NOT_ENCODED(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NONCONFORMING_WSDL_TYPES(): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NONCONFORMING_WSDL_TYPES(): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_MORE_THAN_ONE_PART_IN_INPUT_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_MORE_THAN_ONE_PART_IN_INPUT_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_EMPTY_OUTPUT_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_EMPTY_OUTPUT_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_R_2716_R_2726(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_R_2716_R_2726(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_IGNORING_MEMBER_SUBMISSION_ADDRESSING(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_IGNORING_MEMBER_SUBMISSION_ADDRESSING(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NO_SOAP_ADDRESS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NO_SOAP_ADDRESS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_FAULTS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_FAULTS(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_MISSING_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_MISSING_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_WARNING_IGNORINGINVALID_HEADER_PART_NOT_DECLARED_IN_ROOT_PART(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_WARNING_IGNORINGINVALID_HEADER_PART_NOT_DECLARED_IN_ROOT_PART(arg0: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_ERROR_LOADING_JAVA_CLASS(): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_ERROR_LOADING_JAVA_CLASS(): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_NOT_IN_PORT_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_NOT_IN_PORT_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CONFLICT_STYLE_IN_WSI_MODE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CONFLICT_STYLE_IN_WSI_MODE(arg0: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_MISSING_PART_ATTRIBUTE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_MISSING_PART_ATTRIBUTE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_SEARCH_SCHEMA_UNRECOGNIZED_TYPES(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_SEARCH_SCHEMA_UNRECOGNIZED_TYPES(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOMIZED_OPERATION_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOMIZED_OPERATION_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_HEADER_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_HEADER_CANT_RESOLVE_MESSAGE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_MISSING_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_MISSING_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_PART_MORE_THAN_ONE_SOAP_BODY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_PART_MORE_THAN_ONE_SOAP_BODY(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_INCONSISTENT_DEFINITION(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_INCONSISTENT_DEFINITION(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOM_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_CUSTOM_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_UNRECOGNIZED_SCHEMA_EXTENSION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_UNRECOGNIZED_SCHEMA_EXTENSION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_FAULT_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_FAULT_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_NON_UNIQUE_BODY_WARNING(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_NON_UNIQUE_BODY_WARNING(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableMIMEMODELER_INVALID_MIME_CONTENT_UNKNOWN_SCHEMA_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MIMEMODELER_INVALID_MIME_CONTENT_UNKNOWN_SCHEMA_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_R_2716(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_R_2716(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_NOT_FOUND(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_TYPE_MESSAGE_PART(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_TYPE_MESSAGE_PART(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_PARAMETER_ORDER_INVALID_PARAMETER_ORDER(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_PARAMETER_ORDER_INVALID_PARAMETER_ORDER(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_MISSING_OUTPUT_NAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_MISSING_OUTPUT_NAME(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_OUTPUT_HEADER_MISSING_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_OUTPUT_HEADER_MISSING_NAMESPACE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_PART_FROM_BODY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_PART_FROM_BODY(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_NOT_SUPPORTED_STYLE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_NOT_SUPPORTED_STYLE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_NOT_NC_NAME(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_NOT_NC_NAME(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_PARAMETER_DIFFERENT_TYPES(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_PARAMETER_DIFFERENT_TYPES(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_FAULT_DOCUMENT_OPERATION(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_FAULT_DOCUMENT_OPERATION(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NONCONFORMING_WSDL_USE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NONCONFORMING_WSDL_USE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NON_SOAP_PORT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NON_SOAP_PORT(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_HEADERFAULT_MESSAGE_PART_MUST_HAVE_ELEMENT_DESCRIPTOR(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_HEADERFAULT_MESSAGE_PART_MUST_HAVE_ELEMENT_DESCRIPTOR(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_STATE_MODELING_OPERATION(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_STATE_MODELING_OPERATION(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_OPERATION_NAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_OPERATION_NAME(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_NOT_ENCODED(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_NOT_ENCODED(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_DUPLICATE_FAULT_PART_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_DUPLICATE_FAULT_PART_NAME(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_OPERATION_MORE_THAN_ONE_PART_IN_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_OPERATION_MORE_THAN_ONE_PART_IN_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_SOAP_BINDING_12(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_SOAP_BINDING_12(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_FAULT_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_FAULT_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_INVALID_BINDING_OPERATION_OUTPUT_MISSING_SOAP_BODY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_INVALID_BINDING_OPERATION_OUTPUT_MISSING_SOAP_BODY(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_HEADER_FAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_HEADER_FAULT_NOT_LITERAL(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_MORE_THAN_ONE_PART_IN_OUTPUT_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_CANNOT_HANDLE_MORE_THAN_ONE_PART_IN_OUTPUT_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_NO_OPERATIONS_IN_PORT(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_NO_OPERATIONS_IN_PORT(arg0: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_WARNING_IGNORING_OPERATION_JAVA_RESERVED_WORD_NOT_ALLOWED_WRAPPER_STYLE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableWSDLMODELER_UNSOLVABLE_NAMING_CONFLICTS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static WSDLMODELER_UNSOLVABLE_NAMING_CONFLICTS(arg0: java.lang.Object): java.lang.String
                  }
                  class ModelMessages {
                      public constructor()
                      public static localizableMODEL_NESTED_MODEL_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_NESTED_MODEL_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_EXCEPTION_NOTUNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_EXCEPTION_NOTUNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_INVALID_WILDCARD_ALL_COMPOSITOR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_INVALID_WILDCARD_ALL_COMPOSITOR(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_SIMPLE_TYPE_WITH_FACETS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_SIMPLE_TYPE_WITH_FACETS(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_UNION_NOT_SUPPORTED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_UNION_NOT_SUPPORTED(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_COMPLEX_TYPE_SIMPLE_CONTENT_RESERVED_NAME(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_COMPLEX_TYPE_SIMPLE_CONTENT_RESERVED_NAME(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_IMPORTER_INVALID_ID(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_IMPORTER_INVALID_ID(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_JAXB_EXCEPTION_MESSAGE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_JAXB_EXCEPTION_MESSAGE(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_INVALID_MESSAGE_TYPE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_INVALID_MESSAGE_TYPE(arg0: java.lang.Object): java.lang.String
                      public static localizableCONSOLE_ERROR_REPORTER_UNKNOWN_LOCATION(): com.sun.istack.internal.localization.Localizable
                      public static CONSOLE_ERROR_REPORTER_UNKNOWN_LOCATION(): java.lang.String
                      public static localizableMODEL_EXPORTER_UNSUPPORTED_CLASS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_EXPORTER_UNSUPPORTED_CLASS(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_ELEMENT_NOT_FOUND(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_ELEMENT_NOT_FOUND(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_UNIQUENESS_JAVASTRUCTURETYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_UNIQUENESS_JAVASTRUCTURETYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_SAXPARSER_EXCEPTION(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SAXPARSER_EXCEPTION(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_UNSUPPORTED_TYPE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_UNSUPPORTED_TYPE(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_LIST_NOT_SUPPORTED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_LIST_NOT_SUPPORTED(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_ARRAYWRAPPER_NO_PARENT(): com.sun.istack.internal.localization.Localizable
                      public static MODEL_ARRAYWRAPPER_NO_PARENT(): java.lang.String
                      public static localizableMODEL_PARENT_TYPE_ALREADY_SET(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_PARENT_TYPE_ALREADY_SET(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableMODEL_ARRAYWRAPPER_NO_SUBTYPES(): com.sun.istack.internal.localization.Localizable
                      public static MODEL_ARRAYWRAPPER_NO_SUBTYPES(): java.lang.String
                      public static localizableMODEL_IMPORTER_INVALID_MINOR_MINOR_OR_PATCH_VERSION(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_IMPORTER_INVALID_MINOR_MINOR_OR_PATCH_VERSION(arg0: java.lang.Object, arg1: java.lang.Object, arg2: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_CIRCULARITY(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_CIRCULARITY(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_ARRAYWRAPPER_MEMBER_ALREADY_SET(): com.sun.istack.internal.localization.Localizable
                      public static MODEL_ARRAYWRAPPER_MEMBER_ALREADY_SET(): java.lang.String
                      public static localizableMODEL_IMPORTER_INVALID_CLASS(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_IMPORTER_INVALID_CLASS(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_IMPORTER_INVALID_VERSION(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_IMPORTER_INVALID_VERSION(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableCONSOLE_ERROR_REPORTER_LINE_X_OF_Y(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static CONSOLE_ERROR_REPORTER_LINE_X_OF_Y(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_PARAMETER_NOTUNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_PARAMETER_NOTUNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_INVALID_SIMPLE_TYPE_INVALID_ITEM_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_INVALID_SIMPLE_TYPE_INVALID_ITEM_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_UNIQUENESS(): com.sun.istack.internal.localization.Localizable
                      public static MODEL_UNIQUENESS(): java.lang.String
                      public static localizable_002F_002F_REPLACEMENT(): com.sun.istack.internal.localization.Localizable
                      public static _002F_002F_REPLACEMENT(): java.lang.String
                      public static localizableMODEL_SCHEMA_INVALID_SIMPLE_TYPE_NO_ITEM_LITERAL_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_INVALID_SIMPLE_TYPE_NO_ITEM_LITERAL_TYPE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_ARRAYWRAPPER_ONLY_ONE_MEMBER(): com.sun.istack.internal.localization.Localizable
                      public static MODEL_ARRAYWRAPPER_ONLY_ONE_MEMBER(): java.lang.String
                      public static localizableMODEL_PARAMETER_NOTUNIQUE_WRAPPER(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_PARAMETER_NOTUNIQUE_WRAPPER(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_NOT_IMPLEMENTED(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_NOT_IMPLEMENTED(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_SCHEMA_INVALID_LITERAL_IN_ENUMERATION_ANONYMOUS(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_SCHEMA_INVALID_LITERAL_IN_ENUMERATION_ANONYMOUS(arg0: java.lang.Object): java.lang.String
                      public static localizableMODEL_PART_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static MODEL_PART_NOT_UNIQUE(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableMODEL_ARRAYWRAPPER_NO_CONTENT_MEMBER(): com.sun.istack.internal.localization.Localizable
                      public static MODEL_ARRAYWRAPPER_NO_CONTENT_MEMBER(): java.lang.String
                  }
                  class JavacompilerMessages {
                      public constructor()
                      public static localizableJAVACOMPILER_CLASSPATH_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static JAVACOMPILER_CLASSPATH_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableJAVACOMPILER_NOSUCHMETHOD_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static JAVACOMPILER_NOSUCHMETHOD_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableJAVACOMPILER_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static JAVACOMPILER_ERROR(arg0: java.lang.Object): java.lang.String
                  }
                  class GeneratorMessages {
                      public constructor()
                      public static localizableGENERATOR_SERVICE_CLASS_ALREADY_EXIST(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static GENERATOR_SERVICE_CLASS_ALREADY_EXIST(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableGENERATOR_SEI_CLASS_ALREADY_EXIST(arg0: java.lang.Object, arg1: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static GENERATOR_SEI_CLASS_ALREADY_EXIST(arg0: java.lang.Object, arg1: java.lang.Object): java.lang.String
                      public static localizableGENERATOR_NESTED_GENERATOR_ERROR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static GENERATOR_NESTED_GENERATOR_ERROR(arg0: java.lang.Object): java.lang.String
                      public static localizableGENERATOR_INTERNAL_ERROR_SHOULD_NOT_HAPPEN(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static GENERATOR_INTERNAL_ERROR_SHOULD_NOT_HAPPEN(arg0: java.lang.Object): java.lang.String
                      public static localizableGENERATOR_INDENTINGWRITER_CHARSET_CANTENCODE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static GENERATOR_INDENTINGWRITER_CHARSET_CANTENCODE(arg0: java.lang.Object): java.lang.String
                      public static localizableGENERATOR_CANNOT_CREATE_DIR(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static GENERATOR_CANNOT_CREATE_DIR(arg0: java.lang.Object): java.lang.String
                  }
                  class ConfigurationMessages {
                      public constructor()
                      public static localizableCONFIGURATION_NOT_BINDING_FILE(arg0: java.lang.Object): com.sun.istack.internal.localization.Localizable
                      public static CONFIGURATION_NOT_BINDING_FILE(arg0: java.lang.Object): java.lang.String
                  }

               }
               namespace wscompile {
                  class ErrorReceiverFilter extends com.sun.tools.internal.ws.wscompile.ErrorReceiver {
                      constructor(...args: any[])
                      public setErrorReceiver(arg0: com.sun.tools.internal.xjc.api.ErrorListener): void
                      public hadError(): boolean
                      public reset(): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                      public debug(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                  }
                  abstract class ErrorReceiver implements org.xml.sax.ErrorHandler , com.sun.tools.internal.xjc.api.ErrorListener {
                      public constructor()
                      error<T>(...args: any[]): any
                      warning<T>(...args: any[]): any
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                      public pollAbort(): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                      debug<T>(...args: any[]): any
                      protected getLocationString(arg0: org.xml.sax.SAXParseException): java.lang.String
                  }
                  class WsimportOptions$ByteStream extends java.io.ByteArrayOutputStream {
                      getBuffer(): byte[]
                      constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions$1)
                  }
                  class WsimportOptions$RereadInputStream extends java.io.InputStream {
                      constructor(arg0: java.io.InputStream)
                      public available(): int
                      public close(): void
                      public mark(arg0: int): void
                      public markSupported(): boolean
                      read<T>(...args: any[]): any
                      public reset(): void
                  }
                  class WsimportOptions$RereadInputSource extends org.xml.sax.InputSource {
                      constructor(arg0: org.xml.sax.InputSource)
                      public getByteStream(): java.io.InputStream
                      public getCharacterStream(): java.io.Reader
                      public getEncoding(): java.lang.String
                      public getPublicId(): java.lang.String
                      public getSystemId(): java.lang.String
                      public setByteStream(arg0: java.io.InputStream): void
                      public setCharacterStream(arg0: java.io.Reader): void
                      public setEncoding(arg0: java.lang.String): void
                      public setPublicId(arg0: java.lang.String): void
                      public setSystemId(arg0: java.lang.String): void
                  }
                  class WsimportOptions$1 {
                  }
                  class WsimportOptions extends com.sun.tools.internal.ws.wscompile.Options {
                      public wsdlLocation: java.lang.String
                      public entityResolver: org.xml.sax.EntityResolver
                      public defaultPackage: java.lang.String
                      public clientjar: java.lang.String
                      public additionalHeaders: boolean
                      public implDestDir: java.io.File
                      public implServiceName: java.lang.String
                      public implPortName: java.lang.String
                      public isGenerateJWS: boolean
                      public disableSSLHostnameVerification: boolean
                      public useBaseResourceAndURLToLoadWSDL: boolean
                      public authFile: java.io.File
                      public static defaultAuthfile: java.lang.String
                      public disableAuthenticator: boolean
                      public proxyAuth: java.lang.String
                      public extensionOptions: java.util.HashMap<java.lang.String, java.lang.String>
                      public activePlugins: java.util.List<com.sun.tools.internal.ws.wscompile.Plugin>
                      public cmdlineJars: java.util.List<java.lang.String>
                      public noAddressingBbinding: boolean
                      public constructor()
                      public getCodeModel(): com.sun.codemodel.internal.JCodeModel
                      public getSchemaCompiler(): com.sun.tools.internal.xjc.api.SchemaCompiler
                      public setCodeModel(arg0: com.sun.codemodel.internal.JCodeModel): void
                      public getAllPlugins(): java.util.List<com.sun.tools.internal.ws.wscompile.Plugin>
                      parseArguments<T>(...args: any[]): any
                      public validate(): void
                      protected addFile(arg0: java.lang.String): void
                      public getHandlerChainConfiguration(): org.w3c.dom.Element
                      public addHandlerChainConfiguration(arg0: org.w3c.dom.Element): void
                      public getWSDLs(): org.xml.sax.InputSource[]
                      public getSchemas(): org.xml.sax.InputSource[]
                      public getWSDLBindings(): org.xml.sax.InputSource[]
                      public getSchemaBindings(): org.xml.sax.InputSource[]
                      addWSDL<T>(...args: any[]): any
                      addSchema<T>(...args: any[]): any
                      public addGrammarRecursive(arg0: java.io.File): void
                      public addWSDLBindFile(arg0: org.xml.sax.InputSource): void
                      public addSchemmaBindFile(arg0: org.xml.sax.InputSource): void
                      public addBindings(arg0: java.lang.String): void
                      public parseBindings(arg0: com.sun.tools.internal.ws.wscompile.ErrorReceiver): void
                      public getExtensionOption(arg0: java.lang.String): java.lang.String
                      protected disableXmlSecurity(): void
                  }
                  class Options$Target extends java.lang.Enum<com.sun.tools.internal.ws.wscompile.Options$Target> {
                      public static V2_0: com.sun.tools.internal.ws.wscompile.Options$Target
                      public static V2_1: com.sun.tools.internal.ws.wscompile.Options$Target
                      public static V2_2: com.sun.tools.internal.ws.wscompile.Options$Target
                      public static values(): com.sun.tools.internal.ws.wscompile.Options$Target[]
                      valueOf<T>(...args: any[]): any
                      public isLaterThan(arg0: com.sun.tools.internal.ws.wscompile.Options$Target): boolean
                      public static parse(arg0: java.lang.String): com.sun.tools.internal.ws.wscompile.Options$Target
                      public getVersion(): java.lang.String
                      public static getDefault(): com.sun.tools.internal.ws.wscompile.Options$Target
                      public static getLoadedAPIVersion(): com.sun.tools.internal.ws.wscompile.Options$Target
                  }
                  class Options$WeAreDone extends com.sun.tools.internal.ws.wscompile.BadCommandLineException {
                      public constructor()
                  }
                  class Options$1 {
                      static $SwitchMap$com$sun$tools$internal$ws$wscompile$Options$Target: int[]
                  }
                  class Options {
                      public verbose: boolean
                      public quiet: boolean
                      public keep: boolean
                      public destDir: java.io.File
                      public sourceDir: java.io.File
                      public filer: javax.annotation.processing.Filer
                      public encoding: java.lang.String
                      public classpath: java.lang.String
                      public javacOptions: java.util.List<java.lang.String>
                      public nocompile: boolean
                      disableXmlSecurity<T>(...args: any[]): any
                      public target: com.sun.tools.internal.ws.wscompile.Options$Target
                      public static STRICT: int
                      public static EXTENSION: int
                      public compatibilityMode: int
                      public debug: boolean
                      public debugMode: boolean
                      public constructor()
                      public isExtensionMode(): boolean
                      public addGeneratedFile(arg0: java.io.File): void
                      public removeGeneratedFiles(): void
                      public getGeneratedFiles(): java.lang.Iterable<java.io.File>
                      public deleteGeneratedFiles(): void
                      parseArguments<T>(...args: any[]): any
                      protected addFile(arg0: java.lang.String): void
                      public requireArgument(arg0: java.lang.String, arg1: java.lang.String[], arg2: int): java.lang.String
                      getJavacOptions(arg0: java.util.List<java.lang.String>, arg1: com.sun.tools.internal.ws.wscompile.WsimportListener): java.util.List<java.lang.String>
                      public getClassLoader(): java.lang.ClassLoader
                      public static pathToURLs(arg0: java.lang.String): java.net.URL[]
                      public static fileToURL(arg0: java.io.File): java.net.URL
                  }
                  class AbortException extends java.lang.RuntimeException {
                      public constructor()
                  }
                  abstract class Plugin {
                      public constructor()
                      public getOptionName(): java.lang.String
                      public getUsage(): java.lang.String
                      public parseArgument(arg0: com.sun.tools.internal.ws.wscompile.Options, arg1: java.lang.String[], arg2: int): int
                      public onActivated(arg0: com.sun.tools.internal.ws.wscompile.Options): void
                      public run(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): boolean
                  }
                  class BadCommandLineException extends java.lang.Exception {
                      static $assertionsDisabled: boolean
                      constructor(...args: any[])
                      public initOptions(arg0: com.sun.tools.internal.ws.wscompile.Options): void
                      public getOptions(): com.sun.tools.internal.ws.wscompile.Options
                  }
                  class WsimportListener implements com.sun.tools.internal.xjc.api.ErrorListener {
                      public constructor()
                      public generatedFile(arg0: java.lang.String): void
                      public message(arg0: java.lang.String): void
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                      public debug(arg0: org.xml.sax.SAXParseException): void
                      public isCanceled(): boolean
                  }
                  namespace plugin {
                     namespace at_generated {
                        class PluginImpl extends com.sun.tools.internal.ws.wscompile.Plugin {
                            public constructor()
                            public getOptionName(): java.lang.String
                            public getUsage(): java.lang.String
                            public run(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): boolean
                        }

                     }

                  }
                  class WsimportTool$Listener extends com.sun.tools.internal.ws.wscompile.WsimportListener {
                      cer: com.sun.tools.internal.ws.processor.modeler.wsdl.ConsoleErrorReporter
                      this$0: com.sun.tools.internal.ws.wscompile.WsimportTool
                      protected constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportTool)
                      public generatedFile(arg0: java.lang.String): void
                      public message(arg0: java.lang.String): void
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public debug(arg0: org.xml.sax.SAXParseException): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                      public enableDebugging(): void
                  }
                  class WsimportTool$Receiver extends com.sun.tools.internal.ws.wscompile.ErrorReceiverFilter {
                      this$0: com.sun.tools.internal.ws.wscompile.WsimportTool
                      public constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportTool, arg1: com.sun.tools.internal.ws.wscompile.WsimportTool$Listener)
                      public info(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public pollAbort(): void
                      public debug(arg0: org.xml.sax.SAXParseException): void
                  }
                  class WsimportTool$1 implements java.io.FilenameFilter {
                      val$className: java.lang.String
                      val$trackedClassFiles: java.util.List
                      this$0: com.sun.tools.internal.ws.wscompile.WsimportTool
                      constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportTool, arg1: java.lang.String, arg2: java.util.List)
                      public accept(arg0: java.io.File, arg1: java.lang.String): boolean
                  }
                  class WsimportTool$1AuthListener implements com.sun.istack.internal.tools.DefaultAuthenticator$Receiver {
                      val$receiver: com.sun.tools.internal.ws.wscompile.WsimportTool$Receiver
                      this$0: com.sun.tools.internal.ws.wscompile.WsimportTool
                      constructor(arg0: boolean)
                      public onParsingError(arg0: java.lang.String, arg1: org.xml.sax.Locator): void
                      public onError(arg0: java.lang.Exception, arg1: org.xml.sax.Locator): void
                  }
                  class WsimportTool {
                      protected options: com.sun.tools.internal.ws.wscompile.WsimportOptions
                      constructor(...args: any[])
                      run<T>(...args: any[]): any
                      protected parseArguments(arg0: java.lang.String[], arg1: com.sun.tools.internal.ws.wscompile.WsimportTool$Listener, arg2: com.sun.tools.internal.ws.wscompile.WsimportTool$Receiver): void
                      protected buildWsdlModel(arg0: com.sun.tools.internal.ws.wscompile.WsimportTool$Listener, arg1: com.sun.tools.internal.ws.wscompile.WsimportTool$Receiver): com.sun.tools.internal.ws.processor.model.Model
                      protected generateCode(arg0: com.sun.tools.internal.ws.wscompile.WsimportTool$Listener, arg1: com.sun.tools.internal.ws.wscompile.WsimportTool$Receiver, arg2: com.sun.tools.internal.ws.processor.model.Model, arg3: boolean): boolean
                      public setEntityResolver(arg0: org.xml.sax.EntityResolver): void
                      protected compileGeneratedClasses(arg0: com.sun.tools.internal.ws.wscompile.ErrorReceiver, arg1: com.sun.tools.internal.ws.wscompile.WsimportListener): boolean
                      protected usage(arg0: com.sun.tools.internal.ws.wscompile.Options): void
                      static access$000(arg0: com.sun.tools.internal.ws.wscompile.WsimportTool): java.io.PrintStream
                  }
                  class WsgenTool$1 implements com.oracle.webservices.internal.api.databinding.WSDLResolver {
                      val$errReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiverFilter
                      val$wsdlFileName: java.io.File[]
                      val$schemaFiles: java.util.Map
                      this$0: com.sun.tools.internal.ws.wscompile.WsgenTool
                      constructor(arg0: com.sun.tools.internal.ws.wscompile.WsgenTool, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiverFilter, arg2: java.io.File[], arg3: java.util.Map)
                      public getWSDL(arg0: java.lang.String): javax.xml.transform.Result
                      getSchemaOutput<T>(...args: any[]): any
                      public getAbstractWSDL(arg0: javax.xml.ws.Holder<java.lang.String>): javax.xml.transform.Result
                  }
                  interface WsgenTool$ReportOutput$Report extends com.sun.xml.internal.txw2.TypedXmlWriter {
                      public wsdl(arg0: java.lang.String): void
                      public portType(): com.sun.tools.internal.ws.wscompile.WsgenTool$ReportOutput$QualifiedName
                      public service(): com.sun.tools.internal.ws.wscompile.WsgenTool$ReportOutput$QualifiedName
                      public port(): com.sun.tools.internal.ws.wscompile.WsgenTool$ReportOutput$QualifiedName
                      public implClass(arg0: java.lang.String): void
                      public schema(): com.sun.tools.internal.ws.wscompile.WsgenTool$ReportOutput$Schema
                  }
                  interface WsgenTool$ReportOutput$QualifiedName extends com.sun.xml.internal.txw2.TypedXmlWriter {
                      public uri(arg0: java.lang.String): void
                      public localName(arg0: java.lang.String): void
                  }
                  interface WsgenTool$ReportOutput$Schema extends com.sun.xml.internal.txw2.TypedXmlWriter {
                      public ns(arg0: java.lang.String): void
                      public location(arg0: java.lang.String): void
                  }
                  class WsgenTool$ReportOutput {
                      constructor()
                      static access$100(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.wscompile.WsgenTool$ReportOutput$QualifiedName): void
                  }
                  class WsgenTool$Listener extends com.sun.tools.internal.ws.wscompile.WsimportListener {
                      cer: com.sun.tools.internal.ws.processor.modeler.wsdl.ConsoleErrorReporter
                      this$0: com.sun.tools.internal.ws.wscompile.WsgenTool
                      constructor(arg0: com.sun.tools.internal.ws.wscompile.WsgenTool)
                      public generatedFile(arg0: java.lang.String): void
                      public message(arg0: java.lang.String): void
                      public error(arg0: org.xml.sax.SAXParseException): void
                      public fatalError(arg0: org.xml.sax.SAXParseException): void
                      public warning(arg0: org.xml.sax.SAXParseException): void
                      public info(arg0: org.xml.sax.SAXParseException): void
                  }
                  class WsgenTool {
                      constructor(...args: any[])
                      public run(arg0: java.lang.String[]): boolean
                      public buildModel(arg0: java.lang.String, arg1: com.sun.tools.internal.ws.wscompile.WsgenTool$Listener): boolean
                      protected usage(arg0: com.sun.tools.internal.ws.wscompile.Options): void
                      static access$000(arg0: com.sun.tools.internal.ws.wscompile.WsgenTool): com.sun.tools.internal.ws.wscompile.WsgenOptions
                      static access$200(arg0: com.sun.tools.internal.ws.wscompile.WsgenTool): java.io.PrintStream
                  }
                  class WsgenOptions extends com.sun.tools.internal.ws.wscompile.Options {
                      public serviceName: javax.xml.namespace.QName
                      public portName: javax.xml.namespace.QName
                      public nonclassDestDir: java.io.File
                      public genWsdl: boolean
                      public inlineSchemas: boolean
                      public protocol: java.lang.String
                      public protocols: java.util.Set<java.lang.String>
                      public nonstdProtocols: java.util.Map<java.lang.String, java.lang.String>
                      public wsgenReport: java.io.File
                      public doNotOverWrite: boolean
                      public protocolSet: boolean
                      public externalMetadataFiles: java.util.List<java.lang.String>
                      public static X_SOAP12: java.lang.String
                      endpoints: java.util.List<java.lang.String>
                      public endpoint: java.lang.Class
                      public constructor()
                      protected parseArguments(arg0: java.lang.String[], arg1: int): int
                      protected addFile(arg0: java.lang.String): void
                      public validate(): void
                      getBindingID(arg0: java.lang.String): com.sun.xml.internal.ws.api.BindingID
                  }
                  class WSCodeWriter extends com.sun.codemodel.internal.writer.FileCodeWriter {
                      public constructor(arg0: java.io.File, arg1: com.sun.tools.internal.ws.wscompile.Options)
                      protected getFile(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.File
                  }
                  class JavaCompilerHelper {
                      constructor()
                      static getJarFile(arg0: java.lang.Class): java.io.File
                      static compile(arg0: java.lang.String[], arg1: java.io.OutputStream, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): boolean
                  }
                  class FilerCodeWriter extends com.sun.tools.internal.ws.wscompile.WSCodeWriter {
                      public constructor(arg0: java.io.File, arg1: com.sun.tools.internal.ws.wscompile.Options)
                      public openSource(arg0: com.sun.codemodel.internal.JPackage, arg1: java.lang.String): java.io.Writer
                      public close(): void
                  }
                  class AuthInfo {
                      public constructor(arg0: java.net.URL, arg1: java.lang.String, arg2: java.lang.String)
                      public getUser(): java.lang.String
                      public getPassword(): java.lang.String
                      public matchingHost(arg0: java.net.URL): boolean
                  }

               }
               namespace api {
                  namespace wsdl {
                     abstract class TWSDLExtensionHandler {
                         public constructor()
                         public getNamespaceURI(): java.lang.String
                         public doHandleExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortTypeExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleDefinitionsExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleTypesExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleBindingExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOperationExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleInputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleOutputExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleFaultExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handleServiceExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                         public handlePortExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLParserContext, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg2: org.w3c.dom.Element): boolean
                     }
                     interface TWSDLParserContext {
                         public push(): void
                         public pop(): void
                         public getNamespaceURI(arg0: java.lang.String): java.lang.String
                         public getPrefixes(): java.lang.Iterable<java.lang.String>
                         public getDefaultNamespaceURI(): java.lang.String
                         public registerNamespaces(arg0: org.w3c.dom.Element): void
                         public getLocation(arg0: org.w3c.dom.Element): org.xml.sax.Locator
                     }
                     interface TWSDLExtensible {
                         public getNameValue(): java.lang.String
                         public getNamespaceURI(): java.lang.String
                         public getWSDLElementName(): javax.xml.namespace.QName
                         public addExtension(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtension): void
                         public extensions(): java.lang.Iterable<com.sun.tools.internal.ws.api.wsdl.TWSDLExtension>
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                     }
                     interface TWSDLOperation extends com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible {
                         public getFaults(): java.util.Map<java.lang.String, com.sun.codemodel.internal.JClass>
                     }
                     interface TWSDLExtension {
                         public getParent(): com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible
                     }

                  }
                  abstract class TJavaGeneratorExtension {
                      public constructor()
                      public writeMethodAnnotations(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLOperation, arg1: com.sun.codemodel.internal.JMethod): void
                  }
                  interface WsgenProtocol extends java.lang.annotation.Annotation {
                      public token(): java.lang.String
                      public lexical(): java.lang.String
                  }
                  abstract class WsgenExtension {
                      public constructor()
                  }

               }
               namespace processor {
                  namespace model {
                     class Model extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         constructor(...args: any[])
                         public getName(): javax.xml.namespace.QName
                         public setName(arg0: javax.xml.namespace.QName): void
                         public getTargetNamespaceURI(): java.lang.String
                         public setTargetNamespaceURI(arg0: java.lang.String): void
                         public addService(arg0: com.sun.tools.internal.ws.processor.model.Service): void
                         public getServiceByName(arg0: javax.xml.namespace.QName): com.sun.tools.internal.ws.processor.model.Service
                         public getServices(): java.util.List<com.sun.tools.internal.ws.processor.model.Service>
                         public setServices(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.Service>): void
                         public addExtraType(arg0: com.sun.tools.internal.ws.processor.model.AbstractType): void
                         public getExtraTypes(): java.util.Iterator
                         public getExtraTypesSet(): java.util.Set<com.sun.tools.internal.ws.processor.model.AbstractType>
                         public setExtraTypesSet(arg0: java.util.Set<com.sun.tools.internal.ws.processor.model.AbstractType>): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                         public getSource(): java.lang.String
                         public setSource(arg0: java.lang.String): void
                         public setJAXBModel(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel): void
                         public getJAXBModel(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel
                     }
                     abstract class ModelObject {
                         protected errorReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiver
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                         protected constructor(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity)
                         public setErrorReceiver(arg0: com.sun.tools.internal.ws.wscompile.ErrorReceiver): void
                         public getEntity(): com.sun.tools.internal.ws.wsdl.framework.Entity
                         public getProperty(arg0: java.lang.String): java.lang.Object
                         public setProperty(arg0: java.lang.String, arg1: java.lang.Object): void
                         public removeProperty(arg0: java.lang.String): void
                         public getProperties(): java.util.Iterator
                         public getLocator(): org.xml.sax.Locator
                         public getPropertiesMap(): java.util.Map
                         public setPropertiesMap(arg0: java.util.Map): void
                         public getJavaDoc(): java.lang.String
                         public setJavaDoc(arg0: java.lang.String): void
                     }
                     class Service extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         constructor(...args: any[])
                         public getName(): javax.xml.namespace.QName
                         public setName(arg0: javax.xml.namespace.QName): void
                         public addPort(arg0: com.sun.tools.internal.ws.processor.model.Port): void
                         public getPortByName(arg0: javax.xml.namespace.QName): com.sun.tools.internal.ws.processor.model.Port
                         public getPorts(): java.util.List<com.sun.tools.internal.ws.processor.model.Port>
                         public setPorts(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.Port>): void
                         public getJavaIntf(): com.sun.tools.internal.ws.processor.model.java.JavaInterface
                         public getJavaInterface(): com.sun.tools.internal.ws.processor.model.java.JavaInterface
                         public setJavaInterface(arg0: com.sun.tools.internal.ws.processor.model.java.JavaInterface): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                     }
                     abstract class AbstractType {
                         constructor(...args: any[])
                         public getName(): javax.xml.namespace.QName
                         public setName(arg0: javax.xml.namespace.QName): void
                         public getJavaType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                         public setJavaType(arg0: com.sun.tools.internal.ws.processor.model.java.JavaType): void
                         public getVersion(): java.lang.String
                         public setVersion(arg0: java.lang.String): void
                         public isNillable(): boolean
                         public isSOAPType(): boolean
                         public isLiteralType(): boolean
                         public getProperty(arg0: java.lang.String): java.lang.Object
                         public setProperty(arg0: java.lang.String, arg1: java.lang.Object): void
                         public removeProperty(arg0: java.lang.String): void
                         public getProperties(): java.util.Iterator
                         public getPropertiesMap(): java.util.Map
                         public setPropertiesMap(arg0: java.util.Map): void
                     }
                     interface ModelVisitor {
                         visit<T>(...args: any[]): any
                     }
                     namespace jaxb {
                        class JAXBModel {
                            public getRawJAXBModel(): com.sun.tools.internal.xjc.api.JAXBModel
                            public getS2JJAXBModel(): com.sun.tools.internal.xjc.api.S2JJAXBModel
                            public getJ2SJAXBModel(): com.sun.tools.internal.xjc.api.J2SJAXBModel
                            constructor(...args: any[])
                            public getMappings(): java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.JAXBMapping>
                            public setMappings(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.JAXBMapping>): void
                            get<T>(...args: any[]): any
                            public getGeneratedClassNames(): java.util.Set<java.lang.String>
                            public setGeneratedClassNames(arg0: java.util.Set<java.lang.String>): void
                        }
                        class JAXBMapping {
                            constructor(...args: any[])
                            public getElementName(): javax.xml.namespace.QName
                            public setElementName(arg0: javax.xml.namespace.QName): void
                            public getType(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBTypeAndAnnotation
                            public getWrapperStyleDrilldown(): java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.JAXBProperty>
                        }
                        class JAXBTypeAndAnnotation {
                            typeAnn: com.sun.tools.internal.xjc.api.TypeAndAnnotation
                            type: com.sun.codemodel.internal.JType
                            constructor(...args: any[])
                            public annotate(arg0: com.sun.codemodel.internal.JAnnotatable): void
                            public getType(): com.sun.codemodel.internal.JType
                            public getName(): java.lang.String
                            public getTypeAnn(): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                            public setTypeAnn(arg0: com.sun.tools.internal.xjc.api.TypeAndAnnotation): void
                            public setType(arg0: com.sun.codemodel.internal.JType): void
                        }
                        class JAXBProperty {
                            constructor(...args: any[])
                            public getName(): java.lang.String
                            public getRawTypeName(): javax.xml.namespace.QName
                            public setName(arg0: java.lang.String): void
                            public getType(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBTypeAndAnnotation
                            public getElementName(): javax.xml.namespace.QName
                        }
                        interface JAXBTypeVisitor {
                            visit<T>(...args: any[]): any
                        }
                        class JAXBType extends com.sun.tools.internal.ws.processor.model.AbstractType {
                            constructor(...args: any[])
                            public accept(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBTypeVisitor): void
                            public isUnwrappable(): boolean
                            public hasWrapperChildren(): boolean
                            public isLiteralType(): boolean
                            public getWrapperChildren(): java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.JAXBProperty>
                            public setWrapperChildren(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.JAXBProperty>): void
                            public getJaxbMapping(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBMapping
                            public setJaxbMapping(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBMapping): void
                            public setUnwrapped(arg0: boolean): void
                            public isUnwrapped(): boolean
                            public getJaxbModel(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel
                            public setJaxbModel(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel): void
                        }
                        class RpcLitStructure extends com.sun.tools.internal.ws.processor.model.AbstractType {
                            constructor(...args: any[])
                            public accept(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBTypeVisitor): void
                            public getRpcLitMembers(): java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.RpcLitMember>
                            public setRpcLitMembers(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.RpcLitMember>): java.util.List<com.sun.tools.internal.ws.processor.model.jaxb.RpcLitMember>
                            public addRpcLitMember(arg0: com.sun.tools.internal.ws.processor.model.jaxb.RpcLitMember): void
                            public getJaxbModel(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel
                            public setJaxbModel(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel): void
                            public isLiteralType(): boolean
                        }
                        class RpcLitMember extends com.sun.tools.internal.ws.processor.model.AbstractType {
                            constructor(...args: any[])
                            public getJavaTypeName(): java.lang.String
                            public setJavaTypeName(arg0: java.lang.String): void
                            public getSchemaTypeName(): javax.xml.namespace.QName
                            public setSchemaTypeName(arg0: javax.xml.namespace.QName): void
                        }
                        class JAXBStructuredType extends com.sun.tools.internal.ws.processor.model.jaxb.JAXBType {
                            constructor(...args: any[])
                            public add(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBElementMember): void
                            public getElementMembers(): java.util.Iterator
                            public getElementMembersCount(): int
                            public getElementMembersList(): java.util.List
                            public setElementMembersList(arg0: java.util.List): void
                            public addSubtype(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBStructuredType): void
                            public getSubtypes(): java.util.Iterator
                            public isUnwrapped(): boolean
                            public getSubtypesSet(): java.util.Set
                            public setSubtypesSet(arg0: java.util.Set): void
                            public setParentType(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBStructuredType): void
                            public getParentType(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBStructuredType
                        }
                        class JAXBElementMember {
                            constructor(...args: any[])
                            public getName(): javax.xml.namespace.QName
                            public setName(arg0: javax.xml.namespace.QName): void
                            public getType(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBType
                            public setType(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBType): void
                            public isRepeated(): boolean
                            public setRepeated(arg0: boolean): void
                            public getJavaStructureMember(): com.sun.tools.internal.ws.processor.model.java.JavaStructureMember
                            public setJavaStructureMember(arg0: com.sun.tools.internal.ws.processor.model.java.JavaStructureMember): void
                            public isInherited(): boolean
                            public setInherited(arg0: boolean): void
                            public getProperty(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBProperty
                            public setProperty(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBProperty): void
                        }
                        class Util {
                            static MAGIC: java.lang.String
                            static MAGIC0: java.lang.String
                            static MAGIC1: java.lang.String
                            static MAGIC2: java.lang.String
                            constructor()
                            static replace(arg0: java.lang.String, ...arg1: java.lang.String[]): java.lang.String
                            static createMacroTemplate(arg0: java.lang.String): java.lang.String
                        }

                     }
                     namespace java {
                        class JavaInterface {
                            constructor(...args: any[])
                            public getName(): java.lang.String
                            public getFormalName(): java.lang.String
                            public setFormalName(arg0: java.lang.String): void
                            public getRealName(): java.lang.String
                            public setRealName(arg0: java.lang.String): void
                            public getImpl(): java.lang.String
                            public setImpl(arg0: java.lang.String): void
                            public getMethods(): java.util.Iterator
                            public hasMethod(arg0: com.sun.tools.internal.ws.processor.model.java.JavaMethod): boolean
                            public addMethod(arg0: com.sun.tools.internal.ws.processor.model.java.JavaMethod): void
                            public getMethodsList(): java.util.List
                            public setMethodsList(arg0: java.util.List): void
                            public hasInterface(arg0: java.lang.String): boolean
                            public addInterface(arg0: java.lang.String): void
                            public getInterfaces(): java.util.Iterator
                            public getInterfacesList(): java.util.List
                            public setInterfacesList(arg0: java.util.List): void
                            public getSimpleName(): java.lang.String
                            public getJavaDoc(): java.lang.String
                            public setJavaDoc(arg0: java.lang.String): void
                        }
                        abstract class JavaType {
                            constructor(...args: any[])
                            public getType(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBTypeAndAnnotation
                            public getName(): java.lang.String
                            public doSetName(arg0: java.lang.String): void
                            public getRealName(): java.lang.String
                            public setRealName(arg0: java.lang.String): void
                            public getFormalName(): java.lang.String
                            public setFormalName(arg0: java.lang.String): void
                            public isPresent(): boolean
                            public setPresent(arg0: boolean): void
                            public isHolder(): boolean
                            public setHolder(arg0: boolean): void
                            public isHolderPresent(): boolean
                            public setHolderPresent(arg0: boolean): void
                            public getInitString(): java.lang.String
                            public setInitString(arg0: java.lang.String): void
                            public getHolderName(): java.lang.String
                            public setHolderName(arg0: java.lang.String): void
                        }
                        class JavaMethod {
                            public constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                            public getName(): java.lang.String
                            public getReturnType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                            public setReturnType(arg0: com.sun.tools.internal.ws.processor.model.java.JavaType): void
                            public addParameter(arg0: com.sun.tools.internal.ws.processor.model.java.JavaParameter): void
                            public getParametersList(): java.util.List<com.sun.tools.internal.ws.processor.model.java.JavaParameter>
                            public addException(arg0: java.lang.String): void
                            public getExceptions(): java.util.Iterator<java.lang.String>
                        }
                        class JavaException extends com.sun.tools.internal.ws.processor.model.java.JavaStructureType {
                            constructor(...args: any[])
                        }
                        class JavaStructureType extends com.sun.tools.internal.ws.processor.model.java.JavaType {
                            constructor(...args: any[])
                            public add(arg0: com.sun.tools.internal.ws.processor.model.java.JavaStructureMember): void
                            public getMemberByName(arg0: java.lang.String): com.sun.tools.internal.ws.processor.model.java.JavaStructureMember
                            public getMembers(): java.util.Iterator
                            public getMembersCount(): int
                            public getMembersList(): java.util.List<com.sun.tools.internal.ws.processor.model.java.JavaStructureMember>
                            public setMembersList(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.java.JavaStructureMember>): void
                            public isAbstract(): boolean
                            public setAbstract(arg0: boolean): void
                            public getSuperclass(): com.sun.tools.internal.ws.processor.model.java.JavaStructureType
                            public setSuperclass(arg0: com.sun.tools.internal.ws.processor.model.java.JavaStructureType): void
                            public addSubclass(arg0: com.sun.tools.internal.ws.processor.model.java.JavaStructureType): void
                            public getSubclasses(): java.util.Iterator
                            public getSubclassesSet(): java.util.Set
                            public setSubclassesSet(arg0: java.util.Set): void
                            public getAllSubclasses(): java.util.Iterator
                            public getAllSubclassesSet(): java.util.Set
                            public getOwner(): java.lang.Object
                            public setOwner(arg0: java.lang.Object): void
                        }
                        class JavaParameter {
                            constructor(...args: any[])
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                            public getType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                            public setType(arg0: com.sun.tools.internal.ws.processor.model.java.JavaType): void
                            public getParameter(): com.sun.tools.internal.ws.processor.model.Parameter
                            public setParameter(arg0: com.sun.tools.internal.ws.processor.model.Parameter): void
                            public isHolder(): boolean
                            public setHolder(arg0: boolean): void
                            public getHolderName(): java.lang.String
                            public setHolderName(arg0: java.lang.String): void
                        }
                        class JavaStructureMember {
                            constructor(...args: any[])
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                            public getType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                            public setType(arg0: com.sun.tools.internal.ws.processor.model.java.JavaType): void
                            public isPublic(): boolean
                            public setPublic(arg0: boolean): void
                            public isInherited(): boolean
                            public setInherited(arg0: boolean): void
                            public getReadMethod(): java.lang.String
                            public setReadMethod(arg0: java.lang.String): void
                            public getWriteMethod(): java.lang.String
                            public setWriteMethod(arg0: java.lang.String): void
                            public getDeclaringClass(): java.lang.String
                            public setDeclaringClass(arg0: java.lang.String): void
                            public getOwner(): java.lang.Object
                            public setOwner(arg0: java.lang.Object): void
                            public getConstructorPos(): int
                            public setConstructorPos(arg0: int): void
                        }
                        class JavaSimpleType extends com.sun.tools.internal.ws.processor.model.java.JavaType {
                            constructor(...args: any[])
                        }
                        class JavaArrayType extends com.sun.tools.internal.ws.processor.model.java.JavaType {
                            constructor(...args: any[])
                            public getElementName(): java.lang.String
                            public setElementName(arg0: java.lang.String): void
                            public getElementType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                            public setElementType(arg0: com.sun.tools.internal.ws.processor.model.java.JavaType): void
                            public getSOAPArrayHolderName(): java.lang.String
                            public setSOAPArrayHolderName(arg0: java.lang.String): void
                        }

                     }
                     class Port extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         public portTypes: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.wsdl.document.PortType>
                         constructor(...args: any[])
                         public getName(): javax.xml.namespace.QName
                         public setName(arg0: javax.xml.namespace.QName): void
                         public addOperation(arg0: com.sun.tools.internal.ws.processor.model.Operation): void
                         public getOperationByUniqueName(arg0: java.lang.String): com.sun.tools.internal.ws.processor.model.Operation
                         public getOperations(): java.util.List<com.sun.tools.internal.ws.processor.model.Operation>
                         public setOperations(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.Operation>): void
                         public getJavaInterface(): com.sun.tools.internal.ws.processor.model.java.JavaInterface
                         public setJavaInterface(arg0: com.sun.tools.internal.ws.processor.model.java.JavaInterface): void
                         public getAddress(): java.lang.String
                         public setAddress(arg0: java.lang.String): void
                         public getServiceImplName(): java.lang.String
                         public setServiceImplName(arg0: java.lang.String): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                         public isProvider(): boolean
                         public getPortGetter(): java.lang.String
                         public setPortGetter(arg0: java.lang.String): void
                         public getStyle(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                         public setStyle(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle): void
                         public isWrapped(): boolean
                         public setWrapped(arg0: boolean): void
                     }
                     class Operation extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         constructor(...args: any[])
                         public getName(): javax.xml.namespace.QName
                         public setName(arg0: javax.xml.namespace.QName): void
                         public getUniqueName(): java.lang.String
                         public setUniqueName(arg0: java.lang.String): void
                         public getRequest(): com.sun.tools.internal.ws.processor.model.Request
                         public setRequest(arg0: com.sun.tools.internal.ws.processor.model.Request): void
                         public getResponse(): com.sun.tools.internal.ws.processor.model.Response
                         public setResponse(arg0: com.sun.tools.internal.ws.processor.model.Response): void
                         public isOverloaded(): boolean
                         public addFault(arg0: com.sun.tools.internal.ws.processor.model.Fault): void
                         public getFaults(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Fault>
                         public getFaultsSet(): java.util.Set<com.sun.tools.internal.ws.processor.model.Fault>
                         public setFaultsSet(arg0: java.util.Set<com.sun.tools.internal.ws.processor.model.Fault>): void
                         public getAllFaults(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Fault>
                         public getAllFaultsSet(): java.util.Set<com.sun.tools.internal.ws.processor.model.Fault>
                         public getFaultCount(): int
                         public getAllFaultBlocks(): java.util.Set<com.sun.tools.internal.ws.processor.model.Block>
                         public getJavaMethod(): com.sun.tools.internal.ws.processor.model.java.JavaMethod
                         public setJavaMethod(arg0: com.sun.tools.internal.ws.processor.model.java.JavaMethod): void
                         public getSOAPAction(): java.lang.String
                         public setSOAPAction(arg0: java.lang.String): void
                         public getStyle(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                         public setStyle(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle): void
                         public getUse(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse
                         public setUse(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPUse): void
                         public isWrapped(): boolean
                         public setWrapped(arg0: boolean): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                         public setCustomizedName(arg0: java.lang.String): void
                         public getCustomizedName(): java.lang.String
                         public getJavaMethodName(): java.lang.String
                         public getWSDLPortTypeOperation(): com.sun.tools.internal.ws.wsdl.document.Operation
                         public setWSDLPortTypeOperation(arg0: com.sun.tools.internal.ws.wsdl.document.Operation): void
                     }
                     class Request extends com.sun.tools.internal.ws.processor.model.Message {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.document.Message, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                     }
                     abstract class Message extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         protected constructor(arg0: com.sun.tools.internal.ws.wsdl.document.Message, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public addBodyBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public getBodyBlocks(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Block>
                         public getBodyBlockCount(): int
                         public getBodyBlocksMap(): java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>
                         public setBodyBlocksMap(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>): void
                         public isBodyEmpty(): boolean
                         public isBodyEncoded(): boolean
                         public addHeaderBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public getHeaderBlocks(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Block>
                         public getHeaderBlockCollection(): java.util.Collection<com.sun.tools.internal.ws.processor.model.Block>
                         public getHeaderBlockCount(): int
                         public getHeaderBlocksMap(): java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>
                         public setHeaderBlocksMap(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>): void
                         public addAttachmentBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public addUnboundBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public getUnboundBlocks(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Block>
                         public getUnboundBlocksMap(): java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>
                         public getUnboundBlocksCount(): int
                         public setUnboundBlocksMap(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>): void
                         public getAttachmentBlocks(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Block>
                         public getAttachmentBlockCount(): int
                         public getAttachmentBlocksMap(): java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>
                         public setAttachmentBlocksMap(arg0: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Block>): void
                         public addParameter(arg0: com.sun.tools.internal.ws.processor.model.Parameter): void
                         public getParameterByName(arg0: java.lang.String): com.sun.tools.internal.ws.processor.model.Parameter
                         public getParameters(): java.util.Iterator<com.sun.tools.internal.ws.processor.model.Parameter>
                         public getParametersList(): java.util.List<com.sun.tools.internal.ws.processor.model.Parameter>
                         public setParametersList(arg0: java.util.List<com.sun.tools.internal.ws.processor.model.Parameter>): void
                         public getAllBlocks(): java.util.Set<com.sun.tools.internal.ws.processor.model.Block>
                     }
                     class Response extends com.sun.tools.internal.ws.processor.model.Message {
                         public constructor(arg0: com.sun.tools.internal.ws.wsdl.document.Message, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                         public addFaultBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public getFaultBlocks(): java.util.Iterator
                         public getFaultBlockCount(): int
                         public getFaultBlocksMap(): java.util.Map
                         public setFaultBlocksMap(arg0: java.util.Map): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                     }
                     class Fault extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         constructor(...args: any[])
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getBlock(): com.sun.tools.internal.ws.processor.model.Block
                         public setBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public getJavaException(): com.sun.tools.internal.ws.processor.model.java.JavaException
                         public setJavaException(arg0: com.sun.tools.internal.ws.processor.model.java.JavaException): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                         public getSubfaults(): java.util.Iterator
                         public getSubfaultsSet(): java.util.Set
                         public setSubfaultsSet(arg0: java.util.Set): void
                         public getAllFaults(): java.util.Iterator
                         public getAllFaultsSet(): java.util.Set
                         public getElementName(): javax.xml.namespace.QName
                         public setElementName(arg0: javax.xml.namespace.QName): void
                         public getJavaMemberName(): java.lang.String
                         public setJavaMemberName(arg0: java.lang.String): void
                         public isWsdlException(): boolean
                         public setWsdlException(arg0: boolean): void
                         public setExceptionClass(arg0: com.sun.codemodel.internal.JClass): void
                         public getExceptionClass(): com.sun.codemodel.internal.JClass
                         public getWsdlFaultName(): java.lang.String
                         public setWsdlFaultName(arg0: java.lang.String): void
                     }
                     class Block extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         public static UNBOUND: int
                         public static BODY: int
                         public static HEADER: int
                         public static ATTACHMENT: int
                         public constructor(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.processor.model.AbstractType, arg2: com.sun.tools.internal.ws.wsdl.framework.Entity)
                         public getName(): javax.xml.namespace.QName
                         public getType(): com.sun.tools.internal.ws.processor.model.AbstractType
                         public setType(arg0: com.sun.tools.internal.ws.processor.model.AbstractType): void
                         public getLocation(): int
                         public setLocation(arg0: int): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                     }
                     class Parameter extends com.sun.tools.internal.ws.processor.model.ModelObject {
                         public constructor(arg0: java.lang.String, arg1: com.sun.tools.internal.ws.wsdl.framework.Entity)
                         public getEntityName(): java.lang.String
                         public getName(): java.lang.String
                         public setName(arg0: java.lang.String): void
                         public getJavaParameter(): com.sun.tools.internal.ws.processor.model.java.JavaParameter
                         public setJavaParameter(arg0: com.sun.tools.internal.ws.processor.model.java.JavaParameter): void
                         public getType(): com.sun.tools.internal.ws.processor.model.AbstractType
                         public setType(arg0: com.sun.tools.internal.ws.processor.model.AbstractType): void
                         public getTypeName(): java.lang.String
                         public setTypeName(arg0: java.lang.String): void
                         public getBlock(): com.sun.tools.internal.ws.processor.model.Block
                         public setBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         public getLinkedParameter(): com.sun.tools.internal.ws.processor.model.Parameter
                         public setLinkedParameter(arg0: com.sun.tools.internal.ws.processor.model.Parameter): void
                         public isEmbedded(): boolean
                         public setEmbedded(arg0: boolean): void
                         public accept(arg0: com.sun.tools.internal.ws.processor.model.ModelVisitor): void
                         public getParameterIndex(): int
                         public setParameterIndex(arg0: int): void
                         public isReturn(): boolean
                         public getCustomName(): java.lang.String
                         public setCustomName(arg0: java.lang.String): void
                         public getAnnotations(): java.util.List<java.lang.String>
                         public setAnnotations(arg0: java.util.List<java.lang.String>): void
                         public setMode(arg0: javax.jws.WebParam$Mode): void
                         public isIN(): boolean
                         public isOUT(): boolean
                         public isINOUT(): boolean
                     }
                     class ExtendedModelVisitor {
                         public constructor()
                         visit<T>(...args: any[]): any
                         protected shouldVisit(arg0: com.sun.tools.internal.ws.processor.model.Port): boolean
                         preVisit<T>(...args: any[]): any
                         postVisit<T>(...args: any[]): any
                         protected visitBodyBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         protected visitHeaderBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         protected visitFaultBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                     }
                     class AsyncOperationType {
                         public static POLLING: com.sun.tools.internal.ws.processor.model.AsyncOperationType
                         public static CALLBACK: com.sun.tools.internal.ws.processor.model.AsyncOperationType
                     }
                     namespace exporter {
                        interface ExternalObject {
                            public getType(): java.lang.String
                            public saveTo(arg0: org.xml.sax.ContentHandler): void
                        }

                     }
                     interface ModelProperties {
                         public static WSDL_MODELER_NAME: java.lang.String
                         public static PROPERTY_PARAM_MESSAGE_PART_NAME: java.lang.String
                         public static PROPERTY_ANONYMOUS_TYPE_NAME: java.lang.String
                         public static PROPERTY_ANONYMOUS_ARRAY_TYPE_NAME: java.lang.String
                         public static PROPERTY_ANONYMOUS_ARRAY_JAVA_TYPE: java.lang.String
                         public static PROPERTY_PTIE_CLASS_NAME: java.lang.String
                         public static PROPERTY_EPTFF_CLASS_NAME: java.lang.String
                         public static PROPERTY_SED_CLASS_NAME: java.lang.String
                         public static PROPERTY_WSDL_PORT_NAME: java.lang.String
                         public static PROPERTY_WSDL_PORT_TYPE_NAME: java.lang.String
                         public static PROPERTY_WSDL_BINDING_NAME: java.lang.String
                         public static PROPERTY_WSDL_MESSAGE_NAME: java.lang.String
                         public static PROPERTY_MODELER_NAME: java.lang.String
                         public static PROPERTY_STUB_CLASS_NAME: java.lang.String
                         public static PROPERTY_STUB_OLD_CLASS_NAME: java.lang.String
                         public static PROPERTY_DELEGATE_CLASS_NAME: java.lang.String
                         public static PROPERTY_CLIENT_ENCODER_DECODER_CLASS_NAME: java.lang.String
                         public static PROPERTY_CLIENT_CONTACTINFOLIST_CLASS_NAME: java.lang.String
                         public static PROPERTY_TIE_CLASS_NAME: java.lang.String
                         public static PROPERTY_JAVA_PORT_NAME: java.lang.String
                     }
                     class ModelException extends com.sun.tools.internal.ws.processor.ProcessorException {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }
                     class HeaderFault extends com.sun.tools.internal.ws.processor.model.Fault {
                         constructor(...args: any[])
                         public getMessage(): javax.xml.namespace.QName
                         public setMessage(arg0: javax.xml.namespace.QName): void
                         public getPart(): java.lang.String
                         public setPart(arg0: java.lang.String): void
                     }
                     class AsyncOperation extends com.sun.tools.internal.ws.processor.model.Operation {
                         constructor(...args: any[])
                         public isAsync(): boolean
                         public setAsyncType(arg0: com.sun.tools.internal.ws.processor.model.AsyncOperationType): void
                         public getAsyncType(): com.sun.tools.internal.ws.processor.model.AsyncOperationType
                         public setResponseBean(arg0: com.sun.tools.internal.ws.processor.model.AbstractType): void
                         public getResponseBeanType(): com.sun.tools.internal.ws.processor.model.AbstractType
                         public getResponseBeanJavaType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                         public getCallBackType(): com.sun.tools.internal.ws.processor.model.java.JavaType
                         public getNormalOperation(): com.sun.tools.internal.ws.processor.model.Operation
                         public setNormalOperation(arg0: com.sun.tools.internal.ws.processor.model.Operation): void
                         public getJavaMethodName(): java.lang.String
                     }

                  }
                  namespace modeler {
                     namespace wsdl {
                        class ConsoleErrorReporter extends com.sun.tools.internal.ws.wscompile.ErrorReceiver {
                            constructor(...args: any[])
                            public hasError(): boolean
                            public error(arg0: org.xml.sax.SAXParseException): void
                            public fatalError(arg0: org.xml.sax.SAXParseException): void
                            public warning(arg0: org.xml.sax.SAXParseException): void
                            public info(arg0: org.xml.sax.SAXParseException): void
                            public debug(arg0: org.xml.sax.SAXParseException): void
                            public enableDebugging(): void
                        }
                        class WSDLModelerBase$ProcessSOAPOperationInfo {
                            public modelPort: com.sun.tools.internal.ws.processor.model.Port
                            public port: com.sun.tools.internal.ws.wsdl.document.Port
                            public portTypeOperation: com.sun.tools.internal.ws.wsdl.document.Operation
                            public bindingOperation: com.sun.tools.internal.ws.wsdl.document.BindingOperation
                            public soapBinding: com.sun.tools.internal.ws.wsdl.document.soap.SOAPBinding
                            public document: com.sun.tools.internal.ws.wsdl.document.WSDLDocument
                            public hasOverloadedOperations: boolean
                            public headers: java.util.Map
                            public operation: com.sun.tools.internal.ws.processor.model.Operation
                            public constructor(arg0: com.sun.tools.internal.ws.processor.model.Port, arg1: com.sun.tools.internal.ws.wsdl.document.Port, arg2: com.sun.tools.internal.ws.wsdl.document.Operation, arg3: com.sun.tools.internal.ws.wsdl.document.BindingOperation, arg4: com.sun.tools.internal.ws.wsdl.document.soap.SOAPBinding, arg5: com.sun.tools.internal.ws.wsdl.document.WSDLDocument, arg6: boolean, arg7: java.util.Map)
                        }
                        abstract class WSDLModelerBase implements com.sun.tools.internal.ws.processor.modeler.Modeler {
                            protected errReceiver: com.sun.tools.internal.ws.wscompile.ErrorReceiverFilter
                            protected options: com.sun.tools.internal.ws.wscompile.WsimportOptions
                            protected forest: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder
                            numPasses: int
                            protected static OPERATION_HAS_VOID_RETURN_TYPE: java.lang.String
                            protected static WSDL_PARAMETER_ORDER: java.lang.String
                            public static WSDL_RESULT_PARAMETER: java.lang.String
                            public static MESSAGE_HAS_MIME_MULTIPART_RELATED_BINDING: java.lang.String
                            protected info: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModelerBase$ProcessSOAPOperationInfo
                            protected _javaExceptions: java.util.Map<java.lang.String, com.sun.tools.internal.ws.processor.model.java.JavaException>
                            protected _faultTypeToStructureMap: java.util.Map
                            protected _bindingNameToPortMap: java.util.Map<javax.xml.namespace.QName, com.sun.tools.internal.ws.processor.model.Port>
                            protected parser: com.sun.tools.internal.ws.wsdl.parser.WSDLParser
                            protected document: com.sun.tools.internal.ws.wsdl.document.WSDLDocument
                            protected static NULL_LOCATOR: org.xml.sax.helpers.LocatorImpl
                            public constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver, arg2: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder)
                            protected applyPortMethodCustomization(arg0: com.sun.tools.internal.ws.processor.model.Port, arg1: com.sun.tools.internal.ws.wsdl.document.Port): void
                            protected isProvider(arg0: com.sun.tools.internal.ws.wsdl.document.Port): boolean
                            protected getSOAPRequestBody(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPBody
                            protected isRequestMimeMultipart(): boolean
                            protected isResponseMimeMultipart(): boolean
                            protected getSOAPResponseBody(): com.sun.tools.internal.ws.wsdl.document.soap.SOAPBody
                            protected getOutputMessage(): com.sun.tools.internal.ws.wsdl.document.Message
                            protected getInputMessage(): com.sun.tools.internal.ws.wsdl.document.Message
                            protected getMessageParts(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPBody, arg1: com.sun.tools.internal.ws.wsdl.document.Message, arg2: boolean): java.util.List<com.sun.tools.internal.ws.wsdl.document.MessagePart>
                            protected getMimeContentParts(arg0: com.sun.tools.internal.ws.wsdl.document.Message, arg1: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): java.util.List<com.sun.tools.internal.ws.wsdl.document.MessagePart>
                            protected validateMimeParts(arg0: java.lang.Iterable<com.sun.tools.internal.ws.wsdl.document.mime.MIMEPart>): boolean
                            protected getAlternateMimeTypes(arg0: java.util.List<com.sun.tools.internal.ws.wsdl.document.mime.MIMEContent>): java.util.List<java.lang.String>
                            protected getMimeParts(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): java.lang.Iterable<com.sun.tools.internal.ws.wsdl.document.mime.MIMEPart>
                            getMimeContents<T>(...args: any[]): any
                            protected isStyleAndPartMatch(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPOperation, arg1: com.sun.tools.internal.ws.wsdl.document.MessagePart): boolean
                            protected getRequestNamespaceURI(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPBody): java.lang.String
                            protected getResponseNamespaceURI(arg0: com.sun.tools.internal.ws.wsdl.document.soap.SOAPBody): java.lang.String
                            protected getHeaderExtensions(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible): java.util.List<com.sun.tools.internal.ws.wsdl.document.soap.SOAPHeader>
                            protected getDuplicateFaultNames(): java.util.Set
                            protected validateBodyParts(arg0: com.sun.tools.internal.ws.wsdl.document.BindingOperation): boolean
                            protected getLiteralJavaMemberName(arg0: com.sun.tools.internal.ws.processor.model.Fault): java.lang.String
                            protected makePackageQualified(arg0: java.lang.String): java.lang.String
                            protected getUniqueName(arg0: com.sun.tools.internal.ws.wsdl.document.Operation, arg1: boolean): java.lang.String
                            protected static getQNameOf(arg0: com.sun.tools.internal.ws.wsdl.framework.GloballyKnown): javax.xml.namespace.QName
                            protected static getExtensionOfType(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg1: java.lang.Class): com.sun.tools.internal.ws.api.wsdl.TWSDLExtension
                            protected getAnyExtensionOfType(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLExtensible, arg1: java.lang.Class): com.sun.tools.internal.ws.api.wsdl.TWSDLExtension
                            protected static findMessage(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.wsdl.document.WSDLDocument): com.sun.tools.internal.ws.wsdl.document.Message
                            protected static tokenListContains(arg0: java.lang.String, arg1: java.lang.String): boolean
                            protected getUniqueClassName(arg0: java.lang.String): java.lang.String
                            protected isConflictingClassName(arg0: java.lang.String): boolean
                            protected isConflictingServiceClassName(arg0: java.lang.String): boolean
                            protected isConflictingStubClassName(arg0: java.lang.String): boolean
                            protected isConflictingTieClassName(arg0: java.lang.String): boolean
                            protected isConflictingPortClassName(arg0: java.lang.String): boolean
                            protected isConflictingExceptionClassName(arg0: java.lang.String): boolean
                            protected warning(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity, arg1: java.lang.String): void
                            protected error(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity, arg1: java.lang.String): void
                        }
                        class WSDLModeler$StyleAndUse extends java.lang.Enum<com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler$StyleAndUse> {
                            public static RPC_LITERAL: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler$StyleAndUse
                            public static DOC_LITERAL: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler$StyleAndUse
                            public static values(): com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler$StyleAndUse[]
                            valueOf<T>(...args: any[]): any
                        }
                        class WSDLModeler$1 implements com.sun.tools.internal.ws.wsdl.framework.ParserListener {
                            this$0: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler
                            constructor(arg0: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler)
                            public ignoringExtension(arg0: com.sun.tools.internal.ws.wsdl.framework.Entity, arg1: javax.xml.namespace.QName, arg2: javax.xml.namespace.QName): void
                            public doneParsingEntity(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.wsdl.framework.Entity): void
                        }
                        class WSDLModeler extends com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModelerBase {
                            static $assertionsDisabled: boolean
                            public constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg1: com.sun.tools.internal.ws.wscompile.ErrorReceiver, arg2: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder)
                            public buildModel(): com.sun.tools.internal.ws.processor.model.Model
                            protected processService(arg0: com.sun.tools.internal.ws.wsdl.document.Service, arg1: com.sun.tools.internal.ws.processor.model.Model, arg2: com.sun.tools.internal.ws.wsdl.document.WSDLDocument): void
                            protected processPort(arg0: com.sun.tools.internal.ws.wsdl.document.Port, arg1: com.sun.tools.internal.ws.processor.model.Service, arg2: com.sun.tools.internal.ws.wsdl.document.WSDLDocument): boolean
                            protected processSOAPOperation(): com.sun.tools.internal.ws.processor.model.Operation
                            protected processLiteralSOAPOperation(arg0: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler$StyleAndUse): com.sun.tools.internal.ws.processor.model.Operation
                            protected getAsyncOperationName(arg0: com.sun.tools.internal.ws.processor.model.Operation): java.lang.String
                            protected isAsync(arg0: com.sun.tools.internal.ws.wsdl.document.PortType, arg1: com.sun.tools.internal.ws.wsdl.document.Operation): boolean
                            protected handleLiteralSOAPHeaders(arg0: com.sun.tools.internal.ws.processor.model.Request, arg1: com.sun.tools.internal.ws.processor.model.Response, arg2: java.util.Iterator, arg3: java.util.Set, arg4: java.util.List<java.lang.String>, arg5: boolean): void
                            protected handleLiteralSOAPFault(arg0: com.sun.tools.internal.ws.processor.model.Response, arg1: java.util.Set): void
                            setMessagePartsBinding<T>(...args: any[]): any
                            getAdditionHeaderParts(arg0: com.sun.tools.internal.ws.wsdl.document.BindingOperation, arg1: com.sun.tools.internal.ws.wsdl.document.Message, arg2: boolean): java.util.List<com.sun.tools.internal.ws.wsdl.document.MessagePart>
                            protected isConflictingPortClassName(arg0: java.lang.String): boolean
                            protected isUnwrappable(): boolean
                            protected isSingleInOutPart(arg0: java.util.Set, arg1: com.sun.tools.internal.ws.wsdl.document.MessagePart): boolean
                            protected buildJAXBModel(arg0: com.sun.tools.internal.ws.wsdl.document.WSDLDocument): void
                            protected getJavaPackage(): java.lang.String
                            protected createJavaInterfaceForProviderPort(arg0: com.sun.tools.internal.ws.processor.model.Port): void
                            protected createJavaInterfaceForPort(arg0: com.sun.tools.internal.ws.processor.model.Port, arg1: boolean): void
                            protected getServiceInterfaceName(arg0: javax.xml.namespace.QName, arg1: com.sun.tools.internal.ws.wsdl.document.Service): java.lang.String
                            protected getJavaNameOfSEI(arg0: com.sun.tools.internal.ws.processor.model.Port): java.lang.String
                            protected createJavaMethodForOperation(arg0: com.sun.tools.internal.ws.processor.model.Port, arg1: com.sun.tools.internal.ws.processor.model.Operation, arg2: com.sun.tools.internal.ws.processor.model.java.JavaInterface): void
                            protected createJavaExceptionFromLiteralType(arg0: com.sun.tools.internal.ws.processor.model.Fault, arg1: com.sun.tools.internal.ws.processor.model.Port, arg2: java.lang.String): boolean
                            protected isRequestResponse(): boolean
                            protected getAsynParameterOrder(): java.util.List<java.lang.String>
                            protected getParameterOrder(): java.util.List<com.sun.tools.internal.ws.wsdl.document.MessagePart>
                            protected getClassName(arg0: com.sun.tools.internal.ws.processor.model.Port, arg1: java.lang.String): java.lang.String
                            protected isConflictingServiceClassName(arg0: java.lang.String): boolean
                            protected isConflictingExceptionClassName(arg0: java.lang.String): boolean
                            protected getJAXBModelBuilder(): com.sun.tools.internal.ws.processor.modeler.wsdl.JAXBModelBuilder
                            protected validateWSDLBindingStyle(arg0: com.sun.tools.internal.ws.wsdl.document.Binding): boolean
                            protected static setDocumentationIfPresent(arg0: com.sun.tools.internal.ws.processor.model.ModelObject, arg1: com.sun.tools.internal.ws.wsdl.document.Documentation): void
                            protected getJavaNameForOperation(arg0: com.sun.tools.internal.ws.processor.model.Operation): java.lang.String
                        }
                        class JAXBModelBuilder {
                            protected static NULL_LOCATOR: org.xml.sax.helpers.LocatorImpl
                            public constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg1: com.sun.tools.internal.ws.processor.util.ClassNameCollector, arg2: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder, arg3: com.sun.tools.internal.ws.wscompile.ErrorReceiver)
                            public getJAXBType(arg0: javax.xml.namespace.QName): com.sun.tools.internal.ws.processor.model.jaxb.JAXBType
                            public getElementTypeAndAnn(arg0: javax.xml.namespace.QName): com.sun.tools.internal.xjc.api.TypeAndAnnotation
                            protected bind(): void
                            protected getJAXBSchemaCompiler(): com.sun.tools.internal.xjc.api.SchemaCompiler
                            public getJAXBModel(): com.sun.tools.internal.ws.processor.model.jaxb.JAXBModel
                        }
                        class ClassNameAllocatorImpl implements com.sun.tools.internal.xjc.api.ClassNameAllocator {
                            public constructor(arg0: com.sun.tools.internal.ws.processor.util.ClassNameCollector)
                            public assignClassName(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                            public getJaxbGeneratedClasses(): java.util.Set<java.lang.String>
                        }
                        class PseudoSchemaBuilder {
                            asyncRespBeanBinding: boolean
                            public static build(arg0: com.sun.tools.internal.ws.processor.modeler.wsdl.WSDLModeler, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): java.util.List<org.xml.sax.InputSource>
                        }
                        class ModelerUtils {
                            constructor()
                            public static createJAXBStructureType(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBType): com.sun.tools.internal.ws.processor.model.jaxb.JAXBStructuredType
                            public static createUnwrappedParameters(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBType, arg1: com.sun.tools.internal.ws.processor.model.Block): java.util.List<com.sun.tools.internal.ws.processor.model.Parameter>
                            public static createRpcLitParameters(arg0: com.sun.tools.internal.ws.wsdl.document.Message, arg1: com.sun.tools.internal.ws.processor.model.Block, arg2: com.sun.tools.internal.xjc.api.S2JJAXBModel, arg3: com.sun.tools.internal.ws.wscompile.ErrorReceiverFilter): java.util.List<com.sun.tools.internal.ws.processor.model.Parameter>
                            public static createParameter(arg0: java.lang.String, arg1: com.sun.tools.internal.ws.processor.model.AbstractType, arg2: com.sun.tools.internal.ws.processor.model.Block): com.sun.tools.internal.ws.processor.model.Parameter
                            public static getParameter(arg0: java.lang.String, arg1: java.util.List<com.sun.tools.internal.ws.processor.model.Parameter>): com.sun.tools.internal.ws.processor.model.Parameter
                            public static isEquivalentLiteralStructures(arg0: com.sun.tools.internal.ws.processor.model.jaxb.JAXBStructuredType, arg1: com.sun.tools.internal.ws.processor.model.jaxb.JAXBStructuredType): boolean
                            public static getRawTypeName(arg0: com.sun.tools.internal.ws.processor.model.Parameter): javax.xml.namespace.QName
                            public static isBoundToMimeContent(arg0: com.sun.tools.internal.ws.wsdl.document.MessagePart): boolean
                            public static isBoundToSOAPBody(arg0: com.sun.tools.internal.ws.wsdl.document.MessagePart): boolean
                            public static isBoundToSOAPHeader(arg0: com.sun.tools.internal.ws.wsdl.document.MessagePart): boolean
                            public static isUnbound(arg0: com.sun.tools.internal.ws.wsdl.document.MessagePart): boolean
                        }
                        class AccessorElement {
                            public constructor(arg0: java.lang.String, arg1: javax.xml.namespace.QName)
                            public getType(): javax.xml.namespace.QName
                            public setType(arg0: javax.xml.namespace.QName): void
                            public getName(): java.lang.String
                            public setName(arg0: java.lang.String): void
                        }

                     }
                     interface Modeler {
                         public buildModel(): com.sun.tools.internal.ws.processor.model.Model
                     }
                     namespace annotation {
                        class WrapperInfo {
                            public wrapperName: java.lang.String
                            constructor(...args: any[])
                            public setWrapperName(arg0: java.lang.String): void
                            public getWrapperName(): java.lang.String
                        }
                        class WebServiceConstants extends java.lang.Enum<com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants> {
                            public static SERVICE: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants
                            public static JAXWS_PACKAGE_PD: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants
                            public static PD_JAXWS_PACKAGE_PD: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants
                            public static BEAN: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants
                            public static FAULT_INFO: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants
                            public static RESPONSE: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants
                            public static values(): com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceConstants[]
                            valueOf<T>(...args: any[]): any
                            public getValue(): java.lang.String
                        }
                        class WebServiceWrapperGenerator$ApWrapperBeanGenerator extends com.sun.xml.internal.ws.model.AbstractWrapperBeanGenerator<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, javax.lang.model.element.ExecutableElement, com.sun.tools.internal.ws.processor.modeler.annotation.MemberInfo> {
                            this$0: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceWrapperGenerator
                            protected constructor(arg0: com.sun.xml.internal.bind.v2.model.annotation.AnnotationReader<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, any, javax.lang.model.element.ExecutableElement>, arg1: com.sun.xml.internal.bind.v2.model.nav.Navigator<javax.lang.model.type.TypeMirror, javax.lang.model.element.TypeElement, any, javax.lang.model.element.ExecutableElement>, arg2: com.sun.xml.internal.ws.model.AbstractWrapperBeanGenerator$BeanMemberFactory<javax.lang.model.type.TypeMirror, com.sun.tools.internal.ws.processor.modeler.annotation.MemberInfo>)
                            getSafeType<T>(...args: any[]): any
                            getHolderValueType<T>(...args: any[]): any
                            isVoidType<T>(...args: any[]): any
                        }
                        class WebServiceWrapperGenerator$FieldFactory implements com.sun.xml.internal.ws.model.AbstractWrapperBeanGenerator$BeanMemberFactory<javax.lang.model.type.TypeMirror, com.sun.tools.internal.ws.processor.modeler.annotation.MemberInfo> {
                            createWrapperBeanMember<T>(...args: any[]): any
                            constructor(arg0: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceWrapperGenerator$1)
                        }
                        class WebServiceWrapperGenerator$1 {
                        }
                        class WebServiceWrapperGenerator extends com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceVisitor {
                            static $assertionsDisabled: boolean
                            public constructor(arg0: com.sun.tools.internal.ws.processor.modeler.annotation.ModelBuilder, arg1: com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext)
                            protected processWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            protected postProcessWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            protected doPostProcessWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            protected processMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.jws.WebMethod): void
                            protected getCMClass(arg0: java.lang.String, arg1: com.sun.codemodel.internal.ClassType): com.sun.codemodel.internal.JDefinedClass
                            protected isWSDLException(arg0: java.util.Collection<com.sun.tools.internal.ws.processor.modeler.annotation.MemberInfo>, arg1: javax.lang.model.element.TypeElement): boolean
                            static access$100(arg0: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceWrapperGenerator, arg1: javax.lang.model.type.TypeMirror): javax.lang.model.type.TypeMirror
                        }
                        class WebServiceVisitor$NoTypeVisitor extends javax.lang.model.util.SimpleTypeVisitor6<java.lang.Boolean, java.lang.Void> {
                            visitNoType<T>(...args: any[]): any
                            defaultAction<T>(...args: any[]): any
                            constructor(arg0: com.sun.tools.internal.ws.processor.modeler.annotation.WebServiceVisitor$1)
                        }
                        class WebServiceVisitor$MySoapBinding implements javax.jws.soap.SOAPBinding {
                            protected constructor()
                            public style(): javax.jws.soap.SOAPBinding$Style
                            public use(): javax.jws.soap.SOAPBinding$Use
                            public parameterStyle(): javax.jws.soap.SOAPBinding$ParameterStyle
                            public annotationType(): java.lang.Class<java.lang.annotation.Annotation>
                        }
                        class WebServiceVisitor$1 {
                            static $SwitchMap$javax$lang$model$element$ElementKind: int[]
                        }
                        abstract class WebServiceVisitor extends javax.lang.model.util.SimpleElementVisitor6<java.lang.Void, java.lang.Object> {
                            protected builder: com.sun.tools.internal.ws.processor.modeler.annotation.ModelBuilder
                            protected wsdlNamespace: java.lang.String
                            protected typeNamespace: java.lang.String
                            protected soapBindingStack: java.util.Stack<javax.jws.soap.SOAPBinding>
                            protected typeElementSoapBinding: javax.jws.soap.SOAPBinding
                            protected soapStyle: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle
                            protected wrapped: boolean
                            protected port: com.sun.tools.internal.ws.processor.model.Port
                            protected serviceImplName: javax.lang.model.element.Name
                            protected endpointInterfaceName: javax.lang.model.element.Name
                            protected context: com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext
                            protected seiContext: com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext$SeiContext
                            protected processingSei: boolean
                            protected serviceName: java.lang.String
                            protected packageName: javax.lang.model.element.Name
                            protected portName: java.lang.String
                            protected endpointReferencesInterface: boolean
                            hasWebMethods<T>(...args: any[]): any
                            protected typeElement: javax.lang.model.element.TypeElement
                            protected processedMethods: java.util.Set<java.lang.String>
                            protected pushedSoapBinding: boolean
                            static $assertionsDisabled: boolean
                            public constructor(arg0: com.sun.tools.internal.ws.processor.modeler.annotation.ModelBuilder, arg1: com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext)
                            visitType<T>(...args: any[]): any
                            protected verifySeiAnnotations(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            protected verifyImplAnnotations(arg0: javax.lang.model.element.TypeElement): void
                            protected checkForInvalidSeiAnnotation(arg0: javax.lang.model.element.TypeElement, arg1: java.lang.Class): void
                            protected checkForInvalidImplAnnotation(arg0: javax.lang.model.element.Element, arg1: java.lang.Class): void
                            protected preProcessWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            public static sameStyle(arg0: javax.jws.soap.SOAPBinding$Style, arg1: com.sun.tools.internal.ws.wsdl.document.soap.SOAPStyle): boolean
                            protected pushSoapBinding(arg0: javax.jws.soap.SOAPBinding, arg1: javax.lang.model.element.Element, arg2: javax.lang.model.element.TypeElement): boolean
                            protected popSoapBinding(): javax.jws.soap.SOAPBinding
                            protected getNamespace(arg0: javax.lang.model.element.PackageElement): java.lang.String
                            protected shouldProcessWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): boolean
                            protected processWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            protected postProcessWebService(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): void
                            protected processMethods(arg0: javax.lang.model.element.TypeElement): void
                            visitExecutable<T>(...args: any[]): any
                            protected processedMethod(arg0: javax.lang.model.element.ExecutableElement): boolean
                            protected shouldProcessMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.jws.WebMethod): boolean
                            protected processMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.jws.WebMethod): void
                            protected isLegalImplementation(arg0: javax.jws.WebService, arg1: javax.lang.model.element.TypeElement): boolean
                            protected classImplementsSei(arg0: javax.lang.model.element.TypeElement, arg1: javax.lang.model.element.TypeElement): boolean
                            protected sameMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.ExecutableElement): boolean
                            protected isLegalSei(arg0: javax.lang.model.element.TypeElement): boolean
                            protected methodsAreLegal(arg0: javax.lang.model.element.TypeElement): boolean
                            protected isLegalMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.TypeElement): boolean
                            protected isLegalParameter(arg0: javax.lang.model.element.VariableElement, arg1: javax.lang.model.element.ExecutableElement, arg2: javax.lang.model.element.TypeElement, arg3: int): boolean
                            protected isDocLitWrapped(): boolean
                            protected isValidOneWayMethod(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.lang.model.element.TypeElement): boolean
                            protected getModeParameterCount(arg0: javax.lang.model.element.ExecutableElement, arg1: javax.jws.WebParam$Mode): int
                            protected isEquivalentModes(arg0: javax.jws.WebParam$Mode, arg1: javax.jws.WebParam$Mode): boolean
                            protected isHolder(arg0: javax.lang.model.element.VariableElement): boolean
                            protected isLegalType(arg0: javax.lang.model.type.TypeMirror): boolean
                            protected getOutParameter(arg0: javax.lang.model.element.ExecutableElement): javax.lang.model.element.VariableElement
                        }
                        class MakeSafeTypeVisitor extends javax.lang.model.util.SimpleTypeVisitor6<javax.lang.model.type.TypeMirror, javax.lang.model.util.Types> {
                            collectionType: javax.lang.model.element.TypeElement
                            mapType: javax.lang.model.element.TypeElement
                            public constructor(arg0: javax.annotation.processing.ProcessingEnvironment)
                            visitDeclared<T>(...args: any[]): any
                            visitNoType<T>(...args: any[]): any
                            defaultAction<T>(...args: any[]): any
                        }
                        class MemberInfo implements java.lang.Comparable<com.sun.tools.internal.ws.processor.modeler.annotation.MemberInfo> {
                            public constructor(arg0: javax.lang.model.type.TypeMirror, arg1: java.lang.String, arg2: java.util.List<java.lang.annotation.Annotation>)
                            public getJaxbAnnotations(): java.util.List<java.lang.annotation.Annotation>
                            public getParamType(): javax.lang.model.type.TypeMirror
                            public getParamName(): java.lang.String
                            compareTo<T>(...args: any[]): any
                            public equals(arg0: java.lang.Object): boolean
                            public hashCode(): int
                        }
                        interface ModelBuilder {
                            public getProcessingEnvironment(): javax.annotation.processing.ProcessingEnvironment
                            public getOperationName(arg0: javax.lang.model.element.Name): java.lang.String
                            public getHolderValueType(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.type.TypeMirror
                            public checkAndSetProcessed(arg0: javax.lang.model.element.TypeElement): boolean
                            public isServiceException(arg0: javax.lang.model.type.TypeMirror): boolean
                            public isRemote(arg0: javax.lang.model.element.TypeElement): boolean
                            public canOverWriteClass(arg0: java.lang.String): boolean
                            public getOptions(): com.sun.tools.internal.ws.wscompile.WsgenOptions
                            public getSourceDir(): java.io.File
                            public log(arg0: java.lang.String): void
                            public processWarning(arg0: java.lang.String): void
                            processError<T>(...args: any[]): any
                        }
                        class AnnotationProcessorContext$SeiContext {
                            constructor(...args: any[])
                            public setImplementsSei(arg0: boolean): void
                            public getImplementsSei(): boolean
                            public setNamespaceUri(arg0: java.lang.String): void
                            public getNamespaceUri(): java.lang.String
                            public getSeiImplName(): javax.lang.model.element.Name
                            public setSeiImplName(arg0: javax.lang.model.element.Name): void
                            public setReqWrapperOperation(arg0: javax.lang.model.element.ExecutableElement, arg1: com.sun.tools.internal.ws.processor.modeler.annotation.WrapperInfo): void
                            public getReqOperationWrapper(arg0: javax.lang.model.element.ExecutableElement): com.sun.tools.internal.ws.processor.modeler.annotation.WrapperInfo
                            public setResWrapperOperation(arg0: javax.lang.model.element.ExecutableElement, arg1: com.sun.tools.internal.ws.processor.modeler.annotation.WrapperInfo): void
                            public getResOperationWrapper(arg0: javax.lang.model.element.ExecutableElement): com.sun.tools.internal.ws.processor.modeler.annotation.WrapperInfo
                            public methodToString(arg0: javax.lang.model.element.ExecutableElement): java.lang.String
                            public clearExceptionMap(): void
                            public addExceptionBeanEntry(arg0: javax.lang.model.element.Name, arg1: com.sun.tools.internal.ws.processor.modeler.annotation.FaultInfo, arg2: com.sun.tools.internal.ws.processor.modeler.annotation.ModelBuilder): void
                            public getExceptionBeanName(arg0: javax.lang.model.element.Name): com.sun.tools.internal.ws.processor.modeler.annotation.FaultInfo
                        }
                        class AnnotationProcessorContext {
                            public constructor()
                            public addSeiContext(arg0: javax.lang.model.element.Name, arg1: com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext$SeiContext): void
                            getSeiContext<T>(...args: any[]): any
                            public getSeiContexts(): java.util.Collection<com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext$SeiContext>
                            public getRound(): int
                            public incrementRound(): void
                            public static isEncoded(arg0: com.sun.tools.internal.ws.processor.model.Model): boolean
                            public setModelCompleted(arg0: boolean): void
                            public isModelCompleted(): boolean
                        }
                        class FaultInfo {
                            public beanName: java.lang.String
                            public beanTypeMoniker: com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker
                            isWsdlException<T>(...args: any[]): any
                            public elementName: javax.xml.namespace.QName
                            constructor(...args: any[])
                            public setIsWsdlException(arg0: boolean): void
                            public setBeanName(arg0: java.lang.String): void
                            public getBeanName(): java.lang.String
                            public setElementName(arg0: javax.xml.namespace.QName): void
                            public getElementName(): javax.xml.namespace.QName
                            public setBeanTypeMoniker(arg0: com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker): void
                            public getBeanTypeMoniker(): com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker
                        }
                        interface TypeMoniker {
                            public create(arg0: javax.annotation.processing.ProcessingEnvironment): javax.lang.model.type.TypeMirror
                        }
                        class WebServiceAp extends javax.annotation.processing.AbstractProcessor implements com.sun.tools.internal.ws.processor.modeler.annotation.ModelBuilder {
                            public static DO_NOT_OVERWRITE: java.lang.String
                            public static IGNORE_NO_WEB_SERVICE_FOUND_WARNING: java.lang.String
                            protected context: com.sun.tools.internal.ws.processor.modeler.annotation.AnnotationProcessorContext
                            constructor(...args: any[])
                            public init(arg0: javax.annotation.processing.ProcessingEnvironment): void
                            public process(arg0: java.util.Set<javax.lang.model.element.TypeElement>, arg1: javax.annotation.processing.RoundEnvironment): boolean
                            public processWarning(arg0: java.lang.String): void
                            protected report(arg0: java.lang.String): void
                            processError<T>(...args: any[]): any
                            public canOverWriteClass(arg0: java.lang.String): boolean
                            public getSourceDir(): java.io.File
                            public isRemote(arg0: javax.lang.model.element.TypeElement): boolean
                            public isServiceException(arg0: javax.lang.model.type.TypeMirror): boolean
                            public getHolderValueType(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.type.TypeMirror
                            public checkAndSetProcessed(arg0: javax.lang.model.element.TypeElement): boolean
                            public log(arg0: java.lang.String): void
                            public getOptions(): com.sun.tools.internal.ws.wscompile.WsgenOptions
                            public getProcessingEnvironment(): javax.annotation.processing.ProcessingEnvironment
                            public getOperationName(arg0: javax.lang.model.element.Name): java.lang.String
                            public getSupportedSourceVersion(): javax.lang.model.SourceVersion
                        }
                        class TypeMonikerFactory$ArrayTypeMoniker implements com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker {
                            public constructor(arg0: javax.lang.model.type.ArrayType)
                            public create(arg0: javax.annotation.processing.ProcessingEnvironment): javax.lang.model.type.TypeMirror
                        }
                        class TypeMonikerFactory$DeclaredTypeMoniker implements com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker {
                            public constructor(arg0: javax.lang.model.type.DeclaredType)
                            public create(arg0: javax.annotation.processing.ProcessingEnvironment): javax.lang.model.type.TypeMirror
                        }
                        class TypeMonikerFactory$PrimitiveTypeMoniker implements com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker {
                            public constructor(arg0: javax.lang.model.type.PrimitiveType)
                            public create(arg0: javax.annotation.processing.ProcessingEnvironment): javax.lang.model.type.TypeMirror
                        }
                        class TypeMonikerFactory$StringMoniker implements com.sun.tools.internal.ws.processor.modeler.annotation.TypeMoniker {
                            public constructor(arg0: java.lang.String)
                            public create(arg0: javax.annotation.processing.ProcessingEnvironment): javax.lang.model.type.TypeMirror
                        }
                        class TypeMonikerFactory {
                            public constructor()
                            getTypeMoniker<T>(...args: any[]): any
                        }
                        class TypeModeler {
                            public static getDeclaration(arg0: javax.lang.model.type.TypeMirror): javax.lang.model.element.TypeElement
                            getDeclaringClassMethod<T>(...args: any[]): any
                            public static collectInterfaces(arg0: javax.lang.model.element.TypeElement): java.util.Collection<javax.lang.model.type.DeclaredType>
                            isSubclass<T>(...args: any[]): any
                            public static getHolderValueType(arg0: javax.lang.model.type.TypeMirror, arg1: javax.lang.model.element.TypeElement, arg2: javax.annotation.processing.ProcessingEnvironment): javax.lang.model.type.TypeMirror
                            getValueMember<T>(...args: any[]): any
                            public static isSubElement(arg0: javax.lang.model.element.TypeElement, arg1: javax.lang.model.element.TypeElement): boolean
                        }

                     }
                     class ModelerException extends com.sun.tools.internal.ws.processor.ProcessorException {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }
                     class ModelerConstants extends java.lang.Enum<com.sun.tools.internal.ws.processor.modeler.ModelerConstants> {
                         public static FALSE_STR: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static ZERO_STR: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static NULL_STR: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static ARRAY_STR: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static IOEXCEPTION_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOOLEAN_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_BOOLEAN_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BYTE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BYTE_ARRAY_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_BYTE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_BYTE_ARRAY_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static CLASS_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static CHAR_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_CHAR_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static DOUBLE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_DOUBLE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static FLOAT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_FLOAT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static INT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_INTEGER_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static LONG_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_LONG_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static SHORT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BOXED_SHORT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BIGDECIMAL_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static BIGINTEGER_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static CALENDAR_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static DATE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static STRING_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static STRING_ARRAY_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static QNAME_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static VOID_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static OBJECT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static SOAPELEMENT_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static IMAGE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static MIME_MULTIPART_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static SOURCE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static DATA_HANDLER_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static URI_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static COLLECTION_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static LIST_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static SET_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static VECTOR_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static STACK_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static LINKED_LIST_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static ARRAY_LIST_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static HASH_SET_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static TREE_SET_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static MAP_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static HASH_MAP_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static TREE_MAP_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static HASHTABLE_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static PROPERTIES_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static JAX_WS_MAP_ENTRY_CLASSNAME: com.sun.tools.internal.ws.processor.modeler.ModelerConstants
                         public static values(): com.sun.tools.internal.ws.processor.modeler.ModelerConstants[]
                         valueOf<T>(...args: any[]): any
                         public getValue(): java.lang.String
                     }
                     class JavaSimpleTypeCreator {
                         public static BOOLEAN_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_BOOLEAN_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BYTE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BYTE_ARRAY_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_BYTE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_BYTE_ARRAY_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static DOUBLE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_DOUBLE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static FLOAT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_FLOAT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static INT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_INTEGER_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static LONG_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_LONG_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static SHORT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BOXED_SHORT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static DECIMAL_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static BIG_INTEGER_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static CALENDAR_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static DATE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static STRING_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static STRING_ARRAY_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static QNAME_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static VOID_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static OBJECT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static SOAPELEMENT_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static URI_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static IMAGE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static MIME_MULTIPART_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static SOURCE_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static DATA_HANDLER_JAVATYPE: com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                         public static getJavaSimpleType(arg0: java.lang.String): com.sun.tools.internal.ws.processor.model.java.JavaSimpleType
                     }

                  }
                  namespace util {
                     class IndentingWriter extends java.io.BufferedWriter {
                         constructor(...args: any[])
                         write<T>(...args: any[]): any
                         public newLine(): void
                         protected checkWrite(): void
                         protected indentIn(): void
                         protected indentOut(): void
                         pI<T>(...args: any[]): any
                         pO<T>(...args: any[]): any
                         p<T>(...args: any[]): any
                         protected canEncode(arg0: java.lang.String): boolean
                         pln<T>(...args: any[]): any
                         plnI<T>(...args: any[]): any
                         pOln<T>(...args: any[]): any
                         pOlnI<T>(...args: any[]): any
                         public pM(arg0: java.lang.String): void
                         public pMln(arg0: java.lang.String): void
                         public pMlnI(arg0: java.lang.String): void
                         public pMO(arg0: java.lang.String): void
                         public pMOln(arg0: java.lang.String): void
                         public pF(arg0: java.lang.String, arg1: java.lang.Object[]): void
                         public pFln(arg0: java.lang.String, arg1: java.lang.Object[]): void
                     }
                     class DirectoryUtil {
                         public constructor()
                         public static getOutputDirectoryFor(arg0: java.lang.String, arg1: java.io.File): java.io.File
                         public static getRelativePathfromCommonBase(arg0: java.io.File, arg1: java.io.File): java.lang.String
                     }
                     class ClassNameCollector extends com.sun.tools.internal.ws.processor.model.ExtendedModelVisitor implements com.sun.tools.internal.ws.processor.model.jaxb.JAXBTypeVisitor {
                         doneVisitingJAXBModel: boolean
                         public constructor()
                         public process(arg0: com.sun.tools.internal.ws.processor.model.Model): void
                         public getConflictingClassNames(): java.util.Set
                         postVisit<T>(...args: any[]): any
                         preVisit<T>(...args: any[]): any
                         protected processPort11x(arg0: com.sun.tools.internal.ws.processor.model.Port): void
                         protected shouldVisit(arg0: com.sun.tools.internal.ws.processor.model.Port): boolean
                         protected visitBodyBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         protected visitHeaderBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         protected visitFaultBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         protected visitBlock(arg0: com.sun.tools.internal.ws.processor.model.Block): void
                         visit<T>(...args: any[]): any
                         public getSeiClassNames(): java.util.Set<java.lang.String>
                         public getJaxbGeneratedClassNames(): java.util.Set<java.lang.String>
                         public getExceptionClassNames(): java.util.Set<java.lang.String>
                     }

                  }
                  namespace generator {
                     class GeneratorException extends com.sun.tools.internal.ws.processor.ProcessorException {
                         constructor(...args: any[])
                         public getDefaultResourceBundleName(): java.lang.String
                     }
                     class W3CAddressingJavaGeneratorExtension extends com.sun.tools.internal.ws.api.TJavaGeneratorExtension {
                         public constructor()
                         public writeMethodAnnotations(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLOperation, arg1: com.sun.codemodel.internal.JMethod): void
                     }
                     class ServiceGenerator extends com.sun.tools.internal.ws.processor.generator.GeneratorBase {
                         public static generate(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): void
                         public visit(arg0: com.sun.tools.internal.ws.processor.model.Service): void
                     }
                     abstract class GeneratorBase implements com.sun.tools.internal.ws.processor.model.ModelVisitor {
                         protected donotOverride: boolean
                         protected cm: com.sun.codemodel.internal.JCodeModel
                         protected model: com.sun.tools.internal.ws.processor.model.Model
                         protected wsdlLocation: java.lang.String
                         protected receiver: com.sun.tools.internal.ws.wscompile.ErrorReceiver
                         protected options: com.sun.tools.internal.ws.wscompile.WsimportOptions
                         protected constructor()
                         public init(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): void
                         public doGeneration(): void
                         visit<T>(...args: any[]): any
                         getJAXWSClassComment<T>(...args: any[]): any
                         protected getClass(arg0: java.lang.String, arg1: com.sun.codemodel.internal.ClassType): com.sun.codemodel.internal.JDefinedClass
                         protected log(arg0: java.lang.String): void
                         protected writeHandlerConfig(arg0: java.lang.String, arg1: com.sun.codemodel.internal.JDefinedClass, arg2: com.sun.tools.internal.ws.wscompile.WsimportOptions): void
                     }
                     class SeiGenerator extends com.sun.tools.internal.ws.processor.generator.GeneratorBase {
                         public constructor()
                         public static generate(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver, ...arg3: com.sun.tools.internal.ws.api.TJavaGeneratorExtension[]): void
                         public init(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver, ...arg3: com.sun.tools.internal.ws.api.TJavaGeneratorExtension[]): void
                         visit<T>(...args: any[]): any
                     }
                     class Names {
                         public static getPortName(arg0: com.sun.tools.internal.ws.processor.model.Port): java.lang.String
                         public static stripQualifier(arg0: java.lang.String): java.lang.String
                         public static getPackageName(arg0: java.lang.String): java.lang.String
                         public static customJavaTypeClassName(arg0: com.sun.tools.internal.ws.processor.model.java.JavaInterface): java.lang.String
                         public static customExceptionClassName(arg0: com.sun.tools.internal.ws.processor.model.Fault): java.lang.String
                         public static getExceptionClassMemberName(): java.lang.String
                         public static isJavaReservedWord(arg0: java.lang.String): boolean
                         public static getJavaReserverVarialbeName(arg0: java.lang.String): java.lang.String
                         public static getJavaMemberReadMethod(arg0: com.sun.tools.internal.ws.processor.model.java.JavaStructureMember): java.lang.String
                         public static getResponseName(arg0: java.lang.String): java.lang.String
                     }
                     class JwsImplGenerator$ImplFile {
                         public qualifiedName: java.lang.String
                         public name: java.lang.String
                         public static toImplFiles(arg0: java.util.List<java.lang.String>): java.util.List<com.sun.tools.internal.ws.processor.generator.JwsImplGenerator$ImplFile>
                     }
                     class JwsImplGenerator extends com.sun.tools.internal.ws.processor.generator.GeneratorBase {
                         public static generate(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): java.util.List<java.lang.String>
                         public static moveToImplDestDir(arg0: java.util.List<java.lang.String>, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): boolean
                         public visit(arg0: com.sun.tools.internal.ws.processor.model.Service): void
                     }
                     class JavaGeneratorExtensionFacade extends com.sun.tools.internal.ws.api.TJavaGeneratorExtension {
                         static $assertionsDisabled: boolean
                         constructor(...arg0: com.sun.tools.internal.ws.api.TJavaGeneratorExtension[])
                         public writeMethodAnnotations(arg0: com.sun.tools.internal.ws.api.wsdl.TWSDLOperation, arg1: com.sun.codemodel.internal.JMethod): void
                     }
                     class GeneratorUtil {
                         public constructor()
                         public static classExists(arg0: com.sun.tools.internal.ws.wscompile.Options, arg1: java.lang.String): boolean
                     }
                     abstract class GeneratorExtension {
                         public constructor()
                         public getBindingValue(arg0: java.lang.String, arg1: com.sun.xml.internal.ws.api.SOAPVersion): java.lang.String
                         public writeWebServiceAnnotation(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.codemodel.internal.JDefinedClass, arg3: com.sun.tools.internal.ws.processor.model.Port): void
                         public validateOption(arg0: java.lang.String): boolean
                         public writeWebServiceClientAnnotation(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg1: com.sun.codemodel.internal.JCodeModel, arg2: com.sun.codemodel.internal.JDefinedClass): void
                     }
                     class GeneratorConstants extends java.lang.Enum<com.sun.tools.internal.ws.processor.generator.GeneratorConstants> {
                         public static DOTC: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static SIG_INNERCLASS: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static JAVA_SRC_SUFFIX: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static QNAME_SUFFIX: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static GET: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static IS: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static RESPONSE: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static FAULT_CLASS_MEMBER_NAME: com.sun.tools.internal.ws.processor.generator.GeneratorConstants
                         public static values(): com.sun.tools.internal.ws.processor.generator.GeneratorConstants[]
                         valueOf<T>(...args: any[]): any
                         public getValue(): java.lang.String
                     }
                     class CustomExceptionGenerator extends com.sun.tools.internal.ws.processor.generator.GeneratorBase {
                         public constructor()
                         public static generate(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): void
                         public getGenerator(arg0: com.sun.tools.internal.ws.processor.model.Model, arg1: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg2: com.sun.tools.internal.ws.wscompile.ErrorReceiver): com.sun.tools.internal.ws.processor.generator.GeneratorBase
                         public visit(arg0: com.sun.tools.internal.ws.processor.model.Fault): void
                     }

                  }
                  class ProcessorException extends com.sun.xml.internal.ws.util.exception.JAXWSExceptionBase {
                      constructor(...args: any[])
                      public getDefaultResourceBundleName(): java.lang.String
                  }

               }
               namespace util {
                  namespace xml {
                     class XmlUtil extends com.sun.xml.internal.ws.util.xml.XmlUtil {
                         public constructor()
                         matchesTagNS<T>(...args: any[]): any
                     }

                  }
                  class WSToolsObjectFactoryImpl extends com.sun.tools.internal.ws.spi.WSToolsObjectFactory {
                      public constructor()
                      public wsimport(arg0: java.io.OutputStream, arg1: com.sun.xml.internal.ws.api.server.Container, arg2: java.lang.String[]): boolean
                      public wsgen(arg0: java.io.OutputStream, arg1: com.sun.xml.internal.ws.api.server.Container, arg2: java.lang.String[]): boolean
                  }
                  class WSDLParseException extends com.sun.xml.internal.ws.util.exception.JAXWSExceptionBase {
                      constructor(...args: any[])
                      public getDefaultResourceBundleName(): java.lang.String
                  }
                  class WSDLFetcher$1 extends com.sun.xml.internal.ws.api.server.PortAddressResolver {
                      this$0: com.sun.tools.internal.ws.util.WSDLFetcher
                      constructor(arg0: com.sun.tools.internal.ws.util.WSDLFetcher)
                      public getAddressFor(arg0: javax.xml.namespace.QName, arg1: java.lang.String): java.lang.String
                  }
                  class WSDLFetcher$2 implements com.sun.xml.internal.ws.wsdl.writer.DocumentLocationResolver {
                      val$baseWsdl: java.lang.String
                      val$documentMap: java.util.Map
                      val$forest: com.sun.tools.internal.ws.wsdl.parser.DOMForest
                      this$0: com.sun.tools.internal.ws.util.WSDLFetcher
                      constructor(arg0: com.sun.tools.internal.ws.util.WSDLFetcher, arg1: java.lang.String, arg2: java.util.Map, arg3: com.sun.tools.internal.ws.wsdl.parser.DOMForest)
                      public getLocationFor(arg0: java.lang.String, arg1: java.lang.String): java.lang.String
                  }
                  class WSDLFetcher {
                      public constructor(arg0: com.sun.tools.internal.ws.wscompile.WsimportOptions, arg1: com.sun.tools.internal.ws.wscompile.WsimportListener)
                      public fetchWsdls(arg0: com.sun.tools.internal.ws.wsdl.parser.MetadataFinder): java.lang.String
                  }
                  class ForkEntityResolver implements org.xml.sax.EntityResolver {
                      public constructor(arg0: org.xml.sax.EntityResolver, arg1: org.xml.sax.EntityResolver)
                      public resolveEntity(arg0: java.lang.String, arg1: java.lang.String): org.xml.sax.InputSource
                  }
                  class ClassNameInfo {
                      public constructor()
                      public static getName(arg0: java.lang.String): java.lang.String
                      public static getGenericClass(arg0: java.lang.String): java.lang.String
                      public static getQualifier(arg0: java.lang.String): java.lang.String
                      public static replaceInnerClassSym(arg0: java.lang.String): java.lang.String
                  }

               }
               namespace spi {
                  abstract class WSToolsObjectFactory {
                      public constructor()
                      public static newInstance(): com.sun.tools.internal.ws.spi.WSToolsObjectFactory
                      wsimport<T>(...args: any[]): any
                      wsgen<T>(...args: any[]): any
                  }

               }
               class WsImport {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   public static doMain(arg0: java.lang.String[]): int
               }
               class WsGen {
                   public constructor()
                   public static main(arg0: java.lang.String[]): void
                   public static doMain(arg0: java.lang.String[]): int
               }
               abstract class ToolVersion {
                   public static VERSION: com.sun.xml.internal.ws.util.Version
               }
               class Invoker {
                   static maskedPackages: java.lang.String[]
                   public static noSystemProxies: boolean
                   public constructor()
                   static invoke(arg0: java.lang.String, arg1: java.lang.String[]): int
                   public static checkIfLoading21API(): boolean
                   public static checkIfLoading22API(): boolean
                   public static createClassLoader(arg0: java.lang.ClassLoader): java.lang.ClassLoader
               }

            }

         }
         namespace corba {
            namespace se {
               namespace idl {
                  namespace toJavaPortable {
                     class ValueGen24$ImplStreamWriter {
                         this$0: com.sun.tools.corba.se.idl.toJavaPortable.ValueGen24
                         constructor(arg0: com.sun.tools.corba.se.idl.toJavaPortable.ValueGen24)
                         public writeClassName(arg0: java.lang.String): void
                     }
                     class ValueGen24 extends com.sun.tools.corba.se.idl.toJavaPortable.ValueGen {
                         public constructor()
                         protected writeConstructor(): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         protected writeInitializers(): void
                         protected writeTruncatable(): void
                         protected writeHeading(): void
                         protected writeMembers(): void
                         protected writeMethods(): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ValueEntry, arg2: java.io.PrintWriter): void
                         protected generateValueFactory(): void
                         protected generateDefaultFactory(): void
                     }
                     class ValueGen implements com.sun.tools.corba.se.idl.ValueGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected emit: int
                         protected factories: com.sun.tools.corba.se.idl.toJavaPortable.Factories
                         protected symbolTable: java.util.Hashtable
                         protected v: com.sun.tools.corba.se.idl.ValueEntry
                         protected stream: java.io.PrintWriter
                         protected explicitDefaultInit: boolean
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ValueEntry, arg2: java.io.PrintWriter): void
                         protected init(): void
                         protected openStream(): void
                         protected generateTie(): void
                         protected generateHelper(): void
                         protected generateHolder(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected writeConstructor(): void
                         protected writeTruncatable(): void
                         protected writeMembers(): void
                         protected writeInitializers(): void
                         protected writeMethods(): void
                         protected writeStreamableMethods(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         protected writeAbstract(): void
                     }
                     interface JavaGenerator {
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                     }
                     class TCOffsets {
                         public constructor()
                         public offset(arg0: java.lang.String): int
                         public set(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                         public alignStrLen(arg0: java.lang.String): int
                         public setMember(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                         public currentOffset(): int
                         public bumpCurrentOffset(arg0: int): void
                     }
                     class Factories extends com.sun.tools.corba.se.idl.Factories {
                         static keywords: java.lang.String[]
                         public constructor()
                         public genFactory(): com.sun.tools.corba.se.idl.GenFactory
                         public arguments(): com.sun.tools.corba.se.idl.Arguments
                         public languageKeywords(): java.lang.String[]
                         public helper(): com.sun.tools.corba.se.idl.toJavaPortable.Helper
                         public valueFactory(): com.sun.tools.corba.se.idl.toJavaPortable.ValueFactory
                         public defaultFactory(): com.sun.tools.corba.se.idl.toJavaPortable.DefaultFactory
                         public holder(): com.sun.tools.corba.se.idl.toJavaPortable.Holder
                         public skeleton(): com.sun.tools.corba.se.idl.toJavaPortable.Skeleton
                         public stub(): com.sun.tools.corba.se.idl.toJavaPortable.Stub
                     }
                     class Helper implements com.sun.tools.corba.se.idl.toJavaPortable.AuxGen {
                         protected symbolTable: java.util.Hashtable
                         protected entry: com.sun.tools.corba.se.idl.SymtabEntry
                         protected stream: com.sun.tools.corba.se.idl.GenFileStream
                         protected helperClass: java.lang.String
                         protected helperType: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected init(): void
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeHelperInterface(): void
                         protected writeValueHelperInterface(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected writeInstVars(): void
                         protected writeCtors(): void
                         protected writeInsert(): void
                         protected writeExtract(): void
                         protected writeType(): void
                         protected writeID(): void
                         protected writeRead(): void
                         protected writeWrite(): void
                         protected writeNarrow(): void
                         protected writeRemoteNarrow(): void
                         protected writeUncheckedNarrow(): void
                         protected writeUncheckedRemoteNarrow(): void
                         protected writeGetID(): void
                         protected writeGetType(): void
                         protected writeGetClass(): void
                         protected writeGetInstance(): void
                         protected writeGetSafeBaseIds(): void
                         protected stubName(arg0: com.sun.tools.corba.se.idl.InterfaceEntry): java.lang.String
                     }
                     interface AuxGen {
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                     }
                     class ValueFactory implements com.sun.tools.corba.se.idl.toJavaPortable.AuxGen {
                         protected symbolTable: java.util.Hashtable
                         protected entry: com.sun.tools.corba.se.idl.SymtabEntry
                         protected stream: com.sun.tools.corba.se.idl.GenFileStream
                         protected factoryClass: java.lang.String
                         protected factoryType: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected init(): void
                         protected hasFactoryMethods(): boolean
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                     }
                     class DefaultFactory implements com.sun.tools.corba.se.idl.toJavaPortable.AuxGen {
                         protected symbolTable: java.util.Hashtable
                         protected entry: com.sun.tools.corba.se.idl.SymtabEntry
                         protected stream: com.sun.tools.corba.se.idl.GenFileStream
                         protected factoryClass: java.lang.String
                         protected factoryInterface: java.lang.String
                         protected factoryType: java.lang.String
                         protected implType: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected init(): void
                         protected hasFactoryMethods(): boolean
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeFactoryMethods(): void
                         protected writeReadValue(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                     }
                     class Holder implements com.sun.tools.corba.se.idl.toJavaPortable.AuxGen {
                         protected symbolTable: java.util.Hashtable
                         protected entry: com.sun.tools.corba.se.idl.SymtabEntry
                         protected stream: com.sun.tools.corba.se.idl.GenFileStream
                         protected holderClass: java.lang.String
                         protected helperClass: java.lang.String
                         protected holderType: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected init(): void
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected writeCtors(): void
                         protected writeRead(): void
                         protected writeWrite(): void
                         protected writeType(): void
                     }
                     class Skeleton implements com.sun.tools.corba.se.idl.toJavaPortable.AuxGen {
                         protected symbolTable: java.util.Hashtable
                         protected i: com.sun.tools.corba.se.idl.InterfaceEntry
                         protected stream: java.io.PrintWriter
                         protected tieClassName: java.lang.String
                         protected skeletonClassName: java.lang.String
                         protected tie: boolean
                         protected poa: boolean
                         protected methodList: java.util.Vector
                         protected intfName: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected init(): void
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeClassDeclaration(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected writeCtors(): void
                         protected buildMethodList(): void
                         protected writeDispatchMethod(): void
                         protected writeMethodTable(): void
                         protected writeMethods(): void
                         protected writeCORBAOperations(): void
                         protected writePOACORBAOperations(): void
                         protected writeNonPOACORBAOperations(): void
                         protected writeOperations(): void
                     }
                     class Stub implements com.sun.tools.corba.se.idl.toJavaPortable.AuxGen {
                         protected symbolTable: java.util.Hashtable
                         protected i: com.sun.tools.corba.se.idl.InterfaceEntry
                         protected stream: java.io.PrintWriter
                         protected methodList: java.util.Vector
                         protected classSuffix: java.lang.String
                         protected localStub: boolean
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected init(): void
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeClassDeclaration(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected writeCtors(): void
                         protected buildMethodList(): void
                         protected writeMethods(): void
                         protected writeCORBAObjectMethods(): void
                         protected writeSerializationMethods(): void
                     }
                     interface NameModifier {
                         public makeName(arg0: java.lang.String): java.lang.String
                     }
                     class ValueBoxGen24 extends com.sun.tools.corba.se.idl.toJavaPortable.ValueBoxGen {
                         public constructor()
                         protected writeTruncatable(): void
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class ValueBoxGen implements com.sun.tools.corba.se.idl.ValueBoxGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected symbolTable: java.util.Hashtable
                         protected v: com.sun.tools.corba.se.idl.ValueBoxEntry
                         protected stream: java.io.PrintWriter
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ValueBoxEntry, arg2: java.io.PrintWriter): void
                         protected openStream(): void
                         protected generateHelper(): void
                         protected generateHolder(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeTruncatable(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected writeStreamableMethods(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         protected writeAbstract(): void
                         protected streamableRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                     }
                     class Util extends com.sun.tools.corba.se.idl.Util {
                         public static TypeFile: short
                         public static StubFile: short
                         public static HelperFile: short
                         public static HolderFile: short
                         public static StateFile: short
                         static symbolTable: java.util.Hashtable
                         static packageTranslation: java.util.Hashtable
                         public constructor()
                         public static getVersion(): java.lang.String
                         static setSymbolTable(arg0: java.util.Hashtable): void
                         public static setPackageTranslation(arg0: java.util.Hashtable): void
                         public static isInterface(arg0: java.lang.String): boolean
                         static arrayInfo(arg0: java.util.Vector): java.lang.String
                         sansArrayInfo<T>(...args: any[]): any
                         fileName<T>(...args: any[]): any
                         stream<T>(...args: any[]): any
                         public static getStream(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.GenFileStream
                         public static containerFullName(arg0: com.sun.tools.corba.se.idl.SymtabEntry): java.lang.String
                         public static translate(arg0: java.lang.String): java.lang.String
                         public static javaName(arg0: com.sun.tools.corba.se.idl.SymtabEntry): java.lang.String
                         public static javaPrimName(arg0: java.lang.String): java.lang.String
                         public static javaNativeName(arg0: java.lang.String): java.lang.String
                         public static javaQualifiedName(arg0: com.sun.tools.corba.se.idl.SymtabEntry): java.lang.String
                         public static collapseName(arg0: java.lang.String): java.lang.String
                         public static typeOf(arg0: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                         static fillInfo(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                         static fillValueBoxInfo(arg0: com.sun.tools.corba.se.idl.ValueBoxEntry): void
                         public static holderName(arg0: com.sun.tools.corba.se.idl.SymtabEntry): java.lang.String
                         public static helperName(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: boolean): java.lang.String
                         writePackage<T>(...args: any[]): any
                         writeInitializer<T>(...args: any[]): any
                         public static mkdir(arg0: java.lang.String): void
                         public static writeProlog(arg0: java.io.PrintWriter, arg1: java.lang.String): void
                         public static stripLeadingUnderscores(arg0: java.lang.String): java.lang.String
                         public static stripLeadingUnderscoresFromID(arg0: java.lang.String): java.lang.String
                         public static parseExpression(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): java.lang.String
                         static parseTerminal(arg0: com.sun.tools.corba.se.idl.constExpr.Terminal): java.lang.String
                         static hexToOctal(arg0: java.lang.String): java.lang.String
                         static parseBinary(arg0: com.sun.tools.corba.se.idl.constExpr.BinaryExpr): java.lang.String
                         static parseUnary(arg0: com.sun.tools.corba.se.idl.constExpr.UnaryExpr): java.lang.String
                         public static IDLEntity(arg0: com.sun.tools.corba.se.idl.SymtabEntry): boolean
                         public static corbaLevel(arg0: float, arg1: float): boolean
                     }
                     class UnionGen implements com.sun.tools.corba.se.idl.UnionGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected symbolTable: java.util.Hashtable
                         protected u: com.sun.tools.corba.se.idl.UnionEntry
                         protected stream: java.io.PrintWriter
                         protected utype: com.sun.tools.corba.se.idl.SymtabEntry
                         protected unionIsEnum: boolean
                         protected typePackage: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.UnionEntry, arg2: java.io.PrintWriter): void
                         protected init(): void
                         protected openStream(): void
                         protected generateHelper(): void
                         protected generateHolder(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected generateContainedTypes(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class TypedefGen implements com.sun.tools.corba.se.idl.TypedefGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected symbolTable: java.util.Hashtable
                         protected t: com.sun.tools.corba.se.idl.TypedefEntry
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.TypedefEntry, arg2: java.io.PrintWriter): void
                         protected generateHolder(): void
                         protected generateHelper(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class StructGen implements com.sun.tools.corba.se.idl.StructGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected symbolTable: java.util.Hashtable
                         protected s: com.sun.tools.corba.se.idl.StructEntry
                         protected stream: java.io.PrintWriter
                         protected thisIsReallyAnException: boolean
                         constructor(...args: any[])
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.StructEntry, arg2: java.io.PrintWriter): void
                         protected init(): void
                         protected openStream(): void
                         protected generateHelper(): void
                         protected generateHolder(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         protected generateContainedTypes(): void
                         protected writeMembers(): void
                         protected writeCtors(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class StringGen implements com.sun.tools.corba.se.idl.StringGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.StringEntry, arg2: java.io.PrintWriter): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class SequenceGen implements com.sun.tools.corba.se.idl.SequenceGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SequenceEntry, arg2: java.io.PrintWriter): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class PrimitiveGen implements com.sun.tools.corba.se.idl.PrimitiveGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.PrimitiveEntry, arg2: java.io.PrintWriter): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class NativeGen implements com.sun.tools.corba.se.idl.NativeGen {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.NativeEntry, arg2: java.io.PrintWriter): void
                     }
                     class NameModifierImpl implements com.sun.tools.corba.se.idl.toJavaPortable.NameModifier {
                         constructor(...args: any[])
                         public makeName(arg0: java.lang.String): java.lang.String
                     }
                     class ModuleGen implements com.sun.tools.corba.se.idl.ModuleGen {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ModuleEntry, arg2: java.io.PrintWriter): void
                     }
                     class MethodGenClone24 extends com.sun.tools.corba.se.idl.toJavaPortable.AttributeGen {
                         public constructor()
                         protected abstractMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected interfaceMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                     }
                     class AttributeGen extends com.sun.tools.corba.se.idl.toJavaPortable.MethodGen implements com.sun.tools.corba.se.idl.AttributeGen {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.AttributeEntry, arg2: java.io.PrintWriter): void
                         protected interfaceMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected stub(arg0: java.lang.String, arg1: boolean, arg2: java.util.Hashtable, arg3: com.sun.tools.corba.se.idl.MethodEntry, arg4: java.io.PrintWriter, arg5: int): void
                         protected skeleton(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter, arg3: int): void
                         protected dispatchSkeleton(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter, arg3: int): void
                         protected setupForSetMethod(): void
                         protected clear(): void
                     }
                     class MethodGen implements com.sun.tools.corba.se.idl.MethodGen {
                         protected methodIndex: int
                         protected realName: java.lang.String
                         protected symbolTable: java.util.Hashtable
                         protected m: com.sun.tools.corba.se.idl.MethodEntry
                         protected stream: java.io.PrintWriter
                         protected localOptimization: boolean
                         protected isAbstract: boolean
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected interfaceMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected stub(arg0: java.lang.String, arg1: boolean, arg2: java.util.Hashtable, arg3: com.sun.tools.corba.se.idl.MethodEntry, arg4: java.io.PrintWriter, arg5: int): void
                         protected localstub(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter, arg3: int, arg4: com.sun.tools.corba.se.idl.InterfaceEntry): void
                         protected skeleton(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter, arg3: int): void
                         protected dispatchSkeleton(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter, arg3: int): void
                         protected isValueInitializer(): boolean
                         protected writeMethodSignature(): void
                         protected writeParmType(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: int): void
                         protected writeDispatchCall(): void
                         protected writeStubBody(arg0: java.lang.String): void
                         protected writeLocalStubBody(arg0: com.sun.tools.corba.se.idl.InterfaceEntry): void
                         protected passType(arg0: int): java.lang.String
                         protected serverMethodName(arg0: java.lang.String): void
                         protected writeMethodCall(arg0: java.lang.String): void
                         protected writeCreateReply(arg0: java.lang.String): void
                     }
                     class MethodGen24 extends com.sun.tools.corba.se.idl.toJavaPortable.MethodGen {
                         public constructor()
                         protected writeParmList(arg0: com.sun.tools.corba.se.idl.MethodEntry, arg1: boolean, arg2: java.io.PrintWriter): void
                         protected helperFactoryMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: com.sun.tools.corba.se.idl.SymtabEntry, arg3: java.io.PrintWriter): void
                         protected abstractMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected defaultFactoryMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected writeMethodSignature(): void
                         protected interfaceMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                     }
                     class InterfaceGen implements com.sun.tools.corba.se.idl.InterfaceGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected emit: int
                         protected factories: com.sun.tools.corba.se.idl.toJavaPortable.Factories
                         protected symbolTable: java.util.Hashtable
                         protected i: com.sun.tools.corba.se.idl.InterfaceEntry
                         protected stream: java.io.PrintWriter
                         protected static SIGNATURE: int
                         protected static OPERATIONS: int
                         protected intfType: int
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.InterfaceEntry, arg2: java.io.PrintWriter): void
                         protected init(): void
                         protected generateSkeleton(): void
                         protected generateStub(): void
                         protected generateHelper(): void
                         protected generateHolder(): void
                         protected generateInterface(): void
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeSignatureHeading(): void
                         protected writeOperationsHeading(): void
                         protected writeOperationsBody(): void
                         protected writeSignatureBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class Helper24 extends com.sun.tools.corba.se.idl.toJavaPortable.Helper {
                         public constructor()
                         protected writeHeading(): void
                         protected writeInstVars(): void
                         protected writeValueHelperInterface(): void
                         protected writeHelperFactories(): void
                         protected writeCtors(): void
                     }
                     class GenFactory implements com.sun.tools.corba.se.idl.GenFactory {
                         public constructor()
                         public createAttributeGen(): com.sun.tools.corba.se.idl.AttributeGen
                         public createConstGen(): com.sun.tools.corba.se.idl.ConstGen
                         public createNativeGen(): com.sun.tools.corba.se.idl.NativeGen
                         public createEnumGen(): com.sun.tools.corba.se.idl.EnumGen
                         public createExceptionGen(): com.sun.tools.corba.se.idl.ExceptionGen
                         public createForwardGen(): com.sun.tools.corba.se.idl.ForwardGen
                         public createForwardValueGen(): com.sun.tools.corba.se.idl.ForwardValueGen
                         public createIncludeGen(): com.sun.tools.corba.se.idl.IncludeGen
                         public createInterfaceGen(): com.sun.tools.corba.se.idl.InterfaceGen
                         public createValueGen(): com.sun.tools.corba.se.idl.ValueGen
                         public createValueBoxGen(): com.sun.tools.corba.se.idl.ValueBoxGen
                         public createMethodGen(): com.sun.tools.corba.se.idl.MethodGen
                         public createModuleGen(): com.sun.tools.corba.se.idl.ModuleGen
                         public createParameterGen(): com.sun.tools.corba.se.idl.ParameterGen
                         public createPragmaGen(): com.sun.tools.corba.se.idl.PragmaGen
                         public createPrimitiveGen(): com.sun.tools.corba.se.idl.PrimitiveGen
                         public createSequenceGen(): com.sun.tools.corba.se.idl.SequenceGen
                         public createStringGen(): com.sun.tools.corba.se.idl.StringGen
                         public createStructGen(): com.sun.tools.corba.se.idl.StructGen
                         public createTypedefGen(): com.sun.tools.corba.se.idl.TypedefGen
                         public createUnionGen(): com.sun.tools.corba.se.idl.UnionGen
                     }
                     class ForwardValueGen implements com.sun.tools.corba.se.idl.ForwardValueGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected symbolTable: java.util.Hashtable
                         protected v: com.sun.tools.corba.se.idl.ForwardValueEntry
                         protected stream: java.io.PrintWriter
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ForwardValueEntry, arg2: java.io.PrintWriter): void
                         protected openStream(): void
                         protected generateHelper(): void
                         protected generateHolder(): void
                         protected generateStub(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         protected writeAbstract(): void
                     }
                     class ExceptionGen extends com.sun.tools.corba.se.idl.toJavaPortable.StructGen implements com.sun.tools.corba.se.idl.ExceptionGen {
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ExceptionEntry, arg2: java.io.PrintWriter): void
                     }
                     class EnumGen implements com.sun.tools.corba.se.idl.EnumGen , com.sun.tools.corba.se.idl.toJavaPortable.JavaGenerator {
                         protected symbolTable: java.util.Hashtable
                         protected e: com.sun.tools.corba.se.idl.EnumEntry
                         protected stream: java.io.PrintWriter
                         className: java.lang.String
                         fullClassName: java.lang.String
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.EnumEntry, arg2: java.io.PrintWriter): void
                         protected init(): void
                         protected openStream(): void
                         protected generateHolder(): void
                         protected generateHelper(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeValue(): void
                         protected writeFromInt(): void
                         protected writeCtors(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                         public helperType(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public type(arg0: int, arg1: java.lang.String, arg2: com.sun.tools.corba.se.idl.toJavaPortable.TCOffsets, arg3: java.lang.String, arg4: com.sun.tools.corba.se.idl.SymtabEntry, arg5: java.io.PrintWriter): int
                         public helperRead(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry, arg2: java.io.PrintWriter): void
                         public helperWrite(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: java.io.PrintWriter): void
                         public read(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                         public write(arg0: int, arg1: java.lang.String, arg2: java.lang.String, arg3: com.sun.tools.corba.se.idl.SymtabEntry, arg4: java.io.PrintWriter): int
                     }
                     class ConstGen implements com.sun.tools.corba.se.idl.ConstGen {
                         protected symbolTable: java.util.Hashtable
                         protected c: com.sun.tools.corba.se.idl.ConstEntry
                         protected stream: java.io.PrintWriter
                         public constructor()
                         public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ConstEntry, arg2: java.io.PrintWriter): void
                         protected init(): void
                         protected generateConst(): void
                         protected openStream(): void
                         protected writeHeading(): void
                         protected writeBody(): void
                         protected writeConstExpr(): void
                         protected writeClosing(): void
                         protected closeStream(): void
                     }
                     class Compile extends com.sun.tools.corba.se.idl.Compile {
                         public _factories: com.sun.tools.corba.se.idl.toJavaPortable.Factories
                         org: com.sun.tools.corba.se.idl.ModuleEntry
                         omg: com.sun.tools.corba.se.idl.ModuleEntry
                         corba: com.sun.tools.corba.se.idl.ModuleEntry
                         object: com.sun.tools.corba.se.idl.InterfaceEntry
                         public importTypes: java.util.Vector
                         public factory: com.sun.tools.corba.se.idl.SymtabFactory
                         public static typedefInfo: int
                         public list: java.util.Hashtable
                         public static compiler: com.sun.tools.corba.se.idl.toJavaPortable.Compile
                         public static main(arg0: java.lang.String[]): void
                         public start(arg0: java.lang.String[]): void
                         protected constructor()
                         protected factories(): com.sun.tools.corba.se.idl.Factories
                         protected preParse(): void
                         protected preEmit(arg0: java.util.Enumeration): void
                         protected preEmitSTElement(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                         protected preEmitELElement(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                     }
                     class AttributeGen24 extends com.sun.tools.corba.se.idl.toJavaPortable.MethodGenClone24 {
                         public constructor()
                         protected abstractMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                         protected interfaceMethod(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                     }
                     class Arguments extends com.sun.tools.corba.se.idl.Arguments {
                         public packages: java.util.Hashtable
                         public separator: java.lang.String
                         public static None: int
                         public static Client: int
                         public static Server: int
                         public static All: int
                         public emit: int
                         public TIEServer: boolean
                         public POAServer: boolean
                         public LocalOptimization: boolean
                         public skeletonNameModifier: com.sun.tools.corba.se.idl.toJavaPortable.NameModifier
                         public tieNameModifier: com.sun.tools.corba.se.idl.toJavaPortable.NameModifier
                         public packageTranslation: java.util.Hashtable
                         public targetDir: java.lang.String
                         public constructor()
                         protected parseOtherArgs(arg0: java.lang.String[], arg1: java.util.Properties): void
                         protected collectUnknownArg(arg0: java.lang.String[], arg1: int, arg2: java.util.Vector): int
                         protected packageFromProps(arg0: java.util.Properties): void
                         protected setDefaultEmitter(): void
                         protected setNameModifiers(arg0: java.lang.String, arg1: java.lang.String): void
                     }

                  }
                  interface ValueGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ValueEntry, arg2: java.io.PrintWriter): void
                  }
                  interface Generator {
                  }
                  class SymtabEntry {
                      static includeStack: java.util.Stack
                      static setEmit: boolean
                      static maxKey: int
                      constructor(...args: any[])
                      initDynamicVars(): void
                      public clone(): java.lang.Object
                      public fullName(): java.lang.String
                      module<T>(...args: any[]): any
                      name<T>(...args: any[]): any
                      typeName<T>(...args: any[]): any
                      type<T>(...args: any[]): any
                      sourceFile<T>(...args: any[]): any
                      container<T>(...args: any[]): any
                      repositoryID<T>(...args: any[]): any
                      emit<T>(...args: any[]): any
                      comment<T>(...args: any[]): any
                      isReferencable<T>(...args: any[]): any
                      static enteringInclude(): void
                      static exitingInclude(): void
                      public static getVariableKey(): int
                      dynamicVariable<T>(...args: any[]): any
                      growVars(): void
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  class ValueEntry extends com.sun.tools.corba.se.idl.InterfaceEntry {
                      static valueGen: com.sun.tools.corba.se.idl.ValueGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public addSupport(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public supports(): java.util.Vector
                      public addSupportName(arg0: java.lang.String): void
                      public supportsNames(): java.util.Vector
                      derivedFromAddElement<T>(...args: any[]): any
                      public replaceForwardDecl(arg0: com.sun.tools.corba.se.idl.ForwardEntry, arg1: com.sun.tools.corba.se.idl.InterfaceEntry): boolean
                      initializersAddElement(arg0: com.sun.tools.corba.se.idl.MethodEntry, arg1: com.sun.tools.corba.se.idl.Scanner): void
                      public initializers(): java.util.Vector
                      public tagMethods(): void
                      public isCustom(): boolean
                      public setCustom(arg0: boolean): void
                      public isSafe(): boolean
                  }
                  class InterfaceEntry extends com.sun.tools.corba.se.idl.SymtabEntry implements com.sun.tools.corba.se.idl.InterfaceType {
                      _allMethods: java.util.Vector
                      forwardedDerivers: java.util.Vector
                      static interfaceGen: com.sun.tools.corba.se.idl.InterfaceGen
                      constructor(...args: any[])
                      public isAbstract(): boolean
                      public isLocal(): boolean
                      public isLocalServant(): boolean
                      public isLocalSignature(): boolean
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public addDerivedFrom(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public derivedFrom(): java.util.Vector
                      public addDerivedFromName(arg0: java.lang.String): void
                      public derivedFromNames(): java.util.Vector
                      public addMethod(arg0: com.sun.tools.corba.se.idl.MethodEntry): void
                      public methods(): java.util.Vector
                      public addContained(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public contained(): java.util.Vector
                      methodsAddElement(arg0: com.sun.tools.corba.se.idl.MethodEntry, arg1: com.sun.tools.corba.se.idl.Scanner): void
                      addToForwardedAllMethods(arg0: com.sun.tools.corba.se.idl.MethodEntry, arg1: com.sun.tools.corba.se.idl.Scanner): void
                      derivedFromAddElement(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: com.sun.tools.corba.se.idl.Scanner): void
                      addParentType(arg0: com.sun.tools.corba.se.idl.SymtabEntry, arg1: com.sun.tools.corba.se.idl.Scanner): void
                      public replaceForwardDecl(arg0: com.sun.tools.corba.se.idl.ForwardEntry, arg1: com.sun.tools.corba.se.idl.InterfaceEntry): boolean
                      public state(): java.util.Vector
                      public initState(): void
                      public addStateElement(arg0: com.sun.tools.corba.se.idl.InterfaceState, arg1: com.sun.tools.corba.se.idl.Scanner): void
                      public getInterfaceType(): int
                      public setInterfaceType(arg0: int): void
                      public allMethods(): java.util.Vector
                  }
                  interface InterfaceType {
                      public static NORMAL: int
                      public static ABSTRACT: int
                      public static LOCAL: int
                      public static LOCALSERVANT: int
                      public static LOCAL_SIGNATURE_ONLY: int
                      public getInterfaceType(): int
                      public setInterfaceType(arg0: int): void
                  }
                  class Factories {
                      public constructor()
                      public genFactory(): com.sun.tools.corba.se.idl.GenFactory
                      public symtabFactory(): com.sun.tools.corba.se.idl.SymtabFactory
                      public exprFactory(): com.sun.tools.corba.se.idl.constExpr.ExprFactory
                      public arguments(): com.sun.tools.corba.se.idl.Arguments
                      public languageKeywords(): java.lang.String[]
                  }
                  class IDLID extends com.sun.tools.corba.se.idl.RepositoryID {
                      constructor(...args: any[])
                      public ID(): java.lang.String
                      prefix<T>(...args: any[]): any
                      name<T>(...args: any[]): any
                      version<T>(...args: any[]): any
                      appendToName(arg0: java.lang.String): void
                      replaceName(arg0: java.lang.String): void
                      public clone(): java.lang.Object
                  }
                  class RepositoryID {
                      constructor(...args: any[])
                      public ID(): java.lang.String
                      public clone(): java.lang.Object
                      toString<T>(...args: any[]): any
                      public static hasValidForm(arg0: java.lang.String): boolean
                  }
                  class IncludeEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static includeGen: com.sun.tools.corba.se.idl.IncludeGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      absFilename<T>(...args: any[]): any
                      public addInclude(arg0: com.sun.tools.corba.se.idl.IncludeEntry): void
                      public includes(): java.util.Vector
                  }
                  class Comment {
                      static UNKNOWN: int
                      static JAVA_DOC: int
                      static C_BLOCK: int
                      static CPP_LINE: int
                      constructor(...args: any[])
                      text<T>(...args: any[]): any
                      public write(): void
                      public generate(arg0: java.lang.String, arg1: java.io.PrintWriter): void
                  }
                  class Scanner {
                      static Star: int
                      static Plus: int
                      static Dot: int
                      static None: int
                      escapedOK: boolean
                      constructor(arg0: com.sun.tools.corba.se.idl.IncludeEntry, arg1: java.lang.String[], arg2: boolean, arg3: boolean, arg4: float, arg5: boolean)
                      sortKeywords(arg0: java.lang.String[]): void
                      readFile<T>(...args: any[]): any
                      getToken(): com.sun.tools.corba.se.idl.Token
                      scanString(arg0: java.lang.String): void
                      scanIncludedFile(arg0: com.sun.tools.corba.se.idl.IncludeEntry, arg1: java.lang.String, arg2: boolean): void
                      readChar(): void
                      skipWhiteSpace(): void
                      skipLineComment(): void
                      skipUntil(arg0: char): com.sun.tools.corba.se.idl.Token
                      getUntil<T>(...args: any[]): any
                      getStringToEOL(): java.lang.String
                      filename(): java.lang.String
                      fileEntry(): com.sun.tools.corba.se.idl.IncludeEntry
                      currentLineNumber(): int
                      lastTokenLineNumber(): int
                      currentLine(): java.lang.String
                      lastTokenLine(): java.lang.String
                      currentLinePosition(): int
                      lastTokenLinePosition(): int
                  }
                  class ForwardEntry extends com.sun.tools.corba.se.idl.SymtabEntry implements com.sun.tools.corba.se.idl.InterfaceType {
                      static forwardGen: com.sun.tools.corba.se.idl.ForwardGen
                      derivers: java.util.Vector
                      types: java.util.Vector
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      static replaceForwardDecl(arg0: com.sun.tools.corba.se.idl.InterfaceEntry): boolean
                      public getInterfaceType(): int
                      public setInterfaceType(arg0: int): void
                  }
                  class MethodEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static methodGen: com.sun.tools.corba.se.idl.MethodGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public type(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public addException(arg0: com.sun.tools.corba.se.idl.ExceptionEntry): void
                      public exceptions(): java.util.Vector
                      public addExceptionName(arg0: java.lang.String): void
                      public exceptionNames(): java.util.Vector
                      public addContext(arg0: java.lang.String): void
                      public contexts(): java.util.Vector
                      public addParameter(arg0: com.sun.tools.corba.se.idl.ParameterEntry): void
                      public parameters(): java.util.Vector
                      oneway<T>(...args: any[]): any
                      valueMethod<T>(...args: any[]): any
                      exceptionsAddElement(arg0: com.sun.tools.corba.se.idl.ExceptionEntry): void
                  }
                  class InterfaceState {
                      public static Private: int
                      public static Protected: int
                      public static Public: int
                      public modifier: int
                      public entry: com.sun.tools.corba.se.idl.TypedefEntry
                      public constructor(arg0: int, arg1: com.sun.tools.corba.se.idl.TypedefEntry)
                  }
                  interface InterfaceGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.InterfaceEntry, arg2: java.io.PrintWriter): void
                  }
                  interface GenFactory {
                      public createAttributeGen(): com.sun.tools.corba.se.idl.AttributeGen
                      public createConstGen(): com.sun.tools.corba.se.idl.ConstGen
                      public createEnumGen(): com.sun.tools.corba.se.idl.EnumGen
                      public createExceptionGen(): com.sun.tools.corba.se.idl.ExceptionGen
                      public createForwardGen(): com.sun.tools.corba.se.idl.ForwardGen
                      public createForwardValueGen(): com.sun.tools.corba.se.idl.ForwardValueGen
                      public createIncludeGen(): com.sun.tools.corba.se.idl.IncludeGen
                      public createInterfaceGen(): com.sun.tools.corba.se.idl.InterfaceGen
                      public createValueGen(): com.sun.tools.corba.se.idl.ValueGen
                      public createValueBoxGen(): com.sun.tools.corba.se.idl.ValueBoxGen
                      public createMethodGen(): com.sun.tools.corba.se.idl.MethodGen
                      public createModuleGen(): com.sun.tools.corba.se.idl.ModuleGen
                      public createNativeGen(): com.sun.tools.corba.se.idl.NativeGen
                      public createParameterGen(): com.sun.tools.corba.se.idl.ParameterGen
                      public createPragmaGen(): com.sun.tools.corba.se.idl.PragmaGen
                      public createPrimitiveGen(): com.sun.tools.corba.se.idl.PrimitiveGen
                      public createSequenceGen(): com.sun.tools.corba.se.idl.SequenceGen
                      public createStringGen(): com.sun.tools.corba.se.idl.StringGen
                      public createStructGen(): com.sun.tools.corba.se.idl.StructGen
                      public createTypedefGen(): com.sun.tools.corba.se.idl.TypedefGen
                      public createUnionGen(): com.sun.tools.corba.se.idl.UnionGen
                  }
                  class Arguments {
                      public file: java.lang.String
                      public verbose: boolean
                      public keepOldFiles: boolean
                      public emitAll: boolean
                      public includePaths: java.util.Vector
                      public definedSymbols: java.util.Hashtable
                      public cppModule: boolean
                      public versionRequest: boolean
                      public corbaLevel: float
                      public noWarn: boolean
                      public scannerDebugFlag: boolean
                      public tokenDebugFlag: boolean
                      public constructor()
                      protected parseOtherArgs(arg0: java.lang.String[], arg1: java.util.Properties): void
                      protected setDebugFlags(arg0: java.lang.String): void
                      parseArgs(arg0: java.lang.String[]): void
                  }
                  interface SymtabFactory {
                      attributeEntry<T>(...args: any[]): any
                      constEntry<T>(...args: any[]): any
                      nativeEntry<T>(...args: any[]): any
                      enumEntry<T>(...args: any[]): any
                      exceptionEntry<T>(...args: any[]): any
                      forwardEntry<T>(...args: any[]): any
                      forwardValueEntry<T>(...args: any[]): any
                      includeEntry<T>(...args: any[]): any
                      interfaceEntry<T>(...args: any[]): any
                      valueEntry<T>(...args: any[]): any
                      valueBoxEntry<T>(...args: any[]): any
                      methodEntry<T>(...args: any[]): any
                      moduleEntry<T>(...args: any[]): any
                      parameterEntry<T>(...args: any[]): any
                      pragmaEntry<T>(...args: any[]): any
                      primitiveEntry<T>(...args: any[]): any
                      sequenceEntry<T>(...args: any[]): any
                      public stringEntry(): com.sun.tools.corba.se.idl.StringEntry
                      structEntry<T>(...args: any[]): any
                      typedefEntry<T>(...args: any[]): any
                      unionEntry<T>(...args: any[]): any
                  }
                  namespace constExpr {
                     interface ExprFactory {
                         public and(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.And
                         public booleanAnd(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.BooleanAnd
                         public booleanNot(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.BooleanNot
                         public booleanOr(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.BooleanOr
                         public divide(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Divide
                         public equal(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Equal
                         public greaterEqual(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.GreaterEqual
                         public greaterThan(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.GreaterThan
                         public lessEqual(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.LessEqual
                         public lessThan(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.LessThan
                         public minus(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Minus
                         public modulo(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Modulo
                         public negative(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Negative
                         public not(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Not
                         public notEqual(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.NotEqual
                         public or(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Or
                         public plus(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Plus
                         public positive(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Positive
                         public shiftLeft(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.ShiftLeft
                         public shiftRight(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.ShiftRight
                         terminal<T>(...args: any[]): any
                         public times(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Times
                         public xor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Xor
                     }
                     abstract class Expression {
                         public static negOne: java.math.BigInteger
                         public static zero: java.math.BigInteger
                         public static one: java.math.BigInteger
                         public static two: java.math.BigInteger
                         public static twoPow15: java.math.BigInteger
                         public static twoPow16: java.math.BigInteger
                         public static twoPow31: java.math.BigInteger
                         public static twoPow32: java.math.BigInteger
                         public static twoPow63: java.math.BigInteger
                         public static twoPow64: java.math.BigInteger
                         public static sMax: java.math.BigInteger
                         public static sMin: java.math.BigInteger
                         public static usMax: java.math.BigInteger
                         public static usMin: java.math.BigInteger
                         public static lMax: java.math.BigInteger
                         public static lMin: java.math.BigInteger
                         public static ulMax: java.math.BigInteger
                         public static ulMin: java.math.BigInteger
                         public static llMax: java.math.BigInteger
                         public static llMin: java.math.BigInteger
                         public static ullMax: java.math.BigInteger
                         public static ullMin: java.math.BigInteger
                         public constructor()
                         public evaluate(): java.lang.Object
                         value<T>(...args: any[]): any
                         rep<T>(...args: any[]): any
                         type<T>(...args: any[]): any
                         protected static defaultType(arg0: java.lang.String): java.lang.String
                         public coerceToTarget(arg0: java.lang.Object): java.lang.Object
                         protected toUnsignedTarget(arg0: java.math.BigInteger): java.math.BigInteger
                         protected toSignedTarget(arg0: java.math.BigInteger): java.math.BigInteger
                         protected toUnsigned(arg0: java.math.BigInteger): java.math.BigInteger
                     }
                     class And extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     abstract class BinaryExpr extends com.sun.tools.corba.se.idl.constExpr.Expression {
                         public constructor(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.constExpr.Expression, arg2: com.sun.tools.corba.se.idl.constExpr.Expression)
                         op<T>(...args: any[]): any
                         left<T>(...args: any[]): any
                         right<T>(...args: any[]): any
                     }
                     class BooleanAnd extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class BooleanNot extends com.sun.tools.corba.se.idl.constExpr.UnaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     abstract class UnaryExpr extends com.sun.tools.corba.se.idl.constExpr.Expression {
                         public constructor(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         op<T>(...args: any[]): any
                         operand<T>(...args: any[]): any
                     }
                     class BooleanOr extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Divide extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Equal extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class GreaterEqual extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class GreaterThan extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class LessEqual extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class LessThan extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Minus extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Modulo extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Negative extends com.sun.tools.corba.se.idl.constExpr.UnaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Not extends com.sun.tools.corba.se.idl.constExpr.UnaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class NotEqual extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Or extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Plus extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Positive extends com.sun.tools.corba.se.idl.constExpr.UnaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class ShiftLeft extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class ShiftRight extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Terminal extends com.sun.tools.corba.se.idl.constExpr.Expression {
                         constructor(...args: any[])
                         public evaluate(): java.lang.Object
                     }
                     class Times extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class Xor extends com.sun.tools.corba.se.idl.constExpr.BinaryExpr {
                         protected constructor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression)
                         public evaluate(): java.lang.Object
                     }
                     class EvaluationException extends java.lang.Exception {
                         public constructor(arg0: java.lang.String)
                     }
                     class DefaultExprFactory implements com.sun.tools.corba.se.idl.constExpr.ExprFactory {
                         public constructor()
                         public and(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.And
                         public booleanAnd(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.BooleanAnd
                         public booleanNot(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.BooleanNot
                         public booleanOr(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.BooleanOr
                         public divide(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Divide
                         public equal(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Equal
                         public greaterEqual(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.GreaterEqual
                         public greaterThan(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.GreaterThan
                         public lessEqual(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.LessEqual
                         public lessThan(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.LessThan
                         public minus(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Minus
                         public modulo(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Modulo
                         public negative(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Negative
                         public not(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Not
                         public notEqual(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.NotEqual
                         public or(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Or
                         public plus(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Plus
                         public positive(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Positive
                         public shiftLeft(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.ShiftLeft
                         public shiftRight(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.ShiftRight
                         terminal<T>(...args: any[]): any
                         public times(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Times
                         public xor(arg0: com.sun.tools.corba.se.idl.constExpr.Expression, arg1: com.sun.tools.corba.se.idl.constExpr.Expression): com.sun.tools.corba.se.idl.constExpr.Xor
                     }

                  }
                  interface IncludeGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.IncludeEntry, arg2: java.io.PrintWriter): void
                  }
                  class Token {
                      static Any: int
                      static Attribute: int
                      static Boolean: int
                      static Case: int
                      static Char: int
                      static Const: int
                      static Context: int
                      static Default: int
                      static Double: int
                      static Enum: int
                      static Exception: int
                      static FALSE: int
                      static Fixed: int
                      static Float: int
                      static In: int
                      static Inout: int
                      static Interface: int
                      static Long: int
                      static Module: int
                      static Native: int
                      static Object: int
                      static Octet: int
                      static Oneway: int
                      static Out: int
                      static Raises: int
                      static Readonly: int
                      static Sequence: int
                      static Short: int
                      static String: int
                      static Struct: int
                      static Switch: int
                      static TRUE: int
                      static Typedef: int
                      static Unsigned: int
                      static Union: int
                      static Void: int
                      static Wchar: int
                      static Wstring: int
                      static Init: int
                      static Abstract: int
                      static Custom: int
                      static Private: int
                      static Public: int
                      static Supports: int
                      static Truncatable: int
                      static ValueBase: int
                      static Valuetype: int
                      static Factory: int
                      static Component: int
                      static Consumes: int
                      static Emits: int
                      static Finder: int
                      static GetRaises: int
                      static Home: int
                      static Import: int
                      static Local: int
                      static Manages: int
                      static Multiple: int
                      static PrimaryKey: int
                      static Provides: int
                      static Publishes: int
                      static SetRaises: int
                      static TypeId: int
                      static TypePrefix: int
                      static Uses: int
                      static Identifier: int
                      static MacroIdentifier: int
                      static Semicolon: int
                      static LeftBrace: int
                      static RightBrace: int
                      static Colon: int
                      static Comma: int
                      static Equal: int
                      static Plus: int
                      static Minus: int
                      static LeftParen: int
                      static RightParen: int
                      static LessThan: int
                      static GreaterThan: int
                      static LeftBracket: int
                      static RightBracket: int
                      static Apostrophe: int
                      static Quote: int
                      static Backslash: int
                      static Bar: int
                      static Carat: int
                      static Ampersand: int
                      static Star: int
                      static Slash: int
                      static Percent: int
                      static Tilde: int
                      static DoubleColon: int
                      static ShiftLeft: int
                      static ShiftRight: int
                      static Period: int
                      static Hash: int
                      static Exclamation: int
                      static DoubleEqual: int
                      static NotEqual: int
                      static GreaterEqual: int
                      static LessEqual: int
                      static DoubleBar: int
                      static DoubleAmpersand: int
                      static BooleanLiteral: int
                      static CharacterLiteral: int
                      static IntegerLiteral: int
                      static FloatingPointLiteral: int
                      static StringLiteral: int
                      static Literal: int
                      static Define: int
                      static Undef: int
                      static If: int
                      static Ifdef: int
                      static Ifndef: int
                      static Else: int
                      static Elif: int
                      static Include: int
                      static Endif: int
                      static Line: int
                      static Error: int
                      static Pragma: int
                      static Null: int
                      static Unknown: int
                      static Defined: int
                      static EOF: int
                      static Keywords: java.lang.String[]
                      static FirstSymbol: int
                      static LastSymbol: int
                      static Symbols: java.lang.String[]
                      static FirstLiteral: int
                      static LastLiteral: int
                      static Literals: java.lang.String[]
                      static FirstDirective: int
                      static LastDirective: int
                      static Directives: java.lang.String[]
                      static FirstSpecial: int
                      static LastSpecial: int
                      static Special: java.lang.String[]
                      type: int
                      name: java.lang.String
                      comment: com.sun.tools.corba.se.idl.Comment
                      isEscaped<T>(...args: any[]): any
                      collidesWithKeyword<T>(...args: any[]): any
                      isDeprecated<T>(...args: any[]): any
                      isWide<T>(...args: any[]): any
                      isKeyword(): boolean
                      public static makeKeywordToken(arg0: java.lang.String, arg1: float, arg2: boolean, arg3: boolean[]): com.sun.tools.corba.se.idl.Token
                      isDirective(): boolean
                      constructor(...args: any[])
                      toString<T>(...args: any[]): any
                      equals<T>(...args: any[]): any
                  }
                  class ScannerData {
                      indent: java.lang.String
                      fileEntry: com.sun.tools.corba.se.idl.IncludeEntry
                      filename: java.lang.String
                      fileBytes: char[]
                      fileIndex: int
                      oldIndex: int
                      ch: char
                      line: int
                      oldLine: int
                      macrodata: boolean
                      includeIsImport: boolean
                      constructor(...args: any[])
                  }
                  interface ForwardGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ForwardEntry, arg2: java.io.PrintWriter): void
                  }
                  class ExceptionEntry extends com.sun.tools.corba.se.idl.StructEntry {
                      static exceptionGen: com.sun.tools.corba.se.idl.ExceptionGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  class StructEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static structGen: com.sun.tools.corba.se.idl.StructGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public addMember(arg0: com.sun.tools.corba.se.idl.TypedefEntry): void
                      public members(): java.util.Vector
                      public addContained(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public contained(): java.util.Vector
                  }
                  class ParameterEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      public static In: int
                      public static Inout: int
                      public static Out: int
                      static parameterGen: com.sun.tools.corba.se.idl.ParameterGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      passType<T>(...args: any[]): any
                  }
                  interface MethodGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.MethodEntry, arg2: java.io.PrintWriter): void
                  }
                  class TypedefEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static typedefGen: com.sun.tools.corba.se.idl.TypedefGen
                      constructor(...args: any[])
                      public arrayInfo(): java.util.Vector
                      public addArrayInfo(arg0: com.sun.tools.corba.se.idl.constExpr.Expression): void
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      isReferencable<T>(...args: any[]): any
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  interface AttributeGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.AttributeEntry, arg2: java.io.PrintWriter): void
                  }
                  interface ConstGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ConstEntry, arg2: java.io.PrintWriter): void
                  }
                  interface EnumGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.EnumEntry, arg2: java.io.PrintWriter): void
                  }
                  interface ExceptionGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ExceptionEntry, arg2: java.io.PrintWriter): void
                  }
                  interface ForwardValueGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ForwardValueEntry, arg2: java.io.PrintWriter): void
                  }
                  interface ValueBoxGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ValueBoxEntry, arg2: java.io.PrintWriter): void
                  }
                  interface ModuleGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ModuleEntry, arg2: java.io.PrintWriter): void
                  }
                  interface NativeGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.NativeEntry, arg2: java.io.PrintWriter): void
                  }
                  interface ParameterGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.ParameterEntry, arg2: java.io.PrintWriter): void
                  }
                  interface PragmaGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.PragmaEntry, arg2: java.io.PrintWriter): void
                  }
                  interface PrimitiveGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.PrimitiveEntry, arg2: java.io.PrintWriter): void
                  }
                  interface SequenceGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.SequenceEntry, arg2: java.io.PrintWriter): void
                  }
                  interface StringGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.StringEntry, arg2: java.io.PrintWriter): void
                  }
                  interface StructGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.StructEntry, arg2: java.io.PrintWriter): void
                  }
                  interface TypedefGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.TypedefEntry, arg2: java.io.PrintWriter): void
                  }
                  interface UnionGen extends com.sun.tools.corba.se.idl.Generator {
                      public generate(arg0: java.util.Hashtable, arg1: com.sun.tools.corba.se.idl.UnionEntry, arg2: java.io.PrintWriter): void
                  }
                  class InvalidArgument extends java.lang.Exception {
                      constructor(...args: any[])
                      public getMessage(): java.lang.String
                  }
                  class GenFileStream extends java.io.PrintWriter {
                      public constructor(arg0: java.lang.String)
                      public close(): void
                      public name(): java.lang.String
                  }
                  class AttributeEntry extends com.sun.tools.corba.se.idl.MethodEntry {
                      static attributeGen: com.sun.tools.corba.se.idl.AttributeGen
                      public _readOnly: boolean
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      readOnly<T>(...args: any[]): any
                  }
                  class ConstEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static constGen: com.sun.tools.corba.se.idl.ConstGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      value<T>(...args: any[]): any
                  }
                  class NativeEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static nativeGen: com.sun.tools.corba.se.idl.NativeGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  class EnumEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static enumGen: com.sun.tools.corba.se.idl.EnumGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public addElement(arg0: java.lang.String): void
                      public elements(): java.util.Vector
                  }
                  class ModuleEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static moduleGen: com.sun.tools.corba.se.idl.ModuleGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public addContained(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public contained(): java.util.Vector
                  }
                  class ForwardValueEntry extends com.sun.tools.corba.se.idl.ForwardEntry {
                      static forwardValueGen: com.sun.tools.corba.se.idl.ForwardValueGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  class ValueBoxEntry extends com.sun.tools.corba.se.idl.ValueEntry {
                      static valueBoxGen: com.sun.tools.corba.se.idl.ValueBoxGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  class PragmaEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static pragmaGen: com.sun.tools.corba.se.idl.PragmaGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      data<T>(...args: any[]): any
                  }
                  class PrimitiveEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static primitiveGen: com.sun.tools.corba.se.idl.PrimitiveGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                  }
                  class SequenceEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static sequenceGen: com.sun.tools.corba.se.idl.SequenceGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      isReferencable<T>(...args: any[]): any
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      maxSize<T>(...args: any[]): any
                      public addContained(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public contained(): java.util.Vector
                  }
                  class StringEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static stringGen: com.sun.tools.corba.se.idl.StringGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      maxSize<T>(...args: any[]): any
                  }
                  class UnionEntry extends com.sun.tools.corba.se.idl.SymtabEntry {
                      static unionGen: com.sun.tools.corba.se.idl.UnionGen
                      constructor(...args: any[])
                      public clone(): java.lang.Object
                      public generate(arg0: java.util.Hashtable, arg1: java.io.PrintWriter): void
                      public generator(): com.sun.tools.corba.se.idl.Generator
                      public addBranch(arg0: com.sun.tools.corba.se.idl.UnionBranch): void
                      public branches(): java.util.Vector
                      defaultBranch<T>(...args: any[]): any
                      public addContained(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public contained(): java.util.Vector
                      has<T>(...args: any[]): any
                  }
                  class UnionBranch {
                      public typedef: com.sun.tools.corba.se.idl.TypedefEntry
                      public labels: java.util.Vector
                      public isDefault: boolean
                      public constructor()
                  }
                  class Util {
                      static emptyID: com.sun.tools.corba.se.idl.RepositoryID
                      public constructor()
                      getVersion<T>(...args: any[]): any
                      public static isAttribute(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isConst(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isEnum(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isException(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isInterface(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isMethod(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isModule(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isParameter(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isPrimitive(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isSequence(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isStruct(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isString(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isTypedef(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      public static isUnion(arg0: java.lang.String, arg1: java.util.Hashtable): boolean
                      getMessage<T>(...args: any[]): any
                      public static registerMessageFile(arg0: java.lang.String): void
                      public static capitalize(arg0: java.lang.String): java.lang.String
                      public static getAbsolutePath(arg0: java.lang.String, arg1: java.util.Vector): java.lang.String
                      public static absDelta(arg0: float, arg1: float): float
                  }
                  class Compile {
                      public arguments: com.sun.tools.corba.se.idl.Arguments
                      protected overrideNames: java.util.Hashtable
                      protected symbolTable: java.util.Hashtable
                      protected includes: java.util.Vector
                      protected includeEntries: java.util.Vector
                      static noop: com.sun.tools.corba.se.idl.Noop
                      preprocessor: com.sun.tools.corba.se.idl.Preprocessor
                      public constructor()
                      public static main(arg0: java.lang.String[]): void
                      protected factories(): com.sun.tools.corba.se.idl.Factories
                      protected registerPragma(arg0: com.sun.tools.corba.se.idl.PragmaHandler): void
                      protected init(arg0: java.lang.String[]): void
                      protected parse(): java.util.Enumeration
                      protected generate(): void
                      public start(arg0: java.lang.String[]): void
                      protected displayVersion(): void
                  }
                  abstract class PragmaHandler {
                      public constructor()
                      public process(arg0: java.lang.String, arg1: java.lang.String): boolean
                      init(arg0: com.sun.tools.corba.se.idl.Preprocessor): void
                      protected currentToken(): java.lang.String
                      protected getEntryForName(arg0: java.lang.String): com.sun.tools.corba.se.idl.SymtabEntry
                      protected getStringToEOL(): java.lang.String
                      protected getUntil(arg0: char): java.lang.String
                      protected nextToken(): java.lang.String
                      protected scopedName(): com.sun.tools.corba.se.idl.SymtabEntry
                      protected skipToEOL(): void
                      protected skipUntil(arg0: char): java.lang.String
                      protected parseException(arg0: java.lang.String): void
                      protected openScope(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      protected closeScope(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                  }
                  class Noop implements com.sun.tools.corba.se.idl.AttributeGen , com.sun.tools.corba.se.idl.ConstGen , com.sun.tools.corba.se.idl.EnumGen , com.sun.tools.corba.se.idl.ExceptionGen , com.sun.tools.corba.se.idl.ForwardGen , com.sun.tools.corba.se.idl.ForwardValueGen , com.sun.tools.corba.se.idl.IncludeGen , com.sun.tools.corba.se.idl.InterfaceGen , com.sun.tools.corba.se.idl.ValueGen , com.sun.tools.corba.se.idl.ValueBoxGen , com.sun.tools.corba.se.idl.MethodGen , com.sun.tools.corba.se.idl.ModuleGen , com.sun.tools.corba.se.idl.NativeGen , com.sun.tools.corba.se.idl.ParameterGen , com.sun.tools.corba.se.idl.PragmaGen , com.sun.tools.corba.se.idl.PrimitiveGen , com.sun.tools.corba.se.idl.SequenceGen , com.sun.tools.corba.se.idl.StringGen , com.sun.tools.corba.se.idl.StructGen , com.sun.tools.corba.se.idl.TypedefGen , com.sun.tools.corba.se.idl.UnionGen , com.sun.tools.corba.se.idl.GenFactory {
                      public constructor()
                      generate<T>(...args: any[]): any
                      public createAttributeGen(): com.sun.tools.corba.se.idl.AttributeGen
                      public createConstGen(): com.sun.tools.corba.se.idl.ConstGen
                      public createEnumGen(): com.sun.tools.corba.se.idl.EnumGen
                      public createExceptionGen(): com.sun.tools.corba.se.idl.ExceptionGen
                      public createForwardGen(): com.sun.tools.corba.se.idl.ForwardGen
                      public createForwardValueGen(): com.sun.tools.corba.se.idl.ForwardValueGen
                      public createIncludeGen(): com.sun.tools.corba.se.idl.IncludeGen
                      public createInterfaceGen(): com.sun.tools.corba.se.idl.InterfaceGen
                      public createValueGen(): com.sun.tools.corba.se.idl.ValueGen
                      public createValueBoxGen(): com.sun.tools.corba.se.idl.ValueBoxGen
                      public createMethodGen(): com.sun.tools.corba.se.idl.MethodGen
                      public createModuleGen(): com.sun.tools.corba.se.idl.ModuleGen
                      public createNativeGen(): com.sun.tools.corba.se.idl.NativeGen
                      public createParameterGen(): com.sun.tools.corba.se.idl.ParameterGen
                      public createPragmaGen(): com.sun.tools.corba.se.idl.PragmaGen
                      public createPrimitiveGen(): com.sun.tools.corba.se.idl.PrimitiveGen
                      public createSequenceGen(): com.sun.tools.corba.se.idl.SequenceGen
                      public createStringGen(): com.sun.tools.corba.se.idl.StringGen
                      public createStructGen(): com.sun.tools.corba.se.idl.StructGen
                      public createTypedefGen(): com.sun.tools.corba.se.idl.TypedefGen
                      public createUnionGen(): com.sun.tools.corba.se.idl.UnionGen
                  }
                  class Parser {
                      defaultBranch: com.sun.tools.corba.se.idl.UnionBranch
                      public static unknownNamePrefix: java.lang.String
                      static symbolTable: java.util.Hashtable
                      lcSymbolTable: java.util.Hashtable
                      static overrideNames: java.util.Hashtable
                      emitList: java.util.Vector
                      emitAll: boolean
                      cppModule: boolean
                      noWarn: boolean
                      scanner: com.sun.tools.corba.se.idl.Scanner
                      symbols: java.util.Hashtable
                      macros: java.util.Vector
                      paths: java.util.Vector
                      currentModule: com.sun.tools.corba.se.idl.SymtabEntry
                      static repIDStack: java.util.Stack
                      sequence: int
                      includes: java.util.Vector
                      includeEntries: java.util.Vector
                      parsingConditionalExpr: boolean
                      token: com.sun.tools.corba.se.idl.Token
                      topLevelModule: com.sun.tools.corba.se.idl.ModuleEntry
                      stFactory: com.sun.tools.corba.se.idl.SymtabFactory
                      exprFactory: com.sun.tools.corba.se.idl.constExpr.ExprFactory
                      protected corbaLevel: float
                      constructor(arg0: com.sun.tools.corba.se.idl.Preprocessor, arg1: com.sun.tools.corba.se.idl.Arguments, arg2: java.util.Hashtable, arg3: java.util.Hashtable, arg4: com.sun.tools.corba.se.idl.SymtabFactory, arg5: com.sun.tools.corba.se.idl.constExpr.ExprFactory, arg6: java.lang.String[])
                      parse(arg0: java.lang.String): void
                      isModuleLegalType<T>(...args: any[]): any
                      scopedName<T>(...args: any[]): any
                      public static overrideName(arg0: java.lang.String): java.lang.String
                      constExp(arg0: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.constExpr.Expression
                      literal(arg0: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.constExpr.Expression
                      qualifiedEntry(arg0: java.lang.String): com.sun.tools.corba.se.idl.SymtabEntry
                      recursiveQualifiedEntry(arg0: java.lang.String): com.sun.tools.corba.se.idl.SymtabEntry
                      partlyQualifiedEntry(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      recursivePQEntry(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      unqualifiedEntry(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      unqualifiedEntryWMod(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      searchParentInheritanceScope(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      searchGlobalInheritanceScope(arg0: java.lang.String): com.sun.tools.corba.se.idl.SymtabEntry
                      searchLocalInheritanceScope(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      searchOverrideNames(arg0: java.lang.String): com.sun.tools.corba.se.idl.SymtabEntry
                      searchModuleScope(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      searchDerivedFrom(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.InterfaceEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      entryName(arg0: com.sun.tools.corba.se.idl.SymtabEntry): java.lang.String
                      public static typeOf(arg0: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.SymtabEntry
                      forwardEntryCheck(): void
                      public static enteringInclude(): void
                      public static exitingInclude(): void
                  }
                  class Preprocessor {
                      token: com.sun.tools.corba.se.idl.Token
                      constructor()
                      init(arg0: com.sun.tools.corba.se.idl.Parser): void
                      protected clone(): java.lang.Object
                      process(arg0: com.sun.tools.corba.se.idl.Token): com.sun.tools.corba.se.idl.Token
                      booleanConstExpr(arg0: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.constExpr.Expression
                      primaryExpr(arg0: com.sun.tools.corba.se.idl.SymtabEntry): com.sun.tools.corba.se.idl.constExpr.Expression
                      registerPragma(arg0: com.sun.tools.corba.se.idl.PragmaHandler): void
                      currentToken(): java.lang.String
                      getEntryForName(arg0: java.lang.String): com.sun.tools.corba.se.idl.SymtabEntry
                      getStringToEOL(): java.lang.String
                      getUntil(arg0: char): java.lang.String
                      nextToken(): java.lang.String
                      scopedName(): com.sun.tools.corba.se.idl.SymtabEntry
                      skipToEOL(): void
                      skipUntil(arg0: char): java.lang.String
                      parseException(arg0: java.lang.String): void
                      expandMacro(arg0: java.lang.String, arg1: com.sun.tools.corba.se.idl.Token): java.lang.String
                      openScope(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      closeScope(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                  }
                  class NoPragma extends com.sun.tools.corba.se.idl.PragmaHandler {
                      constructor()
                      public process(arg0: java.lang.String, arg1: java.lang.String): boolean
                  }
                  class ParseException extends java.lang.Exception {
                      static detected: boolean
                      constructor(...args: any[])
                      static abstractValueBox(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static alreadyDeclared(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static declNotInSameFile(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static alreadyDefaulted(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static alreadyDerived(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static alreadyRaised(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static attributeNotType(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static badAbstract(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static badCustom(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static badRepIDAlreadyAssigned(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static badRepIDForm(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static badRepIDPrefix(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static badState(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static branchLabel(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static branchName(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static duplicateInit(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static duplicateState(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static elseNoIf(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static endNoIf(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static evaluationError(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static forwardEntry(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static forwardedValueBox(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static generic(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static illegalArray(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static illegalException(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      invalidConst<T>(...args: any[]): any
                      static keywordCollision(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static deprecatedKeywordWarning(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static keywordCollisionWarning(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static methodClash(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static moduleNotType(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static nestedValueBox(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static noDefault(arg0: com.sun.tools.corba.se.idl.Scanner): com.sun.tools.corba.se.idl.ParseException
                      static nonAbstractParent(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static nonAbstractParent2(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static nonAbstractParent3(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static notANumber(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static nothing(arg0: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static notPositiveInt(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static oneway(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static operationNotType(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static outOfRange(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static recursive(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static selfInherit(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static stringTooLong(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      syntaxError<T>(...args: any[]): any
                      static unclosedComment(arg0: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static undeclaredType(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static warning(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static wrongType(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static wrongExprType(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static illegalForwardInheritance(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String, arg2: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                      static illegalIncompleteTypeReference(arg0: com.sun.tools.corba.se.idl.Scanner, arg1: java.lang.String): com.sun.tools.corba.se.idl.ParseException
                  }
                  class TokenBuffer {
                      constructor(...args: any[])
                      insert(arg0: com.sun.tools.corba.se.idl.Token): void
                      lookBack(arg0: int): com.sun.tools.corba.se.idl.Token
                      current(): com.sun.tools.corba.se.idl.Token
                  }
                  namespace som {
                     namespace idlemit {
                        class MetaPragma extends com.sun.tools.corba.se.idl.PragmaHandler {
                            public static metaKey: int
                            public constructor()
                            public process(arg0: java.lang.String, arg1: java.lang.String): boolean
                            public static processForward(arg0: com.sun.tools.corba.se.idl.ForwardEntry): void
                        }

                     }
                     namespace cff {
                        abstract class Messages {
                            public constructor()
                            public static msgLoad(arg0: java.lang.String): void
                            msg<T>(...args: any[]): any
                        }
                        abstract class FileLocator {
                            static pp: java.util.Properties
                            static classPath: java.lang.String
                            static pathSeparator: java.lang.String
                            public constructor()
                            public static locateClassFile(arg0: java.lang.String): java.io.DataInputStream
                            public static locateLocaleSpecificFileInClassPath(arg0: java.lang.String): java.io.DataInputStream
                            public static locateFileInClassPath(arg0: java.lang.String): java.io.DataInputStream
                            public static getFileNameFromStream(arg0: java.io.DataInputStream): java.lang.String
                            public static isZipFileAssociatedWithStream(arg0: java.io.DataInputStream): boolean
                        }
                        class NamedDataInputStream extends java.io.DataInputStream {
                            public fullyQualifiedFileName: java.lang.String
                            public inZipFile: boolean
                            protected constructor(arg0: java.io.InputStream, arg1: java.lang.String, arg2: boolean)
                        }

                     }

                  }
                  class ValueRepositoryId {
                      public constructor()
                      public addValue(arg0: int): void
                      public addType(arg0: com.sun.tools.corba.se.idl.SymtabEntry): void
                      public isNewType(arg0: com.sun.tools.corba.se.idl.SymtabEntry): boolean
                      public getHashcode(): java.lang.String
                  }
                  class InvalidCharacter extends java.io.IOException {
                      public constructor(arg0: java.lang.String, arg1: java.lang.String, arg2: int, arg3: int, arg4: char)
                      public getMessage(): java.lang.String
                  }
                  class DefaultSymtabFactory implements com.sun.tools.corba.se.idl.SymtabFactory {
                      public constructor()
                      attributeEntry<T>(...args: any[]): any
                      constEntry<T>(...args: any[]): any
                      nativeEntry<T>(...args: any[]): any
                      enumEntry<T>(...args: any[]): any
                      exceptionEntry<T>(...args: any[]): any
                      forwardEntry<T>(...args: any[]): any
                      forwardValueEntry<T>(...args: any[]): any
                      includeEntry<T>(...args: any[]): any
                      interfaceEntry<T>(...args: any[]): any
                      valueEntry<T>(...args: any[]): any
                      valueBoxEntry<T>(...args: any[]): any
                      methodEntry<T>(...args: any[]): any
                      moduleEntry<T>(...args: any[]): any
                      parameterEntry<T>(...args: any[]): any
                      pragmaEntry<T>(...args: any[]): any
                      primitiveEntry<T>(...args: any[]): any
                      sequenceEntry<T>(...args: any[]): any
                      public stringEntry(): com.sun.tools.corba.se.idl.StringEntry
                      structEntry<T>(...args: any[]): any
                      typedefEntry<T>(...args: any[]): any
                      unionEntry<T>(...args: any[]): any
                  }

               }

            }

         }

      }

   }

}
declare namespace sun {
   namespace applet {
      class AppletAudioClip implements java.applet.AudioClip {
          DEBUG: boolean
          constructor(...args: any[])
          createAppletAudioClip(arg0: java.io.InputStream): void
          public play(): void
          public loop(): void
          public stop(): void
      }
      class AppContextCreator extends java.lang.Thread {
          syncObject: java.lang.Object
          appContext: sun.awt.AppContext
          created: boolean
          constructor(arg0: java.lang.ThreadGroup)
          public run(): void
      }
      class AppletEventMulticaster implements sun.applet.AppletListener {
          public constructor(arg0: sun.applet.AppletListener, arg1: sun.applet.AppletListener)
          public appletStateChanged(arg0: sun.applet.AppletEvent): void
          public static add(arg0: sun.applet.AppletListener, arg1: sun.applet.AppletListener): sun.applet.AppletListener
          remove<T>(...args: any[]): any
      }
      class AppletIOException extends java.io.IOException {
          constructor(...args: any[])
          public getLocalizedMessage(): java.lang.String
      }
      class AppletIllegalArgumentException extends java.lang.IllegalArgumentException {
          public constructor(arg0: java.lang.String)
          public getLocalizedMessage(): java.lang.String
      }
      class AppletImageRef extends sun.misc.Ref {
          url: java.net.URL
          constructor(arg0: java.net.URL)
          public flush(): void
          public reconstitute(): java.lang.Object
      }
      class AppletObjectInputStream extends java.io.ObjectInputStream {
          public constructor(arg0: java.io.InputStream, arg1: sun.applet.AppletClassLoader)
          protected resolveClass(arg0: java.io.ObjectStreamClass): java.lang.Class
      }
      class AppletPropsErrorDialog extends java.awt.Dialog {
          public constructor(arg0: java.awt.Frame, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String)
          public action(arg0: java.awt.Event, arg1: java.lang.Object): boolean
      }
      class AppletResourceLoader {
          public constructor()
          public static getImage(arg0: java.net.URL): java.awt.Image
          public static getImageRef(arg0: java.net.URL): sun.misc.Ref
          public static flushImages(): void
      }
      class AppletSecurity extends sun.awt.AWTSecurityManager {
          public constructor()
          public reset(): void
          inThreadGroup<T>(...args: any[]): any
          checkAccess<T>(...args: any[]): any
          public checkPackageAccess(arg0: java.lang.String): void
          public checkAwtEventQueueAccess(): void
          public getThreadGroup(): java.lang.ThreadGroup
          public getAppContext(): sun.awt.AppContext
          static access$000(arg0: sun.applet.AppletSecurity): java.util.HashSet
          static access$100(): java.lang.reflect.Field
          static access$200(): java.lang.reflect.Field
      }
      class AppletSecurity$2 implements java.security.PrivilegedAction {
          val$currentLoader: java.lang.ClassLoader
          this$0: sun.applet.AppletSecurity
          constructor(arg0: sun.applet.AppletSecurity, arg1: java.lang.ClassLoader)
          public run(): java.lang.Object
      }
      class AppletSecurity$1 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletSecurity
          constructor(arg0: sun.applet.AppletSecurity)
          public run(): java.lang.Object
      }
      class AppletSecurityException extends java.lang.SecurityException {
          constructor(...args: any[])
          public getLocalizedMessage(): java.lang.String
      }
      class StdAppletViewerFactory implements sun.applet.AppletViewerFactory {
          constructor()
          public createAppletViewer(arg0: int, arg1: int, arg2: java.net.URL, arg3: java.util.Hashtable): sun.applet.AppletViewer
          public getBaseMenuBar(): java.awt.MenuBar
          public isStandalone(): boolean
      }
      class TextFrame extends java.awt.Frame {
          constructor(arg0: int, arg1: int, arg2: java.lang.String, arg3: java.lang.String)
      }
      class TextFrame$1 extends java.awt.event.WindowAdapter {
          this$0: sun.applet.TextFrame
          constructor(arg0: sun.applet.TextFrame)
          public windowClosing(arg0: java.awt.event.WindowEvent): void
      }
      class TextFrame$1ActionEventListener implements java.awt.event.ActionListener {
          this$0: sun.applet.TextFrame
          constructor(arg0: sun.applet.TextFrame)
          public actionPerformed(arg0: java.awt.event.ActionEvent): void
      }
      class AppletProps extends java.awt.Frame {
          proxyHost: java.awt.TextField
          proxyPort: java.awt.TextField
          accessMode: java.awt.Choice
          constructor()
          reset(): void
          apply(): void
          public action(arg0: java.awt.Event, arg1: java.lang.Object): boolean
          static access$000(): sun.applet.AppletMessageHandler
      }
      class AppletProps$2 implements java.security.PrivilegedExceptionAction {
          val$props: java.util.Properties
          this$0: sun.applet.AppletProps
          constructor(arg0: sun.applet.AppletProps, arg1: java.util.Properties)
          public run(): java.lang.Object
      }
      class AppletProps$1 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletProps
          constructor(arg0: sun.applet.AppletProps)
          public run(): java.lang.Object
      }
      class AppletViewer extends java.awt.Frame implements java.applet.AppletContext , java.awt.print.Printable {
          panel: sun.applet.AppletViewerPanel
          label: java.awt.Label
          statusMsgStream: java.io.PrintStream
          factory: sun.applet.AppletViewerFactory
          static appletPanels: java.util.Vector
          static systemParam: java.util.Hashtable
          static props: sun.applet.AppletProps
          static c: int
          static encoding: java.lang.String
          public constructor(arg0: int, arg1: int, arg2: java.net.URL, arg3: java.util.Hashtable, arg4: java.io.PrintStream, arg5: sun.applet.AppletViewerFactory)
          public addMenuItem(arg0: java.awt.Menu, arg1: java.lang.String): java.awt.MenuItem
          public getAudioClip(arg0: java.net.URL): java.applet.AudioClip
          public getImage(arg0: java.net.URL): java.awt.Image
          static getCachedImage(arg0: java.net.URL): java.awt.Image
          static getCachedImageRef(arg0: java.net.URL): sun.misc.Ref
          static flushImageCache(): void
          public getApplet(arg0: java.lang.String): java.applet.Applet
          public getApplets(): java.util.Enumeration
          showDocument<T>(...args: any[]): any
          public showStatus(arg0: java.lang.String): void
          public setStream(arg0: java.lang.String, arg1: java.io.InputStream): void
          public getStream(arg0: java.lang.String): java.io.InputStream
          public getStreamKeys(): java.util.Iterator
          public static printTag(arg0: java.io.PrintStream, arg1: java.util.Hashtable): void
          public updateAtts(): void
          appletRestart(): void
          appletReload(): void
          appletSave(): void
          appletClone(): void
          appletTag(): void
          appletInfo(): void
          appletCharacterEncoding(): void
          appletEdit(): void
          appletPrint(): void
          public print(arg0: java.awt.Graphics, arg1: java.awt.print.PageFormat, arg2: int): int
          public static networkProperties(): void
          appletStart(): void
          appletStop(): void
          appletClose(): void
          protected appletQuit(): void
          public processUserAction(arg0: java.awt.event.ActionEvent): void
          public static countApplets(): int
          public static skipSpace(arg0: java.io.Reader): void
          public static scanIdentifier(arg0: java.io.Reader): java.lang.String
          public static scanTag(arg0: java.io.Reader): java.util.Hashtable
          parse<T>(...args: any[]): any
          public static main(arg0: java.lang.String[]): void
          static access$100(): sun.applet.AppletMessageHandler
          static access$200(): java.lang.String
          static access$300(arg0: sun.applet.AppletViewer, arg1: sun.applet.AppletPanel): void
          static access$400(arg0: sun.applet.AppletViewer): void
      }
      class AppletViewer$4 implements java.lang.Runnable {
          this$0: sun.applet.AppletViewer
          constructor(arg0: sun.applet.AppletViewer)
          public run(): void
      }
      class AppletViewer$3 implements java.lang.Runnable {
          val$p: sun.applet.AppletPanel
          this$0: sun.applet.AppletViewer
          constructor(arg0: sun.applet.AppletViewer, arg1: sun.applet.AppletPanel)
          public run(): void
      }
      class AppletViewer$2 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletViewer
          constructor(arg0: sun.applet.AppletViewer)
          public run(): java.lang.Object
      }
      class AppletViewer$1AppletEventListener implements sun.applet.AppletListener {
          frame: java.awt.Frame
          this$0: sun.applet.AppletViewer
          public constructor(arg0: sun.applet.AppletViewer, arg1: java.awt.Frame)
          public appletStateChanged(arg0: sun.applet.AppletEvent): void
      }
      class AppletViewer$1 extends java.awt.event.WindowAdapter {
          this$0: sun.applet.AppletViewer
          constructor(arg0: sun.applet.AppletViewer)
          public windowClosing(arg0: java.awt.event.WindowEvent): void
          public windowIconified(arg0: java.awt.event.WindowEvent): void
          public windowDeiconified(arg0: java.awt.event.WindowEvent): void
      }
      class AppletViewer$UserActionListener implements java.awt.event.ActionListener {
          this$0: sun.applet.AppletViewer
          public actionPerformed(arg0: java.awt.event.ActionEvent): void
          constructor(arg0: sun.applet.AppletViewer, arg1: sun.applet.AppletViewer$1)
      }
      interface AppletViewerFactory {
          public createAppletViewer(arg0: int, arg1: int, arg2: java.net.URL, arg3: java.util.Hashtable): sun.applet.AppletViewer
          public getBaseMenuBar(): java.awt.MenuBar
          public isStandalone(): boolean
      }
      class Main {
          static theUserPropertiesFile: java.io.File
          static avDefaultUserProps: java.lang.String[][]
          public static theVersion: java.lang.String
          public constructor()
          public static main(arg0: java.lang.String[]): void
      }
      class Main$ParseException extends java.lang.RuntimeException {
          t: java.lang.Throwable
          this$0: sun.applet.Main
          constructor(...args: any[])
      }
      namespace resources {
         class MsgAppletViewer_zh_HK extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_de extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_es extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_fr extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_it extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_ja extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_ko extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_pt_BR extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_sv extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_zh_CN extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }
         class MsgAppletViewer_zh_TW extends java.util.ListResourceBundle {
             public constructor()
             public getContents(): java.lang.Object[][]
         }

      }
      class AppletThreadGroup extends java.lang.ThreadGroup {
          constructor(...args: any[])
      }
      class AppletMessageHandler {
          constructor(arg0: java.lang.String)
          getMessage<T>(...args: any[]): any
          getQualifiedKey(arg0: java.lang.String): java.lang.String
      }
      class AppletEvent extends java.util.EventObject {
          public constructor(arg0: java.lang.Object, arg1: int, arg2: java.lang.Object)
          public getID(): int
          public getArgument(): java.lang.Object
          toString<T>(...args: any[]): any
      }
      interface AppletListener extends java.util.EventListener {
          public appletStateChanged(arg0: sun.applet.AppletEvent): void
      }
      class AppletClassLoader extends java.net.URLClassLoader {
          usageCount: int
          protected constructor(arg0: java.net.URL)
          public disableRecursiveDirectoryRead(): void
          setCodebaseLookup(arg0: boolean): void
          getBaseURL(): java.net.URL
          public getURLs(): java.net.URL[]
          protected addJar(arg0: java.lang.String): void
          public loadClass(arg0: java.lang.String, arg1: boolean): java.lang.Class
          protected findClass(arg0: java.lang.String): java.lang.Class
          protected getPermissions(arg0: java.security.CodeSource): java.security.PermissionCollection
          public getResourceAsStream(arg0: java.lang.String): java.io.InputStream
          public getResourceAsStreamFromJar(arg0: java.lang.String): java.io.InputStream
          public findResource(arg0: java.lang.String): java.net.URL
          public findResources(arg0: java.lang.String): java.util.Enumeration
          loadCode(arg0: java.lang.String): java.lang.Class
          public getThreadGroup(): java.lang.ThreadGroup
          public getAppContext(): sun.awt.AppContext
          public grab(): void
          protected setExceptionStatus(): void
          public getExceptionStatus(): boolean
          protected release(): void
          protected resetAppContext(): sun.awt.AppContext
          setJDK11Target(arg0: java.lang.Class, arg1: boolean): void
          setJDK12Target(arg0: java.lang.Class, arg1: boolean): void
          isJDK11Target(arg0: java.lang.Class): java.lang.Boolean
          isJDK12Target(arg0: java.lang.Class): java.lang.Boolean
          static access$000(arg0: sun.applet.AppletClassLoader): java.net.URL
          static access$100(arg0: java.net.URL): byte[]
          static access$202(arg0: sun.applet.AppletClassLoader, arg1: sun.applet.AppletThreadGroup): sun.applet.AppletThreadGroup
          static access$200(arg0: sun.applet.AppletClassLoader): sun.applet.AppletThreadGroup
          static access$302(arg0: sun.applet.AppletClassLoader, arg1: sun.awt.AppContext): sun.awt.AppContext
      }
      class AppletClassLoader$3 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletClassLoader
          constructor(arg0: sun.applet.AppletClassLoader)
          public run(): java.lang.Object
      }
      class AppletClassLoader$2 implements java.util.Enumeration {
          val$e: java.util.Enumeration
          val$url: java.net.URL
          this$0: sun.applet.AppletClassLoader
          constructor(arg0: sun.applet.AppletClassLoader, arg1: java.util.Enumeration, arg2: java.net.URL)
          public nextElement(): java.lang.Object
          public hasMoreElements(): boolean
      }
      class AppletClassLoader$1 implements java.security.PrivilegedExceptionAction {
          val$path: java.lang.String
          this$0: sun.applet.AppletClassLoader
          constructor(arg0: sun.applet.AppletClassLoader, arg1: java.lang.String)
          public run(): java.lang.Object
      }
      abstract class AppletPanel extends java.awt.Panel implements java.applet.AppletStub , java.lang.Runnable {
          protected applet: java.applet.Applet
          protected doInit: boolean
          protected loader: sun.applet.AppletClassLoader
          public static APPLET_DISPOSE: int
          public static APPLET_LOAD: int
          public static APPLET_INIT: int
          public static APPLET_START: int
          public static APPLET_STOP: int
          public static APPLET_DESTROY: int
          public static APPLET_QUIT: int
          public static APPLET_ERROR: int
          public static APPLET_RESIZE: int
          public static APPLET_LOADING: int
          public static APPLET_LOADING_COMPLETED: int
          protected status: int
          protected handler: java.lang.Thread
          defaultAppletSize: java.awt.Dimension
          currentAppletSize: java.awt.Dimension
          mu: sun.misc.MessageUtils
          loaderThread: java.lang.Thread
          loadAbortRequest: boolean
          public constructor()
          protected getCode(): java.lang.String
          protected getJarFiles(): java.lang.String
          protected getSerializedObject(): java.lang.String
          public getWidth(): int
          public getHeight(): int
          public hasInitialFocus(): boolean
          protected setupAppletAppContext(): void
          protected createAppletThread(): void
          joinAppletThread(): void
          release(): void
          public init(): void
          public minimumSize(): java.awt.Dimension
          public preferredSize(): java.awt.Dimension
          public addAppletListener(arg0: sun.applet.AppletListener): void
          public removeAppletListener(arg0: sun.applet.AppletListener): void
          public dispatchAppletEvent(arg0: int, arg1: java.lang.Object): void
          public sendEvent(arg0: int): void
          protected getNextEvent(): sun.applet.AppletEvent
          emptyEventQueue(): boolean
          public run(): void
          protected runLoader(): void
          protected createApplet(arg0: sun.applet.AppletClassLoader): java.applet.Applet
          protected loadJarFiles(arg0: sun.applet.AppletClassLoader): void
          protected stopLoading(): void
          protected okToLoad(): boolean
          protected clearLoadAbortRequest(): void
          protected setLoadAbortRequest(): void
          public isActive(): boolean
          public appletResize(arg0: int, arg1: int): void
          public setBounds(arg0: int, arg1: int, arg2: int, arg3: int): void
          public getApplet(): java.applet.Applet
          showAppletStatus<T>(...args: any[]): any
          showAppletLog<T>(...args: any[]): any
          protected showAppletException(arg0: java.lang.Throwable): void
          public getClassLoaderCacheKey(): java.lang.String
          public static flushClassLoader(arg0: java.lang.String): void
          public static flushClassLoaders(): void
          protected createClassLoader(arg0: java.net.URL): sun.applet.AppletClassLoader
          getClassLoader(arg0: java.net.URL, arg1: java.lang.String): sun.applet.AppletClassLoader
          public getAppletHandlerThread(): java.lang.Thread
          public getAppletWidth(): int
          public getAppletHeight(): int
          public static changeFrameAppContext(arg0: java.awt.Frame, arg1: sun.awt.AppContext): void
          protected isJDK11Applet(): boolean
          protected isJDK12Applet(): boolean
          static access$000(arg0: sun.applet.AppletPanel): void
          static access$100(): java.util.HashMap
      }
      class AppletPanel$9 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel)
          public run(): java.lang.Object
      }
      class AppletPanel$8 implements java.security.PrivilegedAction {
          val$codebase: java.net.URL
          val$key: java.lang.String
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel, arg1: java.net.URL, arg2: java.lang.String)
          public run(): java.lang.Object
      }
      class AppletPanel$7 implements java.lang.Runnable {
          val$ap: sun.applet.AppletPanel
          val$currentSize: java.awt.Dimension
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel, arg1: sun.applet.AppletPanel, arg2: java.awt.Dimension)
          public run(): void
      }
      class AppletPanel$6 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel)
          public run(): java.lang.Object
      }
      class AppletPanel$5 implements java.lang.Runnable {
          val$a: java.applet.Applet
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel, arg1: java.applet.Applet)
          public run(): void
      }
      class AppletPanel$4 implements java.lang.Runnable {
          val$a: java.applet.Applet
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel, arg1: java.applet.Applet)
          public run(): void
      }
      class AppletPanel$3 implements java.lang.Runnable {
          val$p: sun.applet.AppletPanel
          val$a: java.applet.Applet
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel, arg1: sun.applet.AppletPanel, arg2: java.applet.Applet)
          public run(): void
      }
      class AppletPanel$2 implements java.lang.Runnable {
          val$p: sun.applet.AppletPanel
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel, arg1: sun.applet.AppletPanel)
          public run(): void
      }
      class AppletPanel$1 implements java.security.PrivilegedAction {
          this$0: sun.applet.AppletPanel
          constructor(arg0: sun.applet.AppletPanel)
          public run(): java.lang.Object
      }
      class AppletViewerPanel extends sun.applet.AppletPanel {
          debug<T>(...args: any[]): any
          protected documentURL: java.net.URL
          protected baseURL: java.net.URL
          protected atts: java.util.Hashtable<java.lang.String, java.lang.String>
          protected constructor(arg0: java.net.URL, arg1: java.util.Hashtable<java.lang.String, java.lang.String>)
          public getParameter(arg0: java.lang.String): java.lang.String
          public getDocumentBase(): java.net.URL
          public getCodeBase(): java.net.URL
          public getWidth(): int
          public getHeight(): int
          public hasInitialFocus(): boolean
          public getCode(): java.lang.String
          public getJarFiles(): java.lang.String
          public getSerializedObject(): java.lang.String
          public getAppletContext(): java.applet.AppletContext
      }

   }
   namespace security {
      namespace tools {
         namespace jarsigner {
            class JarSignerParameters implements com.sun.jarsigner.ContentSignerParameters {
                constructor(arg0: java.lang.String[], arg1: java.net.URI, arg2: java.security.cert.X509Certificate, arg3: java.lang.String, arg4: java.lang.String, arg5: byte[], arg6: java.lang.String, arg7: java.security.cert.X509Certificate[], arg8: byte[], arg9: java.util.zip.ZipFile)
                public getCommandLine(): java.lang.String[]
                public getTimestampingAuthority(): java.net.URI
                public getTimestampingAuthorityCertificate(): java.security.cert.X509Certificate
                public getTSAPolicyID(): java.lang.String
                public getTSADigestAlg(): java.lang.String
                public getSignature(): byte[]
                public getSignatureAlgorithm(): java.lang.String
                public getSignerCertificateChain(): java.security.cert.X509Certificate[]
                public getContent(): byte[]
                public getSource(): java.util.zip.ZipFile
            }
            class SignatureFile {
                sf: java.util.jar.Manifest
                baseName: java.lang.String
                public constructor(arg0: java.security.MessageDigest[], arg1: java.util.jar.Manifest, arg2: sun.security.util.ManifestDigester, arg3: java.lang.String, arg4: boolean)
                public write(arg0: java.io.OutputStream): void
                public getMetaName(): java.lang.String
                public getBaseName(): java.lang.String
                public generateBlock(arg0: java.security.PrivateKey, arg1: java.lang.String, arg2: java.security.cert.X509Certificate[], arg3: boolean, arg4: java.lang.String, arg5: java.security.cert.X509Certificate, arg6: java.lang.String, arg7: java.lang.String, arg8: com.sun.jarsigner.ContentSigner, arg9: java.lang.String[], arg10: java.util.zip.ZipFile): sun.security.tools.jarsigner.SignatureFile$Block
            }
            class SignatureFile$Block {
                constructor(arg0: sun.security.tools.jarsigner.SignatureFile, arg1: java.security.PrivateKey, arg2: java.lang.String, arg3: java.security.cert.X509Certificate[], arg4: boolean, arg5: java.lang.String, arg6: java.security.cert.X509Certificate, arg7: java.lang.String, arg8: java.lang.String, arg9: com.sun.jarsigner.ContentSigner, arg10: java.lang.String[], arg11: java.util.zip.ZipFile)
                public getMetaName(): java.lang.String
                public write(arg0: java.io.OutputStream): void
            }
            class Main {
                static VERSION: java.lang.String
                static IN_KEYSTORE: int
                static IN_SCOPE: int
                static NOT_ALIAS: int
                static SIGNED_BY_ALIAS: int
                certChain: java.security.cert.X509Certificate[]
                privateKey: java.security.PrivateKey
                store: java.security.KeyStore
                keystore: java.lang.String
                nullStream: boolean
                token: boolean
                jarfile: java.lang.String
                alias: java.lang.String
                ckaliases: java.util.List<java.lang.String>
                storepass: char[]
                protectedPath: boolean
                storetype: java.lang.String
                providerName: java.lang.String
                providers: java.util.Vector<java.lang.String>
                providerArgs: java.util.HashMap<java.lang.String, java.lang.String>
                keypass: char[]
                sigfile: java.lang.String
                sigalg: java.lang.String
                digestalg: java.lang.String
                signedjar: java.lang.String
                tsaUrl: java.lang.String
                tsaAlias: java.lang.String
                altCertChain: java.lang.String
                tSAPolicyID: java.lang.String
                tSADigestAlg: java.lang.String
                verify: boolean
                verbose: java.lang.String
                showcerts: boolean
                debug: boolean
                signManifest: boolean
                externalSF: boolean
                strict: boolean
                certificateFactory: java.security.cert.CertificateFactory
                validator: java.security.cert.CertPathValidator
                pkixParameters: java.security.cert.PKIXParameters
                storeHash: java.util.Hashtable<java.security.cert.Certificate, java.lang.String>
                cacheForSignerInfo: java.util.Map<java.security.CodeSigner, java.lang.String>
                public constructor()
                public static main(arg0: java.lang.String[]): void
                public run(arg0: java.lang.String[]): void
                parseArgs(arg0: java.lang.String[]): void
                getPass<T>(...args: any[]): any
                static usageNoArg(): void
                static usage(): void
                static fullusage(): void
                verifyJar(arg0: java.lang.String): void
                printCert(arg0: java.lang.String, arg1: java.security.cert.Certificate, arg2: boolean, arg3: java.util.Date, arg4: boolean): java.lang.String
                inKeyStore(arg0: java.security.CodeSigner[]): int
                signJar(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String[]): void
                loadKeyStore(arg0: java.lang.String, arg1: boolean): void
                getTsaCert(arg0: java.lang.String): java.security.cert.X509Certificate
                checkCertUsage(arg0: java.security.cert.X509Certificate, arg1: boolean[]): void
                getAliasInfo(arg0: java.lang.String): void
                error<T>(...args: any[]): any
                validateCertChain(arg0: java.util.List<java.security.cert.Certificate>): void
            }
            class Resources extends java.util.ListResourceBundle {
                public constructor()
                public getContents(): java.lang.Object[][]
            }
            class Resources_ja extends java.util.ListResourceBundle {
                public constructor()
                public getContents(): java.lang.Object[][]
            }
            class Resources_zh_CN extends java.util.ListResourceBundle {
                public constructor()
                public getContents(): java.lang.Object[][]
            }
            class TimestampedSigner extends com.sun.jarsigner.ContentSigner {
                public constructor()
                public generateSignedData(arg0: com.sun.jarsigner.ContentSignerParameters, arg1: boolean, arg2: boolean): byte[]
                public static getTimestampingURI(arg0: java.security.cert.X509Certificate): java.net.URI
            }

         }

      }

   }
   namespace jvmstat {
      namespace monitor {
         class MonitoredVmUtil {
             public static vmVersion(arg0: sun.jvmstat.monitor.MonitoredVm): java.lang.String
             public static commandLine(arg0: sun.jvmstat.monitor.MonitoredVm): java.lang.String
             public static mainArgs(arg0: sun.jvmstat.monitor.MonitoredVm): java.lang.String
             public static mainClass(arg0: sun.jvmstat.monitor.MonitoredVm, arg1: boolean): java.lang.String
             public static jvmArgs(arg0: sun.jvmstat.monitor.MonitoredVm): java.lang.String
             public static jvmFlags(arg0: sun.jvmstat.monitor.MonitoredVm): java.lang.String
             public static isAttachable(arg0: sun.jvmstat.monitor.MonitoredVm): boolean
         }
         interface LongMonitor extends sun.jvmstat.monitor.Monitor {
             public longValue(): long
         }
         interface ByteArrayMonitor extends sun.jvmstat.monitor.Monitor {
             public byteArrayValue(): byte[]
             public byteAt(arg0: int): byte
         }
         abstract class AbstractMonitor implements sun.jvmstat.monitor.Monitor {
             protected name: java.lang.String
             protected units: sun.jvmstat.monitor.Units
             protected variability: sun.jvmstat.monitor.Variability
             protected vectorLength: int
             protected supported: boolean
             constructor(...args: any[])
             public getName(): java.lang.String
             public getBaseName(): java.lang.String
             public getUnits(): sun.jvmstat.monitor.Units
             public getVariability(): sun.jvmstat.monitor.Variability
             public isVector(): boolean
             public getVectorLength(): int
             public isSupported(): boolean
             public getValue(): java.lang.Object
         }
         interface StringMonitor extends sun.jvmstat.monitor.Monitor {
             public stringValue(): java.lang.String
         }
         interface IntegerMonitor extends sun.jvmstat.monitor.Monitor {
             public intValue(): int
         }
         abstract class MonitoredHost {
             protected hostId: sun.jvmstat.monitor.HostIdentifier
             protected interval: int
             protected lastException: java.lang.Exception
             static $assertionsDisabled: boolean
             public constructor()
             getMonitoredHost<T>(...args: any[]): any
             protected static resolveHostId(arg0: sun.jvmstat.monitor.HostIdentifier): sun.jvmstat.monitor.HostIdentifier
             public getHostIdentifier(): sun.jvmstat.monitor.HostIdentifier
             public setInterval(arg0: int): void
             public getInterval(): int
             public setLastException(arg0: java.lang.Exception): void
             public getLastException(): java.lang.Exception
             public clearLastException(): void
             public isErrored(): boolean
             getMonitoredVm<T>(...args: any[]): any
             public detach(arg0: sun.jvmstat.monitor.MonitoredVm): void
             public addHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
             public removeHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
             public activeVms(): java.util.Set<java.lang.Integer>
         }
         class Variability implements java.io.Serializable {
             public static INVALID: sun.jvmstat.monitor.Variability
             public static CONSTANT: sun.jvmstat.monitor.Variability
             public static MONOTONIC: sun.jvmstat.monitor.Variability
             public static VARIABLE: sun.jvmstat.monitor.Variability
             toString<T>(...args: any[]): any
             public intValue(): int
             public static toVariability(arg0: int): sun.jvmstat.monitor.Variability
         }
         class Units implements java.io.Serializable {
             public static INVALID: sun.jvmstat.monitor.Units
             public static NONE: sun.jvmstat.monitor.Units
             public static BYTES: sun.jvmstat.monitor.Units
             public static TICKS: sun.jvmstat.monitor.Units
             public static EVENTS: sun.jvmstat.monitor.Units
             public static STRING: sun.jvmstat.monitor.Units
             public static HERTZ: sun.jvmstat.monitor.Units
             toString<T>(...args: any[]): any
             public intValue(): int
             public static toUnits(arg0: int): sun.jvmstat.monitor.Units
         }
         class HostIdentifier {
             constructor(...args: any[])
             public resolve(arg0: sun.jvmstat.monitor.VmIdentifier): sun.jvmstat.monitor.VmIdentifier
             public getScheme(): java.lang.String
             public getSchemeSpecificPart(): java.lang.String
             public getUserInfo(): java.lang.String
             public getHost(): java.lang.String
             public getPort(): int
             public getPath(): java.lang.String
             public getQuery(): java.lang.String
             public getFragment(): java.lang.String
             public getMode(): java.lang.String
             public getURI(): java.net.URI
             public hashCode(): int
             public equals(arg0: java.lang.Object): boolean
             toString<T>(...args: any[]): any
         }
         namespace event {
            class HostEvent extends java.util.EventObject {
                public constructor(arg0: sun.jvmstat.monitor.MonitoredHost)
                public getMonitoredHost(): sun.jvmstat.monitor.MonitoredHost
            }
            class VmStatusChangeEvent extends sun.jvmstat.monitor.event.HostEvent {
                protected active: java.util.Set
                protected started: java.util.Set
                protected terminated: java.util.Set
                public constructor(arg0: sun.jvmstat.monitor.MonitoredHost, arg1: java.util.Set, arg2: java.util.Set, arg3: java.util.Set)
                public getActive(): java.util.Set
                public getStarted(): java.util.Set
                public getTerminated(): java.util.Set
            }
            interface HostListener extends java.util.EventListener {
                public vmStatusChanged(arg0: sun.jvmstat.monitor.event.VmStatusChangeEvent): void
                public disconnected(arg0: sun.jvmstat.monitor.event.HostEvent): void
            }
            class VmEvent extends java.util.EventObject {
                public constructor(arg0: sun.jvmstat.monitor.MonitoredVm)
                public getMonitoredVm(): sun.jvmstat.monitor.MonitoredVm
            }
            class MonitorStatusChangeEvent extends sun.jvmstat.monitor.event.VmEvent {
                protected inserted: java.util.List
                protected removed: java.util.List
                public constructor(arg0: sun.jvmstat.monitor.MonitoredVm, arg1: java.util.List, arg2: java.util.List)
                public getInserted(): java.util.List
                public getRemoved(): java.util.List
            }
            interface VmListener extends java.util.EventListener {
                public monitorStatusChanged(arg0: sun.jvmstat.monitor.event.MonitorStatusChangeEvent): void
                public monitorsUpdated(arg0: sun.jvmstat.monitor.event.VmEvent): void
                public disconnected(arg0: sun.jvmstat.monitor.event.VmEvent): void
            }

         }
         class MonitorException extends java.lang.Exception {
             constructor(...args: any[])
         }
         interface Monitor {
             public getName(): java.lang.String
             public getBaseName(): java.lang.String
             public getUnits(): sun.jvmstat.monitor.Units
             public getVariability(): sun.jvmstat.monitor.Variability
             public isVector(): boolean
             public getVectorLength(): int
             public isSupported(): boolean
             public getValue(): java.lang.Object
         }
         class VmIdentifier {
             constructor(...args: any[])
             public getHostIdentifier(): sun.jvmstat.monitor.HostIdentifier
             public getScheme(): java.lang.String
             public getSchemeSpecificPart(): java.lang.String
             public getUserInfo(): java.lang.String
             public getHost(): java.lang.String
             public getPort(): int
             public getAuthority(): java.lang.String
             public getPath(): java.lang.String
             public getQuery(): java.lang.String
             public getFragment(): java.lang.String
             public getLocalVmId(): int
             public getMode(): java.lang.String
             public getURI(): java.net.URI
             public hashCode(): int
             public equals(arg0: java.lang.Object): boolean
             toString<T>(...args: any[]): any
         }
         interface MonitoredVm {
             public getVmIdentifier(): sun.jvmstat.monitor.VmIdentifier
             public findByName(arg0: java.lang.String): sun.jvmstat.monitor.Monitor
             public findByPattern(arg0: java.lang.String): java.util.List<sun.jvmstat.monitor.Monitor>
             public detach(): void
             public setInterval(arg0: int): void
             public getInterval(): int
             public setLastException(arg0: java.lang.Exception): void
             public getLastException(): java.lang.Exception
             public clearLastException(): void
             public isErrored(): boolean
             public addVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
             public removeVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
         }
         namespace remote {
            interface RemoteHost extends java.rmi.Remote {
                public attachVm(arg0: int, arg1: java.lang.String): sun.jvmstat.monitor.remote.RemoteVm
                public detachVm(arg0: sun.jvmstat.monitor.remote.RemoteVm): void
                public activeVms(): int[]
            }
            interface BufferedMonitoredVm extends sun.jvmstat.monitor.MonitoredVm {
                public getBytes(): byte[]
                public getCapacity(): int
            }
            interface RemoteVm extends java.rmi.Remote {
                public getBytes(): byte[]
                public getCapacity(): int
                public getLocalVmId(): int
                public detach(): void
            }

         }

      }
      namespace perfdata {
         namespace monitor {
            class AliasFileParser {
                constructor(arg0: java.net.URL)
                public parse(arg0: java.util.Map<java.lang.String, java.util.ArrayList<java.lang.String>>): void
            }
            class AliasFileParser$Token {
                public sval: java.lang.String
                public ttype: int
                this$0: sun.jvmstat.perfdata.monitor.AliasFileParser
                public constructor(arg0: sun.jvmstat.perfdata.monitor.AliasFileParser, arg1: int, arg2: java.lang.String)
            }
            class CountedTimerTaskUtils {
                public constructor()
                public static reschedule(arg0: java.util.Timer, arg1: sun.jvmstat.perfdata.monitor.CountedTimerTask, arg2: sun.jvmstat.perfdata.monitor.CountedTimerTask, arg3: int, arg4: int): void
            }
            class MonitorDataException extends sun.jvmstat.monitor.MonitorException {
                constructor(...args: any[])
            }
            class MonitorStructureException extends sun.jvmstat.monitor.MonitorException {
                constructor(...args: any[])
            }
            class MonitorTypeException extends sun.jvmstat.monitor.MonitorException {
                constructor(...args: any[])
            }
            class MonitorVersionException extends sun.jvmstat.monitor.MonitorException {
                constructor(...args: any[])
            }
            class PerfIntegerMonitor extends sun.jvmstat.monitor.AbstractMonitor implements sun.jvmstat.monitor.IntegerMonitor {
                ib: java.nio.IntBuffer
                public constructor(arg0: java.lang.String, arg1: sun.jvmstat.monitor.Units, arg2: sun.jvmstat.monitor.Variability, arg3: boolean, arg4: java.nio.IntBuffer)
                public getValue(): java.lang.Object
                public intValue(): int
            }
            class PerfLongMonitor extends sun.jvmstat.monitor.AbstractMonitor implements sun.jvmstat.monitor.LongMonitor {
                lb: java.nio.LongBuffer
                public constructor(arg0: java.lang.String, arg1: sun.jvmstat.monitor.Units, arg2: sun.jvmstat.monitor.Variability, arg3: boolean, arg4: java.nio.LongBuffer)
                public getValue(): java.lang.Object
                public longValue(): long
            }
            class PerfStringConstantMonitor extends sun.jvmstat.perfdata.monitor.PerfStringMonitor {
                data: java.lang.String
                public constructor(arg0: java.lang.String, arg1: boolean, arg2: java.nio.ByteBuffer)
                public getValue(): java.lang.Object
                public stringValue(): java.lang.String
            }
            class PerfByteArrayMonitor extends sun.jvmstat.monitor.AbstractMonitor implements sun.jvmstat.monitor.ByteArrayMonitor {
                bb: java.nio.ByteBuffer
                public constructor(arg0: java.lang.String, arg1: sun.jvmstat.monitor.Units, arg2: sun.jvmstat.monitor.Variability, arg3: boolean, arg4: java.nio.ByteBuffer, arg5: int)
                public getValue(): java.lang.Object
                public byteArrayValue(): byte[]
                public byteAt(arg0: int): byte
                public getMaximumLength(): int
            }
            class PerfStringMonitor extends sun.jvmstat.perfdata.monitor.PerfByteArrayMonitor implements sun.jvmstat.monitor.StringMonitor {
                constructor(...args: any[])
                public getValue(): java.lang.Object
                public stringValue(): java.lang.String
            }
            class PerfStringVariableMonitor extends sun.jvmstat.perfdata.monitor.PerfStringMonitor {
                constructor(...args: any[])
            }
            class SyntaxException extends java.lang.Exception {
                lineno: int
                public constructor(arg0: int)
                public getMessage(): java.lang.String
            }
            abstract class AbstractPerfDataBuffer {
                protected impl: sun.jvmstat.perfdata.monitor.PerfDataBufferImpl
                public constructor()
                public getLocalVmId(): int
                public getBytes(): byte[]
                public getCapacity(): int
                public findByName(arg0: java.lang.String): sun.jvmstat.monitor.Monitor
                public findByPattern(arg0: java.lang.String): java.util.List<sun.jvmstat.monitor.Monitor>
                public getMonitorStatus(): sun.jvmstat.perfdata.monitor.MonitorStatus
                public getByteBuffer(): java.nio.ByteBuffer
                protected createPerfDataBuffer(arg0: java.nio.ByteBuffer, arg1: int): void
            }
            class CountedTimerTask extends java.util.TimerTask {
                executionCount<T>(...args: any[]): any
                public constructor()
                public run(): void
            }
            abstract class AbstractMonitoredVm implements sun.jvmstat.monitor.remote.BufferedMonitoredVm {
                protected vmid: sun.jvmstat.monitor.VmIdentifier
                protected pdb: sun.jvmstat.perfdata.monitor.AbstractPerfDataBuffer
                protected interval: int
                public constructor(arg0: sun.jvmstat.monitor.VmIdentifier, arg1: int)
                public getVmIdentifier(): sun.jvmstat.monitor.VmIdentifier
                public findByName(arg0: java.lang.String): sun.jvmstat.monitor.Monitor
                public findByPattern(arg0: java.lang.String): java.util.List<sun.jvmstat.monitor.Monitor>
                public detach(): void
                public setInterval(arg0: int): void
                public getInterval(): int
                public setLastException(arg0: java.lang.Exception): void
                public getLastException(): java.lang.Exception
                public clearLastException(): void
                public isErrored(): boolean
                public getMonitorStatus(): sun.jvmstat.perfdata.monitor.MonitorStatus
                public addVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                public removeVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                public getBytes(): byte[]
                public getCapacity(): int
            }
            namespace protocol {
               namespace file {
                  class FileMonitoredVm extends sun.jvmstat.perfdata.monitor.AbstractMonitoredVm {
                      public constructor(arg0: sun.jvmstat.monitor.VmIdentifier, arg1: int)
                      public addVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                      public removeVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                  }
                  class MonitoredHostProvider extends sun.jvmstat.monitor.MonitoredHost {
                      public static DEFAULT_POLLING_INTERVAL: int
                      public constructor(arg0: sun.jvmstat.monitor.HostIdentifier)
                      getMonitoredVm<T>(...args: any[]): any
                      public detach(arg0: sun.jvmstat.monitor.MonitoredVm): void
                      public addHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
                      public removeHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
                      public activeVms(): java.util.Set<java.lang.Integer>
                  }
                  class PerfDataBuffer extends sun.jvmstat.perfdata.monitor.AbstractPerfDataBuffer {
                      public constructor(arg0: sun.jvmstat.monitor.VmIdentifier)
                  }

               }
               namespace local {
                  class LocalEventTimer extends java.util.Timer {
                      public static getInstance(): sun.jvmstat.perfdata.monitor.protocol.local.LocalEventTimer
                  }
                  class LocalMonitoredVm extends sun.jvmstat.perfdata.monitor.AbstractMonitoredVm {
                      public constructor(arg0: sun.jvmstat.monitor.VmIdentifier, arg1: int)
                      public detach(): void
                      public addVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                      public removeVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                      public setInterval(arg0: int): void
                      fireMonitorStatusChangedEvents(arg0: java.util.List, arg1: java.util.List): void
                      fireMonitorsUpdatedEvents(): void
                      static cast<T>(arg0: java.lang.Object): T
                  }
                  class LocalMonitoredVm$1 {
                  }
                  class LocalMonitoredVm$NotifierTask extends sun.jvmstat.perfdata.monitor.CountedTimerTask {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.local.LocalMonitoredVm
                      public run(): void
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalMonitoredVm, arg1: sun.jvmstat.perfdata.monitor.protocol.local.LocalMonitoredVm$1)
                  }
                  class LocalVmManager {
                      constructor(...args: any[])
                      public activeVms(): java.util.Set<java.lang.Integer>
                      static access$000(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager): java.util.regex.Matcher
                      static access$100(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager): java.util.regex.Matcher
                      static access$200(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager): java.util.regex.Matcher
                  }
                  class LocalVmManager$3 implements java.io.FilenameFilter {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager)
                      public accept(arg0: java.io.File, arg1: java.lang.String): boolean
                  }
                  class LocalVmManager$2 implements java.io.FilenameFilter {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager)
                      public accept(arg0: java.io.File, arg1: java.lang.String): boolean
                  }
                  class LocalVmManager$1 implements java.io.FilenameFilter {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager)
                      public accept(arg0: java.io.File, arg1: java.lang.String): boolean
                  }
                  class MonitoredHostProvider extends sun.jvmstat.monitor.MonitoredHost {
                      public constructor(arg0: sun.jvmstat.monitor.HostIdentifier)
                      getMonitoredVm<T>(...args: any[]): any
                      public detach(arg0: sun.jvmstat.monitor.MonitoredVm): void
                      public addHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
                      public removeHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
                      public setInterval(arg0: int): void
                      public activeVms(): java.util.Set<java.lang.Integer>
                      static access$100(arg0: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider): java.util.HashSet
                      static access$102(arg0: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider, arg1: java.util.HashSet): java.util.HashSet
                      static access$200(arg0: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider): sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager
                      static access$300(arg0: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider, arg1: java.util.Set, arg2: java.util.Set, arg3: java.util.Set): void
                  }
                  class MonitoredHostProvider$1 {
                  }
                  class MonitoredHostProvider$NotifierTask extends sun.jvmstat.perfdata.monitor.CountedTimerTask {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider
                      public run(): void
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider, arg1: sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider$1)
                  }
                  class PerfDataBuffer extends sun.jvmstat.perfdata.monitor.AbstractPerfDataBuffer {
                      public constructor(arg0: sun.jvmstat.monitor.VmIdentifier)
                  }
                  class PerfDataFile {
                      public static tmpDirName: java.lang.String
                      public static dirNamePrefix: java.lang.String
                      public static userDirNamePattern: java.lang.String
                      public static fileNamePattern: java.lang.String
                      public static tmpFileNamePattern: java.lang.String
                      getFile<T>(...args: any[]): any
                      public static getLocalVmId(arg0: java.io.File): int
                      getTempDirectory<T>(...args: any[]): any
                  }
                  class PerfDataFile$1 implements java.io.FilenameFilter {
                      constructor()
                      public accept(arg0: java.io.File, arg1: java.lang.String): boolean
                  }

               }
               namespace rmi {
                  class MonitoredHostProvider extends sun.jvmstat.monitor.MonitoredHost {
                      public constructor(arg0: sun.jvmstat.monitor.HostIdentifier)
                      getMonitoredVm<T>(...args: any[]): any
                      public detach(arg0: sun.jvmstat.monitor.MonitoredVm): void
                      public addHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
                      public removeHostListener(arg0: sun.jvmstat.monitor.event.HostListener): void
                      public setInterval(arg0: int): void
                      public activeVms(): java.util.Set<java.lang.Integer>
                      fireDisconnectedEvents(): void
                      static access$100(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider): java.util.HashSet
                      static access$102(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider, arg1: java.util.HashSet): java.util.HashSet
                      static access$200(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider): sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteVmManager
                      static access$300(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider, arg1: java.util.Set, arg2: java.util.Set, arg3: java.util.Set): void
                  }
                  class MonitoredHostProvider$1 {
                  }
                  class MonitoredHostProvider$NotifierTask extends sun.jvmstat.perfdata.monitor.CountedTimerTask {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider
                      public run(): void
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider, arg1: sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostProvider$1)
                  }
                  class PerfDataBuffer extends sun.jvmstat.perfdata.monitor.AbstractPerfDataBuffer {
                      static $assertionsDisabled: boolean
                      public constructor(arg0: sun.jvmstat.monitor.remote.RemoteVm, arg1: int)
                      public sample(arg0: java.nio.ByteBuffer): void
                  }
                  class RemoteMonitoredVm extends sun.jvmstat.perfdata.monitor.AbstractMonitoredVm {
                      static $assertionsDisabled: boolean
                      public constructor(arg0: sun.jvmstat.monitor.remote.RemoteVm, arg1: sun.jvmstat.monitor.VmIdentifier, arg2: java.util.Timer, arg3: int)
                      public attach(): void
                      public detach(): void
                      public sample(): void
                      public getRemoteVm(): sun.jvmstat.monitor.remote.RemoteVm
                      public addVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                      public removeVmListener(arg0: sun.jvmstat.monitor.event.VmListener): void
                      public setInterval(arg0: int): void
                      fireMonitorStatusChangedEvents(arg0: java.util.List, arg1: java.util.List): void
                      fireMonitorsUpdatedEvents(): void
                  }
                  class RemoteMonitoredVm$1 {
                  }
                  class RemoteMonitoredVm$SamplerTask extends sun.jvmstat.perfdata.monitor.CountedTimerTask {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteMonitoredVm
                      public run(): void
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteMonitoredVm, arg1: sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteMonitoredVm$1)
                  }
                  class RemoteMonitoredVm$NotifierTask extends sun.jvmstat.perfdata.monitor.CountedTimerTask {
                      this$0: sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteMonitoredVm
                      public run(): void
                      constructor(arg0: sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteMonitoredVm, arg1: sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteMonitoredVm$1)
                  }
                  class RemoteVmManager {
                      constructor(...args: any[])
                      public activeVms(): java.util.Set<java.lang.Integer>
                  }

               }

            }
            namespace v1_0 {
               class BasicType {
                   public static BOOLEAN: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static CHAR: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static FLOAT: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static DOUBLE: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static BYTE: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static SHORT: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static INT: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static LONG: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static OBJECT: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static ARRAY: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static VOID: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static ADDRESS: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   public static ILLEGAL: sun.jvmstat.perfdata.monitor.v1_0.BasicType
                   toString<T>(...args: any[]): any
                   public intValue(): int
                   public static toBasicType(arg0: int): sun.jvmstat.perfdata.monitor.v1_0.BasicType
               }
               class PerfDataBuffer extends sun.jvmstat.perfdata.monitor.PerfDataBufferImpl {
                   prologue: sun.jvmstat.perfdata.monitor.v1_0.PerfDataBufferPrologue
                   nextEntry: int
                   pollForEntry: int
                   perfDataItem: int
                   lastModificationTime: long
                   lastUsed: int
                   overflow: sun.jvmstat.monitor.IntegerMonitor
                   insertedMonitors: java.util.ArrayList<sun.jvmstat.monitor.Monitor>
                   static $assertionsDisabled: boolean
                   public constructor(arg0: java.nio.ByteBuffer, arg1: int)
                   protected buildMonitorMap(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected getNewMonitors(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected getMonitorStatus(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): sun.jvmstat.perfdata.monitor.MonitorStatus
                   protected buildPseudoMonitors(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected synchWithTarget(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected pollFor(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>, arg1: java.lang.String, arg2: long): sun.jvmstat.monitor.Monitor
                   protected kludge(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected getNextMonitorEntry(): sun.jvmstat.monitor.Monitor
               }
               class PerfDataBufferPrologue extends sun.jvmstat.perfdata.monitor.AbstractPerfDataBufferPrologue {
                   static PERFDATA_PROLOG_USED_OFFSET: int
                   static PERFDATA_PROLOG_USED_SIZE: int
                   static PERFDATA_PROLOG_OVERFLOW_OFFSET: int
                   static PERFDATA_PROLOG_OVERFLOW_SIZE: int
                   static PERFDATA_PROLOG_MODTIMESTAMP_OFFSET: int
                   static PERFDATA_PROLOG_MODTIMESTAMP_SIZE: int
                   static PERFDATA_PROLOG_SIZE: int
                   static PERFDATA_BUFFER_SIZE_NAME: java.lang.String
                   static PERFDATA_BUFFER_USED_NAME: java.lang.String
                   static PERFDATA_OVERFLOW_NAME: java.lang.String
                   static PERFDATA_MODTIMESTAMP_NAME: java.lang.String
                   static $assertionsDisabled: boolean
                   public constructor(arg0: java.nio.ByteBuffer)
                   public supportsAccessible(): boolean
                   public isAccessible(): boolean
                   public getUsed(): int
                   public getBufferSize(): int
                   public getOverflow(): int
                   public getModificationTimeStamp(): long
                   public getSize(): int
                   public usedBuffer(): java.nio.IntBuffer
                   public sizeBuffer(): java.nio.IntBuffer
                   public overflowBuffer(): java.nio.IntBuffer
                   public modificationTimeStampBuffer(): java.nio.LongBuffer
               }

            }
            class MonitorStatus {
                protected inserted: java.util.List
                protected removed: java.util.List
                public constructor(arg0: java.util.List, arg1: java.util.List)
                public getInserted(): java.util.List
                public getRemoved(): java.util.List
            }
            abstract class PerfDataBufferImpl {
                protected buffer: java.nio.ByteBuffer
                protected monitors: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>
                protected lvmid: int
                protected aliasMap: java.util.Map<java.lang.String, java.util.ArrayList<java.lang.String>>
                protected aliasCache: java.util.Map
                static $assertionsDisabled: boolean
                protected constructor(arg0: java.nio.ByteBuffer, arg1: int)
                public getLocalVmId(): int
                public getBytes(): byte[]
                public getCapacity(): int
                getByteBuffer(): java.nio.ByteBuffer
                protected findByAlias(arg0: java.lang.String): sun.jvmstat.monitor.Monitor
                public findByName(arg0: java.lang.String): sun.jvmstat.monitor.Monitor
                public findByPattern(arg0: java.lang.String): java.util.List<sun.jvmstat.monitor.Monitor>
                getMonitorStatus<T>(...args: any[]): any
                protected buildMonitorMap(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                protected getNewMonitors(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
            }
            abstract class AbstractPerfDataBufferPrologue {
                protected byteBuffer: java.nio.ByteBuffer
                static PERFDATA_PROLOG_OFFSET: int
                static PERFDATA_PROLOG_MAGIC_OFFSET: int
                static PERFDATA_PROLOG_BYTEORDER_OFFSET: int
                static PERFDATA_PROLOG_BYTEORDER_SIZE: int
                static PERFDATA_PROLOG_MAJOR_OFFSET: int
                static PERFDATA_PROLOG_MAJOR_SIZE: int
                static PERFDATA_PROLOG_MINOR_OFFSET: int
                static PERFDATA_PROLOG_MINOR_SIZE: int
                static PERFDATA_PROLOG_RESERVEDB1_OFFSET: int
                static PERFDATA_PROLOG_RESERVEDB1_SIZE: int
                static PERFDATA_PROLOG_SIZE: int
                static PERFDATA_BIG_ENDIAN: byte
                static PERFDATA_LITTLE_ENDIAN: byte
                static PERFDATA_MAGIC: int
                public static PERFDATA_MAJOR_NAME: java.lang.String
                public static PERFDATA_MINOR_NAME: java.lang.String
                public constructor(arg0: java.nio.ByteBuffer)
                getMagic<T>(...args: any[]): any
                getByteOrder<T>(...args: any[]): any
                getMajorVersion<T>(...args: any[]): any
                getMinorVersion<T>(...args: any[]): any
                public isAccessible(): boolean
                public supportsAccessible(): boolean
                public getSize(): int
                public majorVersionBuffer(): java.nio.IntBuffer
                public minorVersionBuffer(): java.nio.IntBuffer
            }
            namespace v2_0 {
               class PerfDataBuffer extends sun.jvmstat.perfdata.monitor.PerfDataBufferImpl {
                   prologue: sun.jvmstat.perfdata.monitor.v2_0.PerfDataBufferPrologue
                   nextEntry: int
                   lastNumEntries: long
                   overflow: sun.jvmstat.monitor.IntegerMonitor
                   insertedMonitors: java.util.ArrayList<sun.jvmstat.monitor.Monitor>
                   static $assertionsDisabled: boolean
                   public constructor(arg0: java.nio.ByteBuffer, arg1: int)
                   protected buildMonitorMap(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected getNewMonitors(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected getMonitorStatus(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): sun.jvmstat.perfdata.monitor.MonitorStatus
                   protected buildPseudoMonitors(arg0: java.util.Map<java.lang.String, sun.jvmstat.monitor.Monitor>): void
                   protected synchWithTarget(): void
                   protected getNextMonitorEntry(): sun.jvmstat.monitor.Monitor
               }
               class PerfDataBufferPrologue extends sun.jvmstat.perfdata.monitor.AbstractPerfDataBufferPrologue {
                   static PERFDATA_PROLOG_ACCESSIBLE_OFFSET: int
                   static PERFDATA_PROLOG_ACCESSIBLE_SIZE: int
                   static PERFDATA_PROLOG_USED_OFFSET: int
                   static PERFDATA_PROLOG_USED_SIZE: int
                   static PERFDATA_PROLOG_OVERFLOW_OFFSET: int
                   static PERFDATA_PROLOG_OVERFLOW_SIZE: int
                   static PERFDATA_PROLOG_MODTIMESTAMP_OFFSET: int
                   static PERFDATA_PROLOG_MODTIMESTAMP_SIZE: int
                   static PERFDATA_PROLOG_ENTRYOFFSET_OFFSET: int
                   static PERFDATA_PROLOG_ENTRYOFFSET_SIZE: int
                   static PERFDATA_PROLOG_NUMENTRIES_OFFSET: int
                   static PERFDATA_PROLOG_NUMENTRIES_SIZE: int
                   static PERFDATA_PROLOG_SIZE: int
                   static PERFDATA_BUFFER_SIZE_NAME: java.lang.String
                   static PERFDATA_BUFFER_USED_NAME: java.lang.String
                   static PERFDATA_OVERFLOW_NAME: java.lang.String
                   static PERFDATA_MODTIMESTAMP_NAME: java.lang.String
                   static PERFDATA_NUMENTRIES_NAME: java.lang.String
                   static $assertionsDisabled: boolean
                   public constructor(arg0: java.nio.ByteBuffer)
                   public supportsAccessible(): boolean
                   public isAccessible(): boolean
                   public getUsed(): int
                   public getBufferSize(): int
                   public getOverflow(): int
                   public getModificationTimeStamp(): long
                   public getEntryOffset(): int
                   public getNumEntries(): int
                   public getSize(): int
                   usedBuffer(): java.nio.IntBuffer
                   sizeBuffer(): java.nio.IntBuffer
                   overflowBuffer(): java.nio.IntBuffer
                   modificationTimeStampBuffer(): java.nio.LongBuffer
                   numEntriesBuffer(): java.nio.IntBuffer
               }
               class TypeCode {
                   public static BOOLEAN: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static CHAR: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static FLOAT: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static DOUBLE: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static BYTE: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static SHORT: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static INT: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static LONG: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static OBJECT: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static ARRAY: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   public static VOID: sun.jvmstat.perfdata.monitor.v2_0.TypeCode
                   toString<T>(...args: any[]): any
                   public toChar(): int
                   toTypeCode<T>(...args: any[]): any
               }

            }

         }

      }

   }
   namespace tools {
      namespace attach {
         class LinuxAttachProvider extends sun.tools.attach.HotSpotAttachProvider {
             static $assertionsDisabled: boolean
             public constructor()
             public name(): java.lang.String
             public type(): java.lang.String
             attachVirtualMachine<T>(...args: any[]): any
         }
         class LinuxVirtualMachine extends sun.tools.attach.HotSpotVirtualMachine {
             isLinuxThreads<T>(...args: any[]): any
             path: java.lang.String
             static $assertionsDisabled: boolean
             constructor(arg0: com.sun.tools.attach.spi.AttachProvider, arg1: java.lang.String)
             public detach(): void
             execute(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.io.InputStream
             static getLinuxThreadsManager(arg0: int): int
             static sendQuitToChildrenOf(arg0: int): void
             static sendQuitTo(arg0: int): void
             static checkPermissions(arg0: java.lang.String): void
             static socket(): int
             static connect(arg0: int, arg1: java.lang.String): void
             static close(arg0: int): void
             static read(arg0: int, arg1: byte[], arg2: int, arg3: int): int
             static write(arg0: int, arg1: byte[], arg2: int, arg3: int): void
         }
         class LinuxVirtualMachine$SocketInputStream extends java.io.InputStream {
             s: int
             this$0: sun.tools.attach.LinuxVirtualMachine
             public constructor(arg0: sun.tools.attach.LinuxVirtualMachine, arg1: int)
             read<T>(...args: any[]): any
             public close(): void
         }
         abstract class HotSpotAttachProvider extends com.sun.tools.attach.spi.AttachProvider {
             public constructor()
             public checkAttachPermission(): void
             public listVirtualMachines(): java.util.List<com.sun.tools.attach.VirtualMachineDescriptor>
             testAttachable(arg0: java.lang.String): void
         }
         class HotSpotAttachProvider$HotSpotVirtualMachineDescriptor extends com.sun.tools.attach.VirtualMachineDescriptor {
             constructor(arg0: com.sun.tools.attach.spi.AttachProvider, arg1: java.lang.String, arg2: java.lang.String)
             public isAttachable(): boolean
         }
         abstract class HotSpotVirtualMachine extends com.sun.tools.attach.VirtualMachine {
             constructor(arg0: com.sun.tools.attach.spi.AttachProvider, arg1: java.lang.String)
             public loadAgentLibrary(arg0: java.lang.String, arg1: java.lang.String): void
             public loadAgentPath(arg0: java.lang.String, arg1: java.lang.String): void
             public loadAgent(arg0: java.lang.String, arg1: java.lang.String): void
             public getSystemProperties(): java.util.Properties
             public getAgentProperties(): java.util.Properties
             public startManagementAgent(arg0: java.util.Properties): void
             public startLocalManagementAgent(): java.lang.String
             public localDataDump(): void
             public remoteDataDump(...arg0: java.lang.Object[]): java.io.InputStream
             public dumpHeap(...arg0: java.lang.Object[]): java.io.InputStream
             public heapHisto(...arg0: java.lang.Object[]): java.io.InputStream
             public setFlag(arg0: java.lang.String, arg1: java.lang.String): java.io.InputStream
             public printFlag(arg0: java.lang.String): java.io.InputStream
             public executeJCmd(arg0: java.lang.String): java.io.InputStream
             execute(arg0: java.lang.String, ...arg1: java.lang.Object[]): java.io.InputStream
             readInt(arg0: java.io.InputStream): int
             readErrorMessage(arg0: java.io.InputStream): java.lang.String
             attachTimeout(): long
         }

      }
      namespace jar {
         namespace resources {
            class jar_zh_TW extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_zh_CN extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_sv extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_pt_BR extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_ko extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_ja extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_it extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_fr extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_es extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_de extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }
            class jar_zh_HK extends java.util.ListResourceBundle {
                public constructor()
                protected getContents(): java.lang.Object[][]
            }

         }
         class CommandLine {
             public constructor()
             public static parse(arg0: java.lang.String[]): java.lang.String[]
         }
         class Main {
             program: java.lang.String
             out: java.io.PrintStream
             err: java.io.PrintStream
             fname: java.lang.String
             mname: java.lang.String
             ename: java.lang.String
             zname: java.lang.String
             files: java.lang.String[]
             rootjar: java.lang.String
             entryMap: java.util.Map<java.lang.String, java.io.File>
             entries: java.util.Set<java.io.File>
             paths: java.util.Set<java.lang.String>
             cflag: boolean
             uflag: boolean
             xflag: boolean
             tflag: boolean
             vflag: boolean
             flag0: boolean
             Mflag: boolean
             iflag: boolean
             nflag: boolean
             pflag: boolean
             static MANIFEST_DIR: java.lang.String
             static VERSION: java.lang.String
             static $assertionsDisabled: boolean
             public constructor(arg0: java.io.PrintStream, arg1: java.io.PrintStream, arg2: java.lang.String)
             public run(arg0: java.lang.String[]): boolean
             parseArgs(arg0: java.lang.String[]): boolean
             expand(arg0: java.io.File, arg1: java.lang.String[], arg2: boolean): void
             create(arg0: java.io.OutputStream, arg1: java.util.jar.Manifest): void
             update(arg0: java.io.InputStream, arg1: java.io.OutputStream, arg2: java.io.InputStream, arg3: sun.misc.JarIndex): boolean
             addFile(arg0: java.util.zip.ZipOutputStream, arg1: java.io.File): void
             replaceFSC(arg0: java.lang.String[]): void
             newDirSet(): java.util.Set<java.util.zip.ZipEntry>
             updateLastModifiedTime(arg0: java.util.Set<java.util.zip.ZipEntry>): void
             extract<T>(...args: any[]): any
             extractFile(arg0: java.io.InputStream, arg1: java.util.zip.ZipEntry): java.util.zip.ZipEntry
             list<T>(...args: any[]): any
             dumpIndex(arg0: java.lang.String, arg1: sun.misc.JarIndex): void
             getJarPath(arg0: java.lang.String): java.util.List<java.lang.String>
             genIndex(arg0: java.lang.String, arg1: java.lang.String[]): void
             printEntry<T>(...args: any[]): any
             usageError(): void
             fatalError<T>(...args: any[]): any
             protected output(arg0: java.lang.String): void
             protected error(arg0: java.lang.String): void
             public static main(arg0: java.lang.String[]): void
             static access$000(): boolean
         }
         class Main$CRC32OutputStream extends java.io.OutputStream {
             crc: java.util.zip.CRC32
             n: long
             constructor()
             write<T>(...args: any[]): any
             public updateEntry(arg0: java.util.zip.ZipEntry): void
         }
         class Main$1 extends java.util.HashSet<java.util.zip.ZipEntry> {
             this$0: sun.tools.jar.Main
             constructor(arg0: sun.tools.jar.Main)
             add<T>(...args: any[]): any
         }
         class JarException extends java.io.IOException {
             static serialVersionUID: long
             constructor(...args: any[])
         }
         class Manifest {
             static hashes: java.lang.String[]
             static EOL: byte[]
             debug<T>(...args: any[]): any
             static VERSION: java.lang.String
             constructor(...args: any[])
             public addEntry(arg0: sun.net.www.MessageHeader): void
             public getEntry(arg0: java.lang.String): sun.net.www.MessageHeader
             public entryAt(arg0: int): sun.net.www.MessageHeader
             public entries(): java.util.Enumeration<sun.net.www.MessageHeader>
             public addFiles(arg0: java.io.File, arg1: java.lang.String[]): void
             public addFile(arg0: java.io.File): void
             public doHashes(arg0: sun.net.www.MessageHeader): void
             public stream(arg0: java.io.OutputStream): void
             public static isManifestName(arg0: java.lang.String): boolean
         }
         class SignatureFile {
             debug<T>(...args: any[]): any
             static hashes: java.lang.String[]
             constructor(...args: any[])
             public getName(): java.lang.String
             public getBlockName(): java.lang.String
             public getBlock(): sun.security.pkcs.PKCS7
             public setBlock(arg0: sun.security.pkcs.PKCS7): void
             add<T>(...args: any[]): any
             public getEntry(arg0: java.lang.String): sun.net.www.MessageHeader
             public entryAt(arg0: int): sun.net.www.MessageHeader
             public entries(): java.util.Enumeration<sun.net.www.MessageHeader>
             public stream(arg0: java.io.OutputStream): void
         }

      }
      namespace jcmd {
         class Arguments {
             public isListProcesses(): boolean
             public isListCounters(): boolean
             public isShowUsage(): boolean
             public getPid(): int
             public getCommand(): java.lang.String
             public getProcessSubstring(): java.lang.String
             public constructor(arg0: java.lang.String[])
             public static usage(): void
         }
         class JCmd {
             public constructor()
             public static main(arg0: java.lang.String[]): void
         }
         class JCmd$AscendingMonitorComparator implements java.util.Comparator<sun.jvmstat.monitor.Monitor> {
             constructor()
             compare<T>(...args: any[]): any
         }

      }
      namespace jinfo {
         class JInfo {
             public constructor()
             public static main(arg0: java.lang.String[]): void
         }

      }
      namespace jmap {
         class JMap {
             static $assertionsDisabled: boolean
             public constructor()
             public static main(arg0: java.lang.String[]): void
         }

      }
      namespace jps {
         class Arguments {
             public static printUsage(arg0: java.io.PrintStream): void
             public constructor(arg0: java.lang.String[])
             public isDebug(): boolean
             public printStackTrace(): boolean
             public isHelp(): boolean
             public isQuiet(): boolean
             public showLongPaths(): boolean
             public showVmArgs(): boolean
             public showVmFlags(): boolean
             public showMainArgs(): boolean
             public hostname(): java.lang.String
             public hostId(): sun.jvmstat.monitor.HostIdentifier
         }
         class Jps {
             static $assertionsDisabled: boolean
             public constructor()
             public static main(arg0: java.lang.String[]): void
         }

      }
      namespace jstack {
         class JStack {
             public constructor()
             public static main(arg0: java.lang.String[]): void
         }

      }
      namespace jstatd {
         class Jstatd {
             public constructor()
             static bind(arg0: java.lang.String, arg1: sun.tools.jstatd.RemoteHostImpl): void
             public static main(arg0: java.lang.String[]): void
         }
         class RemoteHostImpl implements sun.jvmstat.monitor.remote.RemoteHost , sun.jvmstat.monitor.event.HostListener {
             public constructor()
             public attachVm(arg0: int, arg1: java.lang.String): sun.jvmstat.monitor.remote.RemoteVm
             public detachVm(arg0: sun.jvmstat.monitor.remote.RemoteVm): void
             public activeVms(): int[]
             public vmStatusChanged(arg0: sun.jvmstat.monitor.event.VmStatusChangeEvent): void
             public disconnected(arg0: sun.jvmstat.monitor.event.HostEvent): void
         }
         class RemoteVmImpl implements sun.jvmstat.monitor.remote.RemoteVm {
             constructor(arg0: sun.jvmstat.monitor.remote.BufferedMonitoredVm)
             public getBytes(): byte[]
             public getCapacity(): int
             public detach(): void
             public getLocalVmId(): int
         }

      }
      namespace native2ascii {
         class A2NFilter extends java.io.FilterReader {
             public constructor(arg0: java.io.Reader)
             read<T>(...args: any[]): any
         }
         class Main {
             inputFileName: java.lang.String
             outputFileName: java.lang.String
             tempFile: java.io.File
             reverse: boolean
             static encodingString: java.lang.String
             static defaultEncoding: java.lang.String
             static encoder: java.nio.charset.CharsetEncoder
             public constructor()
             public convert(arg0: java.lang.String[]): boolean
             public static canConvert(arg0: char): boolean
             public static main(arg0: java.lang.String[]): void
         }
         class N2AFilter extends java.io.FilterWriter {
             public constructor(arg0: java.io.Writer)
             write<T>(...args: any[]): any
         }
         namespace resources {
            class MsgNative2ascii extends java.util.ListResourceBundle {
                public constructor()
                public getContents(): java.lang.Object[][]
            }
            class MsgNative2ascii_ja extends java.util.ListResourceBundle {
                public constructor()
                public getContents(): java.lang.Object[][]
            }
            class MsgNative2ascii_zh_CN extends java.util.ListResourceBundle {
                public constructor()
                public getContents(): java.lang.Object[][]
            }

         }

      }
      namespace asm {
         class ArrayData {
             type: sun.tools.java.Type
             nargs: int
             public constructor(arg0: sun.tools.java.Type, arg1: int)
         }
         class ClassConstantData extends sun.tools.asm.ConstantPoolData {
             name: java.lang.String
             constructor(...args: any[])
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
             toString<T>(...args: any[]): any
         }
         class Cover {
             public Type: int
             public Addr: long
             public NumCommand: int
             public constructor(arg0: int, arg1: long, arg2: int)
         }
         class FieldConstantData extends sun.tools.asm.ConstantPoolData {
             field: sun.tools.java.MemberDefinition
             nt: sun.tools.asm.NameAndTypeData
             constructor(arg0: sun.tools.asm.ConstantPool, arg1: sun.tools.java.MemberDefinition)
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
         }
         class LocalVariable {
             field: sun.tools.java.MemberDefinition
             slot: int
             from: int
             to: int
             constructor(...args: any[])
             toString<T>(...args: any[]): any
         }
         class LocalVariableTable {
             locals: sun.tools.asm.LocalVariable[]
             len: int
             constructor()
             define(arg0: sun.tools.java.MemberDefinition, arg1: int, arg2: int, arg3: int): void
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
         }
         class NameAndTypeConstantData extends sun.tools.asm.ConstantPoolData {
             name: java.lang.String
             type: java.lang.String
             constructor(arg0: sun.tools.asm.ConstantPool, arg1: sun.tools.asm.NameAndTypeData)
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
         }
         class NameAndTypeData {
             field: sun.tools.java.MemberDefinition
             constructor(arg0: sun.tools.java.MemberDefinition)
             public hashCode(): int
             public equals(arg0: java.lang.Object): boolean
             toString<T>(...args: any[]): any
         }
         class NumberConstantData extends sun.tools.asm.ConstantPoolData {
             num: java.lang.Number
             constructor(arg0: sun.tools.asm.ConstantPool, arg1: java.lang.Number)
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
             width(): int
         }
         class StringConstantData extends sun.tools.asm.ConstantPoolData {
             str: java.lang.String
             constructor(arg0: sun.tools.asm.ConstantPool, arg1: java.lang.String)
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
             toString<T>(...args: any[]): any
         }
         class StringExpressionConstantData extends sun.tools.asm.ConstantPoolData {
             str: sun.tools.tree.StringExpression
             constructor(arg0: sun.tools.asm.ConstantPool, arg1: sun.tools.tree.StringExpression)
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
             toString<T>(...args: any[]): any
         }
         class SwitchDataEnumeration implements java.util.Enumeration<java.lang.Integer> {
             constructor(arg0: java.util.Hashtable<java.lang.Integer, sun.tools.asm.Label>)
             public hasMoreElements(): boolean
             nextElement<T>(...args: any[]): any
         }
         class SwitchData {
             minValue: int
             maxValue: int
             defaultLabel: sun.tools.asm.Label
             tab: java.util.Hashtable<java.lang.Integer, sun.tools.asm.Label>
             whereCaseTab: java.util.Hashtable<java.lang.Integer, java.lang.Long>
             public constructor()
             get<T>(...args: any[]): any
             public add(arg0: int, arg1: sun.tools.asm.Label): void
             public getDefaultLabel(): sun.tools.asm.Label
             public sortedKeys(): java.util.Enumeration<java.lang.Integer>
             public initTableCase(): void
             public addTableCase(arg0: int, arg1: long): void
             public addTableDefault(arg0: long): void
             public whereCase(arg0: java.lang.Object): long
             public getDefault(): boolean
         }
         class CatchData {
             type: java.lang.Object
             label: sun.tools.asm.Label
             constructor(arg0: java.lang.Object)
             public getLabel(): sun.tools.asm.Label
             public getType(): java.lang.Object
         }
         class TryData {
             catches: java.util.Vector<sun.tools.asm.CatchData>
             endLabel: sun.tools.asm.Label
             public constructor()
             public add(arg0: java.lang.Object): sun.tools.asm.CatchData
             public getCatch(arg0: int): sun.tools.asm.CatchData
             public getEndLabel(): sun.tools.asm.Label
         }
         abstract class ConstantPoolData implements sun.tools.java.RuntimeConstants {
             index: int
             constructor()
             write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             order(): int
             width(): int
         }
         class ConstantPool implements sun.tools.java.RuntimeConstants {
             hash: java.util.Hashtable<java.lang.Object, sun.tools.asm.ConstantPoolData>
             public constructor()
             public index(arg0: java.lang.Object): int
             public put(arg0: java.lang.Object): void
             public write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream): void
         }
         class Instruction implements sun.tools.java.Constants {
             where: long
             pc: int
             opc: int
             value: java.lang.Object
             next: sun.tools.asm.Instruction
             flagCondInverted: boolean
             flagNoCovered: boolean
             public static SWITCHRATIO: double
             constructor(...args: any[])
             public getOpcode(): int
             public getValue(): java.lang.Object
             public setValue(arg0: java.lang.Object): void
             optimize(arg0: sun.tools.java.Environment): void
             collect(arg0: sun.tools.asm.ConstantPool): void
             balance(): int
             size(arg0: sun.tools.asm.ConstantPool): int
             write(arg0: java.io.DataOutputStream, arg1: sun.tools.asm.ConstantPool): void
             toString<T>(...args: any[]): any
         }
         class Label extends sun.tools.asm.Instruction {
             static labelCount: int
             ID: int
             depth: int
             locals: sun.tools.java.MemberDefinition[]
             public constructor()
             getDestination(): sun.tools.asm.Label
             toString<T>(...args: any[]): any
         }
         class Assembler implements sun.tools.java.Constants {
             static NOTREACHED: int
             static REACHED: int
             static NEEDED: int
             first: sun.tools.asm.Label
             last: sun.tools.asm.Instruction
             maxdepth: int
             maxvar: int
             maxpc: int
             static SourceClassList: java.util.Vector<java.lang.String>
             static TmpCovTable: java.util.Vector<java.lang.String>
             static JcovClassCountArray: int[]
             static JcovMagicLine: java.lang.String
             static JcovClassLine: java.lang.String
             static JcovSrcfileLine: java.lang.String
             static JcovTimestampLine: java.lang.String
             static JcovDataLine: java.lang.String
             static JcovHeadingLine: java.lang.String
             static arrayModifiers: int[]
             static arrayModifiersOpc: int[]
             public constructor()
             add<T>(...args: any[]): any
             optimize<T>(...args: any[]): any
             eliminate(): boolean
             public collect(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition, arg2: sun.tools.asm.ConstantPool): void
             balance(arg0: sun.tools.asm.Label, arg1: int): void
             public write(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.java.MemberDefinition, arg3: sun.tools.asm.ConstantPool): void
             writeExceptions(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool, arg3: sun.tools.asm.Instruction, arg4: sun.tools.asm.Instruction): void
             public writeCoverageTable(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDefinition, arg2: java.io.DataOutputStream, arg3: sun.tools.asm.ConstantPool, arg4: long): void
             public addNativeToJcovTab(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDefinition): void
             public GenVecJCov(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDefinition, arg2: long): void
             public GenJCov(arg0: sun.tools.java.Environment): void
             public writeLineNumberTable(arg0: sun.tools.java.Environment, arg1: java.io.DataOutputStream, arg2: sun.tools.asm.ConstantPool): void
             flowFields(arg0: sun.tools.java.Environment, arg1: sun.tools.asm.Label, arg2: sun.tools.java.MemberDefinition[]): void
             public writeLocalVariableTable(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition, arg2: java.io.DataOutputStream, arg3: sun.tools.asm.ConstantPool): void
             public empty(): boolean
             public listing(arg0: java.io.PrintStream): void
         }

      }
      namespace tree {
         class AddExpression extends sun.tools.tree.BinaryArithmeticExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             public isNonNull(): boolean
             eval<T>(...args: any[]): any
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             protected inlineValueSB(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: java.lang.StringBuffer): java.lang.StringBuffer
             simplify(): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeAppend(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.java.ClassDeclaration, arg4: boolean): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AndExpression extends sun.tools.tree.BinaryLogicalExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public checkCondition(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.ConditionVars): void
             eval(arg0: boolean, arg1: boolean): sun.tools.tree.Expression
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class ArrayAccessExpression extends sun.tools.tree.UnaryExpression {
             index: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkAmbigName(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.UnaryExpression): sun.tools.tree.Vset
             public checkLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkAssignOp(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.Expression): sun.tools.tree.Vset
             public getAssigner(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public getUpdater(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             toType<T>(...args: any[]): any
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeLValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): int
             codeLoad(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeStore(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class ArrayExpression extends sun.tools.tree.NaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression[])
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkInitializer(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: sun.tools.java.Type, arg4: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignAddExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: boolean): void
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignBitAndExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignBitOrExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignBitXorExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignDivideExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignExpression extends sun.tools.tree.BinaryAssignExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignMultiplyExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignRemainderExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignShiftLeftExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignShiftRightExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class AssignSubtractExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         abstract class AssignOpExpression extends sun.tools.tree.BinaryAssignExpression {
             protected itype: sun.tools.java.Type
             NOINC: int
             protected updater: sun.tools.tree.FieldUpdater
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             getIncrement(): int
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             code<T>(...args: any[]): any
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class AssignUnsignedShiftRightExpression extends sun.tools.tree.AssignOpExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class BinaryAssignExpression extends sun.tools.tree.BinaryExpression {
             implementation: sun.tools.tree.Expression
             constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             public getImplementation(): sun.tools.tree.Expression
             public order(): sun.tools.tree.Expression
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
         }
         class BitAndExpression extends sun.tools.tree.BinaryBitExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class BitNotExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class BitOrExpression extends sun.tools.tree.BinaryBitExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         abstract class BinaryBitExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class BitXorExpression extends sun.tools.tree.BinaryBitExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class BooleanExpression extends sun.tools.tree.ConstantExpression {
             value: boolean
             public constructor(arg0: long, arg1: boolean)
             public getValue(): java.lang.Object
             public equals(arg0: boolean): boolean
             public equalsDefault(): boolean
             public checkCondition(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.ConditionVars): void
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
             public isConstant(): boolean
         }
         class BreakStatement extends sun.tools.tree.Statement {
             lbl: sun.tools.java.Identifier
             public constructor(arg0: long, arg1: sun.tools.java.Identifier)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class ByteExpression extends sun.tools.tree.IntegerExpression {
             public constructor(arg0: long, arg1: byte)
             public print(arg0: java.io.PrintStream): void
         }
         class CaseStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class CastExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public isConstant(): boolean
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public print(arg0: java.io.PrintStream): void
         }
         class CatchStatement extends sun.tools.tree.Statement {
             mod: int
             texpr: sun.tools.tree.Expression
             id: sun.tools.java.Identifier
             body: sun.tools.tree.Statement
             field: sun.tools.tree.LocalMember
             constructor(...args: any[])
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class CharExpression extends sun.tools.tree.IntegerExpression {
             public constructor(arg0: long, arg1: char)
             public print(arg0: java.io.PrintStream): void
         }
         class CodeContext extends sun.tools.tree.Context {
             breakLabel: sun.tools.asm.Label
             contLabel: sun.tools.asm.Label
             constructor(arg0: sun.tools.tree.Context, arg1: sun.tools.tree.Node)
         }
         class CommaExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             simplify(): sun.tools.tree.Expression
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             codeLValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): int
             codeLoad(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeStore(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class CompoundStatement extends sun.tools.tree.Statement {
             args: sun.tools.tree.Statement[]
             public constructor(arg0: long, arg1: sun.tools.tree.Statement[])
             public insertStatement(arg0: sun.tools.tree.Statement): void
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public firstConstructor(): sun.tools.tree.Expression
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class ConditionalExpression extends sun.tools.tree.BinaryExpression {
             cond: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             public order(): sun.tools.tree.Expression
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public isConstant(): boolean
             simplify(): sun.tools.tree.Expression
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class ContextEnvironment extends sun.tools.java.Environment {
             ctx: sun.tools.tree.Context
             innerEnv: sun.tools.java.Environment
             constructor(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context)
             public resolveName(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
         }
         class ContinueStatement extends sun.tools.tree.Statement {
             lbl: sun.tools.java.Identifier
             public constructor(arg0: long, arg1: sun.tools.java.Identifier)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class ConvertExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.java.Type, arg2: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             simplify(): sun.tools.tree.Expression
             equals<T>(...args: any[]): any
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class DeclarationStatement extends sun.tools.tree.Statement {
             mod: int
             type: sun.tools.tree.Expression
             args: sun.tools.tree.Statement[]
             public constructor(arg0: long, arg1: int, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Statement[])
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             checkBlockStatement(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class DivideExpression extends sun.tools.tree.DivRemExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class DoStatement extends sun.tools.tree.Statement {
             body: sun.tools.tree.Statement
             cond: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Statement, arg2: sun.tools.tree.Expression)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class DoubleExpression extends sun.tools.tree.ConstantExpression {
             value: double
             public constructor(arg0: long, arg1: double)
             public getValue(): java.lang.Object
             public equals(arg0: int): boolean
             public equalsDefault(): boolean
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
             public isConstant(): boolean
         }
         class EqualExpression extends sun.tools.tree.BinaryEqualityExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class ExprExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             public checkCondition(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.ConditionVars): void
             public checkAssignOp(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.Expression): sun.tools.tree.Vset
             public getUpdater(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public isNull(): boolean
             public isNonNull(): boolean
             public getValue(): java.lang.Object
             protected inlineValueSB(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: java.lang.StringBuffer): java.lang.StringBuffer
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             simplify(): sun.tools.tree.Expression
         }
         class ExpressionStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public firstConstructor(): sun.tools.tree.Expression
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class FieldExpression extends sun.tools.tree.UnaryExpression {
             id: sun.tools.java.Identifier
             field: sun.tools.java.MemberDefinition
             implementation: sun.tools.tree.Expression
             clazz: sun.tools.java.ClassDefinition
             constructor(...args: any[])
             public getImplementation(): sun.tools.tree.Expression
             public static toIdentifier(arg0: sun.tools.tree.Expression): sun.tools.java.Identifier
             toType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.java.Type
             public checkAmbigName(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.UnaryExpression): sun.tools.tree.Vset
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             reportFailedPackagePrefix<T>(...args: any[]): any
             static isTypeAccessible(arg0: long, arg1: sun.tools.java.Environment, arg2: sun.tools.java.Type, arg3: sun.tools.java.ClassDefinition): boolean
             public getAssigner(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public getUpdater(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public checkLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkAssignOp(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.Expression): sun.tools.tree.Vset
             public static checkFinalAssign(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: long, arg4: sun.tools.java.MemberDefinition): sun.tools.tree.Vset
             public isConstant(): boolean
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeLValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): int
             codeLoad(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeStore(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class FinallyStatement extends sun.tools.tree.Statement {
             body: sun.tools.tree.Statement
             finalbody: sun.tools.tree.Statement
             finallyCanFinish: boolean
             needReturnSlot: boolean
             init: sun.tools.tree.Statement
             tryTemp: sun.tools.tree.LocalMember
             public constructor(arg0: long, arg1: sun.tools.tree.Statement, arg2: sun.tools.tree.Statement)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class FloatExpression extends sun.tools.tree.ConstantExpression {
             value: float
             public constructor(arg0: long, arg1: float)
             public getValue(): java.lang.Object
             public equals(arg0: int): boolean
             public equalsDefault(): boolean
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
             public isConstant(): boolean
         }
         class ForStatement extends sun.tools.tree.Statement {
             init: sun.tools.tree.Statement
             cond: sun.tools.tree.Expression
             inc: sun.tools.tree.Expression
             body: sun.tools.tree.Statement
             public constructor(arg0: long, arg1: sun.tools.tree.Statement, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression, arg4: sun.tools.tree.Statement)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class GreaterExpression extends sun.tools.tree.BinaryCompareExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class GreaterOrEqualExpression extends sun.tools.tree.BinaryCompareExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class IdentifierExpression extends sun.tools.tree.Expression {
             id: sun.tools.java.Identifier
             field: sun.tools.java.MemberDefinition
             implementation: sun.tools.tree.Expression
             constructor(...args: any[])
             public getImplementation(): sun.tools.tree.Expression
             public equals(arg0: sun.tools.java.Identifier): boolean
             bind(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): boolean
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkAssignOp(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.Expression): sun.tools.tree.Vset
             public getAssigner(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public getUpdater(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public checkAmbigName(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.UnaryExpression): sun.tools.tree.Vset
             toType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.java.Type
             public isConstant(): boolean
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeLValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): int
             codeLoad(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeStore(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class IfStatement extends sun.tools.tree.Statement {
             cond: sun.tools.tree.Expression
             ifTrue: sun.tools.tree.Statement
             ifFalse: sun.tools.tree.Statement
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Statement, arg3: sun.tools.tree.Statement)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class InlineMethodExpression extends sun.tools.tree.Expression {
             field: sun.tools.java.MemberDefinition
             body: sun.tools.tree.Statement
             constructor(arg0: long, arg1: sun.tools.java.Type, arg2: sun.tools.java.MemberDefinition, arg3: sun.tools.tree.Statement)
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class InlineNewInstanceExpression extends sun.tools.tree.Expression {
             field: sun.tools.java.MemberDefinition
             body: sun.tools.tree.Statement
             constructor(arg0: long, arg1: sun.tools.java.Type, arg2: sun.tools.java.MemberDefinition, arg3: sun.tools.tree.Statement)
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class InlineReturnStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             getDestination(arg0: sun.tools.tree.Context): sun.tools.tree.Context
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class InstanceOfExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class IntExpression extends sun.tools.tree.IntegerExpression {
             public constructor(arg0: long, arg1: int)
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
             public print(arg0: java.io.PrintStream): void
         }
         class LengthExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class LessExpression extends sun.tools.tree.BinaryCompareExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class BinaryCompareExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
         }
         class LessOrEqualExpression extends sun.tools.tree.BinaryCompareExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class LongExpression extends sun.tools.tree.ConstantExpression {
             value: long
             public constructor(arg0: long, arg1: long)
             public getValue(): java.lang.Object
             public equals(arg0: int): boolean
             public equalsDefault(): boolean
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
             public isConstant(): boolean
         }
         class MethodExpression extends sun.tools.tree.NaryExpression {
             id: sun.tools.java.Identifier
             clazz: sun.tools.java.ClassDefinition
             field: sun.tools.java.MemberDefinition
             implementation: sun.tools.tree.Expression
             static MAXINLINECOST: int
             constructor(...args: any[])
             public getImplementation(): sun.tools.tree.Expression
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             diagnoseMismatch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Expression[], arg2: sun.tools.java.Type[]): boolean
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public firstConstructor(): sun.tools.tree.Expression
             public print(arg0: java.io.PrintStream): void
         }
         class MultiplyExpression extends sun.tools.tree.BinaryArithmeticExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class NegativeExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class NewArrayExpression extends sun.tools.tree.NaryExpression {
             init: sun.tools.tree.Expression
             constructor(...args: any[])
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class NaryExpression extends sun.tools.tree.UnaryExpression {
             args: sun.tools.tree.Expression[]
             constructor(arg0: int, arg1: long, arg2: sun.tools.java.Type, arg3: sun.tools.tree.Expression, arg4: sun.tools.tree.Expression[])
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public print(arg0: java.io.PrintStream): void
         }
         class NewInstanceExpression extends sun.tools.tree.NaryExpression {
             field: sun.tools.java.MemberDefinition
             outerArg: sun.tools.tree.Expression
             body: sun.tools.java.ClassDefinition
             implMethod: sun.tools.java.MemberDefinition
             MAXINLINECOST: int
             constructor(...args: any[])
             public getOuterArg(): sun.tools.tree.Expression
             precedence(): int
             public order(): sun.tools.tree.Expression
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public static insertOuterLink(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: long, arg3: sun.tools.java.ClassDefinition, arg4: sun.tools.tree.Expression, arg5: sun.tools.tree.Expression[]): sun.tools.tree.Expression[]
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             inlineNewInstance(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Statement): sun.tools.tree.Expression
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class BinaryEqualityExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
         }
         class NotEqualExpression extends sun.tools.tree.BinaryEqualityExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class NotExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             public checkCondition(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.ConditionVars): void
             eval(arg0: boolean): sun.tools.tree.Expression
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class NullExpression extends sun.tools.tree.ConstantExpression {
             public constructor(arg0: long)
             public equals(arg0: int): boolean
             public isNull(): boolean
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
             public isConstant(): boolean
         }
         abstract class BinaryLogicalExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkCondition(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.ConditionVars): void
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
         }
         class OrExpression extends sun.tools.tree.BinaryLogicalExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             public checkCondition(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.ConditionVars): void
             eval(arg0: boolean, arg1: boolean): sun.tools.tree.Expression
             simplify(): sun.tools.tree.Expression
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
         }
         class PositiveExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             simplify(): sun.tools.tree.Expression
         }
         class PostDecExpression extends sun.tools.tree.IncDecExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class PostIncExpression extends sun.tools.tree.IncDecExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class PreDecExpression extends sun.tools.tree.IncDecExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class IncDecExpression extends sun.tools.tree.UnaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression)
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeIncDec(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: boolean, arg4: boolean, arg5: boolean): void
         }
         class PreIncExpression extends sun.tools.tree.IncDecExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         abstract class DivRemExpression extends sun.tools.tree.BinaryArithmeticExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
         }
         class RemainderExpression extends sun.tools.tree.DivRemExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class ReturnStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class ShiftLeftExpression extends sun.tools.tree.BinaryShiftExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class ShiftRightExpression extends sun.tools.tree.BinaryShiftExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class IntegerExpression extends sun.tools.tree.ConstantExpression {
             value: int
             constructor(arg0: int, arg1: long, arg2: sun.tools.java.Type, arg3: int)
             public fitsType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.java.Type): boolean
             public getValue(): java.lang.Object
             public equals(arg0: int): boolean
             public equalsDefault(): boolean
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public isConstant(): boolean
         }
         class ShortExpression extends sun.tools.tree.IntegerExpression {
             public constructor(arg0: long, arg1: short)
             public print(arg0: java.io.PrintStream): void
         }
         class ConstantExpression extends sun.tools.tree.Expression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.java.Type)
             public isConstant(): boolean
         }
         class StringExpression extends sun.tools.tree.ConstantExpression {
             value: java.lang.String
             public constructor(arg0: long, arg1: java.lang.String)
             equals<T>(...args: any[]): any
             public isNonNull(): boolean
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public getValue(): java.lang.Object
             public hashCode(): int
             public print(arg0: java.io.PrintStream): void
             public isConstant(): boolean
         }
         class BinaryArithmeticExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
         }
         class SubtractExpression extends sun.tools.tree.BinaryArithmeticExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class SuperExpression extends sun.tools.tree.ThisExpression {
             constructor(...args: any[])
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkAmbigName(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.UnaryExpression): sun.tools.tree.Vset
         }
         class SwitchStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             args: sun.tools.tree.Statement[]
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Statement[])
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class SynchronizedStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             body: sun.tools.tree.Statement
             needReturnSlot: boolean
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Statement)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class ThisExpression extends sun.tools.tree.Expression {
             field: sun.tools.tree.LocalMember
             implementation: sun.tools.tree.Expression
             outerArg: sun.tools.tree.Expression
             constructor(...args: any[])
             public getImplementation(): sun.tools.tree.Expression
             public getOuterArg(): sun.tools.tree.Expression
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public isNonNull(): boolean
             public getAssigner(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public getUpdater(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class ThrowStatement extends sun.tools.tree.Statement {
             expr: sun.tools.tree.Expression
             public constructor(arg0: long, arg1: sun.tools.tree.Expression)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class TryStatement extends sun.tools.tree.Statement {
             body: sun.tools.tree.Statement
             args: sun.tools.tree.Statement[]
             arrayCloneWhere: long
             public constructor(arg0: long, arg1: sun.tools.tree.Statement, arg2: sun.tools.tree.Statement[])
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class TypeExpression extends sun.tools.tree.Expression {
             public constructor(arg0: long, arg1: sun.tools.java.Type)
             toType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.java.Type
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkAmbigName(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.UnaryExpression): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public print(arg0: java.io.PrintStream): void
         }
         class BinaryExpression extends sun.tools.tree.UnaryExpression {
             left: sun.tools.tree.Expression
             constructor(arg0: int, arg1: long, arg2: sun.tools.java.Type, arg3: sun.tools.tree.Expression, arg4: sun.tools.tree.Expression)
             public order(): sun.tools.tree.Expression
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public isConstant(): boolean
             eval<T>(...args: any[]): any
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }
         class BinaryShiftExpression extends sun.tools.tree.BinaryExpression {
             public constructor(arg0: int, arg1: long, arg2: sun.tools.tree.Expression, arg3: sun.tools.tree.Expression)
             eval(): sun.tools.tree.Expression
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
         }
         class UnsignedShiftRightExpression extends sun.tools.tree.BinaryShiftExpression {
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression)
             eval<T>(...args: any[]): any
             simplify(): sun.tools.tree.Expression
             codeOperation(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
         }
         class VarDeclarationStatement extends sun.tools.tree.Statement {
             field: sun.tools.tree.LocalMember
             expr: sun.tools.tree.Expression
             constructor(...args: any[])
             checkDeclaration(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: int, arg4: sun.tools.java.Type, arg5: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class WhileStatement extends sun.tools.tree.Statement {
             cond: sun.tools.tree.Expression
             body: sun.tools.tree.Statement
             public constructor(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Statement)
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream, arg1: int): void
         }
         class ConditionVars {
             vsTrue: sun.tools.tree.Vset
             vsFalse: sun.tools.tree.Vset
             constructor()
         }
         class UnaryExpression extends sun.tools.tree.Expression {
             right: sun.tools.tree.Expression
             constructor(arg0: int, arg1: long, arg2: sun.tools.java.Type, arg3: sun.tools.tree.Expression)
             public order(): sun.tools.tree.Expression
             selectType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: int): void
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public isConstant(): boolean
             eval<T>(...args: any[]): any
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             public print(arg0: java.io.PrintStream): void
         }
         class FieldUpdater implements sun.tools.java.Constants {
             public constructor(arg0: long, arg1: sun.tools.java.MemberDefinition, arg2: sun.tools.tree.Expression, arg3: sun.tools.java.MemberDefinition, arg4: sun.tools.java.MemberDefinition)
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context, arg3: boolean): int
             public startUpdate(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: boolean): void
             public finishUpdate(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: boolean): void
             public startAssign(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public finishAssign(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: boolean): void
         }
         class CheckContext extends sun.tools.tree.Context {
             public vsBreak: sun.tools.tree.Vset
             public vsContinue: sun.tools.tree.Vset
             public vsTryExit: sun.tools.tree.Vset
             constructor(arg0: sun.tools.tree.Context, arg1: sun.tools.tree.Statement)
         }
         class Statement extends sun.tools.tree.Node {
             public static DEAD_END: sun.tools.tree.Vset
             labels: sun.tools.java.Identifier[]
             public static empty: sun.tools.tree.Statement
             public static MAXINLINECOST: int
             constructor(arg0: int, arg1: long)
             public static insertStatement(arg0: sun.tools.tree.Statement, arg1: sun.tools.tree.Statement): sun.tools.tree.Statement
             public setLabel(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Expression): void
             public checkMethod(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             checkDeclaration(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: int, arg4: sun.tools.java.Type, arg5: java.util.Hashtable): sun.tools.tree.Vset
             protected checkLabel(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): void
             check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             checkBlockStatement(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             reach(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Vset): sun.tools.tree.Vset
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Statement
             public eliminate(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Statement): sun.tools.tree.Statement
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeFinally(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.tree.Context, arg4: sun.tools.java.Type): void
             public hasLabel(arg0: sun.tools.java.Identifier): boolean
             public firstConstructor(): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context, arg1: boolean): sun.tools.tree.Statement
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             printIndent(arg0: java.io.PrintStream, arg1: int): void
             print<T>(...args: any[]): any
         }
         class LocalMember extends sun.tools.java.MemberDefinition {
             number: int
             readcount: int
             writecount: int
             scopeNumber: int
             originalOfCopy: sun.tools.tree.LocalMember
             prev: sun.tools.tree.LocalMember
             public getScopeNumber(): int
             constructor(...args: any[])
             getMember(): sun.tools.java.MemberDefinition
             public isLocal(): boolean
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.LocalMember
             public getCurrentInlineCopy(arg0: sun.tools.tree.Context): sun.tools.tree.LocalMember
             public static copyArguments(arg0: sun.tools.tree.Context, arg1: sun.tools.java.MemberDefinition): sun.tools.tree.LocalMember[]
             public static doneWithArguments(arg0: sun.tools.tree.Context, arg1: sun.tools.tree.LocalMember[]): void
             public isInlineable(arg0: sun.tools.java.Environment, arg1: boolean): boolean
             public isUsed(): boolean
             getAccessVar(): sun.tools.tree.LocalMember
             setAccessVar(arg0: sun.tools.tree.LocalMember): void
             getAccessVarMember(): sun.tools.java.MemberDefinition
             setAccessVarMember(arg0: sun.tools.java.MemberDefinition): void
             public getValue(arg0: sun.tools.java.Environment): sun.tools.tree.Node
             public getNumber(arg0: sun.tools.tree.Context): int
         }
         class Expression extends sun.tools.tree.Node {
             type: sun.tools.java.Type
             constructor(arg0: int, arg1: long, arg2: sun.tools.java.Type)
             public getImplementation(): sun.tools.tree.Expression
             public getType(): sun.tools.java.Type
             precedence(): int
             public order(): sun.tools.tree.Expression
             public isConstant(): boolean
             public getValue(): java.lang.Object
             equals<T>(...args: any[]): any
             public isNull(): boolean
             public isNonNull(): boolean
             public equalsDefault(): boolean
             toType(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.java.Type
             fitsType<T>(...args: any[]): any
             public checkValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkInitializer(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: sun.tools.java.Type, arg4: java.util.Hashtable): sun.tools.tree.Vset
             public check(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public checkLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable): sun.tools.tree.Vset
             public getAssigner(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public getUpdater(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.FieldUpdater
             public checkAssignOp(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.Expression): sun.tools.tree.Vset
             public checkAmbigName(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: java.util.Hashtable, arg4: sun.tools.tree.UnaryExpression): sun.tools.tree.Vset
             checkCondition<T>(...args: any[]): any
             eval(): sun.tools.tree.Expression
             simplify(): sun.tools.tree.Expression
             public inline(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public inlineValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             protected inlineValueSB(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: java.lang.StringBuffer): java.lang.StringBuffer
             public inlineLHS(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public costInline(arg0: int, arg1: sun.tools.java.Environment, arg2: sun.tools.tree.Context): int
             codeBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.asm.Label, arg4: boolean): void
             public codeValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeLValue(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): int
             codeLoad(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeStore(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             ensureString(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             codeAppend(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.java.ClassDeclaration, arg4: boolean): void
             codeDup(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: int, arg4: int): void
             codeConversion(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: sun.tools.java.Type, arg4: sun.tools.java.Type): void
             public firstConstructor(): sun.tools.tree.Expression
             public copyInline(arg0: sun.tools.tree.Context): sun.tools.tree.Expression
             public print(arg0: java.io.PrintStream): void
         }
         class UplevelReference implements sun.tools.java.Constants {
             client: sun.tools.java.ClassDefinition
             target: sun.tools.tree.LocalMember
             localArgument: sun.tools.tree.LocalMember
             localField: sun.tools.java.MemberDefinition
             next: sun.tools.tree.UplevelReference
             public constructor(arg0: sun.tools.java.ClassDefinition, arg1: sun.tools.tree.LocalMember)
             public insertInto(arg0: sun.tools.tree.UplevelReference): sun.tools.tree.UplevelReference
             public isEarlierThan(arg0: sun.tools.tree.UplevelReference): boolean
             public getTarget(): sun.tools.tree.LocalMember
             public getLocalArgument(): sun.tools.tree.LocalMember
             getLocalField<T>(...args: any[]): any
             public getClient(): sun.tools.java.ClassDefinition
             public getNext(): sun.tools.tree.UplevelReference
             public isClientOuterField(): boolean
             public localArgumentAvailable(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): boolean
             public noteReference(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): void
             public makeLocalReference(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public makeFieldReference(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.tree.Expression
             public willCodeArguments(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): void
             public codeArguments(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: long, arg4: sun.tools.java.MemberDefinition): void
             public codeInitialization(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler, arg3: long, arg4: sun.tools.java.MemberDefinition): void
             toString<T>(...args: any[]): any
         }
         class Vset implements sun.tools.java.Constants {
             vset: long
             uset: long
             x: long[]
             static emptyX: long[]
             static fullX: long[]
             static VBITS: int
             static DEAD_END: sun.tools.tree.Vset
             public constructor()
             public copy(): sun.tools.tree.Vset
             public isDeadEnd(): boolean
             public isReallyDeadEnd(): boolean
             public clearDeadEnd(): sun.tools.tree.Vset
             public testVar(arg0: int): boolean
             public testVarUnassigned(arg0: int): boolean
             public addVar(arg0: int): sun.tools.tree.Vset
             public addVarUnassigned(arg0: int): sun.tools.tree.Vset
             public clearVar(arg0: int): sun.tools.tree.Vset
             public join(arg0: sun.tools.tree.Vset): sun.tools.tree.Vset
             public addDAandJoinDU(arg0: sun.tools.tree.Vset): sun.tools.tree.Vset
             public static firstDAandSecondDU(arg0: sun.tools.tree.Vset, arg1: sun.tools.tree.Vset): sun.tools.tree.Vset
             public removeAdditionalVars(arg0: int): sun.tools.tree.Vset
             public varLimit(): int
             toString<T>(...args: any[]): any
         }
         class Context implements sun.tools.java.Constants {
             prev: sun.tools.tree.Context
             node: sun.tools.tree.Node
             varNumber: int
             locals: sun.tools.tree.LocalMember
             classes: sun.tools.tree.LocalMember
             field: sun.tools.java.MemberDefinition
             scopeNumber: int
             frameNumber: int
             constructor(...args: any[])
             public declare(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.LocalMember): int
             public getLocalField(arg0: sun.tools.java.Identifier): sun.tools.tree.LocalMember
             public getScopeNumber(arg0: sun.tools.java.ClassDefinition): int
             public declareFieldNumber(arg0: sun.tools.java.MemberDefinition): int
             public getFieldNumber(arg0: sun.tools.java.MemberDefinition): int
             public getElement(arg0: int): sun.tools.java.MemberDefinition
             public getLocalClass(arg0: sun.tools.java.Identifier): sun.tools.tree.LocalMember
             getField<T>(...args: any[]): any
             public getApparentField(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.MemberDefinition
             public isInScope(arg0: sun.tools.tree.LocalMember): boolean
             public noteReference(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.LocalMember): sun.tools.tree.UplevelReference
             public makeReference(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.LocalMember): sun.tools.tree.Expression
             findOuterLink<T>(...args: any[]): any
             public static outerLinkExists(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDefinition, arg2: sun.tools.java.ClassDefinition): boolean
             public findScope(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDefinition): sun.tools.java.ClassDefinition
             resolveName(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.Identifier
             public getApparentClassName(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.Identifier
             public checkBackBranch(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Statement, arg2: sun.tools.tree.Vset, arg3: sun.tools.tree.Vset): void
             public canReach(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition): boolean
             public getLabelContext(arg0: sun.tools.java.Identifier): sun.tools.tree.Context
             public getBreakContext(arg0: sun.tools.java.Identifier): sun.tools.tree.Context
             public getContinueContext(arg0: sun.tools.java.Identifier): sun.tools.tree.Context
             public getReturnContext(): sun.tools.tree.CheckContext
             public getTryExitContext(): sun.tools.tree.CheckContext
             getInlineContext(): sun.tools.tree.Context
             getInlineMemberContext(arg0: sun.tools.java.MemberDefinition): sun.tools.tree.Context
             public removeAdditionalVars(arg0: sun.tools.tree.Vset): sun.tools.tree.Vset
             public getVarNumber(): int
             public getThisNumber(): int
             public static newEnvironment(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context): sun.tools.java.Environment
         }
         class Node implements sun.tools.java.Constants , java.lang.Cloneable {
             op: int
             where: long
             constructor(arg0: int, arg1: long)
             public getOp(): int
             public getWhere(): long
             public convert(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.java.Type, arg3: sun.tools.tree.Expression): sun.tools.tree.Expression
             public print(arg0: java.io.PrintStream): void
             public clone(): java.lang.Object
             toString<T>(...args: any[]): any
         }

      }
      namespace java {
         class ArrayType extends sun.tools.java.Type {
             elemType: sun.tools.java.Type
             constructor(arg0: java.lang.String, arg1: sun.tools.java.Type)
             public getElementType(): sun.tools.java.Type
             public getArrayDimension(): int
             public typeString(arg0: java.lang.String, arg1: boolean, arg2: boolean): java.lang.String
         }
         class BinaryCode implements sun.tools.java.Constants {
             maxStack: int
             maxLocals: int
             exceptionHandlers: sun.tools.java.BinaryExceptionHandler[]
             atts: sun.tools.java.BinaryAttribute
             cpool: sun.tools.java.BinaryConstantPool
             code: byte[]
             public constructor(arg0: byte[], arg1: sun.tools.java.BinaryConstantPool, arg2: sun.tools.java.Environment)
             public getExceptionHandlers(): sun.tools.java.BinaryExceptionHandler[]
             public getCode(): byte[]
             public getMaxStack(): int
             public getMaxLocals(): int
             public getAttributes(): sun.tools.java.BinaryAttribute
             public static load(arg0: sun.tools.java.BinaryMember, arg1: sun.tools.java.BinaryConstantPool, arg2: sun.tools.java.Environment): sun.tools.java.BinaryCode
         }
         class BinaryExceptionHandler {
             public startPC: int
             public endPC: int
             public handlerPC: int
             public exceptionClass: sun.tools.java.ClassDeclaration
             constructor(arg0: int, arg1: int, arg2: int, arg3: sun.tools.java.ClassDeclaration)
         }
         class BinaryMember extends sun.tools.java.MemberDefinition {
             value: sun.tools.tree.Expression
             atts: sun.tools.java.BinaryAttribute
             constructor(...args: any[])
             public isInlineable(arg0: sun.tools.java.Environment, arg1: boolean): boolean
             public getArguments(): java.util.Vector
             public getExceptions(arg0: sun.tools.java.Environment): sun.tools.java.ClassDeclaration[]
             public getDocumentation(): java.lang.String
             public isConstant(): boolean
             public getValue(arg0: sun.tools.java.Environment): sun.tools.tree.Node
             public getAttribute(arg0: sun.tools.java.Identifier): byte[]
             public deleteAttribute(arg0: sun.tools.java.Identifier): boolean
             public addAttribute(arg0: sun.tools.java.Identifier, arg1: byte[], arg2: sun.tools.java.Environment): void
         }
         class ClassType extends sun.tools.java.Type {
             className: sun.tools.java.Identifier
             constructor(arg0: java.lang.String, arg1: sun.tools.java.Identifier)
             public getClassName(): sun.tools.java.Identifier
             public typeString(arg0: java.lang.String, arg1: boolean, arg2: boolean): java.lang.String
         }
         class CompilerError extends java.lang.Error {
             e: java.lang.Throwable
             constructor(...args: any[])
             public printStackTrace(): void
         }
         class ImportEnvironment extends sun.tools.java.Environment {
             imports: sun.tools.java.Imports
             constructor(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Imports)
             public resolve(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
             public getImports(): sun.tools.java.Imports
         }
         class MethodType extends sun.tools.java.Type {
             returnType: sun.tools.java.Type
             argTypes: sun.tools.java.Type[]
             constructor(arg0: java.lang.String, arg1: sun.tools.java.Type, arg2: sun.tools.java.Type[])
             public getReturnType(): sun.tools.java.Type
             public getArgumentTypes(): sun.tools.java.Type[]
             public equalArguments(arg0: sun.tools.java.Type): boolean
             public stackSize(): int
             public typeString(arg0: java.lang.String, arg1: boolean, arg2: boolean): java.lang.String
         }
         class BinaryAttribute implements sun.tools.java.Constants {
             name: sun.tools.java.Identifier
             data: byte[]
             next: sun.tools.java.BinaryAttribute
             constructor(arg0: sun.tools.java.Identifier, arg1: byte[], arg2: sun.tools.java.BinaryAttribute)
             public static load(arg0: java.io.DataInputStream, arg1: sun.tools.java.BinaryConstantPool, arg2: int): sun.tools.java.BinaryAttribute
             static write(arg0: sun.tools.java.BinaryAttribute, arg1: java.io.DataOutputStream, arg2: sun.tools.java.BinaryConstantPool, arg3: sun.tools.java.Environment): void
             public getName(): sun.tools.java.Identifier
             public getData(): byte[]
             public getNextAttribute(): sun.tools.java.BinaryAttribute
         }
         class BinaryConstantPool implements sun.tools.java.Constants {
             indexHashObject: java.util.Hashtable
             indexHashAscii: java.util.Hashtable
             MoreStuff: java.util.Vector
             constructor(arg0: java.io.DataInputStream)
             public getInteger(arg0: int): int
             public getValue(arg0: int): java.lang.Object
             public getString(arg0: int): java.lang.String
             public getIdentifier(arg0: int): sun.tools.java.Identifier
             public getDeclarationFromName(arg0: sun.tools.java.Environment, arg1: int): sun.tools.java.ClassDeclaration
             public getDeclaration(arg0: sun.tools.java.Environment, arg1: int): sun.tools.java.ClassDeclaration
             public getType(arg0: int): sun.tools.java.Type
             public getConstantType(arg0: int): int
             public getConstant(arg0: int, arg1: sun.tools.java.Environment): java.lang.Object
             public getDependencies(arg0: sun.tools.java.Environment): java.util.Vector
             public indexObject(arg0: java.lang.Object, arg1: sun.tools.java.Environment): int
             public indexString(arg0: java.lang.String, arg1: sun.tools.java.Environment): int
             public createIndexHash(arg0: sun.tools.java.Environment): void
             public write(arg0: java.io.DataOutputStream, arg1: sun.tools.java.Environment): void
         }
         class BinaryClass extends sun.tools.java.ClassDefinition implements sun.tools.java.Constants {
             cpool: sun.tools.java.BinaryConstantPool
             atts: sun.tools.java.BinaryAttribute
             dependencies: java.util.Vector
             public constructor(arg0: java.lang.Object, arg1: sun.tools.java.ClassDeclaration, arg2: int, arg3: sun.tools.java.ClassDeclaration, arg4: sun.tools.java.ClassDeclaration[], arg5: java.util.Vector)
             protected basicCheck(arg0: sun.tools.java.Environment): void
             load<T>(...args: any[]): any
             loadNested<T>(...args: any[]): any
             public write(arg0: sun.tools.java.Environment, arg1: java.io.OutputStream): void
             public getDependencies(): java.util.Enumeration
             public addDependency(arg0: sun.tools.java.ClassDeclaration): void
             public getConstants(): sun.tools.java.BinaryConstantPool
             public getAttribute(arg0: sun.tools.java.Identifier): byte[]
         }
         class ScannerInputReader extends java.io.FilterReader implements sun.tools.java.Constants {
             env: sun.tools.java.Environment
             pos: long
             public constructor(arg0: sun.tools.java.Environment, arg1: java.io.InputStream)
             read<T>(...args: any[]): any
         }
         class SyntaxError extends java.lang.Exception {
             public constructor()
         }
         interface ParserActions {
             public packageDeclaration(arg0: long, arg1: sun.tools.java.IdentifierToken): void
             public importClass(arg0: long, arg1: sun.tools.java.IdentifierToken): void
             public importPackage(arg0: long, arg1: sun.tools.java.IdentifierToken): void
             public beginClass(arg0: long, arg1: java.lang.String, arg2: int, arg3: sun.tools.java.IdentifierToken, arg4: sun.tools.java.IdentifierToken, arg5: sun.tools.java.IdentifierToken[]): sun.tools.java.ClassDefinition
             public endClass(arg0: long, arg1: sun.tools.java.ClassDefinition): void
             public defineField(arg0: long, arg1: sun.tools.java.ClassDefinition, arg2: java.lang.String, arg3: int, arg4: sun.tools.java.Type, arg5: sun.tools.java.IdentifierToken, arg6: sun.tools.java.IdentifierToken[], arg7: sun.tools.java.IdentifierToken[], arg8: sun.tools.tree.Node): void
         }
         class Scanner implements sun.tools.java.Constants {
             public static OFFSETINC: long
             public static LINEINC: long
             public static EOF: int
             public env: sun.tools.java.Environment
             protected in: sun.tools.java.ScannerInputReader
             public scanComments: boolean
             public token: int
             public pos: long
             public prevPos: long
             protected ch: int
             public charValue: char
             public intValue: int
             public longValue: long
             public floatValue: float
             public doubleValue: double
             public stringValue: java.lang.String
             public idValue: sun.tools.java.Identifier
             public radix: int
             public docComment: java.lang.String
             constructor(...args: any[])
             protected useInputStream(arg0: java.io.InputStream): void
             public getEndPos(): long
             public getIdToken(): sun.tools.java.IdentifierToken
             public scan(): long
             protected xscan(): long
             public match(arg0: int, arg1: int): void
         }
         class Parser extends sun.tools.java.Scanner implements sun.tools.java.ParserActions , sun.tools.java.Constants {
             actions: sun.tools.java.ParserActions
             protected argIndex: int
             protected scanner: sun.tools.java.Scanner
             constructor(...args: any[])
             packageDeclaration<T>(...args: any[]): any
             importClass<T>(...args: any[]): any
             importPackage<T>(...args: any[]): any
             beginClass<T>(...args: any[]): any
             protected getCurrentClass(): sun.tools.java.ClassDefinition
             endClass<T>(...args: any[]): any
             defineField<T>(...args: any[]): any
             protected addArgument(arg0: sun.tools.tree.Node): void
             protected exprArgs(arg0: int): sun.tools.tree.Expression[]
             protected statArgs(arg0: int): sun.tools.tree.Statement[]
             protected expect(arg0: int): void
             protected parseTypeExpression(): sun.tools.tree.Expression
             protected parseMethodExpression(arg0: sun.tools.tree.Expression, arg1: sun.tools.java.Identifier): sun.tools.tree.Expression
             protected parseNewInstanceExpression(arg0: long, arg1: sun.tools.tree.Expression, arg2: sun.tools.tree.Expression): sun.tools.tree.Expression
             protected parseTerm(): sun.tools.tree.Expression
             protected parseExpression(): sun.tools.tree.Expression
             protected parseBinaryExpression(arg0: sun.tools.tree.Expression): sun.tools.tree.Expression
             protected recoverStatement(): boolean
             protected parseDeclaration(arg0: long, arg1: int, arg2: sun.tools.tree.Expression): sun.tools.tree.Statement
             protected topLevelExpression(arg0: sun.tools.tree.Expression): void
             protected parseStatement(): sun.tools.tree.Statement
             protected parseBlockStatement(): sun.tools.tree.Statement
             protected parseName(arg0: boolean): sun.tools.java.IdentifierToken
             protected parseIdentifier(arg0: boolean): sun.tools.java.Identifier
             protected parseType(): sun.tools.java.Type
             protected parseArrayBrackets(arg0: sun.tools.java.Type): sun.tools.java.Type
             protected parseModifiers(arg0: int): int
             protected parseField(): void
             protected recoverField(arg0: sun.tools.java.ClassDefinition): void
             protected parseClass(): void
             protected parseLocalClass(arg0: int): sun.tools.tree.Statement
             protected parseNamedClass(arg0: int, arg1: int, arg2: java.lang.String): sun.tools.java.ClassDefinition
             protected parseInheritance(arg0: java.util.Vector, arg1: java.util.Vector): void
             protected parseClassBody(arg0: sun.tools.java.IdentifierToken, arg1: int, arg2: int, arg3: java.lang.String, arg4: java.util.Vector, arg5: java.util.Vector, arg6: long): sun.tools.java.ClassDefinition
             protected recoverFile(): void
             public parseFile(): void
             public scan(): long
             public match(arg0: int, arg1: int): void
         }
         class ClassPathEntry {
             dir: java.io.File
             zip: java.util.zip.ZipFile
             subdirs: java.util.Hashtable
             constructor()
             getFiles(arg0: java.lang.String): java.lang.String[]
         }
         class AmbiguousClass extends sun.tools.java.ClassNotFound {
             public name1: sun.tools.java.Identifier
             public name2: sun.tools.java.Identifier
             public constructor(arg0: sun.tools.java.Identifier, arg1: sun.tools.java.Identifier)
         }
         class ClassFile {
             constructor(...args: any[])
             public isZipped(): boolean
             public getInputStream(): java.io.InputStream
             public exists(): boolean
             public isDirectory(): boolean
             public lastModified(): long
             public getPath(): java.lang.String
             public getName(): java.lang.String
             public getAbsoluteName(): java.lang.String
             public length(): long
             toString<T>(...args: any[]): any
         }
         class ClassPath {
             static dirSeparator: char
             pathstr: java.lang.String
             constructor(...args: any[])
             public getDirectory(arg0: java.lang.String): sun.tools.java.ClassFile
             public getFile(arg0: java.lang.String): sun.tools.java.ClassFile
             public getFiles(arg0: java.lang.String, arg1: java.lang.String): java.util.Enumeration
             public close(): void
             toString<T>(...args: any[]): any
         }
         class Imports implements sun.tools.java.Constants {
             currentPackage: sun.tools.java.Identifier
             currentPackageWhere: long
             classes: java.util.Hashtable
             packages: java.util.Vector
             singles: java.util.Vector
             protected checked: int
             public constructor(arg0: sun.tools.java.Environment)
             resolve<T>(...args: any[]): any
             public static importable(arg0: sun.tools.java.Identifier, arg1: sun.tools.java.Environment): boolean
             public forceResolve(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.Identifier
             addClass<T>(...args: any[]): any
             addPackage<T>(...args: any[]): any
             setCurrentPackage<T>(...args: any[]): any
             public getCurrentPackage(): sun.tools.java.Identifier
             public getImportedPackages(): java.util.List
             public getImportedClasses(): java.util.List
             public newEnvironment(arg0: sun.tools.java.Environment): sun.tools.java.Environment
         }
         class Package {
             sourcePath: sun.tools.java.ClassPath
             binaryPath: sun.tools.java.ClassPath
             pkg: java.lang.String
             constructor(...args: any[])
             public classExists(arg0: sun.tools.java.Identifier): boolean
             public exists(): boolean
             public getBinaryFile(arg0: sun.tools.java.Identifier): sun.tools.java.ClassFile
             getSourceFile<T>(...args: any[]): any
             public getSourceFiles(): java.util.Enumeration
             public getBinaryFiles(): java.util.Enumeration
             toString<T>(...args: any[]): any
         }
         class MethodSet {
             public constructor()
             public size(): int
             public add(arg0: sun.tools.java.MemberDefinition): void
             public replace(arg0: sun.tools.java.MemberDefinition): void
             public lookupSig(arg0: sun.tools.java.Identifier, arg1: sun.tools.java.Type): sun.tools.java.MemberDefinition
             public lookupName(arg0: sun.tools.java.Identifier): java.util.Iterator
             public iterator(): java.util.Iterator
             public freeze(): void
             public isFrozen(): boolean
             toString<T>(...args: any[]): any
             static access$000(arg0: sun.tools.java.MethodSet): java.util.Map
         }
         class MethodSet$1MethodIterator implements java.util.Iterator {
             hashIter: java.util.Iterator
             listIter: java.util.Iterator
             this$0: sun.tools.java.MethodSet
             constructor(arg0: sun.tools.java.MethodSet)
             public hasNext(): boolean
             public next(): java.lang.Object
             public remove(): void
         }
         class AmbiguousMember extends java.lang.Exception {
             public field1: sun.tools.java.MemberDefinition
             public field2: sun.tools.java.MemberDefinition
             public constructor(arg0: sun.tools.java.MemberDefinition, arg1: sun.tools.java.MemberDefinition)
         }
         class ClassNotFound extends java.lang.Exception {
             public name: sun.tools.java.Identifier
             public constructor(arg0: sun.tools.java.Identifier)
         }
         class Environment implements sun.tools.java.Constants {
             env: sun.tools.java.Environment
             encoding: java.lang.String
             source: java.lang.Object
             constructor(...args: any[])
             public isExemptPackage(arg0: sun.tools.java.Identifier): boolean
             getClassDeclaration<T>(...args: any[]): any
             getClassDefinition<T>(...args: any[]): any
             classExists<T>(...args: any[]): any
             public getPackage(arg0: sun.tools.java.Identifier): sun.tools.java.Package
             public loadDefinition(arg0: sun.tools.java.ClassDeclaration): void
             public getSource(): java.lang.Object
             resolve<T>(...args: any[]): any
             public resolveByName(arg0: long, arg1: sun.tools.java.ClassDefinition, arg2: sun.tools.java.Identifier): boolean
             public resolveExtendsByName(arg0: long, arg1: sun.tools.java.ClassDefinition, arg2: sun.tools.java.Identifier): boolean
             public getQualifiedClassDefinition(arg0: long, arg1: sun.tools.java.Identifier, arg2: sun.tools.java.ClassDefinition, arg3: boolean): sun.tools.java.ClassDefinition
             public resolveNames(arg0: sun.tools.java.ClassDefinition, arg1: sun.tools.java.Type, arg2: boolean): sun.tools.java.Type
             public resolveName(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
             public resolvePackageQualifiedName(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
             public getImports(): sun.tools.java.Imports
             public makeClassDefinition(arg0: sun.tools.java.Environment, arg1: long, arg2: sun.tools.java.IdentifierToken, arg3: java.lang.String, arg4: int, arg5: sun.tools.java.IdentifierToken, arg6: sun.tools.java.IdentifierToken[], arg7: sun.tools.java.ClassDefinition): sun.tools.java.ClassDefinition
             public makeMemberDefinition(arg0: sun.tools.java.Environment, arg1: long, arg2: sun.tools.java.ClassDefinition, arg3: java.lang.String, arg4: int, arg5: sun.tools.java.Type, arg6: sun.tools.java.Identifier, arg7: sun.tools.java.IdentifierToken[], arg8: sun.tools.java.IdentifierToken[], arg9: java.lang.Object): sun.tools.java.MemberDefinition
             public isApplicable(arg0: sun.tools.java.MemberDefinition, arg1: sun.tools.java.Type[]): boolean
             isMoreSpecific<T>(...args: any[]): any
             public implicitCast(arg0: sun.tools.java.Type, arg1: sun.tools.java.Type): boolean
             public explicitCast(arg0: sun.tools.java.Type, arg1: sun.tools.java.Type): boolean
             public getFlags(): int
             public debug_lines(): boolean
             public debug_vars(): boolean
             public debug_source(): boolean
             public opt(): boolean
             public opt_interclass(): boolean
             public verbose(): boolean
             public dump(): boolean
             public warnings(): boolean
             public dependencies(): boolean
             public print_dependencies(): boolean
             public deprecation(): boolean
             public version12(): boolean
             public strictdefault(): boolean
             public shutdown(): void
             error<T>(...args: any[]): any
             public output(arg0: java.lang.String): void
             public static debugOutput(arg0: java.lang.Object): void
             public setCharacterEncoding(arg0: java.lang.String): void
             public getCharacterEncoding(): java.lang.String
             public getMajorVersion(): short
             public getMinorVersion(): short
             public coverage(): boolean
             public covdata(): boolean
             public getcovFile(): java.io.File
             public dtEnter(arg0: java.lang.String): void
             public dtExit(arg0: java.lang.String): void
             public dtEvent(arg0: java.lang.String): void
             public dumpModifiers(): boolean
         }
         class Identifier implements sun.tools.java.Constants {
             static hash: java.util.Hashtable
             name: java.lang.String
             value: java.lang.Object
             typeObject: sun.tools.java.Type
             public static INNERCLASS_PREFIX: char
             getType(): int
             setType(arg0: int): void
             lookup<T>(...args: any[]): any
             public static lookupInner(arg0: sun.tools.java.Identifier, arg1: sun.tools.java.Identifier): sun.tools.java.Identifier
             toString<T>(...args: any[]): any
             public isQualified(): boolean
             public getQualifier(): sun.tools.java.Identifier
             public getName(): sun.tools.java.Identifier
             public isInner(): boolean
             public getFlatName(): sun.tools.java.Identifier
             public getTopName(): sun.tools.java.Identifier
             public getHead(): sun.tools.java.Identifier
             public getTail(): sun.tools.java.Identifier
             public hasAmbigPrefix(): boolean
             public addAmbigPrefix(): sun.tools.java.Identifier
             public removeAmbigPrefix(): sun.tools.java.Identifier
         }
         class ClassDeclaration implements sun.tools.java.Constants {
             status: int
             type: sun.tools.java.Type
             definition: sun.tools.java.ClassDefinition
             public constructor(arg0: sun.tools.java.Identifier)
             public getStatus(): int
             public getName(): sun.tools.java.Identifier
             public getType(): sun.tools.java.Type
             public isDefined(): boolean
             getClassDefinition<T>(...args: any[]): any
             public getClassDefinitionNoCheck(arg0: sun.tools.java.Environment): sun.tools.java.ClassDefinition
             public setDefinition(arg0: sun.tools.java.ClassDefinition, arg1: int): void
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
             toString<T>(...args: any[]): any
         }
         class IdentifierToken {
             where: long
             modifiers: int
             id: sun.tools.java.Identifier
             constructor(...args: any[])
             getWhere<T>(...args: any[]): any
             public getName(): sun.tools.java.Identifier
             public getModifiers(): int
             toString<T>(...args: any[]): any
         }
         class Type implements sun.tools.java.Constants {
             protected typeCode: int
             protected typeSig: java.lang.String
             public static noArgs: sun.tools.java.Type[]
             public static tError: sun.tools.java.Type
             public static tPackage: sun.tools.java.Type
             public static tNull: sun.tools.java.Type
             public static tVoid: sun.tools.java.Type
             public static tBoolean: sun.tools.java.Type
             public static tByte: sun.tools.java.Type
             public static tChar: sun.tools.java.Type
             public static tShort: sun.tools.java.Type
             public static tInt: sun.tools.java.Type
             public static tFloat: sun.tools.java.Type
             public static tLong: sun.tools.java.Type
             public static tDouble: sun.tools.java.Type
             public static tObject: sun.tools.java.Type
             public static tClassDesc: sun.tools.java.Type
             public static tString: sun.tools.java.Type
             public static tCloneable: sun.tools.java.Type
             public static tSerializable: sun.tools.java.Type
             protected constructor(arg0: int, arg1: java.lang.String)
             public getTypeSignature(): java.lang.String
             public getTypeCode(): int
             public getTypeMask(): int
             public isType(arg0: int): boolean
             public isVoidArray(): boolean
             public inMask(arg0: int): boolean
             public static tArray(arg0: sun.tools.java.Type): sun.tools.java.Type
             public getElementType(): sun.tools.java.Type
             public getArrayDimension(): int
             public static tClass(arg0: sun.tools.java.Identifier): sun.tools.java.Type
             public getClassName(): sun.tools.java.Identifier
             public static mangleInnerType(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
             static changeClassName(arg0: sun.tools.java.Identifier, arg1: sun.tools.java.Identifier): void
             tMethod<T>(...args: any[]): any
             public getReturnType(): sun.tools.java.Type
             public getArgumentTypes(): sun.tools.java.Type[]
             public static tType(arg0: java.lang.String): sun.tools.java.Type
             public equalArguments(arg0: sun.tools.java.Type): boolean
             public stackSize(): int
             public getTypeCodeOffset(): int
             typeString<T>(...args: any[]): any
             toString<T>(...args: any[]): any
         }
         class ClassDefinition implements sun.tools.java.Constants {
             protected source: java.lang.Object
             protected where: long
             protected modifiers: int
             protected localName: sun.tools.java.Identifier
             protected declaration: sun.tools.java.ClassDeclaration
             protected superClassId: sun.tools.java.IdentifierToken
             protected interfaceIds: sun.tools.java.IdentifierToken[]
             protected superClass: sun.tools.java.ClassDeclaration
             protected interfaces: sun.tools.java.ClassDeclaration[]
             protected outerClass: sun.tools.java.ClassDefinition
             protected outerMember: sun.tools.java.MemberDefinition
             protected innerClassMember: sun.tools.java.MemberDefinition
             protected firstMember: sun.tools.java.MemberDefinition
             protected lastMember: sun.tools.java.MemberDefinition
             protected resolved: boolean
             protected documentation: java.lang.String
             protected error: boolean
             protected nestError: boolean
             protected references: sun.tools.tree.UplevelReference
             protected referencesFrozen: boolean
             protected classContext: sun.tools.tree.Context
             protected supersCheckStarted: boolean
             allMethods: sun.tools.java.MethodSet
             protected static doInheritanceChecks: boolean
             public getClassContext(): sun.tools.tree.Context
             protected constructor(arg0: java.lang.Object, arg1: long, arg2: sun.tools.java.ClassDeclaration, arg3: int, arg4: sun.tools.java.IdentifierToken, arg5: sun.tools.java.IdentifierToken[])
             public getSource(): java.lang.Object
             public getError(): boolean
             public setError(): void
             public getNestError(): boolean
             public setNestError(): void
             public getWhere(): long
             public getClassDeclaration(): sun.tools.java.ClassDeclaration
             public getModifiers(): int
             public subModifiers(arg0: int): void
             public addModifiers(arg0: int): void
             getSuperClass<T>(...args: any[]): any
             public getInterfaces(): sun.tools.java.ClassDeclaration[]
             public getOuterClass(): sun.tools.java.ClassDefinition
             protected setOuterClass(arg0: sun.tools.java.ClassDefinition): void
             protected setOuterMember(arg0: sun.tools.java.MemberDefinition): void
             public isInnerClass(): boolean
             public isMember(): boolean
             public isTopLevel(): boolean
             public isInsideLocal(): boolean
             public isInsideLocalOrAnonymous(): boolean
             public getLocalName(): sun.tools.java.Identifier
             public setLocalName(arg0: sun.tools.java.Identifier): void
             public getInnerClassMember(): sun.tools.java.MemberDefinition
             public findOuterMember(): sun.tools.java.MemberDefinition
             public isStatic(): boolean
             public getTopClass(): sun.tools.java.ClassDefinition
             public getFirstMember(): sun.tools.java.MemberDefinition
             public getFirstMatch(arg0: sun.tools.java.Identifier): sun.tools.java.MemberDefinition
             public getName(): sun.tools.java.Identifier
             public getType(): sun.tools.java.Type
             public getDocumentation(): java.lang.String
             public static containsDeprecated(arg0: java.lang.String): boolean
             inSamePackage<T>(...args: any[]): any
             public isInterface(): boolean
             public isClass(): boolean
             public isPublic(): boolean
             public isPrivate(): boolean
             public isProtected(): boolean
             public isPackagePrivate(): boolean
             public isFinal(): boolean
             public isAbstract(): boolean
             public isSynthetic(): boolean
             public isDeprecated(): boolean
             public isAnonymous(): boolean
             public isLocal(): boolean
             public hasConstructor(): boolean
             public mustBeAbstract(arg0: sun.tools.java.Environment): boolean
             public superClassOf(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDeclaration): boolean
             public enclosingClassOf(arg0: sun.tools.java.ClassDefinition): boolean
             public subClassOf(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDeclaration): boolean
             public implementedBy(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDeclaration): boolean
             public couldImplement(arg0: sun.tools.java.ClassDefinition): boolean
             public extendsCanAccess(arg0: sun.tools.java.Environment, arg1: sun.tools.java.ClassDeclaration): boolean
             canAccess<T>(...args: any[]): any
             permitInlinedAccess<T>(...args: any[]): any
             public protectedAccess(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition, arg2: sun.tools.java.Type): boolean
             public getAccessMember(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.java.MemberDefinition, arg3: boolean): sun.tools.java.MemberDefinition
             public getUpdateMember(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.java.MemberDefinition, arg3: boolean): sun.tools.java.MemberDefinition
             public getVariable(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier, arg2: sun.tools.java.ClassDefinition): sun.tools.java.MemberDefinition
             public reportDeprecated(arg0: sun.tools.java.Environment): boolean
             public noteUsedBy(arg0: sun.tools.java.ClassDefinition, arg1: long, arg2: sun.tools.java.Environment): void
             public getInnerClass(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.MemberDefinition
             matchMethod<T>(...args: any[]): any
             public matchAnonConstructor(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier, arg2: sun.tools.java.Type[]): sun.tools.java.MemberDefinition
             public findMethod(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier, arg2: sun.tools.java.Type): sun.tools.java.MemberDefinition
             protected basicCheck(arg0: sun.tools.java.Environment): void
             public check(arg0: sun.tools.java.Environment): void
             public checkLocalClass(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: sun.tools.java.ClassDefinition, arg4: sun.tools.tree.Expression[], arg5: sun.tools.java.Type[]): sun.tools.tree.Vset
             protected getPermanentlyAbstractMethods(): java.util.Iterator
             public static turnOffInheritanceChecks(): void
             protected collectInheritedMethods(arg0: sun.tools.java.Environment): void
             getMethods<T>(...args: any[]): any
             protected addMirandaMethods(arg0: sun.tools.java.Environment, arg1: java.util.Iterator): void
             public inlineLocalClass(arg0: sun.tools.java.Environment): void
             public resolveTypeStructure(arg0: sun.tools.java.Environment): void
             public resolveName(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.Identifier
             public resolveInnerClass(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.Identifier
             public innerClassExists(arg0: sun.tools.java.Identifier): boolean
             public findAnyMethod(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier): sun.tools.java.MemberDefinition
             public diagnoseMismatch(arg0: sun.tools.java.Environment, arg1: sun.tools.java.Identifier, arg2: sun.tools.java.Type[], arg3: int, arg4: sun.tools.java.Type[]): int
             addMember<T>(...args: any[]): any
             public getReference(arg0: sun.tools.tree.LocalMember): sun.tools.tree.UplevelReference
             protected addReference(arg0: sun.tools.tree.LocalMember): sun.tools.tree.UplevelReference
             public getReferences(): sun.tools.tree.UplevelReference
             public getReferencesFrozen(): sun.tools.tree.UplevelReference
             public referencesMustNotBeFrozen(): void
             public getClassLiteralLookup(arg0: long): sun.tools.java.MemberDefinition
             public addDependency(arg0: sun.tools.java.ClassDeclaration): void
             public getLocalClass(arg0: java.lang.String): sun.tools.java.ClassDefinition
             public addLocalClass(arg0: sun.tools.java.ClassDefinition, arg1: java.lang.String): void
             public print(arg0: java.io.PrintStream): void
             toString<T>(...args: any[]): any
             public cleanup(arg0: sun.tools.java.Environment): void
         }
         interface RuntimeConstants {
             public static SIGC_VOID: char
             public static SIG_VOID: java.lang.String
             public static SIGC_BOOLEAN: char
             public static SIG_BOOLEAN: java.lang.String
             public static SIGC_BYTE: char
             public static SIG_BYTE: java.lang.String
             public static SIGC_CHAR: char
             public static SIG_CHAR: java.lang.String
             public static SIGC_SHORT: char
             public static SIG_SHORT: java.lang.String
             public static SIGC_INT: char
             public static SIG_INT: java.lang.String
             public static SIGC_LONG: char
             public static SIG_LONG: java.lang.String
             public static SIGC_FLOAT: char
             public static SIG_FLOAT: java.lang.String
             public static SIGC_DOUBLE: char
             public static SIG_DOUBLE: java.lang.String
             public static SIGC_ARRAY: char
             public static SIG_ARRAY: java.lang.String
             public static SIGC_CLASS: char
             public static SIG_CLASS: java.lang.String
             public static SIGC_METHOD: char
             public static SIG_METHOD: java.lang.String
             public static SIGC_ENDCLASS: char
             public static SIG_ENDCLASS: java.lang.String
             public static SIGC_ENDMETHOD: char
             public static SIG_ENDMETHOD: java.lang.String
             public static SIGC_PACKAGE: char
             public static SIG_PACKAGE: java.lang.String
             public static JAVA_MAGIC: int
             public static JAVA_MIN_SUPPORTED_VERSION: int
             public static JAVA_MAX_SUPPORTED_VERSION: int
             public static JAVA_MAX_SUPPORTED_MINOR_VERSION: int
             public static JAVA_DEFAULT_VERSION: int
             public static JAVA_DEFAULT_MINOR_VERSION: int
             public static CONSTANT_UTF8: int
             public static CONSTANT_UNICODE: int
             public static CONSTANT_INTEGER: int
             public static CONSTANT_FLOAT: int
             public static CONSTANT_LONG: int
             public static CONSTANT_DOUBLE: int
             public static CONSTANT_CLASS: int
             public static CONSTANT_STRING: int
             public static CONSTANT_FIELD: int
             public static CONSTANT_METHOD: int
             public static CONSTANT_INTERFACEMETHOD: int
             public static CONSTANT_NAMEANDTYPE: int
             public static CONSTANT_METHODHANDLE: int
             public static CONSTANT_METHODTYPE: int
             public static CONSTANT_INVOKEDYNAMIC: int
             public static ACC_PUBLIC: int
             public static ACC_PRIVATE: int
             public static ACC_PROTECTED: int
             public static ACC_STATIC: int
             public static ACC_FINAL: int
             public static ACC_SYNCHRONIZED: int
             public static ACC_VOLATILE: int
             public static ACC_TRANSIENT: int
             public static ACC_NATIVE: int
             public static ACC_INTERFACE: int
             public static ACC_ABSTRACT: int
             public static ACC_SUPER: int
             public static ACC_STRICT: int
             public static T_CLASS: int
             public static T_BOOLEAN: int
             public static T_CHAR: int
             public static T_FLOAT: int
             public static T_DOUBLE: int
             public static T_BYTE: int
             public static T_SHORT: int
             public static T_INT: int
             public static T_LONG: int
             public static opc_try: int
             public static opc_dead: int
             public static opc_label: int
             public static opc_nop: int
             public static opc_aconst_null: int
             public static opc_iconst_m1: int
             public static opc_iconst_0: int
             public static opc_iconst_1: int
             public static opc_iconst_2: int
             public static opc_iconst_3: int
             public static opc_iconst_4: int
             public static opc_iconst_5: int
             public static opc_lconst_0: int
             public static opc_lconst_1: int
             public static opc_fconst_0: int
             public static opc_fconst_1: int
             public static opc_fconst_2: int
             public static opc_dconst_0: int
             public static opc_dconst_1: int
             public static opc_bipush: int
             public static opc_sipush: int
             public static opc_ldc: int
             public static opc_ldc_w: int
             public static opc_ldc2_w: int
             public static opc_iload: int
             public static opc_lload: int
             public static opc_fload: int
             public static opc_dload: int
             public static opc_aload: int
             public static opc_iload_0: int
             public static opc_iload_1: int
             public static opc_iload_2: int
             public static opc_iload_3: int
             public static opc_lload_0: int
             public static opc_lload_1: int
             public static opc_lload_2: int
             public static opc_lload_3: int
             public static opc_fload_0: int
             public static opc_fload_1: int
             public static opc_fload_2: int
             public static opc_fload_3: int
             public static opc_dload_0: int
             public static opc_dload_1: int
             public static opc_dload_2: int
             public static opc_dload_3: int
             public static opc_aload_0: int
             public static opc_aload_1: int
             public static opc_aload_2: int
             public static opc_aload_3: int
             public static opc_iaload: int
             public static opc_laload: int
             public static opc_faload: int
             public static opc_daload: int
             public static opc_aaload: int
             public static opc_baload: int
             public static opc_caload: int
             public static opc_saload: int
             public static opc_istore: int
             public static opc_lstore: int
             public static opc_fstore: int
             public static opc_dstore: int
             public static opc_astore: int
             public static opc_istore_0: int
             public static opc_istore_1: int
             public static opc_istore_2: int
             public static opc_istore_3: int
             public static opc_lstore_0: int
             public static opc_lstore_1: int
             public static opc_lstore_2: int
             public static opc_lstore_3: int
             public static opc_fstore_0: int
             public static opc_fstore_1: int
             public static opc_fstore_2: int
             public static opc_fstore_3: int
             public static opc_dstore_0: int
             public static opc_dstore_1: int
             public static opc_dstore_2: int
             public static opc_dstore_3: int
             public static opc_astore_0: int
             public static opc_astore_1: int
             public static opc_astore_2: int
             public static opc_astore_3: int
             public static opc_iastore: int
             public static opc_lastore: int
             public static opc_fastore: int
             public static opc_dastore: int
             public static opc_aastore: int
             public static opc_bastore: int
             public static opc_castore: int
             public static opc_sastore: int
             public static opc_pop: int
             public static opc_pop2: int
             public static opc_dup: int
             public static opc_dup_x1: int
             public static opc_dup_x2: int
             public static opc_dup2: int
             public static opc_dup2_x1: int
             public static opc_dup2_x2: int
             public static opc_swap: int
             public static opc_iadd: int
             public static opc_ladd: int
             public static opc_fadd: int
             public static opc_dadd: int
             public static opc_isub: int
             public static opc_lsub: int
             public static opc_fsub: int
             public static opc_dsub: int
             public static opc_imul: int
             public static opc_lmul: int
             public static opc_fmul: int
             public static opc_dmul: int
             public static opc_idiv: int
             public static opc_ldiv: int
             public static opc_fdiv: int
             public static opc_ddiv: int
             public static opc_irem: int
             public static opc_lrem: int
             public static opc_frem: int
             public static opc_drem: int
             public static opc_ineg: int
             public static opc_lneg: int
             public static opc_fneg: int
             public static opc_dneg: int
             public static opc_ishl: int
             public static opc_lshl: int
             public static opc_ishr: int
             public static opc_lshr: int
             public static opc_iushr: int
             public static opc_lushr: int
             public static opc_iand: int
             public static opc_land: int
             public static opc_ior: int
             public static opc_lor: int
             public static opc_ixor: int
             public static opc_lxor: int
             public static opc_iinc: int
             public static opc_i2l: int
             public static opc_i2f: int
             public static opc_i2d: int
             public static opc_l2i: int
             public static opc_l2f: int
             public static opc_l2d: int
             public static opc_f2i: int
             public static opc_f2l: int
             public static opc_f2d: int
             public static opc_d2i: int
             public static opc_d2l: int
             public static opc_d2f: int
             public static opc_i2b: int
             public static opc_i2c: int
             public static opc_i2s: int
             public static opc_lcmp: int
             public static opc_fcmpl: int
             public static opc_fcmpg: int
             public static opc_dcmpl: int
             public static opc_dcmpg: int
             public static opc_ifeq: int
             public static opc_ifne: int
             public static opc_iflt: int
             public static opc_ifge: int
             public static opc_ifgt: int
             public static opc_ifle: int
             public static opc_if_icmpeq: int
             public static opc_if_icmpne: int
             public static opc_if_icmplt: int
             public static opc_if_icmpge: int
             public static opc_if_icmpgt: int
             public static opc_if_icmple: int
             public static opc_if_acmpeq: int
             public static opc_if_acmpne: int
             public static opc_goto: int
             public static opc_jsr: int
             public static opc_ret: int
             public static opc_tableswitch: int
             public static opc_lookupswitch: int
             public static opc_ireturn: int
             public static opc_lreturn: int
             public static opc_freturn: int
             public static opc_dreturn: int
             public static opc_areturn: int
             public static opc_return: int
             public static opc_getstatic: int
             public static opc_putstatic: int
             public static opc_getfield: int
             public static opc_putfield: int
             public static opc_invokevirtual: int
             public static opc_invokespecial: int
             public static opc_invokestatic: int
             public static opc_invokeinterface: int
             public static opc_invokedynamic: int
             public static opc_new: int
             public static opc_newarray: int
             public static opc_anewarray: int
             public static opc_arraylength: int
             public static opc_athrow: int
             public static opc_checkcast: int
             public static opc_instanceof: int
             public static opc_monitorenter: int
             public static opc_monitorexit: int
             public static opc_wide: int
             public static opc_multianewarray: int
             public static opc_ifnull: int
             public static opc_ifnonnull: int
             public static opc_goto_w: int
             public static opc_jsr_w: int
             public static opc_breakpoint: int
             public static opcNames: java.lang.String[]
             public static opcLengths: int[]
         }
         interface Constants extends sun.tools.java.RuntimeConstants {
             public static tracing: boolean
             public static idAppend: sun.tools.java.Identifier
             public static idClassInit: sun.tools.java.Identifier
             public static idCode: sun.tools.java.Identifier
             public static idInit: sun.tools.java.Identifier
             public static idLength: sun.tools.java.Identifier
             public static idNull: sun.tools.java.Identifier
             public static idStar: sun.tools.java.Identifier
             public static idSuper: sun.tools.java.Identifier
             public static idThis: sun.tools.java.Identifier
             public static idClass: sun.tools.java.Identifier
             public static idToString: sun.tools.java.Identifier
             public static idValueOf: sun.tools.java.Identifier
             public static idNew: sun.tools.java.Identifier
             public static idGetClass: sun.tools.java.Identifier
             public static idTYPE: sun.tools.java.Identifier
             public static idFinallyReturnValue: sun.tools.java.Identifier
             public static idJavaLang: sun.tools.java.Identifier
             public static idJavaLangCloneable: sun.tools.java.Identifier
             public static idJavaLangError: sun.tools.java.Identifier
             public static idJavaLangException: sun.tools.java.Identifier
             public static idJavaLangObject: sun.tools.java.Identifier
             public static idJavaLangClass: sun.tools.java.Identifier
             public static idJavaLangRuntimeException: sun.tools.java.Identifier
             public static idJavaLangString: sun.tools.java.Identifier
             public static idJavaLangStringBuffer: sun.tools.java.Identifier
             public static idJavaLangThrowable: sun.tools.java.Identifier
             public static idJavaIoSerializable: sun.tools.java.Identifier
             public static idConstantValue: sun.tools.java.Identifier
             public static idLocalVariableTable: sun.tools.java.Identifier
             public static idLineNumberTable: sun.tools.java.Identifier
             public static idCoverageTable: sun.tools.java.Identifier
             public static idSourceFile: sun.tools.java.Identifier
             public static idDocumentation: sun.tools.java.Identifier
             public static idDeprecated: sun.tools.java.Identifier
             public static idSynthetic: sun.tools.java.Identifier
             public static idExceptions: sun.tools.java.Identifier
             public static idInnerClasses: sun.tools.java.Identifier
             public static idClone: sun.tools.java.Identifier
             public static SIGC_INNERCLASS: char
             public static SIG_INNERCLASS: java.lang.String
             public static prefixThis: java.lang.String
             public static prefixVal: java.lang.String
             public static prefixLoc: java.lang.String
             public static prefixAccess: java.lang.String
             public static prefixClass: java.lang.String
             public static prefixArray: java.lang.String
             public static F_VERBOSE: int
             public static F_DUMP: int
             public static F_WARNINGS: int
             public static F_DEBUG_LINES: int
             public static F_DEBUG_VARS: int
             public static F_DEBUG_SOURCE: int
             public static F_OPT: int
             public static F_OPT_INTERCLASS: int
             public static F_DEPENDENCIES: int
             public static F_COVERAGE: int
             public static F_COVDATA: int
             public static F_DEPRECATION: int
             public static F_PRINT_DEPENDENCIES: int
             public static F_VERSION12: int
             public static F_ERRORSREPORTED: int
             public static F_STRICTDEFAULT: int
             public static M_PUBLIC: int
             public static M_PRIVATE: int
             public static M_PROTECTED: int
             public static M_STATIC: int
             public static M_TRANSIENT: int
             public static M_SYNCHRONIZED: int
             public static M_ABSTRACT: int
             public static M_NATIVE: int
             public static M_FINAL: int
             public static M_VOLATILE: int
             public static M_INTERFACE: int
             public static M_ANONYMOUS: int
             public static M_LOCAL: int
             public static M_DEPRECATED: int
             public static M_SYNTHETIC: int
             public static M_INLINEABLE: int
             public static M_STRICTFP: int
             public static paraDeprecated: java.lang.String
             public static MM_CLASS: int
             public static MM_MEMBER: int
             public static MM_FIELD: int
             public static MM_METHOD: int
             public static ACCM_CLASS: int
             public static ACCM_MEMBER: int
             public static ACCM_INNERCLASS: int
             public static ACCM_FIELD: int
             public static ACCM_METHOD: int
             public static TC_BOOLEAN: int
             public static TC_BYTE: int
             public static TC_CHAR: int
             public static TC_SHORT: int
             public static TC_INT: int
             public static TC_LONG: int
             public static TC_FLOAT: int
             public static TC_DOUBLE: int
             public static TC_NULL: int
             public static TC_ARRAY: int
             public static TC_CLASS: int
             public static TC_VOID: int
             public static TC_METHOD: int
             public static TC_ERROR: int
             public static CT_FIRST_KIND: int
             public static CT_METHOD: int
             public static CT_FIKT_METHOD: int
             public static CT_BLOCK: int
             public static CT_FIKT_RET: int
             public static CT_CASE: int
             public static CT_SWITH_WO_DEF: int
             public static CT_BRANCH_TRUE: int
             public static CT_BRANCH_FALSE: int
             public static CT_LAST_KIND: int
             public static TM_NULL: int
             public static TM_VOID: int
             public static TM_BOOLEAN: int
             public static TM_BYTE: int
             public static TM_CHAR: int
             public static TM_SHORT: int
             public static TM_INT: int
             public static TM_LONG: int
             public static TM_FLOAT: int
             public static TM_DOUBLE: int
             public static TM_ARRAY: int
             public static TM_CLASS: int
             public static TM_METHOD: int
             public static TM_ERROR: int
             public static TM_INT32: int
             public static TM_NUM32: int
             public static TM_NUM64: int
             public static TM_INTEGER: int
             public static TM_REAL: int
             public static TM_NUMBER: int
             public static TM_REFERENCE: int
             public static CS_UNDEFINED: int
             public static CS_UNDECIDED: int
             public static CS_BINARY: int
             public static CS_SOURCE: int
             public static CS_PARSED: int
             public static CS_CHECKED: int
             public static CS_COMPILED: int
             public static CS_NOTFOUND: int
             public static ATT_ALL: int
             public static ATT_CODE: int
             public static ATT_ALLCLASSES: int
             public static WHEREOFFSETBITS: int
             public static MAXFILESIZE: long
             public static MAXLINENUMBER: long
             public static COMMA: int
             public static ASSIGN: int
             public static ASGMUL: int
             public static ASGDIV: int
             public static ASGREM: int
             public static ASGADD: int
             public static ASGSUB: int
             public static ASGLSHIFT: int
             public static ASGRSHIFT: int
             public static ASGURSHIFT: int
             public static ASGBITAND: int
             public static ASGBITOR: int
             public static ASGBITXOR: int
             public static COND: int
             public static OR: int
             public static AND: int
             public static BITOR: int
             public static BITXOR: int
             public static BITAND: int
             public static NE: int
             public static EQ: int
             public static GE: int
             public static GT: int
             public static LE: int
             public static LT: int
             public static INSTANCEOF: int
             public static LSHIFT: int
             public static RSHIFT: int
             public static URSHIFT: int
             public static ADD: int
             public static SUB: int
             public static DIV: int
             public static REM: int
             public static MUL: int
             public static CAST: int
             public static POS: int
             public static NEG: int
             public static NOT: int
             public static BITNOT: int
             public static PREINC: int
             public static PREDEC: int
             public static NEWARRAY: int
             public static NEWINSTANCE: int
             public static NEWFROMNAME: int
             public static POSTINC: int
             public static POSTDEC: int
             public static FIELD: int
             public static METHOD: int
             public static ARRAYACCESS: int
             public static NEW: int
             public static INC: int
             public static DEC: int
             public static CONVERT: int
             public static EXPR: int
             public static ARRAY: int
             public static GOTO: int
             public static IDENT: int
             public static BOOLEANVAL: int
             public static BYTEVAL: int
             public static CHARVAL: int
             public static SHORTVAL: int
             public static INTVAL: int
             public static LONGVAL: int
             public static FLOATVAL: int
             public static DOUBLEVAL: int
             public static STRINGVAL: int
             public static BYTE: int
             public static CHAR: int
             public static SHORT: int
             public static INT: int
             public static LONG: int
             public static FLOAT: int
             public static DOUBLE: int
             public static VOID: int
             public static BOOLEAN: int
             public static TRUE: int
             public static FALSE: int
             public static THIS: int
             public static SUPER: int
             public static NULL: int
             public static IF: int
             public static ELSE: int
             public static FOR: int
             public static WHILE: int
             public static DO: int
             public static SWITCH: int
             public static CASE: int
             public static DEFAULT: int
             public static BREAK: int
             public static CONTINUE: int
             public static RETURN: int
             public static TRY: int
             public static CATCH: int
             public static FINALLY: int
             public static THROW: int
             public static STAT: int
             public static EXPRESSION: int
             public static DECLARATION: int
             public static VARDECLARATION: int
             public static IMPORT: int
             public static CLASS: int
             public static EXTENDS: int
             public static IMPLEMENTS: int
             public static INTERFACE: int
             public static PACKAGE: int
             public static PRIVATE: int
             public static PUBLIC: int
             public static PROTECTED: int
             public static CONST: int
             public static STATIC: int
             public static TRANSIENT: int
             public static SYNCHRONIZED: int
             public static NATIVE: int
             public static FINAL: int
             public static VOLATILE: int
             public static ABSTRACT: int
             public static STRICTFP: int
             public static SEMICOLON: int
             public static COLON: int
             public static QUESTIONMARK: int
             public static LBRACE: int
             public static RBRACE: int
             public static LPAREN: int
             public static RPAREN: int
             public static LSQBRACKET: int
             public static RSQBRACKET: int
             public static THROWS: int
             public static ERROR: int
             public static COMMENT: int
             public static TYPE: int
             public static LENGTH: int
             public static INLINERETURN: int
             public static INLINEMETHOD: int
             public static INLINENEWINSTANCE: int
             public static opPrecedence: int[]
             public static opNames: java.lang.String[]
         }
         class MemberDefinition implements sun.tools.java.Constants {
             protected where: long
             protected modifiers: int
             protected type: sun.tools.java.Type
             protected documentation: java.lang.String
             protected expIds: sun.tools.java.IdentifierToken[]
             protected exp: sun.tools.java.ClassDeclaration[]
             protected value: sun.tools.tree.Node
             protected clazz: sun.tools.java.ClassDefinition
             protected name: sun.tools.java.Identifier
             protected innerClass: sun.tools.java.ClassDefinition
             protected nextMember: sun.tools.java.MemberDefinition
             protected nextMatch: sun.tools.java.MemberDefinition
             protected accessPeer: sun.tools.java.MemberDefinition
             protected superAccessMethod: boolean
             static PUBLIC_ACCESS: int
             static PROTECTED_ACCESS: int
             static PACKAGE_ACCESS: int
             static PRIVATE_ACCESS: int
             constructor(...args: any[])
             public static makeProxyMember(arg0: sun.tools.java.MemberDefinition, arg1: sun.tools.java.ClassDefinition, arg2: sun.tools.java.Environment): sun.tools.java.MemberDefinition
             public getWhere(): long
             public getClassDeclaration(): sun.tools.java.ClassDeclaration
             public resolveTypeStructure(arg0: sun.tools.java.Environment): void
             public getDefiningClassDeclaration(): sun.tools.java.ClassDeclaration
             public getClassDefinition(): sun.tools.java.ClassDefinition
             public getTopClass(): sun.tools.java.ClassDefinition
             public getModifiers(): int
             public subModifiers(arg0: int): void
             public addModifiers(arg0: int): void
             public getType(): sun.tools.java.Type
             public getName(): sun.tools.java.Identifier
             public getArguments(): java.util.Vector
             public getExceptions(arg0: sun.tools.java.Environment): sun.tools.java.ClassDeclaration[]
             public getExceptionIds(): sun.tools.java.IdentifierToken[]
             public getInnerClass(): sun.tools.java.ClassDefinition
             public isUplevelValue(): boolean
             public isAccessMethod(): boolean
             public getAccessMethodTarget(): sun.tools.java.MemberDefinition
             public setAccessMethodTarget(arg0: sun.tools.java.MemberDefinition): void
             public getAccessUpdateMember(): sun.tools.java.MemberDefinition
             public setAccessUpdateMember(arg0: sun.tools.java.MemberDefinition): void
             public isSuperAccessMethod(): boolean
             public setIsSuperAccessMethod(arg0: boolean): void
             public isBlankFinal(): boolean
             public isNeverNull(): boolean
             getValue<T>(...args: any[]): any
             public setValue(arg0: sun.tools.tree.Node): void
             public getInitialValue(): java.lang.Object
             public getNextMember(): sun.tools.java.MemberDefinition
             public getNextMatch(): sun.tools.java.MemberDefinition
             public getDocumentation(): java.lang.String
             check<T>(...args: any[]): any
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.asm.Assembler): void
             public codeInit(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public reportDeprecated(arg0: sun.tools.java.Environment): boolean
             public canReach(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition): boolean
             public sameReturnType(arg0: sun.tools.java.MemberDefinition): boolean
             public checkOverride(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition): boolean
             public checkMeet(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition, arg2: sun.tools.java.ClassDeclaration): boolean
             public couldOverride(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition): boolean
             public isPublic(): boolean
             public isPrivate(): boolean
             public isProtected(): boolean
             public isPackagePrivate(): boolean
             public isFinal(): boolean
             public isStatic(): boolean
             public isSynchronized(): boolean
             public isAbstract(): boolean
             public isNative(): boolean
             public isVolatile(): boolean
             public isTransient(): boolean
             public isMethod(): boolean
             public isVariable(): boolean
             public isSynthetic(): boolean
             public isDeprecated(): boolean
             public isStrict(): boolean
             public isInnerClass(): boolean
             public isInitializer(): boolean
             public isConstructor(): boolean
             public isLocal(): boolean
             public isInlineable(arg0: sun.tools.java.Environment, arg1: boolean): boolean
             public isConstant(): boolean
             toString<T>(...args: any[]): any
             public print(arg0: java.io.PrintStream): void
             public cleanup(arg0: sun.tools.java.Environment): void
         }

      }
      namespace util {
         class CommandLine {
             public constructor()
             public static parse(arg0: java.lang.String[]): java.lang.String[]
         }
         class ModifierFilter extends java.lang.reflect.Modifier {
             public static PACKAGE: long
             public static ALL_ACCESS: long
             constructor(...args: any[])
             public checkModifier(arg0: int): boolean
             public checkMember(arg0: sun.tools.java.MemberDefinition): boolean
             public checkClass(arg0: sun.tools.java.ClassDefinition): boolean
         }

      }
      namespace jstat {
         class AscendingMonitorComparator implements java.util.Comparator<sun.jvmstat.monitor.Monitor> {
             constructor()
             compare<T>(...args: any[]): any
         }
         class DescendingMonitorComparator implements java.util.Comparator<sun.jvmstat.monitor.Monitor> {
             constructor()
             compare<T>(...args: any[]): any
         }
         class ExpressionExecuter implements sun.tools.jstat.ExpressionEvaluator {
             constructor(arg0: sun.jvmstat.monitor.MonitoredVm)
             public evaluate(arg0: sun.tools.jstat.Expression): java.lang.Object
         }
         class ExpressionResolver implements sun.tools.jstat.ExpressionEvaluator {
             constructor(arg0: sun.jvmstat.monitor.MonitoredVm)
             public evaluate(arg0: sun.tools.jstat.Expression): java.lang.Object
         }
         class HeaderClosure implements sun.tools.jstat.Closure {
             public constructor()
             public visit(arg0: java.lang.Object, arg1: boolean): void
             public getHeader(): java.lang.String
         }
         class Identifier extends sun.tools.jstat.Expression {
             public constructor(arg0: java.lang.String)
             public getName(): java.lang.String
             public setValue(arg0: java.lang.Object): void
             public getValue(): java.lang.Object
             public isResolved(): boolean
             toString<T>(...args: any[]): any
         }
         class JStatLogger {
             public constructor(arg0: sun.jvmstat.monitor.MonitoredVm)
             public printNames(arg0: java.lang.String, arg1: java.util.Comparator<sun.jvmstat.monitor.Monitor>, arg2: boolean, arg3: java.io.PrintStream): void
             public printSnapShot(arg0: java.lang.String, arg1: java.util.Comparator<sun.jvmstat.monitor.Monitor>, arg2: boolean, arg3: boolean, arg4: java.io.PrintStream): void
             public printList(arg0: java.util.List<sun.jvmstat.monitor.Monitor>, arg1: boolean, arg2: boolean, arg3: java.io.PrintStream): void
             public stopLogging(): void
             public logSamples(arg0: sun.tools.jstat.OutputFormatter, arg1: int, arg2: int, arg3: int, arg4: java.io.PrintStream): void
         }
         class Arguments {
             static $assertionsDisabled: boolean
             public static printUsage(arg0: java.io.PrintStream): void
             public constructor(arg0: java.lang.String[])
             public comparator(): java.util.Comparator<sun.jvmstat.monitor.Monitor>
             public isHelp(): boolean
             public isList(): boolean
             public isSnap(): boolean
             public isOptions(): boolean
             public isVerbose(): boolean
             public printConstants(): boolean
             public isConstantsOnly(): boolean
             public printStrings(): boolean
             public showUnsupported(): boolean
             public headerRate(): int
             public counterNames(): java.lang.String
             public vmId(): sun.jvmstat.monitor.VmIdentifier
             public vmIdString(): java.lang.String
             public sampleInterval(): int
             public sampleCount(): int
             public isTimestamp(): boolean
             public isSpecialOption(): boolean
             public specialOption(): java.lang.String
             public optionFormat(): sun.tools.jstat.OptionFormat
             public optionsSources(): java.util.List<java.net.URL>
         }
         class Jstat {
             public constructor()
             public static main(arg0: java.lang.String[]): void
             static logNames(): void
             static logSnapShot(): void
             static logSamples(): void
         }
         class Jstat$2 implements sun.jvmstat.monitor.event.HostListener {
             val$vmId: sun.jvmstat.monitor.VmIdentifier
             val$logger: sun.tools.jstat.JStatLogger
             val$monitoredHost: sun.jvmstat.monitor.MonitoredHost
             constructor(arg0: sun.jvmstat.monitor.VmIdentifier, arg1: sun.tools.jstat.JStatLogger, arg2: sun.jvmstat.monitor.MonitoredHost)
             public vmStatusChanged(arg0: sun.jvmstat.monitor.event.VmStatusChangeEvent): void
             public disconnected(arg0: sun.jvmstat.monitor.event.HostEvent): void
         }
         class Jstat$1 extends java.lang.Thread {
             val$logger: sun.tools.jstat.JStatLogger
             constructor(arg0: sun.tools.jstat.JStatLogger)
             public run(): void
         }
         class Literal extends sun.tools.jstat.Expression {
             public constructor(arg0: java.lang.Object)
             public getValue(): java.lang.Object
             public setValue(arg0: java.lang.Object): void
             toString<T>(...args: any[]): any
         }
         class OptionFinder {
             optionsSources: java.util.List<java.net.URL>
             public constructor(arg0: java.util.List<java.net.URL>)
             getOptionFormat<T>(...args: any[]): any
         }
         class OptionLister {
             public constructor(arg0: java.util.List<java.net.URL>)
             public print(arg0: java.io.PrintStream): void
         }
         class OptionLister$1 implements java.util.Comparator<sun.tools.jstat.OptionFormat> {
             this$0: sun.tools.jstat.OptionLister
             constructor(arg0: sun.tools.jstat.OptionLister)
             compare<T>(...args: any[]): any
         }
         class OptionOutputFormatter implements sun.tools.jstat.OutputFormatter {
             public constructor(arg0: sun.jvmstat.monitor.MonitoredVm, arg1: sun.tools.jstat.OptionFormat)
             public getHeader(): java.lang.String
             public getRow(): java.lang.String
         }
         abstract class Alignment {
             public static CENTER: sun.tools.jstat.Alignment
             public static LEFT: sun.tools.jstat.Alignment
             public static RIGHT: sun.tools.jstat.Alignment
             protected align(arg0: java.lang.String, arg1: int): java.lang.String
             public static toAlignment(arg0: java.lang.String): sun.tools.jstat.Alignment
             public static keySet(): java.util.Set
             toString<T>(...args: any[]): any
             constructor(arg0: java.lang.String, arg1: sun.tools.jstat.Alignment$1)
         }
         class Alignment$3 extends sun.tools.jstat.Alignment {
             constructor(arg0: java.lang.String)
             protected align(arg0: java.lang.String, arg1: int): java.lang.String
         }
         class Alignment$2 extends sun.tools.jstat.Alignment {
             constructor(arg0: java.lang.String)
             protected align(arg0: java.lang.String, arg1: int): java.lang.String
         }
         class Alignment$1 extends sun.tools.jstat.Alignment {
             constructor(arg0: java.lang.String)
             protected align(arg0: java.lang.String, arg1: int): java.lang.String
         }
         class ColumnFormat extends sun.tools.jstat.OptionFormat {
             public constructor(arg0: int)
             public validate(): void
             public setWidth(arg0: int): void
             public setAlignment(arg0: sun.tools.jstat.Alignment): void
             public setScale(arg0: sun.tools.jstat.Scale): void
             public setFormat(arg0: java.lang.String): void
             public setHeader(arg0: java.lang.String): void
             public getHeader(): java.lang.String
             public getFormat(): java.lang.String
             public getWidth(): int
             public getAlignment(): sun.tools.jstat.Alignment
             public getScale(): sun.tools.jstat.Scale
             public getExpression(): sun.tools.jstat.Expression
             public setExpression(arg0: sun.tools.jstat.Expression): void
             public setPreviousValue(arg0: java.lang.Object): void
             public getPreviousValue(): java.lang.Object
             public printFormat(arg0: int): void
             public getValue(): java.lang.String
         }
         class OptionFormat {
             protected name: java.lang.String
             protected children: java.util.List<sun.tools.jstat.OptionFormat>
             public constructor(arg0: java.lang.String)
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
             public addSubFormat(arg0: sun.tools.jstat.OptionFormat): void
             public getSubFormat(arg0: int): sun.tools.jstat.OptionFormat
             public insertSubFormat(arg0: int, arg1: sun.tools.jstat.OptionFormat): void
             public getName(): java.lang.String
             public apply(arg0: sun.tools.jstat.Closure): void
             printFormat<T>(...args: any[]): any
         }
         class Parser {
             constructor(...args: any[])
             public parse(arg0: java.lang.String): sun.tools.jstat.OptionFormat
             public parseOptions(): java.util.Set<sun.tools.jstat.OptionFormat>
             getOptionFormat(): sun.tools.jstat.OptionFormat
         }
         interface OutputFormatter {
             public getHeader(): java.lang.String
             public getRow(): java.lang.String
         }
         class RawOutputFormatter implements sun.tools.jstat.OutputFormatter {
             public constructor(arg0: java.util.List, arg1: boolean)
             public getHeader(): java.lang.String
             public getRow(): java.lang.String
         }
         class RowClosure implements sun.tools.jstat.Closure {
             public constructor(arg0: sun.jvmstat.monitor.MonitoredVm)
             public visit(arg0: java.lang.Object, arg1: boolean): void
             public getRow(): java.lang.String
         }
         class Scale {
             public static RAW: sun.tools.jstat.Scale
             public static PERCENT: sun.tools.jstat.Scale
             public static KILO: sun.tools.jstat.Scale
             public static MEGA: sun.tools.jstat.Scale
             public static GIGA: sun.tools.jstat.Scale
             public static TERA: sun.tools.jstat.Scale
             public static PETA: sun.tools.jstat.Scale
             public static PICO: sun.tools.jstat.Scale
             public static NANO: sun.tools.jstat.Scale
             public static MICRO: sun.tools.jstat.Scale
             public static MILLI: sun.tools.jstat.Scale
             public static PSEC: sun.tools.jstat.Scale
             public static NSEC: sun.tools.jstat.Scale
             public static USEC: sun.tools.jstat.Scale
             public static MSEC: sun.tools.jstat.Scale
             public static SEC: sun.tools.jstat.Scale
             public static SEC2: sun.tools.jstat.Scale
             public static MINUTES: sun.tools.jstat.Scale
             public static HOUR: sun.tools.jstat.Scale
             public static HOUR2: sun.tools.jstat.Scale
             static $assertionsDisabled: boolean
             public getFactor(): double
             toString<T>(...args: any[]): any
             public static toScale(arg0: java.lang.String): sun.tools.jstat.Scale
             protected static keySet(): java.util.Set
             protected scale(arg0: double): double
         }
         abstract class Operator {
             public static PLUS: sun.tools.jstat.Operator
             public static MINUS: sun.tools.jstat.Operator
             public static DIVIDE: sun.tools.jstat.Operator
             public static MULTIPLY: sun.tools.jstat.Operator
             protected eval(arg0: double, arg1: double): double
             toString<T>(...args: any[]): any
             public static toOperator(arg0: java.lang.String): sun.tools.jstat.Operator
             protected static keySet(): java.util.Set
             constructor(arg0: java.lang.String, arg1: sun.tools.jstat.Operator$1)
         }
         class Operator$4 extends sun.tools.jstat.Operator {
             constructor(arg0: java.lang.String)
             protected eval(arg0: double, arg1: double): double
         }
         class Operator$3 extends sun.tools.jstat.Operator {
             constructor(arg0: java.lang.String)
             protected eval(arg0: double, arg1: double): double
         }
         class Operator$2 extends sun.tools.jstat.Operator {
             constructor(arg0: java.lang.String)
             protected eval(arg0: double, arg1: double): double
         }
         class Operator$1 extends sun.tools.jstat.Operator {
             constructor(arg0: java.lang.String)
             protected eval(arg0: double, arg1: double): double
         }
         class Expression {
             constructor()
             setLeft(arg0: sun.tools.jstat.Expression): void
             getLeft(): sun.tools.jstat.Expression
             setRight(arg0: sun.tools.jstat.Expression): void
             getRight(): sun.tools.jstat.Expression
             setOperator(arg0: sun.tools.jstat.Operator): void
             getOperator(): sun.tools.jstat.Operator
             toString<T>(...args: any[]): any
         }
         interface ExpressionEvaluator {
             public evaluate(arg0: sun.tools.jstat.Expression): java.lang.Object
         }
         interface Closure {
             public visit(arg0: java.lang.Object, arg1: boolean): void
         }
         class SymbolResolutionClosure implements sun.tools.jstat.Closure {
             public constructor(arg0: sun.tools.jstat.ExpressionEvaluator)
             public visit(arg0: java.lang.Object, arg1: boolean): void
         }
         class ParserException extends java.lang.Exception {
             constructor(...args: any[])
         }
         class SyntaxException extends sun.tools.jstat.ParserException {
             constructor(...args: any[])
             public getMessage(): java.lang.String
         }
         class Token {
             public sval: java.lang.String
             public nval: double
             public ttype: int
             constructor(...args: any[])
             public toMessage(): java.lang.String
             toString<T>(...args: any[]): any
         }

      }
      namespace serialver {
         class Res {
             constructor()
             static initResource(): void
             getText<T>(...args: any[]): any
         }
         class SerialVerFrame extends java.awt.Frame {
             menu_mb: java.awt.MenuBar
             file_m: java.awt.Menu
             exit_i: java.awt.MenuItem
             constructor()
             public handleEvent(arg0: java.awt.Event): boolean
             public action(arg0: java.awt.Event, arg1: java.lang.Object): boolean
             exit(arg0: int): void
         }
         class SerialVer extends java.applet.Applet {
             gb: java.awt.GridBagLayout
             classname_t: java.awt.TextField
             show_b: java.awt.Button
             serialversion_t: java.awt.TextField
             footer_l: java.awt.Label
             static loader: java.net.URLClassLoader
             public constructor()
             public init(): void
             public start(): void
             public action(arg0: java.awt.Event, arg1: java.lang.Object): boolean
             public handleEvent(arg0: java.awt.Event): boolean
             show(arg0: java.lang.String): void
             static initializeLoader(arg0: java.lang.String): void
             static serialSyntax(arg0: java.lang.String): java.lang.String
             static resolveClass(arg0: java.lang.String): java.lang.String
             public static main(arg0: java.lang.String[]): void
             public static usage(): void
         }

      }
      namespace javac {
         class BatchEnvironment extends sun.tools.java.Environment implements sun.tools.javac.ErrorConsumer {
             out: java.io.OutputStream
             protected sourcePath: sun.tools.java.ClassPath
             protected binaryPath: sun.tools.java.ClassPath
             packages: java.util.Hashtable
             classesOrdered: java.util.Vector
             classes: java.util.Hashtable
             public flags: int
             public majorVersion: short
             public minorVersion: short
             public covFile: java.io.File
             public nerrors: int
             public nwarnings: int
             public ndeprecations: int
             deprecationFiles: java.util.Vector
             errorConsumer: sun.tools.javac.ErrorConsumer
             errorFileName: java.lang.String
             errors: sun.tools.javac.ErrorMessage
             public errorLimit: int
             constructor(...args: any[])
             static create(arg0: java.io.OutputStream, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): sun.tools.javac.BatchEnvironment
             protected static classPaths(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): sun.tools.java.ClassPath[]
             public getFlags(): int
             public getMajorVersion(): short
             public getMinorVersion(): short
             public getcovFile(): java.io.File
             public getClasses(): java.util.Enumeration
             public isExemptPackage(arg0: sun.tools.java.Identifier): boolean
             getClassDeclaration<T>(...args: any[]): any
             public classExists(arg0: sun.tools.java.Identifier): boolean
             public getPackage(arg0: sun.tools.java.Identifier): sun.tools.java.Package
             public parseFile(arg0: sun.tools.java.ClassFile): void
             loadFile(arg0: sun.tools.java.ClassFile): sun.tools.java.BinaryClass
             loadFileFlags(): int
             needsCompilation(arg0: java.util.Hashtable, arg1: sun.tools.java.ClassDeclaration): boolean
             public loadDefinition(arg0: sun.tools.java.ClassDeclaration): void
             public makeClassDefinition(arg0: sun.tools.java.Environment, arg1: long, arg2: sun.tools.java.IdentifierToken, arg3: java.lang.String, arg4: int, arg5: sun.tools.java.IdentifierToken, arg6: sun.tools.java.IdentifierToken[], arg7: sun.tools.java.ClassDefinition): sun.tools.java.ClassDefinition
             public makeMemberDefinition(arg0: sun.tools.java.Environment, arg1: long, arg2: sun.tools.java.ClassDefinition, arg3: java.lang.String, arg4: int, arg5: sun.tools.java.Type, arg6: sun.tools.java.Identifier, arg7: sun.tools.java.IdentifierToken[], arg8: sun.tools.java.IdentifierToken[], arg9: java.lang.Object): sun.tools.java.MemberDefinition
             public shutdown(): void
             public errorString(arg0: java.lang.String, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
             protected insertError(arg0: long, arg1: java.lang.String): boolean
             public pushError(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
             public flushErrors(): void
             public reportError(arg0: java.lang.Object, arg1: long, arg2: java.lang.String, arg3: java.lang.String): void
             public error(arg0: java.lang.Object, arg1: long, arg2: java.lang.String, arg3: java.lang.Object, arg4: java.lang.Object, arg5: java.lang.Object): void
             public output(arg0: java.lang.String): void
         }
         class BatchParser extends sun.tools.java.Parser {
             protected pkg: sun.tools.java.Identifier
             protected imports: sun.tools.java.Imports
             protected classes: java.util.Vector
             protected sourceClass: sun.tools.javac.SourceClass
             protected toplevelEnv: sun.tools.java.Environment
             public constructor(arg0: sun.tools.java.Environment, arg1: java.io.InputStream)
             public packageDeclaration(arg0: long, arg1: sun.tools.java.IdentifierToken): void
             public importClass(arg0: long, arg1: sun.tools.java.IdentifierToken): void
             public importPackage(arg0: long, arg1: sun.tools.java.IdentifierToken): void
             public beginClass(arg0: long, arg1: java.lang.String, arg2: int, arg3: sun.tools.java.IdentifierToken, arg4: sun.tools.java.IdentifierToken, arg5: sun.tools.java.IdentifierToken[]): sun.tools.java.ClassDefinition
             public getCurrentClass(): sun.tools.java.ClassDefinition
             public endClass(arg0: long, arg1: sun.tools.java.ClassDefinition): void
             public defineField(arg0: long, arg1: sun.tools.java.ClassDefinition, arg2: java.lang.String, arg3: int, arg4: sun.tools.java.Type, arg5: sun.tools.java.IdentifierToken, arg6: sun.tools.java.IdentifierToken[], arg7: sun.tools.java.IdentifierToken[], arg8: sun.tools.tree.Node): void
         }
         class CompilerMember implements java.lang.Comparable {
             field: sun.tools.java.MemberDefinition
             asm: sun.tools.asm.Assembler
             value: java.lang.Object
             name: java.lang.String
             sig: java.lang.String
             key: java.lang.String
             constructor(arg0: sun.tools.java.MemberDefinition, arg1: sun.tools.asm.Assembler)
             public compareTo(arg0: java.lang.Object): int
             getKey(): java.lang.String
         }
         interface ErrorConsumer {
             public pushError(arg0: java.lang.String, arg1: int, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void
         }
         class ErrorMessage {
             where: long
             message: java.lang.String
             next: sun.tools.javac.ErrorMessage
             constructor(arg0: long, arg1: java.lang.String)
         }
         class Main implements sun.tools.java.Constants {
             program: java.lang.String
             out: java.io.OutputStream
             public static EXIT_OK: int
             public static EXIT_ERROR: int
             public static EXIT_CMDERR: int
             public static EXIT_SYSERR: int
             public static EXIT_ABNORMAL: int
             public constructor(arg0: java.io.OutputStream, arg1: java.lang.String)
             public getExitStatus(): int
             public compilationPerformedSuccessfully(): boolean
             public compilationReportedErrors(): boolean
             public usage_error(): void
             static initResource(): void
             getText<T>(...args: any[]): any
             public compile(arg0: java.lang.String[]): boolean
             public static main(arg0: java.lang.String[]): void
         }
         class SourceClass extends sun.tools.java.ClassDefinition {
             toplevelEnv: sun.tools.java.Environment
             defConstructor: sun.tools.javac.SourceMember
             tab: sun.tools.asm.ConstantPool
             deps: java.util.Hashtable
             thisArg: sun.tools.tree.LocalMember
             endPosition: long
             public constructor(arg0: sun.tools.java.Environment, arg1: long, arg2: sun.tools.java.ClassDeclaration, arg3: java.lang.String, arg4: int, arg5: sun.tools.java.IdentifierToken, arg6: sun.tools.java.IdentifierToken[], arg7: sun.tools.javac.SourceClass, arg8: sun.tools.java.Identifier)
             public getEndPosition(): long
             public setEndPosition(arg0: long): void
             public getAbsoluteName(): java.lang.String
             public getImports(): sun.tools.java.Imports
             public getThisArgument(): sun.tools.tree.LocalMember
             public addDependency(arg0: sun.tools.java.ClassDeclaration): void
             public addMember(arg0: sun.tools.java.Environment, arg1: sun.tools.java.MemberDefinition): void
             public setupEnv(arg0: sun.tools.java.Environment): sun.tools.java.Environment
             public reportDeprecated(arg0: sun.tools.java.Environment): boolean
             public noteUsedBy(arg0: sun.tools.java.ClassDefinition, arg1: long, arg2: sun.tools.java.Environment): void
             public check(arg0: sun.tools.java.Environment): void
             public checkSourceFile(arg0: sun.tools.java.Environment, arg1: long): void
             public getSuperClass(arg0: sun.tools.java.Environment): sun.tools.java.ClassDeclaration
             protected basicCheck(arg0: sun.tools.java.Environment): void
             protected addMirandaMethods(arg0: sun.tools.java.Environment, arg1: java.util.Iterator): void
             public resolveTypeStructure(arg0: sun.tools.java.Environment): void
             protected resolveSupers(arg0: sun.tools.java.Environment): void
             public checkLocalClass(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset, arg3: sun.tools.java.ClassDefinition, arg4: sun.tools.tree.Expression[], arg5: sun.tools.java.Type[]): sun.tools.tree.Vset
             public inlineLocalClass(arg0: sun.tools.java.Environment): void
             public checkInsideClass(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.tree.Vset): sun.tools.tree.Vset
             static classModifierString(arg0: int): java.lang.String
             public getAccessMember(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.java.MemberDefinition, arg3: boolean): sun.tools.java.MemberDefinition
             public getUpdateMember(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.java.MemberDefinition, arg3: boolean): sun.tools.java.MemberDefinition
             findLookupContext(): sun.tools.javac.SourceClass
             public getClassLiteralLookup(arg0: long): sun.tools.java.MemberDefinition
             public compile(arg0: java.io.OutputStream): void
             protected compileClass(arg0: sun.tools.java.Environment, arg1: java.io.OutputStream): void
             public printClassDependencies(arg0: sun.tools.java.Environment): void
         }
         class SourceMember extends sun.tools.java.MemberDefinition implements sun.tools.java.Constants {
             args: java.util.Vector
             abstractSource: sun.tools.java.MemberDefinition
             status: int
             static PARSED: int
             static CHECKING: int
             static CHECKED: int
             static INLINING: int
             static INLINED: int
             static ERROR: int
             outerThisArg: sun.tools.tree.LocalMember
             public resolved: boolean
             public getArguments(): java.util.Vector
             constructor(...args: any[])
             createArgumentFields(arg0: java.util.Vector): void
             public getOuterThisArg(): sun.tools.tree.LocalMember
             addOuterThis(): void
             addUplevelArguments(): void
             public getExceptions(arg0: sun.tools.java.Environment): sun.tools.java.ClassDeclaration[]
             public setExceptions(arg0: sun.tools.java.ClassDeclaration[]): void
             public resolveTypeStructure(arg0: sun.tools.java.Environment): void
             public getDefiningClassDeclaration(): sun.tools.java.ClassDeclaration
             public reportDeprecated(arg0: sun.tools.java.Environment): boolean
             check<T>(...args: any[]): any
             inline(arg0: sun.tools.java.Environment): void
             public getValue(arg0: sun.tools.java.Environment): sun.tools.tree.Node
             public isInlineable(arg0: sun.tools.java.Environment, arg1: boolean): boolean
             public getInitialValue(): java.lang.Object
             public code(arg0: sun.tools.java.Environment, arg1: sun.tools.asm.Assembler): void
             public codeInit(arg0: sun.tools.java.Environment, arg1: sun.tools.tree.Context, arg2: sun.tools.asm.Assembler): void
             public print(arg0: java.io.PrintStream): void
         }

      }

   }
   namespace rmi {
      namespace rmic {
         class Names {
             public constructor()
             public static stubFor(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
             public static skeletonFor(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
             public static mangleClass(arg0: sun.tools.java.Identifier): sun.tools.java.Identifier
         }
         class IndentingWriter extends java.io.BufferedWriter {
             constructor(...args: any[])
             write<T>(...args: any[]): any
             public newLine(): void
             protected checkWrite(): void
             protected indentIn(): void
             protected indentOut(): void
             public pI(): void
             pO<T>(...args: any[]): any
             p<T>(...args: any[]): any
             pln<T>(...args: any[]): any
             plnI<T>(...args: any[]): any
             pOln<T>(...args: any[]): any
             pOlnI<T>(...args: any[]): any
         }
         class RMIGenerator implements sun.rmi.rmic.RMIConstants , sun.rmi.rmic.Generator {
             public constructor()
             public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.Main): boolean
             public generate(arg0: sun.rmi.rmic.BatchEnvironment, arg1: sun.tools.java.ClassDefinition, arg2: java.io.File): void
             protected static sourceFileForClass(arg0: sun.tools.java.Identifier, arg1: sun.tools.java.Identifier, arg2: java.io.File, arg3: sun.rmi.rmic.BatchEnvironment): java.io.File
         }
         interface RMIConstants extends sun.rmi.rmic.Constants {
             public static idRemoteObject: sun.tools.java.Identifier
             public static idRemoteStub: sun.tools.java.Identifier
             public static idRemoteRef: sun.tools.java.Identifier
             public static idOperation: sun.tools.java.Identifier
             public static idSkeleton: sun.tools.java.Identifier
             public static idSkeletonMismatchException: sun.tools.java.Identifier
             public static idRemoteCall: sun.tools.java.Identifier
             public static idMarshalException: sun.tools.java.Identifier
             public static idUnmarshalException: sun.tools.java.Identifier
             public static idUnexpectedException: sun.tools.java.Identifier
             public static STUB_VERSION_1_1: int
             public static STUB_VERSION_FAT: int
             public static STUB_VERSION_1_2: int
             public static STUB_SERIAL_VERSION_UID: long
             public static INTERFACE_HASH_STUB_VERSION: int
         }
         class RemoteClass implements sun.rmi.rmic.RMIConstants {
             public static forClass(arg0: sun.rmi.rmic.BatchEnvironment, arg1: sun.tools.java.ClassDefinition): sun.rmi.rmic.RemoteClass
             public getClassDefinition(): sun.tools.java.ClassDefinition
             public getName(): sun.tools.java.Identifier
             public getRemoteInterfaces(): sun.tools.java.ClassDefinition[]
             public getRemoteMethods(): sun.rmi.rmic.RemoteClass$Method[]
             public getInterfaceHash(): long
             toString<T>(...args: any[]): any
             static access$100(arg0: sun.rmi.rmic.RemoteClass): sun.rmi.rmic.BatchEnvironment
         }
         class RemoteClass$Method implements java.lang.Cloneable {
             this$0: sun.rmi.rmic.RemoteClass
             public getMemberDefinition(): sun.tools.java.MemberDefinition
             public getName(): sun.tools.java.Identifier
             public getType(): sun.tools.java.Type
             public getExceptions(): sun.tools.java.ClassDeclaration[]
             public getMethodHash(): long
             toString<T>(...args: any[]): any
             public getOperationString(): java.lang.String
             public getNameAndDescriptor(): java.lang.String
             constructor(arg0: sun.rmi.rmic.RemoteClass, arg1: sun.tools.java.MemberDefinition)
             protected clone(): java.lang.Object
             static access$000(arg0: sun.rmi.rmic.RemoteClass$Method, arg1: sun.rmi.rmic.RemoteClass$Method): sun.rmi.rmic.RemoteClass$Method
         }
         interface Generator {
             public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.Main): boolean
             public generate(arg0: sun.rmi.rmic.BatchEnvironment, arg1: sun.tools.java.ClassDefinition, arg2: java.io.File): void
         }
         class Main implements sun.rmi.rmic.Constants {
             sourcePathArg: java.lang.String
             sysClassPathArg: java.lang.String
             extDirsArg: java.lang.String
             classPathString: java.lang.String
             destDir: java.io.File
             flags: int
             tm: long
             classes: java.util.Vector<java.lang.String>
             nowrite: boolean
             nocompile: boolean
             keepGenerated: boolean
             status: boolean
             generatorArgs: java.lang.String[]
             generators: java.util.Vector<sun.rmi.rmic.Generator>
             environmentClass: java.lang.Class<sun.rmi.rmic.BatchEnvironment>
             iiopGeneration: boolean
             program: java.lang.String
             out: java.io.OutputStream
             public constructor(arg0: java.io.OutputStream, arg1: java.lang.String)
             public output(arg0: java.lang.String): void
             error<T>(...args: any[]): any
             public usage(): void
             public compile(arg0: java.lang.String[]): boolean
             public getDestinationDir(): java.io.File
             public parseArgs(arg0: java.lang.String[]): boolean
             protected checkGeneratorArg(arg0: java.lang.String[], arg1: int): boolean
             protected addGenerator(arg0: java.lang.String): sun.rmi.rmic.Generator
             protected getArray(arg0: java.lang.String, arg1: boolean): java.lang.String[]
             public getEnv(): sun.rmi.rmic.BatchEnvironment
             public doCompile(): boolean
             public compileAllClasses(arg0: sun.rmi.rmic.BatchEnvironment): void
             public compileClass(arg0: sun.tools.java.ClassDeclaration, arg1: java.io.ByteArrayOutputStream, arg2: sun.rmi.rmic.BatchEnvironment): boolean
             public static main(arg0: java.lang.String[]): void
             public static getString(arg0: java.lang.String): java.lang.String
             getText<T>(...args: any[]): any
         }
         class BatchEnvironment extends sun.tools.javac.BatchEnvironment {
             createClassPath<T>(...args: any[]): any
             public constructor(arg0: java.io.OutputStream, arg1: sun.tools.java.ClassPath, arg2: sun.rmi.rmic.Main)
             public getMain(): sun.rmi.rmic.Main
             public getClassPath(): sun.tools.java.ClassPath
             public addGeneratedFile(arg0: java.io.File): void
             public deleteGeneratedFiles(): void
             public shutdown(): void
             public errorString(arg0: java.lang.String, arg1: java.lang.Object, arg2: java.lang.Object, arg3: java.lang.Object): java.lang.String
             public reset(): void
         }
         class BatchEnvironment$Path extends java.util.LinkedHashSet<java.lang.String> {
             public expandJarClassPaths(arg0: boolean): sun.rmi.rmic.BatchEnvironment$Path
             public emptyPathDefault(arg0: java.lang.String): sun.rmi.rmic.BatchEnvironment$Path
             public constructor()
             addDirectories<T>(...args: any[]): any
             addFiles<T>(...args: any[]): any
         }
         class BatchEnvironment$Path$PathIterator implements java.util.Collection<java.lang.String> {
             constructor(...args: any[])
             public iterator(): java.util.Iterator<java.lang.String>
             public size(): int
             public isEmpty(): boolean
             public contains(arg0: java.lang.Object): boolean
             toArray<T>(...args: any[]): any
             add<T>(...args: any[]): any
             public remove(arg0: java.lang.Object): boolean
             public containsAll(arg0: java.util.Collection<any>): boolean
             public addAll(arg0: java.util.Collection<java.lang.String>): boolean
             public removeAll(arg0: java.util.Collection<any>): boolean
             public retainAll(arg0: java.util.Collection<any>): boolean
             public clear(): void
             public equals(arg0: java.lang.Object): boolean
             public hashCode(): int
             static access$000(arg0: sun.rmi.rmic.BatchEnvironment$Path$PathIterator): int
             static access$100(arg0: sun.rmi.rmic.BatchEnvironment$Path$PathIterator): java.lang.String
             static access$002(arg0: sun.rmi.rmic.BatchEnvironment$Path$PathIterator, arg1: int): int
             static access$200(arg0: sun.rmi.rmic.BatchEnvironment$Path$PathIterator): java.lang.String
         }
         class BatchEnvironment$Path$PathIterator$1 implements java.util.Iterator<java.lang.String> {
             this$0: sun.rmi.rmic.BatchEnvironment$Path$PathIterator
             constructor(arg0: sun.rmi.rmic.BatchEnvironment$Path$PathIterator)
             public hasNext(): boolean
             next<T>(...args: any[]): any
             public remove(): void
         }
         interface Constants extends sun.tools.java.Constants {
             public static idRemote: sun.tools.java.Identifier
             public static idRemoteException: sun.tools.java.Identifier
         }
         class Util implements sun.rmi.rmic.Constants {
             public constructor()
             public static getOutputDirectoryFor(arg0: sun.tools.java.Identifier, arg1: java.io.File, arg2: sun.rmi.rmic.BatchEnvironment): java.io.File
         }
         namespace newrmic {
            class Resources {
                public static getText(arg0: java.lang.String, ...arg1: java.lang.String[]): java.lang.String
            }
            class Main {
                static $assertionsDisabled: boolean
                public static main(arg0: java.lang.String[]): void
                public constructor(arg0: java.io.OutputStream, arg1: java.lang.String)
                public compile(arg0: java.lang.String[]): boolean
                public output(arg0: java.lang.String): void
                public error(arg0: java.lang.String, ...arg1: java.lang.String[]): void
                public usage(): void
                public static start(arg0: com.sun.javadoc.RootDoc): boolean
                public static optionLength(arg0: java.lang.String): int
            }
            class Main$Batch {
                keepGenerated: boolean
                debug: boolean
                noWarn: boolean
                noWrite: boolean
                verbose: boolean
                noCompile: boolean
                bootClassPath: java.lang.String
                extDirs: java.lang.String
                classPath: java.lang.String
                destDir: java.io.File
                generators: java.util.List<sun.rmi.rmic.newrmic.Generator>
                envClass: java.lang.Class<sun.rmi.rmic.newrmic.BatchEnvironment>
                classes: java.util.List<java.lang.String>
                this$0: sun.rmi.rmic.newrmic.Main
                constructor(arg0: sun.rmi.rmic.newrmic.Main)
                enclosingMain(): sun.rmi.rmic.newrmic.Main
            }
            interface Generator {
                public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.newrmic.Main): boolean
                public envClass(): java.lang.Class<sun.rmi.rmic.newrmic.BatchEnvironment>
                public bootstrapClassNames(): java.util.Set<java.lang.String>
                public generate(arg0: sun.rmi.rmic.newrmic.BatchEnvironment, arg1: com.sun.javadoc.ClassDoc, arg2: java.io.File): void
            }
            class IndentingWriter extends java.io.BufferedWriter {
                constructor(...args: any[])
                write<T>(...args: any[]): any
                public newLine(): void
                protected checkWrite(): void
                protected indentIn(): void
                protected indentOut(): void
                public pI(): void
                pO<T>(...args: any[]): any
                p<T>(...args: any[]): any
                pln<T>(...args: any[]): any
                plnI<T>(...args: any[]): any
                pOln<T>(...args: any[]): any
                pOlnI<T>(...args: any[]): any
            }
            class BatchEnvironment {
                public constructor(arg0: com.sun.javadoc.RootDoc)
                public rootDoc(): com.sun.javadoc.RootDoc
                public docRemote(): com.sun.javadoc.ClassDoc
                public docException(): com.sun.javadoc.ClassDoc
                public docRemoteException(): com.sun.javadoc.ClassDoc
                public docRuntimeException(): com.sun.javadoc.ClassDoc
                public setVerbose(arg0: boolean): void
                public verbose(): boolean
                public addGeneratedFile(arg0: java.io.File): void
                public generatedFiles(): java.util.List<java.io.File>
                public output(arg0: java.lang.String): void
                public error(arg0: java.lang.String, ...arg1: java.lang.String[]): void
            }
            class Constants {
                public static REMOTE: java.lang.String
                public static EXCEPTION: java.lang.String
                public static REMOTE_EXCEPTION: java.lang.String
                public static RUNTIME_EXCEPTION: java.lang.String
            }
            namespace jrmp {
               class JrmpGenerator implements sun.rmi.rmic.newrmic.Generator {
                   public constructor()
                   public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.newrmic.Main): boolean
                   public envClass(): java.lang.Class<sun.rmi.rmic.newrmic.BatchEnvironment>
                   public bootstrapClassNames(): java.util.Set<java.lang.String>
                   public generate(arg0: sun.rmi.rmic.newrmic.BatchEnvironment, arg1: com.sun.javadoc.ClassDoc, arg2: java.io.File): void
               }
               class RemoteClass {
                   static forClass(arg0: sun.rmi.rmic.newrmic.BatchEnvironment, arg1: com.sun.javadoc.ClassDoc): sun.rmi.rmic.newrmic.jrmp.RemoteClass
                   classDoc(): com.sun.javadoc.ClassDoc
                   remoteInterfaces(): com.sun.javadoc.ClassDoc[]
                   remoteMethods(): sun.rmi.rmic.newrmic.jrmp.RemoteClass$Method[]
                   interfaceHash(): long
               }
               class RemoteClass$1 {
               }
               class RemoteClass$Method implements java.lang.Cloneable {
                   this$0: sun.rmi.rmic.newrmic.jrmp.RemoteClass
                   constructor(arg0: sun.rmi.rmic.newrmic.jrmp.RemoteClass, arg1: com.sun.javadoc.MethodDoc)
                   methodDoc(): com.sun.javadoc.MethodDoc
                   parameterTypes(): com.sun.javadoc.Type[]
                   exceptionTypes(): com.sun.javadoc.ClassDoc[]
                   methodHash(): long
                   operationString(): java.lang.String
                   nameAndDescriptor(): java.lang.String
                   mergeWith(arg0: sun.rmi.rmic.newrmic.jrmp.RemoteClass$Method): sun.rmi.rmic.newrmic.jrmp.RemoteClass$Method
                   clone<T>(...args: any[]): any
               }
               class RemoteClass$ClassDocComparator implements java.util.Comparator<com.sun.javadoc.ClassDoc> {
                   compare<T>(...args: any[]): any
                   constructor(arg0: sun.rmi.rmic.newrmic.jrmp.RemoteClass$1)
               }
               class StubSkeletonWriter {
                   static $assertionsDisabled: boolean
                   constructor(arg0: sun.rmi.rmic.newrmic.BatchEnvironment, arg1: sun.rmi.rmic.newrmic.jrmp.RemoteClass, arg2: sun.rmi.rmic.newrmic.jrmp.Constants$StubVersion)
                   stubClassName(): java.lang.String
                   skeletonClassName(): java.lang.String
                   writeStub(arg0: sun.rmi.rmic.newrmic.IndentingWriter): void
                   writeSkeleton(arg0: sun.rmi.rmic.newrmic.IndentingWriter): void
               }
               class Constants {
                   static REMOTE_OBJECT: java.lang.String
                   static REMOTE_STUB: java.lang.String
                   static REMOTE_REF: java.lang.String
                   static OPERATION: java.lang.String
                   static SKELETON: java.lang.String
                   static SKELETON_MISMATCH_EXCEPTION: java.lang.String
                   static REMOTE_CALL: java.lang.String
                   static MARSHAL_EXCEPTION: java.lang.String
                   static UNMARSHAL_EXCEPTION: java.lang.String
                   static UNEXPECTED_EXCEPTION: java.lang.String
                   static STUB_SERIAL_VERSION_UID: long
                   static INTERFACE_HASH_STUB_VERSION: int
               }
               class Constants$StubVersion extends java.lang.Enum<sun.rmi.rmic.newrmic.jrmp.Constants$StubVersion> {
                   public static V1_1: sun.rmi.rmic.newrmic.jrmp.Constants$StubVersion
                   public static VCOMPAT: sun.rmi.rmic.newrmic.jrmp.Constants$StubVersion
                   public static V1_2: sun.rmi.rmic.newrmic.jrmp.Constants$StubVersion
                   public static values(): sun.rmi.rmic.newrmic.jrmp.Constants$StubVersion[]
                   valueOf<T>(...args: any[]): any
               }
               class Util {
                   static binaryNameOf(arg0: com.sun.javadoc.ClassDoc): java.lang.String
                   static methodDescriptorOf(arg0: com.sun.javadoc.MethodDoc): java.lang.String
                   static getFriendlyUnqualifiedSignature(arg0: com.sun.javadoc.MethodDoc): java.lang.String
                   static isVoid(arg0: com.sun.javadoc.Type): boolean
               }

            }

         }
         namespace iiop {
            class ValueType extends sun.rmi.rmic.iiop.ClassType {
                public static forValue(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack, arg2: boolean): sun.rmi.rmic.iiop.ValueType
                public getTypeDescription(): java.lang.String
                public isCustom(): boolean
            }
            abstract class ClassType extends sun.rmi.rmic.iiop.CompoundType {
                public getSuperclass(): sun.rmi.rmic.iiop.ClassType
                public print(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): void
                protected destroy(): void
                constructor(...args: any[])
                protected swapInvalidTypes(): void
                public addExceptionDescription(arg0: java.lang.String): java.lang.String
                protected initParents(arg0: sun.rmi.rmic.iiop.ContextStack): boolean
            }
            class CompoundType$Method implements sun.rmi.rmic.iiop.ContextElement , java.lang.Cloneable {
                this$0: sun.rmi.rmic.iiop.CompoundType
                public isInherited(): boolean
                public isAttribute(): boolean
                public isReadWriteAttribute(): boolean
                public getAttributeKind(): int
                public getAttributeName(): java.lang.String
                public getAttributePairIndex(): int
                public getElementName(): java.lang.String
                public equals(arg0: java.lang.Object): boolean
                public hashCode(): int
                public mergeWith(arg0: sun.rmi.rmic.iiop.CompoundType$Method): sun.rmi.rmic.iiop.CompoundType$Method
                public getEnclosing(): sun.rmi.rmic.iiop.CompoundType
                public getDeclaredBy(): sun.tools.java.Identifier
                public getVisibility(): java.lang.String
                public isPublic(): boolean
                public isProtected(): boolean
                public isPrivate(): boolean
                public isStatic(): boolean
                public getName(): java.lang.String
                public getIDLName(): java.lang.String
                public getType(): sun.tools.java.Type
                public isConstructor(): boolean
                public isNormalMethod(): boolean
                public getReturnType(): sun.rmi.rmic.iiop.Type
                public getArguments(): sun.rmi.rmic.iiop.Type[]
                public getArgumentNames(): java.lang.String[]
                public getMemberDefinition(): sun.tools.java.MemberDefinition
                public getExceptions(): sun.rmi.rmic.iiop.ValueType[]
                public getImplExceptions(): sun.rmi.rmic.iiop.ValueType[]
                public getUniqueCatchList(arg0: sun.rmi.rmic.iiop.ValueType[]): sun.rmi.rmic.iiop.ValueType[]
                public getFilteredStubExceptions(arg0: sun.rmi.rmic.iiop.ValueType[]): sun.rmi.rmic.iiop.ValueType[]
                toString<T>(...args: any[]): any
                public setAttributeKind(arg0: int): void
                public setAttributePairIndex(arg0: int): void
                public setAttributeName(arg0: java.lang.String): void
                public setIDLName(arg0: java.lang.String): void
                public setImplExceptions(arg0: sun.rmi.rmic.iiop.ValueType[]): void
                public setDeclaredBy(arg0: sun.tools.java.Identifier): void
                protected swapInvalidTypes(): void
                public destroy(): void
                public constructor(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.iiop.CompoundType, arg2: sun.tools.java.MemberDefinition, arg3: boolean, arg4: sun.rmi.rmic.iiop.ContextStack)
                protected clone(): java.lang.Object
            }
            class CompoundType$Member implements sun.rmi.rmic.iiop.ContextElement , java.lang.Cloneable {
                this$0: sun.rmi.rmic.iiop.CompoundType
                public getElementName(): java.lang.String
                public getType(): sun.rmi.rmic.iiop.Type
                public getName(): java.lang.String
                public getIDLName(): java.lang.String
                public getVisibility(): java.lang.String
                public isPublic(): boolean
                public isPrivate(): boolean
                public isStatic(): boolean
                public isFinal(): boolean
                public isTransient(): boolean
                public getValue(): java.lang.String
                public isInnerClassDeclaration(): boolean
                public isConstant(): boolean
                toString<T>(...args: any[]): any
                protected swapInvalidTypes(): void
                protected setTransient(): void
                protected getMemberDefinition(): sun.tools.java.MemberDefinition
                public destroy(): void
                public constructor(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.tools.java.MemberDefinition, arg2: java.lang.String, arg3: sun.rmi.rmic.iiop.ContextStack, arg4: sun.rmi.rmic.iiop.CompoundType)
                public init(arg0: sun.rmi.rmic.iiop.ContextStack, arg1: sun.rmi.rmic.iiop.CompoundType): void
                public setIDLName(arg0: java.lang.String): void
                protected clone(): java.lang.Object
            }
            abstract class CompoundType extends sun.rmi.rmic.iiop.Type {
                protected methods: sun.rmi.rmic.iiop.CompoundType$Method[]
                protected interfaces: sun.rmi.rmic.iiop.InterfaceType[]
                protected members: sun.rmi.rmic.iiop.CompoundType$Member[]
                protected classDef: sun.tools.java.ClassDefinition
                protected classDecl: sun.tools.java.ClassDeclaration
                isCORBAObject<T>(...args: any[]): any
                isIDLEntity<T>(...args: any[]): any
                isAbstractBase<T>(...args: any[]): any
                isValueBase<T>(...args: any[]): any
                isCORBAUserException<T>(...args: any[]): any
                isException<T>(...args: any[]): any
                isCheckedException<T>(...args: any[]): any
                isRemoteExceptionOrSubclass<T>(...args: any[]): any
                protected idlExceptionName: java.lang.String
                protected qualifiedIDLExceptionName: java.lang.String
                isIDLEntityException<T>(...args: any[]): any
                public isBoxed(): boolean
                public getIDLExceptionName(): java.lang.String
                public getQualifiedIDLExceptionName(arg0: boolean): java.lang.String
                public getSignature(): java.lang.String
                public getClassDeclaration(): sun.tools.java.ClassDeclaration
                public getClassDefinition(): sun.tools.java.ClassDefinition
                public getSuperclass(): sun.rmi.rmic.iiop.ClassType
                public getInterfaces(): sun.rmi.rmic.iiop.InterfaceType[]
                public getMethods(): sun.rmi.rmic.iiop.CompoundType$Method[]
                public getMembers(): sun.rmi.rmic.iiop.CompoundType$Member[]
                public static forCompound(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.CompoundType
                protected destroy(): void
                protected loadClass(): java.lang.Class
                protected printExtends(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): boolean
                protected printImplements(arg0: sun.rmi.rmic.IndentingWriter, arg1: java.lang.String, arg2: boolean, arg3: boolean, arg4: boolean): void
                protected printMembers(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): void
                protected printMethods(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): void
                protected printMethod(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: sun.rmi.rmic.IndentingWriter, arg2: boolean, arg3: boolean, arg4: boolean): void
                constructor(...args: any[])
                protected initialize(arg0: java.util.Vector, arg1: java.util.Vector, arg2: java.util.Vector, arg3: sun.rmi.rmic.iiop.ContextStack, arg4: boolean): boolean
                protected static makeType(arg0: sun.tools.java.Type, arg1: sun.tools.java.ClassDefinition, arg2: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.Type
                public static isRemoteException(arg0: sun.rmi.rmic.iiop.ClassType, arg1: sun.rmi.rmic.iiop.BatchEnvironment): boolean
                protected isConformingRemoteMethod(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: boolean): boolean
                protected swapInvalidTypes(): void
                protected addTypes(arg0: int, arg1: java.util.HashSet, arg2: java.util.Vector): boolean
                protected updateParentClassMethods(arg0: sun.tools.java.ClassDefinition, arg1: java.util.Vector, arg2: boolean, arg3: sun.rmi.rmic.iiop.ContextStack): java.util.Vector
                protected addAllMethods(arg0: sun.tools.java.ClassDefinition, arg1: java.util.Vector, arg2: boolean, arg3: boolean, arg4: sun.rmi.rmic.iiop.ContextStack): java.util.Vector
                protected inheritsFrom(arg0: sun.tools.java.ClassDefinition, arg1: sun.tools.java.ClassDefinition): boolean
                protected addRemoteInterfaces(arg0: java.util.Vector, arg1: boolean, arg2: sun.rmi.rmic.iiop.ContextStack): java.util.Vector
                protected addNonRemoteInterfaces(arg0: java.util.Vector, arg1: sun.rmi.rmic.iiop.ContextStack): java.util.Vector
                protected addAllMembers(arg0: java.util.Vector, arg1: boolean, arg2: boolean, arg3: sun.rmi.rmic.iiop.ContextStack): boolean
                protected addConformingConstants(arg0: java.util.Vector, arg1: boolean, arg2: sun.rmi.rmic.iiop.ContextStack): boolean
                protected getMethodExceptions(arg0: sun.tools.java.MemberDefinition, arg1: boolean, arg2: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.ValueType[]
                protected static getVisibilityString(arg0: sun.tools.java.MemberDefinition): java.lang.String
                protected assertNotImpl(arg0: sun.rmi.rmic.iiop.Type, arg1: boolean, arg2: sun.rmi.rmic.iiop.ContextStack, arg3: sun.rmi.rmic.iiop.CompoundType, arg4: boolean): boolean
            }
            abstract class Type implements sun.rmi.rmic.iiop.Constants , sun.rmi.rmic.iiop.ContextElement , java.lang.Cloneable {
                protected env: sun.rmi.rmic.iiop.BatchEnvironment
                protected stack: sun.rmi.rmic.iiop.ContextStack
                protected destroyed: boolean
                public getName(): java.lang.String
                public getPackageName(): java.lang.String
                public getQualifiedName(): java.lang.String
                public getSignature(): java.lang.String
                public getIDLName(): java.lang.String
                public getIDLModuleNames(): java.lang.String[]
                public getQualifiedIDLName(arg0: boolean): java.lang.String
                public getIdentifier(): sun.tools.java.Identifier
                public getRepositoryID(): java.lang.String
                public getBoxedRepositoryID(): java.lang.String
                public getClassInstance(): java.lang.Class
                public getStatus(): int
                public setStatus(arg0: int): void
                public getEnv(): sun.rmi.rmic.iiop.BatchEnvironment
                public getTypeCode(): int
                public getFullTypeCode(): int
                public getTypeCodeModifiers(): int
                public isType(arg0: int): boolean
                public typeMatches(arg0: int): boolean
                public getRootTypeCode(): int
                public isInterface(): boolean
                public isClass(): boolean
                public isInner(): boolean
                public isSpecialInterface(): boolean
                public isSpecialClass(): boolean
                public isCompound(): boolean
                public isPrimitive(): boolean
                public isArray(): boolean
                public isConforming(): boolean
                toString<T>(...args: any[]): any
                public getElementType(): sun.rmi.rmic.iiop.Type
                public getArrayDimension(): int
                public getArrayBrackets(): java.lang.String
                public equals(arg0: java.lang.Object): boolean
                collectMatching<T>(...args: any[]): any
                public getTypeDescription(): java.lang.String
                public getTypeName(arg0: boolean, arg1: boolean, arg2: boolean): java.lang.String
                print<T>(...args: any[]): any
                public println(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): void
                public printTypeName(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): void
                public getElementName(): java.lang.String
                protected printPackageOpen(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean): void
                getType<T>(...args: any[]): any
                removeType<T>(...args: any[]): any
                putType<T>(...args: any[]): any
                protected static putInvalidType(arg0: sun.rmi.rmic.iiop.Type, arg1: java.lang.String, arg2: sun.rmi.rmic.iiop.ContextStack): void
                public removeInvalidTypes(): void
                protected static updateAllInvalidTypes(arg0: sun.rmi.rmic.iiop.ContextStack): void
                protected countTypes(): int
                resetTypes(): void
                protected destroy(): void
                protected swapInvalidTypes(): void
                protected getValidType(arg0: sun.rmi.rmic.iiop.Type): sun.rmi.rmic.iiop.Type
                protected printPackageClose(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean): void
                protected constructor(arg0: sun.rmi.rmic.iiop.ContextStack, arg1: int)
                protected setTypeCode(arg0: int): void
                protected setNames(arg0: sun.tools.java.Identifier, arg1: java.lang.String[], arg2: java.lang.String): void
                protected setIDLNames(arg0: java.lang.String[], arg1: java.lang.String): void
                classNotFound<T>(...args: any[]): any
                failedConstraint<T>(...args: any[]): any
                protected clone(): java.lang.Object
                protected addTypes(arg0: int, arg1: java.util.HashSet, arg2: java.util.Vector): boolean
                protected loadClass(): java.lang.Class
                protected setRepositoryID(): boolean
            }
            interface Constants extends sun.rmi.rmic.Constants {
                public static idReplyHandler: sun.tools.java.Identifier
                public static idStubBase: sun.tools.java.Identifier
                public static idTieBase: sun.tools.java.Identifier
                public static idTieInterface: sun.tools.java.Identifier
                public static idPOAServantType: sun.tools.java.Identifier
                public static idDelegate: sun.tools.java.Identifier
                public static idOutputStream: sun.tools.java.Identifier
                public static idExtOutputStream: sun.tools.java.Identifier
                public static idInputStream: sun.tools.java.Identifier
                public static idExtInputStream: sun.tools.java.Identifier
                public static idSystemException: sun.tools.java.Identifier
                public static idBadMethodException: sun.tools.java.Identifier
                public static idPortableUnknownException: sun.tools.java.Identifier
                public static idApplicationException: sun.tools.java.Identifier
                public static idRemarshalException: sun.tools.java.Identifier
                public static idJavaIoExternalizable: sun.tools.java.Identifier
                public static idCorbaObject: sun.tools.java.Identifier
                public static idCorbaORB: sun.tools.java.Identifier
                public static idClassDesc: sun.tools.java.Identifier
                public static idJavaIoIOException: sun.tools.java.Identifier
                public static idIDLEntity: sun.tools.java.Identifier
                public static idValueBase: sun.tools.java.Identifier
                public static idBoxedRMI: sun.tools.java.Identifier
                public static idBoxedIDL: sun.tools.java.Identifier
                public static idCorbaUserException: sun.tools.java.Identifier
                public static idBoolean: sun.tools.java.Identifier
                public static idByte: sun.tools.java.Identifier
                public static idChar: sun.tools.java.Identifier
                public static idShort: sun.tools.java.Identifier
                public static idInt: sun.tools.java.Identifier
                public static idLong: sun.tools.java.Identifier
                public static idFloat: sun.tools.java.Identifier
                public static idDouble: sun.tools.java.Identifier
                public static idVoid: sun.tools.java.Identifier
                public static INDENT_STEP: int
                public static TAB_SIZE: int
                public static STATUS_PENDING: int
                public static STATUS_VALID: int
                public static STATUS_INVALID: int
                public static NAME_SEPARATOR: java.lang.String
                public static SERIAL_VERSION_UID: java.lang.String
                public static IDL_KEYWORDS: java.lang.String[]
                public static EXCEPTION_SUFFIX: java.lang.String
                public static ERROR_SUFFIX: java.lang.String
                public static EX_SUFFIX: java.lang.String
                public static IDL_REPOSITORY_ID_PREFIX: java.lang.String
                public static IDL_REPOSITORY_ID_VERSION: java.lang.String
                public static IDL_CORBA_MODULE: java.lang.String[]
                public static IDL_SEQUENCE_MODULE: java.lang.String[]
                public static IDL_BOXEDIDL_MODULE: java.lang.String[]
                public static IDL_CLASS: java.lang.String
                public static IDL_CLASS_MODULE: java.lang.String[]
                public static IDL_IDLENTITY: java.lang.String
                public static IDL_SERIALIZABLE: java.lang.String
                public static IDL_EXTERNALIZABLE: java.lang.String
                public static IDL_JAVA_IO_MODULE: java.lang.String[]
                public static IDL_ORG_OMG_CORBA_MODULE: java.lang.String[]
                public static IDL_ORG_OMG_CORBA_PORTABLE_MODULE: java.lang.String[]
                public static IDL_JAVA_LANG_OBJECT: java.lang.String
                public static IDL_JAVA_LANG_MODULE: java.lang.String[]
                public static IDL_JAVA_RMI_REMOTE: java.lang.String
                public static IDL_JAVA_RMI_MODULE: java.lang.String[]
                public static IDL_SEQUENCE: java.lang.String
                public static IDL_CONSTRUCTOR: java.lang.String
                public static IDL_NAME_SEPARATOR: java.lang.String
                public static IDL_BOOLEAN: java.lang.String
                public static IDL_BYTE: java.lang.String
                public static IDL_CHAR: java.lang.String
                public static IDL_SHORT: java.lang.String
                public static IDL_INT: java.lang.String
                public static IDL_LONG: java.lang.String
                public static IDL_FLOAT: java.lang.String
                public static IDL_DOUBLE: java.lang.String
                public static IDL_VOID: java.lang.String
                public static IDL_STRING: java.lang.String
                public static IDL_CONSTANT_STRING: java.lang.String
                public static IDL_CORBA_OBJECT: java.lang.String
                public static IDL_ANY: java.lang.String
                public static SOURCE_FILE_EXTENSION: java.lang.String
                public static IDL_FILE_EXTENSION: java.lang.String
                public static TYPE_VOID: int
                public static TYPE_BOOLEAN: int
                public static TYPE_BYTE: int
                public static TYPE_CHAR: int
                public static TYPE_SHORT: int
                public static TYPE_INT: int
                public static TYPE_LONG: int
                public static TYPE_FLOAT: int
                public static TYPE_DOUBLE: int
                public static TYPE_STRING: int
                public static TYPE_ANY: int
                public static TYPE_CORBA_OBJECT: int
                public static TYPE_REMOTE: int
                public static TYPE_ABSTRACT: int
                public static TYPE_NC_INTERFACE: int
                public static TYPE_VALUE: int
                public static TYPE_IMPLEMENTATION: int
                public static TYPE_NC_CLASS: int
                public static TYPE_ARRAY: int
                public static TYPE_JAVA_RMI_REMOTE: int
                public static TYPE_NONE: int
                public static TYPE_ALL: int
                public static TYPE_MASK: int
                public static TM_MASK: int
                public static TM_PRIMITIVE: int
                public static TM_COMPOUND: int
                public static TM_CLASS: int
                public static TM_INTERFACE: int
                public static TM_SPECIAL_CLASS: int
                public static TM_SPECIAL_INTERFACE: int
                public static TM_NON_CONFORMING: int
                public static TM_INNER: int
                public static ATTRIBUTE_NONE: int
                public static ATTRIBUTE_IS: int
                public static ATTRIBUTE_GET: int
                public static ATTRIBUTE_IS_RW: int
                public static ATTRIBUTE_GET_RW: int
                public static ATTRIBUTE_SET: int
                public static ATTRIBUTE_WIRE_PREFIX: java.lang.String[]
            }
            interface ContextElement {
                public getElementName(): java.lang.String
            }
            class ContextStack {
                public static TOP: int
                public static METHOD: int
                public static METHOD_RETURN: int
                public static METHOD_ARGUMENT: int
                public static METHOD_EXCEPTION: int
                public static MEMBER: int
                public static MEMBER_CONSTANT: int
                public static MEMBER_STATIC: int
                public static MEMBER_TRANSIENT: int
                public static IMPLEMENTS: int
                public static EXTENDS: int
                public constructor(arg0: sun.rmi.rmic.iiop.BatchEnvironment)
                public anyErrors(): boolean
                public setTrace(arg0: boolean): void
                public isTraceOn(): boolean
                public getEnv(): sun.rmi.rmic.iiop.BatchEnvironment
                public setNewContextCode(arg0: int): void
                public getCurrentContextCode(): int
                traceCallStack(): void
                public static dumpCallStack(): void
                trace(arg0: java.lang.String): void
                traceln(arg0: java.lang.String): void
                traceExistingType(arg0: sun.rmi.rmic.iiop.Type): void
                public push(arg0: sun.rmi.rmic.iiop.ContextElement): sun.rmi.rmic.iiop.TypeContext
                public pop(arg0: boolean): sun.rmi.rmic.iiop.TypeContext
                public size(): int
                getContext<T>(...args: any[]): any
                public isParentAValue(): boolean
                public getParentContext(): sun.rmi.rmic.iiop.TypeContext
                getContextCodeString<T>(...args: any[]): any
                public clear(): void
            }
            abstract class InterfaceType extends sun.rmi.rmic.iiop.CompoundType {
                public print(arg0: sun.rmi.rmic.IndentingWriter, arg1: boolean, arg2: boolean, arg3: boolean): void
                constructor(...args: any[])
            }
            class BatchEnvironment extends sun.rmi.rmic.BatchEnvironment implements sun.rmi.rmic.iiop.Constants {
                alreadyChecked: java.util.HashSet
                allTypes: java.util.Hashtable
                invalidTypes: java.util.Hashtable
                loader: sun.rmi.rmic.iiop.DirectoryLoader
                classPathLoader: sun.rmi.rmic.iiop.ClassPathLoader
                nameContexts: java.util.Hashtable
                namesCache: java.util.Hashtable
                modulesContext: sun.rmi.rmic.iiop.NameContext
                defRemote: sun.tools.java.ClassDefinition
                defError: sun.tools.java.ClassDefinition
                defException: sun.tools.java.ClassDefinition
                defRemoteException: sun.tools.java.ClassDefinition
                defCorbaObject: sun.tools.java.ClassDefinition
                defSerializable: sun.tools.java.ClassDefinition
                defExternalizable: sun.tools.java.ClassDefinition
                defThrowable: sun.tools.java.ClassDefinition
                defRuntimeException: sun.tools.java.ClassDefinition
                defIDLEntity: sun.tools.java.ClassDefinition
                defValueBase: sun.tools.java.ClassDefinition
                typeRemoteException: sun.tools.java.Type
                typeIOException: sun.tools.java.Type
                typeException: sun.tools.java.Type
                typeThrowable: sun.tools.java.Type
                contextStack: sun.rmi.rmic.iiop.ContextStack
                public constructor(arg0: java.io.OutputStream, arg1: sun.tools.java.ClassPath, arg2: sun.rmi.rmic.Main)
                public getParseNonConforming(): boolean
                public setParseNonConforming(arg0: boolean): void
                setStandardPackage(arg0: boolean): void
                getStandardPackage(): boolean
                public reset(): void
                public shutdown(): void
            }
            class TypeContext {
                constructor()
                public set(arg0: int, arg1: sun.rmi.rmic.iiop.ContextElement): void
                public getCode(): int
                public getName(): java.lang.String
                public getCandidateType(): sun.rmi.rmic.iiop.Type
                public getTypeDescription(): java.lang.String
                toString<T>(...args: any[]): any
                public isValue(): boolean
                public isConstant(): boolean
                public destroy(): void
            }
            class DirectoryLoader extends java.lang.ClassLoader {
                public constructor(arg0: java.io.File)
                loadClass<T>(...args: any[]): any
            }
            class ClassPathLoader extends java.lang.ClassLoader {
                public constructor(arg0: sun.tools.java.ClassPath)
                protected findClass(arg0: java.lang.String): java.lang.Class
            }
            class NameContext$Name {
                public name: java.lang.String
                public collisions: boolean
                this$0: sun.rmi.rmic.iiop.NameContext
                public constructor(arg0: sun.rmi.rmic.iiop.NameContext, arg1: java.lang.String, arg2: boolean)
            }
            class NameContext {
                public static forName(arg0: java.lang.String, arg1: boolean, arg2: sun.rmi.rmic.iiop.BatchEnvironment): sun.rmi.rmic.iiop.NameContext
                public constructor(arg0: boolean)
                public assertPut(arg0: java.lang.String): void
                public put(arg0: java.lang.String): void
                public get(arg0: java.lang.String): java.lang.String
                public clear(): void
            }
            class Util implements sun.rmi.rmic.Constants {
                public constructor()
                public static packagePrefix(): java.lang.String
                public static getOutputDirectoryForIDL(arg0: sun.tools.java.Identifier, arg1: java.io.File, arg2: sun.rmi.rmic.iiop.BatchEnvironment): java.io.File
                public static getOutputDirectoryForStub(arg0: sun.tools.java.Identifier, arg1: java.io.File, arg2: sun.rmi.rmic.iiop.BatchEnvironment): java.io.File
                public static correctPackageName(arg0: java.lang.String, arg1: boolean, arg2: boolean): java.lang.String
                public static isOffendingPackage(arg0: java.lang.String): boolean
                public static hasOffendingPrefix(arg0: java.lang.String): boolean
            }
            class StubGenerator extends sun.rmi.rmic.iiop.Generator {
                protected reverseIDs: boolean
                protected localStubs: boolean
                protected standardPackage: boolean
                protected useHash: boolean
                protected stubBaseClass: java.lang.String
                protected tieBaseClass: java.lang.String
                protected namesInUse: java.util.HashSet
                protected classesInUse: java.util.Hashtable
                protected imports: java.util.Hashtable
                protected importCount: int
                protected currentPackage: java.lang.String
                protected currentClass: java.lang.String
                protected castArray: boolean
                protected transactionalObjects: java.util.Hashtable
                protected POATie: boolean
                protected emitPermissionCheck: boolean
                static SINGLE_SLASH: java.lang.String
                static DOUBLE_SLASH: java.lang.String
                public constructor()
                public generate(arg0: sun.rmi.rmic.BatchEnvironment, arg1: sun.tools.java.ClassDefinition, arg2: java.io.File): void
                protected requireNewInstance(): boolean
                protected parseNonConforming(arg0: sun.rmi.rmic.iiop.ContextStack): boolean
                protected getTopType(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.CompoundType
                public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.Main): boolean
                protected getOutputTypesFor(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.HashSet): sun.rmi.rmic.iiop.Generator$OutputType[]
                protected getFileNameExtensionFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType): java.lang.String
                protected writeOutputFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: java.util.HashSet, arg2: sun.rmi.rmic.IndentingWriter): void
                protected writeStub(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: sun.rmi.rmic.IndentingWriter): void
                addClassInUse<T>(...args: any[]): any
                addStubInUse<T>(...args: any[]): any
                getStubNameFor(arg0: sun.rmi.rmic.iiop.Type, arg1: boolean): java.lang.String
                getName<T>(...args: any[]): any
                getExceptionName(arg0: sun.rmi.rmic.iiop.Type): java.lang.String
                getStubName(arg0: sun.rmi.rmic.iiop.Type): java.lang.String
                setStandardClassesInUse(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: boolean): void
                addClassesInUse(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.iiop.RemoteType[]): void
                writePackageAndImports(arg0: sun.rmi.rmic.IndentingWriter): void
                implementsRemote(arg0: sun.rmi.rmic.iiop.CompoundType): boolean
                writeStubMethod(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.rmi.rmic.iiop.CompoundType$Method, arg2: sun.rmi.rmic.iiop.CompoundType): void
                writeLocalStubMethodBody(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.rmi.rmic.iiop.CompoundType$Method, arg2: sun.rmi.rmic.iiop.CompoundType): void
                writeNonLocalStubMethodBody(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.rmi.rmic.iiop.CompoundType$Method, arg2: sun.rmi.rmic.iiop.CompoundType): void
                allocateResult(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.rmi.rmic.iiop.Type): void
                getTypeCode(arg0: sun.rmi.rmic.iiop.Type): int
                writeMarshalArgument(arg0: sun.rmi.rmic.IndentingWriter, arg1: java.lang.String, arg2: sun.rmi.rmic.iiop.Type, arg3: java.lang.String): void
                writeUnmarshalArgument(arg0: sun.rmi.rmic.IndentingWriter, arg1: java.lang.String, arg2: sun.rmi.rmic.iiop.Type, arg3: java.lang.String): void
                getAllRemoteRepIDs(arg0: sun.rmi.rmic.iiop.CompoundType): java.lang.String[]
                collectAllRemoteInterfaces(arg0: sun.rmi.rmic.iiop.CompoundType): sun.rmi.rmic.iiop.Type[]
                addRemoteInterfaces(arg0: java.util.Vector, arg1: sun.rmi.rmic.iiop.CompoundType): void
                getDirectRemoteInterfaces(arg0: sun.rmi.rmic.iiop.CompoundType): sun.rmi.rmic.iiop.RemoteType[]
                countRemote(arg0: sun.rmi.rmic.iiop.Type[], arg1: boolean): int
                writeCastArray(arg0: sun.rmi.rmic.IndentingWriter): void
                writeIds(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.rmi.rmic.iiop.CompoundType, arg2: boolean): void
                protected writeTie(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: sun.rmi.rmic.IndentingWriter): void
                public catchWrongPolicy(arg0: sun.rmi.rmic.IndentingWriter): void
                public catchServantNotActive(arg0: sun.rmi.rmic.IndentingWriter): void
                public catchObjectNotActive(arg0: sun.rmi.rmic.IndentingWriter): void
                public write_tie_thisObject_method(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.tools.java.Identifier): void
                public write_tie_deactivate_method(arg0: sun.rmi.rmic.IndentingWriter): void
                public write_tie_orb_method(arg0: sun.rmi.rmic.IndentingWriter): void
                public write_tie__ids_method(arg0: sun.rmi.rmic.IndentingWriter): void
                getStringsHash(arg0: sun.rmi.rmic.iiop.CompoundType$Method[]): sun.rmi.rmic.iiop.StaticStringsHash
                static needNewReadStreamClass(arg0: sun.rmi.rmic.iiop.Type): boolean
                static needNewWriteStreamClass(arg0: sun.rmi.rmic.iiop.Type): boolean
                writeCopyArguments(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: sun.rmi.rmic.IndentingWriter): java.lang.String[]
                getRepositoryID(arg0: sun.rmi.rmic.iiop.Type): java.lang.String
                getExceptionRepositoryID(arg0: sun.rmi.rmic.iiop.Type): java.lang.String
                getVariableName(arg0: java.lang.String): java.lang.String
                addNamesInUse<T>(...args: any[]): any
                addNameInUse(arg0: java.lang.String): void
                static mustCopy(arg0: sun.rmi.rmic.iiop.Type): boolean
                getStubExceptions(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: boolean): sun.rmi.rmic.iiop.ValueType[]
                getTieExceptions(arg0: sun.rmi.rmic.iiop.CompoundType$Method): sun.rmi.rmic.iiop.ValueType[]
                writeTieMethod(arg0: sun.rmi.rmic.IndentingWriter, arg1: sun.rmi.rmic.iiop.CompoundType, arg2: sun.rmi.rmic.iiop.CompoundType$Method): void
                writeMarshalArguments(arg0: sun.rmi.rmic.IndentingWriter, arg1: java.lang.String, arg2: sun.rmi.rmic.iiop.Type[], arg3: java.lang.String[]): void
                testUtil(arg0: java.lang.String, arg1: sun.rmi.rmic.iiop.Type): java.lang.String
            }
            class Generator$OutputType {
                this$0: sun.rmi.rmic.iiop.Generator
                public constructor(arg0: sun.rmi.rmic.iiop.Generator, arg1: java.lang.String, arg2: sun.rmi.rmic.iiop.Type)
                public getName(): java.lang.String
                public getType(): sun.rmi.rmic.iiop.Type
            }
            abstract class Generator implements sun.rmi.rmic.Generator , sun.rmi.rmic.iiop.Constants {
                protected alwaysGenerate: boolean
                protected env: sun.rmi.rmic.iiop.BatchEnvironment
                protected contextStack: sun.rmi.rmic.iiop.ContextStack
                protected idl: boolean
                public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.Main): boolean
                protected parseNonConforming(arg0: sun.rmi.rmic.iiop.ContextStack): boolean
                protected getTopType(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.CompoundType
                protected getOutputTypesFor(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.HashSet): sun.rmi.rmic.iiop.Generator$OutputType[]
                protected getFileNameExtensionFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType): java.lang.String
                protected writeOutputFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: java.util.HashSet, arg2: sun.rmi.rmic.IndentingWriter): void
                protected requireNewInstance(): boolean
                public requiresGeneration(arg0: java.io.File, arg1: sun.rmi.rmic.iiop.Type): boolean
                protected newInstance(): sun.rmi.rmic.iiop.Generator
                protected constructor()
                public generate(arg0: sun.rmi.rmic.BatchEnvironment, arg1: sun.tools.java.ClassDefinition, arg2: java.io.File): void
                protected generateOutputFiles(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.iiop.BatchEnvironment, arg2: java.io.File): void
                protected getFileFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: java.io.File): java.io.File
                protected getOutputId(arg0: sun.rmi.rmic.iiop.Generator$OutputType): sun.tools.java.Identifier
                protected compileJavaSourceFile(arg0: sun.rmi.rmic.iiop.Generator$OutputType): boolean
            }
            class RemoteType extends sun.rmi.rmic.iiop.InterfaceType {
                public static forRemote(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack, arg2: boolean): sun.rmi.rmic.iiop.RemoteType
                public getTypeDescription(): java.lang.String
                constructor(...args: any[])
            }
            class StaticStringsHash {
                public strings: java.lang.String[]
                public keys: int[]
                public buckets: int[][]
                public method: java.lang.String
                public getKey(arg0: java.lang.String): int
                public constructor(arg0: java.lang.String[])
                public static main(arg0: java.lang.String[]): void
            }
            class StringComparator implements java.util.Comparator {
                constructor()
                public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
            }
            class UserExceptionComparator implements java.util.Comparator {
                constructor()
                public compare(arg0: java.lang.Object, arg1: java.lang.Object): int
                isUserException(arg0: sun.rmi.rmic.iiop.ValueType): boolean
            }
            class SpecialInterfaceType extends sun.rmi.rmic.iiop.InterfaceType {
                public static forSpecial(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.SpecialInterfaceType
                public getTypeDescription(): java.lang.String
            }
            class SpecialClassType extends sun.rmi.rmic.iiop.ClassType {
                public static forSpecial(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.SpecialClassType
                public getTypeDescription(): java.lang.String
            }
            class PrintGenerator implements sun.rmi.rmic.Generator , sun.rmi.rmic.iiop.Constants {
                public constructor()
                public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.Main): boolean
                public generate(arg0: sun.rmi.rmic.BatchEnvironment, arg1: sun.tools.java.ClassDefinition, arg2: java.io.File): void
            }
            class PrimitiveType extends sun.rmi.rmic.iiop.Type {
                public static forPrimitive(arg0: sun.tools.java.Type, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.PrimitiveType
                public getSignature(): java.lang.String
                public getTypeDescription(): java.lang.String
                public getQualifiedIDLName(arg0: boolean): java.lang.String
                protected loadClass(): java.lang.Class
            }
            class Null {
                constructor()
            }
            class NCInterfaceType extends sun.rmi.rmic.iiop.InterfaceType {
                public static forNCInterface(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.NCInterfaceType
                public getTypeDescription(): java.lang.String
            }
            class NCClassType extends sun.rmi.rmic.iiop.ClassType {
                public static forNCClass(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.NCClassType
                public getTypeDescription(): java.lang.String
            }
            class ImplementationType extends sun.rmi.rmic.iiop.ClassType {
                public static forImplementation(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack, arg2: boolean): sun.rmi.rmic.iiop.ImplementationType
                public getTypeDescription(): java.lang.String
            }
            class IDLNames implements sun.rmi.rmic.iiop.Constants {
                public static ASCII_HEX: byte[]
                public constructor()
                public static getMemberOrMethodName(arg0: sun.rmi.rmic.iiop.NameContext, arg1: java.lang.String, arg2: sun.rmi.rmic.iiop.BatchEnvironment): java.lang.String
                public static convertToISOLatin1(arg0: java.lang.String): java.lang.String
                public static convertIDLKeywords(arg0: java.lang.String): java.lang.String
                public static convertLeadingUnderscores(arg0: java.lang.String): java.lang.String
                public static getClassOrInterfaceName(arg0: sun.tools.java.Identifier, arg1: sun.rmi.rmic.iiop.BatchEnvironment): java.lang.String
                public static getExceptionName(arg0: java.lang.String): java.lang.String
                public static getModuleNames(arg0: sun.tools.java.Identifier, arg1: boolean, arg2: sun.rmi.rmic.iiop.BatchEnvironment): java.lang.String[]
                public static getArrayName(arg0: sun.rmi.rmic.iiop.Type, arg1: int): java.lang.String
                public static getArrayModuleNames(arg0: sun.rmi.rmic.iiop.Type): java.lang.String[]
                public static setMethodNames(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.iiop.CompoundType$Method[], arg2: sun.rmi.rmic.iiop.BatchEnvironment): void
                public static setMemberNames(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.iiop.CompoundType$Member[], arg2: sun.rmi.rmic.iiop.CompoundType$Method[], arg3: sun.rmi.rmic.iiop.BatchEnvironment): void
                public static getTypeName(arg0: int, arg1: boolean): java.lang.String
                public static getQualifiedName(arg0: java.lang.String[], arg1: java.lang.String): java.lang.String
                public static replace(arg0: java.lang.String, arg1: java.lang.String, arg2: java.lang.String): java.lang.String
                public static getIDLRepositoryID(arg0: java.lang.String): java.lang.String
            }
            class IDLGenerator extends sun.rmi.rmic.iiop.Generator {
                public constructor()
                protected requireNewInstance(): boolean
                protected parseNonConforming(arg0: sun.rmi.rmic.iiop.ContextStack): boolean
                protected getTopType(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.CompoundType
                protected getOutputId(arg0: sun.rmi.rmic.iiop.Generator$OutputType): sun.tools.java.Identifier
                protected getFileNameExtensionFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType): java.lang.String
                public parseArgs(arg0: java.lang.String[], arg1: sun.rmi.rmic.Main): boolean
                protected getOutputTypesFor(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.HashSet): sun.rmi.rmic.iiop.Generator$OutputType[]
                protected getAllReferencesFor(arg0: sun.rmi.rmic.iiop.CompoundType): java.util.Vector
                protected accumulateReferences(arg0: java.util.Hashtable, arg1: java.util.Hashtable, arg2: java.util.Hashtable): void
                protected isIDLGeneratedFor(arg0: sun.rmi.rmic.iiop.CompoundType): boolean
                protected writeOutputFor(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: java.util.HashSet, arg2: sun.rmi.rmic.IndentingWriter): void
                protected writeImplementation(arg0: sun.rmi.rmic.iiop.ImplementationType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeNCType(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeRemote(arg0: sun.rmi.rmic.iiop.RemoteType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeValue(arg0: sun.rmi.rmic.iiop.ValueType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeProlog(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.Hashtable, arg2: java.util.Hashtable, arg3: java.util.Hashtable, arg4: java.util.Hashtable, arg5: java.util.Hashtable, arg6: sun.rmi.rmic.IndentingWriter): void
                protected writeEpilog(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.Hashtable, arg2: sun.rmi.rmic.IndentingWriter): void
                protected writeSpecial(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeJavaIoSerializable(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeJavaIoExternalizable(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeJavaLangObject(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeJavaRmiRemote(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeIDLEntity(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected getInterfaces(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.Hashtable): void
                protected getInheritance(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.Hashtable): void
                protected getMethodReferences(arg0: java.util.Vector, arg1: java.util.Hashtable, arg2: java.util.Hashtable, arg3: java.util.Hashtable, arg4: java.util.Hashtable): void
                protected getMemberReferences(arg0: java.util.Vector, arg1: java.util.Hashtable, arg2: java.util.Hashtable, arg3: java.util.Hashtable): void
                protected addReference(arg0: sun.rmi.rmic.iiop.Type, arg1: java.util.Hashtable, arg2: java.util.Hashtable, arg3: java.util.Hashtable): void
                protected isSpecialReference(arg0: sun.rmi.rmic.iiop.Type): boolean
                protected getExceptions(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: java.util.Hashtable): void
                protected getMethods(arg0: sun.rmi.rmic.iiop.CompoundType): java.util.Vector
                protected getConstants(arg0: sun.rmi.rmic.iiop.CompoundType): java.util.Vector
                protected getData(arg0: sun.rmi.rmic.iiop.CompoundType): java.util.Vector
                protected writeForwardReferences(arg0: java.util.Hashtable, arg1: sun.rmi.rmic.IndentingWriter): void
                writeForwardReference<T>(...args: any[]): any
                protected writeIDLEntityIncludes(arg0: java.util.Hashtable, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeIncludes(arg0: java.util.Hashtable, arg1: boolean, arg2: sun.rmi.rmic.IndentingWriter): void
                protected writeBoxedRMIIncludes(arg0: java.util.Hashtable, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeInheritedIncludes(arg0: java.util.Hashtable, arg1: sun.rmi.rmic.IndentingWriter): void
                writeInclude<T>(...args: any[]): any
                protected getQualifiedName(arg0: sun.rmi.rmic.iiop.Type): java.lang.String
                protected getQualifiedIDLName(arg0: sun.rmi.rmic.iiop.Type): java.lang.String
                protected getIDLModuleNames(arg0: sun.rmi.rmic.iiop.Type): java.lang.String[]
                protected translateJavaPackage(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.Vector): boolean
                protected stripJavaPackage(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: java.util.Vector): void
                protected writeSequence(arg0: sun.rmi.rmic.iiop.Generator$OutputType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeBoxedIDL(arg0: sun.rmi.rmic.iiop.CompoundType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeException(arg0: sun.rmi.rmic.iiop.ClassType, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeRepositoryID(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeInherits(arg0: java.util.Hashtable, arg1: boolean, arg2: sun.rmi.rmic.IndentingWriter): void
                protected writeConstant(arg0: sun.rmi.rmic.iiop.CompoundType$Member, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeData(arg0: sun.rmi.rmic.iiop.CompoundType$Member, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeAttribute(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeMethod(arg0: sun.rmi.rmic.iiop.CompoundType$Method, arg1: sun.rmi.rmic.IndentingWriter): void
                protected unEsc(arg0: java.lang.String): java.lang.String
                protected writeBanner(arg0: sun.rmi.rmic.iiop.Type, arg1: int, arg2: boolean, arg3: sun.rmi.rmic.IndentingWriter): void
                protected writeIncOrb(arg0: sun.rmi.rmic.IndentingWriter): void
                protected writeIfndef(arg0: sun.rmi.rmic.iiop.Type, arg1: int, arg2: boolean, arg3: boolean, arg4: sun.rmi.rmic.IndentingWriter): void
                protected writeEndif(arg0: sun.rmi.rmic.IndentingWriter): void
                protected writeModule1(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
                protected writeModule2(arg0: sun.rmi.rmic.iiop.Type, arg1: sun.rmi.rmic.IndentingWriter): void
            }
            class ArrayType extends sun.rmi.rmic.iiop.Type {
                public static forArray(arg0: sun.tools.java.Type, arg1: sun.rmi.rmic.iiop.ContextStack): sun.rmi.rmic.iiop.ArrayType
                public getSignature(): java.lang.String
                public getElementType(): sun.rmi.rmic.iiop.Type
                public getArrayDimension(): int
                public getArrayBrackets(): java.lang.String
                toString<T>(...args: any[]): any
                public getTypeDescription(): java.lang.String
                public getTypeName(arg0: boolean, arg1: boolean, arg2: boolean): java.lang.String
                protected swapInvalidTypes(): void
                protected addTypes(arg0: int, arg1: java.util.HashSet, arg2: java.util.Vector): boolean
                protected loadClass(): java.lang.Class
                protected destroy(): void
            }
            class AbstractType extends sun.rmi.rmic.iiop.RemoteType {
                public static forAbstract(arg0: sun.tools.java.ClassDefinition, arg1: sun.rmi.rmic.iiop.ContextStack, arg2: boolean): sun.rmi.rmic.iiop.AbstractType
                public getTypeDescription(): java.lang.String
            }

         }

      }

   }

}
declare namespace org {
   namespace relaxng {
      namespace datatype {
         namespace helpers {
            class StreamingValidatorImpl implements org.relaxng.datatype.DatatypeStreamingValidator {
                public addCharacters(arg0: char[], arg1: int, arg2: int): void
                public isValid(): boolean
                public checkValid(): void
                public constructor(arg0: org.relaxng.datatype.Datatype, arg1: org.relaxng.datatype.ValidationContext)
            }
            class ParameterlessDatatypeBuilder implements org.relaxng.datatype.DatatypeBuilder {
                public constructor(arg0: org.relaxng.datatype.Datatype)
                public addParameter(arg0: java.lang.String, arg1: java.lang.String, arg2: org.relaxng.datatype.ValidationContext): void
                public createDatatype(): org.relaxng.datatype.Datatype
            }
            class DatatypeLibraryLoader$Service$ProviderEnumeration implements java.util.Enumeration {
                this$0: org.relaxng.datatype.helpers.DatatypeLibraryLoader$Service
                public hasMoreElements(): boolean
                public nextElement(): java.lang.Object
                constructor(arg0: org.relaxng.datatype.helpers.DatatypeLibraryLoader$Service, arg1: org.relaxng.datatype.helpers.DatatypeLibraryLoader$1)
            }
            class DatatypeLibraryLoader$Service$Singleton implements java.util.Enumeration {
                public hasMoreElements(): boolean
                public nextElement(): java.lang.Object
                constructor(arg0: java.lang.Object, arg1: org.relaxng.datatype.helpers.DatatypeLibraryLoader$1)
            }
            class DatatypeLibraryLoader$Service$Loader {
                getResources(arg0: java.lang.String): java.util.Enumeration
                loadClass(arg0: java.lang.String): java.lang.Class
                constructor(arg0: org.relaxng.datatype.helpers.DatatypeLibraryLoader$1)
            }
            class DatatypeLibraryLoader$Service$Loader2 extends org.relaxng.datatype.helpers.DatatypeLibraryLoader$Service$Loader {
                constructor()
                getResources(arg0: java.lang.String): java.util.Enumeration
                loadClass(arg0: java.lang.String): java.lang.Class
            }
            class DatatypeLibraryLoader$Service {
                public constructor(arg0: java.lang.Class)
                public getProviders(): java.util.Enumeration
                static access$000(arg0: org.relaxng.datatype.helpers.DatatypeLibraryLoader$Service): java.util.Vector
                static access$100(arg0: org.relaxng.datatype.helpers.DatatypeLibraryLoader$Service): boolean
            }
            class DatatypeLibraryLoader$1 {
            }
            class DatatypeLibraryLoader implements org.relaxng.datatype.DatatypeLibraryFactory {
                public constructor()
                public createDatatypeLibrary(arg0: java.lang.String): org.relaxng.datatype.DatatypeLibrary
            }

         }
         interface DatatypeStreamingValidator {
             public addCharacters(arg0: char[], arg1: int, arg2: int): void
             public isValid(): boolean
             public checkValid(): void
         }
         interface Datatype {
             public static ID_TYPE_NULL: int
             public static ID_TYPE_ID: int
             public static ID_TYPE_IDREF: int
             public static ID_TYPE_IDREFS: int
             public isValid(arg0: java.lang.String, arg1: org.relaxng.datatype.ValidationContext): boolean
             public checkValid(arg0: java.lang.String, arg1: org.relaxng.datatype.ValidationContext): void
             public createStreamingValidator(arg0: org.relaxng.datatype.ValidationContext): org.relaxng.datatype.DatatypeStreamingValidator
             public createValue(arg0: java.lang.String, arg1: org.relaxng.datatype.ValidationContext): java.lang.Object
             public sameValue(arg0: java.lang.Object, arg1: java.lang.Object): boolean
             public valueHashCode(arg0: java.lang.Object): int
             public getIdType(): int
             public isContextDependent(): boolean
         }
         interface ValidationContext {
             public resolveNamespacePrefix(arg0: java.lang.String): java.lang.String
             public getBaseUri(): java.lang.String
             public isUnparsedEntity(arg0: java.lang.String): boolean
             public isNotation(arg0: java.lang.String): boolean
         }
         class DatatypeException extends java.lang.Exception {
             public static UNKNOWN: int
             constructor(...args: any[])
             public getIndex(): int
         }
         interface DatatypeBuilder {
             public addParameter(arg0: java.lang.String, arg1: java.lang.String, arg2: org.relaxng.datatype.ValidationContext): void
             public createDatatype(): org.relaxng.datatype.Datatype
         }
         interface DatatypeLibraryFactory {
             public createDatatypeLibrary(arg0: java.lang.String): org.relaxng.datatype.DatatypeLibrary
         }
         interface DatatypeLibrary {
             public createDatatypeBuilder(arg0: java.lang.String): org.relaxng.datatype.DatatypeBuilder
             public createDatatype(arg0: java.lang.String): org.relaxng.datatype.Datatype
         }

      }

   }

}
